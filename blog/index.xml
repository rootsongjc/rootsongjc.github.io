
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 博客</title>
    <link>https://jimmysong.io/blog/</link>
    <description>Recent content in 博客 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    
	  <atom:link href="https://jimmysong.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>Cilium 2024 年度报告解读</title>
      <link>https://jimmysong.io/blog/cilium-annual-report-2024/</link>
      <pubDate>Tue, 07 Jan 2025 18:28:38 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/cilium-annual-report-2024/</guid>
      <description>
        
        
        &lt;p&gt;近日 Cilium 项目发布了 2024 年度报告，见 &lt;a href=&#34;https://github.com/cilium/cilium.io/blob/main/Annual-Reports/Cilium_Annual_Report_2024.pdf&#34; title=&#34;Github&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;。这份报告详细回顾了 Cilium 在过去一年中所取得的重大成就，并展望了其在云原生网络和安全领域的未来发展方向。Cilium 项目自首次提交以来，历经近十年发展，其势头持续强劲，正引领云原生网络和安全领域的新变革。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cilium-annual-report-2024/f1.svg&#34; data-img=&#34;/blog/cilium-annual-report-2024/f1.svg&#34; alt=&#34;image&#34; data-caption=&#34;Cilium 2024 年度报告概述&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cilium 2024 年度报告概述&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;cilium-的卓越发展&#34;&gt;Cilium 的卓越发展&lt;/h2&gt;
&lt;p&gt;2024 年是 Cilium 发展历程中至关重要的一年，它不仅巩固了其作为 Kubernetes 事实标准 CNI 的地位，更发展成为 Kubernetes 环境下的综合网络堆栈。Cilium 的演进展示了其应对现代云原生环境挑战的卓越能力，从最初的 pod 到 pod 连接方案，扩展到一个统一网络、可观察性和安全性的项目，这一切都由 eBPF 技术驱动。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cilium-annual-report-2024/f2.svg&#34; data-img=&#34;/blog/cilium-annual-report-2024/f2.svg&#34; alt=&#34;image&#34; data-caption=&#34;Cilium 在 2024 年的演变&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cilium 在 2024 年的演变&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;关键里程碑与重大成就&#34;&gt;关键里程碑与重大成就&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cilium-annual-report-2024/f3.svg&#34; data-img=&#34;/blog/cilium-annual-report-2024/f3.svg&#34; alt=&#34;image&#34; data-caption=&#34;关键里程碑与重大成就&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;关键里程碑与重大成就&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;社区蓬勃发展&lt;/strong&gt;：Cilium 社区持续壮大，贡献者和贡献公司数量不断增加，用户遍布金融、物流、媒体、电信等众多行业。自加入 CNCF 以来，贡献公司数量增长了 90%，达到 1,011 家，个人贡献者增长了 252%，达到 4,464 人。Cilium 还是 CNCF 生态系统中第三大发展最快的项目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术创新&lt;/strong&gt;：Cilium 在 2024 年发布了 1.15 和 1.16 两个主要版本，带来了诸多创新功能。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cilium 1.15&lt;/strong&gt;: 引入了对 Gateway API 1.0 的全面支持，使 Cluster Mesh 的可扩展性翻倍，增强了可观测性，将流量与网络策略关联，并扩展了 BGP 的功能，以更好地集成外部世界。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium 1.16&lt;/strong&gt;: 以“更快、更强、更智能”为主题，通过 netkit 消除了虚拟网络开销，实现了主机和容器之间的性能对等；引入了 BGPv2 API，支持用户定义复杂的网络策略；支持多播数据路径；并显著优化了 CPU 和内存使用，同时将尾部延迟降低了高达 5 倍。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广泛应用&lt;/strong&gt;：用户调查显示，Cilium 正在逐步接管 Kubernetes 网络堆栈，Cluster Mesh、BGP 和 Gateway API 等功能已广泛应用于生产环境。95% 的受访者运行多个 Kubernetes 集群，而 Cilium 被 CNCF 技术雷达评为顶级多集群管理工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行业认可&lt;/strong&gt;：Cilium 荣获 OpenUK 2024 年度开源软件奖。同时，在 CNCF 的多集群管理技术雷达中，Cilium 被评为最值得采用的技术，并在实用性和成熟度方面均获得最高分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eBPF 安全&lt;/strong&gt;：eBPF 基金会发布了两份重要研究报告，提升了基于 eBPF 部署的安全性与操作指导：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eBPF 安全威胁模型&lt;/strong&gt;：详细阐述了 eBPF 的潜在风险，并提供了相应的缓解策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eBPF 验证器代码审计&lt;/strong&gt;：强调了验证器在保障 eBPF 部署安全方面的作用，并提出了改进建议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户反馈与应用案例&#34;&gt;用户反馈与应用案例&lt;/h2&gt;
&lt;p&gt;来自用户的反馈和案例进一步印证了 Cilium 在性能、成本效益以及功能方面的优势。用户普遍认为，Cilium 有效降低了网络成本和 CPU 消耗，同时提供了卓越的性能和低延迟。此外，Cilium 的可观察性工具（如 Hubble）以及网络策略功能也受到了用户的广泛好评。&lt;/p&gt;
&lt;h2 id=&#34;未来展望&#34;&gt;未来展望&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cilium-annual-report-2024/f4.svg&#34; data-img=&#34;/blog/cilium-annual-report-2024/f4.svg&#34; alt=&#34;image&#34; data-caption=&#34;Cilium 2025 年发展展望&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cilium 2025 年发展展望&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;展望 2025 年，Cilium 的发展势头将持续增强。平台工程和整合趋势正在重塑组织管理 Kubernetes 网络的方式，而 Cilium 正处于这场变革的核心。我们预计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 堆栈将进一步整合网络功能。&lt;/li&gt;
&lt;li&gt;Tetragon 在高级安全可观察性方面的应用将更加普及。&lt;/li&gt;
&lt;li&gt;Cilium 将更深入地集成外部和传统工作负载至 Kubernetes 环境。&lt;/li&gt;
&lt;li&gt;Cilium 不仅会被广泛用作 CNI，更将作为全面的 Kubernetes 网络解决方案。&lt;/li&gt;
&lt;li&gt;Tetragon 将不断进化，提供更强大的检测能力和更具行动力的威胁响应方案。&lt;/li&gt;
&lt;li&gt;Cilium 的混合云和多云集成将在 2025 年发挥更大的作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cilium 对外部工作负载、4 层负载均衡以及 BGP 增强功能的支持将弥合 Kubernetes 原生系统与传统系统之间的鸿沟。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Cilium 项目在 2024 年取得了巨大成功，确立了其在 Kubernetes 网络领域的领导地位。Cilium 不仅仅是一个 CNI，更是一个涵盖网络、可观察性和安全性的综合 Kubernetes 网络解决方案。随着云原生技术的不断发展，Cilium 将继续引领行业创新，为用户提供更强大、更可靠的云原生网络解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：本文中的图片利用 &lt;a href=&#34;https://www.napkin.ai/&#34; title=&#34;napkin.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;napkin.ai&lt;/a&gt; 制作。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio Ambient 模式中的数据包生命周期及流量优化</title>
      <link>https://jimmysong.io/blog/istio-ambient-packet-lifecycle-optimization/</link>
      <pubDate>Tue, 07 Jan 2025 15:07:30 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-ambient-packet-lifecycle-optimization/</guid>
      <description>
        
        
        &lt;p&gt;本文围绕 Istio Ambient 模式下的数据包生命周期进行深入剖析，从初始数据包的流量拦截与目标解析，到后续数据包的快速转发与优化策略，帮助读者理解 Ambient 模式背后的技术逻辑和性能实践。&lt;/p&gt;
&lt;h2 id=&#34;数据包生命周期概览从内核态到用户态&#34;&gt;数据包生命周期概览：从内核态到用户态&lt;/h2&gt;
&lt;p&gt;在 Ambient 模式中，数据包的处理路径从 Pod 内核态网络栈开始，经由 &lt;code&gt;iptables&lt;/code&gt; 规则被拦截后进入 ztunnel 的用户态处理逻辑。ztunnel 负责透明代理、策略验证、加密隧道建立等任务，最终将数据包通过内核态网络再次转发给目标服务或下一个 ztunnel。其核心思想是通过首次数据包的详细解析和标记，为后续数据包铺路，从而减少重复开销。&lt;/p&gt;
&lt;p&gt;下图展示了 Istio Ambient 模式中从 Pod 到 ztunnel 的数据包生命周期：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-packet-lifecycle-optimization/4c7d5e7ac5168314a5c5de34a39a4f9c.svg&#34; data-img=&#34;/blog/istio-ambient-packet-lifecycle-optimization/4c7d5e7ac5168314a5c5de34a39a4f9c.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio Ambient 模式中从 Pod 到 ztunnel 的数据包生命周期&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio Ambient 模式中从 Pod 到 ztunnel 的数据包生命周期&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;接下来，我们将详细介绍首个数据包与后续数据包的处理路径，并分析其中的技术要点与优化手段。&lt;/p&gt;
&lt;h2 id=&#34;首个数据包路径从拦截到目标解析&#34;&gt;首个数据包路径：从拦截到目标解析&lt;/h2&gt;
&lt;p&gt;当应用程序在 Pod 内发出数据包（如 HTTP 请求），数据包首先经过 Pod 的网络命名空间和内核态网络栈进行处理。&lt;/p&gt;
&lt;h3 id=&#34;透明拦截与目标解析&#34;&gt;透明拦截与目标解析&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 规则对出站流量进行筛选，若发现目标地址为非本地资源且数据包未携带特定标记，则将数据包重定向至 ztunnel 的透明代理端口（如 &lt;code&gt;15006&lt;/code&gt; 或 &lt;code&gt;15008&lt;/code&gt;）。借助 &lt;code&gt;IP_TRANSPARENT&lt;/code&gt; 和 &lt;code&gt;SO_ORIGINAL_DST&lt;/code&gt; 选项，ztunnel 可提取数据包的原始目标地址，实现无缝透明代理。&lt;/p&gt;
&lt;h3 id=&#34;用户态处理策略验证与加密隧道&#34;&gt;用户态处理：策略验证与加密隧道&lt;/h3&gt;
&lt;p&gt;数据包进入 ztunnel 用户态后，将经历以下处理流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;策略验证&lt;/strong&gt;：RBAC 验证、mTLS 加密判定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标流量处理&lt;/strong&gt;：对网格内部流量，通过 HTTP/2 CONNECT 隧道（HBONE）加密与跨节点传输；对网格外流量，直接通过本地 TCP 连接透传。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完成处理后，ztunnel 基于数据包解析结果建立出站连接（如 HTTP/2 隧道或明文 TCP），并将数据包送回内核态，最终转发至目标服务或下一个 ztunnel。&lt;/p&gt;
&lt;h2 id=&#34;后续数据包路径利用-conntrack-与隧道复用&#34;&gt;后续数据包路径：利用 Conntrack 与隧道复用&lt;/h2&gt;
&lt;p&gt;首个数据包完成解析与策略验证后，Linux 内核的连接跟踪（&lt;code&gt;conntrack&lt;/code&gt;）记录连接状态与标记。后续数据包无需再次经历复杂的拦截与解析，直接进入 ztunnel 的 inbound socket。&lt;/p&gt;
&lt;h3 id=&#34;连接跟踪与快速转发&#34;&gt;连接跟踪与快速转发&lt;/h3&gt;
&lt;p&gt;后续数据包基于 &lt;code&gt;conntrack&lt;/code&gt; 跟踪机制，快速到达 ztunnel 的 inbound socket。ztunnel 可直接识别目标地址与安全策略，避免重复的解析与验证。&lt;/p&gt;
&lt;h3 id=&#34;隧道与明文连接优化&#34;&gt;隧道与明文连接优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HBONE 隧道&lt;/strong&gt;：支持多路复用，提高加密流量处理效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;明文连接&lt;/strong&gt;：对无需加密的流量，直接复用现有 TCP 连接，进一步减少处理开销。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;技术要点与优化策略&#34;&gt;技术要点与优化策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;透明代理&lt;/strong&gt;：利用 &lt;code&gt;IP_TRANSPARENT&lt;/code&gt; 实现透明流量捕获与目标解析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核与用户态高效协作&lt;/strong&gt;：首个数据包通过用户态完成深度处理，后续数据包借助 &lt;code&gt;conntrack&lt;/code&gt; 与 inbound socket 实现快速转发，降低上下文切换成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路复用&lt;/strong&gt;：借助 HTTP/2 隧道实现高效加密与负载均衡，优化传输性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实践建议&#34;&gt;实践建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;多平台适配&lt;/strong&gt;：根据平台特性调整透明代理实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调优与监控&lt;/strong&gt;：结合 ztunnel 日志与服务网格监控工具，优化流量路径与性能表现。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio Ambient 模式通过数据包生命周期设计，在透明代理、性能优化与安全策略间实现平衡。zTunnel 通过高效的用户态处理与内核态快速转发，将应用程序的透明体验与底层网络优化有效结合，助力服务网格的实践与推广。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>深入解析 Envoy 外部处理过滤器（ext_proc）</title>
      <link>https://jimmysong.io/blog/envoy-ext-proc-guide/</link>
      <pubDate>Fri, 20 Dec 2024 11:31:33 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-ext-proc-guide/</guid>
      <description>
        
        
        &lt;p&gt;在微服务架构中，API 网关通常需要对请求和响应进行高级别的处理，如身份验证、数据转换和安全检查。Envoy 提供的 &lt;code&gt;ext_proc&lt;/code&gt; 外部处理过滤器，是一个强大的工具，通过与 gRPC 服务交互，实现灵活的请求与响应处理。本文将深入解析该过滤器的功能、配置与性能优化策略，帮助开发人员和 DevOps 工程师高效应用该特性。&lt;/p&gt;
&lt;h2 id=&#34;ext_proc-与其他过滤器的关系&#34;&gt;ext_proc 与其他过滤器的关系&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_proc/v3/ext_proc.proto&#34; title=&#34;ext_proc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ext_proc&lt;/code&gt;&lt;/a&gt; 和 Envoy 中的其他 gRPC 接口过滤器（如 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto&#34; title=&#34;ext_authz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ext_authz&lt;/code&gt;&lt;/a&gt;）在功能上有相似之处，但 &lt;code&gt;ext_proc&lt;/code&gt; 提供了更强大的功能，支持完整的请求和响应处理。这使其特别适用于需要深度内容检查和修改的应用场景。&lt;/p&gt;
&lt;p&gt;你可以通过下面的 Envoy 外部处理过滤器思维导图快速了解 &lt;code&gt;ext_proc&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-ext-proc-guide/envoy-ext-proc.svg&#34; data-img=&#34;/blog/envoy-ext-proc-guide/envoy-ext-proc.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy ext_proc 思维导图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy ext_proc 思维导图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这张思维导图展示了 Envoy &lt;code&gt;ext_proc&lt;/code&gt; 外部处理过滤器的核心结构和功能模块。&lt;code&gt;ext_proc&lt;/code&gt; 通过 gRPC 双向流协议与外部服务交互，可灵活处理 HTTP 请求和响应的各个阶段，并支持同步与异步处理。&lt;/p&gt;
&lt;h2 id=&#34;ext_proc-工作原理与配置&#34;&gt;ext_proc 工作原理与配置&lt;/h2&gt;
&lt;h3 id=&#34;定义与功能&#34;&gt;定义与功能&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ext_proc&lt;/code&gt; 是 Envoy 提供的 HTTP 过滤器，支持将请求和响应外包给 gRPC 服务进行处理，允许在外部服务中实现复杂的逻辑，灵活应对业务需求。例如，在安全场景中，&lt;code&gt;ext_proc&lt;/code&gt; 可用于执行身份验证和授权检查；在数据转换场景中，可以实现数据格式转换与内容过滤。此外，还可用于记录审计日志、动态请求重写以及内容增强等功能，适用于各种企业应用环境中的深度流量管理。&lt;/p&gt;
&lt;h3 id=&#34;工作原理&#34;&gt;工作原理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ext_proc&lt;/code&gt; 使用双向 gRPC 流与外部服务通信，实现请求和响应处理的实时交互。这使得 Envoy 可以将复杂任务（如身份验证、数据转换和自定义 Header 操作）卸载到外部服务，从而提高灵活性和可扩展性。&lt;/p&gt;
&lt;p&gt;Envoy 发送 &lt;code&gt;ProcessingRequest&lt;/code&gt; 消息，外部服务返回 &lt;code&gt;ProcessingResponse&lt;/code&gt; 消息。需要注意的是，每个 HTTP 请求流都会创建一个独立的 gRPC 流，而不会在多个请求之间共享。每个由 Envoy 处理的 HTTP 请求都会创建其专属的 gRPC 流，从而确保请求与响应的隔离和精确管理。&lt;/p&gt;
&lt;p&gt;这种设计允许外部服务在请求与响应生命周期的不同阶段进行干预，甚至能够生成全新的响应内容。``&lt;/p&gt;
&lt;p&gt;下图概述 Envoy 外部处理过滤器的处理过程：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-ext-proc-guide/622cc6601c811db8cc3254fe80f347e3.svg&#34; data-img=&#34;/blog/envoy-ext-proc-guide/622cc6601c811db8cc3254fe80f347e3.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy ext_proc 流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy ext_proc 流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;关键功能&#34;&gt;关键功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;请求和响应处理：读取和修改 HTTP 请求和响应的头部、主体和尾部。&lt;/li&gt;
&lt;li&gt;灵活性：根据业务需求定义自定义逻辑，弥补内置功能的不足。&lt;/li&gt;
&lt;li&gt;异步处理：支持异步处理模式，防止请求阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;envoy-配置示例&#34;&gt;Envoy 配置示例&lt;/h3&gt;
&lt;p&gt;以下是一个基本的 Envoy 配置示例：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;envoy.yaml&#34; download&gt;envoy.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.network.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress_http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;access_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.access_loggers.stdout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;log_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;text_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[%START_TIME%] \&amp;#34;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;#34; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;#34;%RESP(X-EXTPROC-HELLO)%\&amp;#34; \&amp;#34;%RESP(CONTENT-TYPE)%\&amp;#34; \&amp;#34;%RESP(CONTENT-LENGTH)%\&amp;#34; %DURATION% ms\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host_rewrite_literal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.envoyproxy.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service_envoyproxy_io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.ext_proc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext_proc_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failure_mode_allow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;processing_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;request_header_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SKIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;response_header_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SEND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.router.v3.Router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext_proc_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;LOGICAL_DNS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ROUND_ROBIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext_proc_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service_envoyproxy_io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;LOGICAL_DNS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dns_lookup_family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V4_ONLY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service_envoyproxy_io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.envoyproxy.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.transport_sockets.tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sni&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.envoyproxy.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了理解 Envoy 配置与 gRPC 服务之间的关联，我们需要了解以下配置项如何影响流量处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;grpc_service&lt;/strong&gt;: 定义与 gRPC 服务通信的目标地址和集群名，对应 Envoy 配置中的 &lt;code&gt;ext_proc_cluster&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;processing_mode&lt;/strong&gt;: 控制请求头、请求体和响应头等处理阶段的触发行为，决定了何时调用 gRPC 服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;failure_mode_allow&lt;/strong&gt;: 指定当 gRPC 服务失败时是否继续请求处理，确保服务在部分失败场景下的高可用性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listeners&lt;/strong&gt;: 定义了 Envoy 接收请求的网络地址和端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter_chains&lt;/strong&gt;: 配置请求的处理链，包括 HTTP 连接管理器和外部处理过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http_filters&lt;/strong&gt;: 列出启用的过滤器，如 &lt;code&gt;ext_proc&lt;/code&gt; 和 &lt;code&gt;router&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clusters&lt;/strong&gt;: 定义上游服务和外部处理 gRPC 服务的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细的配置说明请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_proc/v3/ext_proc.proto&#34; title=&#34;Envoy 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Envoy 使用这些配置选项将请求和响应外包给 gRPC 服务，处理结果通过双向流协议返回，影响请求的转发行为。&lt;/p&gt;
&lt;h3 id=&#34;grpc-服务示例&#34;&gt;gRPC 服务示例&lt;/h3&gt;
&lt;p&gt;以下是一个简单的 gRPC 外部处理服务器实现，演示如何通过 &lt;code&gt;ext_proc&lt;/code&gt; 添加自定义响应头。该实现展示了核心方法的选择和设计决策，例如使用 &lt;code&gt;Process&lt;/code&gt; 方法持续接收请求和发送响应，确保处理过程的连续性。此外，采用 &lt;code&gt;HeaderMutation&lt;/code&gt; 配置修改 HTTP 响应头，展现了 gRPC 消息结构与 Envoy 配置的紧密集成，便于动态扩展和灵活管理。&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;ext_proc_demo/main.go&#34; download&gt;main.go&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;google.golang.org/grpc/codes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;google.golang.org/grpc/status&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;configPb&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/envoyproxy/go-control-plane/envoy/config/core/v3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/envoyproxy/go-control-plane/envoy/service/ext_proc/v3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;extProcServer&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UnimplementedExternalProcessorServer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Process handles external processing requests from Envoy.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It listens for incoming requests, modifies response headers,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// and sends the updated response back to Envoy.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// When a request with response headers is received, it adds a custom header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// &amp;#34;x-extproc-hello&amp;#34; with the value &amp;#34;Hello from ext_proc&amp;#34; and returns the modified headers.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Note: The `RawValue` field is used instead of `Value` because it supports
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// setting the header value as a byte slice, allowing precise handling of binary data.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// This function is called once per HTTP request to process gRPC messages from Envoy.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It exits when an error occurs while receiving or sending messages.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;srv&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ExternalProcessor_ProcessServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;srv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;codes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unknown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;error receiving request: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Received request: %+v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// Prepare the response to be returned to Envoy.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ProcessingResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// Only process response headers, not request headers.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;respHeaders&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetResponseHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;respHeaders&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Processing Response Headers...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ProcessingResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ProcessingResponse_ResponseHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;nx&#34;&gt;ResponseHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HeadersResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;nx&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CommonResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;							&lt;span class=&#34;nx&#34;&gt;HeaderMutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HeaderMutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;								&lt;span class=&#34;nx&#34;&gt;SetHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HeaderValueOption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;									&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;										&lt;span class=&#34;nx&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HeaderValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;											&lt;span class=&#34;nx&#34;&gt;Key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#34;x-extproc-hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;											&lt;span class=&#34;nx&#34;&gt;RawValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello from ext_proc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;										&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;									&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;								&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;							&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Sending response: %+v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;// Send the response back to Envoy.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;srv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;codes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unknown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;error sending response: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;// If it is not a callback in the response header stage, do not make any modifications and continue processing the next event.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// For request_headers or other events, do not modify &amp;amp; ensure that Envoy will not be stuck.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// An empty processing can be returned for request_headers, or it can be skipped in envoy.yaml.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// Here, simply continue to wait for the next event.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;lis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:9000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to listen: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;grpcServer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// Register the ExternalProcessorServer with the gRPC server.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;extProcPb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RegisterExternalProcessorServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;grpcServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extProcServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Starting gRPC server on :9000...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;grpcServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to serve: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预期结果：请求返回状态码 200，响应头中包含自定义头 &lt;code&gt;x-extproc-hello: Hello from ext_proc&lt;/code&gt;。如果缺少该头，检查以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gRPC 服务是否正常运行&lt;/strong&gt;：确认 gRPC 服务器是否已启动并监听端口 &lt;code&gt;:9000&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Envoy 配置是否正确&lt;/strong&gt;：检查 Envoy 配置文件，确保 &lt;code&gt;ext_proc&lt;/code&gt; 过滤器已启用，并且 &lt;code&gt;ext_proc_cluster&lt;/code&gt; 配置无误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志和错误排查&lt;/strong&gt;：查看 Envoy 和 gRPC 服务器的日志，排查潜在错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本地运行 Envoy 和  gRPC 服务后，使用 &lt;code&gt;curl&lt;/code&gt; 进行测试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;envoy -c envoy.yaml
go run main.go
curl -v http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你将看到包含自定义头 &lt;code&gt;x-extproc-hello: Hello from ext_proc&lt;/code&gt; 的响应。&lt;/p&gt;
&lt;p&gt;你将看到如下图所示的结果。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/envoy-ext-proc-guide/warp.png&#34; data-img=&#34;https://jimmysong.io/img/blog/envoy-ext-proc-guide/warp.png&#34; alt=&#34;image&#34; data-caption=&#34;示例结果&#34;&gt;
  
  
  &lt;figcaption&gt;示例结果&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在 curl 请求的响应中包含了我们自定义的 header &lt;code&gt;x-extproc-hello: Hello from ext_proc&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;统计与监控&#34;&gt;统计与监控&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ext_proc&lt;/code&gt; 输出的统计信息位于 &lt;code&gt;http.&amp;lt;stat_prefix&amp;gt;.ext_proc.&lt;/code&gt; 命名空间，其中 &lt;code&gt;stat_prefix&lt;/code&gt; 是 HTTP 连接管理器的前缀。常用统计信息包括：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;指标名称&lt;/th&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;streams_started&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;启动的 gRPC 流数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;streams_msgs_sent&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;发送的消息数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;streams_msgs_received&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;接收的消息数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;spurious_msgs_received&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;接收的违反协议的意外消息数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;streams_closed&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;成功关闭的流数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;streams_failed&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;产生 gRPC 错误的流数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;failure_mode_allowed&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;错误被忽略的次数（根据配置）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;message_timeouts&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;配置超时内未收到响应的消息数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rejected_header_mutations&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;被拒绝的头部更改数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;clear_route_cache_ignored&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;忽略的清理路由缓存请求数量&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;clear_route_cache_disabled&lt;/td&gt;
          &lt;td&gt;Counter&lt;/td&gt;
          &lt;td&gt;被禁用的清理路由缓存请求数量&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;详见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/ext_proc_filter#statistics&#34; title=&#34;Envoy 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;应用场景与优化策略&#34;&gt;应用场景与优化策略&lt;/h2&gt;
&lt;h3 id=&#34;常见应用场景&#34;&gt;常见应用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;身份验证：外部身份验证服务检查用户凭证。&lt;/li&gt;
&lt;li&gt;数据审计：记录请求和响应的数据以满足合规要求。&lt;/li&gt;
&lt;li&gt;流量管理：根据动态分析调整流量路由策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置说明与优化策略&#34;&gt;配置说明与优化策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;故障恢复与负载均衡：部署多实例 gRPC 服务，使用负载均衡自动转移请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息超时与重试配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.ext_proc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext_proc_server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;processing_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;request_header_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SEND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;response_header_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SEND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;message_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;500ms&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max_message_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1000ms&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failure_mode_allow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元数据选项与安全策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;metadata_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;forwarding_namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;untyped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;custom_namespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Envoy 的 &lt;code&gt;ext_proc&lt;/code&gt; 过滤器通过灵活的请求和响应处理能力，为微服务架构中的服务治理、数据转换和请求检查提供了强大的支持。正确配置和优化 &lt;code&gt;ext_proc&lt;/code&gt; 可以显著提高系统的灵活性和可扩展性，满足多样化的业务需求。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/ext_proc_filter&#34; title=&#34;External Processing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;External Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_proc/v3/ext_proc.proto&#34; title=&#34;External Processing Filter (proto)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;External Processing Filter (proto)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/go-control-plane&#34; title=&#34;go-control-plane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-control-plane&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>深入 Istio Ambient 模式：从 ztunnel 到 Waypoint 代理的 L7 流量路径解析</title>
      <link>https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/</link>
      <pubDate>Thu, 12 Dec 2024 18:44:52 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/</guid>
      <description>
        
        
        &lt;p&gt;在 Istio Ambient 模式下，ztunnel 是节点级安全代理，在 L4 层拦截并加密服务间流量。但不负责 L7（如 HTTP）层处理。Ambient 模式中，L7 处理由 Waypoint 代理负责。当 ztunnel 发现目标服务需 L7 处理时，通过 HBONE 协议将流量转发给 Waypoint 代理进行 HTTP 层策略应用和可观察性处理，再由 Waypoint 代理经 ztunnel 转发给目标 Pod，本文将详细阐述这条 L7 流量转发链路。&lt;/p&gt;
&lt;h2 id=&#34;waypoint-代理的角色与责任&#34;&gt;Waypoint 代理的角色与责任&lt;/h2&gt;
&lt;p&gt;在 Istio Ambient 模式中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ztunnel&lt;/strong&gt; 负责透明捕获 Pod 间的 L4 流量，提供 mTLS 加密和身份认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Waypoint 代理&lt;/strong&gt; 是一个基于 Envoy 的 L7 代理，处理 HTTP 层的高级路由、策略和可观察性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个请求需要 L7 层策略时（如 &lt;code&gt;productpage&lt;/code&gt; 调用 &lt;code&gt;reviews-v1&lt;/code&gt; 服务），&lt;strong&gt;ztunnel 将流量通过 HBONE 隧道转发到 Waypoint Proxy&lt;/strong&gt;，由 Waypoint 执行 HTTP 路由和策略。&lt;/p&gt;
&lt;h2 id=&#34;l7-流量在-ambient-模式中的处理路径&#34;&gt;L7 流量在 Ambient 模式中的处理路径&lt;/h2&gt;
&lt;p&gt;下图展示了 L7 流量在 Ambient 模式中的处理路径。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/022a72b18c3091c40cf01bb4fad208a2.svg&#34; data-img=&#34;/blog/istio-ambient-l7-flow-analysis/022a72b18c3091c40cf01bb4fad208a2.svg&#34; alt=&#34;image&#34; data-caption=&#34;L7 流量在 Ambient 模式中的处理路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;L7 流量在 Ambient 模式中的处理路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面两张图片分别展示了源 Pod 和目标 Pod 在同节点和跨节点情况下的 L7 流量处理路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/hbone-same-node.svg&#34; data-img=&#34;/blog/istio-ambient-l7-flow-analysis/hbone-same-node.svg&#34; alt=&#34;image&#34; data-caption=&#34;源 pod 和目标 pod 在同一节点上的 L7 流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;源 pod 和目标 pod 在同一节点上的 L7 流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/hbone-cross-node.svg&#34; data-img=&#34;/blog/istio-ambient-l7-flow-analysis/hbone-cross-node.svg&#34; alt=&#34;image&#34; data-caption=&#34;源 pod 和目标 pod 在不同节点上的 L7 流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;源 pod 和目标 pod 在不同节点上的 L7 流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面是详细的流量路径。&lt;/p&gt;
&lt;h3 id=&#34;1-应用请求发出&#34;&gt;1. 应用请求发出&lt;/h3&gt;
&lt;p&gt;假设 productpage 应用需要访问 reviews 服务。productpage Pod 内的应用向 &lt;code&gt;reviews.default.svc.cluster.local:9080&lt;/code&gt; 发起 HTTP 请求。&lt;/p&gt;
&lt;h3 id=&#34;2-ztunnel-l4-透明捕获与识别&#34;&gt;2. ztunnel L4 透明捕获与识别&lt;/h3&gt;
&lt;p&gt;productpage Pod 的出站请求首先被所在节点上的 ztunnel 拦截。ztunnel 查看从 Istio 控制面下发的配置，根据目标服务（reviews）的身份和策略，得知该服务需要经过 Waypoint 代理进行 L7 层处理。&lt;/p&gt;
&lt;h3 id=&#34;3-通过-hbone-协议转发至-waypoint&#34;&gt;3. 通过 HBONE 协议转发至 Waypoint&lt;/h3&gt;
&lt;p&gt;ztunnel 并非使用传统的 Envoy-to-Envoy XDS 或原生 TCP+mTLS 隧道，而是通过 &lt;strong&gt;HBONE 协议&lt;/strong&gt; 与 Waypoint 代理通信。HBONE 是 Istio Ambient 模式中专门设计的无 Sidecar L7 路由协议，基于 HTTP/2，可在透明模式下对流量进行叠加转发，从而实现灵活的服务拓扑和策略控制。&lt;/p&gt;
&lt;p&gt;在这一阶段，ztunnel 会将 L4 流量封装到 HBONE 隧道中，发送给相应的 Waypoint 代理。&lt;/p&gt;
&lt;h3 id=&#34;4-waypoint-代理的-l7-策略与遥测处理&#34;&gt;4. Waypoint 代理的 L7 策略与遥测处理&lt;/h3&gt;
&lt;p&gt;Waypoint 代理（目前仍基于 Envoy 实现）收到通过 HBONE 隧道传来的流量后，通过 TLS 配置和客户端证书校验，确保下游（ztunnel）是已被认证的受信主体。它将下游客户端的身份信息（SPIFFE ID）和其他上下文元数据提取出来，以便在 L7 层策略决策中使用。&lt;/p&gt;
&lt;p&gt;执行的操作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 HTTP Path/Host 的路由和流量拆分&lt;/li&gt;
&lt;li&gt;基于 Headers 的访问控制和认证策略&lt;/li&gt;
&lt;li&gt;故障注入、熔断、限流&lt;/li&gt;
&lt;li&gt;遥测数据收集（请求时延、错误率、Tracing、Metrics、Logs）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成 L7 处理后，Waypoint 代理再通过 HBONE 将流量传回到目标节点的 ztunnel。&lt;/p&gt;
&lt;h3 id=&#34;5-流量到达目标-pod&#34;&gt;5. 流量到达目标 Pod&lt;/h3&gt;
&lt;p&gt;目标节点上的 ztunnel 会从 Waypoint 代理接收处理过的流量（同样通过 HBONE 隧道传递），然后解封装并将流量传递给对应的 reviews Pod 中的应用容器端口。&lt;/p&gt;
&lt;h2 id=&#34;洞察与关键点总结&#34;&gt;洞察与关键点总结&lt;/h2&gt;
&lt;h3 id=&#34;1-waypoint-并不知道-ztunnel-的存在&#34;&gt;1. Waypoint 并不知道 ztunnel 的存在&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Waypoint 代理只知道目标 Pod 的 IP 地址，但目标端口被重写为 &lt;code&gt;15008&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Kubernetes &lt;code&gt;iptables&lt;/code&gt; 规则将流量透明重定向到 ztunnel。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-流量安全性端到端加密与身份认证&#34;&gt;2. 流量安全性：端到端加密与身份认证&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;双向 TLS（mTLS）和 SPIFFE ID 校验确保了端到端安全。&lt;/li&gt;
&lt;li&gt;无法绕过 ztunnel，确保了零信任架构的完整实施。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-完全透明的流量控制&#34;&gt;3. 完全透明的流量控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用开发人员无需更改任何代码。&lt;/li&gt;
&lt;li&gt;流量控制、策略和可观察性完全在数据面层面透明执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何调试&#34;&gt;如何调试？&lt;/h2&gt;
&lt;p&gt;在 Ambient 模式下，调试方式也有了一些变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ztunnel 调试&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Istio 引入了新的 &lt;code&gt;istioctl ztunnel&lt;/code&gt; 子命令来协助查看和调试 ztunnel 的配置与状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;waypoint 调试&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然 Waypoint 代理仍然是 Envoy，所以仍然可以使用 &lt;code&gt;istioctl pc&lt;/code&gt; 和 &lt;code&gt;istioctl ps&lt;/code&gt; 来查看其路由、集群和监听器配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istioctl waypoint&lt;/code&gt; 提供了更直观的配置查看和状态检查功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio Ambient 模式通过 ztunnel 来处理 L4 流量并实现零信任加密与传输，再通过 Waypoint 代理为需要 L7 策略的请求提供集中处理。两者之间通过 HBONE 协议进行高效、透明的通信，实现比传统 Sidecar 模式更轻量且易于运维的架构。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>探索 AnythingLLM：借助开源 AI 打造私有化智能知识库</title>
      <link>https://jimmysong.io/blog/building-private-ai-knowledge-base-anythingllm/</link>
      <pubDate>Wed, 11 Dec 2024 21:50:21 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/building-private-ai-knowledge-base-anythingllm/</guid>
      <description>
        
        
        &lt;p&gt;随着大语言模型（LLM）的快速发展，将企业内部知识库与 AI 工具结合成为热门解决方案。作为一名技术探索者，我对构建私有知识库充满兴趣，也希望测试 LLM 的能力，尤其是像 Ollama 和千问这类模型。此外，AnythingLLM 是一个开源项目，具有较高的社区关注度，因此我决定对其进行深入调研。&lt;/p&gt;
&lt;p&gt;基于 RAG（检索增强生成）技术，&lt;a href=&#34;https://anythingllm.com/&#34; title=&#34;AnythingLLM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AnythingLLM&lt;/a&gt; 提供了从数据处理到用户界面的全栈解决方案，支持构建企业内部的智能知识库。其模块化架构和灵活部署方式，使其成为企业和个人开发者进行知识管理和 AI 项目实践的重要工具。&lt;/p&gt;
&lt;h2 id=&#34;rag-原理概述&#34;&gt;RAG 原理概述&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;RAG（Retrieval-Augmented Generation）&lt;/strong&gt; 是一种结合了信息检索和语言模型的技术。它通过从大规模的知识库中检索相关信息，并利用这些信息来指导语言模型生成更准确和深入的答案。这种方法由 Meta AI 研究人员在 2020 年提出，旨在解决大型语言模型在信息滞后、模型幻觉、私有数据匮乏和内容不可追溯等问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RAG 就是可以开卷回复的 LLM&lt;/strong&gt;。其发展历程：&lt;strong&gt;Naive RAG&lt;/strong&gt; 包含索引、检索、生成三步，存在 &lt;strong&gt;召回率低、Prompt 拼接问题&lt;/strong&gt;。&lt;strong&gt;Advanced RAG&lt;/strong&gt; 优化索引与检索，引入 &lt;strong&gt;预检索、后检索策略与数据清洗&lt;/strong&gt; 提升效率。&lt;strong&gt;Modular RAG&lt;/strong&gt; 实现 &lt;strong&gt;模块化流水线与端到端训练&lt;/strong&gt;，具备更高的 &lt;strong&gt;灵活性与适应性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;背景与挑战&#34;&gt;背景与挑战&lt;/h3&gt;
&lt;p&gt;尽管 LLM 在处理复杂任务方面表现出色，但在以下三个方面存在局限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;知识局限性&lt;/strong&gt;：大模型的训练数据来自公开数据源，无法访问非公开和实时数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;幻觉问题&lt;/strong&gt;：模型有时会生成错误答案，特别是在缺少特定领域知识时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据安全性&lt;/strong&gt;：涉及内部私有数据时，企业面临数据泄露风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RAG 技术通过向量检索与生成模型结合，显著提高了数据处理的深度和准确性。&lt;/p&gt;
&lt;h3 id=&#34;工作原理&#34;&gt;工作原理&lt;/h3&gt;
&lt;p&gt;RAG 的工作流程包括两个主要阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据准备阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将内部私有数据向量化存入数据库，构建检索索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户应用阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据用户的 Prompt 检索相关内容，将结果与原 Prompt 组合，生成模型回答。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这种方式，RAG 可以搭建团队内部的本地知识库，弥补大模型的知识局限性，解决幻觉和数据隐私问题。然而，RAG 也存在一些主要限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据依赖性强&lt;/strong&gt;：RAG 系统的效果严重依赖于内置知识库的数据质量和覆盖范围。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检索准确性受限&lt;/strong&gt;：检索算法可能因索引构建不完善或查询表达模糊导致相关性降低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模型推理成本高&lt;/strong&gt;：大型语言模型的推理消耗大量资源，尤其在频繁查询和大规模应用场景中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技术复杂度高&lt;/strong&gt;：构建和维护 RAG 系统需要强大的数据管理与模型集成能力，涉及嵌入、索引构建和检索优化等多个复杂组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应延迟与性能瓶颈&lt;/strong&gt;：在高负载下，检索与推理过程可能导致响应速度变慢，尤其在硬件性能受限的环境中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;anythingllm-简介&#34;&gt;AnythingLLM 简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;AnythingLLM&lt;/strong&gt; 是 Mintplex Labs Inc. 开发的一款开源 ChatGPT 等效工具，用于在安全的环境中与文档进行交互。它融合了从数据处理到用户界面的所有技术，适用于构建个人或企业私有化的知识库。&lt;/p&gt;
&lt;h3 id=&#34;核心特点&#34;&gt;核心特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多用户支持和权限管理&lt;/strong&gt;：支持多个用户和不同权限设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种文档类型&lt;/strong&gt;：PDF、TXT、DOCX、JSON 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置数据连接器&lt;/strong&gt;：GitHub、GitLab、YouTube、链接抓取、Confluence 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多种向量数据库支持&lt;/strong&gt;：如 LanceDB（默认）、Pinecone、Weaviate 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活的 LLM 集成&lt;/strong&gt;：支持 OpenAI、Azure OpenAI、Ollama、LM Studio、LocalAI 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本节约措施&lt;/strong&gt;：大文档只需嵌入一次，显著降低成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发者 API 支持&lt;/strong&gt;：便于自定义和扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/building-private-ai-knowledge-base-anythingllm/ollama.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/building-private-ai-knowledge-base-anythingllm/ollama.webp&#34; alt=&#34;image&#34; data-caption=&#34;在 AnythingLLM 中选择 LLM&#34;&gt;
  
  
  &lt;figcaption&gt;在 AnythingLLM 中选择 LLM&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;技术架构&#34;&gt;技术架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;收集器（Collector）&lt;/strong&gt;：将本地或在线资源转化为 LLM 可用格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端（Frontend）&lt;/strong&gt;：基于 ViteJS 和 React 构建的用户界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器（Server）&lt;/strong&gt;：基于 NodeJS 和 Express 的后端，管理数据库和 LLM 交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构建自己的知识库详细步骤&#34;&gt;构建自己的知识库：详细步骤&lt;/h4&gt;
&lt;p&gt;要在 AnythingLLM 中构建一个私有知识库，可以按照以下步骤操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上传文档&lt;/strong&gt;：将 PDF、TXT、DOCX、JSON 等支持的文档格式上传到系统中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;嵌入向量生成（Embedding）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用配置的嵌入模型（如 OpenAI、Azure OpenAI、LocalAI）将文档转化为向量数据。&lt;/li&gt;
&lt;li&gt;确保配置正确的嵌入模型以匹配项目需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储到向量数据库&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择适合的向量数据库，如 LanceDB（默认）、Pinecone、Weaviate。&lt;/li&gt;
&lt;li&gt;配置数据库连接，保证数据安全和高效检索。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询与回答&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入查询，系统将其转化为查询向量。&lt;/li&gt;
&lt;li&gt;向量数据库检索最匹配的内容，调用大语言模型（如 OpenAI GPT）生成答案。&lt;/li&gt;
&lt;li&gt;返回最终答案，链接相关文档和参考。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;流程图示&#34;&gt;流程图示：&lt;/h5&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/building-private-ai-knowledge-base-anythingllm/5587c3855cc19cfb95184d6e784543a3.svg&#34; data-img=&#34;/blog/building-private-ai-knowledge-base-anythingllm/5587c3855cc19cfb95184d6e784543a3.svg&#34; alt=&#34;image&#34; data-caption=&#34;构建知识库流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;构建知识库流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;通过该流程，可以有效构建支持高效查询和生成回答的智能知识库。&lt;/p&gt;
&lt;h3 id=&#34;在-docker-中安装-anythingllm&#34;&gt;在 Docker 中安装 AnythingLLM&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://github.com/Mintplex-Labs/anything-llm/blob/master/docker/HOW_TO_USE_DOCKER.md&#34; title=&#34;Docker 安装指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 安装指南&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;STORAGE_LOCATION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/anythingllm &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;mkdir -p &lt;span class=&#34;nv&#34;&gt;$STORAGE_LOCATION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;touch &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$STORAGE_LOCATION&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.env&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;docker run -d &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--cap-add SYS_ADMIN &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--network host &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--add-host&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;host.docker.internal:host-gateway &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-v &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;STORAGE_LOCATION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:/app/server/storage &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-v &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;STORAGE_LOCATION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/.env:/app/server/.env &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/app/server/storage&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;mintplexlabs/anythingllm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：使用 host network，否则容器中无法与 Ollama 通信。&lt;/p&gt;
&lt;p&gt;若要在本机运行 Ollama，可以使用下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ollama run qwen2.5:14b --keepalive &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将会运行 qwen2.5:14b，你也可以选择其他大模型。&lt;/p&gt;
&lt;p&gt;打开浏览器：&lt;a href=&#34;http://localhost:3001&#34; title=&#34;http://localhost:3001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:3001&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：必须选择要接入的 LLM，可以使用 &lt;code&gt;local&lt;/code&gt; 或 &lt;code&gt;cloud&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;desktop-部署&#34;&gt;Desktop 部署&lt;/h3&gt;
&lt;p&gt;AnythingLLM 内置的 LLM 引擎支持下载流行的模型如 LLama-3、Phi-3 等，支持 CPU 和 GPU。本地运行适用于试用其基本功能。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://docs.anythingllm.com/installation-desktop/overview&#34; title=&#34;Desktop 安装概览&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Desktop 安装概览&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;局限性&lt;/strong&gt;：缺少多用户支持、浏览器插件、用户和 Workspace 管理等功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/building-private-ai-knowledge-base-anythingllm/chat.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/building-private-ai-knowledge-base-anythingllm/chat.webp&#34; alt=&#34;image&#34; data-caption=&#34;AnythingLLM 的对话界面&#34;&gt;
  
  
  &lt;figcaption&gt;AnythingLLM 的对话界面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;使用体验与问题记录&#34;&gt;使用体验与问题记录&lt;/h2&gt;
&lt;p&gt;如果你的电脑性能堪忧的话，强烈不建议你在本地运行大模型。你会遇到各种性能问题，例如下面看到的，在上传文件嵌入到 Workspace 时卡住了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/building-private-ai-knowledge-base-anythingllm/stuck.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/building-private-ai-knowledge-base-anythingllm/stuck.webp&#34; alt=&#34;image&#34; data-caption=&#34;本地运行大模型时遇到性能问题&#34;&gt;
  
  
  &lt;figcaption&gt;本地运行大模型时遇到性能问题&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;性能与硬件限制&#34;&gt;性能与硬件限制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建向量数据库特别慢&lt;/strong&gt;：支持的文档格式很多，但在我的 MacBook Pro 2015（16G 内存，无 M 系列芯片）上，构建向量数据库的过程非常耗时。这是因为文档需要被嵌入模型处理成高维向量，并存储到数据库中。该过程涉及复杂的计算和大量内存操作，导致处理一个 7M 的 JSON 数据需要 3 分钟，而嵌入（Embed）到 Workspace 则需十几分钟，且时常失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能需求&lt;/strong&gt;：由于硬件性能受限，运行本地 LLM 十分吃力。运行 Ollama 尚可，但进行 RAG 操作时性能明显不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查询与响应延迟&#34;&gt;查询与响应延迟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;响应慢&lt;/strong&gt;：在聊天模式下，系统反馈非常慢，通常需要等待几分钟才能得到回复。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见错误提示与解决方案&#34;&gt;常见错误提示与解决方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询执行失败&lt;/strong&gt;：遇到错误提示 &lt;code&gt;Failed to execute query stream: Invalid input, No vector column found to match with the query vector dimension: 4096&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：查看官方问题跟踪 &lt;a href=&#34;https://github.com/Mintplex-Labs/anything-llm/issues/1131&#34; title=&#34;[BUG]: Could not respond to message. LanceDBError: No vector column found to create index #1131&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[BUG]: Could not respond to message. LanceDBError: No vector column found to create index #1131&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何改善用户体验&#34;&gt;如何改善用户体验&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用商用大模型 API&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果硬件资源有限，可以考虑使用 OpenAI、Azure OpenAI 等商用大模型 API。这些服务在稳定性和性能方面具有优势，尤其适用于大规模文档处理和实时查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化硬件环境&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用带有 GPU 加速的现代硬件，推荐内存不低于 32GB，显卡支持 CUDA 的 GPU（如 NVIDIA RTX 系列）来显著提升向量嵌入和模型推理速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调整 AnythingLLM 配置&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Chat Setting（聊天设置）&lt;/strong&gt;：配置聊天相关参数，包括模型选择、响应超时、查询历史记录存储策略等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agent 设置&lt;/strong&gt;：根据项目需求启用不同类型的代理，如检索代理、对话代理和任务代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源分配与性能优化&lt;/strong&gt;：在 Docker 或 Kubernetes 部署环境中，设置 CPU、内存和 GPU 加速参数。调整嵌入批处理大小（Batch Size）、线程池大小等性能参数，优化推理与检索性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式部署与扩展&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 集群部署&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Kubernetes 编排多个 AnythingLLM 实例，确保高可用性和自动扩展能力。&lt;/li&gt;
&lt;li&gt;部署配置包括 ReplicaSet、Pod 自动缩放（HPA）、负载均衡（Service）、存储卷（PersistentVolumeClaim）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云服务部署&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在云平台上运行托管服务，使用容器服务管理。&lt;/li&gt;
&lt;li&gt;配置高性能数据库（如 RDS、Firestore），并启用 CDN 加速文件传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库和缓存扩展&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用分布式数据库（如 Redis、Pinecone、Weaviate）提高查询速度。&lt;/li&gt;
&lt;li&gt;启用数据库主从复制与自动备份，确保数据持久性和高可用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;升级数据库存储方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换默认数据库 LanceDB，考虑使用更高性能的向量数据库如 Pinecone、Weaviate 等，以减少查询延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码优化与插件扩展&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定制插件来适配特定任务，并启用数据缓存机制以减少频繁查询对资源的消耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结与展望&#34;&gt;总结与展望&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;AnythingLLM&lt;/strong&gt; 是一个功能全面的 RAG 解决方案，适用于企业内部知识库构建。通过结合向量检索与大语言模型，该平台提供了强大的文档问答能力。然而，部署和定制化需要一定的技术投入。未来的改进方向包括增强多数据库支持、更灵活的嵌入模型选择以及提升文档解析能力。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>从 MeshConfig 迁移到 Istio Telemetry API：提升网格观测性和灵活性</title>
      <link>https://jimmysong.io/blog/migrate-to-istio-telemetry-api/</link>
      <pubDate>Wed, 11 Dec 2024 15:04:01 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/migrate-to-istio-telemetry-api/</guid>
      <description>
        
        
        &lt;p&gt;Istio 的 Telemetry API 是替代传统 MeshConfig 遥测配置的现代化方式，提供了更灵活的工具来定义服务网格中的 &lt;strong&gt;Tracing&lt;/strong&gt;、&lt;strong&gt;Metrics&lt;/strong&gt; 和 &lt;strong&gt;Access Logging&lt;/strong&gt;。相比传统的 &lt;code&gt;EnvoyFilter&lt;/code&gt; 和 &lt;code&gt;MeshConfig&lt;/code&gt;，Telemetry API 更具模块化、动态更新和跨层次配置能力。&lt;/p&gt;
&lt;p&gt;在本篇中，我们将详解如何使用 Telemetry API 配置 Istio 遥测功能，涵盖 Tracing、Metrics 和 Logging 的具体实现，同时展示如何迁移过时的 MeshConfig 配置。&lt;/p&gt;
&lt;h2 id=&#34;telemetry-api-发展历程&#34;&gt;Telemetry API 发展历程&lt;/h2&gt;
&lt;p&gt;Istio 的遥测能力在早期版本中依赖于较为传统的配置方法，如 &lt;strong&gt;Mixer&lt;/strong&gt; 和 &lt;strong&gt;MeshConfig&lt;/strong&gt; 的 &lt;code&gt;configOverride&lt;/code&gt;，这些方法虽然能够满足基本需求，但在复杂场景下显得力不从心。为了解决这些问题，Istio 引入了基于 CRD 的 &lt;strong&gt;Telemetry API&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;关键版本更新&#34;&gt;关键版本更新&lt;/h3&gt;
&lt;p&gt;为了帮助读者了解 Telemetry API 的进化过程，以下是一些重要版本的更新信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Istio 1.11&lt;/strong&gt;：引入 Telemetry API（Alpha），提供了基本的指标和日志自定义功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio 1.13&lt;/strong&gt;：支持 OpenTelemetry 日志记录、自定义追踪服务名称，以及更强的日志过滤功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio 1.18&lt;/strong&gt;：默认不再安装 Prometheus 的 &lt;code&gt;EnvoyFilter&lt;/code&gt;，完全依赖 Telemetry API 定义遥测行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio 1.22&lt;/strong&gt;：Telemetry API 升级为稳定版（v1），全面支持生产环境需求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么迁移到-telemetry-api&#34;&gt;为什么迁移到 Telemetry API？&lt;/h2&gt;
&lt;p&gt;尽管传统的 MeshConfig 和 EnvoyFilter 提供了基础的遥测能力，但它们的配置方式在灵活性、动态性和扩展性方面存在诸多限制。为了更清晰地理解这些局限性，我们将从几个关键维度展开说明。&lt;/p&gt;
&lt;h3 id=&#34;使用-meshconfig-和-envoyfilter-的复杂性&#34;&gt;使用 MeshConfig 和 EnvoyFilter 的复杂性&lt;/h3&gt;
&lt;p&gt;在介绍具体问题之前，我们先了解一下 MeshConfig 和 EnvoyFilter 的定位：MeshConfig 适用于全局配置，而 EnvoyFilter 用于细粒度的自定义。但正是这种分工，导致了它们在管理上的复杂性。&lt;/p&gt;
&lt;h4 id=&#34;1-配置方式分散&#34;&gt;1. 配置方式分散&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MeshConfig&lt;/strong&gt; 用于集中定义全局网格行为，例如访问日志路径、追踪采样率和指标维度。虽然适合简单场景，但无法满足命名空间级或工作负载级的需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EnvoyFilter&lt;/strong&gt; 则可以覆盖或扩展 Envoy 的配置，允许更细粒度的控制。但这种方式直接操作 Envoy 内部结构（xDS 字段），配置语言复杂且容易出错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：通过 MeshConfig 配置访问日志&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IstioOperator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessLogFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/dev/stdout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法为特定服务或命名空间设置不同的日志路径。&lt;/li&gt;
&lt;li&gt;需要重新应用整个配置，动态性不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：通过 EnvoyFilter 自定义指标&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyFilter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;custom-metric-filter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mynamespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workloadSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 选择特定的工作负载&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configPatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;applyTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP_FILTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIDECAR_INBOUND &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 匹配入站流量&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ADD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filterClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STATS &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定为统计过滤器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio.request_operation &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义指标名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  &amp;#34;attributes&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                      &amp;#34;output_attribute&amp;#34;: &amp;#34;istio_operationId&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                      &amp;#34;match&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                          &amp;#34;value&amp;#34;: &amp;#34;GetReviews&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                          &amp;#34;condition&amp;#34;: &amp;#34;request.url_path == &amp;#39;/reviews&amp;#39; &amp;amp;&amp;amp; request.method == &amp;#39;GET&amp;#39;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                      ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  ]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.wasm.runtime.null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inline_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.wasm.attributegen&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置语法复杂且冗长，需深入理解 Envoy 的结构。&lt;/li&gt;
&lt;li&gt;易于出错，调试和维护成本高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-动态性不足&#34;&gt;2. 动态性不足&lt;/h4&gt;
&lt;p&gt;虽然现代微服务环境强调动态调整配置，但 MeshConfig 和 EnvoyFilter 的动态性支持有限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MeshConfig&lt;/strong&gt;：修改配置通常需要重启代理或重新应用整个配置，导致服务中断。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EnvoyFilter&lt;/strong&gt;：更新流程复杂，调整单个参数也需重新部署相关代理实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-多租户支持困难&#34;&gt;3. 多租户支持困难&lt;/h4&gt;
&lt;p&gt;在多租户环境中，针对不同命名空间或工作负载自定义遥测配置非常重要。然而：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MeshConfig&lt;/strong&gt;：无法针对命名空间或工作负载进行差异化设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EnvoyFilter&lt;/strong&gt;：需要编写多个过滤器配置，增加了管理复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-难以扩展和调试&#34;&gt;4. 难以扩展和调试&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MeshConfig 和 EnvoyFilter 对新需求（如 OpenTelemetry）支持较慢。&lt;/li&gt;
&lt;li&gt;EnvoyFilter 的调试难度高，需要深入分析 Envoy 日志和行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;弃用传统-meshconfig-的遥测配置&#34;&gt;弃用传统 MeshConfig 的遥测配置&lt;/h3&gt;
&lt;p&gt;鉴于上述局限性，Istio 社区已经将传统的 MeshConfig 遥测配置标记为&lt;strong&gt;弃用&lt;/strong&gt;。以下示例展示了这些配置的使用方式及其不足之处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access Logging 配置&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessLogFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/dev/stdout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trace Sampling 配置&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enableTracing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;extensionProviders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;zipkin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;zipkin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;zipkin.istio-system.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9411&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自定义 Metrics 标签&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;telemetry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configOverride&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inboundSidecar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;requests_total&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;user-agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request.headers[&amp;#39;User-Agent&amp;#39;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上述例子可以看出，这些配置的灵活性和扩展性明显不足，难以应对复杂的生产环境需求。&lt;/p&gt;
&lt;h2 id=&#34;telemetry-api-的优势&#34;&gt;Telemetry API 的优势&lt;/h2&gt;
&lt;p&gt;在传统配置方式的基础上，Telemetry API 带来了多项改进，使其更适合现代化的服务网格管理需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;：Tracing、Metrics 和 Access Logging 独立配置，清晰简洁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态更新&lt;/strong&gt;：支持实时更新配置，无需重启代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;层级化支持&lt;/strong&gt;：允许全局、命名空间和工作负载级别的配置覆盖。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单直观&lt;/strong&gt;：使用声明式语法，无需深入理解 Envoy 的内部结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;istio-telemetry-api-配置示例&#34;&gt;Istio Telemetry API 配置示例&lt;/h2&gt;
&lt;h3 id=&#34;全局配置示例&#34;&gt;全局配置示例&lt;/h3&gt;
&lt;p&gt;为帮助理解 Telemetry API 的具体使用，我们以全局配置示例作为开始：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;telemetry.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Telemetry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mesh-default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessLogging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# better to use a built-in one&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tracing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;skywalking&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;randomSamplingPercentage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100.00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;overrides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metric&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;REQUEST_COUNT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CLIENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tagOverrides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;x_user_email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#39;x-user-email&amp;#39; in request.headers ? request.headers[&amp;#39;x-user-email&amp;#39;] : &amp;#39;empty&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-telemetry-api-配置-skywalking&#34;&gt;使用 Telemetry API 配置 SkyWalking&lt;/h3&gt;
&lt;p&gt;我们再以配置 SkyWalking 的采样率和 span tag 为例，演示如何使用 Telemetry API。&lt;/p&gt;
&lt;h4 id=&#34;检查-istio-版本与-crd&#34;&gt;检查 Istio 版本与 CRD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果使用 Istio 1.22 或更高版本，使用 &lt;code&gt;telemetry.istio.io/v1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;对于 Istio 1.18 至 1.21 的用户，使用 &lt;code&gt;telemetry.istio.io/v1alpha1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以下命令检查 Telemetry API 的 CRD 是否已安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get crds &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep telemetry
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;部署-skywalking&#34;&gt;部署 SkyWalking&lt;/h4&gt;
&lt;p&gt;在集群中部署 SkyWalking OAP 服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.24/samples/addons/extras/skywalking.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查服务状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get pods -n istio-system -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;skywalking-oap
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;配置-meshconfig-添加-skywalking-提供商&#34;&gt;配置 MeshConfig 添加 SkyWalking 提供商&lt;/h4&gt;
&lt;p&gt;在 Istio 的 &lt;code&gt;MeshConfig&lt;/code&gt; 中定义 SkyWalking 提供商。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mesh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    enableTracing: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    extensionProviders:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    - name: &amp;#34;skywalking&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      skywalking:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        service: &amp;#34;tracing.istio-system.svc.cluster.local&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        port: 11800&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用-telemetry-api-配置采样率&#34;&gt;使用 Telemetry API 配置采样率&lt;/h4&gt;
&lt;p&gt;通过 Telemetry API，将 SkyWalking 设置为默认的 Tracing 提供商，并定义采样率。&lt;/p&gt;
&lt;p&gt;你可以从使用 Telemetry API 从多个层级配置采样率，为了节约篇幅，我们仅演示在命名空间范围配置采样率，其他层级的配置请参考 &lt;a href=&#34;https://istio.io/latest/docs/tasks/observability/telemetry/&#34; title=&#34;Telemetry API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Telemetry API&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;telemetry.istio.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Telemetry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;namespace-override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tracing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;skywalking&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;randomSamplingPercentage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;customTags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;literal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;production&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;providers.name&lt;/code&gt;：指定 SkyWalking 为默认的 Tracing 提供商。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomSamplingPercentage&lt;/code&gt;：覆盖命名空间级别配置，设置 50% 的采样率。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customTags&lt;/code&gt;：为所有追踪数据添加 &lt;code&gt;env=production&lt;/code&gt; 标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;验证配置&#34;&gt;验证配置&lt;/h3&gt;
&lt;p&gt;访问网格中的服务（如 &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34; title=&#34;Bookinfo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bookinfo&lt;/a&gt; 示例应用）生成流量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl http://&lt;span class=&#34;nv&#34;&gt;$GATEWAY_URL&lt;/span&gt;/productpage
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看追踪数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl dashboard skywalking
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开浏览器访问 &lt;code&gt;http://localhost:8080&lt;/code&gt;，在追踪界面中查看生成的追踪信息。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/migrate-to-istio-telemetry-api/skywalking-tracing.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/migrate-to-istio-telemetry-api/skywalking-tracing.webp&#34; alt=&#34;image&#34; data-caption=&#34;Skywalking Tracing&#34;&gt;
  
  
  &lt;figcaption&gt;Skywalking Tracing&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;点击一个span后，你可以看到其中的追加的 &lt;code&gt;env: production&lt;/code&gt; tag。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/migrate-to-istio-telemetry-api/skywalking-span.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/migrate-to-istio-telemetry-api/skywalking-span.webp&#34; alt=&#34;image&#34; data-caption=&#34;Skywalking Span&#34;&gt;
  
  
  &lt;figcaption&gt;Skywalking Span&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Telemetry API 通过其模块化设计、动态更新和多层级支持，大幅降低了服务网格中遥测配置的复杂性。相比 MeshConfig 和 EnvoyFilter，Telemetry API 是一套更灵活、高效的现代化解决方案。我们强烈推荐迁移到 Telemetry API，以充分利用其功能。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>韩国旅行回忆：首尔、釜山与仁川的真实体验</title>
      <link>https://jimmysong.io/blog/south-korea-trip/</link>
      <pubDate>Wed, 04 Dec 2024 09:46:07 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/south-korea-trip/</guid>
      <description>
        
        
        &lt;p&gt;韩国，是我去了一次，可能不会去第二次的国家。难怪韩国人喜欢往外跑，原来是因为他们国家真的没啥好玩的。虽然文化上有不少相似之处，但实际体验却让我感到复杂而矛盾。借着最近韩国发生的政治风波，写下这篇关于我去年韩国之行的记录，既是对旅行的回顾，也是对这个国家的一些思考。&lt;/p&gt;
&lt;h2 id=&#34;题记&#34;&gt;题记&lt;/h2&gt;
&lt;p&gt;2023 年 10 月，我从中国距离韩国最近的城市威海出发，仅需 1 小时的飞行便抵达仁川机场。韩国与中国一衣带水，但这却是我第一次踏上这片土地。之前，我曾去过两次日本，这两个与中国邻近的国家，旅行体验却有着天壤之别。&lt;/p&gt;
&lt;p&gt;这次行程从仁川入境，先前往首尔，再坐火车南下釜山。在釜山停留较久后，返回首尔，从仁川飞回中国。&lt;/p&gt;
&lt;h2 id=&#34;首尔匆忙与拥挤&#34;&gt;首尔：匆忙与拥挤&lt;/h2&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113344992250823&amp;amp;bvid=BV1MyyGYqEdS&amp;amp;cid=26396068624&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;到达仁川机场后，我直接坐火车前往首尔。其间发生了一个小插曲。由于携带的行李较多，在仁川机场买火车票时弄丢了一件。眼看我要买票的那趟火车即将到来，我才发现行李少了一件。当时我火急火燎地出了站台，赶往机场到达大厅。但因为对环境不熟悉，找不到路。正在这时，火车进站检票处的工作人员问我是不是丢了行李。我跟他确认了行李内的物品和身份信息后，取回了丢失的行李，并使用之前购买的火车票重新进站。工作人员很热情，用流利的英语跟我对话。东西失而复得，而且是在火车即将开车之前找回，实在是庆幸。&lt;/p&gt;
&lt;p&gt;在首尔的第一晚，我选择住在明洞。这里是一个繁华的商业区，同时也是许多抗议和文化活动的集中地。漫步在明洞街头，我还看到了大量的法轮功宣传。另外韩国还有大量的教会，我在釜山住的地方就靠近一个教会。这种对比让我对韩国的社会氛围有了更深的思考。&lt;/p&gt;
&lt;p&gt;我的行程恰逢中秋节，韩国也放假。去南山塔的公交车站挤满了人，等了许久才上车。南山塔俯瞰整个首尔，但繁华和拥挤是我对这座城市最深的感受。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/tower.jpeg&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/tower.jpeg&#34; alt=&#34;image&#34; data-caption=&#34;首尔南山塔公交站&#34;&gt;
  
  
  &lt;figcaption&gt;首尔南山塔公交站&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;釜山更喜欢这里的舒适节奏&#34;&gt;釜山：更喜欢这里的舒适节奏&lt;/h2&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113366064434679&amp;amp;bvid=BV1mbymYeEtm&amp;amp;cid=26451576660&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;比起首尔，我更喜欢釜山的节奏。釜山依山傍海，有美丽的沙滩和繁忙的港口。这里让我想起家乡威海，但更加繁华，也更加国际化。釜山也是韩国与日本贸易的重要港口，这里的一切都洋溢着开放的气息。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/ganchuan.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/ganchuan.webp&#34; alt=&#34;image&#34; data-caption=&#34;甘川文化村&#34;&gt;
  
  
  &lt;figcaption&gt;甘川文化村&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在釜山旅行的一个亮点是购买了 Busan Pass，这种专为外国游客设计的旅行通票可以带你游览许多官方景点。釜山的乐天乐园是其中之一，既适合家庭游玩，又充满现代化气息。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/busan-park.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/busan-park.webp&#34; alt=&#34;image&#34; data-caption=&#34;釜山乐天乐园&#34;&gt;
  
  
  &lt;figcaption&gt;釜山乐天乐园&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;另一个难忘的经历是在釜山国际电影节上近距离见到了周润发，并在电影节的特别放映中重温了经典电影《卧虎藏龙》。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/biff.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/biff.webp&#34; alt=&#34;image&#34; data-caption=&#34;周润发在参加釜山电影节&#34;&gt;
  
  
  &lt;figcaption&gt;周润发在参加釜山电影节&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;仁川历史与现代的碰撞&#34;&gt;仁川：历史与现代的碰撞&lt;/h2&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113367725376595&amp;amp;bvid=BV1WJyUY8EJz&amp;amp;cid=26457407922&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;行程的最后一天，我在仁川停留了一天，夜晚去了仁川登陆纪念公园。这是一个值得参观的地方，纪念了朝鲜战争期间联合国军队的仁川登陆战役。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/un.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/un.webp&#34; alt=&#34;image&#34; data-caption=&#34;仁川纪念联合国军的纪念碑&#34;&gt;
  
  
  &lt;figcaption&gt;仁川纪念联合国军的纪念碑&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;韩国文化熟悉又陌生&#34;&gt;韩国文化：熟悉又陌生&lt;/h2&gt;
&lt;p&gt;历史建筑，景福宫像袖珍版的故宫，尤其是宫殿内的陈设，很像影视剧中拙劣的道具。但是韩国人还是不遗余力的推广自己的文化，很多白人、黑人穿着他们的传统服装在景福宫内拍照。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/jingfugong.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/jingfugong.webp&#34; alt=&#34;image&#34; data-caption=&#34;景福宫&#34;&gt;
  
  
  &lt;figcaption&gt;景福宫&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;韩国的便利店里有很多种泡面，吃起来味道感觉一般，我个人更喜欢吃杯面。甚至在汉阳公园的 711 里还有专门泡面的机器。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/noodles.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/noodles.webp&#34; alt=&#34;image&#34; data-caption=&#34;汉江公园里的自助泡面机&#34;&gt;
  
  
  &lt;figcaption&gt;汉江公园里的自助泡面机&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;韩国人喝咖啡真多，咖啡店到处都是，可以说咖啡流淌在韩国人的血液里了。最让我念念不忘的就是 blu shaak 咖啡，既便宜又好喝，这种咖啡有一种咸味。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/blue-shaak.JPG&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/blue-shaak.JPG&#34; alt=&#34;image&#34; data-caption=&#34;在釜山喝到的 blu shaak 咖啡&#34;&gt;
  
  
  &lt;figcaption&gt;在釜山喝到的 blu shaak 咖啡&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;韩国景福宫内随处可见的“中国文化”。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/shegnxiao.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/shegnxiao.webp&#34; alt=&#34;image&#34; data-caption=&#34;景福宫公园中的十二生肖&#34;&gt;
  
  
  &lt;figcaption&gt;景福宫公园中的十二生肖&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;博物馆中很多介绍都只有韩文和英文，没有中文介绍。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/paper.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/paper.webp&#34; alt=&#34;image&#34; data-caption=&#34;景福宫内某博物馆中的汉字帖子&#34;&gt;
  
  
  &lt;figcaption&gt;景福宫内某博物馆中的汉字帖子&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;韩国美食单调的味觉体验&#34;&gt;韩国美食：单调的味觉体验&lt;/h2&gt;
&lt;p&gt;韩餐部分吃起来还不错，不过大部分都是泡菜、酱汤、米饭、炸鸡、烤肉之类的，花样太少，远不如中国的饮食丰富，还没有早餐可以吃。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/korean-dish.JPG&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/korean-dish.JPG&#34; alt=&#34;image&#34; data-caption=&#34;韩餐&#34;&gt;
  
  
  &lt;figcaption&gt;韩餐&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;而且，在韩国便利店里买到的各种小零食，大多也不好吃，这点远不如日本，我觉得在日本的便利店里买到的东西口感都还不错。在韩国我就像一个文盲，一个韩文也不认识，而翻译软件经常翻译的莫名其妙，很多招牌和菜单上都没有英文或汉字，甚至连图片都没有，让人很无语。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/south-korea/korea-text.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/south-korea/korea-text.webp&#34; alt=&#34;image&#34; data-caption=&#34;莫名奇妙的韩文翻译&#34;&gt;
  
  
  &lt;figcaption&gt;莫名奇妙的韩文翻译&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;评价下次可能不会再来了&#34;&gt;评价：下次可能不会再来了&lt;/h2&gt;
&lt;p&gt;总结这次韩国之行，虽然有些亮点，但总体体验不尽如人意。语言障碍、文化隔阂，以及相比之下单调的饮食和高昂的住宿费用，让我感到再来一次的动力不足。不过，釜山的电影节和咖啡，以及仁川的历史氛围，还是让我留下了些许回味的瞬间。&lt;/p&gt;
&lt;p&gt;如果你没去过韩国，可以去体验一次；但对于我来说，这一次可能就是最后一次了。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio sidecar 和 ambient 模式的网络成本对比</title>
      <link>https://jimmysong.io/blog/istio-sidecar-vs-ambient-network-cost-performance/</link>
      <pubDate>Mon, 02 Dec 2024 12:17:21 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-sidecar-vs-ambient-network-cost-performance/</guid>
      <description>
        
        
        &lt;p&gt;在服务网格架构不断演进的过程中，了解不同部署模式下的网络成本对于优化性能和资源效率至关重要。本文将对比 Istio 的 sidecar 模式和 ambient 模式的网络成本，分享我在&lt;a href=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/&#34; title=&#34;这篇文章&#34;&gt;这篇文章&lt;/a&gt;中的一些观点。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-模式&#34;&gt;Sidecar 模式&lt;/h2&gt;
&lt;p&gt;Istio 的 sidecar 模式通过在每个 pod 旁部署 sidecar 代理来拦截服务间的流量。这种架构引入了额外的网络跳转，可能会增加延迟和计算资源使用量。然而，该模式内置了重要的性能优化特性：&lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/locality-load-balancing/&#34; title=&#34;本地性感知&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;本地性感知&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;图 1 展示了 Application 1 在 Istio sidecar 模式下访问位于不同可用区（AZ）的 Application 2 的流量路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-sidecar-vs-ambient-network-cost-performance/sidecar-mode.svg&#34; data-img=&#34;/blog/istio-sidecar-vs-ambient-network-cost-performance/sidecar-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;图 1：Application 1 在 Istio sidecar 模式下访问位于不同可用区（AZ）的 Application 2 的流量路径。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：Application 1 在 Istio sidecar 模式下访问位于不同可用区（AZ）的 Application 2 的流量路径。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;sidecar-模式的本地化感知&#34;&gt;Sidecar 模式的本地化感知&lt;/h3&gt;
&lt;p&gt;在 Sidecar 模式下，可以使用以下命令查看端点表中的本地性信息，从而更好地理解本地性管理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config endpoint &amp;lt;pod-name&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.namespace&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&amp;gt; -o yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下是一个示例输出片段，显示了集群 &lt;code&gt;outbound|9080||reviews.default.svc.cluster.local&lt;/code&gt; 的端点信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;addedViaApi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;circuitBreakers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;thresholds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;maxConnections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4294967295&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxPendingRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4294967295&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4294967295&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRetries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4294967295&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;maxConnections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxPendingRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRetries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HIGH&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;edsServiceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;outbound|9080||reviews.default.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostStatuses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socketAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.244.0.98&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;portValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;healthStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;edsHealthStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HEALTHY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;locality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-central1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;zone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-central1-c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stats&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cx_connect_fail&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cx_total&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rq_error&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rq_success&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rq_timeout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rq_total&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cx_active&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GAUGE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rq_active&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GAUGE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 省略&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 省略&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;outbound|9080||reviews.default.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;observabilityName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;outbound|9080||reviews.default.svc.cluster.local;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从中可以看到 sidecar 模式下对 Envoy 代理对 pod 基于负载均衡的细粒度控制，例如 &lt;code&gt;maxConnections&lt;/code&gt;, &lt;code&gt;maxRequests&lt;/code&gt;, &lt;code&gt;maxRetries&lt;/code&gt; 等 circuit breaker 配置，同时包含流量指标和健康状态。这些细节帮助在 Pod 级别管理流量的健康度、稳定性和延迟。&lt;/p&gt;
&lt;p&gt;流量负载均衡考虑到 Locality，如 zone 和 region。Envoy 使用这些信息对流量执行更加精准的区域感知流量分配策略（如优先使用同一 zone 内的服务）。&lt;/p&gt;
&lt;p&gt;每个 sidecar 代理都会优先将流量路由至同一可用区（AZ）或区域内的服务。这一设计减少了不必要的跨 AZ 流量，从而降低了由数据传输产生的高延迟和高成本。通过将流量限制在本地区域，sidecar 模式能够优化网络路径，避免跨区域的瓶颈。&lt;/p&gt;
&lt;p&gt;尽管 sidecar 架构计算密集，但其本地性感知功能在维护高效流量路由方面起到了关键作用，尤其是在多区域云部署中，该功能有助于降低跨区域流量成本。&lt;/p&gt;
&lt;h2 id=&#34;ambient-模式&#34;&gt;Ambient 模式&lt;/h2&gt;
&lt;p&gt;下图展示的 Istio ambient 模式的架构。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-sidecar-vs-ambient-network-cost-performance/istio-ambient-layers.svg&#34; data-img=&#34;/blog/istio-sidecar-vs-ambient-network-cost-performance/istio-ambient-layers.svg&#34; alt=&#34;image&#34; data-caption=&#34;图 2：Istio ambient 模式&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：Istio ambient 模式&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Istio ambient 模式包含两层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ztunnel 安全层（L3/L4 流量处理）&lt;/strong&gt;：在此模式下，ambient 模式仅依赖 zTunnel 进行流量管理，主要处理三层和四层的流量，即网络和传输层。这一方式可减少开销，确保基本的连接和安全要求得到满足。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Waypoint 代理层（L7 流量处理）&lt;/strong&gt;：此模式下引入了 waypoint 代理，以扩展至应用层流量，处理高级路由、观测性和策略执行。然而，waypoint 代理的部署位置对性能至关重要。为避免跨 AZ 流量，建议将 waypoint 代理分布于各个 AZ 内，以确保最佳性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ambient-模式的本地化感知&#34;&gt;Ambient 模式的本地化感知&lt;/h3&gt;
&lt;p&gt;相比之下，ambient 模式通过 ztunnel 和 waypoint 代理实现不同的架构。zTunnel 确保本地感知的流量路由，类似于 sidecar 模式，优先在同一 AZ 内路由流量，从而限制跨 AZ 流量并减少相应的网络成本。&lt;/p&gt;
&lt;p&gt;图 3 展示了 Application 1 在 Istio ambient 模式下访问位于不同 AZ 的 Application 2 的流量路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-sidecar-vs-ambient-network-cost-performance/ambient-mode.svg&#34; data-img=&#34;/blog/istio-sidecar-vs-ambient-network-cost-performance/ambient-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;图 3：Application 1 在 Istio ambient 模式下访问位于不同可用区（AZ）的 Application 2 的流量路径。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 3：Application 1 在 Istio ambient 模式下访问位于不同可用区（AZ）的 Application 2 的流量路径。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：图中 Waypoint Proxy 为演示目的单独显示；在实际中，它并不绑定到特定节点，可以与 Ztunnel 同节点部署。&lt;/p&gt;
&lt;p&gt;可以通过以下命令查看 Ambient 模式中 Ztunnel 的详细配置和流量分布：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl ztunnel-config workload -o yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下是一个示例输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;applicationTunnel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;canonicalName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;canonicalRevision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusterId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Kubernetes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;locality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-central1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;zone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-central1-c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage-v1-d5789fdfb-gmw5r&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gke-cilium-default-pool-63a77182-f699&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HBONE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo-productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Healthy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trustDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Kubernetes//Pod/default/productpage-v1-d5789fdfb-gmw5r&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workloadIps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;m&#34;&gt;10.28.2.14&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workloadName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workloadType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从中可以看到 ztunnel 隧道的本地化信息，ztunnel 可以对进出该节点所有 pod 的流量进行集中式管理，比如统一执行负载均衡、健康检查和区域感知等操作。&lt;/p&gt;
&lt;h3 id=&#34;waypoint-代理优化&#34;&gt;Waypoint 代理优化&lt;/h3&gt;
&lt;p&gt;然而，waypoint 代理并非自动具有 AZ 感知功能。关键问题在于它们的部署位置。为优化成本与性能，waypoint 代理需要跨所有 AZ 进行扩展，以便本地处理流量。否则，可能导致跨 AZ 流量和额外成本。此外，当流量进入 waypoint 代理时，原始本地性信息可能被隐藏，进一步增加了路由优化的难度。&lt;/p&gt;
&lt;p&gt;为优化性能和成本，建议 waypoint 代理在各个 AZ 内分布，以便能够本地处理流量。此外，ztunnel 与 waypoint 代理的通信设计为接近感知，从而确保流量被路由至最近的 waypoint 代理。这一特性进一步减少了跨 AZ 费用和延迟。&lt;/p&gt;
&lt;h2 id=&#34;使用-kiali-dashboard-进行可视化&#34;&gt;使用 Kiali dashboard 进行可视化&lt;/h2&gt;
&lt;p&gt;在对比 sidecar 和 ambient 模式时，为了更直观地理解本地性和路由行为，建议使用 Kiali dashboard。Kiali 能够直观展示不同模式下的流量路径，有助于理解 ambient 模式在复杂性上的表现。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-sidecar-vs-ambient-network-cost-performance/kiali.webp&#34; data-img=&#34;/blog/istio-sidecar-vs-ambient-network-cost-performance/kiali.webp&#34; data-width=&#34;3644&#34; data-height=&#34;2090&#34; alt=&#34;image&#34; data-caption=&#34;图 4：Kiali 页面&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 4：Kiali 页面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在对比 Istio 的 sidecar 和 ambient 模式的网络成本时，两种架构都提供了本地性感知的路由以减少跨 AZ 流量。然而，sidecar 模式在每个代理的本地性管理上更加完善，而 ambient 模式需要谨慎管理 waypoint 代理以避免额外成本。此外，需要考虑 ambient 模式的两种子模式（有或无 waypoint 代理）来理解它们对网络成本和性能的不同影响。&lt;/p&gt;
&lt;p&gt;如果希望深入了解四种主要的服务网格数据平面部署模式，建议阅读[深入解析服务网格的四种数据平面部署模式：性能、安全性与成本分析]/blog/service-mesh-data-plane-deployment-modes/)。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>思维导图工具评测：为什么我选择 Whimsical</title>
      <link>https://jimmysong.io/blog/mindmap-review/</link>
      <pubDate>Wed, 27 Nov 2024 14:46:41 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/mindmap-review/</guid>
      <description>
        
        
        &lt;div style=&#34;position: relative; width: 100%; height: 0; padding-top: 56.2500%;
 padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 0; overflow: hidden;
 border-radius: 8px; will-change: transform;&#34;&gt;
  &lt;iframe loading=&#34;lazy&#34; style=&#34;position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0;margin: 0;&#34;
  src=&#34;https://whimsical.com/embed/FuuokxVScXeGqU57Qo1V3P&#34; allowfullscreen=&#34;allowfullscreen&#34; allow=&#34;fullscreen&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;思维导图是一种高效的工具，用于整理思路、构建结构和规划项目。我尝试了许多思维导图工具，包括 Coggle、Miro、GitMind、MindMeister 等。这些工具各有特点，但最终 Whimsical 成为了我的首选。在这篇博客中，我将深入介绍这些工具的特点，并分享选择 Whimsical 的原因。&lt;/p&gt;
&lt;h2 id=&#34;在线思维导图工具对比&#34;&gt;在线思维导图工具对比&lt;/h2&gt;
&lt;p&gt;在选择在线思维导图工具时，我重点关注以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否支持嵌入网站并具备交互性。&lt;/li&gt;
&lt;li&gt;操作是否直观流畅。&lt;/li&gt;
&lt;li&gt;功能是否能满足个人和团队协作的需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;coggle&#34;&gt;Coggle&lt;/h3&gt;
&lt;p&gt;Coggle 是一款专注于思维导图的在线工具，界面清新，适合个人用户和小型团队。它的核心特色是可以快速创建节点并生成树状结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;免费版提供无限制的思维导图创建。&lt;/li&gt;
&lt;li&gt;支持实时协作，适合简单项目规划。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;操作逻辑不够直观，尤其是在复杂项目中容易产生混乱。&lt;/li&gt;
&lt;li&gt;缺乏高级功能，不适合需要高效编辑的用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;miro&#34;&gt;Miro&lt;/h3&gt;
&lt;p&gt;Miro 是一款功能丰富的协作白板工具，思维导图是其众多功能中的一个模块。它适合团队在复杂项目中进行头脑风暴和流程规划。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;支持多种图表类型，扩展性强。&lt;/li&gt;
&lt;li&gt;界面设计美观，操作流畅，支持团队实时协作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;嵌入网站时节点无法展开和折叠，仅适合静态展示。&lt;/li&gt;
&lt;li&gt;功能丰富但较为复杂，对新用户来说学习曲线较陡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gitmind&#34;&gt;GitMind&lt;/h3&gt;
&lt;p&gt;GitMind 是一款轻量级的在线思维导图工具，界面简洁，专注于核心功能，适合初学者或对功能需求不高的用户。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于上手，操作简单。&lt;/li&gt;
&lt;li&gt;提供多种模板，便于快速构建导图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能较单一，无法满足复杂项目需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;免费版限制较多，对高级用户不够友好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mindmeister&#34;&gt;MindMeister&lt;/h3&gt;
&lt;p&gt;MindMeister 是一款成熟的在线思维导图工具，以优雅的界面和强大的分享功能著称。它的嵌入功能特别适合内容创作者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;支持节点的展开和折叠，交互体验良好。&lt;/li&gt;
&lt;li&gt;提供清晰的界面和流畅的操作体验。&lt;/li&gt;
&lt;li&gt;免费版适合个人用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;免费版限制导图数量，对于长期使用者可能需要订阅高级版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;whimsical&#34;&gt;Whimsical&lt;/h3&gt;
&lt;p&gt;Whimsical 是一款多功能在线工具，除了思维导图，还支持流程图、看板等多种图表类型。它的设计简洁直观，功能多样，是团队协作的利器。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/mindmap-review/whimsical-ui.png&#34; data-img=&#34;https://jimmysong.io/img/blog/mindmap-review/whimsical-ui.png&#34; alt=&#34;image&#34; data-caption=&#34;Whimsical 界面&#34;&gt;
  
  
  &lt;figcaption&gt;Whimsical 界面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;节点支持展开和折叠，交互性出色。&lt;/li&gt;
&lt;li&gt;操作直观，上手快，适合个人和团队使用。&lt;/li&gt;
&lt;li&gt;支持生成嵌入代码和链接分享，展示灵活。&lt;/li&gt;
&lt;li&gt;除了思维导图，还能创建流程图、看板等，适合多场景使用。&lt;/li&gt;
&lt;li&gt;支持 AI 思维导图，但是对免费用户有一定限制。&lt;/li&gt;
&lt;li&gt;从中国大陆可以正常访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;免费版限制 3 个 team board，个人用户无需考虑这一点。&lt;/li&gt;
&lt;li&gt;只支持导出为低像素的 png 图片，不支持 svg 格式导出。&lt;/li&gt;
&lt;li&gt;无法导入 Markdown 文件生成思维导图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本地化思维导图工具对比&#34;&gt;本地化思维导图工具对比&lt;/h2&gt;
&lt;p&gt;如果不需要在线协作或网站嵌入，本地化思维导图工具也是不错的选择。其中，MindNode、XMind 和 Markmap 都是备受推荐的工具。&lt;/p&gt;
&lt;h3 id=&#34;mindnode&#34;&gt;MindNode&lt;/h3&gt;
&lt;p&gt;MindNode 是一款 macOS 和 iOS 平台的思维导图工具，以其简约设计和轻量化著称，适合快速构建简单的思维导图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;轻量化工具，操作简单流畅。&lt;/li&gt;
&lt;li&gt;与 macOS 和 iOS 的深度集成，支持导出多种格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;高级功能有限，难以满足复杂需求。&lt;/li&gt;
&lt;li&gt;不支持实时协作，仅适合个人使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;xmind&#34;&gt;XMind&lt;/h3&gt;
&lt;p&gt;XMind 是一款历史悠久的思维导图工具，以功能强大和专业性著称，适合对功能要求较高的用户。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;支持多种思维导图样式，功能丰富。&lt;/li&gt;
&lt;li&gt;导出选项多样，适合演示和文档输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;界面相对复杂，新用户需要一定学习成本。&lt;/li&gt;
&lt;li&gt;本地化工具，协作和展示功能较弱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;markmap&#34;&gt;Markmap&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/markmap/markmap&#34; title=&#34;Markmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markmap&lt;/a&gt; 是一款基于 Markdown 的开源思维导图工具，非常适合技术用户。它可以将 Markdown 文件直接渲染成动态思维导图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;支持私有化部署，适合安全要求高的场景。&lt;/li&gt;
&lt;li&gt;兼容 Markdown 格式，适合开发者和技术人员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;功能较为单一，仅能展示静态内容。&lt;/li&gt;
&lt;li&gt;动态交互性有限，对非技术用户不够友好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么选择-whimsical&#34;&gt;为什么选择 Whimsical？&lt;/h2&gt;
&lt;p&gt;经过多方比较，我最终选择 Whimsical，主要基于以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;交互性出色&lt;/strong&gt;：支持节点的展开和折叠，嵌入网页后体验良好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简洁直观&lt;/strong&gt;：界面设计易用性强，操作流畅，无需复杂学习。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多功能性&lt;/strong&gt;：不仅支持思维导图，还能绘制流程图、创建看板等，满足多种需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协作能力强&lt;/strong&gt;：实时多人编辑功能极大提升团队效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活分享&lt;/strong&gt;：支持生成嵌入代码和分享链接，适合展示和传播。&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    下载 SVG 图片
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    Whimsical 免费版不支持导出 Markdown、高清 PNG 或 PDF 格式。但有技巧可下载思维导图 SVG 文件，在编辑中的思维导图 URL 加“.svg”后缀能下载矢量图。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;不同思维导图工具有各自的优势和适用场景。对我而言，Whimsical 的交互性、多功能性以及便捷的协作体验使其脱颖而出。如果你正在寻找一款能够满足多场景需求的在线思维导图工具，不妨尝试一下 Whimsical，它可能会带给你意想不到的惊喜。如果想要直接在自己的网站中私有化部署一个思维导图，那么我推荐你使用 Markmap。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Follow.is 使用体验分享：高效信息管理的智能工具</title>
      <link>https://jimmysong.io/blog/follow-is-review/</link>
      <pubDate>Wed, 27 Nov 2024 11:01:16 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/follow-is-review/</guid>
      <description>
        
        
        &lt;p&gt;最近几个月，我一直在使用一款名为 &lt;a href=&#34;https://follow.is/&#34; title=&#34;Follow.is&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Follow.is&lt;/a&gt; 的信息聚合工具，经过一段时间的探索，我对它的功能、优势以及不足有了一些自己的看法。借此博客，我想和大家分享我的使用体验，也希望能为考虑使用这款工具的朋友们提供一些参考。&lt;/p&gt;
&lt;div style=&#34;position: relative; width: 100%; height: 0; padding-top: 56.2500%;
 padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 0; overflow: hidden;
 border-radius: 8px; will-change: transform;&#34;&gt;
  &lt;iframe loading=&#34;lazy&#34; style=&#34;position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0;margin: 0;&#34;
  src=&#34;https://www.canva.cn/design/DAGXoxCRttQ/iQTUH_J_27dq_jzUiHlMuw/view?embed&#34; allowfullscreen=&#34;allowfullscreen&#34; allow=&#34;fullscreen&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;什么是-followis&#34;&gt;什么是 Follow.is？&lt;/h2&gt;
&lt;p&gt;Follow.is 是一个内容聚合工具，旨在帮助用户从不同来源高效获取和管理信息。它支持通过 RSS 订阅、直接输入网址等方式关注各种内容源，并在统一的界面中集中展示更新内容。这个工具对于习惯用 RSS 阅读器的人来说，既熟悉又方便，同时也加入了一些智能化的功能，让人眼前一亮。&lt;/p&gt;
&lt;p&gt;不过需要注意的是，Follow.is 目前还无法直接注册使用，必须通过他人邀请获得邀请码才能加入。这种设计虽然增加了些许门槛，但也为用户间的推荐提供了一种独特的方式。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/follow-is-review/follow-ui.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/follow-is-review/follow-ui.webp&#34; alt=&#34;image&#34; data-caption=&#34;Follow 界面&#34;&gt;
  
  
  &lt;figcaption&gt;Follow 界面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;使用中的亮点&#34;&gt;使用中的亮点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;平台支持&lt;/strong&gt;
Follow.is 支持多个操作系统和 Web 访问，界面简洁直观。虽然目前尚未推出手机应用，但在桌面端的体验非常流畅，对于我这种习惯在电脑上阅读内容的人来说，非常友好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与 Obsidian 集成&lt;/strong&gt;
我尤其喜欢 Follow.is 的一项特性：与 Obsidian 的集成。通过这项功能，我可以一键将文章保存为 Markdown 格式并存储到本地的 Obsidian 笔记库中，方便后续编辑和整理。这种无缝衔接为我的知识管理效率带来了极大的提升。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动化功能&lt;/strong&gt;
Follow.is 提供了诸如自动翻译和自动摘要这样的智能功能。对于非母语内容，自动翻译可以让我快速了解文章内容；而自动摘要功能则帮助我在短时间内抓住长篇文章的核心要点。这些功能在信息量繁多的场景中显得尤为实用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;认领订阅源和打赏功能&lt;/strong&gt;
Follow.is 允许用户认领自己的订阅源，一旦认领成功，其他用户可以通过平台的虚拟代币 $POWER 对内容进行打赏。尽管我认为打赏功能的实际作用有限，但这一机制为创作者提供了额外的收益来源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用中的不足&#34;&gt;使用中的不足&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;订阅源获取的局限性&lt;/strong&gt;
Follow.is 的一大难点在于获取高质量的订阅源。虽然它支持 RSS，但很多封闭的平台（如微信公众号）并不支持 RSS 订阅，这使得关注此类内容变得复杂。除非这些平台的内容发布者愿意在其他支持订阅的地方同步更新，否则 Follow.is 在这方面的体验仍有待改进。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺少评论功能&lt;/strong&gt;
Follow.is 不支持评论功能，这使得用户之间无法就某篇内容进行互动和讨论。虽然我个人觉得这不是刚需（因为很多在线评论并没有太多营养），但如果有一个高质量的互动空间，或许会更有趣。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手机端的缺失&lt;/strong&gt;
目前 Follow.is 尚未推出手机应用，这对于习惯用碎片时间阅读的用户来说是一个限制。尽管可以通过手机浏览器访问其网页版，但体验不如专用应用程序方便。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说，Follow.is 是一款兼具功能性和智能化的内容聚合工具，适合那些需要高效获取和管理信息的用户。它的自动化功能、与 Obsidian 的集成、以及认领订阅源的设计让我印象深刻；同时，它也有一些不足，比如订阅源获取的限制和缺少手机应用。&lt;/p&gt;
&lt;p&gt;目前，这款软件仍处于邀请制使用阶段，希望未来能进一步开放注册，同时优化一些用户反馈较多的功能。如果你也有机会试用，我相信它会成为你信息管理的一大利器。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>如何使用通义千问 AI 生成 PPT 并发布到个人网站</title>
      <link>https://jimmysong.io/blog/ai-ppt-to-hugo/</link>
      <pubDate>Tue, 26 Nov 2024 17:06:58 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/ai-ppt-to-hugo/</guid>
      <description>
        
        
        &lt;p&gt;以下是使用通义千问 AI 快速生成 PPT 并将其发布到个人网站的简单流程：&lt;/p&gt;
&lt;div style=&#34;position: relative; width: 100%; height: 0; padding-top: 56.2500%;
 padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 0; overflow: hidden;
 border-radius: 8px; will-change: transform;&#34;&gt;
  &lt;iframe loading=&#34;lazy&#34; style=&#34;position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0;margin: 0;&#34;
  src=&#34;https://www.canva.cn/design/DAGXkFFIYXY/d7XYxuZkK1Mcpz3Qrb2bfw/view?embed&#34; allowfullscreen=&#34;allowfullscreen&#34; allow=&#34;fullscreen&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;注：PPT 内容由通义 AI 生成，访问 &lt;a href=&#34;https://tongyi.aliyun.com/aippt&#34; title=&#34;tongyi.ai 智能&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tongyi.ai 智能&lt;/a&gt;生成更多 PPT&lt;/p&gt;
&lt;h2 id=&#34;使用通义千问生成-ppt&#34;&gt;使用通义千问生成 PPT&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工具地址&lt;/strong&gt;：&lt;a href=&#34;https://tongyi.aliyun.com/aippt&#34; title=&#34;通义千问 AI PPT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;通义千问 AI PPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;登录方式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用淘宝账号和手机号验证码登录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能亮点&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;主题生成&lt;/strong&gt;：输入一个主题，AI 可以自动生成 PPT 内容（适合简单场景）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长文生成&lt;/strong&gt;：支持最多 &lt;strong&gt;10 万字&lt;/strong&gt;的文本解析，适合将报告或博客生成 PPT。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模板个性化&lt;/strong&gt;：支持选择多种模板，生成的 PPT 可以导出为 &lt;strong&gt;pptx 格式&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用体验&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;我尝试用自己的博客生成了一份 PPT，AI 自动整理了章节和配图，效果还不错，模板选择提升了个性化展示的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导入-canva-进行调整&#34;&gt;导入 Canva 进行调整&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工具地址&lt;/strong&gt;：&lt;a href=&#34;https://www.canva.cn/&#34; title=&#34;Canva.cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Canva.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调整方法&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;将从通义千问生成的 &lt;strong&gt;pptx 文件&lt;/strong&gt;导入 Canva。&lt;/li&gt;
&lt;li&gt;根据需要调整 &lt;strong&gt;排版布局&lt;/strong&gt;，补充和调整一些内容。&lt;/li&gt;
&lt;li&gt;完成调整后，在 Canva 中选择导出为 &lt;strong&gt;嵌入式网页&lt;/strong&gt;，生成一个可分享的链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;将-ppt-发布到个人网站&#34;&gt;将 PPT 发布到个人网站&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工具&lt;/strong&gt;：Hugo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作步骤&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 Hugo 博客中，使用以下 Shortcode 嵌入 Canva 的分享链接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://www.canva.cn/design/DAGXjo0P9w0/view&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存后部署网站，即可在博客中直接展示 PPT。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用场景&#34;&gt;使用场景&lt;/h2&gt;
&lt;p&gt;博客嵌入 PPT 的适用场景可以涵盖以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提炼长内容的梗概；&lt;/li&gt;
&lt;li&gt;简化多图内容的存储与排版；&lt;/li&gt;
&lt;li&gt;展示数据与图表；&lt;/li&gt;
&lt;li&gt;教程与演示文档；&lt;/li&gt;
&lt;li&gt;总结与复盘；&lt;/li&gt;
&lt;li&gt;对外分享和推广。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过 &lt;strong&gt;通义千问 AI PPT&lt;/strong&gt; 和 &lt;strong&gt;Canva&lt;/strong&gt; 的结合，可以快速生成并发布高质量的 PPT 到个人网站。这种方法尤其适合将博客内容快速转化为视觉化演示，既省时又高效。&lt;/p&gt;
&lt;p&gt;如果需要更多样式和交互，可以进一步自定义 Canva 的模板，满足更高的个性化需求。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>新一代终端工具 Warp：重新定义命令行体验</title>
      <link>https://jimmysong.io/blog/warp-modern-terminal-tool/</link>
      <pubDate>Mon, 25 Nov 2024 11:12:45 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/warp-modern-terminal-tool/</guid>
      <description>
        
        
        &lt;p&gt;最近，我在尝试各种终端工具时发现了一个令人耳目一新的产品——&lt;strong&gt;&lt;a href=&#34;https://www.warp.dev/&#34; title=&#34;Warp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Warp&lt;/a&gt;&lt;/strong&gt;。这是一款专为开发者设计的现代终端工具，它不仅颠覆了我们对传统命令行工具的认知，还以智能化的交互体验显著提升了生产力。本文将介绍 Warp 的核心功能，并对比传统工具（如 iTerm），探讨它为何可能成为终端工具的新标杆。&lt;/p&gt;
&lt;h2 id=&#34;什么是-warp&#34;&gt;什么是 Warp？&lt;/h2&gt;
&lt;p&gt;Warp 是一款现代化终端工具，由 Rust 开发，旨在通过更直观、更高效的交互设计重新定义终端的使用体验。它与传统的终端工具（如 iTerm2 或 macOS 的默认终端）相比，加入了诸多智能化和现代化的功能。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/warp-modern-terminal-tool/warp.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/warp-modern-terminal-tool/warp.webp&#34; alt=&#34;image&#34; data-caption=&#34;Warp 命令行界面&#34;&gt;
  
  
  &lt;figcaption&gt;Warp 命令行界面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Warp 的设计围绕以下几个核心理念展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;智能化：&lt;/strong&gt; 内置 Warp AI，支持通过自然语言与终端交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效化：&lt;/strong&gt; 采用块状结构管理命令和输出，便于复制、分享和回溯。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协作性：&lt;/strong&gt; 借助 Warp Drive 支持团队共享工作流和脚本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可定制性：&lt;/strong&gt; 提供现代编辑器功能，允许深度定制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;warp-的核心功能&#34;&gt;Warp 的核心功能&lt;/h2&gt;
&lt;h3 id=&#34;1-块block结构&#34;&gt;1. 块（Block）结构&lt;/h3&gt;
&lt;p&gt;Warp 将每条命令及其输出划分为独立的块。每个块可以单独操作，例如复制、删除或分享，这使得管理和回溯命令变得异常简单。&lt;/p&gt;
&lt;p&gt;对比传统终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 iTerm 中，所有命令和输出混杂在一起，回溯历史命令时往往需要手动滚动查找。&lt;/li&gt;
&lt;li&gt;Warp 的块式设计可以一键选定某个命令的所有输出，极大地提高了效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-warp-drive工作流和协作&#34;&gt;2. Warp Drive：工作流和协作&lt;/h3&gt;
&lt;p&gt;Warp Drive 是 Warp 提供的团队协作工具，支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;个人工作区：&lt;/strong&gt; 保存常用命令和工作流，随时调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;团队共享：&lt;/strong&gt; 支持将交互式笔记本或复杂脚本分享给团队成员，方便知识传递。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时同步：&lt;/strong&gt; 团队的所有工作内容在更新后可立即同步，确保大家始终使用最新的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比传统终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iTerm 更专注于个人使用，协作功能几乎为零。&lt;/li&gt;
&lt;li&gt;Warp Drive 将终端工具扩展到团队场景，弥补了传统工具在这一点上的不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-agent-模式自然语言交互&#34;&gt;3. Agent 模式：自然语言交互&lt;/h3&gt;
&lt;p&gt;Warp 的 Agent 模式让你可以直接用自然语言向终端发出指令，Warp AI 会将其解析为具体的命令并执行。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入“创建一个 Python 虚拟环境并安装 requests 库”，Warp 会自动生成并执行相关命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比传统终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iTerm 或其他工具需要用户手动输入命令，依赖于用户对命令语法的熟悉程度。&lt;/li&gt;
&lt;li&gt;Warp 的 Agent 模式显著降低了命令行的学习门槛，并能加速日常任务的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-现代化编辑器&#34;&gt;4. 现代化编辑器&lt;/h3&gt;
&lt;p&gt;Warp 提供类似于 IDE 的命令编辑体验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持多光标操作、语法高亮、自动补全。&lt;/li&gt;
&lt;li&gt;提供上下文感知，输入命令时会根据历史记录或环境智能提示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比传统终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iTerm 等工具的输入框仅支持最基本的文本输入，没有现代编辑器的智能功能。&lt;/li&gt;
&lt;li&gt;Warp 的编辑功能大幅提升了用户输入命令的效率和准确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-内置-warp-ai&#34;&gt;5. 内置 Warp AI&lt;/h3&gt;
&lt;p&gt;Warp 集成了 AI 功能，可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;智能建议：&lt;/strong&gt; 根据上下文预测你可能需要的命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自我纠错：&lt;/strong&gt; 如果输入的命令有问题，Warp AI 能检测并建议修正方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学习环境：&lt;/strong&gt; Warp AI 可学习工具或库的 &lt;code&gt;--help&lt;/code&gt; 输出，帮助用户生成正确的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比传统终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iTerm 不具备任何智能化功能，而 Warp 的 AI 提升了终端工具的可用性，尤其对初学者非常友好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;与传统工具如-iterm的对比&#34;&gt;与传统工具（如 iTerm）的对比&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;功能&lt;/th&gt;
          &lt;th&gt;Warp&lt;/th&gt;
          &lt;th&gt;iTerm2&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;命令块管理&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;块状结构，独立管理命令和输出&lt;/td&gt;
          &lt;td&gt;所有内容混杂在一处，需要滚动查找&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;团队协作&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;支持 Warp Drive 分享和同步&lt;/td&gt;
          &lt;td&gt;不支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;自然语言交互&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Agent 模式，支持自然语言指令&lt;/td&gt;
          &lt;td&gt;不支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;编辑器功能&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;语法高亮、多光标、智能补全&lt;/td&gt;
          &lt;td&gt;基本的文本输入&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;智能化支持&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Warp AI 提供建议、自我纠错和学习&lt;/td&gt;
          &lt;td&gt;不支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;GPU 加速、流畅渲染&lt;/td&gt;
          &lt;td&gt;良好&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;跨平台支持&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;支持 macOS 和 Linux（Windows开发中）&lt;/td&gt;
          &lt;td&gt;支持 macOS、Linux、Windows&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;为什么选择-warp&#34;&gt;为什么选择 Warp？&lt;/h2&gt;
&lt;p&gt;如果你是一名开发者或终端重度用户，Warp 提供了许多无法忽视的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;免费&lt;/strong&gt;：对于个人用户，可以免费使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台&lt;/strong&gt;：支持 macOS、Linux，Windows 版本即将推出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效：&lt;/strong&gt; 块式管理和现代化编辑器功能可以节省大量时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;智能：&lt;/strong&gt; AI 支持让复杂命令变得简单，降低了使用门槛。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协作：&lt;/strong&gt; Warp Drive 为团队共享知识和工作流提供了极大便利。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Warp 是一款令人兴奋的终端工具，它不仅提供了更现代、更智能的用户体验，还弥补了传统工具的多项不足。对于追求效率和智能化的开发者来说，Warp 是值得一试的选择。如果你还在使用 iTerm，不妨尝试一下 Warp，它可能会彻底改变你对终端的认知。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>为什么我将笔记从 Notion 迁移到 Obsidian？</title>
      <link>https://jimmysong.io/blog/typora-notion-to-obsidian/</link>
      <pubDate>Thu, 21 Nov 2024 14:43:02 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/typora-notion-to-obsidian/</guid>
      <description>
        
        
        &lt;p&gt;多年来，我尝试过多款笔记和 Markdown 编辑工具，包括 Typora、Notion 和 Obsidian。每一款工具都有它的优缺点，但最终我决定将笔记迁移到 Obsidian。这篇文章将详细记录我的思考过程、对比分析，以及迁移的原因。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/typora-notion-to-obsidian/obsidian-app-ui.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/typora-notion-to-obsidian/obsidian-app-ui.webp&#34; alt=&#34;image&#34; data-caption=&#34;Obsidian 笔记编辑页面&#34;&gt;
  
  
  &lt;figcaption&gt;Obsidian 笔记编辑页面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;早期的选择从-typora-到-notion&#34;&gt;早期的选择：从 Typora 到 Notion&lt;/h2&gt;
&lt;p&gt;最初，我使用 Typora 作为主要的 Markdown 编辑工具。Typora 简洁优雅，支持多种文档格式导出，是一款极具吸引力的软件。然而，随着我管理的文档和笔记日益增多，Typora 的缺点也逐渐暴露：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缺乏文件管理功能&lt;/strong&gt;：Typora 是一个纯编辑器，没有笔记组织或管理的能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏插件扩展&lt;/strong&gt;：Typora 封闭的生态限制了我的个性化需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;收费&lt;/strong&gt;：作为商业软件，Typora 需要购买授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在发现 Typora 的局限性后，我转而使用 Notion。Notion 提供了强大的笔记管理能力，其数据库功能让我能够轻松归档和分类文档，并支持跨平台协作。这一阶段，我还利用 Notion 构建了家庭账本和知识库。然而，随着时间推移，Notion 的一些问题让我逐渐感到不满：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;体积庞大&lt;/strong&gt;：在手机端，Notion App 的安装包接近 1GB，占用存储空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导出兼容性差&lt;/strong&gt;：导出的 Markdown 文件与 Hugo 和 GitHub Pages 不完全兼容，格式调整需要额外工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在线依赖&lt;/strong&gt;：Notion 必须联网使用，且需要注册账号，这增加了使用门槛。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;付费订阅问题&lt;/strong&gt;：虽然订阅了一年的 Notion AI，但效果不如 ChatGPT，功能冗余。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;obsidian-的重新发现&#34;&gt;Obsidian 的重新发现&lt;/h2&gt;
&lt;p&gt;最近阅读了 &lt;a href=&#34;https://atbug.com/enhance-obsidian-experience-plugins-tips/&#34; title=&#34;全面提升 Obsidian 体验：插件与日常技巧分享&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;全面提升 Obsidian 体验：插件与日常技巧分享&lt;/a&gt;，让我重新审视 Obsidian 的潜力。早年试用时，我觉得 Obsidian 界面“丑陋”，文件组织方式也不够直观。然而，现在的 Obsidian 已今非昔比，丰富的插件生态、灵活的文件管理能力，以及对开源社区的支持，让我再次尝试并最终选择了它。&lt;/p&gt;
&lt;h2 id=&#34;软件对比分析&#34;&gt;软件对比分析&lt;/h2&gt;
&lt;p&gt;在迁移到 Obsidian 之前，我仔细对比了 Typora、Notion 和 Obsidian 的优缺点。以下是对比表：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;Typora&lt;/th&gt;
          &lt;th&gt;Notion&lt;/th&gt;
          &lt;th&gt;Obsidian&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;价格&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;商业软件，需要购买&lt;/td&gt;
          &lt;td&gt;个人用户免费，AI 功能 $10/月&lt;/td&gt;
          &lt;td&gt;免费，开源软件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;界面简洁，导出多种文档格式&lt;/td&gt;
          &lt;td&gt;功能强大，适合协作，数据库功能优秀&lt;/td&gt;
          &lt;td&gt;丰富的插件生态，灵活的文档管理，开源透明&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;无文件管理，无插件支持&lt;/td&gt;
          &lt;td&gt;在线依赖，不支持本地管理，文件导出问题&lt;/td&gt;
          &lt;td&gt;插件功能复杂，需要手动调整，入门稍陡&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;单文档编辑&lt;/td&gt;
          &lt;td&gt;知识库管理与协作&lt;/td&gt;
          &lt;td&gt;高度定制化的本地知识管理和 Markdown 编辑&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;为什么选择-obsidian&#34;&gt;为什么选择 Obsidian？&lt;/h2&gt;
&lt;p&gt;在使用 Typora 和 Notion 后，我发现自己的需求更倾向于 Obsidian 所提供的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;文档组织能力&lt;/strong&gt;：Obsidian 支持在统一界面内组织 Markdown 文档，并在移动文件时自动更新引用链接，这大大简化了管理工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件生态丰富&lt;/strong&gt;：Obsidian 拥有大量插件，满足不同需求，比如绘图（Excalidraw）、笔记清理（Clear Unused Images）、文件统计（Vault Full Statistics）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开源与本地化&lt;/strong&gt;：所有文件存储在本地 vault 中，不依赖在线服务，支持迁移和备份，同时可以完全掌控数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台同步&lt;/strong&gt;：通过 iCloud，我可以在 iPhone 和 MacBook 上无缝同步笔记。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;obsidian-的不足与解决方法&#34;&gt;Obsidian 的不足与解决方法&lt;/h2&gt;
&lt;p&gt;尽管 Obsidian 非常适合我的需求，但仍存在一些小问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;笔记内部搜索&lt;/strong&gt;：目前没有区分大小写的选项，这对搜索精确性略有影响，可以通过其他编辑器打开文件后执行笔记内搜索和替换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云存储对接&lt;/strong&gt;：免费版不支持直接集成云存储，但通过 iCloud 手动同步已经足够。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mermaid 图表支持&lt;/strong&gt;：渲染的图表可能超出页面宽度，安装 Diagram Popup 可以解决。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;我的-obsidian-插件推荐&#34;&gt;我的 Obsidian 插件推荐&lt;/h2&gt;
&lt;p&gt;以下是我最常用的插件清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Excalidraw&lt;/strong&gt;：绘制草图。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linter&lt;/strong&gt;：优化 YAML metadata。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dataview&lt;/strong&gt;：数据视图展示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Templater&lt;/strong&gt;：自动化模板。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advanced Tables&lt;/strong&gt;：表格增强。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这些插件，我将 Obsidian 打造成了一个功能强大的笔记工具，既满足了个人知识管理需求，又能够支持博客写作。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;从 Typora 到 Notion，再到最终的 Obsidian，是我对笔记工具需求不断变化的结果。Typora 的简洁、Notion 的强大都吸引过我，但 Obsidian 开源、可扩展、本地化的特性，真正让我感受到自由和高效。虽然使用中仍有一些问题，但通过插件和社区支持，我已经完全适应了 Obsidian 的生态。&lt;/p&gt;
&lt;p&gt;如果你也在寻找一款强大的 Markdown 笔记工具，不妨试试 Obsidian。或许它也能成为你的最终选择！&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio Ambient 模式中的透明流量拦截过程详解</title>
      <link>https://jimmysong.io/blog/istio-ambient-traffic-interception/</link>
      <pubDate>Mon, 18 Nov 2024 11:48:39 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-ambient-traffic-interception/</guid>
      <description>
        
        
        &lt;p&gt;这是我关于 Istio ambient 模式系列文章的第一篇。在接下来的几篇中，我将深入探讨 ambient 模式的关键组件及其工作原理，包括 ztunnel 如何将流量转发到 waypoint proxy，waypoint proxy 如何处理流量，以及通过 bookinfo 示例完整理解流量路径的操作。由于流量拦截是服务网格的基础功能，因此我选择从它开始，为大家提供扎实的理解基础。&lt;/p&gt;
&lt;p&gt;Istio ambient 模式是一种无需在每个 pod 中注入 sidecar 的服务网格实现方式。它通过在 pod 的网络命名空间内配置透明流量拦截和重定向，使应用程序无需修改即可享受服务网格的功能。以下内容将详细解析透明流量拦截的实现过程，涉及组件如 &lt;strong&gt;Istio CNI Node Agent&lt;/strong&gt;、&lt;strong&gt;ztunnel&lt;/strong&gt;、&lt;strong&gt;网络命名空间&lt;/strong&gt; 和 &lt;strong&gt;iptables 规则&lt;/strong&gt;，并通过流程图和示意图进行说明。&lt;/p&gt;
&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;
&lt;h3 id=&#34;linux-网络命名空间&#34;&gt;Linux 网络命名空间&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;网络命名空间（Network Namespace）&lt;/strong&gt; 是 Linux 内核的功能，用于隔离不同进程的网络环境。每个网络命名空间都有独立的网络设备、IP 地址、路由表和 iptables 规则。容器技术（如 Docker、Kubernetes）利用网络命名空间为每个容器（或 pod）提供独立的网络栈。&lt;/p&gt;
&lt;h3 id=&#34;istio-cni-node-agent&#34;&gt;Istio CNI Node Agent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Istio CNI Node Agent&lt;/strong&gt; 是 ambient 模式中的核心组件之一，负责在 Kubernetes 节点上检测加入 ambient 网格的 pod，并为这些 pod 配置流量重定向规则。需要注意的是，这里使用的是 Istio CNI Node Agent，而非传统的 Istio CNI 插件。Node Agent 是一个守护进程，与 ztunnel 协同工作，而不是直接参与网络插件的工作。&lt;/p&gt;
&lt;h3 id=&#34;ztunnel&#34;&gt;ztunnel&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ztunnel&lt;/strong&gt; 是 ambient 模式中的重要组件，以 DaemonSet 的形式运行在每个节点上，负责：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收并处理被重定向的流量；&lt;/li&gt;
&lt;li&gt;实现 L4 层的策略，如 mTLS 加密和访问控制；&lt;/li&gt;
&lt;li&gt;与控制平面通信以获取配置和证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hbone基于-http-的隧道协议&#34;&gt;HBONE（基于 HTTP 的隧道协议）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;HBONE（HTTP-Based Overlay Network Encapsulation）&lt;/strong&gt; 是 Istio 引入的协议，用于在 ztunnel 和 waypoint proxy 之间传输任意 TCP 流量。HBONE 利用 HTTP/2 和 HTTP/3 的多路复用及加密特性，提高通信效率和安全性。&lt;/p&gt;
&lt;h2 id=&#34;流量拦截过程详解&#34;&gt;流量拦截过程详解&lt;/h2&gt;
&lt;p&gt;在 ambient 模式下，应用程序 pod 无需修改代码，也不需要注入 sidecar。流量拦截和重定向的主要过程发生在 &lt;strong&gt;pod 的网络命名空间&lt;/strong&gt; 内部，这种方式避免了与底层 CNI 的冲突。以下是其步骤概览：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-traffic-interception/7b94ccedcde4f27f06d158187d7904e2.svg&#34; data-img=&#34;/blog/istio-ambient-traffic-interception/7b94ccedcde4f27f06d158187d7904e2.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio ambient 模式的流量拦截过程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio ambient 模式的流量拦截过程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;流量拦截详细步骤&#34;&gt;流量拦截详细步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;pod 启动与网络配置&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Kubernetes 创建 pod 时，通过 Container Runtime Interface（CRI）调用底层 CNI 插件（如 Calico、Cilium）为 pod 配置网络。&lt;/li&gt;
&lt;li&gt;此时，pod 的网络命名空间（netns）已经建立。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio CNI Node Agent 配置流量重定向&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Istio CNI Node Agent 监测到新 pod 被标记为 ambient 模式（通过标签 &lt;code&gt;istio.io/dataplane-mode=ambient&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;进入 pod 的网络命名空间，设置 iptables 规则以拦截流量。&lt;/li&gt;
&lt;li&gt;将网络命名空间的文件描述符（FD）传递给 ztunnel。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ztunnel 在 pod 网络命名空间中启动监听套接字&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;ztunnel 接收到网络命名空间的 FD，在其中启动监听套接字以处理重定向的流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明流量拦截与处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;应用程序发出的流量被 pod 内的 iptables 规则拦截，并透明地重定向到 ztunnel。&lt;/li&gt;
&lt;li&gt;ztunnel 对流量执行策略检查、加密等处理后转发到目标服务。&lt;/li&gt;
&lt;li&gt;返回的响应流量通过 ztunnel 解密并返回给应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想了解更多关于 Istio CNI 处理 iptables 的细节请见我的另一篇博客 &lt;a href=&#34;https://jimmysong.io/blog/istio-ambient-pod-iptables-injection/&#34; title=&#34;Istio ambient 模式中的 iptables 规则解析&#34;&gt;Istio ambient 模式中的 iptables 规则解析&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;ztunnel-日志分析&#34;&gt;ztunnel 日志分析&lt;/h2&gt;
&lt;p&gt;你可以通过下面的命令查看所有 ztunnel 日志中有关流量拦截的记录，可以帮助你理解 ztunnel 的运行原理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n istio-system logs -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ztunnel &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -E &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|outbound&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到例如下面的输出，注意里面的 &lt;code&gt;inbound&lt;/code&gt; 和 &lt;code&gt;outbound&lt;/code&gt; 是相对于 ztunnel 而言的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;入站流量示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2024-11-16T10:33:01.410751Z	info	access	connection complete	src.addr=10.28.2.19:58000 src.workload=&amp;#34;bookinfo-gateway-istio-64fc6d75d6-s442s&amp;#34; src.namespace=&amp;#34;default&amp;#34; src.identity=&amp;#34;spiffe://cluster.local/ns/default/sa/bookinfo-gateway-istio&amp;#34; dst.addr=10.28.2.18:15008 dst.hbone_addr=10.28.2.18:9080 dst.service=&amp;#34;productpage.default.svc.cluster.local&amp;#34; dst.workload=&amp;#34;productpage-v1-57ffb6658c-tgbjs&amp;#34; dst.namespace=&amp;#34;default&amp;#34; dst.identity=&amp;#34;spiffe://cluster.local/ns/default/sa/bookinfo-productpage&amp;#34; direction=&amp;#34;inbound&amp;#34; bytes_sent=9603 bytes_recv=2052 duration=&amp;#34;2110ms&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该日志描述了从 &lt;code&gt;bookinfo-gateway-istio&lt;/code&gt; 到 &lt;code&gt;productpage&lt;/code&gt; 的入站流量。流量经过 ztunnel 的 15008 端口，使用了 HBONE 隧道加密，身份通过 SPIFFE 确认。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出站流量示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2024-11-16T10:32:59.360677Z	info	access	connection complete	src.addr=10.28.2.18:51960 src.workload=&amp;#34;productpage-v1-57ffb6658c-tgbjs&amp;#34; src.namespace=&amp;#34;default&amp;#34; src.identity=&amp;#34;spiffe://cluster.local/ns/default/sa/bookinfo-productpage&amp;#34; dst.addr=10.28.2.14:15008 dst.hbone_addr=34.118.226.6:9080 dst.service=&amp;#34;details.default.svc.cluster.local&amp;#34; dst.workload=&amp;#34;waypoint-7594b5b786-vgjwz&amp;#34; dst.namespace=&amp;#34;default&amp;#34; dst.identity=&amp;#34;spiffe://cluster.local/ns/default/sa/waypoint&amp;#34; direction=&amp;#34;outbound&amp;#34; bytes_sent=794 bytes_recv=414 duration=&amp;#34;40ms&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此日志描述了 &lt;code&gt;productpage&lt;/code&gt; pod 访问 &lt;code&gt;details&lt;/code&gt; 服务时的出站流量。流量由 ztunnel 使用 HBONE 隧道转发到 waypoint pod（&lt;code&gt;15008&lt;/code&gt; 端口）。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio ambient 模式通过 Istio CNI Node Agent 和 ztunnel 的协作，实现了无需 sidecar 的透明流量拦截。其关键特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;兼容性强&lt;/strong&gt;：避免与底层 CNI 冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化运维&lt;/strong&gt;：无需修改应用程序代码，降低资源消耗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性高&lt;/strong&gt;：通过 HBONE 实现端到端的加密传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后续文章中，我将进一步探讨 Istio ambient 模式的高级功能，包括 L7 流量路径分析和网络拓扑构建过程，敬请期待。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2024/inpod-traffic-redirection-ambient/&#34; title=&#34;Maturing Istio Ambient: Compatibility Across Various Kubernetes Providers and CNIs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maturing Istio Ambient: Compatibility Across Various Kubernetes Providers and CNIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2022/introducing-ambient-mesh/&#34; title=&#34;Istio Ambient Mesh 介绍&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Ambient Mesh 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/&#34; title=&#34;Kubernetes 官方文档：网络插件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 官方文档：网络插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ambient/architecture/hbone/&#34; title=&#34;HBONE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HBONE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ambient/architecture/traffic-redirection/&#34; title=&#34;ztunnel traffic redirection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ztunnel traffic redirection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio Ambient 模式中的 Pod 内 iptable 规则注入解析</title>
      <link>https://jimmysong.io/blog/istio-ambient-inpod-iptables/</link>
      <pubDate>Mon, 18 Nov 2024 11:47:02 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-ambient-inpod-iptables/</guid>
      <description>
        
        
        &lt;p&gt;在 &lt;a href=&#34;https://jimmysong.io/blog/istio-ambient-traffic-interception/&#34; title=&#34;上一篇博客&#34;&gt;上一篇博客&lt;/a&gt; 中，我概述了 Istio ambient 模式中 pod 网络命名空间内注入的 iptables 规则。本文将深入解析这些规则，探讨它们是如何在 pod 内实现透明流量拦截和重定向的。&lt;/p&gt;
&lt;h2 id=&#34;pod-内的-iptables-规则&#34;&gt;Pod 内的 iptables 规则&lt;/h2&gt;
&lt;p&gt;在 pod 的网络命名空间内，Istio CNI node agent 会设置一系列 iptables 规则，以实现流量的透明拦截与重定向。下面的规则展示了 Istio 在 mangle 和 nat 表中注入的内容，确保入站和出站流量经过适当的处理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Generated by iptables-save v1.8.9 (nf_tables) on Thu Nov 14 08:43:17 2024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mangle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREROUTING&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;99138&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;22880045&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# mangle 表中的 PREROUTING 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INPUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# mangle 表中的 INPUT 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FORWARD&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# mangle 表中的 FORWARD 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OUTPUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100900&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;34940164&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# mangle 表中的 OUTPUT 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;POSTROUTING&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# mangle 表中的 POSTROUTING 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 自定义的 ISTIO_OUTPUT 链，用于处理 Istio 的出站流量。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ISTIO_PRERT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 自定义的 ISTIO_PRERT 链，用于处理 Istio 的预路由流量。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PREROUTING&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_PRERT&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 将所有 PREROUTING 流量跳转到 ISTIO_PRERT 链。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OUTPUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 将所有 OUTPUT 流量跳转到 ISTIO_OUTPUT 链。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connmark&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x111&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xfff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CONNMARK&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;restore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nfmask&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xffffffff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctmask&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xffffffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 如果连接标记为 0x111/0xfff，则恢复连接标记，用于连接追踪的一致性。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_PRERT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x539&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xfff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CONNMARK&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmark&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x111&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xfff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 如果数据包标记为 0x539/0xfff，在 PREROUTING 链中将其连接标记设置为 0x111/0xfff。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;COMMIT&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 应用 mangle 表规则。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Completed on Thu Nov 14 08:43:17 2024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Generated by iptables-save v1.8.9 (nf_tables) on Thu Nov 14 08:43:17 2024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nat&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREROUTING&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;120&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# nat 表中的 PREROUTING 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INPUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# nat 表中的 INPUT 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OUTPUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;119&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9344&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# nat 表中的 OUTPUT 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;POSTROUTING&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# nat 表中的 POSTROUTING 链，默认策略为 ACCEPT。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 自定义的 ISTIO_OUTPUT 链，用于处理 Istio 的出站 NAT 流量。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ISTIO_PRERT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 自定义的 ISTIO_PRERT 链，用于处理 Istio 的预路由 NAT 流量。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PREROUTING&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_PRERT&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 将所有 PREROUTING 流量跳转到 ISTIO_PRERT 链。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OUTPUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 将所有 OUTPUT 流量跳转到 ISTIO_OUTPUT 链。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;169.254.7.127&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 如果目标地址为 169.254.7.127（可能是 Istio 内部地址），允许 TCP 流量通过。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x111&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xfff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 如果数据包标记为 0x111/0xfff，允许 TCP 流量通过。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 允许发往本地回环接口（但不包括 127.0.0.1）的流量通过。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_OUTPUT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x539&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xfff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REDIRECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ports&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将发往非 127.0.0.1 的出站 TCP 流量（且标记不是 0x539/0xfff）重定向到端口 15001（Istio 出站流量入口）。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_PRERT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;169.254.7.127&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCEPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 如果源地址为 169.254.7.127，允许 TCP 流量通过 PREROUTING 链。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ISTIO_PRERT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dport&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15008&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x539&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xfff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REDIRECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ports&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15006&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将非 127.0.0.1 且目标端口不是 15008 的入站 TCP 流量（标记不是 0x539/0xfff）重定向到端口 15006（Istio 入站流量入口）。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;COMMIT&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 应用 nat 表规则。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Completed on Thu Nov 14 08:43:17 2024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;端口号的作用&#34;&gt;端口号的作用&lt;/h3&gt;
&lt;p&gt;这些 iptables 规则通过特定的端口号来区分并处理不同类型的流量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;15008 (HBONE socket)&lt;/strong&gt;：用于透明代理基于 HTTP 的流量，支持 HBONE 协议的透明传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;15006 (plaintext socket)&lt;/strong&gt;：用于处理未加密的网格内部流量，以实现 pod 之间的流量管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;15001 (outbound socket)&lt;/strong&gt;：用于管理出站流量，实现对外部服务访问的策略控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些端口使得 Istio 能够对入站、出站及内部流量进行透明的管理与控制，从而实现细粒度的安全策略与流量控制。更多关于端口号的使用请参考 &lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/application-requirements/&#34; title=&#34;Istio 应用要求&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 应用要求&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;标记-0x539-的作用&#34;&gt;标记 &lt;code&gt;0x539&lt;/code&gt; 的作用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;0x539&lt;/code&gt; 是用于标识 Istio 代理发出的流量的标记。这一标记在流量进入 iptables 规则时被设置，用于区分由代理（如 ztunnel）处理过的数据包，防止其被重复代理或误处理。&lt;/p&gt;
&lt;h3 id=&#34;标记-0x111-的作用&#34;&gt;标记 &lt;code&gt;0x111&lt;/code&gt; 的作用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;0x111&lt;/code&gt; 用于连接级别的标记管理，在 Istio 网格中标识已由代理处理过的整个连接。通过 iptables 的 &lt;code&gt;CONNMARK&lt;/code&gt; 模块，&lt;code&gt;0x111&lt;/code&gt; 标记能够从单个数据包扩展到整个连接的生命周期，从而加速后续数据包的匹配。&lt;/p&gt;
&lt;h2 id=&#34;iptables-规则可视化&#34;&gt;iptables 规则可视化&lt;/h2&gt;
&lt;p&gt;下图展示了流量在 iptables 规则中的执行路径，帮助理解流量的匹配和重定向过程：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-inpod-iptables/b99dc3a72ccab48d71e6c502b1089d2d.svg&#34; data-img=&#34;/blog/istio-ambient-inpod-iptables/b99dc3a72ccab48d71e6c502b1089d2d.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio ambient pod 内 iptables 可视化&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio ambient pod 内 iptables 可视化&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;想进一步了解 Istio CNI 如何处理 iptables，请参考代码 &lt;a href=&#34;https://github.com/istio/istio/blob/master/cni/pkg/iptables/iptables.go&#34; title=&#34;istio/cni/pkg/iptables/iptables.go at master · istio/istio · GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio/cni/pkg/iptables/iptables.go at master · istio/istio · GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;不同类型流量的路由可视化&#34;&gt;不同类型流量的路由可视化&lt;/h2&gt;
&lt;p&gt;以下是同节点与跨节点的加密和明文流量路径的可视化图示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨节点的加密流量路径&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-inpod-iptables/cross-node-hbone.svg&#34; data-img=&#34;/blog/istio-ambient-inpod-iptables/cross-node-hbone.svg&#34; alt=&#34;image&#34; data-caption=&#34;跨节点的加密流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;跨节点的加密流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;跨节点的明文流量路径&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-inpod-iptables/cross-node-plaintext.svg&#34; data-img=&#34;/blog/istio-ambient-inpod-iptables/cross-node-plaintext.svg&#34; alt=&#34;image&#34; data-caption=&#34;跨节点的明文流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;跨节点的明文流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;同节点的加密流量路径&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-inpod-iptables/same-node-hbone.svg&#34; data-img=&#34;/blog/istio-ambient-inpod-iptables/same-node-hbone.svg&#34; alt=&#34;image&#34; data-caption=&#34;同节点的加密流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;同节点的加密流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;同节点的明文流量路径&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-inpod-iptables/same-node-plaintext.svg&#34; data-img=&#34;/blog/istio-ambient-inpod-iptables/same-node-plaintext.svg&#34; alt=&#34;image&#34; data-caption=&#34;同节点的明文流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;同节点的明文流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应用程序发出请求&lt;/strong&gt;：流量从应用程序进程发送，进入 Pod 的网络命名空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iptables 规则匹配&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;出站流量&lt;/strong&gt;在 &lt;code&gt;OUTPUT&lt;/code&gt; 链中被匹配，符合条件的流量被重定向到 &lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; 链。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; 链中，流量被标记并被接受。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REDIRECT 重定向&lt;/strong&gt;：流量被 iptables 捕获并重定向到 ztunnel 监听端口（明文流量为 15006，加密流量为 15008）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ztunnel 处理流量&lt;/strong&gt;：ztunnel 接收到流量，进行策略检查和加密等操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量转发到目标服务&lt;/strong&gt;：ztunnel 将处理后的流量发送到目标服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回路径&lt;/strong&gt;：目标服务的响应通过网络返回 ztunnel，ztunnel 对响应进行解密和策略检查，然后返回给应用程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过解析 Istio ambient 模式下的 iptables 规则，我们可以看到，Istio 通过 CNI 插件在 pod 内设置了一系列透明的流量拦截规则。这些规则确保了流量在进出 pod 时能够按预期被 ztunnel 代理处理，从而实现更细粒度的流量管理和安全策略应用。未来我们将继续探索更多关于 Istio ambient 模式下的网络细节，敬请关注。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>跨网络命名空间管理套接字：探索 Linux 套接字的使用</title>
      <link>https://jimmysong.io/blog/cross-network-namespace-socket/</link>
      <pubDate>Thu, 07 Nov 2024 16:48:08 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/cross-network-namespace-socket/</guid>
      <description>
        
        
        &lt;p&gt;最近我在研究 Istio Ambient 模式中的透明流量劫持，过程中涉及了跨网络命名空间管理套接字的功能。在 Istio 官方的博客 &lt;a href=&#34;https://istio.io/latest/blog/2024/inpod-traffic-redirection-ambient/&#34; title=&#34;Maturing Istio Ambient: Compatibility Across Various Kubernetes Providers and CNIs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maturing Istio Ambient: Compatibility Across Various Kubernetes Providers and CNIs&lt;/a&gt; 中也提到了这一点，让我对 Linux 套接字 API 的这个功能产生了浓厚的兴趣。所以，我决定写下这篇博客，分享如何在 Linux 系统中跨网络命名空间管理套接字的细节。&lt;/p&gt;
&lt;h2 id=&#34;网络命名空间简介&#34;&gt;网络命名空间简介&lt;/h2&gt;
&lt;p&gt;网络命名空间是一种 Linux 内核特性，可以把系统的网络资源（例如 IP 地址、路由表等）分割成多个独立的实例。这样每个实例就可以为不同的进程提供独立的网络环境。比如，Docker 使用网络命名空间为每个容器提供独立的网络栈，让它们之间的网络资源互相隔离。&lt;/p&gt;
&lt;p&gt;通过网络命名空间，不同的进程可以有独立的网络配置，比如不同的 IP 地址和路由设置。但即使网络命名空间实现了隔离，Linux 的套接字 API 仍然可以让进程跨网络命名空间操作套接字。&lt;/p&gt;
&lt;h2 id=&#34;跨网络命名空间管理套接字&#34;&gt;跨网络命名空间管理套接字&lt;/h2&gt;
&lt;p&gt;在一个命名空间中运行的进程可以创建一个套接字，并将它放到另一个网络命名空间中，这让我们可以实现非常灵活的网络通信。比如，可以在一个特定的网络命名空间中创建监听套接字，让其他命名空间中的进程共享这个套接字。这种功能在容器编排和微服务架构中非常有用。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子，使用 &lt;code&gt;nc&lt;/code&gt; 命令创建套接字，使其绑定到指定的网络设备或命名空间。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cross-network-namespace-socket/f04c2c199e66b82ef451c2e3c2be99e1.svg&#34; data-img=&#34;/blog/cross-network-namespace-socket/f04c2c199e66b82ef451c2e3c2be99e1.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;使用-docker-演示这一功能&#34;&gt;使用 Docker 演示这一功能&lt;/h2&gt;
&lt;p&gt;因为我使用的 macOS 不支持 Linux 的网络命名空间，但可以使用 Docker Desktop 模拟相应的环境。下面是在 macOS 上使用 Docker 来演示的方法：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cross-network-namespace-socket/73a1a7081b41c63c1e7f98a87e4f8580.svg&#34; data-img=&#34;/blog/cross-network-namespace-socket/73a1a7081b41c63c1e7f98a87e4f8580.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Docker Desktop&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载并安装 Docker Desktop，可以在 macOS 上运行 Linux 容器。&lt;/li&gt;
&lt;li&gt;启动 Docker Desktop 后，我们可以在容器中模拟网络命名空间的相关操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置虚拟网络&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建虚拟网络接口
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker network create --driver bridge my_bridge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;为每个容器分配 IP 地址，以便它们可以相互通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建网络命名空间（使用 Docker 容器模拟）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 Docker 创建两个容器，分别模拟两个网络命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name ns1 --network my_bridge --privileged alpine sleep infinity
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name ns2 --network my_bridge --privileged alpine sleep infinity
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建容器时直接将它们连接到这个虚拟网络，以便它们可以相互通信。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨命名空间创建套接字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;docker exec&lt;/code&gt; 命令进入容器并配置网络接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;ns1&lt;/code&gt; 容器中运行一个监听套接字：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; ns1 sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;nc -l -k -p 8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 &lt;code&gt;ns1&lt;/code&gt; 容器的 IP 地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NS1_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker inspect -f &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;&lt;/span&gt; ns1&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;ns2&lt;/code&gt; 容器中，使用 &lt;code&gt;nc&lt;/code&gt; 命令访问 &lt;code&gt;ns1&lt;/code&gt; 容器中的套接字：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; ns2 sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;echo &amp;#39;Hello from ns2&amp;#39; | nc &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NS1_IP&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，我们可以在 &lt;code&gt;ns1&lt;/code&gt; 容器的界面中看到来自 &lt;code&gt;ns2&lt;/code&gt; 容器的 &lt;code&gt;Hello from ns2&lt;/code&gt; 字符串。尽管 &lt;code&gt;ns1&lt;/code&gt; 和 &lt;code&gt;ns2&lt;/code&gt; 属于不同的容器，但通过正确的配置，&lt;code&gt;ns2&lt;/code&gt; 仍然可以访问 &lt;code&gt;ns1&lt;/code&gt; 中的套接字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以理解为通过在 &lt;code&gt;ns2&lt;/code&gt; 监听 &lt;code&gt;ns1&lt;/code&gt; 的套接字，类似于建立了一个“隧道”来实现通信。这种方式实际上是建立了一条直接的通信通道，使得两个容器之间能够进行数据交换。虽然它没有真正构建 VPN 那样复杂的隧道，但从逻辑上来说，&lt;code&gt;ns2&lt;/code&gt; 和 &lt;code&gt;ns1&lt;/code&gt; 之间可以通过这个套接字来传递数据，相当于建立了一个轻量级的点对点连接通道。&lt;/p&gt;
&lt;h2 id=&#34;实际应用场景&#34;&gt;实际应用场景&lt;/h2&gt;
&lt;p&gt;这种“隧道”式的通信在许多实际场景中非常有用，以下是一些例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;透明代理和负载均衡&lt;/strong&gt;：通过套接字隧道可以将客户端请求转发到服务容器中，常用于透明代理或负载均衡。Istio、&lt;strong&gt;Envoy Proxy&lt;/strong&gt; 和 &lt;strong&gt;HAProxy&lt;/strong&gt; 等工具利用类似机制来管理服务间流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨容器日志收集&lt;/strong&gt;：通过套接字隧道，可以将多个容器的日志集中收集到一个处理容器中。&lt;strong&gt;Fluentd&lt;/strong&gt; 和 &lt;strong&gt;Logstash&lt;/strong&gt; 是常用的日志收集工具，用于简化日志处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全审查和入侵检测&lt;/strong&gt;：将多个命名空间的流量集中到一个监控容器中进行统一检测。&lt;strong&gt;Suricata&lt;/strong&gt;、&lt;strong&gt;Snort&lt;/strong&gt; 和 &lt;strong&gt;Zeek&lt;/strong&gt; 等开源工具可用于网络安全分析和审查。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试和测试&lt;/strong&gt;：开发人员可以将测试流量转发到其他命名空间的服务，用于验证和调试。&lt;strong&gt;Wireshark&lt;/strong&gt; 可以用于捕获网络包，以便进行深入的网络调试和分析。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;跨网络命名空间管理套接字在容器管理、调度系统和微服务架构中有很多应用。例如，可以用这种方式实现服务的透明负载均衡，建立隧道或进行网络流量调试。但这种灵活性也要求我们在设计网络安全策略时更加谨慎，以防止不同命名空间之间的潜在通信带来的安全问题。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>从 AWS App Mesh 迁移到 Istio 全面指南</title>
      <link>https://jimmysong.io/blog/migrating-from-aws-app-mesh-to-istio-a-comprehensive-guide/</link>
      <pubDate>Wed, 30 Oct 2024 14:20:22 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/migrating-from-aws-app-mesh-to-istio-a-comprehensive-guide/</guid>
      <description>
        
        
        &lt;p&gt;随着 &lt;a href=&#34;https://aws.amazon.com/cn/blogs/containers/migrating-from-aws-app-mesh-to-amazon-ecs-service-connect/&#34; title=&#34;AWS 宣布将在 2026 年 9 月 30 日停用 AWS App Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS 宣布将在 2026 年 9 月 30 日停用 AWS App Mesh&lt;/a&gt;，许多企业正在评估继续使用服务网格的替代方案。如果您也在寻找替代方案，Istio 将是一个强大且功能丰富的选项，尤其适合 Kubernetes 原生环境。在本文中，我将介绍从 AWS App Mesh 迁移到 Istio 的过程，对比这两种服务网格，并介绍我们开发的 Tetrate Istio 迁移工具，帮助简化这一迁移过程。&lt;/p&gt;
&lt;h2 id=&#34;app-mesh-vs-istio迁移准备&#34;&gt;App Mesh vs Istio：迁移准备&lt;/h2&gt;
&lt;p&gt;由于 AWS App Mesh 即将停用，了解 App Mesh 和 Istio 之间的相似性和差异对于成功迁移至关重要。以下是一些关键比较点，帮助您将当前的基础设施与 Istio 提供的功能对齐：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;全面的功能&lt;/strong&gt;：App Mesh 和 Istio 都提供流量管理、可观测性和安全功能，但 Istio 提供了更多可自定义的选项，包括高级流量路由和增强的遥测。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云无关性&lt;/strong&gt;：与紧密集成 AWS 的 App Mesh 不同，Istio 是云无关的，可在多云或混合环境中提供更大的灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级安全&lt;/strong&gt;：Istio 默认支持 mTLS，与 App Mesh 相比，提供了更广泛的安全功能和策略。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AWS 建议 ECS 客户迁移到 &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html&#34; title=&#34;Service Connect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Connect&lt;/a&gt; 而 EKS 客户迁移到 &lt;a href=&#34;https://aws.amazon.com/vpc/lattice/&#34; title=&#34;VPC Lattice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VPC Lattice&lt;/a&gt;。对于一个功能丰富的开源解决方案，Istio 是一个很有吸引力的选择。接下来，让我们深入了解从 AWS App Mesh 迁移到 Istio 的过程，并使用 Tetrate 的迁移工具进行支持。&lt;/p&gt;
&lt;h2 id=&#34;比较-app-meshservice-connectvpc-lattice-和-istio&#34;&gt;比较 App Mesh、Service Connect、VPC Lattice 和 Istio&lt;/h2&gt;
&lt;p&gt;在开始迁移之前，了解 AWS App Mesh、Service Connect、VPC Lattice 和 Istio 之间的关键区别非常重要：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;App Mesh&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Service Connect&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;VPC Lattice&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Istio&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;网络可靠性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;使用 &lt;a href=&#34;https://envoyproxy.io/&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 作为 Sidecar 代理，进行异常检测、健康检查和重试，支持精细调整。&lt;/td&gt;
          &lt;td&gt;使用 Envoy 作为 Sidecar 代理，仅支持超时调整。&lt;/td&gt;
          &lt;td&gt;内置健康检查和重试，由 AWS 管理的可靠性，不需要 Sidecar 代理。&lt;/td&gt;
          &lt;td&gt;支持 Sidecar 和 Ambient 模式，使用 Envoy 并完全支持精细化调整。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;高级流量路由&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;支持高级流量路由，如 A/B 测试和金丝雀发布。&lt;/td&gt;
          &lt;td&gt;不支持高级流量路由。&lt;/td&gt;
          &lt;td&gt;支持基本的流量路由和负载均衡。&lt;/td&gt;
          &lt;td&gt;支持包括 A/B 测试和金丝雀发布在内的高级流量控制。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;可观测性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;需要手动收集和监控指标。&lt;/td&gt;
          &lt;td&gt;自动将指标发送到 Amazon CloudWatch。&lt;/td&gt;
          &lt;td&gt;集成 AWS CloudWatch 和 X-Ray 监控。&lt;/td&gt;
          &lt;td&gt;开箱即用的可观测性，支持 Prometheus、Grafana 和 Jaeger。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;服务发现&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;集成 AWS Cloud Map。&lt;/td&gt;
          &lt;td&gt;使用 AWS Cloud Map。&lt;/td&gt;
          &lt;td&gt;使用 AWS 服务发现机制。&lt;/td&gt;
          &lt;td&gt;使用 Kubernetes 原生的服务发现机制。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;支持与 AWS PCA 的 TLS 和双向 TLS（mTLS）。&lt;/td&gt;
          &lt;td&gt;支持 TLS，不支持 mTLS。&lt;/td&gt;
          &lt;td&gt;支持 mTLS。&lt;/td&gt;
          &lt;td&gt;支持 mTLS 和细粒度的安全策略。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;资源共享&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;可以跨多个 AWS 账户共享网格。&lt;/td&gt;
          &lt;td&gt;不支持跨账户共享命名空间。&lt;/td&gt;
          &lt;td&gt;可以跨多个 AWS 账户共享资源。&lt;/td&gt;
          &lt;td&gt;可以跨多个集群和云部署。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;介绍-tetrate-的-istio-迁移工具&#34;&gt;介绍 Tetrate 的 Istio 迁移工具&lt;/h2&gt;
&lt;p&gt;为了使迁移过程更加顺利，Tetrate 开发了一个 Istio 迁移工具包，目前处于私有状态，但可供内部或经过批准的客户通过 &lt;a href=&#34;https://resources.tetrate.dev/app-mesh-istio?__hstc=218802950.edcf2542a8010c44aa57b98adaef028a.1721092227167.1729818643207.1730268606576.91&amp;amp;__hssc=218802950.2.1730268606576&amp;amp;__hsfp=872206273&#34; title=&#34;此表单&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此表单&lt;/a&gt; 申请使用。该工具包帮助自动转换 AWS App Mesh 配置为 Istio 的等效配置，包括 Virtual Nodes、Virtual Routers 和其他网络结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键考量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务发现&lt;/strong&gt;：App Mesh 和 Istio 的服务发现方式不同。Istio 依赖 Kubernetes 原生的服务发现，而 App Mesh 则集成 AWS Cloud Map。迁移过程中，需相应调整服务定义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：Istio 原生支持服务之间的 mTLS。虽然 AWS App Mesh 也支持 mTLS，但迁移至 Istio 需要配置 CA（证书颁发机构）并更新证书以适应 Istio 的安全模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt;：Istio 的 Virtual Services 和 Destination Rules 提供了比 App Mesh 的 Virtual Routers 和 Nodes 更高级的流量路由能力。迁移过程中，需额外配置以建立类似的路由行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-tetrate-迁移工具逐步完成迁移&#34;&gt;使用 Tetrate 迁移工具逐步完成迁移&lt;/h2&gt;
&lt;p&gt;下面是使用此工具的有效步骤：&lt;/p&gt;
&lt;h3 id=&#34;前提条件&#34;&gt;前提条件&lt;/h3&gt;
&lt;p&gt;开始迁移之前，确保已安装以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/install&#34; title=&#34;Go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/#kubectl&#34; title=&#34;kubectl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/setup/getting-started/#download&#34; title=&#34;istioctl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istioctl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;确保在 EKS 集群上正确安装和配置 AWS App Mesh。您还需要一个名为 tetrate-tis-creds 的 Kubernetes secret，用于 Istio 安装，详见工具文档。&lt;/p&gt;
&lt;p&gt;该工具还提供预检查命令，以识别迁移前的任何潜在阻碍因素。&lt;/p&gt;
&lt;h3 id=&#34;运行预检查&#34;&gt;运行预检查&lt;/h3&gt;
&lt;p&gt;为确保设置准备就绪，运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tim precheck
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令将扫描 App Mesh 环境，标出任何需要调整的项，以确保成功迁移。&lt;/p&gt;
&lt;h3 id=&#34;迁移过程&#34;&gt;迁移过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Istio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 Istio 迁移工具包生成 IstioOperator 配置并安装 Istio：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tim generate iop &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; istioctl install –skip-confirmation -f –
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用 Istio 网络规则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来，生成并应用 Istio 网络规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tim generate networking &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl apply -f –
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移除 AWS App Mesh 标签&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从命名空间中移除现有的 App Mesh 标签。例如，对于 default 命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace default &lt;span class=&#34;s2&#34;&gt;&amp;#34;appmesh.k8s.aws/sidecarInjectorWebhook-&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用 Istio Sidecar 注入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;添加标签以启用 Istio 的自动 Sidecar 注入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace default istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重启部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为应用更改并启动新的 Envoy Sidecar 注入，重启部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl rollout restart deployment &amp;lt;deployment-name&amp;gt; -n &amp;lt;deployment-namespace&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;迁移策略&#34;&gt;迁移策略&lt;/h3&gt;
&lt;p&gt;从 AWS App Mesh 迁移到 Istio 时，可以使用如原地迁移、金丝雀发布、蓝绿部署等策略，这些策略与迁移到 VPC Lattice 的策略相似。合适的策略取决于应用需求，如是否需要零停机或安排维护窗口。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原地迁移&lt;/strong&gt;：用配置为 Istio 的新 Pods 替换当前 App Mesh 的 Kubernetes Pods，适合可容忍迁移过程中的停机的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;蓝绿部署&lt;/strong&gt;：在新命名空间中配置为 Istio 的应用副本，而原始部署继续运行 App Mesh，无停机地逐步将流量从 App Mesh 迁移到 Istio。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;金丝雀发布&lt;/strong&gt;：与 App Mesh 并行部署 Istio，逐步将少量流量转移到 Istio，监控性能和稳定性，逐步增加流量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分阶段迁移&lt;/strong&gt;：逐步迁移组件或服务，而非一次性迁移，以减少风险并帮助识别潜在问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;测试和验证&lt;/strong&gt;：在完全切换前，进行全面测试，验证服务功能、安全性和性能指标符合或超出预期。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;从 AWS App Mesh 迁移到 Istio 可以解锁流量管理、可观测性和安全方面的新功能。Tetrate 的 Istio 迁移工具简化了过程，提供了分步骤方法，减少手动配置，确保平稳过渡。&lt;/p&gt;
&lt;p&gt;如果您有兴趣试用 Tetrate 的 Istio 迁移工具，欢迎联系我们——该工具目前可私密使用，我们将很乐意讨论访问权限。&lt;/p&gt;
&lt;p&gt;此次迁移不仅是采用新的服务网格，更是一个充分利用 Istio 全面功能、支持多云部署、增强基础设施弹性的机会。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文最初发表于 &lt;a href=&#34;https://tetrate.io/blog/migrating-from-aws-app-mesh-to-istio-a-comprehensive-guide/&#34; title=&#34;tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tetrate.io&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>地上文物看山西：宝藏文物大省不该被埋没</title>
      <link>https://jimmysong.io/blog/shanxi-trip/</link>
      <pubDate>Sat, 26 Oct 2024 12:07:25 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/shanxi-trip/</guid>
      <description>
        
        
        &lt;p&gt;我前后三次到访过山西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次是 2017 年 12 月，公司组织团建，去了山西大同，游览了悬空寺、云冈石窟和北岳恒山&lt;/li&gt;
&lt;li&gt;第二次是 2019 年 4 月，清明节期间，和几位好友自驾去了山西五台山、佛光寺、雁门关和应县木塔&lt;/li&gt;
&lt;li&gt;第三次是 2021 年 6 月，到山西晋城参加朋友婚礼，因为当时正值疫情期，没有办法进到景区游览，只是用无人机俯瞰了下「皇城相府」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一次去山西就被山西厚重的文化内涵所打动，而最近随着首款国产 3A 游戏《黑神话：悟空》的火爆，游戏中的取景地山西的各种古建筑接连出圈。俗话说”地下文物看陕西，地上文物看山西“，如此宝藏文物大省不该被埋没。&lt;/p&gt;
&lt;h2 id=&#34;大同&#34;&gt;大同&lt;/h2&gt;
&lt;p&gt;去大同的时候是 12 月，当地的天气不是很好，到处都是灰蒙蒙的。大同是山西省省域副中心城市。曾是北魏京都、辽金陪都，有“三代京华、两朝重镇”之称。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/datong.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/datong.webp&#34; alt=&#34;image&#34; data-caption=&#34;大同一隅&#34;&gt;
  
  
  &lt;figcaption&gt;大同一隅&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;云冈石窟&#34;&gt;云冈石窟&lt;/h3&gt;
&lt;p&gt;云冈石窟蔚为壮观，这也是我第一次游览古代石窟。云冈石窟是中国四大石窟之一。其始凿于北魏文成帝时期，历时 64 年。石窟依山开凿，东西绵延约 1 公里，现存主要洞窟 45 个，附属洞窟 209 个，它于 2001 年被列入“世界文化遗产”名录，2007 年成为国家首批 5A 级旅游景区。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/yungangshiku.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/yungangshiku.webp&#34; alt=&#34;image&#34; data-caption=&#34;云冈石窟&#34;&gt;
  
  
  &lt;figcaption&gt;云冈石窟&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;86 版《西游记》第 18 集《扫塔辨奇冤》在云冈石窟有多处取景。该集一开始，师徒四人刚抵达祭赛国时行走的场景，就是在云冈石窟西部洞窟前拍摄的。后来，孙悟空躲在石窟上面查看僧众被殴打的场面，也是在此拍摄。再后来，一位僧侣向唐僧师徒透露冤情，由于几年前寺中塔顶的舍利子佛宝被盗，僧侣们因此遭受不白之冤和苦难，这一对话场景实际上是在云冈石窟的第五窟拍摄完成的。&lt;/p&gt;
&lt;h3 id=&#34;北岳恒山&#34;&gt;北岳恒山&lt;/h3&gt;
&lt;p&gt;攀爬北岳恒山相对比较容易，恒山的山势虽然险峻，但攀登过程中坡度相对较为缓和，没有特别陡峭难行的路段。恒山的海拔约 2016.1 米。恒山的垂直落差相对其他一些著名高山来说不是特别大，大约在 1000 多米。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/hengshan.jpg&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/hengshan.jpg&#34; alt=&#34;image&#34; data-caption=&#34;北岳恒山&#34;&gt;
  
  
  &lt;figcaption&gt;北岳恒山&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;悬空寺&#34;&gt;悬空寺&lt;/h3&gt;
&lt;p&gt;悬空寺位于恒山金龙峡西侧翠屏峰峭壁间。始建于北魏后期，为木质框架结构，呈“一院两楼”布局，是佛、道、儒三教合一的独特寺庙。它与恒山地理位置紧密相邻，游客游览恒山时常将悬空寺作为重要景点。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/xuankongsi.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/xuankongsi.webp&#34; alt=&#34;image&#34; data-caption=&#34;悬空寺&#34;&gt;
  
  
  &lt;figcaption&gt;悬空寺&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;忻州&#34;&gt;忻州&lt;/h2&gt;
&lt;p&gt;忻州古称“秀容”。它是山西面积最大的市，有“晋北锁钥”之称。&lt;/p&gt;
&lt;h3 id=&#34;五台山&#34;&gt;五台山&lt;/h3&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/wutaishan.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/wutaishan.webp&#34; alt=&#34;image&#34; data-caption=&#34;五台山&#34;&gt;
  
  
  &lt;figcaption&gt;五台山&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;五台山是中国佛教四大名山之首。因五座山峰峰顶平坦如台得名，有东台望海峰、西台挂月峰、南台锦绣峰、北台叶斗峰、中台翠岩峰。其最高海拔 3061 米，有“华北屋脊”之称。这里寺庙林立，现存北魏、唐等朝代寺庙建筑 68 处，如显通寺、塔院寺等。它还是世界文化遗产，自然景观与人文景观完美融合，是著名的避暑胜地和佛教圣地。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113371735134030&amp;amp;bvid=BV1Jb1pYHEtA&amp;amp;cid=26467238392&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;五台山的佛寺中有大量的壁画，但是想要理解它们就需要一定的知识积累。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/fuhuluohan.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/fuhuluohan.webp&#34; alt=&#34;image&#34; data-caption=&#34;伏虎罗汉&#34;&gt;
  
  
  &lt;figcaption&gt;伏虎罗汉&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;伏虎罗汉是佛教十八罗汉中的一位，他的故事象征着降服野性、平息人类内心的狂野和欲望。老虎通常被视为一种强大且危险的动物，象征着人类的恐惧、欲望或其他负面情绪。而罗汉降伏老虎的形象，展示了通过修行、智慧和慈悲来降伏内在和外在的困境与挑战。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/liudaolunhui.jpg&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/liudaolunhui.jpg&#34; alt=&#34;image&#34; data-caption=&#34;六道轮回&#34;&gt;
  
  
  &lt;figcaption&gt;六道轮回&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这张图片显示的是“轮回图”，也称为“生命之轮”（藏语：སྐར་འཁོར, 英文：Wheel of Life）。这是佛教艺术中的一个重要象征，描述了众生在六道轮回中的生命状态。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中心部分的三种动物&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中心有三种动物：&lt;strong&gt;公鸡&lt;/strong&gt;、&lt;strong&gt;蛇&lt;/strong&gt;和&lt;strong&gt;猪&lt;/strong&gt;，象征着轮回的三毒，分别是&lt;strong&gt;贪&lt;/strong&gt;、&lt;strong&gt;嗔&lt;/strong&gt;和&lt;strong&gt;痴&lt;/strong&gt;。这些是导致众生轮回的根本原因：
&lt;ul&gt;
&lt;li&gt;公鸡象征“贪”。&lt;/li&gt;
&lt;li&gt;蛇象征“嗔”。&lt;/li&gt;
&lt;li&gt;猪象征“痴”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外圈的黑白色部分&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;紧邻中心的黑白圆环代表轮回中的&lt;strong&gt;善道&lt;/strong&gt;和&lt;strong&gt;恶道&lt;/strong&gt;。白色部分显示众生通过善行累积功德进入更好的境界，而黑色部分代表恶行导致堕入低劣的境界。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;六道轮回&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图中的六个区域代表“六道轮回”，即众生可能经历的六种存在状态，分别是：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;天道&lt;/strong&gt;（上方）：善业积累多的众生会生于天界，享受较为安乐的生活。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人道&lt;/strong&gt;（右上）：人类的境界，最有可能修行成佛，脱离轮回。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阿修罗道&lt;/strong&gt;（右下）：好斗的众生，拥有强大的能力，但内心常怀嫉妒和愤怒。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;畜生道&lt;/strong&gt;（左下）：以愚昧和无知为特点的生命状态，常受苦役。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;饿鬼道&lt;/strong&gt;（左上）：贪欲无尽的状态，饿鬼永远无法满足自己的欲望，处于极度痛苦中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地狱道&lt;/strong&gt;（下方）：最痛苦的境界，因恶业而堕入，受极大的折磨。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外圈代表十二因缘&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图外的最外圈代表十二因缘，是轮回的因果链，说明了众生如何因无明和业力陷入轮回的循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;佛光寺&#34;&gt;佛光寺&lt;/h3&gt;
&lt;p&gt;佛光寺在忻州。具体位于山西省忻州市五台县豆村镇东北的佛光山中。佛光寺始建于北魏孝文帝时期（471－499 年），唐大中十一年（857 年）重建。寺内现有殿、堂、楼、阁等一百二十余间，其中东大殿为唐代建筑，文殊殿为金代建筑，其余建筑主要为明、清时期的风格。其唐代建筑、雕塑、壁画、题记，具有极高的历史价值和艺术价值。1961 年，佛光寺被国务院公布为第一批全国重点文物保护单位；2009 年，包括佛光寺在内的五台山被联合国教科文组织世界遗产委员会列入《世界遗产名录》。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/shanxi-trip/foguangsi.jpg&#34; data-img=&#34;https://jimmysong.io/img/blog/shanxi-trip/foguangsi.jpg&#34; alt=&#34;image&#34; data-caption=&#34;佛光寺&#34;&gt;
  
  
  &lt;figcaption&gt;佛光寺&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;雁门关&#34;&gt;雁门关&lt;/h3&gt;
&lt;p&gt;雁门关是位于忻州市代县县城以北约20公里处雁门山中，是一个咽喉要道，它是长城上的重要关隘，以地势险要、历史上战事频繁而闻名，见证了众多朝代的军事防御和民族交融。第一次听说雁门这个地名还是从唐代诗人李贺的《雁门太守行》：“黑云压城城欲摧，甲光向日金鳞开。角声满天秋色里，塞上燕脂凝夜紫。半卷红旗临易水，霜重鼓寒声不起。报君黄金台上意，提携玉龙为君死。”李贺写《雁门太守行》时约在814年（元和九年）八月前后北游雁门。虽然诗中描述的并非雁门关的特定战争，但创作地点靠近雁门关，雁门地区的边塞氛围、战争历史等对李贺的创作产生了影响，使其在诗中营造出了紧张、悲壮的战争场景和氛围。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113371668022523&amp;amp;bvid=BV1bg1pYeEsZ&amp;amp;cid=26467043445&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;去过青岛的人应该都知道青岛有一个著名的“八大关”，原以为雁门关会属于“八大关”之一，未料到居然不在其中。这里是古代中原地区与北方游牧民族的分界线，其地势险要，“外壮大同之藩卫，内固太原之锁钥，根抵三关，咽喉全晋”，许多朝代都在此重兵把守，是古代兵家必争之地。历史上，无数次的战争都围绕雁门关展开。例如，北宋时期，杨家将就曾在此抵御辽军的入侵。&lt;/p&gt;
&lt;h2 id=&#34;朔州&#34;&gt;朔州&lt;/h2&gt;
&lt;p&gt;朔州的旅游资源相对于忻州匮乏了许多，为人所熟知的大概只有应县木塔、桑干河。我也只去过应县木塔，对于很多外省人，可能都不知道应县属于朔州吧。&lt;/p&gt;
&lt;h3 id=&#34;应县木塔&#34;&gt;应县木塔&lt;/h3&gt;
&lt;p&gt;应县木塔位于一个小县城，可以说这个县城因该木塔而闻名，从航拍视角来看，该塔已有一定程度的歪斜。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113371550648022&amp;amp;bvid=BV1a11pY6EaJ&amp;amp;cid=26466584412&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;应县木塔全称佛宫寺释迦塔，位于山西省朔州市应县。建于辽清宁二年（1056 年）。塔高 67.31 米，底层直径 30.27 米，呈平面八角形。它是世界上现存最高、最古老的纯木结构楼阁式建筑。全塔无钉无铆，由数万个木构件搭建，共用斗栱 54 种，有“斗栱博物馆”之称。木塔历经风雨、地震、炮击等仍屹立不倒，与比萨斜塔、埃菲尔铁塔并称“世界三大奇塔”。&lt;/p&gt;
&lt;h2 id=&#34;晋城&#34;&gt;晋城&lt;/h2&gt;
&lt;p&gt;晋城是位于山西省东南部的城市，拥有丰富的煤炭资源，是山西省重要的能源重化工基地。因为去山西是为了参加朋友的婚礼，待的时间比较短，而且还是在疫情期间，很多景区都未开放，只是用无人机匆匆游览了下皇城相府。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113371970012277&amp;amp;bvid=BV1Yc1pY6E2n&amp;amp;cid=26468090617&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;皇城相府是位于山西省晋城市阳城县北留镇的一座明清城堡式官宅建筑群，为康熙大帝的老师、《康熙字典》的总裁官陈廷敬的故居，有“中国北方第一文化巨族之宅”的美誉。&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;几次去山西，体会到“表里山河”和煤炭大省资源禀赋。但去过的城市不适合度假，更适合朝拜和访古。山西景区分散，涵盖多领域旅游资源却分布不同地区，距离远。游客奔波耗时耗力，增加成本和疲劳度，降低游玩效率和体验感。部分景区过度依赖门票盈利有弊端，配套设施不完善，餐饮购物选择有限且品质不一，活动项目开发滞后，游客停留短，难感受魅力价值。文物保护有不足，山西文物大省却修缮不及时、保护不到位，影响保存展示，游客难领略价值，威胁文物安全可持续。山西旅游资源文化内涵深，对游客文化素养要求高。景点专业知识多，游客易走马观花，景区文化讲解普及不足，影响体验深度满意度。&lt;/p&gt;
&lt;p&gt;最后，希望随着《黑神话：悟空》让山西旅游爆火之际，让更多人关注古建筑和遗迹保护，个人还要增加对古建筑和文物的文化素养，才能更好领略其中的文化内涵。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>多集群 PKI 与 Istio 实践：为服务网格构建可信且可扩展的 PKI</title>
      <link>https://jimmysong.io/blog/multi-cluster-pki-istio-recipe/</link>
      <pubDate>Wed, 16 Oct 2024 11:51:57 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/multi-cluster-pki-istio-recipe/</guid>
      <description>
        
        
        &lt;p&gt;作者：Cristofer TenEyck（Keyfactor 高级解决方案工程师）和 Jimmy Song（Tetrate 布道师）&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;在云原生应用程序不断发展的背景下，确保跨多个集群的服务网格安全对于保证安全性和合规性至关重要。Istio 作为领先的开源服务网格，提供了用于保护微服务之间通信的工具。然而，在此环境中实施一个强大且可扩展的公钥基础设施（PKI）来管理证书仍然是一个重大挑战。&lt;/p&gt;
&lt;p&gt;在本文中，我们将深入探讨使用 EJBCA 开源 PKI 为跨多个集群的 Istio 服务网格实现 PKI 解决方案。我们将重点介绍设置 EJBCA、配置 cert-manager 的 EJBCA 外部签发器，以及确保 Istio 工作负载的证书自动续期的过程。本指南将帮助你构建可信且可扩展的 PKI，实现安全、合规且具有弹性的服务网格。&lt;/p&gt;
&lt;p&gt;为什么选择多集群？随着组织扩大其 Kubernetes 基础设施，多集群部署正变得越来越流行。多集群 Istio 设置提供了增强的可用性、容错性以及跨集群的工作负载隔离。&lt;/p&gt;
&lt;h2 id=&#34;理解-pki-及其在服务网格中的作用&#34;&gt;理解 PKI 及其在服务网格中的作用&lt;/h2&gt;
&lt;p&gt;PKI 是现代数字安全的基石。它涉及管理密钥和证书，以确保用户、应用程序或服务等实体之间的安全通信。在像 Istio 这样的服务网格中，有效的 PKI 对于保护微服务之间的通信，尤其是在多集群环境中，至关重要。&lt;/p&gt;
&lt;p&gt;EJBCA 提供了一个用于大规模管理 PKI 的开源解决方案。与 OpenSSL 或 Istio 内置的 PKI 等其他选项相比，EJBCA 提供了一个功能齐全、企业级的 PKI，适用于从简单到更复杂和多用途的部署。EJBCA 的能力超越了仅仅签发 mTLS 证书，提供了合规性特性、安全的可扩展性、密码灵活性，以及与广泛的应用程序集成。&lt;/p&gt;
&lt;h2 id=&#34;istioejbca-和-cert-manager&#34;&gt;Istio、EJBCA 和 cert-manager&lt;/h2&gt;
&lt;p&gt;使用 EJBCA 为多集群 Istio 环境设置 PKI。以下是包含的内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;环境准备&lt;/strong&gt;：我们使用了由主集群和远程集群组成的 MicroK8s 多集群 Istio 设置。两个集群都配置为使用 EJBCA 作为根证书颁发机构（CA）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cert-manager 集成&lt;/strong&gt;：我们展示了 cert-manager 与 EJBCA 的集成，包括 EJBCA 自定义签发器的配置。cert-manager 将处理证书的签发和续期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动证书续期&lt;/strong&gt;：PKI 管理中的一个关键挑战是确保证书在到期前自动续期。cert-manager 与 EJBCA 一起，可以在所有集群中实现无缝、对应用程序透明的证书续期。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/multi-cluster-pki-istio-recipe/arch.webp&#34; data-img=&#34;/blog/multi-cluster-pki-istio-recipe/arch.webp&#34; data-width=&#34;3444&#34; data-height=&#34;1824&#34; alt=&#34;image&#34; data-caption=&#34;架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;使用-ejbca-作为外部-ca-的-istio-架构设置高级摘要&#34;&gt;使用 EJBCA 作为外部 CA 的 Istio 架构设置高级摘要&lt;/h2&gt;
&lt;p&gt;本节概述了使用 EJBCA 作为外部证书颁发机构（CA）在 Kubernetes 集群上设置 Istio 的步骤。该设置涉及配置两个带有 MetalLB 用于负载均衡的 MicroK8s 集群，集成 EJBCA 进行证书管理，并使用 Helm 安装 Istio 组件。完整指南可在&lt;a href=&#34;https://docs.keyfactor.com/ejbca/latest/tutorial-deploy-istio-service-mesh-in-a-multi&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;找到。&lt;/p&gt;
&lt;p&gt;关键步骤包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;安装和配置 Helm 仓库&lt;/strong&gt;：为 Istio、cert-manager 和 EJBCA 添加必要的 Helm 仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署 cert-manager 和 EJBCA&lt;/strong&gt;：在主集群和远程集群中使用 Helm 安装 cert-manager，然后部署带有自定义签发器的 EJBCA。此步骤还包括生成并将必要的证书存储为 Kubernetes 密钥。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 EJBCA 配置 Istio&lt;/strong&gt;：在 Kubernetes 中创建一个指向 EJBCA 实例的自定义签发器用于签发证书。然后将此签发器集成到 Istio 配置中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装 Istio 组件&lt;/strong&gt;：部署 cert-manager-istio-csr 以处理 Istio 的证书签名请求，然后安装 Istio 的基础组件、Istio CNI（容器网络接口）、Istiod（Istio 控制平面）和 Istio 入口网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义和覆盖&lt;/strong&gt;：应用自定义值以定制 Istio 的行为，例如特定的集群 ID、信任域和用于服务间安全通信的 DNS 配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动证书续期&lt;/strong&gt;：设置配置为 cert-manager 在证书到期前自动续期，而不会对正在运行的应用程序造成中断。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/multi-cluster-pki-istio-recipe/cert-renew-flow.webp&#34; data-img=&#34;/blog/multi-cluster-pki-istio-recipe/cert-renew-flow.webp&#34; data-width=&#34;1214&#34; data-height=&#34;755&#34; alt=&#34;image&#34; data-caption=&#34;证书更新流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;证书更新流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;上图是表示 Istio 中 mTLS 证书签发和续期流程的流程图。它展示了从 Istiod 控制平面推送 Envoy 配置到 EJBCA 最终签发证书的流程。&lt;/p&gt;
&lt;h2 id=&#34;pki-最佳实践和合规性&#34;&gt;PKI 最佳实践和合规性&lt;/h2&gt;
&lt;p&gt;为你的 Istio 服务网格构建安全的 PKI，不仅仅是设置任意 PKI 并开始签发证书。它需要遵循最佳实践并符合法规要求，以保持安全性和未来适用性。以下是一些需要考虑的关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;遵守法规&lt;/strong&gt;：确保你的 PKI 实施符合如欧盟网络弹性法案和美国提升国家网络安全的行政命令等法规要求。这包括实施弹性的架构，维护审计跟踪，并确保稳健的密钥管理实践。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码灵活性和量子准备&lt;/strong&gt;：随着密码标准的发展，你的 PKI 必须具备足够的灵活性以适应新的算法和密钥长度。随着量子计算的潜在出现，具备量子准备性变得越来越重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与信息安全团队合作&lt;/strong&gt;：与你的信息安全（InfoSec）团队有效合作对于维护 PKI 的安全性和合规性至关重要。这包括定期审查安全策略、持续培训，以及确保 PKI 管理流程与组织的安全目标一致。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;在多集群环境中为 Istio 服务网格实施 PKI 看似艰巨，但使用正确的工具和实践，可以高效且有效地实现。EJBCA 结合 cert-manager，提供了一个用于大规模管理证书的解决方案，确保你的 Istio 服务网格 PKI 既安全又合规。&lt;/p&gt;
&lt;p&gt;通过遵循本指南中概述的步骤，你将能够建立一个可信的 PKI，实现无缝且强大的证书管理，并与你的信息安全团队有效合作，维护服务网格的安全性。&lt;/p&gt;
&lt;p&gt;有关本文中涵盖的主题的更多详细信息和进一步资源，请务必查看下面提供的链接和参考资料。&lt;/p&gt;
&lt;h2 id=&#34;资源&#34;&gt;资源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.keyfactor.com/ejbca/latest/tutorial-deploy-istio-service-mesh-in-a-multi&#34; title=&#34;教程——使用 EJBCA 作为外部 PKI 提供商在多集群 Kubernetes 环境中部署 Istio 服务网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;教程——使用 EJBCA 作为外部 PKI 提供商在多集群 Kubernetes 环境中部署 Istio 服务网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/&#34; title=&#34;Istio 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ejbca.org/&#34; title=&#34;EJBCA 社区版&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EJBCA 社区版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cert-manager.io/docs/&#34; title=&#34;cert-manager 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cert-manager 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://digital-strategy.ec.europa.eu/en/policies/cyber-resilience-act&#34; title=&#34;欧盟网络弹性法案&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;欧盟网络弹性法案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.whitehouse.gov/briefing-room/statements-releases/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/&#34; title=&#34;美国网络安全行政命令&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;美国网络安全行政命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/seamless-cross-cluster-access-istio/&#34; title=&#34;多集群 Istio 服务网格的跨集群无缝访问指南&#34;&gt;多集群 Istio 服务网格的跨集群无缝访问指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文首发为英文版：&lt;a href=&#34;https://tetrate.io/blog/multi-cluster-pki-istio-recipe-practical-example-for-a-trusted-and-scalable-pki-for-your-service-mesh/&#34; title=&#34;Multi-Cluster PKI &amp;#43; Istio Recipe: Practical Example for a Trusted and Scalable PKI for Your Service Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multi-Cluster PKI + Istio Recipe: Practical Example for a Trusted and Scalable PKI for Your Service Mesh&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Envoy 代理如何处理用户请求以实现追踪</title>
      <link>https://jimmysong.io/blog/envoy-tracing/</link>
      <pubDate>Thu, 26 Sep 2024 15:24:35 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-tracing/</guid>
      <description>
        
        
        &lt;p&gt;在云原生环境中，提升对应用程序的可观测性以更好地理解用户体验是至关重要的。然而，单纯依靠指标和日志无法提供个别案例的具体细节。这时，追踪（Tracing）技术就显得尤为重要。&lt;/p&gt;
&lt;h2 id=&#34;追踪的基本原理&#34;&gt;追踪的基本原理&lt;/h2&gt;
&lt;p&gt;追踪通过为每个用户请求附加一个关联 ID，向开发人员提供完整的用户体验上下文。这个关联 ID 就像一根线，将跨越多个服务的追踪串联起来，从而实现全面的可观测性。&lt;/p&gt;
&lt;p&gt;下图展示了 Envoy 处理用户请求的流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/98285f54b4811bd9ece87523444f4e02.svg&#34; data-img=&#34;/blog/envoy-tracing/98285f54b4811bd9ece87523444f4e02.svg&#34; alt=&#34;image&#34; data-caption=&#34;用户请求与 Envoy 代理的处理流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;用户请求与 Envoy 代理的处理流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;追踪&lt;/strong&gt;可以通过为每个用户请求附加一个关联 ID，向开发人员提供完整的用户体验上下文。这个关联 ID 就像一根线，将跨越多个服务的追踪串联起来。&lt;/p&gt;
&lt;p&gt;尽管所有请求都会经过 Envoy 代理，但 Envoy 无法独立提供完整的追踪信息。它只看到应用程序作为网络的一部分，无法洞察内部处理。这使得 Envoy 无法区分入站请求和出站请求是否来自同一个用户，因此无法自动转发追踪上下文。&lt;/p&gt;
&lt;h2 id=&#34;服务网格中的请求上下文&#34;&gt;服务网格中的请求上下文&lt;/h2&gt;
&lt;p&gt;Envoy 可以在 Istio 服务网格中作为 Sidecar 或 Waypoint 代理，下图展示了 Envoy 在服务网格中如何处理请求上下文的。&lt;/p&gt;
&lt;h3 id=&#34;1-用户请求的开始&#34;&gt;1. 用户请求的开始&lt;/h3&gt;
&lt;p&gt;追踪涉及通过多个服务跟踪路径，以理解用户体验的完整上下文。追踪从一个用户请求开始，该请求被分配了一个关联 ID。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/51fd90d791099a4f158c823a821fba6d.svg&#34; data-img=&#34;/blog/envoy-tracing/51fd90d791099a4f158c823a821fba6d.svg&#34; alt=&#34;image&#34; data-caption=&#34;用户请求的开始&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;用户请求的开始&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;2-请求通过-envoy-代理&#34;&gt;2. 请求通过 Envoy 代理&lt;/h3&gt;
&lt;p&gt;Envoy 位于应用程序旁边，所有进入的请求都会经过 Envoy。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/aebbb0ea064ee93575ec5a1ec9bdf329.svg&#34; data-img=&#34;/blog/envoy-tracing/aebbb0ea064ee93575ec5a1ec9bdf329.svg&#34; alt=&#34;image&#34; data-caption=&#34;用户请求的开始&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;用户请求的开始&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;3-envoy-附加额外的-headers&#34;&gt;3. Envoy 附加额外的 Headers&lt;/h3&gt;
&lt;p&gt;Envoy 可以在请求中附加额外的 Headers，以收集关于应用程序内部发生情况的信息。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/7ab35160ac9d07cfdcaa9436b8706548.svg&#34; data-img=&#34;/blog/envoy-tracing/7ab35160ac9d07cfdcaa9436b8706548.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 附加额外的 Headers&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 附加额外的 Headers&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;4-应用程序处理请求并调用后端服务&#34;&gt;4. 应用程序处理请求并调用后端服务&lt;/h3&gt;
&lt;p&gt;应用程序在处理请求的过程中，可能需要联系其他系统来处理该请求。比如外部的认证和授权服务。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/d1016c81280b99d35a642a80caa3af52.svg&#34; data-img=&#34;/blog/envoy-tracing/d1016c81280b99d35a642a80caa3af52.svg&#34; alt=&#34;image&#34; data-caption=&#34;应用程序处理请求并调用后端服务&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;应用程序处理请求并调用后端服务&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;5-应用程序需要复制关联-id&#34;&gt;5. 应用程序需要复制关联 ID&lt;/h3&gt;
&lt;p&gt;应用程序知道出站请求是代表哪个入站请求发起的（例如 Trace ID 为 1234 的请求）。但是，Envoy 并不知道这一点。因此，应用程序需要将关联 ID 等上下文从入站请求复制到出站请求中。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/1409785fdd6f8909dffee3c5bd1b44ba.svg&#34; data-img=&#34;/blog/envoy-tracing/1409785fdd6f8909dffee3c5bd1b44ba.svg&#34; alt=&#34;image&#34; data-caption=&#34;应用程序需要复制关联 ID&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;应用程序需要复制关联 ID&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;6-多个请求的并发处理&#34;&gt;6. 多个请求的并发处理&lt;/h3&gt;
&lt;p&gt;在实际场景中，应用程序同时处理多个用户请求，这导致了并发性。由于 Envoy 只能看到网络层面的请求和响应，无法区分这些请求之间的因果关系。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/2aebfd544f726da5fe6f4389aed924bd.svg&#34; data-img=&#34;/blog/envoy-tracing/2aebfd544f726da5fe6f4389aed924bd.svg&#34; alt=&#34;image&#34; data-caption=&#34;多个请求的并发处理&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;多个请求的并发处理&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;7-envoy-的局限性&#34;&gt;7. Envoy 的局限性&lt;/h3&gt;
&lt;p&gt;因为 Envoy 无法看到应用程序内部的处理逻辑，它只能看到一系列的网络请求和响应，无法知道哪些出站请求是由哪些入站请求触发的。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/d048f6f9fc9af6f29a9f2e4bfe599613.svg&#34; data-img=&#34;/blog/envoy-tracing/d048f6f9fc9af6f29a9f2e4bfe599613.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 的局限性&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 的局限性&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;需要应用程序的参与&#34;&gt;需要应用程序的参与&lt;/h2&gt;
&lt;p&gt;由于 Envoy 无法自动转发追踪上下文，应用程序本身需要负责将入站请求的 Headers 复制到出站请求中，以保持追踪信息的完整性。&lt;/p&gt;
&lt;h3 id=&#34;应用程序复制-headers&#34;&gt;应用程序复制 Headers&lt;/h3&gt;
&lt;p&gt;应用程序在处理入站请求时，需要将必要的 Headers（如关联 ID、用户身份等）复制到任何出站请求中。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/d1f00ba65d1c61edf996a19a6b5145d7.svg&#34; data-img=&#34;/blog/envoy-tracing/d1f00ba65d1c61edf996a19a6b5145d7.svg&#34; alt=&#34;image&#34; data-caption=&#34;应用程序复制 Headers&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;应用程序复制 Headers&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;响应返回给用户&#34;&gt;响应返回给用户&lt;/h3&gt;
&lt;p&gt;应用程序完成对用户请求的处理后，将响应返回给用户。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/ed0816d0cb881c7c7d5eb19e6d0826bf.svg&#34; data-img=&#34;/blog/envoy-tracing/ed0816d0cb881c7c7d5eb19e6d0826bf.svg&#34; alt=&#34;image&#34; data-caption=&#34;响应返回给用户&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;响应返回给用户&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;解决方案与推荐&#34;&gt;解决方案与推荐&lt;/h2&gt;
&lt;p&gt;为了确保追踪信息的完整性，应用程序需要主动复制和传递追踪相关的 Headers。这可以通过集成如 &lt;a href=&#34;https://skywalking.apache.org/&#34; title=&#34;Apache SkyWalking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache SkyWalking&lt;/a&gt; 的工具来实现，SkyWalking 不仅支持分布式追踪，还包括性能监控、日志分析等功能。利用 SkyWalking 的库和代理，可以简化 Headers 的复制和追踪信息的传递。&lt;/p&gt;
&lt;p&gt;关于如何在 Istio 中使用 SkyWalking 实现分布式追踪详见&lt;a href=&#34;https://jimmysong.io/blog/distributed-tracing-with-skywalking-in-istio/&#34; title=&#34;这篇博客&#34;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;追踪的重要性&lt;/strong&gt;：追踪为开发人员提供了用户请求的完整上下文，帮助更好地理解和改进用户体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Envoy 的局限性&lt;/strong&gt;：Envoy 只能看到网络层面的请求和响应，无法跟踪请求的因果关系，因此无法自动转发追踪上下文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序的角色&lt;/strong&gt;：应用程序需要主动复制和传递追踪相关的 Headers，以确保追踪信息的完整性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐的工具&lt;/strong&gt;：使用 SkyWalking 等追踪工具的库，可以简化在应用程序中实现 Headers 复制的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/how-the-envoy-proxy-handles-a-user-request/&#34; title=&#34;How the Envoy proxy handles a user request - tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How the Envoy proxy handles a user request - tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/distributed-tracing-with-skywalking-in-istio/&#34; title=&#34;如何在 Istio 中使用 SkyWalking 进行分布式追踪？- jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何在 Istio 中使用 SkyWalking 进行分布式追踪？- jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>《黑神话：悟空》一周目评测：瑕不掩瑜，期待更丰富内容</title>
      <link>https://jimmysong.io/blog/black-myth-wukong-review/</link>
      <pubDate>Mon, 16 Sep 2024 12:15:06 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/black-myth-wukong-review/</guid>
      <description>
        
        
        &lt;p&gt;最近完成了《黑神话：悟空》的一周目体验。总体来说，音乐和美术表现出色，但战斗系统略显单调，地图设计不够理想，整体内容偏少，让人感到意犹未尽。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/wukong.webp&#34; data-img=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/wukong.webp&#34; alt=&#34;image&#34; data-caption=&#34;黑神话：悟空&#34;&gt;
  
  
  &lt;figcaption&gt;黑神话：悟空&lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    什么是一周目？
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    “一周目”指的是玩家首次完整进行游戏的过程，这个阶段充满新鲜感和探索性，可以体验到完整的剧情与玩法，为后续的游戏体验奠定基础，通常难度适中。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;音乐&#34;&gt;音乐&lt;/h2&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=113055920818374&amp;amp;bvid=BV1S9noeREf3&amp;amp;cid=25673204847&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;第二章开头，熊竹英老师用陕北说书的形式演绎了《黄风起兮》，令人印象深刻。熊竹英是陕北说书的非遗传承人。陕北说书起源于陕西北部的延安和榆林地区，最初由贫苦盲人用陕北民歌小调演唱民间传说和故事，后来融入了多种曲调，形成了独特的说唱艺术。通常是一人自弹自唱，伴奏乐器以三弦为主，还会用绑在小腿的甩板和手腕的“嘛喳喳”小木板来打节奏。2006 年，陕北说书被列入国家级非物质文化遗产名录。&lt;/p&gt;
&lt;h2 id=&#34;美术设计&#34;&gt;美术设计&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/jietu.webp&#34; data-img=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/jietu.webp&#34; alt=&#34;image&#34; data-caption=&#34;黑神话悟空截图&#34;&gt;
  
  
  &lt;figcaption&gt;黑神话悟空截图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;游戏前两章的美术设计非常出色，古建筑的还原相当精致。以下是我对每个章节的感受：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一回：火照黑云（黑风山）&lt;/strong&gt;：我很喜欢开头翠绿的丛林，还有偶尔出现的妖怪，营造出一种神秘的氛围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二回：风起黄昏（黄风岭）&lt;/strong&gt;：漫天黄沙带来了一种苍凉和破败的感觉。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三回：夜生白露（小雷音寺）&lt;/strong&gt;：浮屠界让我头晕目眩，过桥时经常被打落，茫茫雪地既刺眼又让人迷失方向，唯一觉得好些的是&lt;strong&gt;安身寺&lt;/strong&gt;的部分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第四回：曲度紫鸳（盘丝洞）&lt;/strong&gt;：层层洞窟让人容易迷路，不过黄花观和紫云山的景色还不错。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第五回：日落红尘（火焰山）&lt;/strong&gt;：这种场景不太对我胃口，不由得让我联想到《艾尔登法环》中的火山地形。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第六回：未竟（花果山）&lt;/strong&gt;：地图很大，但更容易迷路了，只能不断用筋斗云在空中飞来飞去。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/jindouyun.webp&#34; data-img=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/jindouyun.webp&#34; alt=&#34;image&#34; data-caption=&#34;花果山&#34;&gt;
  
  
  &lt;figcaption&gt;花果山&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;总体来说，缺少地图功能让人非常无语，即便没有地图，搞个指南针也不难，但游戏中什么都没有，只能靠空气墙来判断边界。玩家在游戏中不断兜圈子，浪费了不少时间在找路上，真正玩游戏的时间可能不足七成。&lt;/p&gt;
&lt;h2 id=&#34;故事&#34;&gt;故事&lt;/h2&gt;
&lt;p&gt;《黑神话：悟空》的故事设定很简单，背景发生在唐僧师徒取经之后。孙悟空虽被封为斗战胜佛，却辞去佛位回到花果山。天庭不满，派二郎神等前来捉拿，紧箍咒再现使悟空落败，他的“六根”（眼、耳、鼻、舌、身、意）被分为六块。“意”化作天命人（玩家），其余五块被分给五个妖王。花果山的猴子猴孙踏上寻找“六根”复活悟空的征程。玩家扮演的天命人在老猴子的指引下，一路打怪升级，集齐悟空的“五根”，最终战胜悟空的意念和身躯，孙悟空复活却又重新戴上紧箍咒，在石头中等待新的宿命。&lt;/p&gt;
&lt;p&gt;第一回的故事比较直白，金池长老因贪财觊觎唐僧的袈裟，最终葬身火海，这也契合了大圣的六根之一——“眼见喜”。观音菩萨的那句“若不披上这件衣裳，众生又怎知我尘缘已断，金海尽干。”（第一章结尾 CG《看见》）也可谓经典。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/lingjipusa.webp&#34; data-img=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/lingjipusa.webp&#34; alt=&#34;image&#34; data-caption=&#34;灵吉菩萨&#34;&gt;
  
  
  &lt;figcaption&gt;灵吉菩萨&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我最喜欢的是第二章关于黄风大圣的故事，网上有很多解读，我比较认可的说法是灵吉菩萨作祟，惩罚黄金佛国的百姓，而黄风大圣是个好妖。尤其是黄风大圣的那句“我来助你”，喊在了多少人的心坎上。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/wolaizhuni.webp&#34; data-img=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/wolaizhuni.webp&#34; alt=&#34;image&#34; data-caption=&#34;黄风大圣：我来助你&#34;&gt;
  
  
  &lt;figcaption&gt;黄风大圣：我来助你&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;金句&#34;&gt;金句&lt;/h2&gt;
&lt;p&gt;除了观音菩萨对黑熊精说的那句“金海尽干”外，游戏中还有许多金句，大多以旁白的形式出现，还有一些是角色的对白。最精彩的当属黄眉大王 boss 战中的那大段对白。以下是我收集的一些精彩对白：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“只要心中还有放不下的偶像，终有一天，它将化为修行路上的无解业障。”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“有圣就有盗，有高山就有深渊，有天地悬殊就有腥风血雨，我逃不掉，你也逃不掉！”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“他们想看的，是如今我们跪着的模样！”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“人也，兽也，佛也，妖也，众生自有根器，持优劣为次第，可乱来不得。你说，对吗？孙悟空？”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“信什么狗屁如来，不如我自己来！”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“既见未来，为何不拜？”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“不杀生，仇恨永无止息；不偷盗，强弱如我何异；不邪淫，一切有情皆孽；不妄语，梦幻泡影空虚；不馋酒，忧怖涨落无常；不耽乐，芳华刹那而已；不贪眠，苦苦不得解脱；不纵欲，诸行了无生趣。”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“可命运呐，就像爱人的舌头，嘴里一套，心里一套。哪怕亲口尝到，也不知到底是想要，还是不想要。”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“后来啊，这禅院又被重建了。可人心若是烧没了，修好一座破庙，又有什么用呢？”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旁白&lt;/strong&gt;：“天地万物皆炉鼎，唯有上品得我心。”（戌狗炼丹完成时说）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;黑风大王&lt;/strong&gt;：“前程暗漆本难知，乘风得势各有时。既成南海修真士，却叫财迷作钱痴。”（黑风大王相关剧情）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寅虎&lt;/strong&gt;：“六丁六甲，从不吃素。&amp;quot;（击败玩家后）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虎先锋&lt;/strong&gt;：“打不过，就跪下。猴头留着下酒，剩下的交给大王。”（击败玩家后）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;战斗系统&#34;&gt;战斗系统&lt;/h2&gt;
&lt;p&gt;《黑神话：悟空》的战斗系统极具特色。主角以多样棍法战斗，分为轻棍、重棍等多种类型，各种棍法的表现和打击范围各异。但在一周目时，我只使用了劈棍，因为灵光点有限，无法同时加到多个棍法上，二周目再尝试其他棍法吧。&lt;/p&gt;
&lt;p&gt;此外，游戏中还可以使用其他武器和多种法术神通，如奇术、身法、毫毛和变身等。闪避机制相当灵活，并带有无敌帧效果，这点在游戏刚开始时我没注意到，一上来就盲目攻击，不懂得躲避，因此死了无数次才明白。&lt;/p&gt;
&lt;p&gt;游戏中有生命值、法力值和气力值三种数值条，各自对应不同的恢复机制。与其他魂类游戏不同的是，这款游戏竟然没有恢复法力的药水，直到二周目我才找到这种丹药。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/guangzhi.webp&#34; data-img=&#34;https://rootsongjc.github.io/img/blog/black-myth-wukong-review/guangzhi.webp&#34; alt=&#34;image&#34; data-caption=&#34;击败广智&#34;&gt;
  
  
  &lt;figcaption&gt;击败广智&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;至于游戏中的那些精魄，大部分我都没用过，一直到一周目过半，我基本上只使用了广智。&lt;/p&gt;
&lt;h2 id=&#34;期待&#34;&gt;期待&lt;/h2&gt;
&lt;p&gt;玩这款游戏时我一直有个疑问：为什么天命人不能开口说话？而且游戏过程中也无法控制天命人的姿势，不像《艾尔登法环》那样可以摆个 pose 拍照，这在拍照模式中还是挺实用的。&lt;/p&gt;
&lt;p&gt;另外，希望在未来的 DLC 中能增加地图和更多章节，现在的游戏内容确实有些单薄，熟悉地图后，二周目真的很快就能完成。此外，希望能引入更多的武器系统。我们都知道悟空的经典武器是棍子，但如果能有更多武器选择，战斗会不会更精彩些？&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说，《黑神话：悟空》是一部充满诚意的作品，但内容略显不足。希望未来的续作能在保持现有优点的基础上，进一步优化游戏体验，增加更多内容和玩法，使《黑神话》系列成为国产游戏的经典之作，也希望未来能有更多优秀的 3A 大作从国内诞生。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>澳门 City Walk：感受精致濠江</title>
      <link>https://jimmysong.io/blog/macao-trip/</link>
      <pubDate>Sat, 14 Sep 2024 17:21:27 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/macao-trip/</guid>
      <description>
        
        
        &lt;p&gt;在决定去澳门之前，我对这座小城的印象仅限于大三巴、官也街、葡式蛋挞、何鸿燊，以及七子之歌里那句“你可知 macao 不是我真姓…”。但当我亲自踏上这片 33.3 平方公里的土地时，才发现这个中国最小的一级行政区，竟然充满了独特的韵味。&lt;/p&gt;
&lt;h2 id=&#34;对澳门的第一印象&#34;&gt;对澳门的第一印象&lt;/h2&gt;
&lt;p&gt;这次我是从香港乘坐大巴从港珠澳大桥进入澳门。在此之前我就对查阅过资料，了解到澳门面积不大，只有 33.3 平方公里，而北京二环内的面积有 62 公里，近乎澳门的两倍。澳门行政区域内包含包括澳门半岛、氹仔岛和路环岛。澳门的陆地面积是经过长期不断填海逐渐扩大的。澳门与珠海隔河相望，如果说两地“鸡犬相闻”那好不为过。澳门与内地的距离远没有香港与内地那么远。&lt;/p&gt;
&lt;p&gt;从澳门妈阁山眺望对岸，珠海近在眼前。珠海和澳门以前山水道相隔，距离不过 300 多米。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/zhuhai.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/zhuhai.webp&#34; alt=&#34;image&#34; data-caption=&#34;从澳门远眺珠海&#34;&gt;
  
  
  &lt;figcaption&gt;从澳门远眺珠海&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;澳门半岛是老城区，街道上车水马龙，留给行人步行的空间十分有限。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/street.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/street.webp&#34; alt=&#34;image&#34; data-caption=&#34;澳门半岛的街道&#34;&gt;
  
  
  &lt;figcaption&gt;澳门半岛的街道&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;城市漫步city-walk&#34;&gt;城市漫步：City Walk&lt;/h2&gt;
&lt;p&gt;步行到大三巴牌坊，它是圣保禄大教堂前壁遗址，位于花王堂区炮台山下，左邻澳门博物馆和大炮台。牌坊总共有五层，主要以花岗岩建成，宽 23 米，高 25.5 米，坊前有 68 级台阶。大三巴牌坊位列“澳门八景”之首，2005 年，包含大三巴牌坊在内的“澳门历史城区”列入世界文化遗产名录。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/renqun.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/renqun.webp&#34; alt=&#34;image&#34; data-caption=&#34;前往大三巴的街道&#34;&gt;
  
  
  &lt;figcaption&gt;前往大三巴的街道&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在前往大三巴牌坊的路上经过一段小吃街，街道上人声鼎沸，摩肩接踵，因为当天的天气比较炎热，再加上小吃街上散发的牛杂、猪肉铺、蛋挞等的味道，让人心里五味杂陈。原以为大三巴牌坊前会有一块开阔的广场，没想到只有台阶，而且台阶上还坐了很多人。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/dasanba.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/dasanba.webp&#34; alt=&#34;image&#34; data-caption=&#34;大三巴牌坊的背面还在施工&#34;&gt;
  
  
  &lt;figcaption&gt;大三巴牌坊的背面还在施工&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在炮台山上可以俯瞰澳门半岛。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/paotai.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/paotai.webp&#34; alt=&#34;image&#34; data-caption=&#34;从炮台山上俯瞰澳门半岛&#34;&gt;
  
  
  &lt;figcaption&gt;从炮台山上俯瞰澳门半岛&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;此地不宜久留，我继续拾阶而上，前往主教座堂。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/churt.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/churt.webp&#34; alt=&#34;image&#34; data-caption=&#34;主教座堂&#34;&gt;
  
  
  &lt;figcaption&gt;主教座堂&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;澳门的街道上可以看到，墨绿色的防撞柱，嫩绿色的墙，明黄的建筑，配色让人眼前一亮。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/wall.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/wall.webp&#34; alt=&#34;image&#34; data-caption=&#34;大堂附近的建筑&#34;&gt;
  
  
  &lt;figcaption&gt;大堂附近的建筑&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;还有西望洋眺望主教山小堂，在登上斜坡的时候我看到有人在用抹布清洁墙壁。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/hill.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/hill.webp&#34; alt=&#34;image&#34; data-caption=&#34;从西望洋眺望主教山小堂&#34;&gt;
  
  
  &lt;figcaption&gt;从西望洋眺望主教山小堂&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;澳门半道上最惹眼的建筑非新葡京莫属了。新葡京的全称是新葡京酒店，它的造型设计极度浮夸，内部装饰更是奢华，它是澳门“赌王”何鸿燊耗资 50 亿元兴建的位于澳门葡京路端的赌场酒店，其外形如巨大金莲花，是澳门最知名的地标建筑之一，也是世界 20 座最具标志性大楼之一。它是澳门首家打造“七星级”的豪华酒店，集赌场、住宿、餐饮、娱乐、艺术展览等多种功能于一体。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/xinpujing.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/xinpujing.webp&#34; alt=&#34;image&#34; data-caption=&#34;可以在澳门半岛上随处仰望可见的新葡京酒店&#34;&gt;
  
  
  &lt;figcaption&gt;可以在澳门半岛上随处仰望可见的新葡京酒店&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;澳门虽小，但是各种交通工具都很齐全，澳门现有一条运营中的轻轨线路，从妈阁庙到澳门机场和码头，已经连接了澳门的三大区域及交通枢纽。据悉，还有另外两条线路在建。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/macao-trip/weinisiren.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/macao-trip/weinisiren.webp&#34; alt=&#34;image&#34; data-caption=&#34;威尼斯人娱乐场&#34;&gt;
  
  
  &lt;figcaption&gt;威尼斯人娱乐场&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;夜幕将至，我来到了路凼的威尼斯人娱乐场（内设赌场），没想到这里门口几十辆大巴排列成行，行人入职，内部更是像一个迷宫，三大主体建筑——威尼斯人、巴黎人、伦敦人串联在一起，让人绕来绕起，就是走不出去。威尼斯人娱乐场里的那条人工河充斥着消毒水味，这里面我是一刻也待不下去，真搞不懂为什么要在这里设置一条河。&lt;/p&gt;
&lt;h2 id=&#34;澳门的堂区&#34;&gt;澳门的堂区&lt;/h2&gt;
&lt;p&gt;在查看地图上我发现澳门有很多“堂区”，那是澳门在葡萄牙殖民统治时期，以天主教的堂区作为行政区划的基础，不过现在“堂区”已经不是正式的行政机构建置，不具法律地位。澳门有七个堂区和一个无堂区划分区域。其中澳门半岛有五个堂区，分别是花地玛堂区、圣安多尼堂区、大堂区、望德堂区、风顺堂区；澳门离岛有两个堂区，分别是嘉模堂区、圣方济各堂区。位于氹仔和路环之间的填海地段为称为路氹城，不属于任何堂区。&lt;/p&gt;
&lt;p&gt;葡萄牙以天主教信仰为重要的社会和文化核心，在海外殖民地也推行以教堂为中心的堂区划分制度。教堂在堂区的形成和发展过程中起到了关键的源头性作用，一个地区往往先有重要的教堂建立，随后围绕教堂逐渐形成了具有一定人口规模和社会经济活动的聚居区域，进而被划定为一个堂区。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;澳门虽小，但每个角落都有它的故事。无论是大三巴的宏伟遗迹，还是街头小吃的烟火气息，这座小城总能给人留下深刻印象。小而精，这就是澳门的魅力所在。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>介绍 Kmesh：用内核原生技术革新服务网格数据平面</title>
      <link>https://jimmysong.io/blog/introducing-kmesh-kernel-native-service-mesh/</link>
      <pubDate>Sat, 14 Sep 2024 16:16:04 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/introducing-kmesh-kernel-native-service-mesh/</guid>
      <description>
        
        
        &lt;p&gt;在近期整理服务网格数据平面的几种部署模式时，我关注到了徐中虎在 KubeCon China 2024 的分享《&lt;a href=&#34;https://kccncossaidevchn2024.sched.com/event/1eYWy/a-new-choice-for-istio-data-plane-architectural-innovation-for-a-brand-new-performance-experience-istioxiao-zha-sao-daepxia-mo-zha-zhonghu-xu-huawei?iframe=no&#34; title=&#34;Istio 数据平面的新选择：全新性能体验的架构创新&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 数据平面的新选择：全新性能体验的架构创新&lt;/a&gt;》。该分享介绍了 Kmesh，它利用 eBPF 和内核增强技术，消除了 Sidecar，并提出了双引擎模式，是一种创新性的服务网格解决方案。去年我已听闻 Kmesh，借此契机我深入研究了 Kmesh，撰写此博客与大家分享。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;strong&gt;注意&lt;/strong&gt;：本文中所展示的所有数据均引用自 &lt;a href=&#34;https://kccncossaidevchn2024.sched.com/event/1eYWy/a-new-choice-for-istio-data-plane-architectural-innovation-for-a-brand-new-performance-experience-istioxiao-zha-sao-daepxia-mo-zha-zhonghu-xu-huawei?iframe=no&#34; title=&#34;《Istio 数据平面的新选择：全新性能体验的架构创新》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Istio 数据平面的新选择：全新性能体验的架构创新》&lt;/a&gt;，我并未对这些数据的准确性进行独立验证。请读者自行判断和核实这些数据的可靠性。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;像 Istio 这样的服务网格已成为管理复杂微服务架构的核心，提供流量管理、安全性和可观测性等功能。Sidecar 模型，即在每个服务实例旁运行一个代理，已成为主要方法。虽然功能有效，但这种架构引入了显著的延迟和资源开销。&lt;/p&gt;
&lt;h2 id=&#34;传统-sidecar-架构的局限性&#34;&gt;传统 Sidecar 架构的局限性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;延迟开销&lt;/strong&gt;：增加 Sidecar 代理会导致网络跳数和上下文切换增加，每次服务调用引入额外 &lt;strong&gt;2 至 3 毫秒&lt;/strong&gt; 的延迟。对于对延迟敏感的应用，这种延迟是不可接受的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;：每个 Sidecar 都会消耗 CPU 和内存资源。在拥有数千个服务的大规模部署中，累积的资源开销巨大，虽然可以通过一定的技术手段进行优化，但依然降低了部署密度并增加了运营成本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio 的性能测量显示，即使没有流量分发，仍存在约 3 毫秒的固有延迟开销。随着连接数量的增长，延迟相应增加，这突显了 Sidecar 模型在高性能应用中的低效。&lt;/p&gt;
&lt;h2 id=&#34;行业应对挑战的尝试&#34;&gt;行业应对挑战的尝试&lt;/h2&gt;
&lt;p&gt;已经提出了多种解决方案来缓解 Sidecar 架构的缺点：&lt;/p&gt;
&lt;h3 id=&#34;cilium-服务网格&#34;&gt;Cilium 服务网格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;：将 eBPF 与 Envoy 相结合，创建一个无 Sidecar 的服务网格。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机制&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;L4 流量&lt;/strong&gt;：使用 eBPF 进行高效的内核级数据路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L7 流量&lt;/strong&gt;：依赖 Envoy 进行应用层解析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;L7 额外跳数&lt;/strong&gt;：通过 Envoy 进行 L7 管理引入了额外的网络跳数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障隔离&lt;/strong&gt;：在确保治理故障隔离方面存在挑战。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;istio-ambient-mesh&#34;&gt;Istio Ambient Mesh&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;：使用 &lt;strong&gt;ztunnel&lt;/strong&gt; 和 &lt;strong&gt;waypoint&lt;/strong&gt; 代理，引入无 Sidecar 的架构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机制&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户空间处理&lt;/strong&gt;：所有流量拦截和管理都在用户空间进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局限性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;复杂的流量拦截&lt;/strong&gt;：用户空间的拦截增加了复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跳数增加&lt;/strong&gt;：L7 连接涉及多个网络跳数，增加了延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些解决方案虽然创新，但并未完全解决 Sidecar 架构固有的延迟和资源开销问题。&lt;/p&gt;
&lt;p&gt;更多详细信息可以参考我的另一篇文章：&lt;a href=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/&#34; title=&#34;数据平面的几种部署模式&#34;&gt;数据平面的几种部署模式&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;介绍-kmesh一种内核原生的方法&#34;&gt;介绍 Kmesh：一种内核原生的方法&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kmesh-net/kmesh&#34; title=&#34;Kmesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kmesh&lt;/a&gt; 通过将流量治理直接集成到操作系统内核，定义了一种新的服务网格数据平面。利用 eBPF（扩展伯克利数据包过滤器）和内核增强，Kmesh 提供高性能、低延迟和资源高效的服务网格能力。&lt;/p&gt;
&lt;h3 id=&#34;技术架构&#34;&gt;技术架构&lt;/h3&gt;
&lt;p&gt;下图展示了 Kmesh 的架构。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/introducing-kmesh-kernel-native-service-mesh/kmesh-arch.svg&#34; data-img=&#34;/blog/introducing-kmesh-kernel-native-service-mesh/kmesh-arch.svg&#34; alt=&#34;image&#34; data-caption=&#34;Kmesh 架构图：（根据 &amp;lt;a href=&amp;#34;https://github.com/kmesh-net/kmesh&amp;#34; title=&amp;#34;Kmesh GitHub&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener&amp;#34;&amp;gt;Kmesh GitHub&amp;lt;/a&amp;gt; 绘制）&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kmesh 架构图：（根据 &lt;a href=&#34;https://github.com/kmesh-net/kmesh&#34; title=&#34;Kmesh GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kmesh GitHub&lt;/a&gt; 绘制）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;核心组件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kmesh-Daemon&lt;/strong&gt;：每个节点的管理组件，负责：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理 eBPF 程序。&lt;/li&gt;
&lt;li&gt;从控制平面（如 Istiod）订阅 xDS 配置。&lt;/li&gt;
&lt;li&gt;处理可观测性和指标收集。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;eBPF 编排&lt;/strong&gt;：在内核级实现流量拦截和管理，支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L4 负载均衡。&lt;/li&gt;
&lt;li&gt;流量加密和解密。&lt;/li&gt;
&lt;li&gt;监控和简单的 L7 动态路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Waypoint Proxy（双引擎模式下可选）&lt;/strong&gt;：处理高级 L7 流量治理，可按命名空间或服务进行部署。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关键优势&#34;&gt;关键优势&lt;/h3&gt;
&lt;p&gt;该分享中指出 Kmesh 具有以下优势，尤其是性能和资源利用率上：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/introducing-kmesh-kernel-native-service-mesh/performance.webp&#34; data-img=&#34;/blog/introducing-kmesh-kernel-native-service-mesh/performance.webp&#34; data-width=&#34;2208&#34; data-height=&#34;746&#34; alt=&#34;image&#34; data-caption=&#34;Kmesh vs Sidecar vs Ambient（&amp;lt;a href=&amp;#34;https://kccncossaidevchn2024.sched.com/event/1eYWy/a-new-choice-for-istio-data-plane-architectural-innovation-for-a-brand-new-performance-experience-istioxiao-zha-sao-daepxia-mo-zha-zhonghu-xu-huawei?iframe=no&amp;#34; title=&amp;#34;来源&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener&amp;#34;&amp;gt;来源&amp;lt;/a&amp;gt;）&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kmesh vs Sidecar vs Ambient（&lt;a href=&#34;https://kccncossaidevchn2024.sched.com/event/1eYWy/a-new-choice-for-istio-data-plane-architectural-innovation-for-a-brand-new-performance-experience-istioxiao-zha-sao-daepxia-mo-zha-zhonghu-xu-huawei?iframe=no&#34; title=&#34;来源&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来源&lt;/a&gt;）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高性能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;延迟降低&lt;/strong&gt;：与传统 Sidecar 架构相比，内核原生的 L7 管理将转发延迟降低了超过 &lt;strong&gt;60%&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用启动改进&lt;/strong&gt;：由于消除了 Sidecar 初始化，应用启动时间提升了 &lt;strong&gt;40%&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;低资源开销&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;资源效率&lt;/strong&gt;：无需 Sidecar 代理，资源消耗减少了超过 &lt;strong&gt;70%&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高可用性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无缝升级&lt;/strong&gt;：内核级流量管理确保升级或重启 Kmesh 组件不会中断现有的服务连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全隔离&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增强的安全性&lt;/strong&gt;：利用基于 BPF 的虚拟机安全和 cgroup 级别的治理隔离，确保安全的多租户环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灵活的治理模型&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;部署模式&lt;/strong&gt;：提供内核原生模式以实现最大性能，和双引擎模式以获得部署灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无缝兼容性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制平面集成&lt;/strong&gt;：完全兼容 xDS 协议，允许与 Istio 控制平面集成，支持 Istio API 和 Gateway API。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kmesh-vs-ambient-vs-cilium-mesh&#34;&gt;Kmesh vs Ambient vs Cilium mesh&lt;/h2&gt;
&lt;p&gt;通过上文中对 Kmesh 的介绍，你会发现它与 Istio Ambient 模式及 Cilium mesh 有很多相似性，下表将从多个维度对比它们之间的区别。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;比较维度&lt;/th&gt;
          &lt;th&gt;Kmesh&lt;/th&gt;
          &lt;th&gt;Istio Ambient 模式&lt;/th&gt;
          &lt;th&gt;Cilium Mesh&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;流量拦截与处理方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;内核级处理：&lt;/strong&gt; 利用 eBPF 和内核增强，将流量治理直接集成到操作系统内核中。&lt;br&gt;•&lt;strong&gt;模式选择：&lt;/strong&gt;&lt;br&gt;  • &lt;strong&gt;内核原生模式：&lt;/strong&gt; L4 和 L7 流量全部在内核中处理，无需用户空间代理。&lt;br&gt;  • &lt;strong&gt;双引擎模式：&lt;/strong&gt; L4 在内核中处理，L7 由 Waypoint Proxy 处理。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;用户空间处理：&lt;/strong&gt; 引入 &lt;strong&gt;ztunnel&lt;/strong&gt; 和 &lt;strong&gt;Waypoint Proxy&lt;/strong&gt;，在用户空间进行流量拦截和管理。&lt;br&gt;• &lt;strong&gt;无 Sidecar 架构：&lt;/strong&gt; 消除了 Sidecar，但增加了新的用户空间组件。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;混合处理：&lt;/strong&gt; 结合 eBPF 和 Envoy。&lt;br&gt;• &lt;strong&gt;L4 流量：&lt;/strong&gt; 在内核中使用 eBPF 处理。&lt;br&gt;• &lt;strong&gt;L7 流量：&lt;/strong&gt; 由用户空间的 Envoy 代理处理。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;性能与延迟&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;高性能：&lt;/strong&gt; 内核级处理，减少上下文切换和数据拷贝。&lt;br&gt;• &lt;strong&gt;延迟降低：&lt;/strong&gt; 转发延迟降低超过 &lt;strong&gt;60%&lt;/strong&gt;。&lt;br&gt;• &lt;strong&gt;低延迟启动：&lt;/strong&gt; 应用启动时间提高 &lt;strong&gt;40%&lt;/strong&gt;。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;性能改进但仍有延迟：&lt;/strong&gt; 比传统 Sidecar 架构有所提升，但用户空间处理和增加的网络跳数仍带来延迟。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;L4 性能优异：&lt;/strong&gt; L4 流量内核处理，高效。&lt;br&gt;• &lt;strong&gt;L7 存在开销：&lt;/strong&gt; L7 流量通过 Envoy，增加网络跳数和潜在延迟。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;架构复杂度&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;内核依赖：&lt;/strong&gt; 需要特定内核版本或增强，部署复杂度增加。&lt;br&gt;• &lt;strong&gt;组件简洁：&lt;/strong&gt; 内核处理，减少对用户空间组件的依赖。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;新增组件：&lt;/strong&gt; 引入 ztunnel 和 Waypoint Proxy，架构更复杂。&lt;br&gt;• &lt;strong&gt;Istio 生态：&lt;/strong&gt; 继承 Istio 的复杂性。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;双重组件：&lt;/strong&gt; 需要管理 eBPF 和 Envoy。&lt;br&gt;• &lt;strong&gt;L7 复杂性：&lt;/strong&gt; 处理 L7 流量时架构更复杂。&lt;br&gt;• &lt;strong&gt;CNI 集成：&lt;/strong&gt; 简化部分网络配置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;安全性与隔离&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;内核级安全：&lt;/strong&gt; 利用 BPF 虚拟机和 cgroup 隔离，提供高安全保障。&lt;br&gt;• &lt;strong&gt;mTLS 内核支持：&lt;/strong&gt; 内核实现双向 TLS，加密性能高。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;用户空间安全：&lt;/strong&gt; 通过用户空间组件实现安全功能，可能增加攻击面。&lt;br&gt;• &lt;strong&gt;丰富策略支持：&lt;/strong&gt; 继承 Istio 的安全策略和配置能力。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;eBPF 安全特性：&lt;/strong&gt; 利用 eBPF 的安全模型。&lt;br&gt;• &lt;strong&gt;隔离挑战：&lt;/strong&gt; 治理故障隔离需额外考虑。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;兼容性与集成&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;Istio 控制平面：&lt;/strong&gt; 集成 Istio 控制平面，支持 xDS 协议，兼容 Istio API 和 Gateway API。&lt;br&gt;• &lt;strong&gt;Kubernetes 原生：&lt;/strong&gt; 无缝运行在 Kubernetes 上。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;完全兼容：&lt;/strong&gt; 作为 Istio 的一部分，完全兼容 Istio API 和生态系统。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;CNI 角色：&lt;/strong&gt; 作为 Kubernetes 的 CNI 插件，提供网络和服务网格功能。&lt;br&gt;• &lt;strong&gt;网络策略：&lt;/strong&gt; 提供强大的网络策略和安全功能。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;部署与运维考虑&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;内核要求：&lt;/strong&gt; 需修改内核或使用特定版本，注意兼容性。&lt;br&gt;• &lt;strong&gt;性能优先：&lt;/strong&gt; 适合追求极致性能的场景。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;易于迁移：&lt;/strong&gt; 为 Istio 用户提供无 Sidecar 替代方案，便于过渡。&lt;br&gt;• &lt;strong&gt;复杂性管理：&lt;/strong&gt; 需管理新增用户空间组件。&lt;/td&gt;
          &lt;td&gt;• &lt;strong&gt;现有 Cilium 用户：&lt;/strong&gt; 已使用 Cilium 时，集成服务网格功能简单。&lt;br&gt;• &lt;strong&gt;学习曲线：&lt;/strong&gt; 需熟悉 eBPF 与 Envoy 的结合。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kmesh&lt;/strong&gt;：通过将流量治理下沉到内核，实现高性能和低延迟，适用于对性能和资源效率要求极高的应用。但需要特定的内核支持，部署时需考虑兼容性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Istio Ambient Mesh&lt;/strong&gt;：消除了 Sidecar，改进了性能，保留了 Istio 的丰富功能，但用户空间处理可能带来新的复杂性和延迟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cilium Mesh&lt;/strong&gt;：利用 eBPF 提高 L4 性能，但 L7 流量处理依赖 Envoy，可能增加复杂性和延迟。适合已经使用 Cilium 的环境，提供强大的网络策略和安全功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kmesh-的两种运行模式&#34;&gt;Kmesh 的两种运行模式&lt;/h2&gt;
&lt;p&gt;Kmesh 提供两种运行模式，以满足不同的部署需求：&lt;/p&gt;
&lt;h3 id=&#34;内核原生模式&#34;&gt;内核原生模式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;极致性能&lt;/strong&gt;：在 L4 和 L7 流量中实现最低的延迟，无额外的网络跳数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机制&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内核增强&lt;/strong&gt;：使用 eBPF 和内核模块（ko）增强内核。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;伪造的 TCP 连接&lt;/strong&gt;：在内核中利用“伪建链”来管理复杂的应用层流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt;：在客户端发起通信时直接管理流量，消除不必要的上下文切换和数据拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    伪建链
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    Kmesh 采用了一种称为“伪建链”的技术，当收到 downstream 的 TCP 请求时，eBPF 程序首先与 downstream 创建一个“伪 TCP 连接”，而不会立即与 upstream 服务建立实际连接。eBPF 程序在获取到 downstream 发出的 HTTP 消息后，根据消息进行 L7 路由处理，找到目标服务后再与 upstream 建立连接。通过这种方式，Kmesh 将 L7 层的处理下沉到内核中，提高了处理效率。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;延迟降低&lt;/strong&gt;：转发延迟减少超过 60%。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无需用户空间代理&lt;/strong&gt;：整个流量管理在内核内完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;考虑因素&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内核版本要求&lt;/strong&gt;：可能需要特定的内核版本或增强，这可能影响部署的灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双引擎模式&#34;&gt;双引擎模式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;灵活治理&lt;/strong&gt;：在性能和更广泛的兼容性之间取得平衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机制&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内核级拦截&lt;/strong&gt;：使用 eBPF 在内核空间拦截流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waypoint Proxy&lt;/strong&gt;：部署远程的 Waypoint Proxy 来处理复杂的 L7 流量管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;层次分离&lt;/strong&gt;：将 L4 和 L7 的治理在内核空间（eBPF）和用户空间（Waypoint）之间分离。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;延迟降低&lt;/strong&gt;：相比 Istio 的 Ambient Mesh，延迟减少了 &lt;strong&gt;30%&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化的流量拦截&lt;/strong&gt;：内核空间的拦截比用户空间更安全、更简单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;降低采用门槛&lt;/strong&gt;：减少对特定内核版本的依赖，便于用户采用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;与 Ambient Mesh 的比较&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更少的网络跳数&lt;/strong&gt;：Kmesh 对于 L7 连接仅增加一个额外跳数，而 Ambient Mesh 可能增加多达三个。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更简单的架构&lt;/strong&gt;：内核级拦截避免了用户空间拦截机制的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深入了解-kmesh-的技术&#34;&gt;深入了解 Kmesh 的技术&lt;/h2&gt;
&lt;h3 id=&#34;ebpf-和内核增强&#34;&gt;eBPF 和内核增强&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;eBPF（扩展伯克利数据包过滤器）&lt;/strong&gt; 是一种强大的技术，允许安全高效地将自定义代码注入到 Linux 内核。Kmesh 利用 eBPF 来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拦截网络流量&lt;/strong&gt;：将 eBPF 程序附加到网络事件，实现对数据包的实时拦截和操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现负载均衡&lt;/strong&gt;：根据策略将流量导向合适的服务实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行流量加密&lt;/strong&gt;：在内核中处理 mTLS 加解密（开发中，计划 2024 年底支持），降低开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;收集可观测性数据&lt;/strong&gt;：在不影响应用性能的情况下收集指标和遥测数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流量拦截和管理&#34;&gt;流量拦截和管理&lt;/h3&gt;
&lt;p&gt;在内核原生模式中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;伪造的连接&lt;/strong&gt;：Kmesh 在内核中创建伪造的 TCP 连接，避免涉及用户空间代理来管理流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直接的数据包操作&lt;/strong&gt;：在内核级拦截和重定向数据包，消除在用户空间和内核空间之间移动数据包时的上下文切换和数据拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在双引擎模式中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eBPF 拦截&lt;/strong&gt;：eBPF 程序处理初始的流量拦截和基本的 L4 管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waypoint Proxy&lt;/strong&gt;：对于路由、重试和头部操作等高级 L7 功能，流量被转发到按服务或命名空间部署的 Waypoint Proxy。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全和隔离&#34;&gt;安全和隔离&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BPF 虚拟机安全&lt;/strong&gt;：eBPF 在内核中的受限虚拟机中运行，确保注入的代码不会破坏内核稳定性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cgroup 级别隔离&lt;/strong&gt;：在 cgroup 级别应用治理策略，为不同的服务和工作负载提供隔离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mTLS 支持&lt;/strong&gt;：计划在内核中实现双向 TLS，提供零信任安全，而无需用户空间的加密开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性能分析&#34;&gt;性能分析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;测试设置&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基准工具&lt;/strong&gt;：使用 &lt;a href=&#34;https://github.com/fortio/fortio&#34; title=&#34;Fortio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fortio&lt;/a&gt; 生成负载并测量延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比较对象&lt;/strong&gt;：在四种配置下测量性能：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基线&lt;/strong&gt;：没有任何服务网格的直接通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio Sidecar&lt;/strong&gt;：传统的 Sidecar 部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio Ambient Mesh&lt;/strong&gt;：使用 ztunnel 和 Waypoint 的无 Sidecar 部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kmesh&lt;/strong&gt;：包括内核原生模式和双引擎模式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;延迟&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kmesh 内核原生模式&lt;/strong&gt;：相比 Istio Sidecar，转发延迟降低了超过 &lt;strong&gt;60%&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kmesh 双引擎模式&lt;/strong&gt;：相比 Istio Ambient Mesh，延迟减少了 &lt;strong&gt;30%&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU 和内存&lt;/strong&gt;：Kmesh 将资源开销降低了超过 &lt;strong&gt;70%&lt;/strong&gt;，因为无需 Sidecar 代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用启动时间&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;提高了 &lt;strong&gt;40%&lt;/strong&gt;，因为应用不再需要等待 Sidecar 初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解读&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kmesh 接近基线性能，使服务网格的开销可以忽略不计。&lt;/li&gt;
&lt;li&gt;消除上下文切换和数据拷贝对性能提升贡献显著。&lt;/li&gt;
&lt;li&gt;内核原生方法确保即使服务数量增加，性能也能保持一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;云原生集成与兼容性&#34;&gt;云原生集成与兼容性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 原生&lt;/strong&gt;：Kmesh 无缝运行在 Kubernetes 上，管理 Pod 的进出流量，无需更改应用代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制平面集成&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xDS 协议支持&lt;/strong&gt;：从 Istiod 订阅 xDS 配置，确保与 Istio 控制平面兼容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio API 兼容性&lt;/strong&gt;：支持现有的 Istio API，允许用户使用熟悉的配置和策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gateway API 支持&lt;/strong&gt;：兼容 Gateway API，支持更灵活和丰富的流量管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可观测性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;集成 Prometheus 进行指标收集。&lt;/li&gt;
&lt;li&gt;利用 eBPF 高效地收集数据，不影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全策略&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持现有的 Istio 安全策略，包括认证和授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Kmesh 通过将流量管理移入内核，代表了服务网格技术的范式转变。利用 eBPF 和内核增强，它解决了传统 Sidecar 架构中延迟和资源开销的关键问题。Kmesh 为现代云原生应用提供了灵活、高性能的解决方案，特别适用于需要低延迟和高吞吐量的场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要收获&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：通过消除不必要的开销，实现接近基线的性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源效率&lt;/strong&gt;：降低 CPU 和内存消耗，提升部署密度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性&lt;/strong&gt;：提供多种运行模式，适应不同的部署场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：通过内核级的执行和隔离机制增强安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：与包括 Kubernetes 和 Istio 在内的现有云原生生态系统无缝集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhaohuabing.com/post/2023-09-26-istiocon-china/&#34; title=&#34;IstioCon 2023 要点总结&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IstioCon 2023 要点总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kccncossaidevchn2024.sched.com/event/1eYWy/a-new-choice-for-istio-data-plane-architectural-innovation-for-a-brand-new-performance-experience-istioxiao-zha-sao-daepxia-mo-zha-zhonghu-xu-huawei?iframe=no&#34; title=&#34;Istio 数据平面的新选择：全新性能体验的架构创新&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 数据平面的新选择：全新性能体验的架构创新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>深入解析服务网格的四种数据平面部署模式：性能、安全性与成本分析</title>
      <link>https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/</link>
      <pubDate>Tue, 10 Sep 2024 11:09:40 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/</guid>
      <description>
        
        
        &lt;p&gt;本文将向你介绍 Istio 服务网格的四种平面部署模式，通过分析它们的优缺点，根据他们的性能、可靠性和安全性给出选择建议。&lt;/p&gt;
&lt;h2 id=&#34;什么是服务网格&#34;&gt;什么是服务网格？&lt;/h2&gt;
&lt;p&gt;服务网格是一种基础设施层，通常使用应用代理来实现各种功能。以 Istio 为例，它通过应用代理让用户能够将应用感知的流量管理、强大的可观测性和稳健的安全能力编程到网络中。Istio 确保云原生和分布式系统具有弹性，使现代企业能够在不同平台上维护其工作负载，同时保持连接和受保护。它的功能包括零信任安全、策略管理和访问控制等安全和治理控制，以及金丝雀部署、A/B 测试、负载均衡和故障恢复等网络功能，还能提供对整个网络流量的可观测性。Istio 不受单一集群、网络或运行时的限制，可以将在 Kubernetes 或虚拟机上运行的服务、多云、混合或本地的服务包含在单个网格中。其设计可扩展，并得到广泛生态系统的支持。&lt;/p&gt;
&lt;p&gt;服务网格的架构分为控制平面和数据平面，以 Istio 为例，&lt;code&gt;istiod&lt;/code&gt; 是它的控制平面，而数据平面有两种部署模式，用户可以选择 sidecar 或 ambient 模式。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/service-mesh.svg&#34; data-img=&#34;/blog/service-mesh-data-plane-deployment-modes/service-mesh.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 服务网格的架构图（来源 &amp;lt;a href=&amp;#34;https://istio.io/latest/about/service-mesh/&amp;#34; title=&amp;#34;istio.io&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener&amp;#34;&amp;gt;istio.io&amp;lt;/a&amp;gt;）&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 服务网格的架构图（来源 &lt;a href=&#34;https://istio.io/latest/about/service-mesh/&#34; title=&#34;istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio.io&lt;/a&gt;）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;实际上服务网格的数据平面的部署模式不止这两种，加上 Istio 支持的 &lt;a href=&#34;https://istio.io/latest/blog/2021/proxyless-grpc/&#34; title=&#34;gRPC 无 sidecar 的服务网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC 无 sidecar 的服务网格&lt;/a&gt;，以及 &lt;a href=&#34;https://cilium.io/use-cases/service-mesh/&#34; title=&#34;Cilium service mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium service mesh&lt;/a&gt;，一共有四种部署模式。&lt;/p&gt;
&lt;h2 id=&#34;数据平面部署模式&#34;&gt;数据平面部署模式&lt;/h2&gt;
&lt;p&gt;下表格从多个维度对服务网格数据平面的部署模式进行了比较。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;数据平面模式&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;平台安全性&lt;/strong&gt; 威胁评估、风险&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;资源效率&lt;/strong&gt; – 基础设施/资源消耗等&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;可管理性&lt;/strong&gt; – 升级、漏洞等&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;性能&lt;/strong&gt; – 延迟等&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Sidecar模式&lt;/strong&gt;：每个服务实例的L4和L7代理&lt;/td&gt;
          &lt;td&gt;高安全性，因为每个服务实例都有独立的代理，减少了攻击面。风险管理取决于控制平面配置。&lt;/td&gt;
          &lt;td&gt;较高的资源消耗，因为每个实例需要独立的代理。&lt;/td&gt;
          &lt;td&gt;需要集中管理和配置，升级相对复杂，但可以通过控制平面简化。&lt;/td&gt;
          &lt;td&gt;请求需要通过代理转发，可能增加延迟。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Ambient模式&lt;/strong&gt;：共享L4 – L7每个服务模型&lt;/td&gt;
          &lt;td&gt;通过ztunnel进行本地路由设计的安全性。然而，共享代理可能会带来风险，其整体安全成熟度仍在发展中。&lt;/td&gt;
          &lt;td&gt;效率较高，因为多个服务共享相同的代理。&lt;/td&gt;
          &lt;td&gt;管理相对简单，但可能因共享代理而面临漏洞。&lt;/td&gt;
          &lt;td&gt;本地路由性能良好，但在waypoint代理下可能会产生跨AZ的成本。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Cilium Mesh模式&lt;/strong&gt;：共享L4和L7模型&lt;/td&gt;
          &lt;td&gt;中等安全性，专注于eBPF和细粒度访问控制。然而，身份和信任模型方面存在已知问题。&lt;/td&gt;
          &lt;td&gt;内核级处理提高效率，减少基础设施开销。&lt;/td&gt;
          &lt;td&gt;管理更复杂，需要处理多个服务的配置。&lt;/td&gt;
          &lt;td&gt;性能可变；某些场景可能会引入显著的延迟。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;gRPC模式&lt;/strong&gt;：L4和L7集成在应用模型中&lt;/td&gt;
          &lt;td&gt;虽然gRPC将代理功能集成在应用程序中，理论上减少了攻击面，但应用程序的复杂性和多样性实际上可能扩大它。gRPC模式的安全性依赖于具体的用例，需要对潜在威胁和攻击面进行仔细评估。&lt;/td&gt;
          &lt;td&gt;更高的效率，因为代理在与应用相同的进程中实现。&lt;/td&gt;
          &lt;td&gt;管理复杂，需要定期更新和维护应用层代理。&lt;/td&gt;
          &lt;td&gt;性能优越，延迟低，适合实时应用。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    服务网格的四种部署模式对比
    
&lt;/figcaption&gt;

&lt;p&gt;你可以从下图中更直观地看到这四种模式在成本和安全性方面的比较：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/istio-data-plane-deployment-modes.svg&#34; data-img=&#34;/blog/service-mesh-data-plane-deployment-modes/istio-data-plane-deployment-modes.svg&#34; alt=&#34;image&#34; data-caption=&#34;服务网格部署模式对比&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;服务网格部署模式对比&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下图说明了服务网格数据平面的不同部署模式中代理的潜在位置。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/overview.svg&#34; data-img=&#34;/blog/service-mesh-data-plane-deployment-modes/overview.svg&#34; alt=&#34;image&#34; data-caption=&#34;服务网格数据平面的不同部署模式中的代理位置&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;服务网格数据平面的不同部署模式中的代理位置&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidecar 模式&lt;/strong&gt;：代理与应用程序容器位于同一个 Pod 中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient 模式&lt;/strong&gt;：L4 代理与应用程序容器位于同一个节点上，L7 代理不一定跟应用程序容器在同一个节点上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium 模式&lt;/strong&gt;：L4 和 L7 代理作为一个整体与应用程序容器在同一个节点上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC 模式&lt;/strong&gt;：gRPC 框架集成到应用程序中，共同部署在一个容器中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sidecar-模式每个服务实例一个-l4-和-l7-的代理&#34;&gt;Sidecar 模式：每个服务实例一个 L4 和 L7 的代理&lt;/h2&gt;
&lt;p&gt;下面展示的是 sidecar 模式中 Application 1 访问同节点上的 Application 2 及跨节点上的 Application 3 的通信路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/sidecar-mode.svg&#34; data-img=&#34;/blog/service-mesh-data-plane-deployment-modes/sidecar-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;Sidecar 模式：每个服务实例一个 L4 和 L7 代理&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Sidecar 模式：每个服务实例一个 L4 和 L7 代理&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这是最常见的服务网格部署模式，也是 &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 服务网格起初支持的模式。每个服务实例旁边部署一个代理（如 &lt;a href=&#34;https://envoyproxy.io&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;），该代理处理进出该服务的所有网络通信，包括 L4 和 L7 网络通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：安全性高，因为每个服务实例都是隔离的，减少了潜在的攻击面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：资源消耗较高，因为每个服务实例都需要单独的代理，增加了基础设施成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度&lt;/strong&gt;：Istio Sidecar 模式的成熟度已经达到生产级别，它们经过广泛测试并准备好在实际环境中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ambient-模式节点共享-l4-代理服务账户共享-l7-代理&#34;&gt;Ambient 模式：节点共享 L4 代理，服务账户共享 L7 代理&lt;/h2&gt;
&lt;p&gt;下面展示的是 ambient 模式中 Application 1 访问同节点上的 Application 2 及跨节点上的 Application 3 的通信路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/ambient-mode.svg&#34; data-img=&#34;/blog/service-mesh-data-plane-deployment-modes/ambient-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;Ambient 模式：节点共享 L4 代理，服务账户共享 L7 代理&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ambient 模式：节点共享 L4 代理，服务账户共享 L7 代理&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在这种模式下，每个节点上的共享L4代理为同一物理主机上的所有服务实例提供服务，而每个服务账户都有一个专用的L7代理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：成本较低，因为多个服务共享同一个代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：尽管ztunnel（Istio网格中）组件是为安全性设计的，共享代理可能会带来风险。此模型的安全成熟度仍在发展中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度&lt;/strong&gt;：Istio的Ambient模式目前处于beta阶段，没有大规模的生产级最佳实践，也不支持多集群。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cilium-mesh-模式共享的-l4-和-l7-代理&#34;&gt;Cilium mesh 模式：共享的 L4 和 L7 代理&lt;/h2&gt;
&lt;p&gt;下面展示的是 Cilium mesh 模式中 Application 1 访问同节点上的 Application 2 及跨节点上的 Application 3 的通信路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/cilium-mesh-mode.svg&#34; data-img=&#34;/blog/service-mesh-data-plane-deployment-modes/cilium-mesh-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;Cilium mesh 模式：共享的 L4 和 L7 代理&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cilium mesh 模式：共享的 L4 和 L7 代理&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这种模式介于完全独立和完全共享之间，每个节点都有一个共享的L7代理。然而，身份和信任模型方面存在已知问题。使用eBPF的Cilium服务网格允许通过内核程序实现无需代理的网络策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：在特定场景下，内核级效率可以降低基础设施成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：管理更复杂，某些场景可能会导致延迟增加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度&lt;/strong&gt;：Cilium Mesh通过eBPF直接管理L4流量，并在每个节点上配置Envoy代理以通过CRD（如CiliumEnvoyConfig）控制L7流量。然而，由于身份模型不一致，其安全性令人担忧。该&lt;a href=&#34;https://github.com/cilium/proxy&#34; title=&#34;代理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;代理&lt;/a&gt;是经过定制过的，它具有最少的 Envoy 扩展和 Cilium 策略执行过滤器。因此，该 Cilium mesh 可能无法支持 Envoy 代理的全部功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：该模式并非 Istio 的数据平面。&lt;/p&gt;
&lt;h2 id=&#34;grpc-模式l4-和-l7-代理集成到应用程序内&#34;&gt;gRPC 模式：L4 和 L7 代理集成到应用程序内&lt;/h2&gt;
&lt;p&gt;在gRPC模式中，没有部署外部代理；而是通过RPC框架将代理功能直接集成到应用程序中，导致对应用程序的显著侵入。服务网格控制平面使用一组称为xDS API的发现API来动态配置应用程序。应用程序中的gRPC客户端库提供对xDS API的广泛支持。利用这种能力，服务网格控制平面可以在服务容器内的这个库中直接编程L4和L7代理功能。&lt;/p&gt;
&lt;p&gt;下图展示了在 Istio 的 gRPC 模式中，控制平面如何与应用程序通信。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/service-mesh-data-plane-deployment-modes/grpc-mode.svg&#34; data-img=&#34;/blog/service-mesh-data-plane-deployment-modes/grpc-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;gRPC 模式：L4 和 L7 代理集成到应用程序内&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;gRPC 模式：L4 和 L7 代理集成到应用程序内&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在这种模式下，当gRPC服务与控制平面通信时，不需要传统的Sidecar代理，而是使用特定的代理进行初始化和与控制平面的通信。此设计减少了资源消耗和部署复杂性，同时仍能实现服务发现、流量管理等功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：高性能，由于代理与应用程序紧密集成，减少了网络跳跃和额外的开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：高复杂性，需要在应用程序内部实现复杂的网络处理功能，这可能增加开发成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性考虑&lt;/strong&gt;：这种模式的安全性存在争议。虽然将代理功能集成在应用程序中理论上减少了外部攻击面，但应用程序的多样性和复杂性可能会扩大整体攻击面。因此，在考虑gRPC模式的安全性时，必须仔细分析其具体用例中的安全威胁模型和攻击风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度&lt;/strong&gt;：Istio的gRPC模式仍处于实验阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何选择&#34;&gt;如何选择？&lt;/h2&gt;
&lt;p&gt;如前所述，选择服务网格数据平面部署模式的决定因素有多个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成熟度&lt;/li&gt;
&lt;li&gt;企业的安全需求&lt;/li&gt;
&lt;li&gt;资源限制&lt;/li&gt;
&lt;li&gt;性能要求&lt;/li&gt;
&lt;li&gt;网络开销&lt;/li&gt;
&lt;li&gt;管理复杂性的容忍度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成熟度&#34;&gt;成熟度&lt;/h3&gt;
&lt;p&gt;在考虑服务网格数据平面部署模式时，成熟度是一个关键因素。每种模式的成熟度都会影响其在生产环境中的可靠性和支持程度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidecar模式&lt;/strong&gt;：这是最成熟的服务网格部署模式，广泛应用于生产环境，并得到良好支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient模式&lt;/strong&gt;：尽管该模式提供了一些成本和性能优势，但它仍处于早期阶段，可能缺乏成熟的最佳实践和广泛的生态系统支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium Mesh模式&lt;/strong&gt;：作为一个相对较新的选择，它在使用eBPF的场景中提供了独特的技术优势。然而，其安全模型和身份管理的担忧表明，它可能不像其他模式那样成熟或可靠。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC模式&lt;/strong&gt;：尽管性能出色，但这种模式的复杂性和侵入性意味着它可能需要更多的定制开发，目前仍处于实验阶段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全需求&#34;&gt;安全需求&lt;/h3&gt;
&lt;p&gt;如果您的业务有较高的安全需求，如金融或医疗行业，那么&lt;strong&gt;Sidecar模式&lt;/strong&gt;可能是最佳选择。这种模式通过确保每个服务实例都有自己独立的代理，从而最大限度地实现服务隔离。对于那些探索较新模式（如&lt;strong&gt;Ambient模式&lt;/strong&gt;）的用户来说，必须了解虽然ztunnel旨在实现安全的本地路由，但该模式的整体安全策略仍在发展中。&lt;/p&gt;
&lt;h3 id=&#34;资源限制&#34;&gt;资源限制&lt;/h3&gt;
&lt;p&gt;在资源受限的环境中，为每个服务实例部署一个单独的代理可能不切实际。在这种情况下，可以考虑&lt;strong&gt;gRPC模式&lt;/strong&gt;或&lt;strong&gt;Ambient模式&lt;/strong&gt;。&lt;strong&gt;gRPC模式&lt;/strong&gt;特别适合已经广泛使用gRPC且愿意在应用程序内部处理复杂网络功能的组织。另一方面，&lt;strong&gt;Ambient模式&lt;/strong&gt;通过共享代理来减少资源消耗。&lt;/p&gt;
&lt;h3 id=&#34;性能要求&#34;&gt;性能要求&lt;/h3&gt;
&lt;p&gt;对于需要高性能和低延迟的应用程序，&lt;strong&gt;gRPC模式&lt;/strong&gt;提供了最佳性能，因为它消除了传统代理引入的额外网络跳跃。然而，值得注意的是，gRPC模式仍处于实验阶段，可能不支持Istio的所有功能。请根据您的服务网格功能需求进行考虑。&lt;/p&gt;
&lt;h3 id=&#34;网络开销&#34;&gt;网络开销&lt;/h3&gt;
&lt;p&gt;每种数据平面模式对网络开销都有不同的影响。&lt;strong&gt;Sidecar模式&lt;/strong&gt;通过本地化路由减少了跨区域流量，但增加了网络跳跃，增加了延迟和计算使用。&lt;strong&gt;Ambient模式&lt;/strong&gt;使用ztunnel进行本地路由，但在waypoint代理下可能会产生跨AZ的成本。&lt;strong&gt;Cilium模式&lt;/strong&gt;将代理放置在与应用程序相同的节点上，可能减少节点间的流量，但可能引入更多的延迟。&lt;strong&gt;gRPC模式&lt;/strong&gt;将RPC框架集成到应用程序中，最小化网络跳跃和开销，适用于高性能、低延迟的需求。&lt;/p&gt;
&lt;h3 id=&#34;对管理复杂性的容忍度&#34;&gt;对管理复杂性的容忍度&lt;/h3&gt;
&lt;p&gt;选择服务网格数据平面模式时，管理复杂性也是一个重要的考虑因素。&lt;strong&gt;Sidecar模式&lt;/strong&gt;和&lt;strong&gt;gRPC模式&lt;/strong&gt;可能需要更复杂的配置和维护，而在某些部署环境中，&lt;strong&gt;Ambient模式&lt;/strong&gt;可能提供更简化的管理体验。&lt;strong&gt;Cilium模式&lt;/strong&gt;由于依赖于eBPF和多个配置点，可能需要更复杂的管理。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;选择正确的服务网格数据平面部署模式取决于多个特定因素，包括成熟度、安全性、资源限制、性能和管理复杂性。以下是一个快速指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidecar模式&lt;/strong&gt;：最适合高安全需求，提供最大的隔离性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC模式&lt;/strong&gt;：适用于高性能需求且已在使用gRPC的环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient模式&lt;/strong&gt;：适合成本效益和较低隔离需求，但安全模型正在演变中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium Mesh模式&lt;/strong&gt;：可能适用于利用eBPF技术的基础设施，但需考虑安全性和管理复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最佳选择将与您的应用程序需求、安全策略和技术熟悉度相一致。理解每种模式的优势和局限性，以做出平衡收益、风险和成本的明智决策。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csrc.nist.gov/pubs/sp/800/233/ipd&#34; title=&#34;云原生应用的服务网格代理模型&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生应用的服务网格代理模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>服务网格架构：Sidecar vs. Sidecarless，谁才是未来？</title>
      <link>https://jimmysong.io/blog/service-mesh-sidecar-vs-sidecarless-debate/</link>
      <pubDate>Mon, 09 Sep 2024 11:45:58 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/service-mesh-sidecar-vs-sidecarless-debate/</guid>
      <description>
        
        
        &lt;p&gt;服务网格已经成为现代云原生应用架构中至关重要的一部分，帮助团队在大规模分布式系统中管理微服务通信、提高安全性并优化性能。然而，随着技术的不断演进，关于服务网格架构的最佳实践出现了激烈的争论，尤其是关于 sidecar 与 sidecarless 模式的选择问题。这场争论的核心在于如何在性能、资源利用、安全性和操作复杂性之间取得最佳平衡。近年来，Cilium 引入了无 sidecar 架构的 eBPF 技术，而 Istio 也推出了 Ambient 模式，结合了传统 sidecar 与无 sidecar 的优点。与此同时，Linkerd 则坚守 sidecar 架构，并对新兴的无 sidecar 方法持保守态度。这篇文章将深入探讨这些服务网格架构的主要观点和争议，并分析每种方法的优势与挑战。&lt;/p&gt;
&lt;h2 id=&#34;关于服务网格有无-sidecar-的争论&#34;&gt;关于服务网格有无 sidecar 的争论&lt;/h2&gt;
&lt;p&gt;关于服务网格的 sidecar 与无 sidecar 的争论是随着 Cilium 的推出和各大服务网格技术的演变而逐渐加剧的，尤其是在 2021 年之后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cilium Service Mesh 的推出（2021 年 12 月）&lt;/strong&gt;  ：Cilium 通过 eBPF 技术引入了无 sidecar 的服务网格架构，开始引发对传统 sidecar 模式的讨论。这一概念的提出标志着无 sidecar 架构的兴起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linkerd 与 Istio 的反应（2021 年 12 月至 2022 年初）&lt;/strong&gt; ：Linkerd 的创始人 William Morgan 及其团队对 Cilium 的无 sidecar 方法表示担忧，认为这种方法可能会带来安全和性能上的问题。这一讨论逐渐演变为对 sidecar 与无 sidecar 架构的更广泛争辩。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Istio 的 Ambient 概念（2022 年 5 月）&lt;/strong&gt; ：Istio 提出了 Ambient Mesh，尝试结合 sidecar 和主机级代理的优势，这进一步加剧了各方对服务网格架构的讨论。此时，业界对不同服务网格架构的看法开始分化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;专家观点的发表（2021 年 12 月至 2023 年）&lt;/strong&gt;  ：多位行业专家如 Thomas Graf 和 William Morgan 等在不同场合发表了对 sidecar 与无 sidecar 架构的看法，形成了更为系统的争论。这些观点在多个会议和文章中被广泛讨论，推动了对服务网格架构的深入理解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;各方观点&#34;&gt;各方观点&lt;/h2&gt;
&lt;p&gt;下表摘录了各服务网格提供商及用户的公开观点。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;人物&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;职位/公司&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;观点&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Andrey Rybka&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Bloomberg&lt;/td&gt;
          &lt;td&gt;倾向于选择成熟度更高的 Istio，特别是在有 Google 等大公司支持的情况下。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Ara Pulido&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Datadog 开发者关系专家&lt;/td&gt;
          &lt;td&gt;认为 eBPF 工具（如 Cilium）是 Kubernetes 网络扩展问题的解决方案，使用 Cilium 可以完全替代 kube-proxy，实现更细粒度的容器安全特性；移除 kube-proxy 后，操作简化，性能提升。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Dale Ragan&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;SAP Concur Technologies 首席软件设计工程师&lt;/td&gt;
          &lt;td&gt;认为 eBPF 在安全方面提供了更好的优势，可同时应用于整个集群和各个服务；正在使用 Cilium 替代 Flannel 作为其生产环境中的容器网络接口（CNI）插件，并测试 Isovalent 的专有 SecOps 插件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Dan Wendlandt&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Isovalent CEO&lt;/td&gt;
          &lt;td&gt;认为 eBPF 和服务网格是互补的技术，eBPF 可作为服务网格的基础，为服务网格代理（如 Envoy）提供高效的数据进出服务。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;David Ortiz&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Constant Contact 首席软件工程师&lt;/td&gt;
          &lt;td&gt;对 Istio 的 Ambient Mesh 非常感兴趣，认为其显著简化了 Istio 的操作流程，尤其是在升级方面，计划尽快采用这一技术。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Filip Nikolic&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;PostFinance&lt;/td&gt;
          &lt;td&gt;认为 eBPF 基础的无 sidecar 服务网格具有更高的网络性能和效率，并且安全实践也在不断进化。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Greg Otto&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Comcast 云服务执行董事&lt;/td&gt;
          &lt;td&gt;对 Istio Ambient Mesh 感兴趣，计划在其成熟后进行评估；希望能够分别扩展和服务第 7 层（L7）和第 4 层（L4）功能，认为减少不必要的 L7 过滤可以减少安全暴露面和漏洞风险。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;John Mitchell&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;独立数字化转型顾问&lt;/td&gt;
          &lt;td&gt;认为 eBPF 正经历一个炒作周期，但它确实有潜力为 Kubernetes 提供高级网络安全特性，而无需改变应用程序代码。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Kasper Nissen&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Lunar 的首席平台架构师&lt;/td&gt;
          &lt;td&gt;支持 sidecar 架构，认为它简单易用，并与其他容器技术相同；在全面部署服务网格后，资源消耗增加不多但功能增多；指出 sidecar 同步问题源于 Kubernetes 网络层的问题，建议在 Kubernetes 层面进行修复。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Louis Ryan&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Solo.io CTO&lt;/td&gt;
          &lt;td&gt;强调 Istio 1.23 版引入的 Ambient Mesh 的优势，包括减少 sidecar 的使用，简化架构，提高性能，降低复杂性，并增强了灵活性与可扩展性。他认为，Ambient Mesh 能够帮助团队更轻松地管理微服务架构。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Thomas Graf&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Isovalent CTO&lt;/td&gt;
          &lt;td&gt;主张通过 eBPF 和 Cilium 提供无边车的服务网格，优化 mTLS 认证，消除 sidecar 的使用，从而提高性能和安全性。认为分离认证握手和数据传输的模式能够实现更高效、更灵活的服务间认证，同时减少管理复杂性，并提供对多种网络协议的支持。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;William Morgan&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Linkerd 创始人兼 Buoyant CEO&lt;/td&gt;
          &lt;td&gt;强烈批评无 sidecar 的 eBPF 方法，认为 sidecar 提供了更好的安全隔离和性能预测性，指出 sidecarless 架构可能重蹈 Linkerd 1 的覆辙。他认为，eBPF 和 sidecar 不是对立的，eBPF 可以用于网络优化，但不应替代 sidecar。主张继续使用更轻量的 sidecar 代理。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Zachary Butcher&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Tetrate 创始工程师&lt;/td&gt;
          &lt;td&gt;对 Ambient Mesh 持审慎乐观态度，认为它有助于降低服务网格的采用难度，但当前性能表现较差、功能有限，距离生产就绪还有很长的路要走。他建议用户暂时不要在生产环境中使用 Ambient Mesh，直到其成熟度提高。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    关于服务网格技术选型的公开观点
    
&lt;/figcaption&gt;

&lt;h2 id=&#34;个人观点&#34;&gt;个人观点&lt;/h2&gt;
&lt;p&gt;近年来，我有幸见证并参与了许多关于服务网格架构选择的讨论和实践。我认为服务网格选择不应仅仅基于技术特性的比较，更应考虑到团队的具体需求、现有技术栈的兼容性以及未来的扩展性。&lt;/p&gt;
&lt;p&gt;在 sidecar 与 sidecarless 的选择问题上，我的看法是两者各有千秋。Sidecar 模型虽然在某些情况下可能会带来资源占用和管理复杂性的增加，但它提供了更细粒度的流量控制和安全策略实施，这对于需要高度精细化管理的企业环境是非常宝贵的。与此同时，sidecarless 模型，尤其是通过 eBPF 技术实现的，为服务网格带来了前所未有的性能优化和资源利用率提升，它对于构建高效率的大规模服务网格同样具有重要价值。&lt;/p&gt;
&lt;p&gt;因此，我的建议是，企业在选择服务网格架构时，应该从自身的业务需求出发，综合考虑安全性、性能、成本以及团队的运维能力，选择最适合自己的服务网格解决方案。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总结下目前关于这三个流行的服务网格项目的主流看法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Linkerd&lt;/strong&gt;：强调 sidecar 的安全隔离和性能稳定性，对 eBPF 无 sidecar 模式持批评态度，认为其复杂性和安全风险增加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio&lt;/strong&gt;：引入 Ambient Mesh，部分采用无 sidecar 方法，以降低复杂性和提高性能，但仍保留 sidecar 的部分功能，体现出对现有 sidecar 架构的保留与创新。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium&lt;/strong&gt;：主张通过 eBPF 无 sidecar 模式来优化网络性能和安全性，简化操作，同时保持对多种协议的支持，推动服务网格功能集成到 Linux 内核中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同的观点反映了各自对服务网格架构设计的偏好与关注点，不同企业应根据自身需求和技术背景选择合适的服务网格方案。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.techtarget.com/searchitoperations/news/365535362/Sidecarless-eBPF-service-mesh-sparks-debate&#34; title=&#34;Sidecarless eBPF service mesh sparks debate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecarless eBPF service mesh sparks debate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/ebpf-or-not-sidecars-are-the-future-of-the-service-mesh/&#34; title=&#34;eBPF or not: Sidecars are the future of the service mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF or not: Sidecars are the future of the service mesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2021-12-08-ebpf-servicemesh/&#34; title=&#34;eBPF Service Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF Service Mesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.techtarget.com/searchitoperations/news/252483517/Linux-kernel-utility-could-solve-Kubernetes-networking-woes&#34; title=&#34;Linux kernel utility could solve Kubernetes networking woes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux kernel utility could solve Kubernetes networking woes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2022-05-03-servicemesh-security/&#34; title=&#34;Service Mesh Security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh Security&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/istio-1-23-drops-the-sidecars-for-a-simpler-ambient-mesh&#34; title=&#34;Istio 1.23 drops the sidecars for a simpler ambient mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.23 drops the sidecars for a simpler ambient mesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tetrate.io/blog/ambient-mesh-what-you-need-to-know-about-this-experimental-new-deployment-model-for-istio/&#34; title=&#34;Ambient Mesh: What you need to know about this experimental new deployment model for Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient Mesh: What you need to know about this experimental new deployment model for Istio&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.techtarget.com/searchitoperations/news/252526651/Sidecarless-service-mesh-fad-or-the-future&#34; title=&#34;Sidecarless service mesh: fad or the future?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecarless service mesh: fad or the future?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>香港——内地的一面的镜子</title>
      <link>https://jimmysong.io/blog/hong-kong-trip/</link>
      <pubDate>Fri, 06 Sep 2024 19:14:52 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/hong-kong-trip/</guid>
      <description>
        
        
        &lt;p&gt;上个月，因为参加 KubeCon China，我第一次前往香港，这让我有机会近距离审视这颗“东方明珠”。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/jianshazui.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/jianshazui.webp&#34; alt=&#34;image&#34; data-caption=&#34;从尖沙咀眺望香港岛&#34;&gt;
  
  
  &lt;figcaption&gt;从尖沙咀眺望香港岛&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我不记得之前在哪里看到一个说法，说是“香港是中国内地的一面镜子”。香港因其特殊的历史背景、经济发展轨迹以及在回归后的一系列表现等，许多人都在分析研究过程中会将香港的发展情况、社会治理经验教训等与内地进行关联和比较，认为其在某些方面可以为内地提供参考借鉴，就如同镜子一样反映出一些现象和问题的不同侧面及解决路径的可能性等。比如一些研究区域发展和社会治理的专家学者在相关论述中可能就会涉及到类似的观点表达。&lt;/p&gt;
&lt;h2 id=&#34;香港与内地的不同&#34;&gt;香港与内地的不同&lt;/h2&gt;
&lt;p&gt;香港与内地存在着诸多不同，这些不同不光是表面上的：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;香港&lt;/th&gt;
          &lt;th&gt;内地&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;政治制度&lt;/td&gt;
          &lt;td&gt;资本主义制度，行政长官是特别行政区首长。&lt;/td&gt;
          &lt;td&gt;社会主义制度，人民代表大会制度。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;法律体系&lt;/td&gt;
          &lt;td&gt;英美法系，判例法重要。&lt;/td&gt;
          &lt;td&gt;大陆法系，以成文法为主。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;经济体制&lt;/td&gt;
          &lt;td&gt;自由市场经济，服务业和金融为主。&lt;/td&gt;
          &lt;td&gt;社会主义市场经济，公有制为主体，多种所有制发展。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;文化方面&lt;/td&gt;
          &lt;td&gt;中西文化交融，保留大量中华传统文化。&lt;/td&gt;
          &lt;td&gt;以中华文化为主，地域文化多样。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;教育体系&lt;/td&gt;
          &lt;td&gt;推行“三三四”学制，多语言教学，注重素质教育。&lt;/td&gt;
          &lt;td&gt;国家指导，地方负责，应试教育为主，统一教材。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;医疗体系&lt;/td&gt;
          &lt;td&gt;公立私立并存，谨慎用药，社区医院为主。&lt;/td&gt;
          &lt;td&gt;医疗体系多元，大医院资源紧张，用药依据病情。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;税收制度&lt;/td&gt;
          &lt;td&gt;地域来源征税，税种少，税率低。&lt;/td&gt;
          &lt;td&gt;居民身份征税，税种多，税负较高。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;养老保障&lt;/td&gt;
          &lt;td&gt;强积金制度，雇主和雇员共同供款。&lt;/td&gt;
          &lt;td&gt;职工和居民基本养老保险，缴费比例不同。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;语言使用&lt;/td&gt;
          &lt;td&gt;粤语为主，英语广泛使用。&lt;/td&gt;
          &lt;td&gt;普通话为主，各地方言众多。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;文字形式&lt;/td&gt;
          &lt;td&gt;使用繁体中文。&lt;/td&gt;
          &lt;td&gt;使用简体中文。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;生活习惯&lt;/td&gt;
          &lt;td&gt;饮食清淡，煲汤文化，部分西方生活习惯。&lt;/td&gt;
          &lt;td&gt;饮食丰富多样，生活习惯因地域文化不同。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;消费观念&lt;/td&gt;
          &lt;td&gt;消费多元化，注重品质，高端品牌接受度高。&lt;/td&gt;
          &lt;td&gt;消费观念多样化，与经济水平有关。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;交通规则&lt;/td&gt;
          &lt;td&gt;靠左行驶，驾驶位在右侧。&lt;/td&gt;
          &lt;td&gt;靠右行驶，驾驶位在左侧。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;住房情况&lt;/td&gt;
          &lt;td&gt;土地少，房价高，公屋制度完善。&lt;/td&gt;
          &lt;td&gt;住房类型多样，房价差异大。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;电影分级&lt;/td&gt;
          &lt;td&gt;有明确的电影分级制度。&lt;/td&gt;
          &lt;td&gt;无明确电影分级，审查严格。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;新闻出版审查&lt;/td&gt;
          &lt;td&gt;新闻出版较自由，但有监管。&lt;/td&gt;
          &lt;td&gt;严格的新闻出版审查制度。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;网络开放度&lt;/td&gt;
          &lt;td&gt;互联网相对开放，全球大多数网站可访问。&lt;/td&gt;
          &lt;td&gt;互联网监管严格，部分国外网站被屏蔽。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;护照含金量&lt;/td&gt;
          &lt;td&gt;可免签或落地签前往约 170 个国家和地区。&lt;/td&gt;
          &lt;td&gt;可免签或落地签前往约 80 个国家和地区。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;计量单位使用&lt;/td&gt;
          &lt;td&gt;使用英制和公制单位。&lt;/td&gt;
          &lt;td&gt;主要使用公制单位。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;电压和插座类型&lt;/td&gt;
          &lt;td&gt;220V，英式三插（G 型）。&lt;/td&gt;
          &lt;td&gt;220V，双孔和三孔插座（A 型、I 型）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;手机支付普及度&lt;/td&gt;
          &lt;td&gt;现金和信用卡普及，八达通卡使用广泛。&lt;/td&gt;
          &lt;td&gt;手机支付非常普及，微信支付和支付宝常用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;购物和零售模式&lt;/td&gt;
          &lt;td&gt;国际品牌与本地品牌并存，夜市和街边小店常见。&lt;/td&gt;
          &lt;td&gt;大型购物中心、超市、夜市、电商平台多样。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;社交习惯&lt;/td&gt;
          &lt;td&gt;英语使用普遍，西方社交礼仪。&lt;/td&gt;
          &lt;td&gt;普通话为主，传统社交礼仪。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;宗教信仰&lt;/td&gt;
          &lt;td&gt;多元宗教环境，宗教自由。&lt;/td&gt;
          &lt;td&gt;宗教信仰有限制，信仰自由受法律保护。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;食品安全标准&lt;/td&gt;
          &lt;td&gt;食品进口和监控严格，国际标准。&lt;/td&gt;
          &lt;td&gt;标准逐渐完善，偶有问题。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;工作时间和假期&lt;/td&gt;
          &lt;td&gt;每周 44 小时，公共假期多。&lt;/td&gt;
          &lt;td&gt;每周 40 小时，法定节假日较少。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;香港拥挤的交通&#34;&gt;香港拥挤的交通&lt;/h2&gt;
&lt;p&gt;香港岛是香港最繁华的地方，面积约 78.10 平方公里，这里集中了大量的商业、办公和住宅区域，吸引了众多人口和车辆，交通压力较大。在香港岛上，有一种极具特色的交通工具——叮当车，它也被称为有轨电车。叮当车全部分布在港岛北部狭长的地带，共有 6 条线路，全都经过港岛繁华热闹的地区，如铜锣湾、跑马地、中环等。它的车身通常为双层，造型古朴，当司机踩到踏脚时，车子会发出“叮当、叮当”的声响，故而得名。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/dingdingche.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/dingdingche.webp&#34; alt=&#34;image&#34; data-caption=&#34;香港岛上的叮当车&#34;&gt;
  
  
  &lt;figcaption&gt;香港岛上的叮当车&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在香港旺角的街头，人群如潮水般涌动。这里是繁华都市的缩影，喧嚣与热闹交织成一幅独特的画卷。摩肩接踵的人们，怀揣着各自的梦想与故事，在这个充满活力的地方穿梭。时尚的店铺、美味的小吃、璀璨的灯光，共同构成了旺角的魅力。每一个匆忙的脚步，每一张洋溢着笑容的脸庞，都在诉说着这座城市的无限可能。旺角，一个让人感受香港脉搏跳动的地方，永远充满着生机与活力。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/wangjiao.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/wangjiao.webp&#34; alt=&#34;image&#34; data-caption=&#34;旺角的夜晚街景&#34;&gt;
  
  
  &lt;figcaption&gt;旺角的夜晚街景&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;香港岛地形以山地为主，地势较高，自北向南地势渐缓，环岛沿岸曲折，多美景港湾。岛上的主要山峰包括太平山、柏架山、奇力山等，其中太平山是香港岛的最高峰，海拔 554 米。&lt;/p&gt;
&lt;p&gt;兰桂坊位于香港岛中西区中环，是一个聚集大小酒吧与餐馆的中高档消费区。它由德己立街、威灵顿街、云咸街、和安里、仁寿里及荣华里构成，宽约 20 米，长约 300 米。20 世纪中期，香港经济腾飞，商业高速发展，夜总会文化开始在香港流行，很多在香港工作或暂居的外国人渴求适合他们品味和要求的娱乐场所，兰桂坊便应运而生。每当夜幕降临，这里便会灯红酒绿，觥筹交错，置身这里让我仿佛置身东南亚，感觉跟泰国很像。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/languifang.jpg&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/languifang.jpg&#34; alt=&#34;image&#34; data-caption=&#34;兰桂坊周边的街道夜景&#34;&gt;
  
  
  &lt;figcaption&gt;兰桂坊周边的街道夜景&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;本地特色&#34;&gt;本地特色&lt;/h2&gt;
&lt;p&gt;我在香港 City walk 的时候发现的一些本地特色。&lt;/p&gt;
&lt;p&gt;我发现很多建筑使用竹子搭建的脚手架，现在竹子脚手架在大城市中很少见到了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/zhuzi.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/zhuzi.webp&#34; alt=&#34;image&#34; data-caption=&#34;堆放在地上的竹子&#34;&gt;
  
  
  &lt;figcaption&gt;堆放在地上的竹子&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/jiaoshoujia.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/jiaoshoujia.webp&#34; alt=&#34;image&#34; data-caption=&#34;使用竹子搭建的脚手架&#34;&gt;
  
  
  &lt;figcaption&gt;使用竹子搭建的脚手架&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我还在庙街看到算命一条街，还有一家店代客烧香。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/suanming.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/suanming.webp&#34; alt=&#34;image&#34; data-caption=&#34;算命一条街&#34;&gt;
  
  
  &lt;figcaption&gt;算命一条街&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/baozhi.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/baozhi.webp&#34; alt=&#34;image&#34; data-caption=&#34;代客拜先人&#34;&gt;
  
  
  &lt;figcaption&gt;代客拜先人&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;最后本地的粤菜真的很好吃，我吃了一道炸猪排，外焦里嫩，口水直流。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/hong-kong-trip/zhazhupai.jpg&#34; data-img=&#34;https://jimmysong.io/img/blog/hong-kong-trip/zhazhupai.jpg&#34; alt=&#34;image&#34; data-caption=&#34;炸猪排&#34;&gt;
  
  
  &lt;figcaption&gt;炸猪排&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在香港的这次旅行中，我不仅领略了这座城市的繁华与多样性，还感受到了它作为一面“镜子”所带来的思考。香港的独特之处在于它东西方文化的交融、现代与传统的结合，以及其与内地在政治、经济、文化等方面的显著差异。无论是乘坐叮当车穿行在港岛繁华的街道，还是漫步在兰桂坊体验夜生活的丰富多彩，亦或是在街头巷尾发现本地的特色文化，这一切都让我更加理解为什么有人说香港是中国内地的一面镜子。通过这面镜子，我们可以看到一个不同的视角，这不仅让我们更好地理解香港，也能反思内地的许多方面，为未来的社会和经济发展提供更多的借鉴和启示。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>KubeCon China 2024 回顾：引领云原生技术的前沿动态</title>
      <link>https://jimmysong.io/blog/kubecon-china-2024-recap/</link>
      <pubDate>Tue, 27 Aug 2024 10:23:48 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/kubecon-china-2024-recap/</guid>
      <description>
        
        
        &lt;p&gt;今年的&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-open-source-summit-ai-dev-china/&#34; title=&#34;KubeCon China&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon China&lt;/a&gt;是首次在香港举办的盛会，持续了三天。作为会议的参与者及一个论坛的主持人，我在这篇文章中将分享会议的精彩内容和对服务网格及网关技术的深入讨论。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/kubecon-china-2024-recap/kubecon-china-2024-hall.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/kubecon-china-2024-recap/kubecon-china-2024-hall.webp&#34; alt=&#34;image&#34; data-caption=&#34;KubeCon China 现场画面&#34;&gt;
  
  
  &lt;figcaption&gt;KubeCon China 现场画面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;主题焦点&#34;&gt;主题焦点&lt;/h2&gt;
&lt;p&gt;本次 KubeCon 新增了 AI 与开发者主题，以下是部分重点内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云原生技术在行业中的实际应用&lt;/strong&gt;：特别是电动汽车和网络安全领域，如 Huawei 和 NIO 的共同探讨云原生技术如何加速电动汽车创新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 社区的力量&lt;/strong&gt;：详细讨论了中国 Kubernetes 社区的影响力及其在推动区域云原生活动中的角色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开源技术与人工智能的融合&lt;/strong&gt;：探讨了中国及香港在开源与 AI 技术领域的先进地位及对区域技术创新的推动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务网格与 API 网关的最新进展&lt;/strong&gt;：包括服务网格的最新技术更新及其与 Kubernetes 调度器的协同工作提高系统吞吐量的策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;供应链安全的新策略&lt;/strong&gt;：关注保障供应链安全的最新动态，特别是 SLSA 合规性的实践指南。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多集群管理与边缘计算&lt;/strong&gt;：探讨了在不同架构下进行有效管理与创新的策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AI 大模型的推理性能优化&lt;/strong&gt;：讨论了无服务器架构下的 AI 大模型推理性能优化及相关技术进展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;istio-与现代-api-网关探索服务网格的未来&#34;&gt;Istio 与现代 API 网关：探索服务网格的未来&lt;/h2&gt;
&lt;p&gt;我与来自 Tetrate、阿里云和 Kong Inc.的行业领袖共同参与的&lt;a href=&#34;https://kccncossaidevchn2024.sched.com/event/1eYY6/istio-and-modern-api-gateways-navigating-the-future-of-service-meshes-istiorejiong-apijie-daepqiu-jie-zha-jimmy-song-jianpeng-he-tetrate-jiaqi-zhang-alibaba-cloud-jintao-zhang-kong-inc-xunzhuo-liu-tencent&#34; title=&#34;圆桌讨论&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;圆桌讨论&lt;/a&gt;，深入探讨了 Istio 和 API 网关的最新进展及其融合带来的革新。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/kubecon-china-2024-recap/kubecon-china-2024-panel.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/kubecon-china-2024-recap/kubecon-china-2024-panel.webp&#34; alt=&#34;image&#34; data-caption=&#34;KubeCon China 2024 Istio 和现代 API 网关的圆桌论坛&#34;&gt;
  
  
  &lt;figcaption&gt;KubeCon China 2024 Istio 和现代 API 网关的圆桌论坛&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Istio 的革新&lt;/strong&gt;：介绍了 Istio 1.123 版本中的 Ambient 模式优化，此模式作为新的架构选择，减少资源消耗同时提升性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ambient 模式与 Sidecar 模式的实用对比&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;何时选择 Sidecar&lt;/strong&gt;：需要高度隔离与详尽流量管理时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;何时选择 Ambient&lt;/strong&gt;：追求极致性能与资源效率时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ambient 模式的发展挑战&lt;/strong&gt;：尽管有诸多优势，Ambient 模式在复杂流量管理与多租户环境中仍面临挑战。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务网格优化策略&lt;/strong&gt;：讨论了服务网格的优化方法，如何提升云应用的性能与效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务网格与 API 网关的整合&lt;/strong&gt;：展示了这两大技术如何共同作用，支持更复杂的部署与运维模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;istio-的未来展望&#34;&gt;Istio 的未来展望&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://kccncossaidevchn2024.sched.com/event/1eYcG/what-is-the-future-of-service-mesh-sidecar-or-sidecarless-jie-zha-dyagsyi-wu-pi-yi-wu-zhonghu-xu-huawei&#34; title=&#34;徐中虎和何建鹏的分享&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;徐中虎和何建鹏的分享&lt;/a&gt;中，我们了解到了 Istio 未来的可能发展方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;双模驱动&lt;/strong&gt;：Istio 将同时支持 Ambient 模式和传统的 Sidecar 模式。Ambient 模式适合追求性能和资源成本优化的用户，而 Sidecar 模式将为需要更全面功能的用户长期支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gateway API 的支持&lt;/strong&gt;：Istio 对 Gateway API 的支持，为用户提供了更灵活的路由与策略配置选项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Waypoints 的策略应用&lt;/strong&gt;：Waypoints 不必局限于 Istio 或 Envoy。通过使用 Gateway API 和 GAMMA，任何符合标准的实现都可以作为 Waypoint，这为服务网格提供了更大的灵活性和扩展性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sandwich-waypoint&#34;&gt;Sandwich Waypoint&lt;/h3&gt;
&lt;p&gt;他们着重介绍了 Sandwich Waypoint，这是一种在 Istio 内管理和引导流量的复杂方法，特别是在环境模式下。这种 Waypoint 代理模式旨在通过充当处理、转换和转发客户端和服务器之间流量的中介层来简化和提高流量路由的效率。它利用了双 zTunnel 设置，其中位于通信通道两端的每个 zTunnel 协作封装和解码流量。Waypoint 本身负责执行额外的功能，如流量整形、安全检查和协议转换，从而在没有传统边车开销的情况下丰富服务网格功能。这种方法允许 Istio 保持强大的流量管理和安全功能，同时优化资源利用率并减少延迟。&lt;/p&gt;
&lt;p&gt;Sandwich Waypoint 支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流量重定向&lt;/strong&gt;：可通过设置  &lt;code&gt;istio.io/use-waypoint: {namespace}/{gateway-name}&lt;/code&gt; 注解，将目标服务、Pod 或命名空间内的流量重定向到同一个 Waypoint。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waypoint 部署&lt;/strong&gt;：用户可以通过创建一个 Gateway 对象来部署 Waypoint。与原始的 Waypoint 实现不同，新的部署方式将包括相关联的服务和服务账户，不仅仅是 Waypoint 实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由与政策配置&lt;/strong&gt;：使用 Gateway API 进行路由和政策配置，这为用户和供应商提供了更多的自定义选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一种 Istio Ambient 模式中捕获七层流量模式，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/kubecon-china-2024-recap/istio-ambient-traffic-capture.svg&#34; data-img=&#34;/blog/kubecon-china-2024-recap/istio-ambient-traffic-capture.svg&#34; alt=&#34;image&#34; data-caption=&#34;Sandwich Waypoint 捕获流量&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Sandwich Waypoint 捕获流量&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Istio Sandwich Waypoint 捕获七层流量的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 zTunnel 终止 HBONE 连接，到达 Waypoint，zTunnel 负责解码 HBONE 协议。&lt;/li&gt;
&lt;li&gt;Waypoint 提取目的地地址、源地址等信息用于处理流量及确定转发位置。&lt;/li&gt;
&lt;li&gt;Waypoint 扩展或解析传输层封装（TLV）数据，代理支持处理 TLV 以提供更多上下文。&lt;/li&gt;
&lt;li&gt;Waypoint 与同位 zTunnel 通信，与服务端 zTunnel 协调确保流量正确转移。&lt;/li&gt;
&lt;li&gt;封装 HBONE，由服务端 zTunnel 发送到最终服务器目的地。实现 Istio 环境中服务的细粒度流量管理和路由并保持与现有网络协议兼容性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;envoy-gateway-的前沿扩展&#34;&gt;Envoy Gateway 的前沿扩展&lt;/h2&gt;
&lt;p&gt;赵化冰在 KubeCon 上介绍了 Envoy Gateway 如何通过扩展 Kubernetes Gateway API 来增强功能与灵活性的&lt;a href=&#34;https://kccncossaidevchn2024.sched.com/event/1eYcX/gateway-api-and-beyond-introducing-envoy-gateways-gateway-api-extensions-jie-api-daeptao-envoyjie-zha-jie-api-huabing-zhao-tetrate&#34; title=&#34;演讲&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演讲&lt;/a&gt;，涵盖了多种匹配与路由能力的扩展、新的资源和策略模型以及安全策略的细节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网关 API 兼容性&lt;/strong&gt;：Envoy 网关完全兼容网关 API，并提供了广泛的匹配和路由选项。这些包括 HTTP 主机和路径匹配、基于 HTTP 头的操作、权重负载均衡，以及对 gRPC、UDP 和 TCP 路由的支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级流量管理策略&lt;/strong&gt;：引入的 &lt;code&gt;ClientTrafficPolicy&lt;/code&gt; 和 &lt;code&gt;BackendTrafficPolicy&lt;/code&gt; 为用户提供了更细粒度的流量管理控制，适用于上游和下游连接，包括如限速、重试、负载均衡、断路器等功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全与认证增强&lt;/strong&gt;：新引入的 &lt;code&gt;SecurityPolicy&lt;/code&gt; 支持 CORS、HTTP 基础认证、OIDC、JWT 认证，并能与各种身份提供商集成。它还提供了详细的访问控制，允许根据请求者的原始 IP、JWT 声明等进行授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义扩展功能&lt;/strong&gt;：Envoy 网关支持通过 WASM（WebAssembly）和外部进程扩展来支持自定义扩展。这允许用户通过集成他们自己为特定用例和操作需求量身定制的扩展来增强网关的功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未来探索&lt;/strong&gt;：未来版本预计将支持非 Kubernetes 环境部署，优化控制平面的内存使用，并扩展授权能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过本次会议我们了解了 Istio 的 Ambient 模式和 Envoy Gateway 的进展。这些技术的讨论不仅展望了未来趋势，也提供了实用的洞察，助力技术实施与创新。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>从黑神话悟空聊起：我心目中的 3A 大作</title>
      <link>https://jimmysong.io/blog/black-myth-wukong-game-life/</link>
      <pubDate>Fri, 23 Aug 2024 14:47:39 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/black-myth-wukong-game-life/</guid>
      <description>
        
        
        &lt;p&gt;随着 8 月 20 日《黑神话：悟空》的正式发售，瞬间点燃了玩家们对 3A 游戏无尽的热情与讨论。在这篇随笔中，我将漫步于记忆的长廊，从孩提时代的掌中世界到今日的次世代主机，细数那些陪伴我的游戏时光，并深入探讨我心目中 3A 大作的独特魅力。&lt;/p&gt;
&lt;h2 id=&#34;我的游戏养成史&#34;&gt;我的游戏养成史&lt;/h2&gt;
&lt;p&gt;在中国，游戏曾一度被视为教育的绊脚石，是家长眼中的洪水猛兽。然而，正是这些看似微不足道的游戏机，悄然开启了我探索未知世界的奇妙之旅。&lt;/p&gt;
&lt;h3 id=&#34;掌上游戏机&#34;&gt;掌上游戏机&lt;/h3&gt;
&lt;p&gt;在我十岁左右，我获得了一个第一台游戏机，一台类似 Gameboy 的掌上游戏机。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/gameboy.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/gameboy.webp&#34; alt=&#34;image&#34; data-caption=&#34;90 年代的掌上游戏机（图片来自网络，复古游戏机）&#34;&gt;
  
  
  &lt;figcaption&gt;90 年代的掌上游戏机（图片来自网络，复古游戏机）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这是我最早接触的游戏机，还有我最早接触的游戏《俄罗斯方块》。&lt;/p&gt;
&lt;h3 id=&#34;游戏机厅&#34;&gt;游戏机厅&lt;/h3&gt;
&lt;p&gt;也进过游戏机厅，小学时每年寒暑假前都要写保证书，名叫《暑/寒假公约》，其中一定会有一条——“不去游戏机厅”。我只去过一两次，这些游戏机需要投币。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/game-machine.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/game-machine.webp&#34; alt=&#34;image&#34; data-caption=&#34;九十年代游戏机厅里的游戏机（图片来自网络）&#34;&gt;
  
  
  &lt;figcaption&gt;九十年代游戏机厅里的游戏机（图片来自网络）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这类游戏机上常玩的游戏是《街头霸王（Street Fighters）》。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/street-fighter.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/street-fighter.webp&#34; alt=&#34;image&#34; data-caption=&#34;FC 游戏：街头霸王&#34;&gt;
  
  
  &lt;figcaption&gt;FC 游戏：街头霸王&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;小霸王学习机&#34;&gt;小霸王学习机&lt;/h3&gt;
&lt;p&gt;小霸王学习机，可以更换卡带，接上电视就能玩，那时候经常用它玩高桥名人的《冒险岛》。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/xiaobawang.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/xiaobawang.webp&#34; alt=&#34;image&#34; data-caption=&#34;小霸王学习机&#34;&gt;
  
  
  &lt;figcaption&gt;小霸王学习机&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;虽然号称是学习机，但是我没有见过有谁用它来学习的。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/maoxiandao.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/maoxiandao.webp&#34; alt=&#34;image&#34; data-caption=&#34;FC 游戏：冒险岛&#34;&gt;
  
  
  &lt;figcaption&gt;FC 游戏：冒险岛&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;网吧&#34;&gt;网吧&lt;/h3&gt;
&lt;p&gt;世纪之交的时候，网吧开始兴起，2000 年的时候我才第一次接触电脑，暑期的时候还参加电脑培训，练习过五笔打字，那时候也没学会，光顾着玩游戏了，我记得那时候还使用的是 3.5 英寸软盘，操作系统还是 Windows 98，使用的是笨重的 CRT 显示器。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/netbar.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/netbar.webp&#34; alt=&#34;image&#34; data-caption=&#34;90 年代末 2000 年初的网吧（图片来自网络）&#34;&gt;
  
  
  &lt;figcaption&gt;90 年代末 2000 年初的网吧（图片来自网络）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;2000 年左右，电脑上的游戏有《红色警戒》、《暴力摩托》、《三角洲部队》、《拳皇》，但是我最喜欢的还是《红色警戒 2》，从 2000 年一直到 2008 年。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/red-alert.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/red-alert.webp&#34; alt=&#34;image&#34; data-caption=&#34;红色警戒（红警 2）&#34;&gt;
  
  
  &lt;figcaption&gt;红色警戒（红警 2）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;最开始玩红警的时候年纪还小，是我自己一个人探索着玩，一开始做任务，甚至不知道怎样展开基地车，因为游戏是繁体字，很多我还看不懂。&lt;/p&gt;
&lt;h3 id=&#34;单机游戏2000---2008&#34;&gt;单机游戏：2000 - 2008&lt;/h3&gt;
&lt;p&gt;除了红色警戒之外，我玩过的游戏还有《反恐精英》、《半条命》、《暗黑破坏神》、《仙剑奇侠传》、《魔兽争霸》，但这些游戏都不是我的菜，大多也玩不好，我还是钟情于红警，还有它的各种 mod。&lt;/p&gt;
&lt;h3 id=&#34;网络游戏2005---2008&#34;&gt;网络游戏：2005 - 2008&lt;/h3&gt;
&lt;p&gt;在开始玩网络游戏之前，从来没有为玩游戏花过钱，因为中国的各种盗版游戏泛滥，网上到处都可以下载到。&lt;/p&gt;
&lt;p&gt;在此之后就是网游的时代了，什么《传奇》、《大话西游》，腾讯的各种游戏比如《泡泡堂》、《劲舞团》、《地下城与勇士》、《QQ 飞车》这些我都玩过。&lt;/p&gt;
&lt;h3 id=&#34;休闲游戏2009---2013&#34;&gt;休闲游戏：2009 - 2013&lt;/h3&gt;
&lt;p&gt;曾经有一段时间，大概 2008 到 2013 年，校友网、QQ 空间上诞生的网页游戏，比如《抢车位》、《开心农场》等火爆一时，很多人定闹钟偷菜，也诞生了一些做网页游戏的网站。&lt;/p&gt;
&lt;p&gt;还有一些流行的休闲游戏，比如《植物大战僵尸》也是我特别喜欢的一款游戏。跟它同时期的一些游戏也不错。&lt;/p&gt;
&lt;h3 id=&#34;手机游戏2014---2023&#34;&gt;手机游戏：2014 - 2023&lt;/h3&gt;
&lt;p&gt;《开心消消乐》、《原神》、《辐射：避难所》。不过很多流行的手机游戏比如《绝地求生》、《穿越火线》我都没有玩过。&lt;/p&gt;
&lt;h3 id=&#34;主机游戏2023-至今&#34;&gt;主机游戏：2023 至今&lt;/h3&gt;
&lt;p&gt;从 2009 年到 2023 年可以说我就没有再接触主机游戏和网游了，平时也很少玩游戏，直到 2023 年 12 月，我获得了我的第一台游戏主机 PS5，情况才发生了改变。&lt;/p&gt;
&lt;p&gt;在此之前我曾玩过朋友的任天堂主机，但是并不是很喜欢任天堂主机的游戏，画面质量，游戏类型都不是我喜爱的。&lt;/p&gt;
&lt;p&gt;但是从我接触的第一个 PS5 主机游戏《双人成行》开始，我对主机游戏甚至说对电子游戏的看法大大改观了。一起我对大部分游戏都提不起兴趣，感觉那些游戏就是打发打发时间，玩久了就很无聊，但是接下来的几款游戏让我体验到了什么是 3A 大作。&lt;/p&gt;
&lt;h2 id=&#34;3a-大作&#34;&gt;3A 大作&lt;/h2&gt;
&lt;p&gt;在拥有了 PS5 之后，玩什么游戏就是一个问题了。我订阅了二挡会员，所以起初我下载和玩了一些游戏库里的游戏。&lt;/p&gt;
&lt;h3 id=&#34;双人成行&#34;&gt;双人成行&lt;/h3&gt;
&lt;p&gt;《双人成行》这是一个必须两个人配合才能完成的游戏，通过 PS5 的手柄来操控，终于让我体会到玩游戏的快感。这也是我第一次购买的实体游戏，我购买了游戏光盘。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/it-takes-two.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/it-takes-two.webp&#34; alt=&#34;image&#34; data-caption=&#34;双人成行&#34;&gt;
  
  
  &lt;figcaption&gt;双人成行&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;地平线西之绝境&#34;&gt;地平线：西之绝境&lt;/h3&gt;
&lt;p&gt;《地平线：西之绝境》在 PlayStation 的二挡会员库里，所以我也下载和游玩了这款游戏。这款游戏以废土世界的旧金山为背景，里面有很多奇思妙想的未来机械生物。但是我对它的剧情和部落完全不感兴趣，只是享受其中打斗的乐趣，因为主角可以使用的武器和技能有很多。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/horizontal.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/horizontal.webp&#34; alt=&#34;image&#34; data-caption=&#34;地平线：西之绝境&#34;&gt;
  
  
  &lt;figcaption&gt;地平线：西之绝境&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;对马岛之魂&#34;&gt;对马岛之魂&lt;/h3&gt;
&lt;p&gt;《对马岛之魂》，故事发生在古代日本的对马岛，虽然景色很美，但是打斗风格及剧情让我提不起兴趣，一个日本人反抗蒙古侵略者的故事，我只玩了几个小时就卸载了游戏。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/ghost-of-tsushima.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/ghost-of-tsushima.webp&#34; alt=&#34;image&#34; data-caption=&#34;对马岛之魂&#34;&gt;
  
  
  &lt;figcaption&gt;对马岛之魂&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;蜘蛛侠miles-morales&#34;&gt;蜘蛛侠：Miles Morales&lt;/h3&gt;
&lt;p&gt;《蜘蛛侠：Miles Morales》，以纽约为背景，化身蜘蛛侠在纽约的城市上空飞来飞去，还有爽快的打斗，确实是一款很刺激的游戏，但是我对漫画人物为主角的游戏也不是特别喜欢，这款游戏的故事也比较简单，很快就通关了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/spiderman.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/spiderman.webp&#34; alt=&#34;image&#34; data-caption=&#34;蜘蛛侠：Miles Morales&#34;&gt;
  
  
  &lt;figcaption&gt;蜘蛛侠：Miles Morales&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;极地战嚎-6&#34;&gt;极地战嚎 6&lt;/h3&gt;
&lt;p&gt;《极地战嚎 6》，是一个虚构的现代国家 Yara 为背景（实际上是映射古巴）的游击队反抗政府军的故事，这是育碧旗下的游戏，已经出到第六代，有点像罐头游戏，完成主线任务也很快，我喜欢里面的各种枪械和野路子武器，剧情能够发人深省。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/far-cry.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/far-cry.webp&#34; alt=&#34;image&#34; data-caption=&#34;极地战嚎 6&#34;&gt;
  
  
  &lt;figcaption&gt;极地战嚎 6&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;荒野大镖客-2&#34;&gt;荒野大镖客 2&lt;/h3&gt;
&lt;p&gt;《荒野大镖客 2》是以 19 世纪末的美国西部为背景，玩了不到 1 个小时，实在无法带入剧情，对这个的故事和背景也不感兴趣，索性不玩了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/red-dead-2.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/red-dead-2.webp&#34; alt=&#34;image&#34; data-caption=&#34;荒野大镖客 2&#34;&gt;
  
  
  &lt;figcaption&gt;荒野大镖客 2&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;艾尔登法环&#34;&gt;艾尔登法环&lt;/h3&gt;
&lt;p&gt;我玩过的最后一个 3A 大作是《艾尔登法环》，这是我第一次玩魂系游戏，其中的世界观，复杂的技能点加成，庞大的地图，开放世界都给我造成很大的困惑，尤其是强大的怪物，我一开始玩了几个小时，就死过无数次，被大树守卫很轻易就秒杀，甚至一个普通怪物三两下就把我干掉，我感觉玩这个游戏很痛苦，完全无法体会其中的乐趣，直到我了解可以购买卢恩，将角色升级到满级，然后玩这个游戏就可以轻松很多。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/elden-ring.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/elden-ring.webp&#34; alt=&#34;image&#34; data-caption=&#34;艾尔登法环&#34;&gt;
  
  
  &lt;figcaption&gt;艾尔登法环&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;不过这个游戏偶尔还是会让人感觉很不适，尤其是各种迷宫一样的墓地，阴暗的环境，下水道，恶心的怪物。但是面对那些强大的怪物，当时死亡无数次后将其打败，可以体会到其中的快感，以及游戏庞大的地图，琳琅满目的武器，是我坚持玩下去的动力。&lt;/p&gt;
&lt;h2 id=&#34;什么是我想要的-3a-游戏&#34;&gt;什么是我想要的 3A 游戏&lt;/h2&gt;
&lt;p&gt;在《黑神话：悟空》诞生之前，并没有一个让我眼前一亮的 3A 大作，它的出现就像一颗闪耀的新星。下面我将谈谈什么是我心目中的 3A 大作。&lt;/p&gt;
&lt;h3 id=&#34;深入灵魂的叙事篇章&#34;&gt;深入灵魂的叙事篇章&lt;/h3&gt;
&lt;p&gt;我心目中的 3A 大作，首先必须拥有一段深入人心的故事。它应当如同一部宏大的史诗，让玩家在跌宕起伏的剧情中与角色同悲共喜，体验一段段难忘的旅程。《黑神话：悟空》以其独特的中国神话背景，正是我所期待的那一抹亮色。&lt;/p&gt;
&lt;h3 id=&#34;视觉与听觉的双重盛宴&#34;&gt;视觉与听觉的双重盛宴&lt;/h3&gt;
&lt;p&gt;高质量的美术与音乐是 3A 大作的另一大亮点。精美的画面、逼真的场景、细腻的角色设计，以及动人心弦的背景音乐和音效，共同构建了一个令人向往的虚拟世界。《黑神话：悟空》的预告片已经展现出了其在这方面的非凡实力。&lt;/p&gt;
&lt;h3 id=&#34;流畅操作与无限玩法&#34;&gt;流畅操作与无限玩法&lt;/h3&gt;
&lt;p&gt;流畅的操作手感与丰富的游戏玩法是 3A 大作的基石。无论是战斗系统的爽快感、解谜机制的巧妙设计，还是探索元素的无限可能，都应让玩家在享受游戏的过程中感受到无尽的乐趣与挑战。《黑神话：悟空》作为动作冒险游戏，其在这方面的表现无疑值得期待。&lt;/p&gt;
&lt;h3 id=&#34;文化内涵的深度挖掘&#34;&gt;文化内涵的深度挖掘&lt;/h3&gt;
&lt;p&gt;对于国内玩家而言，游戏中融入的文化内涵往往能引发更深的共鸣与认同。《黑神话：悟空》以中国神话为背景，不仅展现了丰富的传统文化元素，更通过游戏这一载体将中华文化的魅力传播至世界各地。&lt;/p&gt;
&lt;h3 id=&#34;持续的创新与支持&#34;&gt;持续的创新与支持&lt;/h3&gt;
&lt;p&gt;一款优秀的 3A 大作不仅需要在发布时惊艳四座，更需要在后续的开发与运营中保持活力与创新。持续的更新与支持不仅能够为玩家带来新鲜感与惊喜，更是游戏生命力的体现。《黑神话：悟空》作为国产 3A 的佼佼者，其后续的更新与支持同样值得我们期待。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;《黑神话：悟空》的发布不仅是对国产游戏的一次重大突破，更是对全球游戏界的一次震撼宣言。它让我看到了国产 3A 大作的无限可能。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/black-myth.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/black-myth-wukong-game-life/black-myth.webp&#34; alt=&#34;image&#34; data-caption=&#34;黑神话：悟空&#34;&gt;
  
  
  &lt;figcaption&gt;黑神话：悟空&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;今天我就购入了《黑神话：悟空》，在游玩一段时间后我会发布新的博客谈谈我的游玩体验。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>集成 Envoy Gateway 作为 Istio 服务网格中的入口网关</title>
      <link>https://jimmysong.io/blog/envoy-gateway-integration-istio-mesh/</link>
      <pubDate>Tue, 13 Aug 2024 13:43:16 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-gateway-integration-istio-mesh/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 提供了对入口网关的强大而灵活的支持，利用 Envoy 代理在其 sidecar 模式下运行。尽管 Istio 专注于管理集群内服务之间的通信，&lt;a href=&#34;https://gateway.envoyproxy.io&#34; title=&#34;Envoy Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt; 旨在将应用程序暴露给外部世界，处理用户请求，并支持高级功能，如 OIDC 单点登录。通过结合 Istio 服务网格的功能和 Envoy Gateway 的高级网关功能，可以增强整体应用程序的可访问性和安全性。&lt;/p&gt;
&lt;p&gt;下图显示了 Istio 网格中入口网关的流量路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/istio-ingress-sidecar.svg&#34; data-img=&#34;https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/istio-ingress-sidecar.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 入口网关流量路径&#34;&gt;
  
  
  &lt;figcaption&gt;Istio 入口网关流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下一个图表显示了在引入 Envoy Gateway 后，流量如何从 Istio 网格的边缘流入内部网络。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/istio-teg-integration.svg&#34; data-img=&#34;https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/istio-teg-integration.svg&#34; alt=&#34;image&#34; data-caption=&#34;引入 Envoy Gateway 后的流量路径&#34;&gt;
  
  
  &lt;figcaption&gt;引入 Envoy Gateway 后的流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;准备-envoy-gateway-与-istio-之间的互操作性&#34;&gt;准备 Envoy Gateway 与 Istio 之间的互操作性&lt;/h3&gt;
&lt;p&gt;要将 Envoy Gateway 用作 Istio 的入口网关，请考虑以下关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Istio 安装期间避免启用入口网关。我们将手动安装并配置 Envoy Gateway 作为入口网关。&lt;/li&gt;
&lt;li&gt;由于 Istio 和 Envoy Gateway 都使用 Envoy 作为代理，确保 Istio 将 Envoy sidecar 注入到 Envoy Gateway 的网关 Pod 中，以允许与 Istio 的数据平面安全通信。&lt;/li&gt;
&lt;li&gt;配置由 Envoy Gateway 创建的 Envoy 代理的路由类型为 &lt;code&gt;Service&lt;/code&gt; 而不是 &lt;code&gt;Endpoint&lt;/code&gt;，以确保正确路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照 &lt;a href=&#34;https://gateway.envoyproxy.io/docs/tasks/quickstart/&#34; title=&#34;快速启动文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;快速启动文档&lt;/a&gt; 安装 Envoy Gateway。标记 Envoy Gateway 的命名空间以确保数据平面获得 Istio sidecar 注入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace envoy-gateway-system --overwrite&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置 Envoy Gateway 的 sidecar 以不拦截进入网关的流量。注入的 sidecar 确保 Envoy Gateway 的组件及其创建的代理被包含在 Istio 网格中，并安装正确的证书以进行安全通信。&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;control-plane-tls.yaml&#34; download&gt;control-plane-tls.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;appProtocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用补丁：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl patch service -n envoy-gateway-system envoy-gateway --type strategic --patch-file control-plane-tls.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置 Envoy Gateway 不拦截入站流量：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;teg-sidecars-no-inbound.yaml&#34; download&gt;teg-sidecars-no-inbound.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.envoyproxy.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyProxy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;data-plane-sidecars&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-gateway-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Kubernetes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoyDeployment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;traffic.sidecar.istio.io/includeInboundPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routingType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f teg-sidecars-no-inbound.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 GatewayClass 配置以将 sidecar 配置应用于 Envoy Gateway 数据平面中的所有 &lt;code&gt;EnvoyProxy&lt;/code&gt;：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;gtwcls-use-envoyproxy.yaml&#34; download&gt;gtwcls-use-envoyproxy.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parametersRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.envoyproxy.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyProxy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-gateway-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;data-plane-sidecars&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用补丁：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl patch gatewayclass teg --patch-file gtwcls-use-envoyproxy.yaml --type merge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h3&gt;
&lt;p&gt;使用 minimal 配置文件部署 Istio 以避免部署入口网关：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl install --set &lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;minimal -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重启-envoy-gateway-控制平面&#34;&gt;重启 Envoy Gateway 控制平面&lt;/h3&gt;
&lt;p&gt;在 Istio 的 sidecar 注入准备好后，重启所有 Envoy Gateway 控制平面的 pod：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; d in envoy-gateway envoy-ratelimit teg-envoy-gateway teg-redis&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; kubectl rollout restart deployment -n envoy-gateway-system &lt;span class=&#34;nv&#34;&gt;$d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;部署测试应用程序&#34;&gt;部署测试应用程序&lt;/h3&gt;
&lt;p&gt;在安装 Istio 后部署测试应用程序，以确保它们也接收到 sidecar 注入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create namespace httpbin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace httpbin --overwrite&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -n httpbin -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置-envoy-gateway&#34;&gt;配置 Envoy Gateway&lt;/h3&gt;
&lt;p&gt;现在配置 Envoy Gateway 以处理边缘流量：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;apps-gateway.yaml&#34; download&gt;apps-gateway.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;teg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f apps-gateway.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署应用网关，包括以下容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istio-init&lt;/code&gt;：由 Istio 注入以修改 pod iptables。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;envoy&lt;/code&gt;：由 Envoy Gateway 控制，充当入口网关。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istio-proxy&lt;/code&gt;：由 Istio 注入，负责与内部集群 pod 的通信。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdown-manager&lt;/code&gt;：由 Envoy Gateway 控制，负责 pod 生命周期管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建一个 HTTP 路由：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;httpbin-route.yaml&#34; download&gt;httpbin-route.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/httpbin/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;URLRewrite&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;urlRewrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin.httpbin.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ReplacePrefixMatch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replacePrefixMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用路由配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f httpbin-route.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;发送测试请求&#34;&gt;发送测试请求&lt;/h3&gt;
&lt;p&gt;获取网关的负载平衡器 IP 地址并发送测试请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;GATEWAY_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get svc -n envoy-gateway-system -l gateway.envoyproxy.io/owning-gateway-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;apps -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].status.loadBalancer.ingress[0].ip}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v -H Host:www.example.com http://&lt;span class=&#34;nv&#34;&gt;$GATEWAY_URL&lt;/span&gt;/httpbin/get
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你应该能看到来自 &lt;code&gt;httpbin&lt;/code&gt; 服务的正确响应：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*   Trying 34.41.0.90:80...
* Connected to 34.41.0.90 (34.41.0.90) port 80
&amp;gt; GET /httpbin/get HTTP/1.1
&amp;gt; Host:www.example.com
&amp;gt; User-Agent: curl/8.7.1
&amp;gt; Accept: */*
&amp;gt;
* Request completely sent off
&amp;lt; HTTP/1.1 200 OK
&amp;lt; server: envoy
&amp;lt; date: Wed, 31 Jul 2024 08:21:58 GMT
&amp;lt; content-type: application/json
&amp;lt; content-length: 282
&amp;lt; access-control-allow-origin: *
&amp;lt; access-control-allow-credentials: true
&amp;lt; x-envoy-upstream-service-time: 11
&amp;lt;
{
  &amp;#34;args&amp;#34;: {},
  &amp;#34;headers&amp;#34;: {
    &amp;#34;Accept&amp;#34;: &amp;#34;*/*&amp;#34;,
    &amp;#34;Host&amp;#34;: &amp;#34;www.example.com&amp;#34;,
    &amp;#34;User-Agent&amp;#34;: &amp;#34;curl/8.7.1&amp;#34;,
    &amp;#34;X-Envoy-Attempt-Count&amp;#34;: &amp;#34;1&amp;#34;,
    &amp;#34;X-Envoy-External-Address&amp;#34;: &amp;#34;123.120.227.173&amp;#34;
  },
  &amp;#34;origin&amp;#34;: &amp;#34;123.120.227.173&amp;#34;,
  &amp;#34;url&amp;#34;: &amp;#34;http://www.example.com/get&amp;#34;
}
* Connection #0 to host 34.41.0.90 left intact
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用严格-mtls&#34;&gt;启用严格 mTLS&lt;/h3&gt;
&lt;p&gt;通过应用以下配置启用严格 mTLS：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;strict-mtls.yaml&#34; download&gt;strict-mtls.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PeerAuthentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-system&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mtls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STRICT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f strict-mtls.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;为网关启用-tls&#34;&gt;为网关启用 TLS&lt;/h3&gt;
&lt;p&gt;创建服务签名的根证书和私钥：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir example_certs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -x509 -sha256 -nodes -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -newkey rsa:2048 -subj &lt;span class=&#34;s1&#34;&gt;&amp;#39;/O=example Inc./CN=example.com&amp;#39;&lt;/span&gt; -keyout example_certs/example.com.key -out example_certs/example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为 &lt;code&gt;www.example.com&lt;/code&gt; 创建证书和私钥：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -out example_certs/www.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs/www.example.com.key -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/CN=www.example.com/O=www organization&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -req -sha256 -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -CA example_certs/example.com.crt -CAkey example_certs/example.com.key -set_serial &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -in example_certs/www.example.com.csr -out example_certs/www.example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为入口网关创建一个密钥：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create -n httpbin secret tls httpbin-credential --key&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example_certs/www.example.com.key --cert&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example_certs/www.example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置入口网关：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;tls-apps-gateway.yaml&#34; download&gt;tls-apps-gateway.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;teg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Terminate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certificateRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin-credential&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f tls-apps-gateway.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发送测试请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v -H Host:www.example.com --resolve &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.example.com:443:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GATEWAY_URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; --cacert example_certs/example.com.crt &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.example.com:443/httpbin/get&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你应该可以通过 HTTPS 在网格内访问 &lt;code&gt;httpbin&lt;/code&gt; 服务。&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;通过将 Envoy Gateway 集成为 Istio 服务网格中的入口网关，你可以利用两者的优势：Istio 的强大服务网格能力和 Envoy Gateway 的高级网关功能。这种设置增强了你的应用程序的安全性、可扩展性和灵活性，提供了无缝且安全的用户体验。通过仔细的配置和正确的工具，管理服务网格内外的流量变得更加高效和有效，确保你的应用程序始终可访问并且安全。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio 配置安全：如何避免错误配置</title>
      <link>https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/</link>
      <pubDate>Tue, 06 Aug 2024 11:03:02 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/</guid>
      <description>
        
        
        &lt;p&gt;Istio 是一个功能强大的服务网格解决方案，提供零信任安全性、可观测性和高级流量管理等功能，且无需修改代码即可实现。然而，由于配置错误，我们经常会遇到意料之外的行为。本文将介绍几种常见的 Istio 配置错误，解析其背后的原理，并通过示意图展示如何识别和解决这些问题。我们还将介绍 Tetrate 提供的工具——&lt;a href=&#34;https://docs.tetrate.io/istio-subscription/dashboard/analyzers/config&#34; title=&#34;TIS Config Analyzer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TIS Config Analyzer&lt;/a&gt;，这是一种优化 Istio 操作效率和安全性的工具。&lt;/p&gt;
&lt;h2 id=&#34;配置错误导致的事故案例&#34;&gt;配置错误导致的事故案例&lt;/h2&gt;
&lt;p&gt;以下是两个由于配置错误导致的典型事故案例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.theverge.com/2017/3/2/14792442/amazon-s3-outage-cause-typo-internet-server&#34; title=&#34;Amazon Web Services 2017 年停机事件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon Web Services 2017 年停机事件&lt;/a&gt;&lt;/strong&gt;：一次简单的输入错误导致了广泛的服务中断，影响了数千个在线服务和应用，突显了即使在成熟的云基础设施中，一个小小的配置错误也会引发严重后果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://about.gitlab.com/blog/2017/02/01/gitlab-dot-com-database-incident/&#34; title=&#34;GitLab 2017 年数据丢失事故&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitLab 2017 年数据丢失事故&lt;/a&gt;&lt;/strong&gt;：由于配置错误，GitLab 在进行数据库维护时误删除了大量生产数据。尽管备份机制被配置好，但错误的配置阻止了数据的及时恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些案例表明，正确的配置管理对于防止服务中断和数据丢失至关重要。&lt;/p&gt;
&lt;h2 id=&#34;常见的-istio-配置错误类型&#34;&gt;常见的 Istio 配置错误类型&lt;/h2&gt;
&lt;p&gt;Istio 配置错误主要分为以下几大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;AuthorizationPolicy（授权策略）&lt;/strong&gt;：命名空间不存在、仅允许 HTTP 方法和完全限定的 gRPC 名称、主机没有匹配的服务注册表条目、字段需要启用 mTLS、未找到服务帐户等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DestinationRule（目标规则）&lt;/strong&gt;：同一主机子集组合的多个目标规则、主机在服务注册表中没有匹配条目、子集标签在任何匹配主机中未找到等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gateway（网关）&lt;/strong&gt;：同一主机端口组合的多个网关、网关选择器在命名空间中未找到匹配的工作负载等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Port（端口）&lt;/strong&gt;：端口名称必须遵循特定格式、端口的应用协议必须遵循特定格式等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service（服务）&lt;/strong&gt;：未找到暴露与服务相同端口的部署等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VirtualService（虚拟服务）&lt;/strong&gt;：目标权重的路由没有有效的服务、指向不存在网关的虚拟服务等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常见的-istio-配置错误示例&#34;&gt;常见的 Istio 配置错误示例&lt;/h2&gt;
&lt;p&gt;在 Istio 的日常使用中，以下是一些最常见的配置错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟服务指向不存在的网关：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;non-existent-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，&lt;code&gt;details&lt;/code&gt; 虚拟服务试图通过一个不存在的 &lt;code&gt;non-existent-gateway&lt;/code&gt; 进行路由，导致流量管理失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟服务引用不存在的服务子集：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 &lt;code&gt;details&lt;/code&gt; 服务没有定义相应的子集，请求将因无法找到正确的服务实例而被拒绝。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网关找不到指定的服务器凭证：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-not-found-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIMPLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;credentialName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;not-exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会导致 TLS 握手失败，因为指定的凭证 &lt;code&gt;not-exist&lt;/code&gt; 不存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置验证&#34;&gt;配置验证&lt;/h2&gt;
&lt;p&gt;为了减少由于配置错误而导致的服务中断风险，配置验证成为了一个不可或缺的步骤。配置验证可以分为以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态配置验证&lt;/strong&gt;：在配置应用到系统之前进行验证。这包括检查语法错误、完整性以及配置项的有效性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需配置验证&lt;/strong&gt;：在配置已经应用但可能需要根据实时数据进行调整时进行验证。这种类型的验证有助于适应动态环境中的变化，确保配置的持续正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;推荐的配置验证工具&#34;&gt;推荐的配置验证工具&lt;/h3&gt;
&lt;h4 id=&#34;istioctl-validate&#34;&gt;&lt;code&gt;istioctl validate&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;istioctl validate&lt;/code&gt; 用于验证 Istio 配置文件（如 YAML 文件）的语法和基本结构，确保配置文件符合 Istio API 的规范。它可以在配置应用到集群之前检测出语法错误和格式问题，是一个静态分析工具，通常结合 CI 流程使用，防止无效配置文件应用到集群中。&lt;/p&gt;
&lt;h4 id=&#34;istioctl-analyze&#34;&gt;&lt;code&gt;istioctl analyze&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/diagnostic-tools/istioctl-analyze/&#34; title=&#34;istioctl analyze&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;istioctl analyze&lt;/code&gt;&lt;/a&gt; 是一个强大的诊断工具，用于分析 Istio 集群的运行状态和配置一致性。它不仅检查配置文件的语法，还可以检查集群中实际应用的配置，找出潜在的问题和冲突。&lt;code&gt;istioctl analyze&lt;/code&gt; 提供动态分析功能，能够识别集群运行时的配置错误和潜在问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istioctl analyze&lt;/code&gt; 的配置流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;收集配置数据&lt;/strong&gt;：首先，&lt;code&gt;istioctl analyze&lt;/code&gt; 收集来自指定源的 Istio 配置数据。这些源可以是活动的 Kubernetes 集群，也可以是本地的配置文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析和构建模型&lt;/strong&gt;：工具解析收集的配置数据，构建一个内部表示 Istio 配置的模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用分析规则&lt;/strong&gt;：随后，它应用一系列预定义的规则来分析这个模型，检测潜在的配置问题。这些规则涵盖从安全漏洞到性能问题的各种潜在问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成报告&lt;/strong&gt;：分析完成后，&lt;code&gt;istioctl analyze&lt;/code&gt; 输出一个包含所有发现问题的详细报告。如果没有发现问题，它会通知用户配置看起来没有问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是 &lt;code&gt;istioctl analyze&lt;/code&gt; 的工作流程图：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/4eb4d5bbb7c8856d609944835aa03993.svg&#34; data-img=&#34;/blog/istio-configuration-safety-common-misconfigurations/4eb4d5bbb7c8856d609944835aa03993.svg&#34; alt=&#34;image&#34; data-caption=&#34;istioctl analyze 的工作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;istioctl analyze 的工作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h4 id=&#34;kiali&#34;&gt;Kiali&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://kiali.io&#34; title=&#34;Kiali&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kiali&lt;/a&gt; 是管理和可视化 Istio 服务网格的重要工具，提供对网格健康状况、性能和配置状态的实时洞察。通过将 Kiali 集成到 Istio 环境中，可以通过以下方式增强配置安全性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可视化&lt;/strong&gt;：Kiali 提供服务网格的图形表示，更容易发现配置错误，如路由错误或缺失的策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证&lt;/strong&gt;：有助于验证 Istio 配置，突出显示如配置错误的网关或目标规则等问题，以防这些问题引起麻烦。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全洞察&lt;/strong&gt;：Kiali 提供对安全策略的可见性，确保 mTLS 和授权设置正确实施。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将 Kiali 与 &lt;code&gt;istioctl validate&lt;/code&gt; 和 &lt;code&gt;istioctl analyze&lt;/code&gt; 等工具结合使用，能确保更为稳健的方法来预防和解决 Istio 配置错误，进而提升服务网格的安全性和效率。&lt;/p&gt;
&lt;h2 id=&#34;tetrate-的-tis-中的-config-analyzer-工具介绍&#34;&gt;Tetrate 的 TIS 中的 Config Analyzer 工具介绍&lt;/h2&gt;
&lt;p&gt;为了帮助开发者和运维人员避免常见的配置失误，Tetrate 开发了 TIS Dashboard 中的 &lt;a href=&#34;https://docs.tetrate.io/istio-subscription/dashboard/analyzers/config&#34; title=&#34;Config Analyzer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Config Analyzer&lt;/a&gt; 工具。该工具能够自动验证 Istio 的配置，根据最佳实践分析服务网格的配置问题，并提供优化建议。Config Analyzer 可以自动检测 Istio 服务网格中的配置问题，提供解释及解决方案，支持按需检测配置中的错误。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/config-validate_hu15794426672489501789.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/config-validate.png&#34; data-img=&#34;/blog/istio-configuration-safety-common-misconfigurations/config-validate.png&#34; data-width=&#34;3358&#34; data-height=&#34;1812&#34; alt=&#34;image&#34; data-caption=&#34;TIS Config Analyzer 可以按需检测配置中的问题&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;TIS Config Analyzer 可以按需检测配置中的问题&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;正确配置 Istio 是确保服务网格健康运行的关键。通过了解和避免常见配置错误，以及利用如 Tetrate 的 TIS Config Analyzer 这样的高级工具，您可以确保 Istio 环境的稳定性和安全性。记住，一个小小的配置错误可能导致整个服务网格的故障，因此持续监控和审核配置是非常必要的。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kiali.io/docs/features/validations/&#34; title=&#34;Validation - kiali.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Validation - kiali.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>保障 Istio 安全：解决关键安全漏洞及最佳实践</title>
      <link>https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/</link>
      <pubDate>Thu, 25 Jul 2024 14:09:37 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/</guid>
      <description>
        
        
        &lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;近期，Wiz 研究团队发布了&lt;a href=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/&#34; title=&#34;博客&#34;&gt;博客&lt;/a&gt;，揭示了 AI 服务中的租户隔离漏洞，引起了广泛关注。该研究详细阐述了多个 AI 服务供应商存在的安全缺陷，特别是 SAP AI Core 平台。通过合法的 AI 训练过程，研究人员能够绕过 Istio 服务网格中的流量劫持，进而横向移动并接管服务，获取客户的私人文件和云环境凭证。这些发现凸显了当今云服务和管理平台在确保隔离和沙盒环境方面面临的挑战。&lt;/p&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    关于 UID 1337
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    Istio 选择 UID 1337（leet 的变体）作为 &lt;code&gt;istio-proxy&lt;/code&gt; 容器中的用户 ID 是为了便于配置并避免权限冲突。这个数字在技术和游戏文化中象征“精英”（elite），有助于防止与其他常规用户 ID 冲突，确保流量管理操作不受权限问题干扰。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在这个背景下，Istio 作为一个重要的服务网格解决方案，同样面临着类似的安全问题，尤其是在 sidecar 注入和流量管理等关键功能上。这篇博客旨在探讨如何保护 Istio 服务网格的安全，并提供一套全面的缓解措施。我们还将讨论多层安全策略如何有效增强 Istio 的安全性，以应对类似 Wiz 报告中提到的挑战。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;Istio 主要用于管理 Kubernetes 中的东西向流量，提供详细的流量管理功能，如请求路由、负载均衡和故障恢复策略。虽然 Istio 提供了流量加密、认证和授权等安全功能，但它本身不应被视为防火墙。为了确保 Istio 网格中的服务安全，除了使用 Istio 自身的安全功能，还需要结合底层网络和基础设施的安全措施，比如 CNI 和安全容器。此外，微分段技术可以用来实现更细粒度的隔离，提高安全性。&lt;/p&gt;
&lt;p&gt;不论是 Sidecar 模式还是 Ambient 模式，都是通过劫持应用程序 Pod 的流量到数据平面代理中进行处理和转发的。如果没有成功拦截到应用程序流量或者被仿冒程序冒充了 Istio 而执行操作，就会有安全漏洞出现。&lt;/p&gt;
&lt;p&gt;下图展示了通过绕过或仿冒 Istio 系统用户而造成的安全漏洞存在的位置。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/bypass-sidecar-traffic-hijack.svg&#34; data-img=&#34;/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/bypass-sidecar-traffic-hijack.svg&#34; alt=&#34;image&#34; data-caption=&#34;能够绕过 Istio 中流量劫持的“安全漏洞&amp;#34;&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;能够绕过 Istio 中流量劫持的“安全漏洞&#34;&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;接下来，我们将探讨“安全漏洞”产生的具体情况及应对策略。&lt;/p&gt;
&lt;h2 id=&#34;绕过-istio-sidecar-注入&#34;&gt;绕过 Istio Sidecar 注入&lt;/h2&gt;
&lt;h3 id=&#34;在命名空间级别禁用注入&#34;&gt;在命名空间级别禁用注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用命名空间标签，在命名空间级别禁用 Istio Sidecar 注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队抽象化应用部署，限制对原始 Kubernetes 命名空间资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：使用策略引擎（如 OPA Gatekeeper）来确保命名空间标签的合规性，定期审查命名空间的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在-pod-级别禁用注入&#34;&gt;在 Pod 级别禁用注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 Pod 标签，在 Pod 级别禁用 Istio Sidecar 注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队抽象化应用部署，限制对原始 Kubernetes Pod 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：使用 Admission Webhook 强制启用 Sidecar 注入，禁止使用排除标签，定期扫描和审计所有 Pod，确保所有需要的 Pod 都注入了 Sidecar。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过流量重定向到-istio-sidecar&#34;&gt;绕过流量重定向到 Istio Sidecar&lt;/h2&gt;
&lt;h3 id=&#34;滥用流量重定向注解&#34;&gt;滥用流量重定向注解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 Pod 注解，排除特定的入站或出站端口或 IP 地址，从而绕过流量重定向。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队抽象化应用部署，限制对原始 Kubernetes Pod 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：使用策略引擎来检测和警告不合规的注解使用，定期审查 Pod 注解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-pod-的-uid&#34;&gt;滥用 Pod 的 UID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 UID 1337（sidecar 代理的 ID），绕过 Istio Iptables 重定向规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;强制所有 Pod 指定非 1337 的 UID。&lt;/li&gt;
&lt;li&gt;检查所有容器镜像以检查 UID 1337 并拒绝这些镜像。此检查可以使用准入 Webhook 或由管理镜像注册表的中央团队来执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：禁用或限制 UID 1337 的使用，定期审计 Pod 的 UID 配置，确保没有绕过行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-pod-能力net_adminnet_raw&#34;&gt;滥用 Pod 能力（NET_ADMIN、NET_RAW）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 NET_ADMIN 和 NET_RAW 能力，移除 Istio Iptables 规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队启用 Istio CNI（以避免授予应用团队提升的权限），并限制对原始 Kubernetes Pod 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查和监控 Pod 的权限配置，确保没有越权行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过入站流量约束&#34;&gt;绕过入站流量约束&lt;/h2&gt;
&lt;h3 id=&#34;滥用-peerauthentication&#34;&gt;滥用 PeerAuthentication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个针对每个命名空间/每个工作负载的 PeerAuthentication 资源，启用 PERMISSIVE 认证模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio PeerAuthentication 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 PeerAuthentication 配置，确保所有入站流量都按照要求加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过出站流量约束&#34;&gt;绕过出站流量约束&lt;/h2&gt;
&lt;h3 id=&#34;滥用-serviceentry&#34;&gt;滥用 ServiceEntry&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个 ServiceEntry，直接访问外部服务，而无需经过 Egress 网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio ServiceEntry 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 ServiceEntry 配置，确保没有绕过行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-externalname-服务&#34;&gt;滥用 ExternalName 服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个类型为 ExternalName 的 Kubernetes Service，直接访问外部服务，而无需经过 Egress 网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Kubernetes Service 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 Kubernetes Service 的类型配置，确保没有绕过行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;无法控制地更改-istio-sidecar-配置&#34;&gt;无法控制地更改 Istio Sidecar 配置&lt;/h2&gt;
&lt;h3 id=&#34;滥用-sidecar-资源&#34;&gt;滥用 Sidecar 资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个针对每个工作负载的 Istio Sidecar 资源，并将 &lt;code&gt;outboundTrafficPolicy&lt;/code&gt; 字段设置为 &lt;code&gt;ALLOW_ANY&lt;/code&gt;（覆盖可能的全局值 &lt;code&gt;REGISTRY_ONLY&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio Sidecar 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 Sidecar 资源配置，确保没有覆盖全局设置的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-envoyfilter&#34;&gt;滥用 EnvoyFilter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建 EnvoyFilter，导致与现有 Istio 对象冲突，从而引发 DoS 攻击或违反安全策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio EnvoyFilter 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 EnvoyFilter 配置，确保没有不当使用行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格应作为分层防御的一部分&#34;&gt;服务网格应作为分层防御的一部分&lt;/h2&gt;
&lt;p&gt;服务网格被描述为现有安全模型的一个补充层，通过在传统安全控制之上添加更细粒度的安全策略来增强微服务的安全性。然而，文章强调了服务网格无法独立保障微服务的全面安全，而是应当作为整体安全策略的一部分。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/security-layers.svg&#34; data-img=&#34;/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/security-layers.svg&#34; alt=&#34;image&#34; data-caption=&#34;微服务安全分层架构&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;微服务安全分层架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;服务网格主要通过在每个服务实例旁部署一个轻量级的代理（sidecar），来管理和控制网络流量。这使得它能够在网络层面上实现精细的流量控制和策略执行，如流量加密、身份认证和授权。尽管服务网格能够提供诸如流量控制、服务发现和断路器等功能，这些功能本质上是对网络流量的管理，无法解决所有安全问题。例如，它不能替代应用层防火墙、入侵检测系统和数据安全等更传统的安全措施。&lt;/p&gt;
&lt;p&gt;此外，服务网格依赖于正确的配置和管理，配置不当可能导致安全漏洞。因此，尽管服务网格是现代微服务架构中不可或缺的一部分，它应该与传统的安全措施相结合，共同构成一个全面的、多层次的安全策略框架。参考&lt;a href=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/&#34; title=&#34;如何通过服务网格增强微服务的安全性&#34;&gt;如何通过服务网格增强微服务的安全性&lt;/a&gt;以进一步了解如何加强服务网格的安全。&lt;/p&gt;
&lt;h2 id=&#34;长期解决方案和社区合作&#34;&gt;长期解决方案和社区合作&lt;/h2&gt;
&lt;p&gt;Istio 社区每年都会进行一次安全审计，见 &lt;a href=&#34;https://istio.io/latest/blog/2021/ncc-security-assessment/&#34; title=&#34;2021 年&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021 年&lt;/a&gt;、&lt;a href=&#34;https://istio.io/latest/blog/2023/ada-logics-security-assessment/&#34; title=&#34;2022 年&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022 年&lt;/a&gt; 的安全审计结果。从结果中我们可以看到，Istio 的安全态势有了很大的提升。确保你的 Istio 服务网格符合&lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/security/&#34; title=&#34;安全最佳实践&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全最佳实践&lt;/a&gt;。另外，你还需要关注 &lt;a href=&#34;https://istio.io/latest/news/security/&#34; title=&#34;Istio CVE 公告栏&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio CVE 公告栏&lt;/a&gt;，或者使用如 &lt;a href=&#34;https://tetrate.io/tetrate-istio-subscription/&#34; title=&#34;Tetrate Istio Subscription&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Subscription&lt;/a&gt; 这类工具来扫描 Istio 服务网格的各种 CVE，部署符合 FIPS 并经过 FIPS 验证的 Istio 发行版。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;服务网格通过在应用程序外部管理控制流，为微服务架构提供了额外的安全层。这允许在不影响应用程序性能的前提下，加强服务之间的通信安全。在部署服务网格时，推荐使用 Istio 的 Egress Gateway 来管理出口流量，结合 Kubernetes 的 NetworkPolicy，确保所有出口流量都必须经过网关，从而防止潜在的数据泄露和其他安全威胁。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/istio-how-to-enforce-egress-traffic-using-istios-authorization-policies/&#34; title=&#34;How to enforce egress traffic using Istio’s authorization policies - tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to enforce egress traffic using Istio’s authorization policies - tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/security/&#34; title=&#34;Istio Security Best Practice - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Security Best Practice - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/optimize-traffic-management-and-security-with-these-service-mesh-best-practices/&#34; title=&#34;Optimize Traffic Management and Security with These Service Mesh Best Practices - tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Optimize Traffic Management and Security with These Service Mesh Best Practices - tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2023/ada-logics-security-assessment/&#34; title=&#34;Istio publishes results of 2022 security audit - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio publishes results of 2022 security audit - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2021/ncc-security-assessment/&#34; title=&#34;Announcing the results of Istio’s first security assessment - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Announcing the results of Istio’s first security assessment - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>乌兰察布之旅：探索火山与失落的村庄</title>
      <link>https://jimmysong.io/blog/ulanqab-trip/</link>
      <pubDate>Tue, 23 Jul 2024 15:24:08 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/ulanqab-trip/</guid>
      <description>
        
        
        &lt;p&gt;上个周末，我从北京自驾前往乌兰察布，经历了一段全程 995 公里的旅程。周五晚上，我从北京东四环出发，驶过 295 公里，抵达乌兰察布兴和县，暂住一晚。清晨，我们满怀期待地出发，迎接乌兰哈达火山的壮丽景观。&lt;/p&gt;
&lt;p&gt;乌兰哈达火山地质公园是一个免费开放的景区，景区公路和一些配套设施还在建设中。我从北面进入公园，首先到达的是 3 号火山。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=1806349286&amp;amp;bvid=BV1Wb421J7ju&amp;amp;cid=1624436740&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;当天虽然温度只有 31°C，但紫外线格外强烈。11 点钟，我们开始攀登 3 号火山。烈日当空，紫外线炙热，我穿着防晒服，T 恤已经被汗水浸湿，汗珠如豆粒般大小不断滴落，仿佛在与这片广袤的天地进行一场激烈的对抗。当地的海拔达到了 1600 米，空气清新而稀薄。&lt;/p&gt;
&lt;h2 id=&#34;乌兰哈达火山地质公园&#34;&gt;乌兰哈达火山地质公园&lt;/h2&gt;
&lt;p&gt;乌兰哈达火山地质公园位于内蒙古乌兰察布市，这里保存着一片完好的火山群，展现着大自然的鬼斧神工和地质变迁的壮丽画卷。火山群由多座火山组成，其中最著名的 3 号和 6 号火山，被分别称为“北炼丹炉”和“南炼丹炉”。&lt;/p&gt;
&lt;p&gt;我们首先攀登了 3 号火山，从山顶俯瞰，火山口清晰可见，周围的火山岩石展现出奇特的地质构造，仿佛在诉说着那段遥远而神秘的历史。随后，我们自驾途径 6 号火山，由于交通堵塞，不得不掉头返回。3 号火山的南面已经被挖得面目全非，只有从北面看才能看出完整的火山形状。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-volcano-number-three.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-volcano-number-three.webp&#34; alt=&#34;image&#34; data-caption=&#34;内蒙古乌兰察布乌兰哈达火山地质公园，3 号火山（北炼丹炉）&#34;&gt;
  
  
  &lt;figcaption&gt;内蒙古乌兰察布乌兰哈达火山地质公园，3 号火山（北炼丹炉）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-volcano-number-five.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-volcano-number-five.webp&#34; alt=&#34;image&#34; data-caption=&#34;内蒙古乌兰察布乌兰哈达火山地质公园，6 号火山（南炼丹炉）&#34;&gt;
  
  
  &lt;figcaption&gt;内蒙古乌兰察布乌兰哈达火山地质公园，6 号火山（南炼丹炉）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;夜晚，我们住在现代化的“蒙古包”里。蒙古包的构造独特，圆形设计不仅抵御风沙，还能保持内部温暖。现代蒙古包则在传统基础上融合了现代元素，提供了更为舒适的居住体验。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-mongolian-yurt.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-mongolian-yurt.webp&#34; alt=&#34;image&#34; data-caption=&#34;夜晚住宿在现代「蒙古包」&#34;&gt;
  
  
  &lt;figcaption&gt;夜晚住宿在现代「蒙古包」&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;火山岩石具有独特的地质特征，这些岩石形成于数百万年前火山喷发的熔岩冷却后。它们质地坚硬，颜色多样，从黑色到红色不等。这些岩石不仅是大自然的杰作，也是地质学研究的宝贵材料。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-volcano-close-up.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-volcano-close-up.webp&#34; alt=&#34;image&#34; data-caption=&#34;火山环境特写&#34;&gt;
  
  
  &lt;figcaption&gt;火山环境特写&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;生态保护红线&#34;&gt;生态保护红线&lt;/h2&gt;
&lt;p&gt;生态保护红线是为了保护生态系统、维护生态安全而划定的严格保护区域。乌兰察布地区的生态保护红线确保了火山地质公园和周边生态环境的原始风貌得以保存。这片大地上的生态保护红线，像是一道无形的屏障，守护着这片古老而神秘的土地。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-ecological-wealth.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-ecological-wealth.webp&#34; alt=&#34;image&#34; data-caption=&#34;察哈尔右翼后旗生态保护红线&#34;&gt;
  
  
  &lt;figcaption&gt;察哈尔右翼后旗生态保护红线&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;卓资县，位于乌兰察布的偏远角落。由于经济发展滞后，人口逐年减少，许多村庄因此被废弃。这些废弃的村庄见证了人口迁移和城镇化的历史变迁，仿佛在无声地诉说着一个个时代的故事。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-wild.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-wild.webp&#34; alt=&#34;image&#34; data-caption=&#34;卓资县的村庄里羊比人多&#34;&gt;
  
  
  &lt;figcaption&gt;卓资县的村庄里羊比人多&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;上图中上方左二为战国赵长城遗址，公元前 300 年，赵武灵王修建的长城，今复何在？&lt;/p&gt;
&lt;p&gt;赵长城，为赵武灵王时所筑，故也称赵武灵王长城。据《史记·匈奴列传》记载：“赵武灵王变俗，胡服，习骑射，北破林胡、楼烦，筑长城，自代并阴山下，至高阙为塞。”&lt;/p&gt;
&lt;p&gt;拍摄于乌兰察布市察哈尔右翼后旗四胜路马房沟附近的树林里，成百上千只鸟时而隐藏在树林里，时而飞到远处的山坡上，蔚为壮观。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=1606455527&amp;amp;bvid=BV1t2421Z7tv&amp;amp;cid=1624561303&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;我们在生态保护红线的地图上采用投飞镖的方式随机造访一个村子，投中了胜利村。几经辗转，我们发现胜利村在手机地图上甚至没有路线指引。最终到达的村子已经不复存在，只留下一些荒废的房子，静静地伫立在这片广袤的土地上。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-abandoned-village.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ulanqab-trip/ulanqab-abandoned-village.webp&#34; alt=&#34;image&#34; data-caption=&#34;卓资县位于生态保护红线内荒废的房子&#34;&gt;
  
  
  &lt;figcaption&gt;卓资县位于生态保护红线内荒废的房子&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这次乌兰察布之旅让我深刻感受到了内蒙古独特的自然景观和人文历史。从壮丽的火山地质公园到失落的乡村，每一处景点都给我留下了深刻的印象。这次旅程不仅让我放松了身心，也让我对生态保护和人口流动有了更多的思考。在这片辽阔的土地上，我看到了自然的壮丽与人类历史的沉浮，内心也随之变得更加丰盈和宁静。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>介绍 Tetrate Enterprise Gateway 及与 Istio 集成：云原生应用的全面网关解决方案</title>
      <link>https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/</link>
      <pubDate>Mon, 22 Jul 2024 16:43:16 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/</guid>
      <description>
        
        
        &lt;h2 id=&#34;teg-简介&#34;&gt;TEG 简介&lt;/h2&gt;
&lt;p&gt;Tetrate Enterprise Gateway（TEG）是基于 &lt;a href=&#34;https://gateway.envoyproxy.io/&#34; title=&#34;Envoy Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt; (EG) 的企业级解决方案，专门针对 Envoy Proxy 设计，通过 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; title=&#34;Kubernetes Gateway API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt; 提供更易于消费的 Envoy 代理配置和管理包。TEG 结合了 Kubernetes Gateway API 的特性，支持在 Kubernetes 中轻松暴露服务和应用程序。&lt;/p&gt;
&lt;p&gt;TEG 相对于 Envoy Gateway 的主要新增特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;全局速率限制（Rate Limiting）&lt;/strong&gt;：TEG 支持基于 IP 5-tuple、请求头等进行流量控制，需要通过 Redis 实例管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WAF 功能（Web Application Firewall）&lt;/strong&gt;：TEG 提供了与 &lt;code&gt;mod_security&lt;/code&gt; 兼容的 WAF 功能，增强了安全防护能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC/OAuth2认证&lt;/strong&gt;：支持在网关级别进行 OIDC/OAuth2 认证，应用程序可以按路由配置认证方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 Kubernetes Gateway API&lt;/strong&gt;：相较于其他 API，Kubernetes Gateway API 的设计更加现代，结合了众多 Ingress 实现的经验，将网关的配置与流量的路由分离，使平台所有者可以管理网关，而应用团队可以掌控流量路由。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TEG 将 Envoy 的高级网络流量处理能力带入 Kubernetes 环境，提供了一种简化的方法来部署和管理负载平衡、API 网关功能、安全控制等，同时支持现代的、开放的应用程序暴露 API，如 Kubernetes Gateway API。这些特性使 TEG 成为一个功能丰富、易于管理的企业级网关解决方案。&lt;/p&gt;
&lt;h2 id=&#34;teg-的能力&#34;&gt;TEG 的能力&lt;/h2&gt;
&lt;p&gt;Tetrate Enterprise Gateway for Envoy (TEG) 构建于 Envoy Gateway 项目之上，提供了一种易于使用和操作的入口，具有先进的按请求流量控制功能、与现有环境的轻松集成，以及一流的可观测性，以理解应用流量和入口健康状况。&lt;/p&gt;
&lt;h3 id=&#34;易于安装操作和升级&#34;&gt;易于安装、操作和升级&lt;/h3&gt;
&lt;p&gt;TEG 从头到尾注重易用性：从首次安装到启用应用团队，从故障排查到执行升级。TEG 的初始安装只需几分钟，你就可以开始使用高级功能，如速率限制、单点登录和金丝雀流量路由。TEG 还简化了运维流程，与你现有的指标、跟踪和日志记录管道相适应，我们还提供了一个完整的、预配置的可观测性堆栈，以评估 EG 产生的数据，并帮助你计划如何将 TEG 集成到你的现有指标堆栈中。&lt;/p&gt;
&lt;h3 id=&#34;操作性一流的功能&#34;&gt;操作性：一流的功能&lt;/h3&gt;
&lt;p&gt;TEG 由在生产环境中运行大型、关键系统的经验丰富团队构建。TEG 简化了漏洞检查和持续升级过程，与你现有的指标和跟踪提供商轻松集成，并为你现有的 Grafana 部署提供了一套强大的入口可观测性仪表板。&lt;/p&gt;
&lt;h3 id=&#34;与现有的环境集成&#34;&gt;与现有的环境集成&lt;/h3&gt;
&lt;p&gt;TEG 不仅适用于绿地部署的启动，还可以直接与传统环境以及现代云原生环境集成。它可以帮助你在现有的应用生态系统和你正在构建的云原生目标之间架起桥梁。&lt;/p&gt;
&lt;h3 id=&#34;引入现有的可观测性堆栈&#34;&gt;引入现有的可观测性堆栈&lt;/h3&gt;
&lt;p&gt;你的组织可能已经有一个可观测性系统，你的应用和运营团队已经训练有素地使用它。TEG 可以轻松地嵌入到现有的基础设施中，并在你的组织中运行。TEG 将使 Envoy 的丰富指标集导出，让你的应用团队对其应用流量的行为有最佳的洞察，并看到他们所做配置更改的效果。TEG 还为运行它的平台团队提供了仪表板和警报功能，使你能够自信地操作并快速解决发现的问题。&lt;/p&gt;
&lt;h3 id=&#34;简单的负载平衡&#34;&gt;简单的负载平衡&lt;/h3&gt;
&lt;p&gt;Envoy 非常强大，但要使其启动并运行简单用例可能很难——像 Istio 这样的系统提供 Envoy 入口管理作为更广泛功能套件的一部分，也附带了许多与简单、流畅的操作体验相冲突的额外功能。这就是 Envoy Gateway 存在的原因：使 Envoy 的强大功能易于用于入口用例。&lt;/p&gt;
&lt;h3 id=&#34;简单的-api-网关&#34;&gt;简单的 API 网关&lt;/h3&gt;
&lt;p&gt;组织中绝大多数 API 网关的使用归结为三件事：认证发起请求的用户；限制用户对服务的访问；在此 API 端点的服务实例之间进行负载平衡。TEG 简化了在传统和云原生环境中完成这三项任务的过程。&lt;/p&gt;
&lt;h2 id=&#34;teg-的架构&#34;&gt;TEG 的架构&lt;/h2&gt;
&lt;p&gt;下图展示的是 TEG 的架构图。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/teg-architecture.svg&#34; data-img=&#34;/blog/explore-tetrate-enterprise-gateway/teg-architecture.svg&#34; alt=&#34;image&#34; data-caption=&#34;TEG 架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;TEG 架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;从架构图中可以看出，Tetrate Enterprise Gateway for Envoy (TEG) 的架构设计包括以下主要组件和流程：&lt;/p&gt;
&lt;h3 id=&#34;主要组件&#34;&gt;主要组件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes Cluster&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Envoy Gateway&lt;/strong&gt;：作为控制平面，配置和管理 Envoy 代理，消费 Kubernetes Gateway API 的配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metrics Collection&lt;/strong&gt;：使用 Prometheus 或 OpenTelemetry (OTEL) 作为指标收集点，用于监控 Envoy Proxy 的性能和健康状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Envoy Proxy&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为数据平面，直接处理所有进入的流量，支持基于 Kubernetes Gateway API 的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coraza WAF&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为 TEG 的一部分部署，执行 WAF 规则以保护应用免受恶意请求攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis Rate Limit Store&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为全局速率限制的存储解决方案，用于跨所有 Envoy 实例维护统一的速率限制计数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Your OIDC Server&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理 OAuth2.0 和 OIDC 认证流程，确保只有经过认证的用户可以访问特定的路由和服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;工作流程&#34;&gt;工作流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流量入口&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有外部流量首先通过上游的负载均衡器，然后被路由到 Envoy Proxy。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Envoy Proxy 处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy Proxy 根据 Kubernetes Cluster 中的 Envoy Gateway 的配置处理流量。&lt;/li&gt;
&lt;li&gt;配置信息包括路由规则、安全策略（如 WAF 和速率限制）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全和认证&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coraza WAF&lt;/strong&gt;：在流量到达应用前，根据配置的 WAF 规则进行检查和过滤，提高安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC 认证&lt;/strong&gt;：OIDC Server 处理认证，Envoy Proxy 根据 OIDC Server 的验证结果决定是否允许访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;速率限制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Redis 存储进行速率限制，Envoy Proxy 将根据从 Redis 获取的数据执行速率限制策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能监控&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy Proxy 的性能和健康状态通过集成的指标收集系统（Prometheus 或 OTEL）进行监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;配置和管理&#34;&gt;配置和管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户可以通过 Kubernetes Gateway API 定义和应用 Envoy Proxy 的配置。&lt;/li&gt;
&lt;li&gt;这包括定义专用网关的具体配置，如安全规则、路由策略等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种架构设计利用了 Kubernetes 的灵活性和扩展性，并通过 Envoy 提供了强大的流量管理和安全功能。&lt;/p&gt;
&lt;h2 id=&#34;部署-teg&#34;&gt;部署 TEG&lt;/h2&gt;
&lt;p&gt;执行下面的命令部署 TEG V0.0.0：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;REGISTRY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;oci://docker.io/tetrate&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CHART_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;v0.0.0-latest&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm install teg &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REGISTRY&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/teg-envoy-gateway-helm &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --version &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CHART_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -n envoy-gateway-system --create-namespace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get pod -n envoy-gateway-system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到下面的结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAMESPACE              NAME                                                       READY   STATUS    RESTARTS        AGE
envoy-gateway-system   envoy-gateway-596dfbcb88-tx7xb                             1/1     Running   0               3m55s
envoy-gateway-system   envoy-ratelimit-674b8c955c-jhlfn                           2/2     Running   2 (3m48s ago)   3m54s
envoy-gateway-system   teg-envoy-gateway-64fd8c8fbb-59b4l                         1/1     Running   0               3m55s
envoy-gateway-system   teg-redis-86bb7d9b9d-27n44                                 1/1     Running   0               3m55s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部署示例应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create namespace httpbin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -n httpbin -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署 Envoy Proxy：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: dedicated-gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: httpbin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  gatewayClassName: teg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  listeners:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - name: http
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      protocol: HTTP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      port: 80
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后你会在 &lt;code&gt;envoy-gateway-system&lt;/code&gt; 命名空间下看到一个新的 Envoy 代理。&lt;/p&gt;
&lt;p&gt;部署 HTTPRoute，给网关配置路由：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: HTTPRoute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: httpbin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: httpbin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  parentRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - group: gateway.networking.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      kind: Gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      name: dedicated-gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  rules:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - matches:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            type: PathPrefix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            value: /httpbin/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      filters:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - type: URLRewrite
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          urlRewrite:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;              type: ReplacePrefixMatch
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;              replacePrefixMatch: /
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      backendRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - group: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          kind: Service
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          name: httpbin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          port: 8000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个路由配置中有一个 URLRewrite filter，重写 URL 前缀，去掉了 &lt;code&gt;/httpbin/&lt;/code&gt; 部分。&lt;/p&gt;
&lt;p&gt;发送流量测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DEDICATED_GATEWAY_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get gateway/dedicated-gateway -n httpbin -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.status.addresses[0].value}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -i http://&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DEDICATED_GATEWAY_IP&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/httpbin/get
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    为什么使用 &lt;code&gt;/httpbin/get&lt;/code&gt;?
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;在通过 Tetrate Enterprise Gateway for Envoy (TEG) 暴露 &lt;code&gt;httpbin&lt;/code&gt; 应用时，选择 &lt;code&gt;/httpbin/get&lt;/code&gt; 作为访问路径的原因主要是为了在同一个 Envoy 网关下能够同时支持多个应用或服务，并能根据不同的路径将流量正确地路由到指定的服务。&lt;/p&gt;
&lt;p&gt;这种路径前缀的设置方法允许系统管理员或开发人员为每个服务配置独立的路径前缀，从而通过单一的入口点（即 Envoy 网关）来管理对多个后端服务的访问。这样的配置增加了路由的灵活性，使得在不更改现有服务配置的情况下，轻松地扩展或修改服务的暴露方式。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;作为-istio-的入口网关&#34;&gt;作为 Istio 的入口网关&lt;/h2&gt;
&lt;p&gt;Istio 提供了成熟且灵活的入口网关支持，基于与 Tetrate Enterprise Gateway（TEG）相同的 Envoy 代理。Istio 主要专注于处理集群内服务之间的通信。相较之下，TEG 设计用于向外界暴露应用，处理人类用户的请求，并支持如 OIDC 单点登录等高级功能。通过结合 Istio 网格和 TEG 的高级网关功能，两者可以共同使用，以提升整体应用的可访问性和安全性。&lt;/p&gt;
&lt;p&gt;以下图示展示了 Istio 网格中入口网关的流量路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/istio-ingress-sidecar.svg&#34; data-img=&#34;/blog/explore-tetrate-enterprise-gateway/istio-ingress-sidecar.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 中入口网关的流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 中入口网关的流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下图展示了在引入 TEG 之后，流量如何从 Istio 网格边缘进入到内部。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/explore-tetrate-enterprise-gateway/istio-teg-integration.svg&#34; data-img=&#34;/blog/explore-tetrate-enterprise-gateway/istio-teg-integration.svg&#34; alt=&#34;image&#34; data-caption=&#34;引入 TEG 后流量从 Istio 网格边缘进入内部的流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;引入 TEG 后流量从 Istio 网格边缘进入内部的流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;将 TEG 集成到 Istio 网格中，通过在 TEG 上配置 sidecar 来颁发证书，同时避免 sidecar 拦截 TEG 中的流量。然后通过 Envoy Gateway 控制入口网关的流量路径。&lt;/p&gt;
&lt;h3 id=&#34;为-teg-与-istio-的互操作做准备&#34;&gt;为 TEG 与 Istio 的互操作做准备&lt;/h3&gt;
&lt;p&gt;为了使 TEG 作为 Istio 的入口网关，应注意以下关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在安装 Istio 时，避免启用 Ingress Gateway。我们将手动安装并配置 TEG 作为 Istio 的入口网关。&lt;/li&gt;
&lt;li&gt;由于 Istio 和 TEG 都使用 Envoy 作为代理，我们需要让 Istio 为 TEG 的网关 Pod 注入 Envoy sidecar，以便 TEG 可以安全地与 Istio 数据平面通信。&lt;/li&gt;
&lt;li&gt;配置 Envoy Gateway 创建的 Envoy 代理的&lt;a href=&#34;https://gateway.envoyproxy.io/latest/api/extension_types/#routingtype&#34; title=&#34;路由类型&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由类型&lt;/a&gt;为 &lt;code&gt;Service&lt;/code&gt; 而非 &lt;code&gt;Endpoint&lt;/code&gt;，确保 Envoy 代理能正确找到路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为 TEG 的命名空间添加标签，以确保数据平面获得 Istio sidecar 的注入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace envoy-gateway-system --overwrite&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还需要配置 TEG 的 sidecar，使其不处理进入网关的 Envoy 流量。注入 sidecar 的目的是使 Envoy Gateway 的组件及其创建的代理能够被纳入 Istio 网格，并挂载正确的证书进行安全通信。&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;control-plane-tls.yaml&#34; download&gt;control-plane-tls.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;appProtocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl patch service -n envoy-gateway-system envoy-gateway &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     --type strategic --patch-file control-plane-tls.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置 Envoy Gateway 中的 sidecar 不拦截流量：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;teg-sidecars-no-inbound.yaml&#34; download&gt;teg-sidecars-no-inbound.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.envoyproxy.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyProxy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;data-plane-sidecars&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-gateway-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Kubernetes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoyDeployment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;traffic.sidecar.istio.io/includeInboundPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routingType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f teg-sidecars-no-inbound.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 GatewayClass 的配置，将上述 sidecar 配置应用到 Envoy Gateway 数据平面的所有 &lt;code&gt;EnvoyProxy&lt;/code&gt; 上：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;gtwcls-use-envoyproxy.yaml&#34; download&gt;gtwcls-use-envoyproxy.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parametersRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.envoyproxy.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyProxy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-gateway-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;data-plane-sidecars&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl patch gatewayclass teg --patch-file gtwcls-use-envoyproxy.yaml --type merge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h3&gt;
&lt;p&gt;使用 minimal profile 部署 Istio，从而不部署 Ingress Gateway：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl install --set &lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;minimal -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重启-teg-控制平面&#34;&gt;重启 TEG 控制平面&lt;/h3&gt;
&lt;p&gt;现在 Istio 的 sidecar 注入已准备就绪，我们将重启所有 TEG 控制平面 Pod，它们将带有 sidecar 重新启动。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; d in envoy-gateway envoy-ratelimit teg-envoy-gateway teg-redis&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; kubectl rollout restart deployment -n envoy-gateway-system &lt;span class=&#34;nv&#34;&gt;$d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;部署测试应用&#34;&gt;部署测试应用&lt;/h3&gt;
&lt;p&gt;此步应在安装 Istio 之后进行，以确保它们也获得 sidecar 的注入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create namespace httpbin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace httpbin --overwrite&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -n httpbin -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置-teg&#34;&gt;配置 TEG&lt;/h3&gt;
&lt;p&gt;现在我们配置 TEG 处理边缘流量。&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;apps-gateway.yaml&#34; download&gt;apps-gateway.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;teg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f apps-gateway.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署应用网关，包含以下容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istio-init&lt;/code&gt;：由 Istio 注入，负责修改 pod 中的 iptables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;envoy&lt;/code&gt;：由 TEG 控制，作为入口网关&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istio-proxy&lt;/code&gt;：由 Istio 注入，负责与集群内部 pod 联系&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdown-manager&lt;/code&gt;：由 TEG 控制，负责 Pod 启停&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建 HTTP 路由：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;httpbin-route.yaml&#34; download&gt;httpbin-route.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/httpbin/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;URLRewrite&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;urlRewrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin.httpbin.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ReplacePrefixMatch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replacePrefixMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f httpbin-route.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;发送测试请求&#34;&gt;发送测试请求&lt;/h3&gt;
&lt;p&gt;获取网关的负载均衡器 IP 地址，并发送测试请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;GATEWAY_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get svc -n envoy-gateway-system -l gateway.envoyproxy.io/owning-gateway-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;apps -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].status.loadBalancer.ingress[0].ip}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v -H Host:www.example.com http://&lt;span class=&#34;nv&#34;&gt;$GATEWAY_URL&lt;/span&gt;/httpbin/get
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到来自 &lt;code&gt;httpbin&lt;/code&gt; 服务的正确响应，如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*   Trying 34.41.0.90:80...
* Connected to 34.41.0.90 (34.41.0.90) port 80
&amp;gt; GET /httpbin/get HTTP/1.1
&amp;gt; Host:www.example.com
&amp;gt; User-Agent: curl/8.7.1
&amp;gt; Accept: */*
&amp;gt;
* Request completely sent off
&amp;lt; HTTP/1.1 200 OK
&amp;lt; server: envoy
&amp;lt; date: Wed, 31 Jul 2024 08:21:58 GMT
&amp;lt; content-type: application/json
&amp;lt; content-length: 282
&amp;lt; access-control-allow-origin: *
&amp;lt; access-control-allow-credentials: true
&amp;lt; x-envoy-upstream-service-time: 11
&amp;lt;
{
  &amp;#34;args&amp;#34;: {},
  &amp;#34;headers&amp;#34;: {
    &amp;#34;Accept&amp;#34;: &amp;#34;*/*&amp;#34;,
    &amp;#34;Host&amp;#34;: &amp;#34;www.example.com&amp;#34;,
    &amp;#34;User-Agent&amp;#34;: &amp;#34;curl/8.7.1&amp;#34;,
    &amp;#34;X-Envoy-Attempt-Count&amp;#34;: &amp;#34;1&amp;#34;,
    &amp;#34;X-Envoy-External-Address&amp;#34;: &amp;#34;123.120.227.173&amp;#34;
  },
  &amp;#34;origin&amp;#34;: &amp;#34;123.120.227.173&amp;#34;,
  &amp;#34;url&amp;#34;: &amp;#34;http://www.example.com/get&amp;#34;
}
* Connection #0 to host 34.41.0.90 left intact
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启用严格的-mtls&#34;&gt;启用严格的 mTLS&lt;/h3&gt;
&lt;p&gt;运行下面的命令启用严格的 mTLS：







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;strict-mtls.yaml&#34; download&gt;strict-mtls.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PeerAuthentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-system&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mtls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STRICT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f strict-mtls.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;为网关启用-tls&#34;&gt;为网关启用 TLS&lt;/h3&gt;
&lt;p&gt;创建用于服务签名的根证书和私钥：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir example_certs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -x509 -sha256 -nodes -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -newkey rsa:2048 -subj &lt;span class=&#34;s1&#34;&gt;&amp;#39;/O=example Inc./CN=example.com&amp;#39;&lt;/span&gt; -keyout example_certs/example.com.key -out example_certs/example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为 &lt;code&gt;www.example.com&lt;/code&gt; 创建证书和私钥：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -out example_certs/www.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs/www.example.com.key -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/CN=www.example.com/O=www organization&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -req -sha256 -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -CA example_certs/example.com.crt -CAkey example_certs/example.com.key -set_serial &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -in example_certs/www.example.com.csr -out example_certs/www.example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为入口网关创建 secret：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create -n httpbin secret tls httpbin-credential &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --key&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example_certs/www.example.com.key &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --cert&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example_certs/www.example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置入口网关：







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;tls-apps-gateway.yaml&#34; download&gt;tls-apps-gateway.yaml&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;teg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Terminate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certificateRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin-credential&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f tls-apps-gateway.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发送测试请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v -H Host:www.example.com --resolve &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.example.com:443:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GATEWAY_URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --cacert example_certs/example.com.crt &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.example.com:443/httpbin/get&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将可以通过 HTTPS 访问网格内的 &lt;code&gt;httpbin&lt;/code&gt; 服务。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Tetrate Enterprise Gateway 为企业提供了一种强大的网关解决方案，能够在云原生环境中高效地暴露和管理应用服务。通过其基于 Envoy 的架构和对 Kubernetes Gateway API 的支持，TEG 不仅确保了高性能的流量管理，还大幅简化了网关的部署和维护。无论是面对复杂的安全需求还是高流量的业务场景，TEG 都能提供可靠的支持，帮助企业实现其业务连续性和技术创新。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.tetrate.io/envoy-gateway/v0.0.0-latest/howto/eg-and-istio&#34; title=&#34;Using TEG in Conjunction with an Istio Service Mesh - docs.tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using TEG in Conjunction with an Istio Service Mesh - docs.tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>探索 Envoy 1.31.0：新特性与性能提升全解析</title>
      <link>https://jimmysong.io/blog/exploring-envoy-1-31-features-performance/</link>
      <pubDate>Sat, 20 Jul 2024 07:30:55 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/exploring-envoy-1-31-features-performance/</guid>
      <description>
        
        
        &lt;p&gt;今天 Envoy Proxy 1.31.0 发布，这是今年继 1.29、1.30 以来发布的第三个大版本。Envoy Proxy 1.31.0 的发布标志着此开源网络代理项目在性能优化和功能增强方面又迈出了重要一步。此版本包括了一系列引人注目的新特性、行为变化和新配置选项，下面我们将逐一解析这些更新，帮助你充分利用 Envoy 的最新能力。&lt;/p&gt;
&lt;h2 id=&#34;新特性&#34;&gt;新特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HTTP/3 &amp;ldquo;Happy Eyeballs&amp;rdquo; 特性&lt;/strong&gt;: HTTP/3的支持现在更为智能，新加入的“happy eyeballs”算法可以在多个 IP 地址族中更快找到最优连接路径，提升连接的可靠性和速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proxy Protocol 类型元数据支持&lt;/strong&gt;: 在代理协议监听器中，默认现在会填充类型化的元数据，为高级路由和策略实施提供更多的灵活性和精确控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redis 命令支持&lt;/strong&gt;: Envoy 现在支持所有 Bloom 1.0.0 的 Redis 命令，扩展了与 Redis 交互的能力，尤其适用于需要高级数据结构操作的场景。&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    Happy Eyeballs
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;Happy Eyeballs（快乐的眼睛）是一种网络算法，主要用于当一个设备同时支持 IPv4 和 IPv6 时，快速决定应该使用哪种 IP 协议来建立连接。该算法通过几乎同时启动两个连接尝试——一个使用 IPv4，另一个使用 IPv6——并使用哪个首先成功建立的连接，从而减少了连接延迟。&lt;/p&gt;
&lt;p&gt;在 HTTP/3 中应用 Happy Eyeballs 特性，尤其是 Envoy 1.31 版本中的实现，可以改进服务在支持多种网络协议的环境中的表现。例如，如果一个服务的 IPv4 连接速度比 IPv6 快，Envoy 会偏好 IPv4，反之亦然。这样做的好处是减少了尝试连接的总时间，提高了用户体验和服务效率。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;行为变化&#34;&gt;行为变化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Thread Local 存储变更&lt;/strong&gt;: &lt;code&gt;SlotImpl&lt;/code&gt; 类的行为更新，其析构函数现可在任何线程上被调用，提高了线程局部存储的灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP/2 和 QUIC 性能提升&lt;/strong&gt;: 默认启用新的 HTTP/2 编解码器和对 HTTP/3 的优化，包括性能改进和新的连接尝试机制，显著提升了性能和稳定性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;弃用与移除&#34;&gt;弃用与移除&lt;/h2&gt;
&lt;p&gt;此版本中，多个旧有的配置和运行时标志被正式弃用和移除，以清理代码库并提升维护效率。这包括一些老旧的 TLS 和 HTTP 配置选项，用户应检查并更新他们的配置以免受到影响。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Envoy 1.31.0 的发布提供了许多值得关注的新特性和改进，不仅增强了其作为现代微服务架构核心组件的地位，也进一步证明了其作为业界领先代理解决方案的能力。无论是在性能提升还是功能拓展方面，Envoy 1.31.0 都为用户带来了实质性的好处。&lt;/p&gt;
&lt;p&gt;确保查看完整&lt;a href=&#34;https://github.com/envoyproxy/envoy/releases/tag/v1.31.0&#34; title=&#34;更新文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更新文档&lt;/a&gt;，了解所有详细的配置指南和更新说明，以充分利用 Envoy 1.31.0 的潜力。&lt;/p&gt;
&lt;p&gt;Envoy 的每次更新都是基于社区的反馈和贡献，我们期待看到你如何利用这些新特性来优化你的应用和服务。如果你有任何问题或需要帮助，欢迎在 Slack 或 GitHub 上与社区交流。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>如何参与 Envoy Gateway 社区：贡献或提交代码指南</title>
      <link>https://jimmysong.io/blog/envoy-gateway-contributor-guide/</link>
      <pubDate>Wed, 17 Jul 2024 13:36:15 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-gateway-contributor-guide/</guid>
      <description>
        
        
        &lt;p&gt;Envoy Gateway 是由 Envoy Proxy 社区推动的一个开源 API 网关项目，结合了 Contour、Emissary 等项目力量。这个指南将帮助你理解如何贡献代码和参与社区。&lt;/p&gt;
&lt;h2 id=&#34;开始之前&#34;&gt;开始之前&lt;/h2&gt;
&lt;p&gt;了解项目的&lt;a href=&#34;https://github.com/envoyproxy/gateway/blob/main/GOALS.md&#34; title=&#34;目标和愿景&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;目标和愿景&lt;/a&gt;是非常重要的。Envoy Gateway 旨在作为一个独立或基于 Kubernetes 的应用程序网关，使用 Gateway API 资源来管理 Envoy 代理。&lt;/p&gt;
&lt;h2 id=&#34;如何参与&#34;&gt;如何参与&lt;/h2&gt;
&lt;h3 id=&#34;1-沟通协作&#34;&gt;1. 沟通协作&lt;/h3&gt;
&lt;p&gt;在开发前，建议通过&lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;或&lt;a href=&#34;https://communityinviter.com/apps/envoyproxy/envoy&#34; title=&#34;Slack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;与社区交流。始终创建一个 GitHub Issue 来讨论你的想法。&lt;/p&gt;
&lt;h3 id=&#34;2-贡献准则&#34;&gt;2. 贡献准则&lt;/h3&gt;
&lt;p&gt;遵守&lt;a href=&#34;https://gateway.envoyproxy.io/contributions/contributing/&#34; title=&#34;贡献准则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;贡献准则&lt;/a&gt;，它包括代码规范和社区行为准则。&lt;/p&gt;
&lt;h3 id=&#34;3-提交代码&#34;&gt;3. 提交代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;签署 DCO&lt;/strong&gt;：确保你的提交信息包含 DCO 签名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建 PR&lt;/strong&gt;：Fork 仓库后，提交 PR。确保通过所有自动化测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码审查&lt;/strong&gt;：PR 会被维护人员审查，一旦满足条件，将会被合并。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构建和测试指南&#34;&gt;构建和测试指南&lt;/h2&gt;
&lt;h3 id=&#34;环境准备&#34;&gt;环境准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;必需工具&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Go（版本 1.22+）&lt;/li&gt;
&lt;li&gt;Make（版本 4.0+）&lt;/li&gt;
&lt;li&gt;Docker（可选，版本 20.10.16+，用于构建镜像）&lt;/li&gt;
&lt;li&gt;Python3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置步骤&lt;/strong&gt;：确保所有工具均已安装并配置好环境变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码构建&#34;&gt;代码构建&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建命令&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;构建全部二进制文件：&lt;code&gt;make build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;仅构建 Envoy Gateway：&lt;code&gt;make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构建控制工具 &lt;code&gt;egctl&lt;/code&gt;：&lt;code&gt;make build BINS=&amp;quot;egctl&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运行测试&lt;/strong&gt;：执行 &lt;code&gt;make test&lt;/code&gt; 来进行 Go 语言的测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成测试数据&lt;/strong&gt;：执行 &lt;code&gt;make testdata&lt;/code&gt; 来生成 YAML 格式的测试数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lint-检查&#34;&gt;Lint 检查&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行 Lint&lt;/strong&gt;：运行 &lt;code&gt;make lint&lt;/code&gt; 确保代码风格和标准一致性（注意修正现有的拼写错误）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;镜像操作&#34;&gt;镜像操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建镜像&lt;/strong&gt;：&lt;code&gt;IMAGE=docker.io/&amp;lt;dockerhub-id&amp;gt;/gateway-dev make image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推送多架构镜像&lt;/strong&gt;：&lt;code&gt;IMAGE=docker.io/&amp;lt;dockerhub-id&amp;gt;/gateway-dev make push-multiarch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署和调试&#34;&gt;部署和调试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本地集群创建&lt;/strong&gt;：使用 &lt;code&gt;make create-cluster&lt;/code&gt; 在 Kind 上创建测试/开发用的集群。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署到 Kubernetes&lt;/strong&gt;：使用 &lt;code&gt;IMAGE=docker.io/&amp;lt;dockerhub-id&amp;gt;/gateway-dev TAG=&amp;lt;image-tag&amp;gt; make kube-deploy&lt;/code&gt; 将 Envoy Gateway 部署至 Kubernetes。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署示例应用&lt;/strong&gt;：执行 &lt;code&gt;make kube-demo&lt;/code&gt; 部署 demo 后端服务及相关网络资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除部署&lt;/strong&gt;：执行 &lt;code&gt;make kube-demo-undeploy&lt;/code&gt; 删除示例应用。执行 &lt;code&gt;make kube-undeploy&lt;/code&gt; 删除 Envoy Gateway。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    Kind 中运行的 Pod 列表
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;当你完成 Envoy Gateway 和示例应用部署后，运行 &lt;code&gt;kubectl get pod -A&lt;/code&gt; 命令，你将看到如下所示的 Pod 列表。&lt;/p&gt;
&lt;details class=&#34;spoiler&#34; id=&#34;spoiler-0&#34;&gt;
  &lt;summary&gt;查看 Kind 中运行的 Pod&lt;/summary&gt;
  &lt;p&gt;&lt;pre&gt;&lt;code&gt; NAMESPACE              NAME                                                  READY   STATUS    RESTARTS      AGE
 default                backend-96f75bbf-tcdf7                                1/1     Running   1 (97s ago)   13h
 envoy-gateway-system   envoy-default-eg-e41e7b31-668f754989-wb7xr            2/2     Running   2 (97s ago)   13h
 envoy-gateway-system   envoy-gateway-b457dc69b-l77cr                         1/1     Running   2 (97s ago)   13h
 kube-system            coredns-5dd5756b68-b494d                              1/1     Running   1 (97s ago)   14h
 kube-system            coredns-5dd5756b68-j46bx                              1/1     Running   1 (97s ago)   14h
 kube-system            etcd-envoy-gateway-control-plane                      1/1     Running   1 (97s ago)   14h
 kube-system            kindnet-sq4b4                                         1/1     Running   1 (97s ago)   14h
 kube-system            kube-apiserver-envoy-gateway-control-plane            1/1     Running   1 (97s ago)   14h
 kube-system            kube-controller-manager-envoy-gateway-control-plane   1/1     Running   2 (97s ago)   14h
 kube-system            kube-proxy-4x72s                                      1/1     Running   1 (97s ago)   14h
 kube-system            kube-scheduler-envoy-gateway-control-plane            1/1     Running   2 (97s ago)   14h
 local-path-storage     local-path-provisioner-6f8956fb48-shjcz               1/1     Running   2 (59s ago)   14h
 metallb-system         controller-5c6b6c8447-kjl4n                           1/1     Running   2 (59s ago)   14h
 metallb-system         speaker-6zlrb                                         1/1     Running   1 (97s ago)   14h
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;调试-envoy-配置&#34;&gt;调试 Envoy 配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;端口转发设置&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ENVOY_DEPLOYMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get deploy -n envoy-gateway-system --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gateway.envoyproxy.io/owning-gateway-namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default,gateway.envoyproxy.io/owning-gateway-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eg -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl port-forward deploy/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ENVOY_DEPLOYMENT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; -n envoy-gateway-system 19000:19000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问&lt;/strong&gt;：在浏览器中打开 &lt;code&gt;http://localhost:19000&lt;/code&gt; 访问 Envoy 管理界面进行配置调试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络环境适配&lt;/strong&gt;：在中国大陆进行构建和推送镜像时，可能需要设置 Docker 代理以确保依赖的镜像能够下载。详细操作可参考&lt;a href=&#34;https://docs.docker.com/network/proxy/&#34; title=&#34;设置 Docker 代理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;设置 Docker 代理&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    注意事项
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    &lt;p&gt;若你在中国大陆的网络环境下构建和推送镜像，需要为 Docker 设置代理，否则你将无法下载一些依赖镜像。你可以将它们下载到本地后再用 &lt;code&gt;kind load&lt;/code&gt; 命令加载到 kind 里。需要下载和加载到 kind 里的镜像见下面的代码。&lt;/p&gt;
&lt;details class=&#34;spoiler&#34; id=&#34;spoiler-0&#34;&gt;
  &lt;summary&gt;pull-and-load-images-for-kind.sh&lt;/summary&gt;
  &lt;p&gt;&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;pull-and-load-images-for-kind.sh&#34; download&gt;pull-and-load-images-for-kind.sh&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pull the images and load them into the kind cluster...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane quay.io/metallb/controller:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane quay.io/metallb/speaker:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane docker.io/jimmysong/gateway-dev:435a4dc1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane envoyproxy/envoy:distroless-dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane quay.io/metallb/controller:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane quay.io/metallb/speaker:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane docker.io/jimmysong/gateway-dev:435a4dc1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane envoyproxy/envoy:distroless-dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;更多资源&#34;&gt;更多资源&lt;/h3&gt;
&lt;p&gt;想深入了解如何进行高级测试和贡献，详见 &lt;a href=&#34;https://gateway.envoyproxy.io/contributions/develop/&#34; title=&#34;Envoy Gateway 开发文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway 开发文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;加入我们，与全球开发者共同推进 Envoy Gateway 的成长，同时提升你的开发技能和对开源社区的理解。&lt;/p&gt;
&lt;h2 id=&#34;加入-envoy-gateway-中文交流群&#34;&gt;加入 Envoy Gateway 中文交流群&lt;/h2&gt;
&lt;p&gt;为了便于中文和中国时区的用户交流，Envoy Gateway 社区成立的微信群，详见&lt;a href=&#34;https://jimmysong.io/notice/envoy-gateway-group/&#34; title=&#34;通知&#34;&gt;通知&lt;/a&gt;，该群成立于 2023 年 4 月，目前已有 400 多名成员。你可以联系&lt;a href=&#34;https://jimmysong.io/contact/&#34; title=&#34;联系我&#34;&gt;联系我&lt;/a&gt;、&lt;a href=&#34;https://www.liuxunzhuo.com/&#34; title=&#34;刘训灼&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;刘训灼&lt;/a&gt;、&lt;a href=&#34;https://zhaohuabing.com/&#34; title=&#34;赵化冰&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;赵化冰&lt;/a&gt;等入群。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway.envoyproxy.io/contributions/develop/&#34; title=&#34;Envoy Gateway Developer Guide - gateway.envoyproxy.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway Developer Guide - gateway.envoyproxy.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>Fantastic Planet：权力、解放与文明间的微妙平衡 — 深入探索原始星球中知识和自由的力量</title>
      <link>https://jimmysong.io/blog/exploring-fantastic-planet/</link>
      <pubDate>Fri, 12 Jul 2024 11:51:52 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/exploring-fantastic-planet/</guid>
      <description>
        
        
        &lt;p&gt;最近我观看了一部名为 &lt;a href=&#34;https://movie.douban.com/subject/1291989/&#34; title=&#34;Fantastic Planet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fantastic Planet&lt;/a&gt; 的电影，这部电影给了我极大的震撼，令人意想不到的是，这居然是一部上世纪七十年代的作品。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-poster.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-poster.webp&#34; alt=&#34;image&#34; data-caption=&#34;Fantastic Planet 电影海报&#34;&gt;
  
  
  &lt;figcaption&gt;Fantastic Planet 电影海报&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在这里我想跟你分享一下这部电影，及其引申作品，还有我对这部电影的一些看法。&lt;/p&gt;
&lt;h2 id=&#34;原始星球中的世界观&#34;&gt;原始星球中的世界观&lt;/h2&gt;
&lt;p&gt;《Fantastic Planet》（法语原名“La Planète sauvage”，中文译名“原始星球”）以其独特的世界观和强烈的象征意义吸引了无数观众。这部电影描绘了一个名为 Ygam 的星球，上面居住着智慧而庞大的蓝色生物 Draags 和人类大小的 Oms。Draags 对 Oms 既是宠物又是实验对象，这种关系象征着权力和压迫。电影通过这种超现实的设定，探讨了奴役与反抗、文化冲突与共生的深刻主题。&lt;/p&gt;
&lt;p&gt;请看下面的片段。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=413834098&amp;amp;bvid=BV1oV411674e&amp;amp;cid=212076690&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;电影中处处都有一种诡异的氛围，其中的配乐也极具特色。&lt;/p&gt;
&lt;h2 id=&#34;剧情介绍&#34;&gt;剧情介绍&lt;/h2&gt;
&lt;p&gt;《Fantastic Planet》的故事主要围绕一个年轻的 Om（人类），名为 Terr 展开。Terr 是在 Draags 的世界中被当作宠物养大的，但他利用一次偶发的机会逃脱了。当他的“主人”Tiwa 在一次学习过程中分心时，Terr 抓住机会逃离，并最终找到了一群野生的 Oms。电影中，Draags 是智慧而高大的蓝色生物，对 Oms 实施着类似宠物和奴隶的管理。在 Terr 的带领下，他和他的同伴们开始探索 Ygam 星球，学习 Draags 的技术和知识，并最终找到了反抗 Draags 统治的方法。&lt;/p&gt;
&lt;p&gt;这部电影的剧情充满转折，不仅展现了 Terr 成长的旅程，还揭示了两种文明之间的冲突与和解，最终迫使 Draags 重新考虑对 Oms 的态度，导致了两个种族之间的和解。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-screenshots.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-screenshots.webp&#34; alt=&#34;image&#34; data-caption=&#34;Fantastic Planet 电影截图&#34;&gt;
  
  
  &lt;figcaption&gt;Fantastic Planet 电影截图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;故事线&#34;&gt;故事线&lt;/h3&gt;
&lt;p&gt;电影的情节主要围绕 Terr 的成长和他最终领导 Om 反抗 Draags 的统治展开。故事的主要阶段包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;成长与学习&lt;/strong&gt;：在 Tiwa 的家中，Terr 接触到了 Draags 的学习装置，这些装置通过直接向大脑传递信息的方式教授知识。虽然这些装置主要是为 Draags 设计的，但 Terr 利用它们秘密学习了 Draags 的语言和科技知识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逃离与自由&lt;/strong&gt;：随着对 Draags 文化的理解加深，Terr 意识到自己的奴役地位，决定逃离 Tiwa 的家。他带走了一个重要的学习装置，这成为他和其他 Om 反抗 Draags 的关键工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;野生 Om 社区&lt;/strong&gt;：逃离后，Terr 加入了一个野生 Om 社区，他们居住在 Ygam 星球的荒野中。在那里，Terr 分享了他从 Draags 那里学到的知识，帮助他们提高技术水平，从而更好地抵抗 Draags 的迫害。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;反抗与冲突&lt;/strong&gt;：随着技术和组织的发展，Terr 和其他 Om 开始更加积极地反抗 Draags。他们策划并执行了多次行动，干扰 Draags 的冥想，最终引发了双方的直接冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;和解与共存&lt;/strong&gt;：电影的结尾，经过一系列的斗争和破坏，双方达到了一种脆弱的和解。Draags 开始重新考虑对 Oms 的态度，而 Oms 也获得了更多的自由和生存空间。故事以一种暗示未来可能的和平共存的方式结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;draags-的弱点&#34;&gt;Draags 的弱点&lt;/h3&gt;
&lt;p&gt;Draags 的主要弱点之一是他们对精神冥想和学习的依赖，这是他们文化的一个核心部分。Draags 通过冥想和精神投射来维持他们的社会结构和知识传承。这种精神活动虽然展示了他们的高度智慧，但也使他们在某种程度上依赖于固定的环境和仪式，一旦这种平衡被打破，他们的社会秩序和个体能力就会受到影响。&lt;/p&gt;
&lt;h3 id=&#34;oms-如何打败-draags&#34;&gt;Oms 如何打败 Draags&lt;/h3&gt;
&lt;p&gt;在电影中，Oms 最初是处于被动和受压迫的状态，他们被视为宠物或实验对象。然而，随着故事的发展，Oms 开始积累知识和技能，特别是在 Terr 的领导下，他偷学了 Draags 的知识并分享给其他 Oms。Oms 使用这些知识制造了自己的武器和通讯设备，组织起来进行抵抗。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-meditation-ritual.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-meditation-ritual.webp&#34; alt=&#34;image&#34; data-caption=&#34;Draags 的冥想仪式&#34;&gt;
  
  
  &lt;figcaption&gt;Draags 的冥想仪式&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Oms 的转变点是他们学会了干扰 Draags 的冥想仪式。他们发现，通过破坏 Draags 进行精神投射的特定设施，可以直接影响 Draags 的精神和身体健康。最终，Oms 通过一系列策略和战斗，迫使 Draags 重视他们的需求和权利，从而达到了一种新的平衡和相互理解。&lt;/p&gt;
&lt;h3 id=&#34;电影的寓意和时代背景&#34;&gt;电影的寓意和时代背景&lt;/h3&gt;
&lt;p&gt;《Fantastic Planet》在七十年代的社会政治背景下具有丰富的象征意义。这一时期，世界各地都充斥着社会动荡，包括越南战争、民权运动、以及对传统权威和社会结构的广泛质疑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;种族和阶级冲突&lt;/strong&gt;：Draags 和 Oms 之间的关系象征着种族和阶级冲突，反映了现实世界中的压迫和不平等。电影通过展示 Oms 的奋斗和最终的抗争成功，传递了对自由和平等的追求，与世界各地的解放运动和社会变革呼应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术和伦理&lt;/strong&gt;：Draags 的先进技术和文化并没有使他们对 Oms 的对待更加人道，这引发了关于科技进步与伦理责任之间的关系的讨论。这一主题在当时科技迅速发展的背景下尤为重要，提示观众科技应该如何服务于社会的整体福祉。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境意识&lt;/strong&gt;：电影中对环境和其他物种的描绘也反映了当时日益增长的环保意识。Draags 和 Oms 对环境的不同态度和影响暗示了人类活动对地球生态系统的影响，以及必须采取行动以避免灾难性后果的紧迫感。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;结局&#34;&gt;结局&lt;/h2&gt;
&lt;p&gt;在《Fantastic Planet》的结尾，两个种族之间的和解并不是基于完全的和谐或理想化的情感联系，而是基于力量均衡。&lt;/p&gt;
&lt;h3 id=&#34;和解的保持&#34;&gt;和解的保持&lt;/h3&gt;
&lt;p&gt;电影中的和解通过展示两种文明之间达成的一种平衡来描绘，其中 Oms 通过获得知识和技术，能够在某种程度上与 Draags 站在同一个水平线上。Oms 学会了干扰 Draags 的冥想仪式，显示了他们能够影响 Draags 的生活和幸福。这种能力的证明迫使 Draags 重新评估他们对 Oms 的看法，并接受 Oms 作为平等的存在。因此，双方的和解更多地基于力量平衡和相互依赖，而不仅仅是单方面的宽恕或让步。&lt;/p&gt;
&lt;h3 id=&#34;核大战的共同毁灭&#34;&gt;核大战的共同毁灭&lt;/h3&gt;
&lt;p&gt;这种通过显示破坏力来达成和解的方式，在某种程度上类似于冷战时期的“共同毁灭”概念。在核大战策略中，共同毁灭（Mutually Assured Destruction, MAD）是一种阻止核战争的理论，它基于的假设是两个拥有大量核武器的对手如果发动核战争，将导致双方的彻底毁灭。因此，恐惧和自我保护的本能阻止了核战争的发生。&lt;/p&gt;
&lt;p&gt;在《Fantastic Planet》中，虽然没有直接的核武器，但 Oms 通过获得足够的知识和技术，以及能够干预 Draags 的生活方式的能力，建立了一种形式的战略平衡。这使得 Draags 必须承认 Oms 的权利和地位，从而防止了进一步的冲突和破坏，确保了两个种族的共存。&lt;/p&gt;
&lt;p&gt;这样的和解和平衡展现了一种基于相互尊重和理解的共存方式，同时也提醒了现实世界中力量平衡的脆弱性和维持和平的复杂性。&lt;/p&gt;
&lt;h2 id=&#34;关于电影及角色名称的解读&#34;&gt;关于电影及角色名称的解读&lt;/h2&gt;
&lt;p&gt;这部电影的译名及其中的角色名称也富有深意。&lt;/p&gt;
&lt;h3 id=&#34;电影的译名与时代背景&#34;&gt;电影的译名与时代背景&lt;/h3&gt;
&lt;p&gt;《Fantastic Planet》的不同译名映射出不同文化对这部电影的解读。法语原名“La Planète sauvage”带有“野性”的暗示，强调了电影中野生与文明的对比；而英文名“Fantastic Planet”则更强调奇幻元素。中文译名有“原始星球”、“神奇星球”、“奇幻星球”等，结合了这两种元素，既体现了电影的奇异美学，也暗示了其深刻的哲理。这些译名反映了上世纪七十年代的文化背景，当时社会动荡和对权威的质疑正酝酿之中。&lt;/p&gt;
&lt;h2 id=&#34;角色名称解读&#34;&gt;角色名称解读&lt;/h2&gt;
&lt;p&gt;Fantastic Planet 中的角色和名称富有象征意义，每个名字背后都携带着一定的文化或哲学含义，有助于增强电影的主题和故事。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-roles.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/fantastic-planet-roles.webp&#34; alt=&#34;image&#34; data-caption=&#34;Fantastic Planet 中的角色，从左到右，从上到下一次是：年幼的正在玩 Oms 的 Draags、成年的 Oms、年幼的 Tiwa、年幼的 Terr&#34;&gt;
  
  
  &lt;figcaption&gt;Fantastic Planet 中的角色，从左到右，从上到下一次是：年幼的正在玩 Oms 的 Draags、成年的 Oms、年幼的 Tiwa、年幼的 Terr&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Draags&lt;/strong&gt; - 这个名字可能派生自“drag”或“dragoon”，象征着他们的统治地位和力量。Draags 这个名字暗示了他们对 Oms 的支配和冷漠态度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oms&lt;/strong&gt; - 这个名字可能来源于法语单词“homme”，意味“人”。这个名称强调了他们的人性和在 Draags 眼中被视为次等的地位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Terr&lt;/strong&gt; - 主角 Terr 的名字来源于“terre”，法语中的“地球”或“土地”。这个名字强调了他作为 Om（类人种族）与自然和地球的紧密联系，同时也体现了他的地位和他的成长旅程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tiwa&lt;/strong&gt; - Terr 的“主人”，一位年轻的 Draag 女性。她的名字可能来源于“twee”，荷兰语中的“二”或表示幼小、可爱的意思，这反映了她相对年轻和她对 Terr 的看待方式，即作为一个宠物或小孩。&lt;/p&gt;
&lt;h2 id=&#34;精彩的配乐&#34;&gt;精彩的配乐&lt;/h2&gt;
&lt;p&gt;《Fantastic Planet》（奇幻星球）的配乐是由法国作曲家 Alain Goraguer 创作的，这部音乐成为了电影的一个显著特色，与其独特的视觉风格和深刻的主题完美结合。Goraguer 的音乐风格融合了爵士、电子乐和管弦乐，为电影带来了一种梦幻般的、超现实的氛围。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=20447062&amp;amp;bvid=BV1XW411x7Mf&amp;amp;cid=33425312&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;电子音乐元素&lt;/strong&gt;：Goraguer 在音乐中广泛使用了电子合成器，为电影提供了一种前卫的科技感。这种使用在 1970 年代初期是相对新颖的，与电影中的科幻主题和未来主义美学形成了和谐的统一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;爵士风格的影响&lt;/strong&gt;：配乐中还融入了爵士音乐的元素，特别是在一些轻松或不安的场景中。这些爵士风格的曲目增加了音乐的动态范围，使观众在情感上更加投入电影的世界。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;管弦乐的运用&lt;/strong&gt;：电影音乐还包括了传统的管弦乐部分，尤其是在描绘 Draags 的文化和仪式时。这种传统元素与电子和爵士的现代感形成对比，强调了 Draags 社会的复杂性和高度发展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;节奏和氛围&lt;/strong&gt;：整个配乐在节奏和氛围上都非常独特，既有悬疑和紧张的片段，也有平静和沉思的片段。这种多样性使得音乐本身几乎成为电影叙事的一个角色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alain Goraguer 的配乐为《Fantastic Planet》增添了一层额外的意义和情感深度，使其成为观众和批评家赞誉的对象。这种音乐与电影的结合，为观众提供了一次全面的感官体验，是电影受欢迎的重要因素之一。&lt;/p&gt;
&lt;h2 id=&#34;导演及其影响&#34;&gt;导演及其影响&lt;/h2&gt;
&lt;p&gt;René Laloux 的导演生涯以其独树一帜的视觉风格和深刻的寓意著称。《Fantastic Planet》的视觉设计和故事叙述对许多后来的电影制作人产生了影响，其中包括印度导演 Tarsem Singh。Singh 的作品如《&lt;a href=&#34;https://movie.douban.com/subject/1293171/&#34; title=&#34;The Cell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Cell&lt;/a&gt;》（2000 年）和《&lt;a href=&#34;https://movie.douban.com/subject/1890572/&#34; title=&#34;The Fall&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Fall&lt;/a&gt;》（2006 年）中，同样可以看到对 Laloux 奇幻和超现实风格的致敬。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Cell&lt;/em&gt; 是一部科幻惊悚片，中文译作“入侵脑细胞”，讲述了一个男子突然接到一个被绑架女子的电话，随后展开了一场横跨整个城市的紧张营救行动。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/the-cell-screenshot.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/the-cell-screenshot.webp&#34; alt=&#34;image&#34; data-caption=&#34;《入侵脑细胞》电影截图&#34;&gt;
  
  
  &lt;figcaption&gt;《入侵脑细胞》电影截图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;The Fall&lt;/em&gt; 是一部视觉艺术电影，中文译作“坠入”，通过一个受伤的特技演员在医院里向一个小女孩讲述的五个奇幻英雄的故事，探索了故事讲述的力量和现实与想象的界限。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/the-fall-screenshot.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/exploring-fantastic-planet/the-fall-screenshot.webp&#34; alt=&#34;image&#34; data-caption=&#34;《坠入》电影截图&#34;&gt;
  
  
  &lt;figcaption&gt;《坠入》电影截图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;个人感想&#34;&gt;个人感想&lt;/h2&gt;
&lt;p&gt;通过 Terr 的经历，电影《Fantastic Planet》深入探讨了知识、自由与自我实现的重要性，并且通过 Terr 这一角色展示了不同文明间的冲突、理解与和解。Terr 不仅仅是反叛的象征，更是连接不同世界、开启和平共存可能性的桥梁。&lt;/p&gt;
&lt;p&gt;Oms 如何利用技术和知识战胜 Draags 的过程突显了教育和智慧在社会变革中的核心作用，同时也展现了如何通过团结和策略战胜强大对手的智慧。电影中的和解是一种脆弱的平衡，随时可能因新的冲突而被打破。&lt;/p&gt;
&lt;p&gt;观看《Fantastic Planet》是一次视觉与思维的双重震撼，电影中的超现实场景和丰富的社会隐喻促使我深思现实世界中的类似问题。这部作品对权力、压迫及解放的深刻描绘，不仅仅是视觉上的享受，更是对人类社会的深刻反思，提供了宝贵的启示和思考。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>多集群 Istio 服务网格的跨集群无缝访问指南</title>
      <link>https://jimmysong.io/blog/seamless-cross-cluster-access-istio/</link>
      <pubDate>Thu, 11 Jul 2024 19:45:20 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/seamless-cross-cluster-access-istio/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;随着企业信息系统越来越多地采用微服务架构，如何在多集群环境中实现服务的高效、安全地跨集群访问成为了一个重要的挑战。Istio 作为一种流行的服务网格解决方案，提供了丰富的功能来支持跨集群服务的无缝连接。&lt;/p&gt;
&lt;p&gt;在部署和使用多集群服务网格时有以下难点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨集群的服务注册发现与路由&lt;/li&gt;
&lt;li&gt;集群间服务的身份识别与认证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将深入探讨如何在多集群多网格的 Istio 部署中，通过实施 SPIRE 联邦和东西向网关暴露服务的方式，实现跨集群的无缝访问。通过一系列配置和部署示例，本文旨在为读者提供一个清晰的指南，帮助理解和解决多集群服务网格部署中遇到的常见问题和挑战。&lt;/p&gt;
&lt;h2 id=&#34;istio-的部署模型&#34;&gt;Istio 的部署模型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/setup/install/multicluster/&#34; title=&#34;Istio 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;中根据集群、网络、控制平面、网格、信任域及租户等维度划分了多种部署模型，我将其总结并附上适用场景说明如下表所示。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;单一配置&lt;/th&gt;
          &lt;th&gt;多元配置&lt;/th&gt;
          &lt;th&gt;适用场景说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;集群&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;一个集群托管所有服务与控制平面。&lt;/td&gt;
          &lt;td&gt;跨多个集群分布服务，可以共享或分离控制平面。&lt;/td&gt;
          &lt;td&gt;单集群适用于资源需求较小、管理相对简单的环境；多集群适合于需要高可用性、地理冗余或遵守数据驻留政策的大型组织。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;网络&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;所有服务在单一网络内通信，无需跨网络通信。&lt;/td&gt;
          &lt;td&gt;服务跨越多个网络，需通过 Istio 网关进行通信。&lt;/td&gt;
          &lt;td&gt;单网络适用于网络简单、无复杂跨网络通信需求的场景；多网络适合在多云、混合云环境中部署，或需要跨行政边界部署的场景。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;控制平面&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;一个控制平面管理所有服务。&lt;/td&gt;
          &lt;td&gt;每个控制平面管理一个或多个集群，增强隔离与可用性。&lt;/td&gt;
          &lt;td&gt;单控制平面适用于小型至中型部署，易于管理；多控制平面适用于大规模部署，需要高度的容错能力和安全隔离。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;网格&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;所有服务在一个连续的服务网格中。&lt;/td&gt;
          &lt;td&gt;服务网格之间通过联盟进行通信，适用于不同组织或区域。&lt;/td&gt;
          &lt;td&gt;单网格适用于组织内部密切协作的服务；多网格适合于需要隔离不同业务线或合作伙伴间的服务，或实施强隔离的大型组织。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;信任域&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;所有服务使用同一套密钥和证书体系。&lt;/td&gt;
          &lt;td&gt;不同信任域使用不同的密钥和证书，需进行信任链交换。&lt;/td&gt;
          &lt;td&gt;单信任域适用于信任级别统一的环境；多信任域适用于需要严格隔离、满足不同安全级别需求的复杂组织或多方合作场景。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;租户&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;整个网格为单一租户或用户服务。&lt;/td&gt;
          &lt;td&gt;通过命名空间隔离，支持多个租户在同一网格中运行服务。&lt;/td&gt;
          &lt;td&gt;单租户适用于所有资源和服务由单一组织管理的场景；多租户适用于云服务提供商或需要在同一物理基础设施上运营多个客户的场景。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    Istio 的多维度部署模型及适用场景
    
&lt;/figcaption&gt;

&lt;p&gt;选择合适的部署模型需要考虑到实际的业务需求、安全要求、管理复杂度以及成本等因素。在生产环境中，往往是对多种部署模型的组合使用。&lt;/p&gt;

&lt;p&gt;下表展示了在实际应用中如何结合不同的部署模型来满足更复杂的业务和技术需求：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;混合部署模型&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;多集群 + 多网格 + 多控制平面&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;不同的集群可以配置成不同的网格，每个网格都有自己的控制平面。通过网格联邦共享服务和策略。&lt;/td&gt;
          &lt;td&gt;适合大型组织，其中不同的业务单位需要独立运行并管理自己的服务，同时需要一定级别的服务共享和协作。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;多信任域联邦 + 命名空间隔离的多租户&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;不同的网格可以拥有不同的信任域，通过信任域联邦共享密钥和证书。同时在一个网格内部通过命名空间实现租户隔离。&lt;/td&gt;
          &lt;td&gt;适用于需要强隔离但又要求跨组织或跨业务线协作的环境，如跨国公司或合作伙伴网络。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;多集群 + 单网格 + 多控制平面&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;多个集群共享一个服务网格，但每个集群拥有自己的控制平面来管理本地服务的配置。&lt;/td&gt;
          &lt;td&gt;适用于需要高可用性和灾难恢复能力的应用，各地区的集群可以独立运行，减少单点故障风险。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;多集群 + 多网格 + 单控制平面&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;多个集群分布在不同的网格中，但所有网格共享一个中心控制平面。&lt;/td&gt;
          &lt;td&gt;适用于中心化管理的大规模部署，可以减少管理的复杂性，但对控制平面的可用性要求极高。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;多信任域 + 多网格 + 命名空间隔离的多租户&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;各网格拥有独立的信任域，增强安全性和隔离性。在单个网格内使用命名空间来隔离不同的租户。&lt;/td&gt;
          &lt;td&gt;适用于提供云服务的组织，需要隔离不同客户的数据和服务，同时在不同的法律和合规环境下操作。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption class=&#34;text-center&#34;&gt;
    
    Istio 的部署模型组合
    
&lt;/figcaption&gt;

&lt;p&gt;这些混合模型提供了高度的灵活性和可扩展性，能够满足各种复杂的部署要求。在选择混合模型时，组织需要考虑到管理复杂性、成本、安全要求以及业务需求，以确定最合适的部署策略。通过适当的规划和设计，Istio 的灵活部署模型可以帮助组织构建出既安全又高效的服务网格架构。在大多数场景下，单信任域的多集群 + 单网格 + 多控制平面已足够满足需要。&lt;/p&gt;
&lt;p&gt;本文将聚焦多集群 + 多网格 + 多控制平面 + 多信任域的混合部署模型，这是一种相当复杂的场景，如果你可以完成这种场景的部署，那么其他场景也就不在话下了。&lt;/p&gt;
&lt;h2 id=&#34;多集群-istio-服务网格中的-fqdn&#34;&gt;多集群 Istio 服务网格中的 FQDN&lt;/h2&gt;
&lt;p&gt;网格间的服务要想互相访问，必须了解各自的 FQDN。FQDN 通常由服务名、命名空间和顶级域（如 &lt;code&gt;svc.cluster.local&lt;/code&gt;）组成。在 Istio 的多集群或多网格设置中，可以通过不同的机制（如&lt;code&gt;ServiceEntry&lt;/code&gt;、&lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;Gateway&lt;/code&gt; 配置）来控制和管理服务的路由和访问，而不是通过修改 FQDN 来实现。&lt;/p&gt;
&lt;p&gt;多集群服务网格中的 FQDN 与单集群并没有什么不同，通常遵循以下格式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;service-name&amp;gt;.&amp;lt;namespace&amp;gt;.svc.cluster.local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也许你会想到通过 &lt;code&gt;meshID&lt;/code&gt; 来区分网格？&lt;code&gt;meshID&lt;/code&gt; 主要用于区分和管理在同一环境中或跨环境的多个 Istio 网格，&lt;code&gt;meshID&lt;/code&gt; 并不用于直接构造服务的 FQDN。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    &lt;code&gt;meshID&lt;/code&gt; 的主要作用
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网格级的遥测数据聚合&lt;/strong&gt;：区分不同网格的数据，以便在统一平台上进行监控和分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网格联邦&lt;/strong&gt;：在网格之间建立联邦关系，允许网格间共享一些配置和服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨网格的策略实施&lt;/strong&gt;：识别和应用特定于网格的策略，如安全策略和访问控制。&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;跨集群的服务注册发现与路由&#34;&gt;跨集群的服务注册发现与路由&lt;/h2&gt;
&lt;p&gt;在 Istio 多网格环境中，东西向网关（East-West Gateway）起着关键作用，它不仅处理网格间的入口和出口流量，还支持服务的发现和连接。当一个集群需要访问另一个集群中的服务时，它通过这个网关路由到目标服务。&lt;/p&gt;
&lt;p&gt;下图展示了跨集群的服务注册发现与路由的过程。&lt;/p&gt;
&lt;p&gt;在跨集群的 Istio 网格配置中，服务注册、发现和路由的流程是至关重要的，它们确保了不同集群中的服务可以相互发现并通信。以下是跨集群 Istio 网格中服务注册、发现与路由的基本流程：&lt;/p&gt;
&lt;h3 id=&#34;1-服务注册&#34;&gt;1. 服务注册&lt;/h3&gt;
&lt;p&gt;在每个 Kubernetes 集群中，当一个服务被部署时，它的信息会被注册到 Kubernetes 的 API Server。这包括服务的名称、标签、选择器、端口等信息。&lt;/p&gt;
&lt;h3 id=&#34;2-同步到-istiod&#34;&gt;2. 同步到 Istiod&lt;/h3&gt;
&lt;p&gt;Istiod，作为控制平面，负责监控 Kubernetes API Server 的状态变化。每当有新的服务被注册或现有服务被更新时，Istiod 会自动检测到这些变化。Istiod 接着提取必要的服务信息并构建内部的服务和端点的配置。&lt;/p&gt;
&lt;h3 id=&#34;3-跨集群服务发现&#34;&gt;3. 跨集群服务发现&lt;/h3&gt;
&lt;p&gt;为了使一个集群中的服务能够发现并通信到另一个集群的服务，Istiod 需要将服务端点信息同步到所有相关集群。这通常通过以下两种方式之一实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DNS 解析&lt;/strong&gt;：Istio 可配置为利用 CoreDNS 或类似服务，在 DNS 查询中返回跨集群的服务端点。当一个服务尝试解析另一个集群中的服务时，DNS 查询会返回可以访问的远程服务的 IP 地址。在本文中我们将启用 Istio 的 &lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/traffic-management/dns-proxy/&#34; title=&#34;DNS 代理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DNS 代理&lt;/a&gt;实现跨集群的服务发现。在一个服务同时存在于本地和远程集群中时，在本地执行 DNS 查询只会返回本地服务的 ClusterIP，若该服务只存在于远程集群中时，DNS 查询将返回远程服务所在集群的东西向网关的负载均衡器地址，该特性也可以用于跨集群的故障恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务入口同步&lt;/strong&gt;：通过设置特定的 ServiceEntry 配置，使得一个集群的 Envoy 代理知道如何通过东西向网关找到并路由到另一个集群的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-路由和负载均衡&#34;&gt;4. 路由和负载均衡&lt;/h3&gt;
&lt;p&gt;当服务 A 需要与服务 B 通信时，它的 Envoy 代理首先解析服务 B 的名称获取 IP 地址，即服务 B 所在集群的东西向网关的负载均衡器地址。接着该东西向网关将请求路由到目标服务。Envoy 代理可以根据配置的负载均衡策略（如轮询、最少连接数等），选择最佳的服务实例来发送请求。&lt;/p&gt;
&lt;h3 id=&#34;5-流量管理&#34;&gt;5. 流量管理&lt;/h3&gt;
&lt;p&gt;Istio 提供了丰富的流量管理功能，例如请求路由、故障注入、流量复制等。这些规则在 Istio 的控制平面中定义，并推送到各个 Envoy 代理执行。这样可以在跨集群环境中灵活地控制和优化服务间的通信。&lt;/p&gt;
&lt;h2 id=&#34;集群间服务的身份识别与认证&#34;&gt;集群间服务的身份识别与认证&lt;/h2&gt;
&lt;p&gt;当不同集群中运行的服务需要相互通信时，正确的身份认证和授权是确保服务安全的关键。使用 SPIFFE 可以帮助标识和验证服务的身份，但在多集群环境中需要确保这些身份是唯一且可验证的。&lt;/p&gt;
&lt;p&gt;为此，我们将设置 SPIRE 联邦来为多集群的服务分配身份并实现跨集群的身份认证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用 SPIFFE 来标识服务身份&lt;/strong&gt;：在 SPIFFE 框架下，每个服务都会被分配一个格式为&lt;code&gt;spiffe://&amp;lt;trust-domain&amp;gt;/&amp;lt;namespace&amp;gt;/&amp;lt;service&amp;gt;&lt;/code&gt;的唯一标识符。在多集群环境中，可以通过包括集群名称在内的“trust domain”来确保身份的唯一性。例如，可以设置&lt;code&gt;spiffe://foo.com/ns/default/svc/service1&lt;/code&gt;和&lt;code&gt;spiffe://bar.com/ns/default/svc/service1&lt;/code&gt;，以区分不同集群中相同名称的服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 SPIRE 联邦来管理集群间的证书&lt;/strong&gt;：它可以增强多集群服务网格中的安全性。SPIRE（SPIFFE Runtime Environment）提供了一个高度可配置的平台，用于服务身份验证和证书颁发。当使用 SPIRE 联邦时，可以实现跨集群的服务认证，通过为每个 SPIRE 集群创建 Trust Bundle 实现跨集群的身份认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是实现 SPIRE 联邦的步骤说明。&lt;/p&gt;
&lt;h3 id=&#34;1--配置-trust-domain&#34;&gt;1.  配置 Trust Domain&lt;/h3&gt;
&lt;p&gt;每个集群都配置为一个单独的 trust domain。这样，每个集群内的服务都将具有基于其所在 trust domain 的唯一 SPIFFE ID。例如，集群 1 的服务可能拥有 ID &lt;code&gt;spiffe://cluster1/ns/default/svc/service1&lt;/code&gt;，而集群 2 的相同服务则为 &lt;code&gt;spiffe://cluster2/ns/default/svc/service1&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-建立-trust-bundle&#34;&gt;2. 建立 Trust Bundle&lt;/h3&gt;
&lt;p&gt;在 SPIRE 中配置 trust relationships 以允许不同 trust domain 的节点和工作负载相互验证。这涉及到 trust domain 之间交换和接受彼此的 CA 证书或 JWT keys，确保跨集群通信的安全性。&lt;/p&gt;
&lt;h3 id=&#34;3-配置-spire-server-和-agent&#34;&gt;3. 配置 SPIRE Server 和 Agent&lt;/h3&gt;
&lt;p&gt;在每个集群中部署 SPIRE Server 和 SPIRE Agent。SPIRE Server 负责管理证书颁发和续签，而 SPIRE Agent 负责将证书和密钥安全地分发给集群内的服务。&lt;/p&gt;



&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    Istio 使用 SPIRE 联邦时的工作负载注册兼容性问题
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    在本文中，我们将在 SPRIE Server 中使用传统的 Kubernetes Workload Registrar 来负责集群中的工作负载注册。从 SPIRE v1.5.4 起弃用了 Kubernetes Workload Registrar，转而是使用 SPIRE Controller Manager 代替，经我测试并不能与 Istio 很好的运行。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;4-使用-workload-api&#34;&gt;4. 使用 Workload API&lt;/h3&gt;
&lt;p&gt;服务可以通过 SPIRE 的 Workload API 请求和更新其身份证书。这样，服务即使在不同集群中运行，也能持续验证其身份，并安全地与其他服务通信。我们将配置 Istio 网格中的代理共享 SPIRE Agent 中的 Unix Domain Socket，从而访问 Workload API 来管理证书。&lt;/p&gt;
&lt;h3 id=&#34;5-自动化证书轮换&#34;&gt;5. 自动化证书轮换&lt;/h3&gt;
&lt;p&gt;我们将使用 cert-manager 作为 SPIRE 的 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.9.5/doc/plugin_server_upstreamauthority_cert_manager.md&#34; title=&#34;UpstreamAuthority&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UpstreamAuthority&lt;/a&gt;，配置 SPIRE 自动轮换服务证书和密钥，增强系统的安全性。通过自动化轮换，即使证书被泄露，攻击者也只能在很短的时间内利用这些证书。&lt;/p&gt;
&lt;p&gt;通过这些步骤，你可以建立一个跨集群的、安全的服务身份验证框架，使得各个集群的服务能够安全地识别和通信，从而有效地降低安全风险并简化证书管理。这样的配置不仅增强了安全性，还通过分散的信任域提高了系统的可扩展性和灵活性。&lt;/p&gt;
&lt;h2 id=&#34;部署多集群&#34;&gt;部署多集群&lt;/h2&gt;
&lt;p&gt;下图展示了 Istio 多集群及 SPIRE 联邦的部署模型。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/seamless-cross-cluster-access-istio/multi-cluster-deployment.svg&#34; data-img=&#34;/blog/seamless-cross-cluster-access-istio/multi-cluster-deployment.svg&#34; alt=&#34;image&#34; data-caption=&#34;多集群网格部署模型&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;多集群网格部署模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面我将演示如何在多集群 Istio 网格中实现无缝地跨集群无缝访问。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 GKE 中创建两个 Kubernetes 集群，分别命名为 &lt;code&gt;cluster-1&lt;/code&gt; 和 &lt;code&gt;cluster-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分别在这两个集群中部署 SPIRE 并设置联邦&lt;/li&gt;
&lt;li&gt;分别在两个集群中安装 Istio，注意配置信任域、东西向网关、入口网关、 &lt;code&gt;sidecarInjectorWebhook&lt;/code&gt; 挂载 SPIFFE UDS 的 &lt;code&gt;workload-socket&lt;/code&gt;，并启用 DNS 代理&lt;/li&gt;
&lt;li&gt;部署测试应用并验证跨集群的无缝访问&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们部署的各组件版本如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes: v1.29.4&lt;/li&gt;
&lt;li&gt;Istio: v1.22.1&lt;/li&gt;
&lt;li&gt;SPIRE: v1.5.1&lt;/li&gt;
&lt;li&gt;cert-manager: v1.15.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我将所有命令及步骤说明保存在 Github 上：&lt;a href=&#34;https://github.com/rootsongjc/istio-multi-cluster&#34; title=&#34;rootsongjc/istio-multi-cluster&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rootsongjc/istio-multi-cluster&lt;/a&gt;，你可以按照该项目中的说明操作。下面是对各主要步骤的说明。&lt;/p&gt;
&lt;h3 id=&#34;1-准备-kubernetes-集群&#34;&gt;1. 准备 Kubernetes 集群&lt;/h3&gt;
&lt;p&gt;打开 Google Cloud Shell 或本地终端，并确保你已经安装了 &lt;code&gt;gcloud&lt;/code&gt; CLI。使用以下命令创建两个集群：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcloud container clusters create cluster-1 --zone us-central1-a --num-nodes &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcloud container clusters create cluster-2 --zone us-central1-b --num-nodes &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-部署-cert-manager&#34;&gt;2. 部署 cert-manager&lt;/h3&gt;
&lt;p&gt;使用 cert-manager 作为根 CA 为 istiod 和 SPIRE 颁发证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./cert-manager/install-cert-manager.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-部署-spire-联邦&#34;&gt;3. 部署 SPIRE 联邦&lt;/h3&gt;
&lt;p&gt;SPIRE 联邦的基本信息如下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Cluster Alias&lt;/th&gt;
          &lt;th&gt;Trust Domain&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;cluster-1&lt;/td&gt;
          &lt;td&gt;foo.com&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;cluster-2&lt;/td&gt;
          &lt;td&gt;bar.com&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：信任域不需要与 DNS 名称一致，但需要与 Istio Operator 配置中的信任域相同。&lt;/p&gt;
&lt;p&gt;执行下面的命令部署 SPIRE 联邦：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./spire/install-spire.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;想了解 Istio 中使用 SPIRE 进行身份管理的详情，请参考&lt;a href=&#34;https://jimmysong.io/blog/cert-manager-spire-istio/&#34; title=&#34;使用 cert-manager 和 SPIRE 管理 Istio 中的证书&#34;&gt;使用 cert-manager 和 SPIRE 管理 Istio 中的证书&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;4-安装-istio&#34;&gt;4. 安装 Istio&lt;/h3&gt;
&lt;p&gt;我们将使用 IstioOperator 来安装 Istio，其中为每个集群配置了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动 Sidecar 注入&lt;/li&gt;
&lt;li&gt;入口网关&lt;/li&gt;
&lt;li&gt;东西向网关&lt;/li&gt;
&lt;li&gt;DNS 代理&lt;/li&gt;
&lt;li&gt;SPIRE 集成&lt;/li&gt;
&lt;li&gt;访问远程 Kubernetes 集群的 Secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行下面的命令安装 Istio：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio/install-istio.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;验证流量联邦&#34;&gt;验证流量联邦&lt;/h2&gt;
&lt;p&gt;为了验证多集群安装的正确性，我们将在两个集群中分别部署不同版本的 &lt;code&gt;helloworld&lt;/code&gt; 应用，然后在 &lt;code&gt;cluster-1&lt;/code&gt; 中访问 &lt;code&gt;helloworld&lt;/code&gt; 服务，以测试以下跨集群访问场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;东西向流量联邦：跨集群的服务冗余&lt;/li&gt;
&lt;li&gt;东西向流量联邦：处理非本地目标服务&lt;/li&gt;
&lt;li&gt;南北向流量联邦：通过远程入口网关访问服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;执行下面的命令在两个集群中部署 &lt;code&gt;helloworld&lt;/code&gt; 应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./example/deploy-helloword.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;东西向流量联邦跨集群的服务冗余&#34;&gt;东西向流量联邦：跨集群的服务冗余&lt;/h3&gt;
&lt;p&gt;部署完成 &lt;code&gt;helloworld&lt;/code&gt; 应用后，从 &lt;code&gt;cluster-1&lt;/code&gt; 的 &lt;code&gt;sleep&lt;/code&gt; pod 访问 &lt;code&gt;hellowrold&lt;/code&gt; 服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1 -n sleep deployment/sleep -c sleep &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-- sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;while :; do curl -sS helloworld.helloworld:5000/hello; sleep 1; done&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图展示的是该场景下的部署架构及流量路由路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/seamless-cross-cluster-access-istio/east-west-traffic-federation-between-clusters-without-dns-proxying.svg&#34; data-img=&#34;/blog/seamless-cross-cluster-access-istio/east-west-traffic-federation-between-clusters-without-dns-proxying.svg&#34; alt=&#34;image&#34; data-caption=&#34;东西向流量联邦：跨集群的服务冗余&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;东西向流量联邦：跨集群的服务冗余&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;从请求结果既有 &lt;code&gt;helloworld-v1&lt;/code&gt; 又有 &lt;code&gt;helloworld-v2&lt;/code&gt; 的响应来看，说明跨集群的服务冗余生效了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;验证 DNS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此时，因为 &lt;code&gt;helloworld&lt;/code&gt; 服务既存在于本地又在远程集群中，若你在 &lt;code&gt;cluster-1&lt;/code&gt; 中查询 &lt;code&gt;helloworld&lt;/code&gt; 服务的 DNS 名称：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it deploy/sleep --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1 -n sleep -- nslookup helloworld.helloworld.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将得到  &lt;code&gt;cluster-1&lt;/code&gt; 集群中的 &lt;code&gt;helloworld&lt;/code&gt; 服务的 ClusterIP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;验证流量路由&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来我们将通过查看 Envoy 代理配置来验证跨集群的流量路由路径。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;cluster-1&lt;/code&gt; 中查看 &lt;code&gt;helloworld&lt;/code&gt; 服务的端点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config endpoints deployment/sleep.sleep --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1 --cluster &lt;span class=&#34;s2&#34;&gt;&amp;#34;outbound|5000||helloworld.helloworld.svc.cluster.local&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将得到类似下面的输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ENDPOINT               STATUS      OUTLIER CHECK     CLUSTER
10.76.3.22:5000        HEALTHY     OK                outbound|5000||helloworld.helloworld.svc.cluster.local
34.136.67.85:15443     HEALTHY     OK                outbound|5000||helloworld.helloworld.svc.cluster.local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这两个端点，一个是 &lt;code&gt;cluster-1&lt;/code&gt; 中的 &lt;code&gt;helloworld&lt;/code&gt; 服务的端点，另一个是 &lt;code&gt;cluster-2&lt;/code&gt; 的 &lt;code&gt;istio-eastwestgateway&lt;/code&gt; 服务的负载均衡器地址。Istio 将为跨集群的 TLS 连接设置 SNI，在 &lt;code&gt;cluster-2&lt;/code&gt; 中将通过 SNI 区分目标服务。&lt;/p&gt;
&lt;p&gt;执行下面的命令，在 &lt;code&gt;cluster-2&lt;/code&gt; 中查询前面 SNI 的端点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config endpoints deploy/istio-eastwestgateway.istio-system --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-2 --cluster &lt;span class=&#34;s2&#34;&gt;&amp;#34;outbound_.5000_._.helloworld.helloworld.svc.cluster.local&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将得到类似下面的结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ENDPOINT           STATUS      OUTLIER CHECK     CLUSTER
10.88.2.4:5000     HEALTHY     OK                outbound_.5000_._.helloworld.helloworld.svc.cluster.local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个端点就是 &lt;code&gt;helloworld&lt;/code&gt; 服务在 &lt;code&gt;cluster-2&lt;/code&gt; 集群中的端点。&lt;/p&gt;
&lt;p&gt;通过以上步骤，你应该了解了跨集群冗余服务的流量路径。接下来我们将删除 &lt;code&gt;cluster-1&lt;/code&gt; 中的 &lt;code&gt;helloworld&lt;/code&gt; 服务，不需要对 Istio 做任何配置，就可以自动实现故障转移。&lt;/p&gt;
&lt;h3 id=&#34;东西向流量联邦故障转移&#34;&gt;东西向流量联邦：故障转移&lt;/h3&gt;
&lt;p&gt;执行下面的命令将 &lt;code&gt;cluster-1&lt;/code&gt;  中的 &lt;code&gt;helloworld&lt;/code&gt; 副本数量缩容为 0：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n helloworld scale deploy helloworld-v1 --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1 --replicas &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次从 &lt;code&gt;cluster-1&lt;/code&gt; 中访问 &lt;code&gt;helloworld&lt;/code&gt; 服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1 -n sleep deployment/sleep -c sleep &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-- sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;while :; do curl -sS helloworld.helloworld:5000/hello; sleep 1; done&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依然可以获得来自 &lt;code&gt;helloworld-v2&lt;/code&gt; 的响应。&lt;/p&gt;
&lt;p&gt;现在，直接删除 &lt;code&gt;cluster-1&lt;/code&gt; 中的 &lt;code&gt;helloworld&lt;/code&gt; 服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl delete service helloworld -n helloworld --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依然可以获得来自 &lt;code&gt;helloworld-v2&lt;/code&gt; 的响应，这说明跨集群的故障转移生效了。&lt;/p&gt;
&lt;p&gt;下图展示了该场景下的流量路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/seamless-cross-cluster-access-istio/east-west-traffic-federation-between-clusters-failover.svg&#34; data-img=&#34;/blog/seamless-cross-cluster-access-istio/east-west-traffic-federation-between-clusters-failover.svg&#34; alt=&#34;image&#34; data-caption=&#34;东西向流量联邦：故障转移&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;东西向流量联邦：故障转移&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;验证 DNS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此时，因为 &lt;code&gt;helloworld&lt;/code&gt; 服务既存在于本地又在远程集群中，若你在 &lt;code&gt;cluster-1&lt;/code&gt; 中查询 &lt;code&gt;helloworld&lt;/code&gt; 服务的 DNS 名称：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it deploy/sleep --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1 -n sleep -- nslookup helloworld.helloworld.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将得到  &lt;code&gt;cluster-2&lt;/code&gt; 集群中东西向网关的地址和 15443 端口。&lt;/p&gt;
&lt;h3 id=&#34;南北向流量联邦通过远程入口网关访问服务&#34;&gt;南北向流量联邦：通过远程入口网关访问服务&lt;/h3&gt;
&lt;p&gt;通过入口网关访问远程集群中的服务，是最传统的跨集群访问方式，下图展示了该场景下的流量路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/seamless-cross-cluster-access-istio/north-south-traffic-federation-between-clusters.svg&#34; data-img=&#34;/blog/seamless-cross-cluster-access-istio/north-south-traffic-federation-between-clusters.svg&#34; alt=&#34;image&#34; data-caption=&#34;南北向流量联邦：通过远程入口网关访问服务&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;南北向流量联邦：通过远程入口网关访问服务&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;执行下面的命令在 &lt;code&gt;cluster-2&lt;/code&gt; 中创建 Gateway 和 VirtualService：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-2 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-f ./examples/helloworld-gateway.yaml -n helloworld
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取 &lt;code&gt;cluster-2&lt;/code&gt; 中的入口网关地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;GATEWAY_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl -n istio-ingress --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-2 get service istio-ingressgateway -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.status.loadBalancer.ingress[0].ip}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行下面的验证可以通过远程入口网关访问服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CTX_CLUSTER1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -n sleep deployment/sleep -c sleep &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-- sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;while :; do curl -s http://&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GATEWAY_URL&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/hello; sleep 1; done&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将得到来自 &lt;code&gt;helloworld-v2&lt;/code&gt; 的响应。&lt;/p&gt;
&lt;h2 id=&#34;验证身份&#34;&gt;验证身份&lt;/h2&gt;
&lt;p&gt;执行下面的命令获取 &lt;code&gt;cluster-1&lt;/code&gt; 集群中 &lt;code&gt;sleep&lt;/code&gt; pod 中的证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config secret deployment/sleep -o json --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; chain.pem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;split -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----&amp;#34;&lt;/span&gt; chain.pem cert-
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -noout -text -in cert-ab
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -noout -text -in cert-aa
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果在输出的消息中看到下面的字段，说明身份分配正确：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Subject: C=US, O=SPIFFE

URI:spiffe://foo.com/ns/sample/sa/sleep
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看 SPIRE 中的身份信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --context&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-1 &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -i -t -n spire spire-server-0 -c spire-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	-- ./bin/spire-server entry show -socketPath /run/spire/sockets/server.sock --spiffeID spiffe://foo.com/ns/sleep/sa/sleep
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到类似下面的输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Found 1 entry
Entry ID         : 9b09080d-3b67-44c2-a5b8-63c42ee03a3a
SPIFFE ID        : spiffe://foo.com/ns/sleep/sa/sleep
Parent ID        : spiffe://foo.com/k8s-workload-registrar/cluster-1/node/gke-cluster-1-default-pool-18d66649-z1lm
Revision         : 1
X509-SVID TTL    : default
JWT-SVID TTL     : default
Selector         : k8s:node-name:gke-cluster-1-default-pool-18d66649-z1lm
Selector         : k8s:ns:sleep
Selector         : k8s:pod-uid:6800aca8-7627-4a30-ba30-5f9bdb5acdb2
FederatesWith    : bar.com
DNS name         : sleep-86bfc4d596-rgdkf
DNS name         : sleep.sleep.svc
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;生产环境建议&#34;&gt;生产环境建议&lt;/h2&gt;
&lt;p&gt;对于生产环境，建议使用&lt;a href=&#34;https://docs.tetrate.io/service-bridge/howto/gateway/unified-gateway&#34; title=&#34;统一网关&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;统一网关&lt;/a&gt;，通过 Tier-2 架构，在 Tier-1 边缘网关配置全局的流量路由，该边缘网关将把转写的 Istio 配置下发给 Tier-2 集群中的各个入口网关。&lt;/p&gt;
&lt;p&gt;下图展示了使用 TSB 部署的 Tier2 架构的 Istio 服务网格，其中使用 SPIRE 联邦。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/seamless-cross-cluster-access-istio/tsb-multi-cluster-architeture.svg&#34; data-img=&#34;/blog/seamless-cross-cluster-access-istio/tsb-multi-cluster-architeture.svg&#34; alt=&#34;image&#34; data-caption=&#34;使用 SPIRE、Tier2 架构的 TSB 部署的多集群 Istio 服务网格架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;使用 SPIRE、Tier2 架构的 TSB 部署的多集群 Istio 服务网格架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们将这四个 Kubernetes 集群分为 Tier1 集群（&lt;code&gt;tier1&lt;/code&gt;）和 Tier2 集群（&lt;code&gt;cp-cluster-1&lt;/code&gt;、&lt;code&gt;cp-cluster-2&lt;/code&gt; 和 &lt;code&gt;cp-cluster-3&lt;/code&gt;）。在 T1 中安装 Edge Gateway，而在 T2 中安装 bookinfo 和 httpbin 应用程序。每个集群将拥有独立的信任域，所有这些集群将构成 SPIRE 联邦。&lt;/p&gt;
&lt;p&gt;下图展示了用户通过入口网关访问 bookinfo 和 httpbin 服务的流量路由。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/seamless-cross-cluster-access-istio/tsb-unified-gateway.svg&#34; data-img=&#34;/blog/seamless-cross-cluster-access-istio/tsb-unified-gateway.svg&#34; alt=&#34;image&#34; data-caption=&#34;统一网关架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;统一网关架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;你需要在 Istio 之上创建一个适用于多集群的逻辑抽象层，关于 TSB 中的统一网关的详细信息，请参考 &lt;a href=&#34;https://docs.tetrate.io/service-bridge/howto/gateway/unified-gateway#scenario-1-cluster-based-routing-with-http-path-and-header-match&#34; title=&#34;TSB 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TSB 文档&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文详细介绍了在 Istio 多集群网格环境中实现服务身份验证、DNS 解析和跨集群流量管理的关键技术和方法。通过精确配置 Istio 和 SPIRE 联邦，我们不仅增强了系统的安全性，还提高了服务间通信的效率和可靠性。遵循这些步骤，你将能够构建一个强大的、可扩展的多集群服务网格，满足现代应用的复杂需求。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/architecture/federation/readme/&#34; title=&#34;Deploying a Federated SPIRE Architecture - spiffe.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deploying a Federated SPIRE Architecture - spiffe.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/setup/install/multicluster/multi-primary_multi-network/&#34; title=&#34;Install Multi-Primary on different networks -istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Multi-Primary on different networks -istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire&#34; title=&#34;Istio SPIRE Integration - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio SPIRE Integration - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/traffic-management/dns-proxy/&#34; title=&#34;DNS Proxying - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DNS Proxying - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/articles/istio-identity-spiffe-spire/&#34; title=&#34;Attesting Istio workload identities with SPIFFE and SPIRE - developer.ibm.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Attesting Istio workload identities with SPIFFE and SPIRE - developer.ibm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2020/dns-proxy/&#34; title=&#34;Expanding into New Frontiers - Smart DNS Proxying in Istio - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expanding into New Frontiers - Smart DNS Proxying in Istio - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/cert-manager-spire-istio/&#34; title=&#34;使用 cert-manager 和 SPIRE 管理 Istio 中的证书 - jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 cert-manager 和 SPIRE 管理 Istio 中的证书 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>探索 Kubernetes Ingress、Gateway API 与 Istio 的演进和转型</title>
      <link>https://jimmysong.io/blog/gateway-api-istio-ingress-evolution/</link>
      <pubDate>Tue, 02 Jul 2024 19:40:40 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/gateway-api-istio-ingress-evolution/</guid>
      <description>
        
        
        &lt;p&gt;随着 Istio 1.22 版本的发布，Istio API 已正式升级至 v1 版本，同期，Kubernetes Gateway API 也更新至 v1.1 版本。本篇文章旨在深入探索 Ingress API、Istio API 与 Kubernetes Gateway API 之间的联系与区别，并详述它们在现实应用中的选择及迁移策略。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前，我曾撰写一篇文章，讨论了 &lt;a href=&#34;https://jimmysong.io/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/&#34; title=&#34;为何 Gateway API 是 Kubernetes 与服务网格入口中的未来方向&#34;&gt;为何 Gateway API 是 Kubernetes 与服务网格入口中的未来方向&lt;/a&gt;。文章中指出，作为 Kubernetes 的初始入口网关，Ingress 的资源模型由于过于简单，难以满足当下的可编程网络需求。作为其接班人，Gateway API 近年来发展迅速，获得了广泛支持，包括众多新兴的开源网关项目如 &lt;a href=&#34;https://gateway.envoyproxy.io&#34; title=&#34;Envoy Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt; 也选择基于 Gateway API 开发。此外，一些传统网关项目也开始适配 Gateway API，或通过 &lt;a href=&#34;https://github.com/kubernetes-sigs/ingress2gateway&#34; title=&#34;ingress2gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ingress2gateway&lt;/a&gt; 这样的工具进行迁移。&lt;/p&gt;
&lt;p&gt;Gateway API，作为 Kubernetes 入口网关的最新成果，通过角色划分来分离关注点，并支持跨 namespace，更适合多云环境。它整合了入口网关（南北向）与服务网格（东西向，集群内路由）的重叠功能，为云原生时代的统一流量管理提供了新的参考模型。&lt;/p&gt;
&lt;p&gt;Ingress API、Gateway API 与 Istio API 都能实现网关功能，它们之间具体有何联系与区别？本文将为你揭晓这一迷题，并提供 Kubernetes 环境中网关的选择和迁移策略。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中的流量管理&#34;&gt;Kubernetes 中的流量管理&lt;/h2&gt;
&lt;p&gt;随着微服务架构的广泛应用和日益增长的复杂性，Kubernetes 的流量管理工具也在不断演进以适应各种技术需求。Ingress API、Istio API 与 Kubernetes Gateway API 分别标志着这一演变的不同阶段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ingress API&lt;/strong&gt; 提供了 Kubernetes 的基本流量管理功能，允许用户通过定义简单的路由规则（例如 HTTP 和 HTTPS）来管理外部访问集群内服务的流量。其设计虽简洁，但功能有限，主要适用于规模较小、结构较简单的应用场景。&lt;/p&gt;
&lt;p&gt;相比之下，&lt;strong&gt;Istio API&lt;/strong&gt; 作为服务网格的一部分，提供了一系列高级流量管理功能，如流量镜像、金丝雀发布和断路器，适合于需要复杂流量管理的大规模微服务架构。&lt;/p&gt;
&lt;p&gt;为了克服 Ingress API 的局限性并集成类似 Istio 的高级功能，&lt;strong&gt;Kubernetes Gateway API&lt;/strong&gt; 因应而生。它不仅在设计上提供了更高的灵活性和扩展性，还通过社区的广泛支持，成为连接传统 Ingress 实现和现代服务网格技术如 Istio 的桥梁，目前主流的开源网关都是基于 Gateway API 或已进行适配。&lt;/p&gt;
&lt;p&gt;以下表格概述了这三者的核心特点和推荐使用场景：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;API 名称&lt;/th&gt;
          &lt;th&gt;对象类型&lt;/th&gt;
          &lt;th&gt;状态&lt;/th&gt;
          &lt;th&gt;推荐使用场景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Ingress API&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;Ingress&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;稳定 (Kubernetes v1.19)&lt;/td&gt;
          &lt;td&gt;适用于小规模和简单的应用场景，主要用于基本的路由配置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Istio API&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;Gateway&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;稳定 (Istio 1.22)&lt;/td&gt;
          &lt;td&gt;适用于高度复杂的微服务架构，需细粒度控制和高级流量管理特性的场景&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Gateway API&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;HTTPRoute&lt;/code&gt;、&lt;code&gt;Gateway&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;稳定 (Gateway API v1.1)&lt;/td&gt;
          &lt;td&gt;适用于新部署或现有部署，需提高灵活性和可扩展性的场景，特别是结合 Istio 使用&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2024/05/09/gateway-api-v1-1/&#34; title=&#34;Gateway API v1.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API v1.1&lt;/a&gt; 的推出，特别是其在提升与现有 Ingress 配置兼容性方面的改进，为用户提供了一个平稳的迁移途径，使从传统的 Ingress 解决方案向更现代的、功能更全面的 Gateway API 的过渡变得更为顺畅。&lt;/p&gt;
&lt;h2 id=&#34;从-ingress-迁移到-kubernetes-gateway-api&#34;&gt;从 Ingress 迁移到 Kubernetes Gateway API&lt;/h2&gt;
&lt;p&gt;若想从 Ingress 迁移到 Gateway API，请按以下步骤操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;理解关键差异&lt;/strong&gt;：与 Ingress 相比，Gateway API 引入了多种新的概念和资源类型，如 &lt;code&gt;Gateway&lt;/code&gt;、&lt;code&gt;HTTPRoute&lt;/code&gt; 和 &lt;code&gt;TLSRoute&lt;/code&gt;。这些资源提供了更多的配置选项和灵活性，请参阅 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/guides/&#34; title=&#34;Gateway API 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API 文档&lt;/a&gt;以了解其配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置入口点&lt;/strong&gt;：创建 &lt;code&gt;Gateway&lt;/code&gt; 资源配置，明确定义如何接收外部流量，包括配置协议、端口和 TLS 终端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射旧资源&lt;/strong&gt;：将现有的 Ingress 资源映射到对应的 Gateway API 资源。例如，Ingress 中的 host 和 path 规则需要转换为 HTTPRoute 中的路由规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试与部署&lt;/strong&gt;：在正式迁移之前，在测试环境中验证新的 Gateway API 配置，确保所有流量路由正常，无安全漏洞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了简化迁移过程，你可以使用工具如 &lt;a href=&#34;https://github.com/kubernetes-sigs/ingress2gateway&#34; title=&#34;ingress2gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ingress2gateway&lt;/a&gt;，该工具能自动将 Ingress 配置转换为 Gateway API 格式。&lt;/p&gt;
&lt;h2 id=&#34;实际迁移示例&#34;&gt;实际迁移示例&lt;/h2&gt;
&lt;p&gt;以下是一个简单的 HTTP 网关配置示例，展示了如何将 Ingress 迁移到 Gateway API。&lt;/p&gt;
&lt;p&gt;假设现有一个 Ingress 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要将其迁移到 Gateway API，首先需要创建一个 Gateway 对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-gateway-class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请确保 &lt;code&gt;gatewayClassName&lt;/code&gt; 指向你集群中配置的有效 GatewayClass。GatewayClass 通常由集群管理员设置，是一个为 Gateway 提供配置的资源。&lt;/p&gt;
&lt;p&gt;接下来，创建 HTTPRoute 资源来定义路由规则，将流量路由到后端服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-httproute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在此示例中，我们看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ingress&lt;/code&gt; 对象中的规则被直接映射到 &lt;code&gt;HTTPRoute&lt;/code&gt; 对象中。&lt;/li&gt;
&lt;li&gt;路由规则中的主机名匹配、路径匹配以及后端服务配置保持不变，只是对象和字段名称有所不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;考虑的挑战&#34;&gt;考虑的挑战&lt;/h2&gt;
&lt;p&gt;虽然可以将 Ingress 迁移到 Gateway API，并可能同时运行它们，但需要考虑以下挑战和迁移的必要性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能差异&lt;/strong&gt;：某些 Ingress 控制器的特定功能可能在 Gateway API 中没有直接对应，可能需要通过额外的配置或自定义资源来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多资源管理&lt;/strong&gt;：Gateway API 的使用可能涉及比 Ingress 更多的资源类型和更复杂的配置，这可能增加管理的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于现有的 Ingress 和 Istio API 用户，是否需要迁移到 Gateway API 取决于具体情况。以下是一些迁移建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新部署&lt;/strong&gt;：建议直接采用 Gateway API，以便利用其先进特性和预见未来的发展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现有部署&lt;/strong&gt;：如果现有系统运行稳定且无需高级特性，可以继续使用现有 API；如果希望利用 Gateway API 的新特性或计划未来长期发展，逐步迁移则是一个理智的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于不同网关对 Gateway API 的支持情况，可以参考 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/implementations/v1.1/&#34; title=&#34;Gateway API 实现项目的一致性报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API 实现项目的一致性报告&lt;/a&gt;了解详细信息。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Ingress API、Istio API 和 Kubernetes Gateway API 各具特色，适应不同的应用场景和需求。选择合适的 API，进行合理的规划和管理，可以显著提高系统的灵活性和稳定性。随着 Gateway API 的持续发展和成熟，它将越来越成为未来流量管理的主流选择。&lt;/p&gt;
&lt;p&gt;选择合适的网关技术，结合你的具体需求和现有架构，可以更好地管理和优化流量，确保应用的高效和稳定运行。随着技术的进步和社区的发展，Gateway API 提供了一个强大且灵活的框架，使得从传统的 Ingress 迁移到更现代的解决方案变得更为简单和高效。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/guides/migrating-from-ingress/&#34; title=&#34;Migrating from Ingress - gateway-api.sigs.k8s.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Migrating from Ingress - gateway-api.sigs.k8s.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2022/gateway-api-beta/&#34; title=&#34;Extending Gateway API support in Istio - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Extending Gateway API support in Istio - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>如何在 Mac 电脑上实现微信多开</title>
      <link>https://jimmysong.io/blog/multiple-wechat-instances-on-mac/</link>
      <pubDate>Wed, 26 Jun 2024 16:55:45 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/multiple-wechat-instances-on-mac/</guid>
      <description>
        
        
        &lt;p&gt;微信是我们在日常生活和工作中不可或缺的通讯工具，许多用户都有在同一台设备上登录多个微信账号的需求。尽管官方客户端不直接支持这一功能，但通过一些简单的技巧，你可以在 Mac 电脑上实现微信的多开功能。&lt;/p&gt;
&lt;p&gt;你可能看到过一些介绍如何在 Mac 上实现微信多开的文章或视频，那些技巧大多已经失效，有的可用的也只能在一台电脑上同时登录两个微信，本文将详细介绍如何在 Mac 上同时运行任意多个微信实例。&lt;/p&gt;
&lt;p&gt;下面是演示视频。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 62.5%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=1755949960&amp;amp;bvid=BV1w4421D7rJ&amp;amp;cid=1596875705&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;p&gt;下面是详细步骤。&lt;/p&gt;
&lt;h2 id=&#34;步骤一创建微信的副本&#34;&gt;步骤一：创建微信的副本&lt;/h2&gt;
&lt;p&gt;首先，你需要在应用程序文件夹中找到微信应用程序（WeChat.app）并创建启动命令副本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开访达（Finder）后，按下快捷键 &lt;code&gt;CMD + Shift + G&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在弹出的输入框中输入目录 &lt;code&gt;/Applications/WeChat.app/Contents/MacOS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在新打开的目录中选中 &lt;code&gt;WeChat&lt;/code&gt;，鼠标右键选择 &lt;code&gt;创建别名（Make Alias）&lt;/code&gt; 即创建了一个启动微信的副本。你也可以通过安装 &lt;code&gt;OPT + CMD&lt;/code&gt; 按钮拖动 &lt;code&gt;WeChat&lt;/code&gt; 文件到当前或另个目录比如桌面上来创建一个别名（快捷方式）。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/multiple-wechat-instances-on-mac/mac-screenshot-wechat-alias.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/multiple-wechat-instances-on-mac/mac-screenshot-wechat-alias.webp&#34; alt=&#34;image&#34; data-caption=&#34;创建微信副本&#34;&gt;
  
  
  &lt;figcaption&gt;创建微信副本&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;步骤二启动多个微信实例&#34;&gt;步骤二：启动多个微信实例&lt;/h2&gt;
&lt;p&gt;如果你想同时登录 N 个微信，则依次双击刚创建的微信副本 N + 1 次。比如你想同时登录 3 个微信，那就打开这个副本 4 次。&lt;/p&gt;
&lt;p&gt;保持这些窗口在运行状态，你可以将它们最小化，但是不要关闭它们。在这个过程中，你可能会注意到，系统只会打开两个微信登录界面。&lt;/p&gt;
&lt;h2 id=&#34;步骤三退出其中一个微信&#34;&gt;步骤三：退出其中一个微信&lt;/h2&gt;
&lt;p&gt;当两个微信登录界面打开后，手动退出其中一个已经开启的微信。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/multiple-wechat-instances-on-mac/mac-screenshot-wechat-quit.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/multiple-wechat-instances-on-mac/mac-screenshot-wechat-quit.webp&#34; alt=&#34;image&#34; data-caption=&#34;退出其中一个微信&#34;&gt;
  
  
  &lt;figcaption&gt;退出其中一个微信&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;步骤四触发多开功能&#34;&gt;步骤四：触发多开功能&lt;/h2&gt;
&lt;p&gt;关闭一个微信后，系统会再次打开 N-1 个新的微信窗口。现在你就可以通过这些微信的登录界面登录到不同的微信账户了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/multiple-wechat-instances-on-mac/mac-screenshot-multiple-wechat.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/multiple-wechat-instances-on-mac/mac-screenshot-multiple-wechat.webp&#34; alt=&#34;image&#34; data-caption=&#34;在 Mac 上同时登录三个微信&#34;&gt;
  
  
  &lt;figcaption&gt;在 Mac 上同时登录三个微信&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上方法只需要使用最新的官方版本的微信即可，可以做到任意多开。希望这篇指南能帮助你更高效地使用微信，满足你的多账户管理需求。如有任何问题或需要进一步的帮助，欢迎留言讨论。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>感受浪漫巴黎：探索城市风情与文化洞察</title>
      <link>https://jimmysong.io/blog/paris-trip/</link>
      <pubDate>Sun, 16 Jun 2024 06:11:53 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/paris-trip/</guid>
      <description>
        
        
        &lt;p&gt;2024 年 3 月，一个特别的机会将我带到了法国巴黎——参加 &lt;a href=&#34;https://jimmysong.io/blog/kubecon-eu-paris-recap/&#34; title=&#34;KubeCon EU 2024&#34;&gt;KubeCon EU 2024&lt;/a&gt;。这是一场汇集了来自全球的云计算和开源技术爱好者的盛会。利用这次会议的机会，我不仅深入了解了最新的技术趋势，还抓住机会体验了这座城市的历史、文化和日常生活。我的巴黎之行从 3 月 16 日开始，持续到 3 月 24 日，这期间我尽可能多地探索了这座充满魅力的城市。&lt;/p&gt;
&lt;h2 id=&#34;签证篇章&#34;&gt;签证篇章&lt;/h2&gt;
&lt;p&gt;对于我们中国人来说，无论何时何地，出国的第一步总是签证的申请。尤其是法国申根签证，需要准备众多材料，包括公司证明信、行程单等，但幸好我所在的公司性质让这一切变得相对容易。令人感到略有安慰的是，与申请日本签证相比，法国签证不需要冻结巨额资金或提供庞大的银行存款证明。这次我获得了六个月的签证有效期，这对于我未来的欧洲行计划提供了更多的灵活性和可能性。&lt;/p&gt;
&lt;h2 id=&#34;到达巴黎&#34;&gt;到达巴黎&lt;/h2&gt;
&lt;p&gt;从北京直飞巴黎的旅程总是充满期待。我乘坐的法国航空公司航班，从北京时间凌晨起飞，经过长达 13 小时的旅程后，于巴黎时间早晨 6 点多抵达。归途则选择了在伊斯坦布尔转机，让旅行的回忆更添一分异国情调。&lt;/p&gt;
&lt;h2 id=&#34;第一印象&#34;&gt;第一印象&lt;/h2&gt;
&lt;p&gt;戴高乐机场处处可见的中文标牌，字句优雅，显示了法国人对细节的用心。尽管通关时排队等候了近一个小时，但多样化的人流让巴黎的国际化氛围愈发显著。从机场乘坐穿梭地铁时，我体验了三次才成功挤上车，可见人流之多。使用 Bolt 打车服务时，因为语言不通，还得到了一位好心法国人的帮助，他用法语帮我与司机沟通，这让我深感法国人的友好与热心。&lt;/p&gt;
&lt;p&gt;在巴黎戴高乐机场随处可见中文标识，很多地方只有英文、法文和中文三种文字的标识。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/custom.webp&#34; data-img=&#34;/blog/paris-trip/custom.webp&#34; data-width=&#34;2400&#34; data-height=&#34;1500&#34; alt=&#34;image&#34; data-caption=&#34;巴黎戴高乐机场&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;巴黎戴高乐机场&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;巴黎的生活细节&#34;&gt;巴黎的生活细节&lt;/h2&gt;
&lt;p&gt;在巴黎的每一处，都能看到那些独具特色的垃圾桶，它们不仅方便实用，还在安全上做了考虑。例如，一些垃圾桶是为了防爆而设计的，能安全投放玻璃瓶和易拉罐，而另一些仅用透明塑料袋覆盖，也是出于同样的安全考量。这些细节体现了城市管理的精细与周到。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/dustbin.webp&#34; data-img=&#34;/blog/paris-trip/dustbin.webp&#34; data-width=&#34;2400&#34; data-height=&#34;1500&#34; alt=&#34;image&#34; data-caption=&#34;巴黎街头的垃圾桶&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;巴黎街头的垃圾桶&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;巴黎的垃圾分类采用彩色编码垃圾桶系统，旨在促进适当的废物处理。垃圾箱有不同的颜色：黄色用于纸张和塑料等可回收物，棕色用于可堆肥食物残渣，白色用于酒瓶等玻璃物品，绿色/灰色用于其他废物。该系统可帮助居民有效地分类垃圾，促进回收利用和适当的废物管理实践。&lt;/p&gt;
&lt;h2 id=&#34;食在巴黎&#34;&gt;食在巴黎&lt;/h2&gt;
&lt;p&gt;尽管西餐中的牛排和糕点让人难以抗拒，我还是更偏爱家乡的味道。在巴黎，我找到了一家名为杨小厨的川菜馆，其牛肉面虽与国内有所不同，但味道可口，价格亲民。此外，巴黎街头的水果与我在网上购买的相比，不仅价格合理，而且味道也极佳，特别是我喜爱的啤梨。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/food.webp&#34; data-img=&#34;/blog/paris-trip/food.webp&#34; data-width=&#34;2140&#34; data-height=&#34;1568&#34; alt=&#34;image&#34; data-caption=&#34;巴黎的中餐、西餐及马卡龙&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;巴黎的中餐、西餐及马卡龙&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;另外在很多地铁口还有街头巷尾也有社区小摊及烘焙店。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/store.webp&#34; data-img=&#34;/blog/paris-trip/store.webp&#34; data-width=&#34;2140&#34; data-height=&#34;1568&#34; alt=&#34;image&#34; data-caption=&#34;街头小摊和烘焙店&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;街头小摊和烘焙店&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;住在巴黎&#34;&gt;住在巴黎&lt;/h2&gt;
&lt;p&gt;巴黎，法国的首都，不仅以其浪漫和历史著称，同时其行政区划也具有独特的结构。巴黎市通常被分为“大巴黎”和“小巴黎”。小巴黎指的是巴黎市内环，即第一到二十区，涵盖了大部分著名的历史地标和文化地区，总面积约为 105 平方公里。而大巴黎则包括小巴黎及其周边的郊区，形成一个更为广泛的都市区。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/paris-map.webp&#34; data-img=&#34;/blog/paris-trip/paris-map.webp&#34; data-width=&#34;1437&#34; data-height=&#34;1012&#34; alt=&#34;image&#34; data-caption=&#34;小巴黎地图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;小巴黎地图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下图中环形道路是 &lt;strong&gt;Boulevard Périphérique&lt;/strong&gt;，即巴黎环形高速公路。这条道路环绕着巴黎的 20 个区，这些区域共同构成了所谓的“小巴黎”。&lt;/p&gt;
&lt;p&gt;巴黎的 20 个区（arrondissements）按照螺旋状的顺序从市中心向外延伸，包括了市内最核心的商业、居住以及文化区域。这些区域的总面积大约为 105 平方公里（约 40.5 平方英里），从 1 区的市中心向外逐渐扩展至 20 区。&lt;/p&gt;
&lt;p&gt;这些区域是巴黎市的行政区划，而“小巴黎”这个名词通常是指的这些内环的区域，即由环形公路所环绕的巴黎市内部区域。因此，图中显示的 20 个区确实组成了“小巴黎”。&lt;/p&gt;
&lt;p&gt;相比之下，北京的二环面积约为 62 平方公里，三环面积约为 159 平方公里，小巴黎的面积在二者之间，下图展示了在同等比例尺下的小巴黎和北京三环的地图。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/paris-vs-beijing.webp&#34; data-img=&#34;/blog/paris-trip/paris-vs-beijing.webp&#34; data-width=&#34;2400&#34; data-height=&#34;1055&#34; alt=&#34;image&#34; data-caption=&#34;小巴黎和北京三环面积对比&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;小巴黎和北京三环面积对比&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我此行住宿的地点位于巴黎的 15 区，这里是巴黎最大的一个区，位于塞纳河左岸（按塞纳河流向）。15 区不仅居住环境宜人，交通便利，而且距离诸如埃菲尔铁塔等著名景点也非常近，步行大约 20 分钟即可到达。我下榻的住所是一栋三层高的联排公寓，底层设有车库和会客厅，而居住区则分布在二楼和三楼，共有五个房间，旁边还有某国的大使馆官邸，增添了一份特别的国际氛围。&lt;/p&gt;
&lt;h2 id=&#34;行在巴黎&#34;&gt;行在巴黎&lt;/h2&gt;
&lt;p&gt;巴黎的道路规划别具一格，道路交错纵横，并非严格的南北走向，加之红绿灯设置在街角，使得初来乍到的人有些不适应。这里的自行车道十分发达，我租了一辆助力自行车，穿行在巴黎的街头巷尾，感受到前所未有的自由与惬意。巴黎的地铁系统复杂多样，但支付方式极为方便，大部分支付都可以通过信用卡完成。&lt;/p&gt;
&lt;p&gt;对于游客来说，在小巴黎短距离出行首选方式是自行车。巴黎街头随处可见可供租赁的自行车，你可以下载 App 注册扫码支付后即可使用，注意需要绑定信用卡。有些自行车道是在路的中间，路面上有明确标识自行车道。这些自行车都是助力车，大多维护的比较好，但是也有一些存在故障，需要仔细辨别。另外巴黎的街道较窄，行人也很少遵守红绿灯，可能是因为红绿灯太多了吧。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/bike.webp&#34; data-img=&#34;/blog/paris-trip/bike.webp&#34; data-width=&#34;2508&#34; data-height=&#34;1568&#34; alt=&#34;image&#34; data-caption=&#34;巴黎街头的自行车道&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;巴黎街头的自行车道&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;巴黎的地铁票种类繁多，从单次票、日票到周票、月票一应俱全，适应不同游客的需求。然而，许多外地游客在购票环节都会遇到困惑，需要一些时间来熟悉系统。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/metro.webp&#34; data-img=&#34;/blog/paris-trip/metro.webp&#34; data-width=&#34;2140&#34; data-height=&#34;1568&#34; alt=&#34;image&#34; data-caption=&#34;巴黎地铁&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;巴黎地铁&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;巴黎地铁（Métro de Paris）始建于 1900 年，是世界上最早的地铁系统之一。这个广泛的地铁网络包括 16 条线路，覆盖总长度达 225 公里。巴黎地铁不仅连接城市中心和外围区域，还扩展到了一些近郊区域，每年服务数亿乘客，是巴黎公共交通系统的核心部分。因为建造时间比较久远，很多设施都比较老旧，比如车厢陈旧，车厢门要手动打开，运行噪音大，没有电梯等。&lt;/p&gt;
&lt;h2 id=&#34;医疗体验&#34;&gt;医疗体验&lt;/h2&gt;
&lt;p&gt;在巴黎的第二天，我因饮食不当而开始腹泻，持续了两天后才好转。在这期间，我去了当地的药店买药。药店早上 8 点准时开门，门口总是有人排队等候，这种准时和秩序让我印象深刻。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/drug.webp&#34; data-img=&#34;/blog/paris-trip/drug.webp&#34; data-width=&#34;1200&#34; data-height=&#34;1600&#34; alt=&#34;image&#34; data-caption=&#34;在巴黎购买的止泻药&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;在巴黎购买的止泻药&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;法国的医疗体系被认为是世界上最好的之一，无论是急诊还是药品购买，都非常便捷。药品的质量和种类也相当丰富，能够满足不同病症的需求。&lt;/p&gt;
&lt;h2 id=&#34;游在巴黎&#34;&gt;游在巴黎&lt;/h2&gt;
&lt;p&gt;在 KubeCon EU 期间，我利用空闲时间游览了几处巴黎的著名景点。埃菲尔铁塔是必须打卡的地方，我登上了二层平台，俯瞰整个巴黎，景色壮观。卢浮宫则是艺术爱好者的天堂，蒙娜丽莎的微笑吸引了无数游客驻足。虽然巴黎圣母院还在维修中，但夜晚的圣母院依旧散发着无尽的魅力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卢浮宫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;卢浮宫（Louvre Museum）是世界上最大和最著名的博物馆之一。它最初建于 12 世纪作为皇宫，直到 1793 年开放为公众博物馆。卢浮宫收藏了超过 38 万件展品，跨越从古代文明到 19 世纪的艺术与历史文物。其中最著名的作品包括《蒙娜丽莎》、《维纳斯的诞生》和《胜利女神像》等。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/louvre.webp&#34; data-img=&#34;/blog/paris-trip/louvre.webp&#34; data-width=&#34;2104&#34; data-height=&#34;1568&#34; alt=&#34;image&#34; data-caption=&#34;卢浮宫&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;卢浮宫&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;卢浮宫里人流量最大的地方就是《蒙娜丽莎》，很多人在那里排起了长龙，只为一睹她那神秘的微笑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;万神殿&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巴黎万神殿，最初建造为教堂，现作为一个纪念馆，位于法国巴黎的拉丁区。这座建筑最初是为了纪念圣日内瓦瑞，后转变为纪念法国伟大人物的安息之地。建筑风格融合了古典与新古典元素，其宏伟的圆顶和庄严的柱廊使它成为巴黎的一个显著地标。万神殿内部装饰豪华，包括傅科摆锤和许多重要法国历史人物的墓穴。&lt;/p&gt;
&lt;p&gt;万神殿内的傅科摆，由法国物理学家利昂·福科于 1851 年设计，以证明地球自转的直接效应。这个简单但引人注目的实验包括一根悬挂的铁球，通过其自由摆动，观察者可以看到摆动平面相对于地面缓慢旋转的现象，这一旋转是地球自转的直接证据。福科摆锤不仅是物理学的一个重要实验，也成为了科学与艺术的结合象征。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/pantheon.webp&#34; data-img=&#34;/blog/paris-trip/pantheon.webp&#34; data-width=&#34;2400&#34; data-height=&#34;1500&#34; alt=&#34;image&#34; data-caption=&#34;万神殿内的傅科摆&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;万神殿内的傅科摆&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;塞纳河&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;清晨的塞纳河如诗如画，漫步在河畔，感受到巴黎的静谧与美好。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/seine.webp&#34; data-img=&#34;/blog/paris-trip/seine.webp&#34; data-width=&#34;4183&#34; data-height=&#34;1568&#34; alt=&#34;image&#34; data-caption=&#34;塞纳河&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;塞纳河&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;塞纳河是法国的一条主要河流，流经巴黎市中心。河流全长约 777 公里，起源于勃艮第地区的普拉特高原，最终流入英吉利海峡。塞纳河穿过巴黎时，河两岸布满了历史悠久的桥梁和著名的景点，如巴黎圣母院和埃菲尔铁塔。河流不仅是巴黎的重要交通水道，也是旅游和休闲的热门地点，常有游船在此穿梭，提供观光和餐饮服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;马德莱娜教堂&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/madeleine.webp&#34; data-img=&#34;/blog/paris-trip/madeleine.webp&#34; data-width=&#34;2400&#34; data-height=&#34;1500&#34; alt=&#34;image&#34; data-caption=&#34;马德莱娜教堂&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;马德莱娜教堂&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;马德莱娜教堂（Église de la Madeleine）是一座罗马天主教的教堂，以其古典希腊神庙风格著称。这座教堂建于 19 世纪初，外部有 52 根科林斯式柱子环绕。虽然外观极其庄严、类似神庙，但内部装饰华丽，拥有精美的雕刻和壁画。马德莱娜教堂不仅是宗教活动的场所，也常用于举行音乐会，特别是古典音乐演出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;圣心堂&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/basilique.webp&#34; data-img=&#34;/blog/paris-trip/basilique.webp&#34; data-width=&#34;2508&#34; data-height=&#34;1568&#34; alt=&#34;image&#34; data-caption=&#34;圣心堂&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;圣心堂&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;圣心堂（Basilique du Sacré-Cœur）位于法国巴黎蒙马特高地，是一座罗马天主教教堂，以其白色圆顶著称。这座教堂建于 1875 年至 1914 年间，是为了纪念普法战争中的法国阵亡将士而兴建的。圣心堂采用了罗曼 - 拜占庭风格的建筑设计，内部装饰华丽，拥有壮观的马赛克和雕塑。它不仅是巴黎的一个重要宗教地点，也因其位于城市之巅，提供了俯瞰巴黎全景的绝佳视角。&lt;/p&gt;
&lt;p&gt;除此之外，我还在骑行过程中游览了巴黎圣母院、香榭丽舍大道、爱丽舍宫、小皇宫、凯旋门、协和广场、杜乐丽花园、卢森堡公园等，限于篇幅不在此展开。&lt;/p&gt;
&lt;h2 id=&#34;关于奥运会&#34;&gt;关于奥运会&lt;/h2&gt;
&lt;p&gt;现代奥运会是法国人在巴黎提倡的，可能是法国人对奥运会已经司空见惯，也有可能是为了尽可能不打扰本地人的生活，此次巴黎之行，感受不到任何奥运会将在巴黎召开的气氛。只有一些标志性建筑旁在搭建一些展台可能是为了供奥运会使用，以及一些商店在售卖奥运会纪念品。&lt;/p&gt;
&lt;h2 id=&#34;评论&#34;&gt;评论&lt;/h2&gt;
&lt;p&gt;最近在中文互联网上，经常看到一些视频介绍巴黎的治安、环境是如何的不堪，比如街道上很多小偷、随地大小便、找不到厕所等。幸运的是我并没有遇到小偷，也没听到同伴有这样的遭遇。但是确实在一些街道尤其是景区周边闻到一些尿骚味，也遭遇了几个流浪汉问我要烟。还有就是卢浮宫里找不到厕所，唯一找到的一个男厕所还在维修中。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/paris-trip/street.webp&#34; data-img=&#34;/blog/paris-trip/street.webp&#34; data-width=&#34;1200&#34; data-height=&#34;1799&#34; alt=&#34;image&#34; data-caption=&#34;靠近卢浮宫的街道满是垃圾和尿骚味&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;靠近卢浮宫的街道满是垃圾和尿骚味&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;巴黎这座城市以其独特的魅力和丰富的文化底蕴给我留下了深刻的印象。这里的人们热情友好，景色美丽动人。虽然在一些游客密集的地方可能会稍显杂乱，但这也是任何旅游城市难以避免的现象。巴黎之行充满了美好的回忆，让人流连忘返，期待未来再次踏上这片浪漫的土地。也希望这篇游记能对初次踏上这篇土地人有所帮助。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>如何在 Istio 中集成第三方服务注册表？</title>
      <link>https://jimmysong.io/blog/how-to-integrate-third-party-registry-with-istio/</link>
      <pubDate>Fri, 14 Jun 2024 19:14:40 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/how-to-integrate-third-party-registry-with-istio/</guid>
      <description>
        
        
        &lt;p&gt;Istio 依赖 Kubernetes 来进行服务发现，这通常意味着必须在 Kubernetes 集群中部署微服务并使用 Kubernetes 服务发现。然而，很多现有的微服务项目还在使用如 Consul、Eureka 这样的第三方服务注册表，本文将探讨如何将这些现有的微服务的注册表与 Istio 集成。&lt;/p&gt;
&lt;h2 id=&#34;istio-对非-kubernetes-服务的支持&#34;&gt;Istio 对非 Kubernetes 服务的支持&lt;/h2&gt;
&lt;p&gt;Istio 最初只支持 Kubernetes 服务，但随着时间的推移，为了适应更广泛的应用场景，它开始支持像 Consul 这样的第三方服务注册表。通过引入 Mesh Configuration Protocol（MCP），Istio 能够与各种服务发现后端通信，如 Consul，从而管理非 Kubernetes 环境中的服务。在 Istio 1.1 版本中，引入了 ServiceEntry 资源对象，这使得用户可以手动将外部服务添加到 Istio 的服务注册表中，并在 Istio 1.8 中取消了对 Consul 的直接支持，转而通过 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/service-entry/&#34; title=&#34;ServiceEntry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ServiceEntry&lt;/a&gt; 提供了一种更灵活的方式来集成和管理所有服务，无论它们是否托管在 Kubernetes 上。&lt;/p&gt;
&lt;h2 id=&#34;istio-代理配置的高层架构&#34;&gt;Istio 代理配置的高层架构&lt;/h2&gt;
&lt;p&gt;下图展示了 Istio 代理配置的高层架构，揭示了配置如何从各种源被摄取、转换，并最终服务于 Envoy 代理。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/how-to-integrate-third-party-registry-with-istio/ba3ac1f8ffc2b172dd0681013c328a09.svg&#34; data-img=&#34;/blog/how-to-integrate-third-party-registry-with-istio/ba3ac1f8ffc2b172dd0681013c328a09.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 代理配置高层架构&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 代理配置高层架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;要想详细了解 Istiod 的架构，可以参考 &lt;a href=&#34;https://cloudnative.to/blog/istiod-architecture/&#34; title=&#34;Istio 架构详解&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 架构详解&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;配置摄取过程详解&#34;&gt;配置摄取过程详解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ConfigStore&lt;/strong&gt;: 负责读取多种类型的资源并进行聚合。包括：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;XDS Client&lt;/strong&gt;: 通过 xDS 协议读取资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRD Client&lt;/strong&gt;: 从 Kubernetes 自定义资源定义（CRD）读取资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filesystem Client&lt;/strong&gt;: 从文件系统读取资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ServiceDiscovery&lt;/strong&gt;: 聚合面向服务的内部资源。使用的组件包括：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kube Controller&lt;/strong&gt;: 依据 Kubernetes 核心类型运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ServiceEntry Controller&lt;/strong&gt;: 依据 Istio 类型运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置翻译与服务&#34;&gt;配置翻译与服务&lt;/h3&gt;
&lt;p&gt;配置从 ConfigStore 和 ServiceDiscovery 聚合后，由 &lt;strong&gt;Config Translator&lt;/strong&gt; 翻译成适合代理的格式，然后通过 &lt;strong&gt;XDS Server&lt;/strong&gt; 服务于 Envoy 代理。这是将动态配置应用于代理的最终步骤。&lt;/p&gt;
&lt;h2 id=&#34;第三方注册表同步&#34;&gt;第三方注册表同步&lt;/h2&gt;
&lt;p&gt;为了集成第三方服务注册表，我们可以实现一个 Operator，该 Operator 监视第三方服务注册表并将服务以 ServiceEntry 和 WorkloadEntry 资源形式推送至 Kubernetes API 服务器。以下流程图展示了该同步过程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/how-to-integrate-third-party-registry-with-istio/34ee760a4cb26025ecf954077f77eee2.svg&#34; data-img=&#34;/blog/how-to-integrate-third-party-registry-with-istio/34ee760a4cb26025ecf954077f77eee2.svg&#34; alt=&#34;image&#34; data-caption=&#34;第三方注册表同步流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;第三方注册表同步流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;第三方服务注册表同步的步骤说明&#34;&gt;第三方服务注册表同步的步骤说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Operator 向第三方服务注册表发起查询请求。&lt;/li&gt;
&lt;li&gt;第三方服务注册表返回当前注册的服务数据。&lt;/li&gt;
&lt;li&gt;Operator 将服务数据转换为 Istio 的 ServiceEntry 对象。&lt;/li&gt;
&lt;li&gt;Operator 将 ServiceEntry 推送至 Kubernetes API 服务器。&lt;/li&gt;
&lt;li&gt;Kubernetes API 服务器将变更通知 Istiod。&lt;/li&gt;
&lt;li&gt;Istiod 更新 Envoy Proxies 的配置。&lt;/li&gt;
&lt;li&gt;Operator 定期检查第三方服务注册表以监控服务变化，发现变更后更新 ServiceEntry 并重新推送至 Kubernetes API 服务器，完成服务同步。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;istio-registry-sync&#34;&gt;Istio Registry Sync&lt;/h2&gt;
&lt;p&gt;Tetrate 开发的 &lt;a href=&#34;https://docs.tetrate.io/istio-subscription/integrations/registry-sync/introduction&#34; title=&#34;Istio Registry Sync&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Registry Sync&lt;/a&gt; 是一个扩展 Operator，可以作为 &lt;a href=&#34;https://docs.tetrate.io/istio-subscription/&#34; title=&#34;TIS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TIS&lt;/a&gt; 的 add-on 运行。它支持非 Kubernetes 服务注册表（如 AWS Cloud Map 和 Consul）与 Istio 的集成。此工具提供了以下几个使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;混合应用集成&lt;/strong&gt;: 在混合环境中，如使用 Consul 的传统应用与 AWS Cloud Map 中的微服务可以通过 Istio Registry Sync 实现无缝的服务发现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态端点管理&lt;/strong&gt;: 在服务频繁扩缩的环境中，Istio Registry Sync 能快速反映来自配置注册表的变更，确保 Istio 服务网格中的流量管理策略准确有效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一的监控与安全态势&lt;/strong&gt;: 通过将所有环境的服务集成至 Istio，可以利用 Istio 提供的服务健康指标和统一的安全协议，如 mTLS，确保跨所有服务的加密和认证通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过上述方法，你可以有效地将 Istio 与第三方服务注册表集成，无论是通过开发自定义的 Operator 还是使用现成的 Istio Registry Sync 工具。这样不仅能够保持服务的现代化，还能确保在不同环境之间的高效协同工作。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istio/istio/blob/master/pilot/doc/architecture.md&#34; title=&#34;Istio Pilot Architecture - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Pilot Architecture - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.tetrate.io/istio-subscription/integrations/registry-sync/introduction&#34; title=&#34;Istio Registry Sync Documentation - docs.tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Registry Sync Documentation - docs.tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>深入解析 Istio 1.22：新特性和实际应用建议</title>
      <link>https://jimmysong.io/blog/what-is-new-in-istio-1-22/</link>
      <pubDate>Tue, 11 Jun 2024 16:23:50 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/what-is-new-in-istio-1-22/</guid>
      <description>
        
        
        &lt;p&gt;最近 &lt;a href=&#34;https://istio.io/latest/news/releases/1.22.x/announcing-1.22/&#34; title=&#34;Istio 1.22 发布&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.22 发布&lt;/a&gt;包含大量的重大更新，本文将为你分享这个发布带来的新特性及应用建议。&lt;/p&gt;
&lt;h2 id=&#34;ambient-模式进入-beta-阶段&#34;&gt;Ambient 模式进入 Beta 阶段&lt;/h2&gt;
&lt;p&gt;虽然 Ambient 模式现已进入 Beta 阶段，但这并不意味着我们可以完全告别 Sidecar。尽管 Istio 官方宣称 Ambient 模式可以简化操作并显著减少内存和 CPU 使用，但它仍然存在局限性和潜在的复杂性问题。例如，虽然取消了 Sidecar，但需引入新的 ztunnel 和 waypoint 组件，这可能带来新的挑战。关于 Ambient 模式进入 Beta 模式的详细信息请参阅 &lt;a href=&#34;https://istio.io/latest/blog/2024/ambient-reaches-beta/&#34; title=&#34;Istio 官方博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 官方博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ambient 模式带来的新的挑战&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ambient mode 对 L7 流量的管理仍未成熟&lt;/li&gt;
&lt;li&gt;mTLS 被强制在 namespace 级别开启，也就是说使用 Ambient 模式你无法关闭 mTLS&lt;/li&gt;
&lt;li&gt;Ambient 模式的无宕机升级仍未解决&lt;/li&gt;
&lt;li&gt;缺少 与 Sidecar 模式共存和迁移的最佳实践&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Sidecar 模式和 Ambient 模式的对比，详见 &lt;a href=&#34;https://jimmysong.io/blog/istio-ambient-mode-limitations/&#34; title=&#34;Istio Ambient 模式的局限性解析&#34;&gt;Istio Ambient 模式的局限性解析&lt;/a&gt;。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    建议
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    如果是刚开始使用 Istio，尤其是你只需要为服务自动开启 mTLS 的情况下，当前阶段可以尝试使用 Ambient 模式。但是对于 L7 功能，建议等到 Ambient 模式完全成熟后再考虑生产上使用。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;istio-api-升级&#34;&gt;Istio API 升级&lt;/h2&gt;
&lt;p&gt;Istio Istio 1.22 版本中，关键 API 如流量管理、安全、Telemetry 相关的 API 都已正式升级到 &lt;code&gt;v1&lt;/code&gt; 版本。你只需要将原有配置的 API 版本修改为 &lt;code&gt;v1&lt;/code&gt; 即可，除此之外不需要任何更改。这些 API 早已成熟，你可以放心的使用 &lt;code&gt;v1&lt;/code&gt; 版本，对于对稳定性要求较高的环境，Istio 添加了&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/validating-admission-policy/&#34; title=&#34;验证准入策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;验证准入策略&lt;/a&gt;确保只有 &lt;code&gt;v1&lt;/code&gt; API 和字段可以在 Istio API 中使用。&lt;/p&gt;
&lt;p&gt;例如下面的 AuthorizationPolicy 示例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;finance-to-supply-chain&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;finance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;finance-app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ALLOW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;finance&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/supply1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/supply2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request.headers[:authority]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;supply-chain-service.supply-chain.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其他扩展类的 API 如 &lt;code&gt;EnvoyFilter&lt;/code&gt;、&lt;code&gt;WasmPlugin&lt;/code&gt;、&lt;code&gt;ProxyConfig&lt;/code&gt; 还未成熟，因此还停留在 alpha 或 beta 阶段。关于 API 升级的更多信息，请参考 &lt;a href=&#34;https://istio.io/latest/blog/2024/v1-apis/&#34; title=&#34;v1 API 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v1 API 博客&lt;/a&gt;。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    建议
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    对于常用功能可以放心使用 &lt;code&gt;v1&lt;/code&gt; API，扩展类 API 尚未稳定为了保证系统稳定性，可以开启验证准入策略。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;gateway-api-升级&#34;&gt;Gateway API 升级&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jimmysong.io/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/&#34; title=&#34;Gateway API&#34;&gt;Gateway API&lt;/a&gt; 已更新至版本 1.1.0，现已普遍可用。这一更新扩展了 Istio 的流量管理能力，但需要注意 Istio 原生 API 与 Gateway API 的兼容性问题。在迁移到新 API 时应谨慎，以避免依赖尚未完全成熟的特性。更多详情，请查看 &lt;a href=&#34;https://istio.io/latest/blog/2024/gateway-mesh-ga/&#34; title=&#34;Gateway API v1.1 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API v1.1 博客&lt;/a&gt;。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    建议
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    对于已经稳定使用 Istio API 的现有部署，可以继续使用，尤其是在需要使用到高级功能的场景下。对于新部署优先考虑使用稳定版的 Gateway API，以利用其现代化的流量管理功能。因为二者现存的兼容性问题，不要冒然迁移到 Gateway API，否则得不偿失。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;增量-xds-默认启动&#34;&gt;增量 xDS 默认启动&lt;/h2&gt;
&lt;p&gt;Istio 1.22 版本默认启用了增量 xDS，这是一个优化配置分发的机制。与传统的 State of the World（SotW）模式相比，增量 xDS 仅将变更的配置发送给 Envoy 代理，从而显著减少了网络传输的数据量和控制平面的资源消耗。这一变更尤其适用于配置频繁更新的大规模部署环境，能够提高配置更新的效率和性能。此外，增量 xDS 还有助于在网络环境复杂或配置动态变化的情况下，更高效地管理服务网格的配置更新。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    建议
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    增量 xDS 早在 Istio 的几个版本前就已经开发完成，只是没有默认开启，现在该功能已经稳定，可以放心使用。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;更多关于 xDS 的介绍请参考&lt;a href=&#34;https://jimmysong.io/blog/istio-delta-xds-for-envoy/&#34; title=&#34;Envoy xDS 及 Istio 中的配置分发流程介绍&#34;&gt;Envoy xDS 及 Istio 中的配置分发流程介绍&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;authorizationpolicy-的路径模板支持通配符&#34;&gt;AuthorizationPolicy 的路径模板支持通配符&lt;/h3&gt;
&lt;p&gt;在 Istio 1.22 中，&lt;code&gt;AuthorizationPolicy&lt;/code&gt; 新增了对&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/#Operation&#34; title=&#34;路径模板&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路径模板&lt;/a&gt;的支持，极大增强了路径匹配的灵活性和精确性。而在此之前，&lt;code&gt;AuthorizationPolicy&lt;/code&gt; 的路径配置并不支持通配符。此功能允许使用基于 Envoy 的 URI 模板匹配来定义 HTTP 请求中的路径。路径可以包括简单的通配符（&lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt;）或具名变量，从而精确匹配单个或多个路径组件。例如，路径模板 &lt;code&gt;/foo/{*}&lt;/code&gt; 能匹配 &lt;code&gt;/foo/bar&lt;/code&gt; 但不匹配 &lt;code&gt;/foo/bar/baz&lt;/code&gt;，而 &lt;code&gt;/foo/{**}/&lt;/code&gt; 则可以匹配任何以 &lt;code&gt;/foo/&lt;/code&gt; 开头的路径。这种灵活的路径模板设计，特别适用于动态和复杂的路由规则，进一步加强了 Istio 的安全策略工具箱。&lt;/p&gt;
&lt;p&gt;下图展示了 AuthorizationPolicy 的路径匹配的通配符规则。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/what-is-new-in-istio-1-22/f96fd4f3843d3d7b7c13b0a5083f00f4.svg&#34; data-img=&#34;/blog/what-is-new-in-istio-1-22/f96fd4f3843d3d7b7c13b0a5083f00f4.svg&#34; alt=&#34;image&#34; data-caption=&#34;AuthorizationPolicy 的路径匹配通配符规则&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;AuthorizationPolicy 的路径匹配通配符规则&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;了解更多关于路径模板的具体应用和规则，你可以参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/path/match/uri_template/v3/uri_template_match.proto&#34; title=&#34;Envoy 的官方文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 的官方文档&lt;/a&gt;。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 中的路径匹配终于支持模板了，你不需要再在配置中一个一个地手动加入路径了。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio 1.22 版本引入了多项重要更新和改进，尽管某些特性被广泛宣传，但在实际使用中需要进行详细评估和适当的测试。希望本篇博客能帮助你更深入地理解和应用这些新特性，以在实际操作中获得最佳效果。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2024/05/09/gateway-api-v1-1/&#34; title=&#34;Gateway API v1.1: Service mesh, GRPCRoute, and a whole lot more - kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API v1.1: Service mesh, GRPCRoute, and a whole lot more - kubernetes.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>自驾伊犁河谷：领略新疆壮美风景</title>
      <link>https://jimmysong.io/blog/xinjiang-ili-trip/</link>
      <pubDate>Mon, 10 Jun 2024 10:38:16 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/xinjiang-ili-trip/</guid>
      <description>
        
        
        &lt;p&gt;三年前，我与 Addo &lt;a href=&#34;https://jimmysong.io/blog/xinjiang-trip/&#34; title=&#34;环游了新疆北疆&#34;&gt;环游了新疆北疆&lt;/a&gt;，那次旅行让我久久难忘，尤其是伊犁河谷地带，始终萦绕在心头。这次端午佳节，我决定再赴伊犁，开启一场自驾之旅。&lt;/p&gt;
&lt;p&gt;经过精心策划，我从北京出发，途经乌鲁木齐转机，来到美丽的伊宁。在这里，我们租了一辆车，开始了为期一周、总行程 1344 公里的自驾之旅。&lt;/p&gt;
&lt;h2 id=&#34;航拍视频&#34;&gt;航拍视频&lt;/h2&gt;
&lt;p&gt;在这段视频中，你将看到我在旅途中拍摄的壮丽航拍画面。从广阔的草原到清澈的湖泊，从巍峨的雪山到蜿蜒的公路，这些美景都在视频中得到了完美的呈现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 56.25%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=1205635099&amp;amp;bvid=BV16f421D7Qs&amp;amp;cid=1576995666&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; &lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;伊宁喀赞其&#34;&gt;伊宁喀赞其&lt;/h2&gt;
&lt;p&gt;我们的第一站是伊宁市的喀赞其民俗村，这是一个充满民族风情的小镇。这里的街道两旁是独具特色的传统民居，五彩斑斓的墙壁和蓝色的大门，仿佛童话世界。喀赞其的生活气息浓厚，街上随处可见当地居民的日常生活场景。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/kazanqi_hu672704477371809370.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/kazanqi.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/kazanqi.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;1799&#34; alt=&#34;image&#34; data-caption=&#34;伊宁喀赞其&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;伊宁喀赞其&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;伊犁河&#34;&gt;伊犁河&lt;/h2&gt;
&lt;p&gt;从喀赞其出发，我们前往了伊犁河。伊犁河的河水清澈见底，两岸绿树成荫，广阔的湿地景色宜人。我们在伊犁湿地公园观看了一场壮美的日落，沉醉于大自然的美景中。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/ili-river_hu15963143138266016541.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/ili-river.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/ili-river.jpg&#34; data-width=&#34;2400&#34; data-height=&#34;1600&#34; alt=&#34;image&#34; data-caption=&#34;伊犁河&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;伊犁河&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;喀拉峻&#34;&gt;喀拉峻&lt;/h2&gt;
&lt;p&gt;第三站是喀拉峻草原。广阔的草原上，牛羊成群，远处的雪山与蓝天白云相映成趣，构成了一幅绝美的自然画卷。这里平均海拔 2000 多米，空气格外清新，每一口呼吸都让人感到无比的舒畅。我在这里露营了一晚，经过了一夜的风雨，第二天雨过天晴日出时，阳光洒在身上暖洋洋的，眺望远处的日照金山。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/kalajun_hu9572174426500533550.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/kalajun.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/kalajun.jpg&#34; data-width=&#34;2400&#34; data-height=&#34;1600&#34; alt=&#34;image&#34; data-caption=&#34;喀拉峻草原&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;喀拉峻草原&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;琼库什台&#34;&gt;琼库什台&lt;/h2&gt;
&lt;p&gt;接下来，我们来到了琼库什台。这个哈萨克族的原始村庄虽然多了一些商业气息，但依然保留着原始的魅力。草原和河谷里新开的民宿和饭店让更多游客慕名而来。我们骑马前往后山，体验了最纯粹的自然风光。尤其是夕阳西下时，在山顶看着连绵起伏的草原和远处的雪山交相辉映，相映成趣。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/qiongkushitai_hu4398480714388269131.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/qiongkushitai.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/qiongkushitai.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;1799&#34; alt=&#34;image&#34; data-caption=&#34;琼库什台&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;琼库什台&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;夏塔古道&#34;&gt;夏塔古道&lt;/h2&gt;
&lt;p&gt;夏塔古道是此次行程中的重要景点。古道曾是丝绸之路上的一部分，沿途高山峡谷景色壮丽。尽管景区尚未开放，我们还是通过无人机航拍领略了这里的冰川河谷。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/xiata_hu15045008874240310409.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/xiata.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/xiata.jpg&#34; data-width=&#34;2400&#34; data-height=&#34;1799&#34; alt=&#34;image&#34; data-caption=&#34;夏塔古道&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;夏塔古道&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;伊昭公路&#34;&gt;伊昭公路&lt;/h2&gt;
&lt;p&gt;伊昭公路被誉为新疆最美的公路之一。沿途风景从高山到草原，从森林到湖泊，变幻多姿。行驶在悬崖峭壁上，不禁感叹开路人的艰辛。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/yizhao-highway_hu8466009586321783755.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/yizhao-highway.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/yizhao-highway.jpg&#34; data-width=&#34;1800&#34; data-height=&#34;1349&#34; alt=&#34;image&#34; data-caption=&#34;伊昭公路&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;伊昭公路&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;赛里木湖&#34;&gt;赛里木湖&lt;/h2&gt;
&lt;p&gt;最后一站是赛里木湖，位于博尔塔拉蒙古自治州。这个高山湖泊的湖水清澈见底，碧蓝如普鲁士蓝，四周环绕着雪山和草原，景色如诗如画。我们在湖边漫步，夜宿赛里木湖西岸，感受这座号称“大西洋的最后一滴眼泪”的静谧与壮丽。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/sayram-lake_hu7571049963329059119.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/sayram-lake.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/sayram-lake.jpg&#34; data-width=&#34;2400&#34; data-height=&#34;1798&#34; alt=&#34;image&#34; data-caption=&#34;赛里木湖&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;赛里木湖&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这次新疆伊犁自驾之旅不仅让我领略了壮丽的自然风光，还体验了当地独特的民族文化。通过航拍镜头，我记录下了这一路的美景，制作成了一个视频与大家分享。&lt;/p&gt;
&lt;h2 id=&#34;美食&#34;&gt;美食&lt;/h2&gt;
&lt;p&gt;伊犁不仅风景如画，美食也令人垂涎。红柳烤肉的鲜香、辣子肉的香辣（当地人将它作为早餐，配合花卷一起吃）、椒麻鸡的麻辣、赛里木湖的高山鲑鱼籽炒饭的鲜香，都是我旅途中难忘的味道。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/food_hu8414278169480254603.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-ili-trip/food.jpg&#34; data-img=&#34;/blog/xinjiang-ili-trip/food.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;顺时针方向分别为高山鲑鱼籽炒饭、红柳烤肉、辣子肉、椒麻鸡&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;顺时针方向分别为高山鲑鱼籽炒饭、红柳烤肉、辣子肉、椒麻鸡&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;另外新疆的干果、奶酪和牛肉干也是不错的伴手礼。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这次旅程将成为我人生中一段难忘的回忆。新疆伊犁的美景与魅力，让我深深地爱上了这片土地。如果有机会，我一定会再来这里，探索更多未尽的风景。&lt;/p&gt;
&lt;p&gt;希望这篇游记能带给你一些关于新疆伊犁的美好回忆。如果你也有机会去新疆旅行，一定不要错过这些美丽的景点。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Envoy xDS 及 Istio 中的配置分发流程介绍</title>
      <link>https://jimmysong.io/blog/istio-delta-xds-for-envoy/</link>
      <pubDate>Tue, 04 Jun 2024 16:18:06 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-delta-xds-for-envoy/</guid>
      <description>
        
        
        &lt;p&gt;在 Istio 项目的早期采用全局状态（State of the World，简称 SotW）的方式推送配置给 Envoy 代理。一旦有一个服务变更，就要将全局配置推送给所有 Sidecar，造成巨大的网络负担及控制平面的性能损耗。Istio 社区从几年前就开始开发增量 xDS 以解决此问题，并在最近几个 Istio 版本中支持了增量 xDS。在最近的 &lt;a href=&#34;https://istio.io/latest/news/releases/1.22.x/announcing-1.22/&#34; title=&#34;Istio 1.22 发布&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.22 发布&lt;/a&gt;中，增量 xDS 成为默认开启的功能。本文将为你介绍 xDS、增量 xDS 及 Istio 的配置分发方式。&lt;/p&gt;
&lt;h2 id=&#34;what-is-xds&#34;&gt;什么是 xDS？&lt;/h2&gt;
&lt;p&gt;xDS（Extensible Discovery Service）是一种通信协议，用于在微服务架构中管理服务发现和动态配置。这种机制被广泛用于 Envoy 代理和 Istio 服务网格中，以管理各种类型的资源配置，如路由、服务发现、负载均衡设置等。&lt;/p&gt;
&lt;h3 id=&#34;xds-services&#34;&gt;xDS 包含哪些发现服务？&lt;/h3&gt;
&lt;p&gt;xDS 包括以下主要的发现服务，每种服务都负责不同类型的网络资源配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;LDS（Listener Discovery Service）&lt;/strong&gt;：管理 Envoy 监听器的配置，这些监听器定义了如何接收和处理入站连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RDS（Route Discovery Service）&lt;/strong&gt;：提供路由信息，定义了如何根据指定规则将请求路由到不同的服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CDS（Cluster Discovery Service）&lt;/strong&gt;：管理集群信息，集群代表一组逻辑上类似的后端服务实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EDS（Endpoint Discovery Service）&lt;/strong&gt;：提供具体服务实例的网络地址，这些服务实例组成了 CDS 中定义的集群。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDS（Secret Discovery Service）&lt;/strong&gt;：管理安全相关的配置，如 TLS 证书和私钥。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VHDS（Virtual Host Discovery Service）&lt;/strong&gt;：为 RDS 提供虚拟主机配置，允许动态更新虚拟主机而不重启连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SRDS（Scoped Route Discovery Service）&lt;/strong&gt;：管理路由作用域，提供基于不同条件（如请求头部）的动态路由选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTDS（Runtime Discovery Service）&lt;/strong&gt;：提供运行时配置，这些配置可用于实验性功能或精细调整系统行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ECDS（Extension Config Discovery Service）&lt;/strong&gt;：为特定过滤器提供动态配置更新的服务。目前，网络过滤器、HTTP 过滤器和监听器过滤器都支持 ECDS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些服务共同支持动态配置的分发和更新，使得基于 Envoy 的应用架构能够实时适应变化，提高可扩展性和灵活性。每种服务的实现可以独立进行，也可以通过聚合方式（如 ADS）进行统一管理。CNCF 也成立了 &lt;a href=&#34;https://github.com/cncf/xds&#34; title=&#34;xDS API 工作组&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS API 工作组&lt;/a&gt;来推动 xDS API 为 L4/L7 数据平面配置提供事实上的标准，类似于 SDN 中 OpenFlow 在 L2/L3/L4 中所扮演的角色。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    关于 xDS  协议的详细介绍，如 xDS 协议的 RPC 服务和变体方法，以及 xDS 请求流程，请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34; title=&#34;Envoy 代理文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 代理文档&lt;/a&gt;。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;xds-variants&#34;&gt;xDS 协议的变体&lt;/h3&gt;
&lt;p&gt;xDS 协议主要包括以下变体：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;State of the World (SotW)&lt;/strong&gt;：单独的 gRPC 流为每种资源类型提供完整数据，通常在 Envoy 代理初次启动时使用，也是 Istio 最早使用的 xDS 协议类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增量 xDS（Delta xDS）&lt;/strong&gt;：为每种资源类型提供变化的部分数据，从 2021 年开始开发，在 Istio 1.22 版本中开始默认开启。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聚合发现服务（ADS）&lt;/strong&gt;：一个 gRPC 流聚合所有资源类型的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增量 ADS（Delta ADS）&lt;/strong&gt;：一个 gRPC 流聚合所有资源类型的增量数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下表概述了 xDS 协议的四种变体，包括对每个变体的解释、使用场景以及优缺点的对比。这些变体为不同的网络环境和服务需求提供了多种选择，可以根据具体情况选择最合适的协议变体以优化服务的性能和资源使用。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;变体类型&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
          &lt;th&gt;使用场景&lt;/th&gt;
          &lt;th&gt;优点&lt;/th&gt;
          &lt;th&gt;缺点&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;SotW&lt;/td&gt;
          &lt;td&gt;每次都发送所有配置数据，不论是否有变化。&lt;/td&gt;
          &lt;td&gt;适用于配置较少变化的稳定环境。&lt;/td&gt;
          &lt;td&gt;简单易实现，易于理解和维护。&lt;/td&gt;
          &lt;td&gt;数据传输量大，不适合频繁更新配置的环境。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Delta xDS&lt;/td&gt;
          &lt;td&gt;只传输变更的配置数据，而不是全部数据。&lt;/td&gt;
          &lt;td&gt;适用于配置频繁变化，需要快速响应变更的环境。&lt;/td&gt;
          &lt;td&gt;减少了不必要的数据传输，提高了效率。&lt;/td&gt;
          &lt;td&gt;实现复杂，需要客户端和服务端管理配置状态。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ADS&lt;/td&gt;
          &lt;td&gt;通过单一的 gRPC 流来管理所有配置数据，无需为每种资源类型建立独立的连接。&lt;/td&gt;
          &lt;td&gt;适用于需要同时管理多种类型资源的复杂服务架构。&lt;/td&gt;
          &lt;td&gt;减少了网络连接数，简化了资源管理。&lt;/td&gt;
          &lt;td&gt;对于网络或服务质量差的情况，单点故障可能导致所有配置更新失败。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Delta ADS&lt;/td&gt;
          &lt;td&gt;结合了 ADS 和增量 xDS 的优点，通过一个 gRPC 流聚合并且只传输变化部分的资源。&lt;/td&gt;
          &lt;td&gt;适用于既需要管理多种资源类型，又需要频繁更新配置的极其动态的环境。&lt;/td&gt;
          &lt;td&gt;提供了最大的灵活性和效率，适合大规模和高动态的服务架构。&lt;/td&gt;
          &lt;td&gt;实现最为复杂，对于配置管理的逻辑要求高，需要精确控制资源的变更和传输。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    xDS 协议的四种变体介绍
    
&lt;/figcaption&gt;

&lt;p&gt;使用 xDS 协议的服务网格可以更灵活地管理微服务之间的通信和配置，减少了配置变更的延迟，提高了系统的响应速度和可靠性。&lt;/p&gt;
&lt;p&gt;在 Istio 中，DiscoveryServer 作为 Envoy 的 xDS API 的实现，负责监听 gRPC 接口并根据 Envoy 的需求动态推送配置。它能够处理各种资源类型的请求，并根据服务的变更实时更新 Envoy 配置。此外，它还支持安全特性，如验证客户端证书，确保只有合法的服务实例可以接收配置数据。&lt;/p&gt;
&lt;h3 id=&#34;xds-config&#34;&gt;xDS 变体的配置示例&lt;/h3&gt;
&lt;p&gt;使用 xDS 协议的变体通常涉及在 Envoy 代理或与之类似的服务网格配置中指定 xDS 服务器的详细信息。虽然不同的服务网格和代理服务器的配置细节可能有所不同，下面是一些通用的 YAML 配置示例，说明如何指定 xDS 服务器以及如何使用这些协议变体。&lt;/p&gt;
&lt;h4 id=&#34;state-of-the-world-sotw&#34;&gt;State of the World (SotW)&lt;/h4&gt;
&lt;p&gt;在 Envoy 的配置中，你可以通过静态资源或通过 API 动态获取资源的方式来使用 SotW。这里是一个简单的 Envoy 配置示例，显示了如何静态定义集群和监听器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address: 0.0.0.0, port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress_http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;codec_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_service }&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STATIC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ROUND_ROBIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address: 127.0.0.1, port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;axds&#34;&gt;增量 xDS&lt;/h4&gt;
&lt;p&gt;增量 xDS 的配置需要在 xDS 服务端支持增量协议，并在客户端配置中指定使用增量 xDS。Envoy 启动配置中需要添加 API 版本来启用增量 xDS：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;dynamic_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DELTA_GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DELTA_GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;ads&#34;&gt;聚合发现服务 (ADS)&lt;/h4&gt;
&lt;p&gt;使用 ADS 时，所有资源类型的配置通过一个单一的 API 端点聚合。这在 Envoy 配置中指定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;dynamic_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;adds&#34;&gt;增量 ADS&lt;/h4&gt;
&lt;p&gt;增量 ADS 通过在 ADS 配置中指定增量 API 类型，可以实现更为细粒度的更新：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;dynamic_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DELTA_GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这些配置示例需要根据你的具体环境和需求进行调整。更多细节和高级配置，你可以参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/config_source.proto#envoy-v3-api-enum-config-core-v3-apiconfigsource-apitype&#34; title=&#34;Envoy 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;istio-如何发送配置给-envoy-sidecar&#34;&gt;Istio 如何发送配置给 Envoy sidecar？&lt;/h2&gt;
&lt;p&gt;得益于 xDS 协议，如 Istio、Envoy Gateway 等可以通过 API 远程动态分发配置到 Envoy 代理。下图展示了 Istio 的配置分发流程（Sidecar 模式）。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-delta-xds-for-envoy/0fa133ccdbeb372a413ad1ecc99ff9f0.svg&#34; data-img=&#34;/blog/istio-delta-xds-for-envoy/0fa133ccdbeb372a413ad1ecc99ff9f0.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 的配置分发流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 的配置分发流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Istio 中配置分发的主要流程说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;声明式配置&lt;/strong&gt;：用户通过 YAML 文件或其他配置管理工具定义服务网格的配置。这些配置可以包括路由规则、安全策略、遥测设置等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;：Istio 配置文件被提交到 Kubernetes 集群中，通常是通过 &lt;code&gt;kubectl apply&lt;/code&gt; 命令或其他 CI/CD 工具。Kubernetes 接收到配置文件并将其存储在 etcd 数据库中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istiod&lt;/strong&gt;：Istiod 是 Istio 的控制平面组件，负责管理和分发配置。它监听从 Kubernetes API 服务器中传入的事件，获取相关配置变更，并对其进行处理。Istiod 解析配置文件，生成相应的路由规则和策略，并通过 xDS API 将这些配置分发到数据平面（Envoy 代理）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xDS API&lt;/strong&gt;：Istiod 使用 xDS API 将配置下发到各个 Envoy 代理中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Envoy Proxy&lt;/strong&gt;：Envoy 是 Istio 的数据平面组件，运行在每个服务的旁路（sidecar）容器中，拦截并管理所有入站和出站流量。Envoy 代理通过 xDS API 接收来自 Istiod 的配置，并根据这些配置进行流量管理、策略执行和遥测数据收集。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod&lt;/strong&gt;：每个服务实例运行在一个 Pod 中，Pod 内部包含一个应用容器和一个 Envoy 代理容器。Envoy 代理拦截应用容器的所有网络流量，并根据配置进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个配置分发流程确保了 Istio 能够动态管理和配置服务网格中的所有服务实例，提供一致的流量管理和策略执行。&lt;/p&gt;
&lt;h2 id=&#34;xds-的发展与-istio-中的-delta-xds-实现&#34;&gt;xDS 的发展与 Istio 中的 Delta xDS 实现&lt;/h2&gt;
&lt;p&gt;起初，xDS 采用了“全局状态”（State of the World，简称 SotW）的设计，这意味着任何一个配置的更改都需要向 Envoy 发送所有配置的完整状态。这种方法在网络和控制平面上造成了巨大的负担，尤其是在大规模服务部署时。&lt;/p&gt;
&lt;p&gt;在 2021 年的 EnvoyCon 上，Aditya Prerepa 和 John Howard 分享了 Istio 如何实现 Delta xDS，这是一种增量式的 xDS 实现。与传统的 SotW xDS 相比，Delta xDS 只发送变更的配置，显著减少了需要通过网络发送的配置数据量，从而提高了效率和性能。这种方法特别适用于那些配置频繁变更的环境，因为它只更新变化的部分而不是整个配置。&lt;/p&gt;
&lt;p&gt;在实现 Delta xDS 的过程中，Istio 团队面临了多个挑战，包括如何确保配置更新的正确性以及避免潜在的资源泄漏。他们通过采用干运行（Dry-run）模式来并行运行 SotW 和 Delta 生成器，逐步发现并修复了实现中的缺陷。此外，他们还引入了新的 Envoy 类型，如虚拟主机发现服务（Virtual Host Discovery Service），以支持更细粒度的配置分发。&lt;/p&gt;
&lt;h3 id=&#34;delta-xds-增量配置&#34;&gt;Delta xDS 增量配置&lt;/h3&gt;
&lt;p&gt;下图展示了 Delta xDS 增量配置的流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-delta-xds-for-envoy/835038abb9bb83ba223974c525293468.svg&#34; data-img=&#34;/blog/istio-delta-xds-for-envoy/835038abb9bb83ba223974c525293468.svg&#34; alt=&#34;image&#34; data-caption=&#34;Delta xDS 增量配置流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Delta xDS 增量配置流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Delta xDS 配置流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始完整配置&lt;/strong&gt;：控制平面向代理发送初始完整配置，此时使用的是 StoW 模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;订阅配置变更&lt;/strong&gt;：代理从控制平面订阅配置变更。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查配置变更&lt;/strong&gt;：控制平面检查相对于代理已知状态的配置变更。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算差异&lt;/strong&gt;：控制平面计算当前配置与代理持有的前一配置之间的差异（增量）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;仅发送差异&lt;/strong&gt;：控制平面仅发送变更的配置（差异）给代理，代理应用这些差异增量更新其配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该流程确保只有必要的变更被传输和应用，提高了效率并减少了网络和代理资源的负载。&lt;/p&gt;
&lt;h3 id=&#34;sotw-vs-delta-xds&#34;&gt;SotW vs Delta xDS&lt;/h3&gt;
&lt;p&gt;虽然 Delta xDS 解决了在大规模网络下的配置分发的性能问题，但是 SotW 模式依然有它存在的意义，比如在初次下发配置的情况下。下表对比了 Istio 中的两种配置分发方式：SotW (State of the World) 和 Delta xDS。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;对比项&lt;/th&gt;
          &lt;th&gt;SotW&lt;/th&gt;
          &lt;th&gt;Delta XDS&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;数据传输量&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;每次传输完整的配置数据，不管配置是否有变更。&lt;/td&gt;
          &lt;td&gt;仅传输发生变化的配置数据，减少了数据传输量。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;效率&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;在小型或变更少的环境中效率可接受。&lt;/td&gt;
          &lt;td&gt;在大型环境或频繁变更的环境中更高效。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;复杂性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;实现简单，易于理解和维护。&lt;/td&gt;
          &lt;td&gt;实现较为复杂，需要精细的变更跟踪和管理。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;可能因为重复发送大量未变更的数据而增加服务器和网络负载。&lt;/td&gt;
          &lt;td&gt;更低的资源消耗，因为只处理变更的部分。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;实时性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;配置更新后立即发送全量配置，实时性高。&lt;/td&gt;
          &lt;td&gt;只发送变更部分，响应更快，减少处理时间。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;适合配置变动不频繁的小型至中型部署。&lt;/td&gt;
          &lt;td&gt;适合配置频繁变更或大规模部署的场景。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    Istio 中的全局状态和增量 xDS 配置分发方式对比
    
&lt;/figcaption&gt;

&lt;p&gt;这个表格从数据传输量、效率、复杂性、资源消耗、实时性以及适用场景等多个角度对 SotW 和 Delta XDS 进行了对比，有助于在不同的使用环境中做出合适的选择。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在这篇文章中我分享了 xDS 的组成及 Istio 中配置分发的流程，还有 xDS 的两种模式 SotW 和 Delta xDS。随着 Delta xDS 在 Istio 1.22 版本中成为默认配置，这将有助于用户在大规模网络环境下轻松使用 Istio。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34; title=&#34;xDS REST and gRPC protocol - envoyproxy.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS REST and gRPC protocol - envoyproxy.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>如何为你的 Hugo 网站添加即时搜索功能</title>
      <link>https://jimmysong.io/blog/hugo-instant-search-guide/</link>
      <pubDate>Fri, 31 May 2024 10:21:36 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/hugo-instant-search-guide/</guid>
      <description>
        
        
        &lt;p&gt;最近我用 Fuse 和 Hugo 导出的全站结构化数据（压缩后仅 2MB）做的即时搜索，还有快捷搜索地址 &lt;a href=&#34;https://jimmysong.io/search/?q=&#34; title=&#34;https://jimmysong.io/search/?q=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://jimmysong.io/search/?q=&lt;/a&gt;关键词，定制了下结果展示页面，这就是开源的强大之处，任何地方都可以私人订制。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/hugo-instant-search-guide/search.webp&#34; data-img=&#34;/blog/hugo-instant-search-guide/search.webp&#34; data-width=&#34;1200&#34; data-height=&#34;924&#34; alt=&#34;image&#34; data-caption=&#34;搜索结果展示页面&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;搜索结果展示页面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;概览&#34;&gt;概览&lt;/h2&gt;
&lt;p&gt;下面我将分享下如何为你的 Hugo 网站添加即时搜索功能。大体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导出 Hugo 网站的结构化数据&lt;/li&gt;
&lt;li&gt;使用 Fuse 库构建搜索的 JavaScript 代码&lt;/li&gt;
&lt;li&gt;添加前端搜索模板&lt;/li&gt;
&lt;li&gt;自动化更新网站结构化数据&lt;/li&gt;
&lt;li&gt;进一步优化&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;读者可以参考 &lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder&#34; title=&#34;hugo-blox-builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hugo-blox-builder&lt;/a&gt; 这个项目中的搜索实现，下面是参考的代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端代码：&lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/blob/8d25fbed122c2c57d994ebd78d232e1b51683c7d/modules/blox-bootstrap/layouts/partials/search.html&#34; title=&#34;search.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;search.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;搜索实现：&lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/blob/main/modules/blox-bootstrap/assets/js/wowchemy-search.js&#34; title=&#34;wowchemy-search.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wowchemy-search.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;样式：&lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/blob/main/modules/blox-bootstrap/assets/scss/wowchemy/layouts/_search.scss&#34; title=&#34;_search.scss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_search.scss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;1-导出-hugo-网站的结构化数据&#34;&gt;1. 导出 Hugo 网站的结构化数据&lt;/h2&gt;
&lt;p&gt;首先，你需要为你的 Hugo 网站创建一个 JSON 文件，它将包含所有页面的必要元数据，如标题、描述、链接等。你可以通过 Hugo 的自定义输出格式来实现这一点。&lt;/p&gt;
&lt;p&gt;在你的 Hugo 配置文件（通常是 &lt;code&gt;config.toml&lt;/code&gt; 或 &lt;code&gt;config.yaml&lt;/code&gt;）中，添加一个自定义输出格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;home&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HTML&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RSS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;JSON&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;outputFormats&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;mediaType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;baseName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;isPlainText&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，在你的内容模板中（如 &lt;code&gt;layouts/_default/list.json.json&lt;/code&gt;），定义输出的 JSON 结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;.Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .Title }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .Summary }}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(eq&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;.Next&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;nil)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将为你的整个站点生成一个 &lt;code&gt;index.json&lt;/code&gt; 文件，其中包含所有页面的基本信息。当然你可能不想导出网站的所有页面，可以通过 Hugo 的语法，可定制化导出的 Section 或者不同类型页面。&lt;/p&gt;
&lt;h2 id=&#34;2-使用-fuse-库构建搜索的-javascript-代码&#34;&gt;2. 使用 Fuse 库构建搜索的 JavaScript 代码&lt;/h2&gt;
&lt;p&gt;接下来，使用 &lt;a href=&#34;https://fusejs.io/&#34; title=&#34;Fuse.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fuse.js&lt;/a&gt; 库来实现前端的即时搜索功能。首先，你需要在你的网站中包含 Fuse.js 的库文件。你可以从 &lt;a href=&#34;https://www.jsdelivr.com/package/npm/fuse.js&#34; title=&#34;jsDelivr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jsDelivr&lt;/a&gt; 等 CDN 加载它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，在你的 JavaScript 文件中，加载并解析 &lt;code&gt;index.json&lt;/code&gt; 文件，并使用 Fuse.js 进行搜索：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/index.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fuse&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Fuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;summary&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;includeScore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;search-input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;displayResults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayResults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;searchResults&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;search-results&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;searchResults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&amp;lt;a href=&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;#34;&amp;gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;lt;/a&amp;gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;searchResults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体实现可以参考 &lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/blob/main/modules/blox-bootstrap/assets/js/wowchemy-search.js&#34; title=&#34;wowchemy-search.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wowchemy-search.js&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3-添加前端搜索模板&#34;&gt;3. 添加前端搜索模板&lt;/h2&gt;
&lt;p&gt;在你的网站中添加一个搜索框和结果显示区域：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;search-input&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;输入搜索词&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;search-results&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外你还可以添加搜索快捷键，一般是组合键 &lt;code&gt;⌘/CTRL + K&lt;/code&gt; 来快速打开搜索页面。&lt;/p&gt;
&lt;p&gt;具体实现可以参考 &lt;a href=&#34;https://github.com/HugoBlox/hugo-blox-builder/blob/8d25fbed122c2c57d994ebd78d232e1b51683c7d/modules/blox-bootstrap/layouts/partials/search.html&#34; title=&#34;这个前端模板&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个前端模板&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;4-自动化更新网站结构化数据&#34;&gt;4. 自动化更新网站结构化数据&lt;/h2&gt;
&lt;p&gt;为了保证搜索结果的实时性，可以通过 GitHub Actions 或其他 CI/CD 工具来自动化 Hugo 网站的构建和部署流程，确保 &lt;code&gt;index.json&lt;/code&gt; 文件始终是最新的。&lt;/p&gt;
&lt;p&gt;创建一个 &lt;code&gt;.github/workflows/hugo_build.yml&lt;/code&gt; 文件，定义自动化流程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build and Deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Set up Hugo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-hugo@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hugo-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hugo --minify&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;github_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;publish_dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;./public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外如果你的网站支持多语言，可以为每种语言分别生成 &lt;code&gt;index.json&lt;/code&gt; 文件，并在不同的语言页面加载对应的索引文件。&lt;/p&gt;
&lt;h2 id=&#34;5-进一步优化&#34;&gt;5. 进一步优化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存优化&lt;/strong&gt;：为 &lt;code&gt;index.json&lt;/code&gt; 设置合理的缓存策略，以减少服务器负载和提高响应速度。如果你是会用的是 Github Pages 作为静态网站，那么可以忽略这一步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据压缩&lt;/strong&gt;：压缩你的 &lt;code&gt;index.json&lt;/code&gt; 文件，你可以选择导出网站的部分数据，比如某些 Section 的数据，对 Content 进行截取，或者压缩文件成 gz 格式，在 JavaScript 加载后再在前端解压，这样可以减少网络数据传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;搜索结果高亮&lt;/strong&gt;：增加搜索结果中关键词的高亮显示，提升用户体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级搜索选项&lt;/strong&gt;：允许用户通过特定字段（如作者、分类）进行过滤搜索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络优化&lt;/strong&gt;：异步加载用于搜索的 JavaScript 文件，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这些步骤，你可以有效地为你的 Hugo 网站添加一个高效且可定制的即时搜索功能。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文介绍了如何为 Hugo 网站添加即时搜索功能，并提供了进一步优化搜索功能的建议，包括缓存优化、搜索结果高亮显示和高级搜索选项。这不仅展示了开源技术的强大自定义能力，也使网站用户能更快更准确地找到所需信息。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>如何使用 Envoy Gateway 在 API 网关侧基于 OIDC 实现单点登录？</title>
      <link>https://jimmysong.io/blog/envoy-gateway-oidc/</link>
      <pubDate>Fri, 24 May 2024 10:20:20 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-gateway-oidc/</guid>
      <description>
        
        
        &lt;p&gt;在&lt;a href=&#34;https://jimmysong.io/blog/microservice-auth-methods/&#34; title=&#34;微服务中常见的认证方式详解&#34;&gt;微服务中常见的认证方式详解&lt;/a&gt;这篇博客中我们介绍到了 OAuth 2.0 认证，该身份认证协议有多种实现方式，其中最流行的就是 OpenID Connect（OIDC）认证。OIDC 能够为用户提供身份验证和授权。本文将介绍如何使用 Envoy Gateway 在 API 网关级别实现 OIDC 认证。&lt;/p&gt;
&lt;h2 id=&#34;auth-methods&#34;&gt;Envoy Gateway 支持的认证方式&lt;/h2&gt;
&lt;p&gt;Envoy Gateway 是一个使用 Envoy 实现的高性能的 API 网关，支持多种认证方式来保护 API 和微服务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;JWT 认证&lt;/strong&gt;: 使用 JSON Web Tokens（JWT）进行认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mTLS（双向 TLS）&lt;/strong&gt;: 使用双向 TLS 确保客户端和服务器之间的安全通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP Basic 认证&lt;/strong&gt;: 使用用户名和密码进行基本认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC 认证&lt;/strong&gt;: 使用 OpenID Connect 协议进行身份验证和授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部认证&lt;/strong&gt;：外部认证调用外部 HTTP 或 gRPC 服务来检查传入的 HTTP 请求是否经过认证。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文重点介绍如何在 Envoy Gateway 中配置和使用 OIDC 认证从而在网关侧实现单点登录。&lt;/p&gt;
&lt;h2 id=&#34;what-is-oidc&#34;&gt;什么是 OIDC？&lt;/h2&gt;
&lt;p&gt;OpenID Connect（OIDC）是一个基于 &lt;a href=&#34;https://jimmysong.io/blog/microservice-auth-methods/#oauth-20&#34; title=&#34;OAuth 2.0&#34;&gt;OAuth 2.0&lt;/a&gt; 的身份验证协议。它允许客户端通过认证服务器验证用户身份，并获取有关用户的信息。&lt;/p&gt;
&lt;p&gt;OIDC 认证流程如下图所示：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-oidc/83b3c4d30c57805947a314f67c7aa8c1.svg&#34; data-img=&#34;/blog/envoy-gateway-oidc/83b3c4d30c57805947a314f67c7aa8c1.svg&#34; alt=&#34;image&#34; data-caption=&#34;OIDC 认证流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;OIDC 认证流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;OIDC 为 OAuth 2.0 增加了身份验证层，通过引入 ID Token 和标准化的 UserInfo Endpoint，使 OAuth 2.0 不仅能够用于授权，还可以用于安全地验证用户身份，从而实现单点登录（SSO）和用户身份信息的获取。&lt;/p&gt;
&lt;h2 id=&#34;why-sso&#34;&gt;为什么要实现单点登录？&lt;/h2&gt;
&lt;p&gt;单点登录（Single Sign-On, SSO）是一种身份验证方式，它允许用户使用一个账户登录多个独立的应用系统，通过一次身份验证即可无缝访问所有相关应用，减少重复输入用户名和密码的麻烦，从而提升用户体验。SSO 集中管理用户身份和认证，增强了系统安全性，并简化了 IT 管理流程。&lt;/p&gt;
&lt;p&gt;对于微服务架构，SSO 尤其重要，因为它在各个微服务之间实现统一的认证和授权，避免了每个服务单独实现身份验证逻辑的需求，减少了用户重复登录的麻烦，并提高了用户体验。集中管理的方式还可以统一应用安全策略，更有效地监控和响应安全事件，提升系统的整体安全性。同时，通过使用标准化的令牌（如 JWT），SSO 简化了微服务之间的身份验证过程，提高了开发效率，让开发人员能够专注于业务逻辑的实现。&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;示例：使用 Envoy Gateway 和 Auth0 的单点登录&lt;/h2&gt;
&lt;p&gt;接下来我们将使用 Auth0 作为身份供应商，演示如何使用 Envoy Gateway 在 API 网关端实现单点登录。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;a href=&#34;https://www.bilibili.com/video/BV11m421K7ZW/?share_source=copy_web&amp;amp;vd_source=87728cb6b1b0090fc617caf07a40b236&#34; title=&#34;Bilibili&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bilibili&lt;/a&gt; 上查看该示例演示。&lt;/p&gt;
&lt;div class=&#34;video-container&#34; style=&#34;padding-top: 62.5%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?isOutside=true&amp;amp;aid=1604968380&amp;amp;bvid=BV11m421K7ZW&amp;amp;cid=1557352862&amp;amp;p=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt; 
&lt;h3 id=&#34;auth0-sequence&#34;&gt;基于 Auth0 实现单点登录&lt;/h3&gt;
&lt;p&gt;首先我们先说明下示例中 Envoy Gateway 基于 Auth0 实现单点登录的详细流程，如下图所示。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-oidc/0f2852499a637280acfa600e992fd2c8.svg&#34; data-img=&#34;/blog/envoy-gateway-oidc/0f2852499a637280acfa600e992fd2c8.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy Gateway 基于 Auth0 实现单点登录的流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy Gateway 基于 Auth0 实现单点登录的流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;步骤说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户访问网站&lt;/strong&gt;：用户通过浏览器访问 &lt;code&gt;https://www.example.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求转发&lt;/strong&gt;：浏览器向 Envoy Gateway 发送 GET 请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查 ID 令牌&lt;/strong&gt;：Envoy Gateway 检查用户请求的 cookie 是否包含有效的 ID 令牌。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重定向到身份提供商&lt;/strong&gt;：如果没有找到 ID 令牌，Envoy Gateway 将用户重定向到身份提供商（Identity Provider，IdP）的授权端点，在这里是 Auth0，关于 Auth0 如何实现 Login 的详细信息请查看 &lt;a href=&#34;https://auth0.com/docs/api/authentication#login&#34; title=&#34;Auth0 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Auth0 文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户登录&lt;/strong&gt;：用户在身份提供商的登录页面输入用户名和密码，并提交凭证进行登录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取授权码&lt;/strong&gt;：用户成功登录后，身份提供商将用户重定向回 Envoy Gateway，并在 URL 中包含授权码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换 ID 令牌&lt;/strong&gt;：Envoy Gateway 使用授权码向身份提供商请求 ID 令牌。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置 Cookie&lt;/strong&gt;：身份提供商返回 ID 令牌，Envoy Gateway 将其设置为用户的 cookie。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重定向&lt;/strong&gt;：Envoy Gateway 将 URL 重定向到 &lt;code&gt;https://www.example.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证 ID 令牌&lt;/strong&gt;：Envoy Gateway 验证用户请求中的 ID 令牌。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由请求&lt;/strong&gt;：验证通过后，Envoy Gateway 将请求路由到后端应用（App）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过上述流程，Envoy Gateway 实现了单点登录功能。用户的 HTTP 请求在没有得到授权的情况下都会被转发单点登录页面。除了 Auth0 以外，Envoy Gateway 还支持多个身份提供商，如 Azure AD、Keycloak、Okta、OneLogin、Salesforce、UAA 等。&lt;/p&gt;
&lt;p&gt;下面我们将按照时序图中的流程配置 Auth0 和 Envoy Gateway。&lt;/p&gt;
&lt;h3 id=&#34;auth0&#34;&gt;在 Auth0 上创建应用&lt;/h3&gt;
&lt;p&gt;请参考以下步骤在 Auth0 上设置一个 Regular Web Application：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问 &lt;a href=&#34;https://auth0.com/&#34; title=&#34;Auth0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Auth0&lt;/a&gt; 并注册一个免费账户。&lt;/li&gt;
&lt;li&gt;创建一个新的应用，并选择常规 Web 应用程序。&lt;/li&gt;
&lt;li&gt;在应用设置中，记录或设置以下字段：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Domain&lt;/strong&gt; ：&lt;code&gt;{DOMAIN}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client ID&lt;/strong&gt;：&lt;code&gt;{CLIENT_ID}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client Secret&lt;/strong&gt;：&lt;code&gt;{CLIENT_SECRET}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allowed Callback URLs&lt;/strong&gt;：&lt;code&gt;https://www.example.com/oauth2/myapp/callback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allowed Logout URLs&lt;/strong&gt;：&lt;code&gt;https://www.example.com/myapp/logout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记住上面的 Auth0 字段，我们将用它们来配置 Envoy Gateway 的安全策略。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    这里的 Logout URL 不起实际作用，应为在我们的下面示例中的 backend 服务并没有实现 Auth0 的 logout 接口。我们只是按照习惯在此添加该字段，以待未来实现。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;下面展示的是 Auth0 的配置页面截图，在设置好用户后并创建普通 Web 应用后，你只需要配置这两个地方。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-oidc/auth0-1.webp&#34; data-img=&#34;/blog/envoy-gateway-oidc/auth0-1.webp&#34; data-width=&#34;1400&#34; data-height=&#34;1079&#34; alt=&#34;image&#34; data-caption=&#34;Auth0 配置页面 1&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Auth0 配置页面 1&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-oidc/auth0-2.webp&#34; data-img=&#34;/blog/envoy-gateway-oidc/auth0-2.webp&#34; data-width=&#34;1400&#34; data-height=&#34;1079&#34; alt=&#34;image&#34; data-caption=&#34;Auth0 配置页面 2&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Auth0 配置页面 2&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;以上就是 Auth0 的全部配置，接下来我们将安装和配置 Envoy Gateway。&lt;/p&gt;
&lt;h3 id=&#34;install-envoy-gateway&#34;&gt;安装 Envoy Gateway&lt;/h3&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://jimmysong.io/blog/envoy-gateway-introduction/#envoy-gateway-quick-start&#34; title=&#34;Envoy Gateway 快速开始&#34;&gt;Envoy Gateway 快速开始&lt;/a&gt;在 minikube 上安装 Envoy Gateway：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;minikube start --driver&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;docker --cpus&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --memory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2g
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm install eg oci://docker.io/envoyproxy/gateway-helm --version v1.0.1 -n envoy-gateway-system --create-namespace
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v1.0.1/quickstart.yaml -n default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考安全网关，为 Envoy Gateway 配置 TLS：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建根证书和私钥来签署证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -x509 -sha256 -nodes -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -newkey rsa:2048 -subj &lt;span class=&#34;s1&#34;&gt;&amp;#39;/O=example Inc./CN=example.com&amp;#39;&lt;/span&gt; -keyout example.com.key -out example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 为 www.example.com 创建证书和私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -out www.example.com.csr -newkey rsa:2048 -nodes -keyout www.example.com.key -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/CN=www.example.com/O=example organization&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -req -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -CA example.com.crt -CAkey example.com.key -set_serial &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -in www.example.com.csr -out www.example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将证书/密钥存储在 Secret 中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create secret tls example-cert --key&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;www.example.com.key --cert&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;www.example.com.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新快速开始中创建的网关，使其包含 &lt;code&gt;443&lt;/code&gt; 端口并引用 &lt;code&gt;example-cert&lt;/code&gt; Secret 的 HTTPS Listener：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;op&amp;#34;: &amp;#34;add&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;path&amp;#34;: &amp;#34;/spec/listeners/-&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;value&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      &amp;#34;name&amp;#34;: &amp;#34;https&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      &amp;#34;protocol&amp;#34;: &amp;#34;HTTPS&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      &amp;#34;port&amp;#34;: 443,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      &amp;#34;tls&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        &amp;#34;mode&amp;#34;: &amp;#34;Terminate&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        &amp;#34;certificateRefs&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;          {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            &amp;#34;kind&amp;#34;: &amp;#34;Secret&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            &amp;#34;group&amp;#34;: &amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            &amp;#34;name&amp;#34;: &amp;#34;example-cert&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;]&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl patch gateway eg --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;json --patch-file /dev/stdin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 HTTPRoute，为 &lt;code&gt;/myapp&lt;/code&gt; 端点增加一条到&lt;code&gt;backend&lt;/code&gt; 服务的路由：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: HTTPRoute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: myapp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  parentRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  - name: eg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  hostnames: [&amp;#34;www.example.com&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  rules:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  - matches:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        type: PathPrefix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        value: /myapp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    backendRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - name: backend
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      port: 3000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;envoy-gateway-oidc&#34;&gt;配置 Envoy Gateway 的 OIDC 认证&lt;/h3&gt;
&lt;p&gt;创建一个 Kubernetes Secret，用于存储 OAuth Client 的 Client Secret：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create secret generic auth0-client-secret --from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;client-secret&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLIENT_SECRET&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    将 &lt;code&gt;${CLIENT_SECRET}&lt;/code&gt; 替换成你的 Auth0 Client Secret。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;创建一个安全策略（SecurityPolicy）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: SecurityPolicy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: oidc-example
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  targetRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    group: gateway.networking.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    kind: Gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    name: eg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  oidc:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    provider:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      issuer: &amp;#34;https://${DOMAIN}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    clientID: &amp;#34;${CLIENT_ID}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    clientSecret:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      name: &amp;#34;auth0-client-secret&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    redirectURL: &amp;#34;https://www.example.com/myapp/oauth2/callback&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    logoutPath: &amp;#34;/myapp/logout&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此处的 &lt;code&gt;issuer&lt;/code&gt; 应该填写成 Auth0 Domain。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirectURL&lt;/code&gt; 的值需要出现在 Auth0 配置的 Allowed Callback URLs 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logoutPath&lt;/code&gt; 是必须的，即使其 URL 端点并为实现 logout 逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个示例中我们为 Envoy Gateway 网关设置了 OIDC，修改 &lt;code&gt;targetRef&lt;/code&gt; 到 HTTPRoute，也可以为单个路由设置 OIDC。关于 ODIC 的具体配置，请参考 Envoy Gateway API 文档。&lt;/p&gt;
&lt;h3 id=&#34;login&#34;&gt;验证单点登录：登入&lt;/h3&gt;
&lt;p&gt;将 &lt;code&gt;www.example.com&lt;/code&gt; 添加到本地的 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;127.0.0.1 www.example.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/hosts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置应用程序的端口转发，以便你可以在本地通过域名访问示例应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ENVOY_SERVICE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get svc -n envoy-gateway-system --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gateway.envoyproxy.io/owning-gateway-namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default,gateway.envoyproxy.io/owning-gateway-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eg -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo kubectl -n envoy-gateway-system port-forward service/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ENVOY_SERVICE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; 443:443
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在在浏览器中访问 &lt;a href=&#34;https://www.example.com&#34; title=&#34;https://www.example.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.example.com&lt;/a&gt;，跳过证书风险提示，页面将跳转到 Auth0 的登录界面，如下图所示，选择使用 Google 账户登录。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-oidc/login.webp&#34; data-img=&#34;/blog/envoy-gateway-oidc/login.webp&#34; data-width=&#34;400&#34; data-height=&#34;649&#34; alt=&#34;image&#34; data-caption=&#34;登录界面&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;登录界面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在登录完成后，浏览器将跳转会 &lt;a href=&#34;https://www.example.com&#34; title=&#34;https://www.example.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.example.com&lt;/a&gt; 页面，并展示 HTTP 请求结果，如下面的 JSON 代码所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;proto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;/*Omit*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;Bearer eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaXNzIjoiaHR0cHM6Ly9kZXYtYXdoam15MzhnZzVxeng3dS51cy5hdXRoMC5jb20vIn0..IiH9LnxmnrGAVy-q.eQV_0Ssetw9mmrEaJNLlBowGJNX51awhh67WSejPrksuGU9e9-DcPJQqmR67ONFzTXWR6CFy4Rfgs4btsmEtvCtiNTCgrBHP90ddbOTg_pK31WnsQ7NThyRfGwoogSaAtK6hFrC2pxFaLj0XL7XvSPk-OaTzK1Zh1da1IM1cmWAWiBRc3nQiVWRDrExPo8-i5SawFe0jIcwytVSaRiX5Polyd3cZ7A7nlei-vDLCfj0HVzOO605nF7ED2dBSnZyev1sg14q598f3X2Vfhi2oJlnbiulGZIlpXgGbcPhzAJJxyEe6qpRpNg7Hbk8Ya-i8gUTwwNysrgm3.Zu5kD_6DzSfZPvwemttXYQ&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Cookie&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;OauthHMAC-167a6c5=RPdscXEBap0NeSIppJXoxkHt0qvMz4fNHXo2uvgDgIY=; OauthExpires-167a6c5=1716540771; BearerToken-167a6c5=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaXNzIjoiaHR0cHM6Ly9kZXYtYXdoam15MzhnZzVxeng3dS51cy5hdXRoMC5jb20vIn0..IiH9LnxmnrGAVy-q.eQV_0Ssetw9mmrEaJNLlBowGJNX51awhh67WSejPrksuGU9e9-DcPJQqmR67ONFzTXWR6CFy4Rfgs4btsmEtvCtiNTCgrBHP90ddbOTg_pK31WnsQ7NThyRfGwoogSaAtK6hFrC2pxFaLj0XL7XvSPk-OaTzK1Zh1da1IM1cmWAWiBRc3nQiVWRDrExPo8-i5SawFe0jIcwytVSaRiX5Polyd3cZ7A7nlei-vDLCfj0HVzOO605nF7ED2dBSnZyev1sg14q598f3X2Vfhi2oJlnbiulGZIlpXgGbcPhzAJJxyEe6qpRpNg7Hbk8Ya-i8gUTwwNysrgm3.Zu5kD_6DzSfZPvwemttXYQ; IdToken-167a6c5=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFKWkxWbnNrai0tYmhsNlJzVm51OCJ9.eyJpc3MiOiJodHRwczovL2Rldi1hd2hqbXkzOGdnNXF6eDd1LnVzLmF1dGgwLmNvbS8iLCJhdWQiOiJUZzhlNWVoa0xKM2hka3cxTzREMTBQd21QeTcxZHZtdiIsImlhdCI6MTcxNjQ1NDM3MSwiZXhwIjoxNzE2NDkwMzcxLCJzdWIiOiJnb29nbGUtb2F1dGgyfDExMjc0NDc3OTAyMjMzMTA0ODY0MCIsInNpZCI6IjRlSjhDZnZuZjd5Mm1kaE94QXBTY0JiUEhjOS1rZUVLIn0.r9dwIy_HeiO5_I3UlohLkeRES5FGoxqQnwmcA00cA_kdc5mUxgeVopXIhBUjJnTKv7bOUVJvFw21ew4gqVRJfllDyG-s_XfhSW1-lEXmCc2bGYDtOzva6k2S_VRgyMKfG04_DWFuTgO_pLtix28aYq8cGzKJ_VglT_KgRhoktzJu4Js5iCv9JPnydRJmpvRJwX3tDv_Q3mmUSazaLkhOTdiBJFrGlS07qEzJ_iWANZgR8uDNhpXdmlcqpb3MZkkMulr5-jXIgEhBQKpw28tUiSlzh6EpAVuBH9T1w8bUmFRzCc6JPPamJRfflYW5onNgYHDfcU0RpvpsCHRHRAZbdA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;/*Omit*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;X-Envoy-Internal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;X-Forwarded-For&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.244.0.51&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;X-Forwarded-Proto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;X-Request-Id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;c1e64057-c5c8-4fb2-a304-25c291eeed32&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ingress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;pod&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;backend-55d64d8794-4qvgd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时通过 Chrome 浏览器的  &lt;em&gt;Inspector - Application - Cookies&lt;/em&gt; 查看到 ID Token 如下图所示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-oidc/inspector.webp&#34; data-img=&#34;/blog/envoy-gateway-oidc/inspector.webp&#34; data-width=&#34;1400&#34; data-height=&#34;983&#34; alt=&#34;image&#34; data-caption=&#34;在 Chrome Inspector 中查看 ID Token&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;在 Chrome Inspector 中查看 ID Token&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;编写代码 Python 代码，&lt;code&gt;validate_id_token.py&lt;/code&gt;，解析 ID Token 并验证其有效性：&lt;/p&gt;







  


&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;validate_id_token.py&#34; download&gt;validate_id_token.py&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;jwt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;jwt.algorithms&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RSAAlgorithm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;argparse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;base64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;base64url_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;rem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_signing_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jwk_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;jwks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jwk_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jwk&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jwks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jwk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;kid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RSAAlgorithm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_jwk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jwk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Public key not found.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;validate_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jwk_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_unverified_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;kid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;kid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;signing_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_signing_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jwk_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;decoded_token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;signing_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;RS256&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;issuer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;issuer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoded_token&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argparse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Validate a JWT token.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;token&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;The JWT token to validate&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 解析 token 的 payload 部分，提取 audience 和 issuer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;decoded_payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base64url_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;payload_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoded_payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;aud&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;issuer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;iss&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;jwk_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;issuer&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.well-known/jwks.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validate_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jwk_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Token is valid. Decoded payload:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Token validation failed: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装依赖的包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install pyjwt requests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python validate_id_token.py &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ID_TOKEN&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到类似下面的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;Token is valid. Decoded payload:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;iss: https://dev-awhjmy38gg5qzx7u.us.auth0.com/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;aud: Tg8e5ehkLJ3hdkw1O4D10PwmPy71dvmv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;iat: 1716470905&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;exp: 1716506905&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;sub: google-oauth2|112744779022331048640&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;sid: 4W_hQNJJ8ftDL8S3Cozp8GEu2Au4_e9N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过该 ID Token 的值可以得出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该令牌由 Auth0 签发（&lt;code&gt;iss&lt;/code&gt; 字段）。&lt;/li&gt;
&lt;li&gt;该令牌的受众是特定的应用或 API（&lt;code&gt;aud&lt;/code&gt; 字段），对于 Auth0，这个值是 Client ID。&lt;/li&gt;
&lt;li&gt;令牌是在 2024 年 5 月 23 日 04:08:25 UTC 签发的（&lt;code&gt;iat&lt;/code&gt; 字段），并将在 2024 年 5 月 23 日 14:08:25 UTC 过期（&lt;code&gt;exp&lt;/code&gt; 字段）。&lt;/li&gt;
&lt;li&gt;令牌所代表的主体（用户）的唯一标识符是 &lt;code&gt;google-oauth2|112744779022331048640&lt;/code&gt;（&lt;code&gt;sub&lt;/code&gt; 字段）。在这里，这个标识符表明使用 Google OAuth2 登录的用户&lt;/li&gt;
&lt;li&gt;会话 ID 是 &lt;code&gt;4W_hQNJJ8ftDL8S3Cozp8GEu2Au4_e9N&lt;/code&gt;（&lt;code&gt;sid&lt;/code&gt; 字段），用于会话管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;logout&#34;&gt;验证单点登录：登出&lt;/h3&gt;
&lt;p&gt;由于我们的示例应用中没有实现 Auth0 的 Logout 逻辑，所以我们需要通过 HTTP 请求明确告知 Auth0 要 logout，在浏览器中访问该 URL：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOMAIN&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/v2/logout?client_id&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLIENT_ID&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请将 &lt;code&gt;${DOMAIN}&lt;/code&gt; 和 &lt;code&gt;${CLIENT_ID&lt;/code&gt; 修改为你的 Auth0 应用程序的&lt;a href=&#34;#auth0&#34; title=&#34;配置项&#34;&gt;配置项&lt;/a&gt;。关于 Auth0 如何登出 OIDC 端点的详细说明请查看 &lt;a href=&#34;https://auth0.com/docs/api/authentication#logout&#34; title=&#34;Auth0 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Auth0 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;登出后，页面将再次跳转到登录页面，在登录后，页面将重定向到 &lt;a href=&#34;https://www.example.com&#34; title=&#34;https://www.example.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.example.com&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过以上步骤，你可以在 Envoy Gateway 中实现 OIDC 认证，确保 API 的安全性。这种方法不仅能提供灵活的身份验证机制，还能简化应用程序的身份管理。通过集成 Auth0 等身份提供商，Envoy Gateway 可以轻松实现单点登录，提升用户体验和系统安全性。未来，你可以根据需求进一步配置和优化 Envoy Gateway，充分利用其强大的认证和授权功能，以满足更复杂的安全要求和业务需求。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Envoy Gateway OIDC Authentication - gateway.envoyproxy.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0&#34; title=&#34;Log Users Out of Auth0 with OIDC Endpoint - auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Log Users Out of Auth0 with OIDC Endpoint - auth0.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>微服务中常见的认证方式详解</title>
      <link>https://jimmysong.io/blog/microservice-auth-methods/</link>
      <pubDate>Wed, 22 May 2024 13:54:49 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/microservice-auth-methods/</guid>
      <description>
        
        
        &lt;p&gt;在现代微服务架构中，安全性是一个至关重要的方面。随着微服务数量的增加，如何确保服务间的安全通信成为了一个挑战。本文将介绍几种常见的微服务认证方式，帮助你在设计和实现微服务系统时选择合适的认证方案。&lt;/p&gt;
&lt;h2 id=&#34;comparation&#34;&gt;微服务中常用的认证方式&lt;/h2&gt;
&lt;p&gt;下表列出了几种微服务中常用的认证方式，并从优点、缺点、适用场景和现实示例等维度进行比较。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;认证方式&lt;/th&gt;
          &lt;th&gt;优点&lt;/th&gt;
          &lt;th&gt;缺点&lt;/th&gt;
          &lt;th&gt;运行位置&lt;/th&gt;
          &lt;th&gt;适用场景&lt;/th&gt;
          &lt;th&gt;典型用途&lt;/th&gt;
          &lt;th&gt;现实使用场景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;JWT&lt;/td&gt;
          &lt;td&gt;自包含令牌，减少服务器负担&lt;/td&gt;
          &lt;td&gt;令牌较大，可能会增加带宽开销&lt;/td&gt;
          &lt;td&gt;API 网关、服务间&lt;/td&gt;
          &lt;td&gt;微服务之间无状态通信&lt;/td&gt;
          &lt;td&gt;用户认证和授权&lt;/td&gt;
          &lt;td&gt;在微服务架构中，用户认证（如 Auth0、Firebase）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;OAuth 2.0&lt;/td&gt;
          &lt;td&gt;广泛支持，灵活性高&lt;/td&gt;
          &lt;td&gt;实现复杂，需要额外的交互&lt;/td&gt;
          &lt;td&gt;API 网关&lt;/td&gt;
          &lt;td&gt;第三方应用授权&lt;/td&gt;
          &lt;td&gt;第三方应用访问用户数据&lt;/td&gt;
          &lt;td&gt;Github OAuth，用于第三方应用访问 Github 数据和 API&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;mTLS&lt;/td&gt;
          &lt;td&gt;高安全性，防止中间人攻击&lt;/td&gt;
          &lt;td&gt;证书管理复杂，性能开销较大&lt;/td&gt;
          &lt;td&gt;服务间&lt;/td&gt;
          &lt;td&gt;高安全性要求的通信&lt;/td&gt;
          &lt;td&gt;安全敏感的服务通信&lt;/td&gt;
          &lt;td&gt;银行系统中的服务通信&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Basic 认证&lt;/td&gt;
          &lt;td&gt;简单易实现&lt;/td&gt;
          &lt;td&gt;不安全，容易被拦截&lt;/td&gt;
          &lt;td&gt;API 网关、服务间&lt;/td&gt;
          &lt;td&gt;简单的 API 保护&lt;/td&gt;
          &lt;td&gt;简单的内部服务&lt;/td&gt;
          &lt;td&gt;Kubernetes API Server 的基本认证&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;API Key 认证&lt;/td&gt;
          &lt;td&gt;简单易用&lt;/td&gt;
          &lt;td&gt;安全性低，容易被滥用&lt;/td&gt;
          &lt;td&gt;API 网关、服务间&lt;/td&gt;
          &lt;td&gt;低安全性要求的场景&lt;/td&gt;
          &lt;td&gt;简单的服务访问控制&lt;/td&gt;
          &lt;td&gt;各种公共 API，如 OpenAI API&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面我们将详细介绍这几种常见的认证方式。&lt;/p&gt;
&lt;h2 id=&#34;jwt&#34;&gt;JWT 认证&lt;/h2&gt;
&lt;p&gt;JWT（JSON Web Token）最早由 IETF JSON Web Token (JWT) 工作组提出，并在 2015 年作为 RFC 7519 标准正式发布。JWT 的设计目标是提供一种紧凑且自包含的方式，用于在各方之间安全地传递信息。由于其易于使用和无状态的特性，JWT 迅速被广泛采用，成为身份验证和信息交换的标准之一，特别是在微服务和现代 Web 应用中。&lt;/p&gt;
&lt;p&gt;下图展示的是 JWT 认证流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/microservice-auth-methods/5dbe313ba5e9704fe2669e7a1ea556a4.svg&#34; data-img=&#34;/blog/microservice-auth-methods/5dbe313ba5e9704fe2669e7a1ea556a4.svg&#34; alt=&#34;image&#34; data-caption=&#34;JWT 认证流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;JWT 认证流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;JWT 认证流程说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户提供凭证&lt;/li&gt;
&lt;li&gt;客户端请求访问令牌&lt;/li&gt;
&lt;li&gt;认证服务器返回 JWT 令牌&lt;/li&gt;
&lt;li&gt;客户端带 JWT 令牌请求资源服务器&lt;/li&gt;
&lt;li&gt;资源服务器验证 JWT&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;jwt-的格式说明及示例&#34;&gt;JWT 的格式说明及示例&lt;/h3&gt;
&lt;p&gt;JWT（JSON Web Token）由三个部分组成：头部（Header）、载荷（Payload）和签名（Signature），分别通过 Base64 编码后用点（.）连接在一起组成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;头部（Header）&lt;/strong&gt;：头部包含令牌类型和签名算法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;alg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HS256&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;typ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷（Payload）&lt;/strong&gt;：载荷包含声明（claims），即关于用户或其他数据的断言。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1234567890&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1516239022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名（Signature）&lt;/strong&gt;：签名由编码后的头部、编码后的载荷以及一个密钥通过头部中指定的算法生成。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HMACSHA256(
  base64UrlEncode(header) + &amp;#34;.&amp;#34; +
  base64UrlEncode(payload),
  secret
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个 JWT 令牌示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jwt&#34; data-lang=&#34;jwt&#34;&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;oauth-20&#34;&gt;OAuth 2.0&lt;/h2&gt;
&lt;p&gt;OAuth（Open Authorization）协议最早由 Blaine Cook 和 Chris Messina 在 2006 年提出。最初的目标是为 Twitter 提供一个开放的授权标准。OAuth 1.0 于 2007 年发布，提供了一个允许用户授权第三方应用访问其资源的标准化方式，但由于其复杂的签名机制和其他安全问题，受到了一些限制。&lt;/p&gt;
&lt;p&gt;为了克服这些缺点，IETF（Internet Engineering Task Force）成立了 OAuth 工作组，旨在开发一个更简化、更灵活的授权协议。2012 年，&lt;a href=&#34;https://oauth.net/2/&#34; title=&#34;OAuth 2.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAuth 2.0&lt;/a&gt; 正式发布（RFC 6749 和 RFC 6750）。OAuth 2.0 简化了授权流程，增加了多种授权模式，如授权码模式、简化模式、资源所有者密码凭证模式和客户端凭证模式。&lt;/p&gt;
&lt;p&gt;OAuth 2.0 迅速成为行业标准，广泛应用于各种网络服务和应用程序，如 Google、Facebook、GitHub 等。在此基础上，出现了多个扩展和补充协议（如 OpenID Connect），进一步增强了 OAuth 2.0 的功能和安全性。&lt;/p&gt;
&lt;p&gt;OAuth 2.0 的发展和扩展使其成为现代互联网身份验证和授权的重要基石，提供了灵活和安全的解决方案，满足了不断变化的网络应用需求。&lt;/p&gt;
&lt;p&gt;下图展示的是 OAuth 2.0 认证流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/microservice-auth-methods/d79d70a5b27686dbaf8eee2e825f3d6c.svg&#34; data-img=&#34;/blog/microservice-auth-methods/d79d70a5b27686dbaf8eee2e825f3d6c.svg&#34; alt=&#34;image&#34; data-caption=&#34;OAuth 2.0 认证流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;OAuth 2.0 认证流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;OAuth 2.0 认证流程说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户请求访问资源&lt;/li&gt;
&lt;li&gt;客户端请求认证&lt;/li&gt;
&lt;li&gt;用户登录并授权&lt;/li&gt;
&lt;li&gt;认证服务器返回授权码&lt;/li&gt;
&lt;li&gt;客户端交换授权码获取访问令牌&lt;/li&gt;
&lt;li&gt;客户端带访问令牌请求资源服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;oauth-20-授权码&#34;&gt;OAuth 2.0 授权码&lt;/h3&gt;
&lt;p&gt;在 OAuth 2.0 授权码模式中，授权码是客户端在用户授权后从授权服务器获取的短期凭证，用于交换访问令牌。授权码是一个临时的字符串，可以在授权服务器和客户端之间传递以获得更安全的访问令牌。&lt;/p&gt;
&lt;h3 id=&#34;oauth-20-扩展&#34;&gt;OAuth 2.0 扩展&lt;/h3&gt;
&lt;p&gt;OAuth 2.0 在发展过程中，为了适应不同的场景，发展出了众多的扩展，下表罗列出一些常用的扩展名称、主要功能及适用场景。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;扩展名称&lt;/th&gt;
          &lt;th&gt;主要功能&lt;/th&gt;
          &lt;th&gt;适用场景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;授权码 PKCE 扩展&lt;/td&gt;
          &lt;td&gt;提高授权码模式的安全性，防止授权码拦截攻击&lt;/td&gt;
          &lt;td&gt;公共客户端（如移动应用、单页应用）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;动态客户端注册协议&lt;/td&gt;
          &lt;td&gt;允许客户端动态注册和更新客户端信息&lt;/td&gt;
          &lt;td&gt;自动化和灵活性要求高的系统&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Token Introspection&lt;/td&gt;
          &lt;td&gt;允许资源服务器验证和获取访问令牌的详细信息&lt;/td&gt;
          &lt;td&gt;需要验证令牌有效性和获取令牌详细信息的场景&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Token Revocation&lt;/td&gt;
          &lt;td&gt;提供令牌撤销的标准接口&lt;/td&gt;
          &lt;td&gt;提高系统安全性和控制能力&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Device Authorization Grant&lt;/td&gt;
          &lt;td&gt;允许输入受限的设备通过其他设备完成身份验证&lt;/td&gt;
          &lt;td&gt;智能电视、游戏机等输入能力有限的设备&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Mutual TLS Client Authentication&lt;/td&gt;
          &lt;td&gt;基于双向 TLS 的客户端认证&lt;/td&gt;
          &lt;td&gt;高安全性要求的应用场景&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Resource Indicators&lt;/td&gt;
          &lt;td&gt;允许客户端在授权请求中指定访问的资源服务器&lt;/td&gt;
          &lt;td&gt;多资源服务器的支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Step-up Authentication Challenge Protocol&lt;/td&gt;
          &lt;td&gt;允许资源服务器按需请求更强的身份验证（如多因素认证）&lt;/td&gt;
          &lt;td&gt;高风险操作的高级认证&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;oauth-20-授权流程以-github-为例&#34;&gt;OAuth 2.0 授权流程（以 Github 为例）&lt;/h3&gt;
&lt;p&gt;GitHub 使用 OAuth 2.0 来授权第三方应用访问用户的 GitHub 数据。OAuth 2.0 令牌在 GitHub 上被称为 &amp;ldquo;access tokens&amp;rdquo;，用于验证和授权访问 GitHub API。它提供了一种安全、标准化的方法，允许第三方应用在用户授权的情况下访问 GitHub 资源。通过使用访问令牌，应用程序可以代表用户执行各种操作，如读取用户信息、访问仓库、创建 gists 等。这个过程确保了用户的安全和隐私，同时简化了应用程序的认证和授权流程。&lt;/p&gt;
&lt;p&gt;以下是使用 GitHub OAuth 2.0 令牌的详细流程和示例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户授权&lt;/strong&gt;：用户在第三方应用程序的界面上点击“Login with GitHub”按钮。应用程序将用户重定向到 GitHub 的授权页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取授权码&lt;/strong&gt;：用户在 GitHub 授权页面上登录并同意授权，GitHub 会将用户重定向回应用程序，并在 URL 参数中附带一个授权码（authorization code）。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://yourapp.com/callback?code=AUTHORIZATION_CODE
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;交换访问令牌&lt;/strong&gt;：应用程序服务器使用授权码向 GitHub 的授权服务器请求访问令牌。&lt;/p&gt;
&lt;p&gt;请求示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;POST https://github.com/login/oauth/access_token
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;client_id&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_CLIENT_ID&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;client_secret&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_CLIENT_SECRET&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;AUTHORIZATION_CODE&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;redirect_uri&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://yourapp.com/callback&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub 返回访问令牌&lt;/strong&gt;：GitHub 验证请求并返回访问令牌。&lt;/p&gt;
&lt;p&gt;响应示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_ACCESS_TOKEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;token_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bearer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;repo,gist&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用访问令牌访问资源&lt;/strong&gt;：应用程序使用获取的访问令牌访问 GitHub API。&lt;/p&gt;
&lt;p&gt;请求示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Authorization: token YOUR_ACCESS_TOKEN&amp;#34;&lt;/span&gt; https://api.github.com/user
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;响应示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github-user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;node_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MDQ6VXNlcjE=&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;avatar_url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://github.com/images/avatar.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Github User&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;company&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GitHub&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Earth&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github-user@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;访问令牌的特点和使用&#34;&gt;访问令牌的特点和使用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;权限范围（Scopes）&lt;/strong&gt;：访问令牌的权限范围由用户在授权时指定，可以包括读取用户资料、访问用户仓库、管理 gists 等。例如，在上述示例中，&lt;code&gt;scope&lt;/code&gt; 包含 &lt;code&gt;repo&lt;/code&gt; 和 &lt;code&gt;gist&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有效期和刷新&lt;/strong&gt;：访问令牌的有效期可以是长期的也可以设置时间范围，直到用户主动撤销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全传输&lt;/strong&gt;：访问令牌应通过 HTTPS 传输，以确保其不被截获。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mtls&#34;&gt;mTLS&lt;/h2&gt;
&lt;p&gt;mTLS（Mutual TLS）是一种在客户端和服务器之间进行双向身份验证的技术，最早起源于 TLS（传输层安全协议），TLS 的前身 SSL（安全套接层）协议于 1995 年由 Netscape 开发。随着互联网安全需求的增加，TLS 逐步发展为一个高度安全的通信标准，而 mTLS 则在此基础上进一步提升了安全性，通过要求双方互相验证身份，广泛应用于金融、医疗等对安全性要求极高的领域。&lt;/p&gt;
&lt;p&gt;下图展示的是 mTLS 认证流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/microservice-auth-methods/6a1cea6c141bda005fd183e0200b0f15.svg&#34; data-img=&#34;/blog/microservice-auth-methods/6a1cea6c141bda005fd183e0200b0f15.svg&#34; alt=&#34;image&#34; data-caption=&#34;mTLS 认证流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;mTLS 认证流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;mTLS 认证流程说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端与服务器互相发送证书&lt;/li&gt;
&lt;li&gt;双方验证对方证书&lt;/li&gt;
&lt;li&gt;建立安全连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多关于 TLS 和 mTLS 的内容请参考博客 &lt;a href=&#34;https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/#what-is-tls-and-mtls&#34; title=&#34;如何理解 Istio 中的 mTLS 流量加密&#34;&gt;如何理解 Istio 中的 mTLS 流量加密&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;basic&#34;&gt;Basic 认证&lt;/h2&gt;
&lt;p&gt;Basic 认证是一种最早由 HTTP/1.0 规范（RFC 1945）定义的简单认证机制，它通过将用户名和密码进行 Base64 编码后附加到 HTTP 请求头中进行身份验证。由于实现简单且易于使用，Basic 认证在早期的 Web 应用中被广泛采用。然而，由于其固有的安全性问题（如明文传输容易被截获），它在现代应用中通常与 HTTPS 一起使用，或被更安全的认证方式所替代。&lt;/p&gt;
&lt;p&gt;下图展示的是 Basic 认证流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/microservice-auth-methods/e6f9bd871c5b59988c0f251e4cc3af64.svg&#34; data-img=&#34;/blog/microservice-auth-methods/e6f9bd871c5b59988c0f251e4cc3af64.svg&#34; alt=&#34;image&#34; data-caption=&#34;Basic 认证流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Basic 认证流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Basic 认证流程说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户提供用户名和密码&lt;/li&gt;
&lt;li&gt;客户端带用户名和密码请求资源服务器&lt;/li&gt;
&lt;li&gt;资源服务器验证&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;basic-示例&#34;&gt;Basic 示例&lt;/h3&gt;
&lt;p&gt;Basic 认证使用 Base64 编码的用户名和密码进行认证。下面是使用 &lt;code&gt;curl&lt;/code&gt; 命令进行 Basic 认证请求的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -u &amp;lt;username&amp;gt;:&amp;lt;password&amp;gt; https://api.example.com/data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果用户名为 &lt;code&gt;admin&lt;/code&gt;，密码为 &lt;code&gt;password123&lt;/code&gt;，请求示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -u admin:password123 https://api.example.com/data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;api-key&#34;&gt;API Key 认证&lt;/h2&gt;
&lt;p&gt;API Key 认证是一种通过在请求中包含预先分配的唯一密钥来进行身份验证的方法，最早在 2000 年代初随着 Web API 的兴起而流行。API Key 认证由于其简单易用和便于管理的特性，被广泛应用于各种公共和私有 API 中。尽管它的安全性较低，容易被滥用，但在许多场景中仍然是控制访问的一种有效手段，特别是对于不需要高度安全保护的应用。&lt;/p&gt;
&lt;p&gt;下图展示的是 API Key 认证流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/microservice-auth-methods/8865798e8d7aea6c02e9913b925b0b2b.svg&#34; data-img=&#34;/blog/microservice-auth-methods/8865798e8d7aea6c02e9913b925b0b2b.svg&#34; alt=&#34;image&#34; data-caption=&#34;API Key 认证流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;API Key 认证流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;API Key 认证流程说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端带 API Key 请求资源服务器&lt;/li&gt;
&lt;li&gt;资源服务器验证 API Key&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;api-key-示例&#34;&gt;API Key 示例&lt;/h3&gt;
&lt;p&gt;API Key 是在请求中传递的一个唯一标识符，用于验证客户端身份。API Key 通常通过 HTTP 请求头或 URL 参数传递。&lt;/p&gt;
&lt;p&gt;HTTP 请求头中的 API Key 示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Authorization: ApiKey YOUR_API_KEY&amp;#34;&lt;/span&gt; https://api.example.com/data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;URL 参数中的 API Key 示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl https://api.example.com/data?api_key&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;YOUR_API_KEY
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;API Key 格式通常是一个字符串，包含字母和数字，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1234567890abcdef1234567890abcdef
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在微服务架构中选择合适的认证方式至关重要。不同的认证方式在安全性、复杂性和适用场景上各有优劣。本文介绍了 JWT、OAuth 2.0、mTLS、Basic 认证和 API Key 认证五种常见的认证方式，并提供了它们的优缺点和适用场景。此外，其他常见的认证方式如 SAML、LDAP、Kerberos 和 OpenID Connect 也广泛应用于不同的互联网应用场景，特别是在单点登录和跨域认证方面。希望这些信息能帮助你在设计和实现微服务系统时选择最合适的认证方案。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio Ambient 模式的局限性解析</title>
      <link>https://jimmysong.io/blog/istio-ambient-mode-limitations/</link>
      <pubDate>Thu, 16 May 2024 11:28:34 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-ambient-mode-limitations/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://istio.io/latest/news/releases/1.22.x/announcing-1.22/&#34; title=&#34;Istio 1.22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.22&lt;/a&gt; 版本的发布标志着 Ambient 模式正式进入 beta 阶段，随之发布了一篇标题为 &lt;a href=&#34;https://istio.io/latest/blog/2024/ambient-reaches-beta/&#34; title=&#34;告别 Sidecar：Istio 的 Ambient 模式在 v1.22 中达到 Beta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;告别 Sidecar：Istio 的 Ambient 模式在 v1.22 中达到 Beta&lt;/a&gt; 的博客，声称 Layer 4 和 Layer 7 的功能现已可用于生产环境。其实社区早在一个月前的 KubeCon EU 上就宣布了这一里程碑。这种激动人心的宣传似乎在暗示我们可以彻底抛弃 Sidecar 模式，但事实真是如此吗？&lt;/p&gt;
&lt;h3 id=&#34;为什么不急于告别-sidecar-模式&#34;&gt;为什么不急于告别 Sidecar 模式？&lt;/h3&gt;
&lt;p&gt;虽然我对新技术持开放态度，但完全告别 Sidecar 模式可能为时尚早。每种模式都有其特定的应用场景和优缺点。下面，我将详细分享 Ambient 模式相较于 Sidecar 模式的一些限制，帮助大家更好地理解两者之间的差异。&lt;/p&gt;
&lt;h3 id=&#34;ambient-模式与-sidecar-模式的关键区别&#34;&gt;Ambient 模式与 Sidecar 模式的关键区别&lt;/h3&gt;
&lt;h4 id=&#34;流量管理&#34;&gt;流量管理&lt;/h4&gt;
&lt;p&gt;Ambient 模式的 L7 流量管理支持尚未成熟，尚未达到生产环境的可用水平。相较之下，Sidecar 模式在这方面更为稳定和可靠。&lt;/p&gt;
&lt;h4 id=&#34;安全性&#34;&gt;安全性&lt;/h4&gt;
&lt;p&gt;在 Ambient 模式下，mTLS 被强制在 namespace 级别开启，而 Sidecar 模式则赋予用户更大的灵活性，可以选择是否启用 mTLS。这种灵活性对于某些应用场景尤为重要。&lt;/p&gt;
&lt;h4 id=&#34;可观测性&#34;&gt;可观测性&lt;/h4&gt;
&lt;p&gt;对于 L7 层的遥测数据，Ambient 模式能否像 Sidecar 模式一样对每个 pod 进行精确的监控和追踪仍是一个疑问。Sidecar 模式在可观测性方面已被广泛验证，其能力更为成熟。&lt;/p&gt;
&lt;h4 id=&#34;运维&#34;&gt;运维&lt;/h4&gt;
&lt;p&gt;部署方面，Ambient 模式推荐使用 Helm，仅支持 Kubernetes 平台，而 Sidecar 模式还支持虚拟机和混合云环境。此外，Ambient 模式尚未得到主要云厂商的官方支持。在升级过程中，Ambient 模式的爆炸半径更大，暂不支持金丝雀发布，推荐使用蓝绿部署。对于从 Sidecar 模式向 Ambient 模式的迁移或二者共存，仍缺乏最佳实践。&lt;/p&gt;
&lt;h4 id=&#34;扩展性&#34;&gt;扩展性&lt;/h4&gt;
&lt;p&gt;目前对于 Wasm 插件的支持，Ambient 模式仍不明确，而 Sidecar 模式在这方面已经有了较为完善的支持。&lt;/p&gt;
&lt;h4 id=&#34;其他功能特性&#34;&gt;其他功能特性&lt;/h4&gt;
&lt;p&gt;Dual Stack 模式在 Sidecar 模式下虽然仍处于实验阶段，但至少已有一定的实现，而 Ambient 模式是否支持这一特性仍不明朗。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;虽然 Istio 1.22 带来了令人兴奋的 Ambient 模式，但在完全告别 Sidecar 模式之前，我们需要慎重考虑这些限制和差异。每种模式都有其独特的优势和适用场景，用户应根据自身需求做出明智的选择。我将继续对 Ambient 模式进行测试和追踪，更多深入解读敬请关注本博客。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Envoy Gateway 概述——使用 Gateway API 的现代 Kubernetes 入口</title>
      <link>https://jimmysong.io/blog/envoy-gateway-introduction/</link>
      <pubDate>Wed, 08 May 2024 11:20:49 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-gateway-introduction/</guid>
      <description>
        
        
        &lt;p&gt;在 Kubernetes 环境下选择正确的网络通信工具至关重要。根据&lt;a href=&#34;https://tetrate.io/blog/do-i-need-a-gateway-or-a-service-mesh/&#34; title=&#34;Tetrate 的讨论&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 的讨论&lt;/a&gt;，选择取决于网络通信的类型：南北向流量还是东西向流量。对于主要处理外部请求的服务，Envoy Gateway 是理想选择，它不仅高效管理流量，还能在你向微服务架构过渡时提供无缝集成。&lt;/p&gt;
&lt;p&gt;本文将探讨 Envoy Gateway 在 Kubernetes 上部署的优势，及其它与服务网格的关系，展示为何它是暴露服务到公网的理想选择。&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Envoy Gateway 及其在服务网格中的角色概述&lt;/h2&gt;
&lt;p&gt;Envoy Gateway 是一个围绕 Envoy Proxy 构建的 Kubernetes 原生 API 网关，它旨在降低用户采用 Envoy 作为 API 网关的难度，并为供应商建立 API 网关（例如 &lt;a href=&#34;https://tetrate.io/tetrate-enterprise-gateway-for-envoy/&#34; title=&#34;Tetrate Enterprise Gateway for Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Enterprise Gateway for Envoy&lt;/a&gt;）增值产品奠定基础。&lt;/p&gt;
&lt;p&gt;Envoy Gateway 不仅是管理南北流量的理想选择，也可作为连接和保护服务网格中服务的关键组件。它还通过提供安全的数据传输、流量路由、负均衡及故障恢复等功能，增强了微服务之间的通信效率和安全性。Envoy Gateway 利用其内置的 Envoy Proxy 技术，可以处理大量的并发连接和复杂的流量管理策略，同时保持较低的延迟和高吞吐量。&lt;/p&gt;
&lt;p&gt;此外，Envoy Gateway 与 Kubernetes Gateway API 的紧密集成使得它能够以声明式的方式进行配置和管理，极大简化了服务网格中网关的部署和更新过程。这种集成不仅提升了操作效率，还使得 Envoy Gateway 能够在不增加额外复杂性的前提下，与服务网格如 Istio 这样的解决方案无缝协作。&lt;/p&gt;
&lt;p&gt;下图展示了 Envoy Gateway 与服务网格的关系。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-introduction/8691fed7a410e3a8f45252cc5c8e11db.svg&#34; data-img=&#34;/blog/envoy-gateway-introduction/8691fed7a410e3a8f45252cc5c8e11db.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy Gateway 与服务网格的关系&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy Gateway 与服务网格的关系&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在 Kubernetes 集群中，Envoy Gateway 负责管理南北向流量，即进出集群的流量，并通过 Kubernetes Gateway API 进行配置，后者定义了服务的路由规格。集群内服务直接连接到 Pods。服务网格部分，由控制平面（如 Istio 或 Linkerd）配置数据平面中的 Envoy Sidecars，这些 Sidecars 负责处理集群内部的东西向流量。在这个系统中，Envoy Gateway 可以与服务网格相互协作，但它们各自独立地管理不同方向的流量。&lt;/p&gt;
&lt;p&gt;设想一下，Envoy Gateway 像是一个城市的主要入口（比如海关），所有的数据流，就像各种车辆，都得通过这个大门进出。它就像一个严格的守门员，负责审查、指导，确保每个数据包，就像每个乘客，都能被准确地送到目的地。在 Kubernetes 这座城市中，Envoy Gateway 管理着所有进城的流量，它确保数据流可以安全、高效地进入城市，并被准确地送达给城市内部的服务。&lt;/p&gt;
&lt;p&gt;进入城市之后，服务网格就接管了，这就像城市内部的一系列交通网络。服务网格中的 Envoy sidecars 就好比是这座城市内部的出租车或者公交车，负责把数据包从海带到它们在城市内部的具体目的地。Envoy Gateway 负责将外部请求顺利引入，之后服务网格负责在集群内部继续高效地处理这些请求。&lt;/p&gt;
&lt;p&gt;Envoy Gateway 对 Kubernetes Gateway API 的支持，可以看作是对我们城市交通信号系统的一个重大升级。这不仅为进入城市的数据流提供了更加清晰和个性化的指引，而且让整个城市的交通运行更加智能化。&lt;/p&gt;
&lt;h2 id=&#34;pros&#34;&gt;Envoy Gateway 的核心功能和优势&lt;/h2&gt;
&lt;p&gt;Envoy Gateway 提供了几个核心功能，使其成为 API 网关的突出选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简化配置&lt;/strong&gt;：通过与 Kubernetes Gateway API 直接集成，Envoy Gateway 允许开发者使用 Kubernetes 自定义资源以声明方式配置路由规则、安全策略和流量管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能和可扩展性&lt;/strong&gt;：基于经过实战测试的 Envoy Proxy，它提供卓越的性能和可扩展性，轻松处理数千个服务和每秒数百万个请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全功能&lt;/strong&gt;：内置支持各种安全措施，如 SSL/TLS 终止、OAuth2、OIDC 认证以及细粒度访问控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可观测性&lt;/strong&gt;：提供全面的监控能力，包括详细的度量、日志和追踪，这对于诊断和理解流量行为至关重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gateway-api&#34;&gt;与 Gateway API 的关系&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 环境中引入的 Gateway API 为集成和配置 Ingress 网关提供了一种新的强大方法，它与传统的 Ingress 相比具有更高的灵活性和功能性。正如我在 &lt;a href=&#34;https://jimmysong.io/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/&#34; title=&#34;Gateway API：Kubernetes 和服务网格入口中网关的未来&#34;&gt;Gateway API：Kubernetes 和服务网格入口中网关的未来&lt;/a&gt; 中所讨论的，Gateway API 通过区分角色和提供跨命名空间支持，更适应多云环境，且已被多数 API 网关采用。这种 API 设计支持了 ingress 网关（南北向流量）与服务网格（东西向流量，跨集群路由）的融合，使得 Envoy Gateway 成为 Kubernetes 和服务网格中统一未来的网关解决方案。通过引入 Gateway API，Envoy Gateway 强化了其作为云原生环境中前沿代理的角色，使得用户能够更灵活地管理其流量和策略。&lt;/p&gt;
&lt;p&gt;Kubernetes Gateway API 是 Envoy Gateway 的基石，它提供了一种更具表达性、灵活性和以角色为导向的方式来配置 Kubernetes 生态系统中的网关和路由。该 API 提供了如 GatewayClass、Gateway、HTTPRoute 等自定义资源定义（CRD），Envoy Gateway 利用这些资源创建用户友好且一致的配置模型，与 Kubernetes 的原生原则保持一致。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    什么是 API Gateway？
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;API Gateway 是对 API 的全面管理和托管服务。它作为应用程序与后端服务之间的中间层，不仅处理创建、维护、发布、运行和下线等生命周期事件，还承担着更多关键职能。一个完善的 API Gateway 应该提供以下功能来丰富和扩展其基本定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;流量控制&lt;/strong&gt;：API Gateway 应能够处理并控制到后端服务的流量，包括请求路由、负载均衡、熔断机制以及速率限制，以保证后端服务的稳定性和高可用性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性保障&lt;/strong&gt;：应具备鉴权、授权和加密功能，能够有效地管理和保护 API 的安全。这涉及到身份验证机制、API 密钥管理、OAuth、JWT、mTLS 等，以确保只有授权的用户和服务能够访问 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控和分析&lt;/strong&gt;：提供实时监控和日志记录功能，能够跟踪 API 的使用情况、性能指标、异常检测和分析流量模式，从而优化 API 的性能和响应能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变更管理&lt;/strong&gt;：支持对 API 变更进行管理，包括版本控制和渐进式部署（如蓝绿部署或金丝雀发布），以无缝过渡新版本且最小化对最终用户的影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求和响应的转换&lt;/strong&gt;：允许对传入和传出的 API 调用进行转换，比如从 REST 到 GraphQL 的转换，或是添加、删除和修改请求头和响应头。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨域资源共享（CORS）支持&lt;/strong&gt;：管理和控制跨域请求，允许不同域的前端应用安全地调用后端 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配额和计费&lt;/strong&gt;：为 API 使用设定配额限制，同时支持计费功能，以适用于商业化的 API 提供。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户友好的开发者门户&lt;/strong&gt;：提供一个面向开发者的门户，使得第三方开发者可以轻松地发现、测试和集成 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议支持&lt;/strong&gt;：支持各种网络协议，包括 HTTP/HTTPS、WebSocket、gRPC 等，确保与多种客户端和服务的兼容性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件化和扩展性&lt;/strong&gt;：允许通过插件或中间件来扩展 API Gateway 的功能，使其可以根据业务需求灵活适配各种中间件服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务治理&lt;/strong&gt;：集成服务注册和发现机制，以适应微服务架构下服务的动态性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，API Gateway 的角色远远超越了简单的 API 生命周期管理。它是实现微服务架构、确保服务安全性、提高运维效率和优化用户体验的关键组件。通过这些广泛的功能，API Gateway 成为现代云原生应用不可或缺的一部分。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;arch&#34;&gt;Envoy Gateway 架构概览&lt;/h2&gt;
&lt;p&gt;Envoy Gateway 的架构设计旨在轻量级和简洁。它包括一个动态配置运行作为数据平面的 Envoy 代理的控制平面。这种关注点的分离确保了网关可以随着流量的增长而扩展，而不影响控制平面的效率。&lt;/p&gt;
&lt;p&gt;Envoy Gateway 的架构图如下所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-gateway-introduction/envoy-gateway-arch.svg&#34; data-img=&#34;/blog/envoy-gateway-introduction/envoy-gateway-arch.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy Gateway 架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy Gateway 架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在这个架构图的核心是 Envoy Gateway，它是 Envoy 代理的执行实例，负责处理从 Kubernetes 集群进出的所有流量。初始启动时，Envoy Gateway 通过配置文件提供静态配置，建立其操作的基本参数。&lt;/p&gt;
&lt;p&gt;Envoy Gateway 配置的动态方面由提供者处理，该提供者定义了网关与 Kubernetes 或其他动态配置输入源的交互。资源监视器负责监视 Kubernetes 资源的更改，特别关注与自定义资源定义（CRD）相关的 CRUD 操作。&lt;/p&gt;
&lt;p&gt;随着更改的发生，资源转换器介入将这些外部资源转换为 Envoy Gateway 可以理解的形式。这一转换过程进一步由特定于提供者的基础设施管理器促进，后者负责管理与特定云或基础设施提供商相关的资源，塑造中间表示形式的基础设施，这对于网关的功能至关重要。&lt;/p&gt;
&lt;p&gt;然后，该中间表示形式转变为 xDS 中间表示形式，作为 Envoy 理解和执行的最终 xDS 配置的先导。xDS 翻译器承担将这种中间表示形式转换为具体的 xDS 配置的角色。&lt;/p&gt;
&lt;p&gt;这些配置由 xDS 服务器交付并执行，该服务器作为服务，根据其收到的 xDS 配置，认真管理 Envoy 实例。Envoy 作为实际运行的代理，最终从 xDS 服务器接收这些配置，解释并实现它们以有效管理流量请求。&lt;/p&gt;
&lt;p&gt;最终，所有请求经过 Envoy 的处理后被重定向到了 Envoy Gateway 路由的流量的最终目的地，也就是后端服务。&lt;/p&gt;
&lt;h2 id=&#34;comparations&#34;&gt;与其他网关的比较&lt;/h2&gt;
&lt;p&gt;与 Istio 的入口网关或 NGINX Ingress 等其他流行解决方案相比，Envoy Gateway 凭借其与 Kubernetes 的原生集成以及利用 Envoy 全部潜力的专注，而脱颖而出。下图从多方面对比了目前流行的一些开源的 API 网关。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;API 网关&lt;/th&gt;
          &lt;th&gt;支持的认证和授权策略&lt;/th&gt;
          &lt;th&gt;支持的服务发现组件&lt;/th&gt;
          &lt;th&gt;支持的协议&lt;/th&gt;
          &lt;th&gt;控制平面配置分发方法&lt;/th&gt;
          &lt;th&gt;支持的插件扩展机制&lt;/th&gt;
          &lt;th&gt;组织隶属&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Envoy Gateway&lt;/td&gt;
          &lt;td&gt;OAuth2, JWT, mTLS, OIDC&lt;/td&gt;
          &lt;td&gt;Kubernetes, EDS&lt;/td&gt;
          &lt;td&gt;HTTP, HTTPS, gRPC&lt;/td&gt;
          &lt;td&gt;xDS&lt;/td&gt;
          &lt;td&gt;基于 Envoy Filter&lt;/td&gt;
          &lt;td&gt;CNCF&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Kuma&lt;/td&gt;
          &lt;td&gt;mTLS, JWT&lt;/td&gt;
          &lt;td&gt;Kubernetes, Consul&lt;/td&gt;
          &lt;td&gt;HTTP, HTTPS, gRPC, TCP&lt;/td&gt;
          &lt;td&gt;REST, gRPC&lt;/td&gt;
          &lt;td&gt;基于 Lua, Go&lt;/td&gt;
          &lt;td&gt;CNCF&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NGINX Ingress&lt;/td&gt;
          &lt;td&gt;RBAC&lt;/td&gt;
          &lt;td&gt;Kubernetes&lt;/td&gt;
          &lt;td&gt;HTTP, HTTPS, TCP, UDP&lt;/td&gt;
          &lt;td&gt;Kubernetes CRD&lt;/td&gt;
          &lt;td&gt;基于 Nginx 模块&lt;/td&gt;
          &lt;td&gt;N/A&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;APISIX&lt;/td&gt;
          &lt;td&gt;OAuth2, JWT, Key Auth, Basic Auth, mTLS, OIDC, LDAP, OpenID 等&lt;/td&gt;
          &lt;td&gt;Kubernetes, DNS, Consul, Nacos, Eureka&lt;/td&gt;
          &lt;td&gt;HTTP, HTTPS, TCP, UDP, WebSocket&lt;/td&gt;
          &lt;td&gt;REST, CLI, Web UI&lt;/td&gt;
          &lt;td&gt;基于 Lua, Wasm&lt;/td&gt;
          &lt;td&gt;Apache Software Foundation&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Kong&lt;/td&gt;
          &lt;td&gt;OAuth2, JWT, Basic Auth, Key Auth&lt;/td&gt;
          &lt;td&gt;Kubernetes, DNS, Consul&lt;/td&gt;
          &lt;td&gt;HTTP, HTTPS, gRPC, WebSocket&lt;/td&gt;
          &lt;td&gt;REST, gRPC, Web UI&lt;/td&gt;
          &lt;td&gt;基于 Lua&lt;/td&gt;
          &lt;td&gt;N/A&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Emissary&lt;/td&gt;
          &lt;td&gt;Basic Auth&lt;/td&gt;
          &lt;td&gt;Kubernetes&lt;/td&gt;
          &lt;td&gt;HTTP, HTTPS, gRPC&lt;/td&gt;
          &lt;td&gt;Kubernetes CRD&lt;/td&gt;
          &lt;td&gt;基于 Lua, Go&lt;/td&gt;
          &lt;td&gt;CNCF&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    开源 API 网关对比
    
&lt;/figcaption&gt;

&lt;h2 id=&#34;envoy-gateway-quick-start&#34;&gt;快速开始使用 Envoy Gateway&lt;/h2&gt;
&lt;p&gt;要快速上手 Envoy Gateway，你可以通过以下简化步骤快速搭建一个本地实验环境。首先，启动一个本地 Kubernetes 集群：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;minikube start --driver&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;docker --cpus&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --memory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2g
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，部署 Gateway API CRD 和 Envoy Gateway 本身：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm install eg oci://docker.io/envoyproxy/gateway-helm --version v1.0.1 -n envoy-gateway-system --create-namespace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，安装网关配置并部署一个示例应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v1.0.1/quickstart.yaml -n default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了暴露 LoadBalancer 服务，这里我们使用端口转发作为示例。你也可以选择使用 &lt;code&gt;minikube tunnel&lt;/code&gt; 或安装 &lt;a href=&#34;https://metallb.universe.tf/installation/&#34; title=&#34;MetalLB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MetalLB&lt;/a&gt; 作为负载均衡器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ENVOY_SERVICE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get svc -n envoy-gateway-system --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gateway.envoyproxy.io/owning-gateway-namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default,gateway.envoyproxy.io/owning-gateway-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eg -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n envoy-gateway-system port-forward service/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ENVOY_SERVICE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; 8888:80 &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过以下命令测试你的 Envoy Gateway 是否正常工作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --verbose --header &lt;span class=&#34;s2&#34;&gt;&amp;#34;Host: www.example.com&amp;#34;&lt;/span&gt; http://localhost:8888/get
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;想了解更多详细的安装和配置步骤，请访问 Envoy Gateway 网站。通过这些步骤，你可以快速开始探索 Envoy Gateway 的功能。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Envoy Gateway 不仅优化了云原生时代的七层网关配置，而且为从边缘网关向服务网格过渡提供了一个平滑的道路。由于服务网格的推广面临一些挑战，如对应用的侵入性和运维团队推动问题，边缘网关则更易于被开发团队接受。Envoy Gateway 采用简化的 Kubernetes Gateway API，提高了流量管理和可观测性的能力。此外，Envoy Gateway 到 Istio 的过渡对于已熟悉 Envoy 功能的团队来说，将是一个自信的技术进步，同时还支持从标准的 Kubernetes Gateway API 到 Istio Ingress Gateway 的无缝切换，或者作为一个定制解决方案继续与 Istio 协作。这些特点使得 Envoy Gateway 成为一个在云原生时代值得投资的网关选择。&lt;/p&gt;
&lt;p&gt;请继续关注本系列博客的后续部分，我们将深入探讨如何配置和优化 Envoy Gateway，提供实用指南并展示更广泛的实际应用案例。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>KubeCon EU 2024 透明度报告解读</title>
      <link>https://jimmysong.io/blog/kubecon-eu-2024-transparency-report/</link>
      <pubDate>Tue, 07 May 2024 21:11:49 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/kubecon-eu-2024-transparency-report/</guid>
      <description>
        
        
        &lt;p&gt;近日 CNCF 发布了 &lt;a href=&#34;https://www.cncf.io/reports/kubecon-cloudnativecon-europe-2024/&#34; title=&#34;KubeCon EU 2024 的透明度报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon EU 2024 的透明度报告&lt;/a&gt;，KubeCon + CloudNativeCon Europe 2024 在巴黎举办，这是有史以来最大规模的一次会议，我也有幸能亲临现场参加，巴黎的美景和会议的氛围让我久久难以忘怀。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/kubecon-eu-2024-transparency-report/report-cover_hu5923241400518983683.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/kubecon-eu-2024-transparency-report/report-cover.jpg&#34; data-img=&#34;/blog/kubecon-eu-2024-transparency-report/report-cover.jpg&#34; data-width=&#34;500&#34; data-height=&#34;705&#34; alt=&#34;image&#34; data-caption=&#34;《KubeCon &amp;#43; CloudNativeCon EU 2024 透明度报告》封面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;《KubeCon + CloudNativeCon EU 2024 透明度报告》封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们见证了开源和云原生社区的力量，以及它如何推动技术的下一个重大转变 —— 人工智能。在这次会议上，CNCF 宣布成立 AI 工作组，并推出了第一版&lt;a href=&#34;https://jimmysong.io/blog/cloud-native-ai-whitepaper/&#34; title=&#34;云原生 AI 白皮书&#34;&gt;云原生 AI 白皮书&lt;/a&gt;，随后有创建了&lt;a href=&#34;https://rx-m.github.io/cnai-landscape/?group=cnai&#34; title=&#34;云原生 AI Landscape&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生 AI Landscape&lt;/a&gt;。&lt;/p&gt;
&lt;iframe src=&#34;https://rx-m.github.io/cnai-landscape/embed/embed.html?key=cnai&amp;headers=true&amp;category-header=true&amp;category-in-subcategory=false&amp;item-name=false&amp;title-uppercase=false&amp;title-alignment=left&amp;title-font-family=sans-serif&amp;title-font-size=13&amp;style=shadowed&amp;size=xs&amp;items-alignment=left&amp;bg-color=%23016bcc&amp;fg-color=%23ffffff&amp;base-path=%2Fcnai-landscape&#34; style=&#34;width:100%;height:500px;display:block;border:none;&#34;&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;增长与多样性&#34;&gt;增长与多样性&lt;/h2&gt;
&lt;p&gt;本次活动迎来了超过 12,000 名参与者，大部分来自欧洲（78%），其中 52% 为首次参会者。来自不同地区的参与者都表现出了对云原生技术的热情。我们还看到了业务运营、开发者和架构师等多样化的职能背景，这突显了云原生技术跨领域的广泛应用。&lt;/p&gt;
&lt;p&gt;下表来自不同国家的参会人数 Top 10：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;国家&lt;/th&gt;
          &lt;th&gt;参会人数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;法国&lt;/td&gt;
          &lt;td&gt;1,956&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;德国&lt;/td&gt;
          &lt;td&gt;1,879&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;美国&lt;/td&gt;
          &lt;td&gt;1,733&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;英国&lt;/td&gt;
          &lt;td&gt;816&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;荷兰&lt;/td&gt;
          &lt;td&gt;797&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;瑞士&lt;/td&gt;
          &lt;td&gt;368&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;西班牙&lt;/td&gt;
          &lt;td&gt;355&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;以色列&lt;/td&gt;
          &lt;td&gt;312&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;波兰&lt;/td&gt;
          &lt;td&gt;303&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;丹麦&lt;/td&gt;
          &lt;td&gt;293&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;创新与交流&#34;&gt;创新与交流&lt;/h2&gt;
&lt;p&gt;活动期间，有 331 场会议和 19 场主题演讲，覆盖了人工智能、应用开发、平台工程等多个热门领域。本届 KubeCon 首次举办了面向研究者的海报会话和项目馆导览，帮助参会者更好地了解各个项目。&lt;/p&gt;
&lt;h2 id=&#34;社区与包容性&#34;&gt;社区与包容性&lt;/h2&gt;
&lt;p&gt;KubeCon 致力于支持多样性、公平性和包容性。活动提供的多样性午餐和 Peer Group Mentoring 等活动，为参与者提供了建立联系和互帮互助的平台。（PS. 会场提供的餐饮实在是让我喜欢不了，尤其是茶的味道，还有硬邦邦的面包）&lt;/p&gt;
&lt;h2 id=&#34;环保与可持续性&#34;&gt;环保与可持续性&lt;/h2&gt;
&lt;p&gt;在环保和可持续性方面，主办方选择了具有环保意识的会场，并实施了减少食物浪费和回收废物的措施。这体现了 CNCF 对环境保护的承诺。&lt;/p&gt;
&lt;h2 id=&#34;展望未来&#34;&gt;展望未来&lt;/h2&gt;
&lt;p&gt;展望未来，我们期待将 KubeCon 的魔力带到全球更多地区。无论是即将到来的 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-open-source-summit-ai-dev-china/&#34; title=&#34;KubeCon &amp;#43; CloudNativeCon China 2024&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon + CloudNativeCon China 2024&lt;/a&gt; 还是其他地区的活动，我都非常期待与你相见。我也向 KubeCon China 提交了一个 Panel session，如果能够入选，今年 8 月我们将在香港相见。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;KubeCon + CloudNativeCon Europe 2024 不仅是技术的盛会，更是社区力量的展示。如你想了解更多细节，请查看我之前关于 &lt;a href=&#34;https://jimmysong.io/blog/kubecon-eu-paris-recap/&#34; title=&#34;KubeCon &amp;#43; CloudNativeCon Europe 的回顾&#34;&gt;KubeCon + CloudNativeCon Europe 的回顾&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们希望这篇透明性报告能帮助你更好地理解活动的影响力，并激励你参与未来的 KubeCon 活动。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

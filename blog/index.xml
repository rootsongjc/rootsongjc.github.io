<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 博客</title>
    <link>https://jimmysong.io/blog/</link>
    <description>Recent content in 博客 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    
	  <atom:link href="https://jimmysong.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>构建生成式人工智能平台：从基础知识到高级实现策略指南</title>
      <link>https://jimmysong.io/trans/building-a-generative-ai-platform/</link>
      <pubDate>Fri, 26 Jul 2024 16:43:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/building-a-generative-ai-platform/</guid>
      <description>
        
        
        &lt;p&gt;在研究了各公司部署生成式人工智能应用程序的方式后，我注意到他们的平台之间有许多相似之处。本文概述了生成式人工智能平台的常见组件、其功能及其实现方式。我尽量保持架构的通用性，但某些应用可能会有所不同。以下是整体架构的外观。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/1-genai-platform.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/1-genai-platform.webp&#34; data-width=&#34;1999&#34; data-height=&#34;1129&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这是一个相当复杂的系统。本文将从最简单的架构开始，逐步添加更多组件。在最简单的形式中，你的应用程序接收一个查询并将其发送到模型。模型生成响应，该响应被返回给用户。没有防护措施、没有增强上下文，也没有优化。&lt;strong&gt;模型 API&lt;/strong&gt;框指的是第三方 API（例如 OpenAI、Google、Anthropic）和自托管 API。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/2.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/2.webp&#34; data-width=&#34;880&#34; data-height=&#34;396&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;从这里开始，你可以根据需要添加更多组件。本文讨论的顺序是常见的，尽管你不需要完全按照相同的顺序操作。如果你的系统运行良好，可以跳过某个组件。开发过程中的每一步都需要进行评估。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过让模型访问外部数据源和信息收集工具，增强模型的上下文输入。&lt;/li&gt;
&lt;li&gt;设置防护措施，以保护你的系统和用户。&lt;/li&gt;
&lt;li&gt;添加模型路由器和网关，以支持复杂的管道并增加更多安全性。&lt;/li&gt;
&lt;li&gt;通过缓存优化延迟和成本。&lt;/li&gt;
&lt;li&gt;添加复杂逻辑和写操作，以最大化系统的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可观察性和编排是平台的两个重要组件。我们将在本文末尾讨论它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;» 本文不涉及的内容 «&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文重点讨论部署 AI 应用程序的总体架构。它讨论构建这些组件时需要哪些组件和考虑因素。它不涉及如何构建 AI 应用程序，因此不讨论模型评估、应用程序评估、提示工程、微调、数据注释指南或用于 RAG 的分块策略。所有这些主题都包含在我即将出版的书籍 &lt;a href=&#34;https://learning.oreilly.com/library/view/ai-engineering/9781098166298/&#34; title=&#34;AI Engineering&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AI Engineering&lt;/a&gt; 中。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;第一步增强上下文&#34;&gt;第一步：增强上下文&lt;/h2&gt;
&lt;p&gt;平台的初步扩展通常涉及添加机制，允许系统用必要的信息增强每个查询。收集相关信息称为上下文构建。&lt;/p&gt;
&lt;p&gt;许多查询需要上下文来回答。上下文中的相关信息越多，模型就越少依赖其内部知识，这可能因其训练数据和训练方法而不可靠。研究表明，访问上下文中的相关信息可以帮助模型生成更详细的回应，同时减少幻觉 (&lt;a href=&#34;https://arxiv.org/abs/2005.11401&#34; title=&#34;Lewis et al.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lewis et al.&lt;/a&gt;, 2020)。&lt;/p&gt;
&lt;p&gt;例如，给定查询“Acme 的精美打印机 A300 是否能打印 100 页每秒？”，如果给出了精美打印机 A300 的规格，模型将能够更好地响应。（感谢 Chetan Tekur 举的例子）&lt;/p&gt;
&lt;p&gt;上下文构建对于基础模型来说等同于传统 ML 模型的特征工程。它们的目的相同：为模型提供处理输入所需的信息。&lt;/p&gt;
&lt;p&gt;在上下文中学习，从上下文中学习，是一种连续学习的形式。它使模型能够持续地整合新信息以做出决策，防止其过时。例如，一个在上周数据上训练的模型，除非将新信息包含在其上下文中，否则无法回答有关本周的问题。通过使用最新信息更新模型的上下文，例如精美打印机 A300 的最新规格，模型保持最新状态，并可以回应超出其截止日期的查询。&lt;/p&gt;
&lt;h3 id=&#34;rags&#34;&gt;RAGs&lt;/h3&gt;
&lt;p&gt;上下文构建的最著名模式是 RAG，检索增强生成。RAG 由两个组件组成：一个生成器（例如语言模型）和一个检索器，后者从外部来源检索相关信息。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/3-rag.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/3-rag.webp&#34; data-width=&#34;1056&#34; data-height=&#34;820&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;检索不仅限于 RAG。它是搜索引擎、推荐系统、日志分析等的支柱。许多为传统检索系统开发的检索算法可以用于 RAG。&lt;/p&gt;
&lt;p&gt;外部记忆源通常包含非结构化数据，如备忘录、合同、新闻更新等。它们可以统称为_文档_。一个文档可以有 10 个标记，也可以有 100 万个标记。简单地检索整个文档可能会导致你的上下文长度过长。RAG 通常要求将文档分割成_可管理的块_，这可以根据模型的最大上下文长度和应用程序的延迟要求确定。要了解更多有关分块和最佳块大小的信息，请参见 &lt;a href=&#34;https://www.pinecone.io/learn/chunking-strategies/&#34; title=&#34;Pinecone&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pinecone&lt;/a&gt;、&lt;a href=&#34;https://js.langchain.com/v0.1/docs/modules/data_connection/document_transformers/&#34; title=&#34;Langchain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Langchain&lt;/a&gt;、&lt;a href=&#34;https://docs.llamaindex.ai/en/stable/optimizing/production_rag/&#34; title=&#34;Llamaindex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Llamaindex&lt;/a&gt; 和 &lt;a href=&#34;https://www.youtube.com/watch?v=8OJC21T2SL4&#34; title=&#34;Greg Kamradt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Greg Kamradt&lt;/a&gt; 的教程。&lt;/p&gt;
&lt;p&gt;一旦外部记忆源的数据被加载并分块后，检索主要通过以下两种方式执行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于术语的检索&lt;/strong&gt;&lt;br&gt;
这可以简单到像关键字搜索。例如，对于查询“transformer”，检索包含此关键词的所有文档。更复杂的算法包括 BM25（利用 TF-IDF）和 Elasticsearch（利用倒排索引）。基于术语的检索通常用于文本数据，但它也适用于包含文本元数据（如标题、标签、字幕、评论等）的图像和视频。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于嵌入的检索&lt;/strong&gt;（也称为向量搜索）&lt;br&gt;
你将数据块转换为嵌入向量，使用嵌入模型如 &lt;a href=&#34;https://arxiv.org/abs/1810.04805&#34; title=&#34;BERT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BERT&lt;/a&gt;，&lt;a href=&#34;https://github.com/UKPLab/sentence-transformers&#34; title=&#34;sentence-transformers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sentence-transformers&lt;/a&gt;，以及 OpenAI 或 Google 提供的专有嵌入模型。根据查询，检索与查询嵌入最接近的数据，这一过程由向量搜索算法确定。&lt;/p&gt;
&lt;p&gt;向量搜索通常被视为最近邻搜索，使用近似最近邻 (ANN) 算法，如 &lt;a href=&#34;https://arxiv.org/abs/1702.08734&#34; title=&#34;FAISS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAISS&lt;/a&gt;（Facebook AI 相似性搜索），Google 的 &lt;a href=&#34;https://research.google.blog/announcing-scann-efficient-vector-similarity-search/&#34; title=&#34;ScaNN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ScaNN&lt;/a&gt;，Spotify 的 &lt;a href=&#34;https://github.com/spotify/annoy&#34; title=&#34;ANNOY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ANNOY&lt;/a&gt;，和 &lt;a href=&#34;https://github.com/nmslib/hnswlib&#34; title=&#34;hnswlib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hnswlib&lt;/a&gt;（&lt;a href=&#34;https://arxiv.org/abs/1603.09320&#34; title=&#34;层次化可导航小世界&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;层次化可导航小世界&lt;/a&gt;）。&lt;a href=&#34;https://ann-benchmarks.com/&#34; title=&#34;ANN-benchmarks 网站&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ANN-benchmarks 网站&lt;/a&gt; 在多个数据集上比较了不同 ANN 算法，考虑了索引和查询之间的权衡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;召回率&lt;/strong&gt;：算法找到的最近邻居的比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每秒查询数 (QPS)&lt;/strong&gt;：算法每秒可以处理的查询数。这对高流量应用至关重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建时间&lt;/strong&gt;：构建索引所需的时间。这个指标特别重要，尤其是如果你需要频繁更新你的索引（例如因为你的数据发生了变化）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引大小&lt;/strong&gt;：算法创建的索引的大小，这对评估其可扩展性和存储需求至关重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法不仅适用于文本文档，还适用于图像、视频、音频和代码。许多团队甚至尝试总结 SQL 表和数据框，然后使用这些总结来生成检索用的嵌入。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于术语的检索比基于嵌入的检索快得多、成本也更低。它可以开箱即用，是一个吸引人的起点。BM25 和 Elasticsearch 在行业中得到了广泛使用，为更复杂的检索系统提供了强大的基线。尽管基于嵌入的检索在计算上开销较大，但随着时间的推移可以显著改进，以超越基于术语的检索。&lt;/p&gt;
&lt;p&gt;生产检索系统通常结合了几种方法。结合基于术语的检索和基于嵌入的检索被称为 &lt;em&gt;混合搜索&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;一个常见的模式是顺序的。首先，一个便宜、精度较低的检索器，如基于术语的系统，获取候选项。然后，一个更精确但更昂贵的机制，如 k-最近邻，找到这些候选中的最佳选项。第二步也称为重排。&lt;/p&gt;
&lt;p&gt;例如，给定术语“transformer”，你可以检索所有包含单词 transformer 的文档，无论它们是关于电器设备、神经结构还是电影。然后你使用向量搜索，在这些文档中找到与你的 transformer 查询实际相关的文档。&lt;/p&gt;
&lt;p&gt;上下文重排与传统的搜索重排不同，因为项目的确切位置不那么重要。在搜索中，排名（例如第一或第五）至关重要。在上下文重排中，文档的顺序仍然重要，因为它影响模型如何处理它们。模型可能更好地理解上下文开始和结束时的文档，正如论文 &lt;a href=&#34;https://arxiv.org/abs/2307.03172&#34; title=&#34;Lost in the middle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lost in the middle&lt;/a&gt; (Liu et al., 2023) 所示。然而，只要文档被包含在内，其顺序的影响就比在搜索排名中的影响要小。&lt;/p&gt;
&lt;p&gt;另一种模式是集成。记住，检索器通过对查询的相关性评分对文档进行排名。你使用多个检索器同时获取候选项，然后将这些不同的排名结合起来生成最终的排名。&lt;/p&gt;
&lt;h3 id=&#34;带表格数据的-rags&#34;&gt;带表格数据的 RAGs&lt;/h3&gt;
&lt;p&gt;外部数据源也可以是结构化的，如数据框或 SQL 表。从 SQL 表检索数据与从非结构化文档检索数据有显著不同。系统的工作流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;文本到 SQL&lt;/strong&gt;：根据用户查询和表结构，确定需要什么 SQL 查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL 执行&lt;/strong&gt;：执行 SQL 查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成&lt;/strong&gt;：根据 SQL 结果和原始用户查询生成响应。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/4-rag-with-tabular-data.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/4-rag-with-tabular-data.webp&#34; data-width=&#34;1052&#34; data-height=&#34;854&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;对于文本到 SQL 步骤，如果有很多可用的表格，其架构不能全部适应模型上下文，你可能需要一个中间步骤来预测每个查询使用哪些表格。文本到 SQL 可以由生成最终响应的同一模型或许多专门的文本到 SQL 模型完成。&lt;/p&gt;
&lt;h3 id=&#34;具有代理能力的-rags&#34;&gt;具有代理能力的 RAGs&lt;/h3&gt;
&lt;p&gt;互联网是一个重要的数据来源。像 Google 或 Bing API 这样的网络搜索工具可以使模型访问丰富、最新的资源，以收集每个查询的相关信息。例如，给定查询“今年谁赢得了奥斯卡？”，系统会搜索有关最新奥斯卡的信息，并使用这些信息为用户生成最终响应。&lt;/p&gt;
&lt;p&gt;基于术语的检索、基于嵌入的检索、SQL 执行和网络搜索是模型可以采取的行动，以增强其上下文。你可以将每个动作视为模型可以调用的函数。可以整合外部动作的工作流程也被称为 &lt;em&gt;具有代理能力&lt;/em&gt;。其架构如下所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/5-agentic-rag.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/5-agentic-rag.webp&#34; data-width=&#34;1818&#34; data-height=&#34;692&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;» 动作与工具 «&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个工具允许一个或多个动作。例如，一个人员搜索工具可能允许两个动作：按姓名搜索和按电子邮件搜索。然而，差别很小，所以很多人将 &lt;em&gt;动作&lt;/em&gt; 和 &lt;em&gt;工具&lt;/em&gt; 混为一谈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;» 只读动作与写入动作 «&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从外部源检索信息但不改变其状态的动作是只读动作。赋予模型写入动作，例如更新表中的值，使模型能够执行更多任务，但也带来了更多风险，稍后将进行讨论。&lt;/p&gt;
&lt;h3 id=&#34;查询重写&#34;&gt;查询重写&lt;/h3&gt;
&lt;p&gt;通常，需要重写用户查询以增加获取正确信息的可能性。考虑以下对话。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;用户：John Doe 上次从我们这里购买东西是什么时候？
AI：John 最后一次从我们这里购买是两周前，即 2030 年 1 月 3 日购买的 Fruity Fedora 帽。
用户：那 Emily Doe 呢？
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后一个问题，“那 Emily Doe 呢？”是模糊的。如果你逐字使用这个查询来检索文档，你可能会得到无关的结果。你需要重写这个查询，以反映用户实际在询问什么。新查询应该本身就有意义。最后一个问题应该被重写为“Emily Doe 上次从我们这里购买东西是什么时候？”&lt;/p&gt;
&lt;p&gt;查询重写通常使用其他 AI 模型完成，使用类似于“给定以下对话，重写最后一个用户输入以反映用户实际在询问什么”的提示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/6-query-rewriting.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/6-query-rewriting.webp&#34; data-width=&#34;1458&#34; data-height=&#34;514&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;查询重写可能会变得复杂，特别是如果你需要进行身份解析或纳入其他知识。如果用户问“他的妻子怎么样？”，你首先需要查询你的数据库来找出他的妻子是谁。如果你没有这个信息，重写模型应该承认这个查询是无法解决的，而不是臆造一个名字，导致错误的答案。&lt;/p&gt;
&lt;h2 id=&#34;第二步设置防护栏&#34;&gt;第二步：设置防护栏&lt;/h2&gt;
&lt;p&gt;防护栏有助于减少 AI 风险，保护的不仅是用户，还有开发者。在存在失败潜力的地方应设置防护栏。本文讨论两种类型的防护栏：输入防护和输出防护。&lt;/p&gt;
&lt;h3 id=&#34;输入防护&#34;&gt;输入防护&lt;/h3&gt;
&lt;p&gt;输入防护通常用于防范两种风险：将私人信息泄露给外部 API，以及执行可能危及系统的不良提示（模型越狱）。&lt;/p&gt;
&lt;h4 id=&#34;向外部-api-泄露私人信息&#34;&gt;向外部 API 泄露私人信息&lt;/h4&gt;
&lt;p&gt;当需要将数据发送到组织外部时，使用外部模型 API 会特别有这种风险。例如，员工可能会将公司的秘密或用户的私人信息复制到提示中，并发送到托管模型的位置。&lt;/p&gt;
&lt;p&gt;没有万无一失的方法来消除使用第三方 API 时的潜在泄露。然而，你可以通过防护栏来减轻这些风险。你可以使用许多可用的工具之一来自动检测敏感数据。要检测的敏感数据由你指定。常见的敏感数据类别包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人信息（身份证号、电话号码、银行账户）。&lt;/li&gt;
&lt;li&gt;人脸。&lt;/li&gt;
&lt;li&gt;与公司的知识产权或特权信息相关的特定关键词和短语。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;许多敏感数据检测工具使用 AI 来识别潜在的敏感信息，例如判断一个字符串是否像一个有效的家庭地址。如果发现一个查询包含敏感信息，你有两个选择：阻止整个查询或从中移除敏感信息。例如，你可以使用占位符 [PHONE NUMBER] 来掩盖用户的电话号码。如果生成的响应包含此占位符，请使用 PII 可逆字典将此占位符映射回原始信息，以便你可以取消屏蔽它，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/7-reversible-pii-mapping.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/7-reversible-pii-mapping.webp&#34; data-width=&#34;1999&#34; data-height=&#34;1146&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h4 id=&#34;模型越狱&#34;&gt;模型越狱&lt;/h4&gt;
&lt;p&gt;试图越狱 AI 模型，让它们说出或做出不良行为，已经成为一种在线运动。尽管有些人可能觉得让 ChatGPT 发表争议性言论很有趣，但如果你的客户支持聊天机器人，带有你的品牌和标志做同样的事情就没那么有趣了。这对于有权访问工具的 AI 系统尤其危险。想象一下，如果用户找到一种方法让你的系统执行一个会破坏你的数据的 SQL 查询。&lt;/p&gt;
&lt;p&gt;为了对抗这一点，你应该首先在你的系统上设置防护栏，以便不会自动执行任何有害的操作。例如，没有人工批准，不得执行可以插入、删除或更新数据的 SQL 查询。这种增加的安全性的缺点是它可能会减慢你的系统。&lt;/p&gt;
&lt;p&gt;为了防止你的应用程序发表不应该发表的离谱言论，你可以为你的应用程序定义范围外的话题。例如，如果你的应用程序是一个客户支持聊天机器人，它不应该回答政治或社会问题。一个简单的方法是过滤掉包含通常与争议话题相关的预定义短语的输入，如“移民”或“反疫苗”。更复杂的算法使用 AI 来分类输入是否关于预定义的受限话题之一。&lt;/p&gt;
&lt;p&gt;如果你的系统中有害提示很少，你可以使用异常检测算法来识别不寻常的提示。&lt;/p&gt;
&lt;h4 id=&#34;故障管理&#34;&gt;故障管理&lt;/h4&gt;
&lt;p&gt;AI 模型是概率性的，这意味着如果你再次尝试一个查询，你可能会得到不同的响应。许多故障可以通过基本的重试逻辑来缓解。例如，如果响应为空，尝试再次查询 X 次或直到你得到一个非空响应。同样，如果响应格式错误，再试一次直到模型生成一个格式正确的响应。&lt;/p&gt;
&lt;p&gt;然而，这种重试策略可能会增加额外的延迟和成本。一次重试意味着 API 调用次数翻倍。如果在失败后进行重试，用户体验的延迟将会加倍。为了减少延迟，你可以并行进行调用。例如，对于每个查询，不是等待第一个查询失败后再重试，而是同时向模型发送两次查询，获取两个响应，并选择较好的一个。这会增加冗余的 API 调用次数，但保持延迟在可管理的范围内。&lt;/p&gt;
&lt;p&gt;处理棘手查询时常常需要人类介入。例如，如果查询包含特定关键短语，你可以将查询转给人工操作员。有些团队使用专门的模型（可能是内部训练的）来决定何时将对话转交给人类。例如，有一个团队在他们的情感分析模型检测到用户开始生气时，会将对话转给人工操作员。另一个团队在一定的对话轮数后转交对话，以防用户陷入无限循环。&lt;/p&gt;
&lt;h3 id=&#34;防护栏权衡&#34;&gt;防护栏权衡&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;可靠性与延迟的权衡&lt;/strong&gt;：虽然承认防护栏的重要性，但一些团队告诉我延迟更为重要。他们决定不实施防护栏，因为这会显著增加应用的延迟。然而，这些团队属于少数。大多数团队发现增加的风险比增加的延迟更为昂贵。&lt;/p&gt;
&lt;p&gt;输出防护栏可能在流式完成模式中不太有效。默认情况下，整个响应在显示给用户之前生成，这可能需要很长时间。在流式完成模式中，新的令牌在生成时即时传输给用户，减少了用户等待看到响应的时间。缺点是，很难评估部分响应，因此不安全的响应可能在系统防护栏判定应该阻止之前被传输给用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自托管与第三方 API 的权衡&lt;/strong&gt;：自托管模型意味着你不必将数据发送给第三方，减少了输入防护栏的需求。然而，这也意味着你必须自己实施所有必要的防护栏，而不是依赖第三方服务提供的防护栏。&lt;/p&gt;
&lt;p&gt;我们的平台现在看起来是这样的。防护栏可以是独立工具或模型网关的一部分，稍后将进行讨论。如果使用，评分器通常被归类在模型 API 下，因为评分器通常也是 AI 模型。用于评分的模型通常比用于生成的模型小且快。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/8-guardrails.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/8-guardrails.webp&#34; data-width=&#34;1786&#34; data-height=&#34;886&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;第三步添加模型路由器和网关&#34;&gt;第三步：添加模型路由器和网关&lt;/h2&gt;
&lt;p&gt;随着应用变得越来越复杂并涉及更多模型，出现了两种类型的工具以帮助你处理多个模型：路由器和网关。&lt;/p&gt;
&lt;h3 id=&#34;路由器&#34;&gt;路由器&lt;/h3&gt;
&lt;p&gt;应用程序可以使用不同的模型来响应不同类型的查询。对不同的查询有不同的解决方案有几个好处。首先，这允许你拥有专门的解决方案，如一个专门处理技术故障的模型，另一个专门处理订阅的模型。专门的模型可能比通用模型表现更好。其次，这可以帮助你节省成本。你可以将简单的查询路由到更便宜的模型，而不是所有查询都路由到昂贵的模型。&lt;/p&gt;
&lt;p&gt;路由器通常包括&lt;strong&gt;意图分类器&lt;/strong&gt;，用于预测用户试图做什么。根据预测的意图，将查询路由到合适的解决方案。例如，对于客户支持聊天机器人，如果意图是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重置密码 -&amp;gt; 将用户路由到关于密码重置的页面。&lt;/li&gt;
&lt;li&gt;纠正账单错误 -&amp;gt; 将用户路由到人工操作员。&lt;/li&gt;
&lt;li&gt;排查技术问题 -&amp;gt; 将查询路由到为排查故障而微调的模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;意图分类器还可以帮助你的系统避免超出范围的对话。例如，你可以有一个意图分类器来预测查询是否超出范围。如果查询被认为是不适当的（例如，如果用户询问你在即将到来的选举中会投票给谁），聊天机器人可以礼貌地拒绝参与，使用一个标准回复（“作为一个聊天机器人，我没有投票的能力。如果你有关于我们产品的问题，我很乐意帮助。”）而不浪费一个 API 调用。&lt;/p&gt;
&lt;p&gt;如果你的系统有权访问多个动作，路由器可以包括一个&lt;strong&gt;下一步动作预测器&lt;/strong&gt;来帮助系统决定下一步采取什么动作。一个有效的动作是如果查询含糊不清，要求澄清。例如，对于查询“Freezing”，系统可能会问，“你是想冻结你的账户还是在谈论天气？”或者简单地说，“对不起，请你详细说明一下。”&lt;/p&gt;
&lt;p&gt;意图分类器和下一步动作预测器可以是通用模型或专门的分类模型。专门的分类模型通常比通用模型小且快，允许你的系统使用多个这样的模型，而不会引入显著的额外延迟和成本。&lt;/p&gt;
&lt;p&gt;当将查询路由到具有不同上下文限制的模型时，可能需要相应地调整查询的上下文。考虑一个设定为使用 4K 上下文限制的模型的 1,000 令牌查询。然后系统采取一个动作，例如网络搜索，带回 8,000 令牌的上下文。你可以截断查询的上下文以适应最初的模型，或者将查询路由到具有更大上下文限制的模型。&lt;/p&gt;
&lt;h3 id=&#34;网关&#34;&gt;网关&lt;/h3&gt;
&lt;p&gt;模型网关是一个中间层，允许你的组织以统一且安全的方式与不同模型进行交互。模型网关的基本功能是使开发者能够以相同的方式访问不同的模型——无论是自托管模型还是商业 API（如 OpenAI 或 Google）背后的模型。模型网关简化了代码的维护。如果模型 API 发生变化，你只需要更新模型网关，而不是更新所有使用该模型 API 的应用程序。&lt;/p&gt;
&lt;p&gt;模型网关是&lt;strong&gt;访问控制和成本管理&lt;/strong&gt;。与其将组织的令牌分发给每个需要访问 OpenAI API 的人，不如只允许他们通过模型网关访问，这样可以创建一个集中和受控的访问点。网关还可以实施细粒度的访问控制，指定哪些用户或应用程序应该访问哪个模型。此外，网关还可以监控和限制 API 调用的使用，有效防止滥用和管理成本。&lt;/p&gt;
&lt;p&gt;模型网关还可以用来实施回退策略，以克服速率限制或 API 失败（后者不幸很常见）。当主要 API 不可用时，网关可以将请求路由到备用模型，短暂等待后重试，或以其他优雅的方式处理失败。这确保了你的应用程序可以平稳运行，不受中断。&lt;/p&gt;
&lt;p&gt;由于请求和响应已经通过网关，这是实施其他功能（如负载平衡、日志记录和分析）的好地方。一些网关服务甚至提供缓存和防护栏。&lt;/p&gt;
&lt;p&gt;鉴于网关的实施相对简单，市面上有许多现成的网关。示例包括 Portkey 的&lt;a href=&#34;https://github.com/Portkey-AI/gateway&#34; title=&#34;网关&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网关&lt;/a&gt;，&lt;a href=&#34;https://mlflow.org/docs/latest/llms/gateway/index.html&#34; title=&#34;MLflow AI Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MLflow AI Gateway&lt;/a&gt;，WealthSimple 的&lt;a href=&#34;https://github.com/wealthsimple/llm-gateway&#34; title=&#34;llm-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;llm-gateway&lt;/a&gt;，&lt;a href=&#34;https://docs.truefoundry.com/docs/ai-gateway&#34; title=&#34;TrueFoundry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TrueFoundry&lt;/a&gt;，&lt;a href=&#34;https://konghq.com/products/kong-ai-gateway&#34; title=&#34;Kong&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kong&lt;/a&gt;，和 &lt;a href=&#34;https://developers.cloudflare.com/ai-gateway/&#34; title=&#34;Cloudflare&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloudflare&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;随着网关和路由器的添加，我们的平台变得更加令人兴奋。与评分一样，路由也在模型网关中进行。用于路由的模型通常比用于生成的模型小且快。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/10-model-gateway.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/10-model-gateway.webp&#34; data-width=&#34;1928&#34; data-height=&#34;914&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;第四步通过缓存减少延迟&#34;&gt;第四步：通过缓存减少延迟&lt;/h2&gt;
&lt;p&gt;当我与我的朋友 Eugene Yan 分享这篇帖子时，他说缓存可能是 AI 平台中最被低估的组件。缓存可以显著减少应用程序的延迟和成本。&lt;/p&gt;
&lt;p&gt;缓存技术也可以在训练期间使用，但由于这篇帖子是关于部署的，我将重点讨论用于推理的缓存。一些常见的推理缓存技术包括提示缓存、精确缓存和语义缓存。提示缓存通常由你使用的推理 API 实现。在评估推理库时，了解它支持哪种缓存机制是有帮助的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;用于注意力机制的 KV 缓存超出了本讨论的范围。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;提示缓存&#34;&gt;提示缓存&lt;/h3&gt;
&lt;p&gt;许多应用中的提示存在重叠的文本段。例如，所有查询可以共享相同的系统提示。提示缓存存储这些重叠段以便重用，因此你只需要处理一次。对于有长系统提示的应用，提示缓存可以显著减少延迟和成本。如果你的系统提示是 1000 个令牌，而你的应用今天生成了 100 万个模型 API 调用，提示缓存将每天为你节省大约 10 亿个重复输入令牌的处理！然而，这并不是完全免费的。与 KV 缓存一样，提示缓存的大小可能相当大，需要显著的工程努力。&lt;/p&gt;
&lt;p&gt;提示缓存还适用于涉及长文档的查询。例如，如果许多用户查询与同一长文档（如一本书或代码库）相关，这个长文档可以被缓存以便跨查询重用。&lt;/p&gt;
&lt;p&gt;自从 2023 年 11 月 &lt;a href=&#34;https://arxiv.org/pdf/2311.04934&#34; title=&#34;Gim et al.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gim et al.&lt;/a&gt; 引入以来，提示缓存已经被纳入模型 API。Google 宣布将在 2024 年 6 月提供名为 &lt;a href=&#34;https://ai.google.dev/gemini-api/docs/caching&#34; title=&#34;context cache&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;context cache&lt;/a&gt; 的功能。缓存的输入令牌与常规输入令牌相比可获得 75% 的折扣，但你需要为缓存存储支付额外费用（编写时为每小时 1 美元/100 万令牌）。考虑到提示缓存的明显好处，我不会感到惊讶如果它变得和 KV 缓存一样流行。&lt;/p&gt;
&lt;p&gt;而 llama.cpp 也有 &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/blob/master/examples/main/README.md#prompt-caching&#34; title=&#34;prompt cache&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prompt cache&lt;/a&gt;，但它似乎只缓存整个提示，并且仅适用于同一聊天会话中的查询。其文档有限，但从阅读代码的情况来看，在一次长对话中，它会缓存之前的消息并只处理最新的消息。&lt;/p&gt;
&lt;h3 id=&#34;精确缓存&#34;&gt;精确缓存&lt;/h3&gt;
&lt;p&gt;如果提示缓存和 KV 缓存是基础模型独有的，那么精确缓存则更为通用和直接。你的系统存储处理过的项目以便稍后在请求确切项目时重用。例如，如果用户要求模型总结一个产品，系统会检查缓存中是否有该产品的总结。如果有，就获取这个总结。如果没有，就总结该产品并缓存总结。&lt;/p&gt;
&lt;p&gt;精确缓存也用于基于嵌入的检索，以避免重复的向量搜索。如果传入的查询已经在向量搜索缓存中，就获取缓存的搜索结果。如果没有，就为这个查询执行向量搜索并缓存结果。&lt;/p&gt;
&lt;p&gt;缓存对于需要多个步骤（例如思维链）和/或耗时操作（例如检索、SQL 执行或网络搜索）的查询特别有吸引力。&lt;/p&gt;
&lt;p&gt;精确缓存可以使用内存存储来实现快速检索。然而，由于内存存储有限，也可以使用数据库如 PostgreSQL、Redis 或分层存储来平衡速度和存储容量。拥有一个逐出政策对于管理缓存大小和维护性能至关重要。常见的逐出政策包括最近最少使用（LRU）、最少频繁使用（LFU）和先进先出（FIFO）。&lt;/p&gt;
&lt;p&gt;缓存一个查询多长时间取决于这个查询被再次调用的可能性有多大。特定于用户的查询，如“我的最近订单的状态如何”，不太可能被其他用户重用，因此不应该被缓存。同样，缓存时间敏感的查询，如“天气如何？”也没有多大意义。有些团队训练一个小型分类器来预测是否应该缓存一个查询。&lt;/p&gt;
&lt;h3 id=&#34;语义缓存&#34;&gt;语义缓存&lt;/h3&gt;
&lt;p&gt;与精确缓存不同，语义缓存不要求传入查询与任何缓存的查询完全相同。语义缓存允许重用相似的查询。想象一下，一个用户问“越南的首都是什么？”模型生成答案“河内”。后来，另一个用户问“越南的首都**&lt;em&gt;城市&lt;/em&gt;**是什么？”这是同一个问题，但增加了“城市”这个词。语义缓存的思想是系统可以重用答案“河内”，而不是从头计算新查询。&lt;/p&gt;
&lt;p&gt;语义缓存只有在你有可靠的方式确定两个查询在语义上是否相似时才有效。一种常见的方法是基于嵌入的相似性，具体操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对每个查询生成其嵌入，使用嵌入模型。&lt;/li&gt;
&lt;li&gt;使用向量搜索找到与当前查询嵌入最接近的缓存嵌入。假设这个相似度得分是 X。&lt;/li&gt;
&lt;li&gt;如果 X 小于你设置的相似度阈值，认为缓存的查询与当前查询相同，并返回缓存结果。如果不是，处理这个当前查询并将其与其嵌入和结果一起缓存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种方法需要一个向量数据库来存储缓存查询的嵌入。&lt;/p&gt;
&lt;p&gt;与其他缓存技术相比，语义缓存的价值更为可疑，因为它的许多组件容易失败。其成功依赖于高质量的嵌入、功能性的向量搜索和可靠的相似度度量。设置正确的相似度阈值也可能很棘手，需要大量的试验和错误。如果系统错误地将传入查询视为与另一个查询相似，从缓存中获取的响应将是错误的。&lt;/p&gt;
&lt;p&gt;此外，语义缓存可能耗时且计算密集，因为它涉及向量搜索。这种向量搜索的速度和成本取决于你的缓存嵌入数据库的大小。&lt;/p&gt;
&lt;p&gt;如果缓存命中率很高，即大部分查询可以通过利用缓存结果有效地回答，那么语义缓存可能仍然值得。然而，在纳入语义缓存的复杂性之前，请确保评估与之相关的效率、成本和性能风险。&lt;/p&gt;
&lt;h2 id=&#34;可观测性&#34;&gt;可观测性&lt;/h2&gt;
&lt;p&gt;虽然我将可观测性单独分为一节，但它应该从平台构建之初就被整合进去，而不是事后才加入。对于所有规模的项目，可观测性都至关重要，其重要性随着系统复杂性的增加而增加。&lt;/p&gt;
&lt;h3 id=&#34;指标&#34;&gt;指标&lt;/h3&gt;
&lt;p&gt;讨论监控时，大多数人会想到指标。你想追踪的指标取决于你希望了解系统的哪些方面，这是特定于应用程序的。一般而言，有两类指标你可能会追踪：模型指标和系统指标。&lt;/p&gt;
&lt;p&gt;系统指标反映了你整个系统的状态。常见的系统指标包括吞吐量、内存使用情况、硬件利用率和服务可用性/运行时间。本帖将重点介绍模型指标。&lt;/p&gt;
&lt;p&gt;模型指标评估你的模型性能，如准确性、毒性和幻觉率。应用程序流程中的不同步骤也有自己的指标。例如，在 RAG 应用中，检索质量常用上下文相关性和上下文精确度来评估。向量数据库的评估可以通过它存储数据所需的存储空间和查询数据所需的时间来进行。&lt;/p&gt;
&lt;h3 id=&#34;日志&#34;&gt;日志&lt;/h3&gt;
&lt;p&gt;关于日志，我的哲学很简单：记录一切。记录系统配置、查询、输出和中间输出。记录组件开始、结束、崩溃等事件。录制日志时，请确保为其标记和 ID，以帮助你了解日志来自系统中的哪里。&lt;/p&gt;
&lt;p&gt;记录所有内容意味着你拥有的日志量可能会迅速增长。许多用于自动日志分析和日志异常检测的工具都是由 AI 驱动的。&lt;/p&gt;
&lt;p&gt;虽然手工处理日志是不可能的，但每天手工检查你的生产数据，了解用户如何使用你的应用程序是有用的。Shankar 等人（2024）发现，随着开发者与更多数据的互动，他们对什么构成良好和不良输出的看法发生了变化，使他们能够重写他们的提示以增加良好响应的机会，并更新他们的评估流程以捕捉不良响应。&lt;/p&gt;
&lt;h3 id=&#34;跟踪&#34;&gt;跟踪&lt;/h3&gt;
&lt;p&gt;跟踪是详细记录请求通过各种系统组件和服务的执行路径。在 AI 应用中，跟踪揭示了从用户发送查询到返回最终响应的整个过程，包括系统采取的动作、检索的文档以及发送给模型的最终提示。它还应显示每个步骤所需的时间及其相关成本（如果可测量）。例如，这是 &lt;a href=&#34;https://blog.langchain.dev/announcing-langsmith/&#34; title=&#34;Langsmith&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Langsmith&lt;/a&gt; 跟踪的可视化表示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/building-a-generative-ai-platform/15-traces.webp&#34; data-img=&#34;/trans/building-a-generative-ai-platform/15-traces.webp&#34; data-width=&#34;1439&#34; data-height=&#34;1600&#34; alt=&#34;image&#34; data-caption=&#34;生成式 AI 平台概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;生成式 AI 平台概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;理想情况下，你应该能够逐步追踪每个查询在系统中的转换。如果查询失败，你应该能够确定出错的确切步骤：是处理不当、检索的上下文不相关，还是模型生成了错误的响应。&lt;/p&gt;
&lt;h2 id=&#34;ai-流水线编排&#34;&gt;AI 流水线编排&lt;/h2&gt;
&lt;p&gt;AI 应用可以变得相当复杂，涉及多个模型、从多个数据库检索数据，并使用多种工具。编排器帮助你指定如何将这些不同组件组合（链接）在一起，创建端到端的应用流程。&lt;/p&gt;
&lt;p&gt;在高层次上，编排器分两步工作：组件定义和链接（也称为流水线）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组件定义&lt;/strong&gt;&lt;br&gt;
你需要告诉编排器你的系统使用哪些组件，如模型（包括用于生成、路由和评分的模型）、系统可以从中检索数据的数据库以及系统可以采取的操作。与模型网关的直接集成可以简化模型引入，一些编排工具也想成为网关。许多编排器还支持与评估和监控工具的集成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链接（或流水线）&lt;/strong&gt;&lt;br&gt;
你告诉编排器你的系统从接收用户查询到完成任务的步骤顺序。简而言之，链接就是函数组合。以下是流水线的一个示例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理原始查询。&lt;/li&gt;
&lt;li&gt;根据处理后的查询检索相关数据。&lt;/li&gt;
&lt;li&gt;将原始查询和检索到的数据组合起来，创建模型预期格式的提示。&lt;/li&gt;
&lt;li&gt;模型根据提示生成响应。&lt;/li&gt;
&lt;li&gt;评估响应。&lt;/li&gt;
&lt;li&gt;如果响应被认为是好的，返回给用户。如果不是，将查询路由到人工操作员。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编排器负责在步骤之间传递数据，并可以提供工具来确保当前步骤的输出符合下一步骤的预期格式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设计流程时，尤其对于有严格延迟要求的应用，尽可能并行处理各个步骤。例如，如果你有一个路由组件（决定将查询发送到哪里）和一个 PII 移除组件，它们可以同时进行。&lt;/p&gt;
&lt;p&gt;有许多 AI 编排工具，包括 &lt;a href=&#34;https://github.com/langchain-ai/langchain&#34; title=&#34;LangChain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LangChain&lt;/a&gt;, &lt;a href=&#34;https://github.com/run-llama/llama_index&#34; title=&#34;LlamaIndex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LlamaIndex&lt;/a&gt;, &lt;a href=&#34;https://github.com/FlowiseAI/Flowise&#34; title=&#34;Flowise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flowise&lt;/a&gt;, &lt;a href=&#34;https://github.com/langflow-ai/langflow&#34; title=&#34;Langflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Langflow&lt;/a&gt;, 和 &lt;a href=&#34;https://github.com/deepset-ai/haystack&#34; title=&#34;Haystack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Haystack&lt;/a&gt;。每个工具都有自己的 API，所以我不会在这里展示实际代码。&lt;/p&gt;
&lt;p&gt;虽然在开始一个项目时直接使用编排工具很诱人，但首先应该在没有工具的情况下开始构建应用。任何外部工具都会带来额外的复杂性。编排器可能会抽象掉系统工作的关键细节，使系统难以理解和调试。&lt;/p&gt;
&lt;p&gt;随着应用开发过程的深入，你可能会发现编排器能让你的工作更轻松。在评估编排器时需要考虑三个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集成和扩展性&lt;/strong&gt;&lt;br&gt;
评估编排器是否支持你已经使用或可能在未来采用的组件。例如，如果你想使用 Llama 模型，检查编排器是否支持它。鉴于存在许多模型、数据库和框架，编排器不可能支持所有内容。因此，你还需要考虑编排器的扩展性。如果它不支持特定组件，更改难度如何？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;支持复杂流水线&lt;/strong&gt;&lt;br&gt;
随着应用复杂性的增加，你可能需要管理涉及多个步骤和条件逻辑的复杂流水线。支持高级功能如分支、并行处理和错误处理的编排器将帮助你有效管理这些复杂性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;易用性、性能和可扩展性&lt;/strong&gt;&lt;br&gt;
考虑编排器的用户友好性。寻找直观的 API、全面的文档和强大的社区支持，这些可以显著降低你和你团队的学习曲线。避免使用会启动隐藏 API 调用或引入应用延迟的编排器。此外，确保编排器可以随着应用、开发者和流量的增长有效扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;这篇文章从基础架构开始，逐步添加组件来应对日益增长的应用复杂性。每次添加都带来了自己的好处和挑战，需要仔细考虑和实施。&lt;/p&gt;
&lt;p&gt;虽然组件的分离对于保持系统的模块化和可维护性很重要，但这种分离是流动的。组件之间有许多重叠。例如，模型网关可以与防护栏共享功能。缓存可以在不同的组件中实施，如在向量搜索和推理服务中。&lt;/p&gt;
&lt;p&gt;这篇文章比我预期的要长，但仍有许多细节我没有能够进一步探讨，尤其是在可观测性、上下文构建、复杂逻辑、缓存和防护栏方面。我将在即将出版的书籍《AI 工程》中更深入地探讨这些组件。&lt;/p&gt;
&lt;p&gt;这篇文章也没有讨论如何服务模型，假设大多数人将使用第三方 API 提供的模型。《AI 工程》还将专门介绍推理和模型优化。&lt;/p&gt;
&lt;h2 id=&#34;参考文献和致谢&#34;&gt;参考文献和致谢&lt;/h2&gt;
&lt;p&gt;特别感谢 &lt;a href=&#34;https://x.com/luke_metz&#34; title=&#34;Luke Metz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Luke Metz&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/findalexli/&#34; title=&#34;Alex Li&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alex Li&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/chetantekur/&#34; title=&#34;Chetan Tekur&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chetan Tekur&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/kittipat-bot-kampa-1b1965/&#34; title=&#34;Kittipat “Bot” Kampa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kittipat “Bot” Kampa&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/hienluu/&#34; title=&#34;Hien Luu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hien Luu&lt;/a&gt;, 和 &lt;a href=&#34;https://www.linkedin.com/in/denyslinkov/&#34; title=&#34;Denys Linkov&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Denys Linkov&lt;/a&gt; 对本文早期版本的反馈。他们的见解极大地改善了内容。任何剩余的错误都是我的。&lt;/p&gt;
&lt;p&gt;我阅读了许多公司分享的案例研究，了解它们如何采用生成式 AI，以下是我最喜欢的一些。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/blog/engineering/generative-ai/musings-on-building-a-generative-ai-product?_l=en_US&#34; title=&#34;构建生成式 AI 产品的思考&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建生成式 AI 产品的思考&lt;/a&gt; (LinkedIn, 2024)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/pinterest-engineering/how-we-built-text-to-sql-at-pinterest-30bad30dabff&#34; title=&#34;我们是如何在 Pinterest 构建 Text-to-SQL 的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我们是如何在 Pinterest 构建 Text-to-SQL 的&lt;/a&gt; (Pinterest, 2024)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/vimeo-engineering-blog/from-idea-to-reality-elevating-our-customer-support-through-generative-ai-101a2c5ea680&#34; title=&#34;从想法到现实：通过生成式 AI 提升我们的客户支持&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从想法到现实：通过生成式 AI 提升我们的客户支持&lt;/a&gt; (Vimeo, 2023)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shortwave.com/blog/deep-dive-into-worlds-smartest-email-ai/&#34; title=&#34;深入探究世界上最智能的电子邮件 AI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入探究世界上最智能的电子邮件 AI&lt;/a&gt; (Shortwave, 2023)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.grab.com/llm-powered-data-classification&#34; title=&#34;LLM-powered 数据实体分类的大规模实施&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LLM-powered 数据实体分类的大规模实施&lt;/a&gt; (Grab, 2023)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.uber.com/blog/from-predictive-to-generative-ai/&#34; title=&#34;从预测到生成 - 如何加速 Uber 的 AI 之旅&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从预测到生成 - 如何加速 Uber 的 AI 之旅&lt;/a&gt; (Uber, 2024)&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>微分段安全技术解析：云原生环境下的零信任实践</title>
      <link>https://jimmysong.io/trans/what-is-microsegmentation/</link>
      <pubDate>Wed, 24 Jul 2024 11:07:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/what-is-microsegmentation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;什么是微分段&#34;&gt;什么是微分段？&lt;/h2&gt;
&lt;p&gt;微分段（Microsegmentation）是一种网络安全管理方法，它通过将网络划分为多个小段，并根据各段的安全需求应用安全控制，从而管理工作负载间的网络访问权限。这种方法结合了&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-least-privilege-access&#34; title=&#34;最小权限原则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小权限原则&lt;/a&gt;和&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-a-zero-trust-architecture&#34; title=&#34;零信任架构&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任架构&lt;/a&gt;，让管理员可以精确管理安全策略，限制流量，有效减少攻击面，加强数据泄露的防护，并增强合规性。&lt;/p&gt;
&lt;h3 id=&#34;微分段的工作原理&#34;&gt;微分段的工作原理&lt;/h3&gt;
&lt;p&gt;微分段通过网络虚拟化技术，在云部署中创建安全区域，这些小的安全区可以隔离&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-workload&#34; title=&#34;工作负载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;工作负载&lt;/a&gt;，并为每个工作负载定制安全策略。这种粒度级的安全控制对于运行多个应用的现代云环境至关重要。企业可以为每个工作负载和应用程序单独应用安全控制，而不是采用针对服务器的统一安全策略。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-microsegmentation/microsegmentation_hu588d2bf7f9aa501ff5e9fb616147ae26_102742_1920x1080_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/microsegmentation.jpg&#34; data-img=&#34;/trans/what-is-microsegmentation/microsegmentation.jpg&#34; data-width=&#34;1920&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;图 1: 微分段通过零信任框架限制流量，将网络划分为多个小段。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1: 微分段通过零信任框架限制流量，将网络划分为多个小段。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;工作负载的定义&#34;&gt;工作负载的定义&lt;/h3&gt;
&lt;p&gt;工作负载广泛地定义为运行应用程序所需的资源和过程。主机、虚拟机和容器是几种常见的工作负载形式。公司可以在数据中心、混合云和多云环境中运行工作负载，而随着应用程序越来越多地部署在不同的云原生计算架构上，这种分布式趋势根据业务需求不断加速。&lt;/p&gt;
&lt;h2 id=&#34;超越边界安全&#34;&gt;超越边界安全&lt;/h2&gt;
&lt;p&gt;边界安全是大多数组织网络安全控制的重要部分。网络安全设备，如网络防火墙，会检查穿越安全边界的“南北”（客户端到服务器）流量，并阻止恶意流量。边界内的资产被隐含信任，意味着“东西”（工作负载间）的流量可能未经检查。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-1_hu49bdd444e569ad9356ee1d7059a09399_25668_868x488_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-1.jpg&#34; data-img=&#34;/trans/what-is-microsegmentation/what-is-microsegmentation-img-1.jpg&#34; data-width=&#34;868&#34; data-height=&#34;488&#34; alt=&#34;image&#34; data-caption=&#34;图 2: “南北”与“东西”流量示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2: “南北”与“东西”流量示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;对于大多数组织来说，东西向通信占据了数据中心和云流量模式的大部分，而基于边界的防御对东西向流量缺乏可见性。考虑到这些因素，恶意行为者可能利用这一点，在工作负载间横向移动。&lt;/p&gt;
&lt;p&gt;网络在工作负载间创建可靠的路径，并决定两个端点是否可以相互访问。微分段则通过创建隔离来决定两个端点是否应该相互访问。通过最小权限访问的强制实施，微分段减少了横向移动的范围，并包含数据泄露。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img2.gif&#34; data-img=&#34;/trans/what-is-microsegmentation/what-is-microsegmentation-img2.gif&#34; data-width=&#34;512&#34; data-height=&#34;271&#34; alt=&#34;image&#34; data-caption=&#34;图 3: 微分段可以帮助你隔离攻击。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 3: 微分段可以帮助你隔离攻击。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;网络分段的挑战&#34;&gt;网络分段的挑战&lt;/h2&gt;
&lt;p&gt;网络分段是一种将网络划分为多个小的子网的方法，这不仅有助于提升性能，还能增强安全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能：&lt;/strong&gt; 将网络划分为较小的子网和 VLAN 可以减少广播数据包的范围，从而提高网络性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全：&lt;/strong&gt; 网络安全团队可以将访问控制列表（ACL）应用于 VLAN 和子网，隔离不同网络段上的机器。如果发生数据泄露，ACL 可以防止威胁扩散到其他网络段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用网络分段进行安全管理存在挑战。分段需求并不总是与网络架构相匹配。重新架构网络或重新配置 VLAN 和子网以满足分段要求既困难又耗时。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-3_huaed26c6b68adcb70bcc6c94fc6c02596_50459_868x488_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-3.jpg&#34; data-img=&#34;/trans/what-is-microsegmentation/what-is-microsegmentation-img-3.jpg&#34; data-width=&#34;868&#34; data-height=&#34;488&#34; alt=&#34;image&#34; data-caption=&#34;网络分段 - 使用 VLAN 和子网 - 是通过打破网络广播域来提供最佳网络性能的一种方法&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;网络分段 - 使用 VLAN 和子网 - 是通过打破网络广播域来提供最佳网络性能的一种方法&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;em&gt;图 4: 网络分段 - 使用 VLAN 和子网 - 是通过打破网络广播域来提供最佳网络性能的一种方法。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;微分段的工作方式&#34;&gt;微分段的工作方式&lt;/h2&gt;
&lt;p&gt;微分段，也被称为零信任或基于身份的分段，不需要重新架构就可以满足分段要求。安全团队可以在网络中隔离工作负载，限制恶意横向移动的影响。微分段控制可以分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于代理的&lt;/strong&gt;解决方案在工作负载上使用软件代理，并实施粒度隔离至单个主机和容器。基于代理的解决方案可能利用内置的基于主机的防火墙，或根据工作负载的身份或属性实现隔离能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于网络的&lt;/strong&gt;分段控制依赖于网络基础设施。这种方式利用物理和虚拟设备，如负载均衡器、交换机、软件定义网络（SDN）和覆盖网络来执行策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云原生控制&lt;/strong&gt;利用嵌入在云服务提供商中的功能（例如，Amazon 安全组、Azure 防火墙或 Google Cloud 防火墙）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微分段通过三个关键原则提供一致的安全性：可见性、粒度安全和动态适应。&lt;/p&gt;
&lt;p&gt;一个微分段解决方案应该提供对所有网络流量的可见性，无论是在数据中心内部还是跨云流量。虽然监控流量的方式有很多，但最有效的方法是能够看到与工作负载上下文（例如，云、应用、编排器）相关联的流量，而不仅仅是包含 IP 地址和端口的日志。&lt;/p&gt;
&lt;p&gt;粒度安全意味着网络管理员可以通过为关键应用程序创建特定策略来加强和精确安全。其目标是通过精确控制特定工作负载的进出流量（例如，每周的工资运行或人力资源数据库的更新），防止威胁的横向移动。&lt;/p&gt;
&lt;p&gt;微分段为动态环境提供保护。例如，云原生架构如容器和 Kubernetes 可以在几秒钟内启动并关闭。分配给云工作负载的 IP 地址是短暂的，使基于 IP 的规则管理成为不可能。在微分段中，安全策略以身份或属性（env=prod, app=hrm 等）而不是网络构造（例如，10.100.0.10 tcp/80）的形式表达。应用或基础设施的更改会触发安全策略的实时自动修订，无需人工干预。&lt;/p&gt;
&lt;h2 id=&#34;微分段的类型&#34;&gt;微分段的类型&lt;/h2&gt;
&lt;p&gt;微分段为动态环境提供保护。例如，云原生架构如&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-a-container&#34; title=&#34;容器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器&lt;/a&gt;和 Kubernetes 可以在几秒钟内启动并关闭。分配给云工作负载的 IP 地址是短暂的，使得基于 IP 的规则管理成为不可能。在微分段中，安全策略以身份或属性（env=prod, app=hrm 等）而不是网络构造（例如，10.100.0.10 tcp/80）的形式表达。应用或基础设施的变化会触发安全策略的实时自动修订，无需人工干预。&lt;/p&gt;
&lt;h3 id=&#34;容器分段&#34;&gt;容器分段&lt;/h3&gt;
&lt;p&gt;容器分段涉及将容器从彼此及宿主系统隔离开来，以提高安全性并减少攻击面。容器化是一种广泛使用的技术，允许在单个宿主系统上的不同容器中运行多个应用程序或服务。如果没有适当的分段，容器可能会访问彼此的数据和配置文件，这可能导致安全漏洞。&lt;/p&gt;
&lt;h4 id=&#34;容器分段的最佳实践&#34;&gt;容器分段的最佳实践&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;容器隔离：&lt;/strong&gt; 每个容器应从运行在同一宿主系统上的其他容器中隔离开来，以防止未授权访问。这可以通过使用 Docker 和 Kubernetes 等提供内置隔离机制的容器技术来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络分段：&lt;/strong&gt; 可以使用网络分段技术将容器彼此分开。这涉及为每个容器创建独立的网络，并配置防火墙规则以允许或拒绝容器之间的流量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于角色的访问控制：&lt;/strong&gt; 可以使用基于角色的访问控制（RBAC）定义不同容器的访问策略，根据用户角色和权限进行管理。这有助于确保容器只被授权的用户和过程访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;镜像签名：&lt;/strong&gt; 容器镜像可以进行数字签名，以确保只有经过验证的镜像才能在生产环境中部署。这有助于防止容器镜像被篡改或修改，从而减少安全漏洞的风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行时保护：&lt;/strong&gt; 运行时保护工具可以用来监控容器活动并检测可能表明安全漏洞的异常行为。这些工具有助于实时检测和防止攻击，提高容器化环境的安全态势。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器分段有助于确保容器化应用程序和服务的安全。通过隔离容器并应用访问控制策略，组织可以减少攻击面，并防止未授权访问敏感数据和资源。容器分段应作为整体安全策略的一部分实施，包括网络安全、访问控制和运行时保护。&lt;/p&gt;
&lt;h3 id=&#34;云安全中的用户分段&#34;&gt;云安全中的用户分段&lt;/h3&gt;
&lt;p&gt;云安全中的用户分段涉及根据组织内不同角色和职责划分用户访问权限，以确保用户只能访问其工作功能所需的资源。用户分段通过限制敏感数据和资源的暴露范围，仅限于授权用户，从而减少攻击面。&lt;/p&gt;
&lt;p&gt;由于云环境的动态性和快速变化，用户分段是全面云安全策略的关键组成部分。以下是云安全中用户分段的一些关键考虑因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于角色的访问控制（RBAC）：&lt;/strong&gt; RBAC 涉及创建和定义角色的权限，然后根据工作职能将用户分配到适当的角色。这种方法确保用户只能访问其工作功能所需的资源，减少意外或故意数据泄露的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多因素认证（MFA）：&lt;/strong&gt; MFA 要求用户提供多种形式的认证才能访问资源。这可能包括密码、安全令牌或生物识别数据。MFA 是一种有效的方法，特别是与 RBAC 结合使用时，可以防止未授权访问云资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续监控：&lt;/strong&gt; 持续监控用户活动对于实时检测和响应安全事件至关重要。这涉及分析日志数据和用户行为，以识别威胁和漏洞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;职责分离：&lt;/strong&gt; 职责分离涉及在多个用户之间划分责任，以防止任何单一用户对系统或过程拥有过多控制权。这有助于降低欺诈或错误的风险，并确保敏感操作由多个用户执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定期访问审查：&lt;/strong&gt; 定期访问审查涉及定期审查用户访问权限和权限，以确保它们仍然是必需的。访问审查有助于识别和移除不必要的访问权限，减少未授权访问的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过实施 RBAC、MFA、持续监控、职责分离和定期访问审查，组织可以增强其云安全态势，保护免受不断变化的威胁影响。&lt;/p&gt;
&lt;h2 id=&#34;微分段的益处&#34;&gt;微分段的益处&lt;/h2&gt;
&lt;p&gt;采用微分段的组织能够实现具体的益处，具体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;减少攻击面&lt;/strong&gt;：微分段提供了对完整网络环境的可见性，不会延缓开发或创新的速度。应用开发人员可以在开发周期早期集成安全策略定义，确保应用部署或更新不会产生新的攻击向量。这在快速发展的 DevOps 世界中尤为重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改善数据泄露的防护&lt;/strong&gt;：微分段使安全团队能够根据预定义的策略监控网络流量，同时缩短对数据泄露的响应和修复时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加强监管合规性&lt;/strong&gt;：利用微分段，监管官员可以创建政策，将受监管系统从基础设施的其余部分隔离开来。精细控制与受监管系统的通信，降低非合规使用的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化策略管理&lt;/strong&gt;：转向微分段网络或零信任安全模型提供了简化策略管理的机会。一些微分段解决方案提供自动应用发现和基于学习的应用行为的策略建议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;微分段的应用案例&#34;&gt;微分段的应用案例&lt;/h2&gt;
&lt;p&gt;微分段的应用范围广泛且日益增长。以下是一些代表性的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发与生产系统&lt;/strong&gt;：在最佳情况下，组织会仔细区分开发和测试环境与生产系统。然而，这些措施可能无法阻止疏忽行为，如开发人员为测试目的从生产数据库取用客户信息。微分段可以通过精细地限制两个环境之间的连接来强制执行更严格的分离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保护软资产&lt;/strong&gt;：公司有巨大的财务和声誉动机来保护“软”资产，如机密的客户和员工信息、知识产权和公司财务数据。微分段为防止数据外泄和其他恶意行为提供了额外的安全级别，这些行为可能导致停机并干扰业务运营。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云管理&lt;/strong&gt;：微分段可以为跨多个云的应用程序提供无缝的保护，并在由多个数据中心和云服务提供商组成的混合环境中实施统一的安全策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件响应&lt;/strong&gt;：如前所述，微分段限制了威胁的横向移动和泄露的影响。此外，微分段解决方案提供的日志信息有助于事件响应团队更好地理解攻击策略，并通过遥测数据帮助确定特定应用程序的政策违规情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;微分段常见问题解答&#34;&gt;微分段常见问题解答&lt;/h2&gt;
&lt;h3 id=&#34;网络分段与微分段有何不同&#34;&gt;网络分段与微分段有何不同？&lt;/h3&gt;
&lt;p&gt;虽然网络分段和微分段都有助于提升网络安全和性能，但它们在基础上有所不同。传统的网络分段侧重于进出网络的南北流量，并使用 VLAN、防火墙、路由器等设备实施。这些设备可以配置来执行网络层面的安全策略，如访问控制列表（ACL）或防火墙规则。&lt;/p&gt;
&lt;p&gt;另一方面，微分段侧重于东西流量，通常使用基于软件的安全解决方案实施，如基于虚拟机的防火墙或端点保护平台（EPP）。微分段在个别工作负载或应用层面而非网络层面应用安全策略。&lt;/p&gt;
&lt;h3 id=&#34;什么是防火墙策略&#34;&gt;什么是防火墙策略？&lt;/h3&gt;
&lt;p&gt;防火墙策略定义了组织的防火墙应如何处理针对某些 IP 地址和地址范围的进出网络流量。策略可能关注用户身份、网络活动和应用程序，以及 IP 地址。&lt;/p&gt;
&lt;h3 id=&#34;什么是虚拟网络&#34;&gt;什么是虚拟网络？&lt;/h3&gt;
&lt;p&gt;虚拟网络使用软件连接计算机、虚拟机（VM）和服务器或虚拟服务器，与传统的物理网络不同，后者通过硬件和电缆固定在特定位置。&lt;/p&gt;
&lt;h3 id=&#34;什么是应用依赖&#34;&gt;什么是应用依赖？&lt;/h3&gt;
&lt;p&gt;应用依赖是指软件、应用程序、服务器和其他组件相互依赖以执行其功能的情况。为确保服务不间断，应在将组件迁移到云、移到新的云环境或实施微分段之前绘制应用依赖关系图。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>无需 Kubernetes 测试 Kubernetes 网络实现</title>
      <link>https://jimmysong.io/trans/ztunnel-testing/</link>
      <pubDate>Tue, 23 Jul 2024 18:06:32 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/ztunnel-testing/</guid>
      <description>
        
        
        &lt;p&gt;由于在开发过程中我&lt;a href=&#34;https://blog.howardjohn.info/posts/ideal-ci/&#34; title=&#34;真的不喜欢等待&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;真的不喜欢等待&lt;/a&gt;，所以在构建 Ztunnel（一个为 Istio 的新 &lt;a href=&#34;https://istio.io/latest/blog/2022/introducing-ambient-mesh/&#34; title=&#34;Ambient 模式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient 模式&lt;/a&gt;设计的底层网络代理）时，我的首要任务之一便是确保测试的快速进行（包括运行和编写测试），并且易于调试。&lt;/p&gt;
&lt;p&gt;这一任务颇为棘手，因为在大多数真实场景中，Ztunnel 高度依赖 Kubernetes。虽然它能够完全独立于 Kubernetes 运行，但许多关键代码路径的行为完全不同，使得仅通过这种方式进行测试变得不可行。&lt;/p&gt;
&lt;p&gt;下图为典型的 Ztunnel 部署架构：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ztunnel-testing/ztunnel-architecture.svg&#34; data-img=&#34;/trans/ztunnel-testing/ztunnel-architecture.svg&#34; alt=&#34;image&#34; data-caption=&#34;Ztunnel 架构概览&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ztunnel 架构概览&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在此架构中，用户将运行一个包含多个节点的 Kubernetes 集群。每个节点上都运行着一个 Ztunnel，配置了宿主机和每个 pod 的网络栈。&lt;/p&gt;
&lt;p&gt;此外，Ztunnel 实际上进入了每个 pod 的网络命名空间，并代表其发送/接收流量。这一点非常奇特且酷炫，但也大大增加了测试的难度！（&lt;a href=&#34;https://www.youtube.com/watch?v=cuMeEhpyH5s&#34; title=&#34;详细信息&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;详细信息&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&#34;加速测试&#34;&gt;加速测试&lt;/h2&gt;
&lt;p&gt;启动完整的 Kubernetes 环境、重建镜像、部署到每个节点的过程非常缓慢且难以调试。&lt;/p&gt;
&lt;p&gt;黄金标准应该是将所有操作运行在一个简单的单一二进制文件中——仅需执行 &lt;code&gt;cargo test&lt;/code&gt;。这种方式避开了复杂的设置和缓慢的重建，并使调试变得轻而易举（当然，你可以将调试器连接到正在运行的 pod，但这很麻烦）。&lt;/p&gt;
&lt;h2 id=&#34;设置网络&#34;&gt;设置网络&lt;/h2&gt;
&lt;p&gt;如果我们去除无尽的抽象层，Kubernetes pod 实际上只是几个 Linux 命名空间和挂载的组合。Docker 在这方面管理得很好，&lt;a href=&#34;https://github.com/p8952/bocker&#34; title=&#34;bash&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bash&lt;/a&gt; 也可以。&lt;/p&gt;
&lt;p&gt;我们特别关注的是&lt;a href=&#34;https://man7.org/linux/man-pages/man7/network_namespaces.7.html&#34; title=&#34;网络命名空间&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络命名空间&lt;/a&gt;，它可以实现网络栈的隔离。每个 pod 都有自己的网络命名空间，通过各种机制连接，允许与同一节点上的其他 pod、其他节点以及外部目的地通信。&lt;/p&gt;
&lt;p&gt;好消息是创建网络命名空间非常简单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo ip netns add testing
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们的最终目标是设置一系列的网络命名空间，外观与我们在 Kubernetes 上的真实架构类似：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ztunnel-testing/ztunnel-network-namespaces.svg&#34; data-img=&#34;/trans/ztunnel-testing/ztunnel-network-namespaces.svg&#34; alt=&#34;image&#34; data-caption=&#34;所需的网络命名空间设置&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;所需的网络命名空间设置&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在网络命名空间之间建立连接稍微复杂一些。像  &lt;a href=&#34;https://www.cni.dev/docs/cnitool/&#34; title=&#34;&amp;lt;code&amp;gt;cnitool&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;cnitool&lt;/code&gt;&lt;/a&gt; 这样的工具可以帮助我们完成（它实际上执行了一些 Kubernetes 环境中用于设置网络的相同逻辑，但作为 CLI 工具），但你也可以完全手动操作。我们选择了后者。&lt;/p&gt;
&lt;p&gt;最终，我们的设置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个测试都拥有自己的网络命名空间，通过一个桥接设备（&lt;code&gt;br0&lt;/code&gt;）来促进节点之间的流量。&lt;/li&gt;
&lt;li&gt;每个节点配置了一个 &lt;code&gt;veth&lt;/code&gt; 设备。一端成为节点上的 &lt;code&gt;eth0&lt;/code&gt;，另一端连接到根命名空间中的 &lt;code&gt;br0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;每个 pod 都配置了一个 &lt;code&gt;veth&lt;/code&gt; 设备。一端成为 pod 上的 &lt;code&gt;eth0&lt;/code&gt;，另一端位于节点网络命名空间中。&lt;/li&gt;
&lt;li&gt;为每个 pod 设置路由以将流量发送到节点。&lt;/li&gt;
&lt;li&gt;为每对节点设置路由，以实现跨节点流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ztunnel-testing/ztunnel-network-devices.svg&#34; data-img=&#34;/trans/ztunnel-testing/ztunnel-network-devices.svg&#34; alt=&#34;image&#34; data-caption=&#34;所需的网络连接设置&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;所需的网络连接设置&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;除了根命名空间/桥接设备外，这与许多现实世界中的 Kubernetes 集群的运行方式相同（在现实世界中，根命名空间是两台机器之间的物理网络）。&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href=&#34;https://github.com/istio/ztunnel/blob/34fce85a6a2b2a85eb170a04096731e2ea4e0e9f/src/test_helpers/netns.rs#L194&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;找到所有细节。&lt;/p&gt;
&lt;h2 id=&#34;运行测试&#34;&gt;运行测试&lt;/h2&gt;
&lt;p&gt;一旦我们有了这些命名空间，我们仍然需要一种实际使用它们的方法。幸运的是，Linux 允许在运行时更改当前命名空间线程（这是接下来重要的内容）。这让我们建立了一个基本的帮助函数（真实的代码稍微更复杂）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run_in_namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;: &lt;span class=&#34;nc&#34;&gt;Namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;: &lt;span class=&#34;nb&#34;&gt;Fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_current_namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了这个，我们可以轻松地从任意的“pods”或“nodes”执行代码。&lt;/p&gt;
&lt;p&gt;然而，我们仍然面临一个问题。我们的所有代码都运行在 &lt;a href=&#34;https://tokio.rs/&#34; title=&#34;tokio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tokio&lt;/a&gt; 异步运行时中，它会根据需要将我们的各种任务安排到物理操作系统线程上（类似于 Go 运行时的工作方式）。由于网络命名空间是线程相关的，所以当我们的任务在线程之间跳转时，这一切都会崩溃。&lt;/p&gt;
&lt;p&gt;幸运的是，Rust 给了我们比 Go 更多的关于异步运行时的灵活性——我们可以同时拥有多个！借此，我们能够构建一个能够异步执行 &lt;code&gt;run_in_namespace&lt;/code&gt;。对于我们想要执行的每个函数，我们启动一个新线程并构建一个专用的单线程异步运行时来处理它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;async_run_in_namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;: &lt;span class=&#34;nc&#34;&gt;Namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;: &lt;span class=&#34;nc&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_in_namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tokio&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;runtime&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;new_current_thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们为每个命名空间运行一次这个函数，因此这里的开销是最小的。如果我们想要运行许多小函数，可以在顶层构建一个抽象来发送工作到线程以执行。&lt;/p&gt;
&lt;p&gt;我们需要的最后一件事是一种合理的方法来识别如何调用每个目的地。虽然它们都会被分配一个 IP（基于我们代码中的简单 IPAM 策略），但我们不希望每个测试都必须猜测 IP。为了处理这个问题，我们构建了一个简单的名称解析器。这就像 DNS，但简单得多：对于我们创建的每个“pod”，我们记录一个&lt;code&gt;name -&amp;gt; IP&lt;/code&gt;的映射，并允许查找 IP。&lt;/p&gt;
&lt;p&gt;将所有这些放在一起，一个简单的测试启动了 3 个 pods（客户端、服务器和 ztunnel）在一个单一节点上看起来像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#[tokio::test]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ztunnel&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deploy_ztunnel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DEFAULT_NODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;await&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workload_builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DEFAULT_NODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;await&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_tcp_server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workload_builder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;client&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DEFAULT_NODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;await&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_tcp_client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ... some assertions here }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;放弃权限&#34;&gt;放弃权限&lt;/h2&gt;
&lt;p&gt;上述设置效果很好，但也带来了一些问题。&lt;/p&gt;
&lt;p&gt;基本上设置的每一步都需要提升的 root 权限；这让简单的 &lt;code&gt;cargo test&lt;/code&gt; 案例的开箱即用变得乏味，通常也不可取。&lt;/p&gt;
&lt;p&gt;此外，这会在主机环境中污染大量的命名空间。虽然我们有一些清理过程，但这些并不是 100% 可靠，可能会导致悬挂的命名空间阻碍未来的执行。&lt;/p&gt;
&lt;p&gt;解决拥有太多命名空间的问题的方法？更多的命名空间！为此，我们需要的不仅仅是网络命名空间。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/user_namespaces.7.html&#34; title=&#34;用户命名空间&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;用户命名空间&lt;/a&gt; 允许我们实质上假装是 UID 0 (root)，同时实际上将其映射回我们原始的 UID。这里的力量在于，在该命名空间中，我们可以做一些本来需要 root 权限的事情——特别是创建新的网络命名空间。&lt;/p&gt;
&lt;p&gt;然而，我们不能做的一件事是修改主机-root 拥有的文件（这将是明显的权限违规）。尽管我们可能可以绕过它们，但我们在测试中使用的很多工具喜欢触摸 root 文件。这再次可以通过 &lt;a href=&#34;https://man7.org/linux/man-pages/man7/mount_namespaces.7.html&#34; title=&#34;mount 命名空间&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mount 命名空间&lt;/a&gt; 解决，它允许我们将我们拥有的文件绑定挂载到主机-root 拥有的文件上，而不会影响命名空间外的事物。&lt;/p&gt;
&lt;p&gt;将所有这些放在一起，我们有这样的东西：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_uid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 首先，进入一个新的用户命名空间。unshare(CloneFlags::CLONE_NEWUSER).unwrap(); // 将用户命名空间中的 root 映射到我们原始的 UID File::create(&amp;#34;/proc/self/uid_map&amp;#34;).write(format!(&amp;#34;0 {original_uid} 1&amp;#34;)); // 设置一个新的网络命名空间 unshare(CloneFlags::CLONE_NEWNET).unwrap(); // 设置一个新的挂载命名空间 unshare(CloneFlags::CLONE_NEWNS).unwrap(); // 将一个文件夹在我们的每个测试目录中挂载到 /var/run/netns mount(tmp_dir.join(&amp;#34;netns&amp;#34;), &amp;#34;/var/run/netns&amp;#34;, MS_BIND); // 一个方便手动调试的好帮手信息，如果需要的话。let pid = get_pid(); eprintln!(&amp;#34;Starting test in {tmp_dir}. Debug with `sudo nsenter --mount --net -t {pid}`&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所述，一个技巧是，进入命名空间是按线程进行的。我们需要在生成任何额外线程之前设置这一点。&lt;/p&gt;
&lt;p&gt;Rust 实际上为我们提供了这样做的能力，但这意味着我们失去了 &lt;code&gt;#[tokio::test]&lt;/code&gt; 宏帮助。我们可以写自己的宏，但这有点痛苦。幸运的是，通过 &lt;a href=&#34;https://crates.io/crates/ctor&#34; title=&#34;链接器的花招&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;链接器的花招&lt;/a&gt; 我们可以迫使我们的代码在进程执行的非常早期运行。&lt;/p&gt;
&lt;p&gt;Go 中的类似方法也有效（请参见 &lt;a href=&#34;https://github.com/howardjohn/unshare-go&#34; title=&#34;我写的帮助库&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我写的帮助库&lt;/a&gt;），实际上在那里是必需的，因为设置必须在 Go 运行时启动之前完成（这通常在任何用户代码运行之前很久）。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;有了所有这些设备，一个完整的测试只需要大约 200 毫秒。一切都在一个单一进程中运行，使调试变得轻而易举。所有的测试也都是完全隔离的，因此可以完全并行运行测试（包括相同的测试，用于压力测试以消除测试缺陷）。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>SAPwned：SAP AI 漏洞暴露客户云环境和私有 AI 工件</title>
      <link>https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/</link>
      <pubDate>Thu, 18 Jul 2024 19:23:50 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/</guid>
      <description>
        
        
        &lt;h2 id=&#34;ai-是否存在隔离问题&#34;&gt;AI 是否存在隔离问题？&lt;/h2&gt;
&lt;p&gt;在过去的几个月里，我们 Wiz 研究团队对多个 AI 服务提供商进行了广泛的租户隔离研究。我们认为这些服务更容易受到租户隔离漏洞的影响，因为它们允许用户运行 AI 模型和应用程序，这等同于执行任意代码。随着 AI 基础设施越来越成为许多商业环境的标配，这些攻击的影响正变得越来越重要。&lt;/p&gt;
&lt;p&gt;我们将在即将举行的 Black Hat 会议上展示这个研究项目的发现，在我们的会议“隔离还是幻觉？为乐趣和权重黑客攻击 AI 基础设施提供商”。&lt;/p&gt;
&lt;p&gt;在这个项目的最新一期中，我们研究了 SAP 的 AI 产品，恰当地命名为“SAP AI Core”。这是我们系列中的第三份报告，继我们对 Hugging Face 和 Replicate 平台的研究之后。本博客将探索漏洞链并详细介绍我们的发现，称为“SAPwned”，同时也将观察到确保管理 AI 平台安全的潜在影响和更广泛的启示。&lt;/p&gt;
&lt;h2 id=&#34;执行摘要&#34;&gt;执行摘要&lt;/h2&gt;
&lt;p&gt;AI 训练过程需要访问大量敏感客户数据，这使 AI 训练服务成为攻击者的诱人目标。SAP AI Core 提供与 HANA 及其他云服务的集成，通过云访问密钥访问客户的内部数据。这些凭据非常敏感，我们的研究目标是确定潜在的恶意行为者是否能够访问这些客户秘密。&lt;/p&gt;
&lt;p&gt;我们对 SAP AI Core 的研究始于使用 SAP 的基础设施执行合法的 AI 训练程序。通过执行任意代码，我们能够横向移动并接管服务——获取客户的私有文件以及客户云环境的凭据：AWS、Azure、SAP HANA Cloud 等。我们发现的漏洞可能允许攻击者访问客户数据并污染内部工件——蔓延到相关服务和其他客户环境。&lt;/p&gt;
&lt;p&gt;具体来说，我们获得的访问权限允许我们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 SAP 的内部容器注册表上读取和修改 Docker 镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Google 容器注册表上读取和修改 SAP 的 Docker 镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 SAP 的内部 Artifactory 服务器上读取和修改工件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得 SAP AI Core 的 Kubernetes 集群的集群管理员权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问客户的云凭证和私有 AI 工件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f1_hub9d8780c6754b3a0d40e93c0eae1d68f_78308_1920x1080_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f1.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f1.png&#34; data-width=&#34;1920&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;我们研究发现的逐步插图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;我们研究发现的逐步插图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们发现这些问题的根本原因是攻击者可以运行恶意 AI 模型和训练程序，这本质上是代码。在审查了几个主要 AI 服务之后，我们认为行业必须改进其在运行 AI 模型时的隔离和沙箱标准。&lt;/p&gt;
&lt;p&gt;所有漏洞已报告给 SAP 的安全团队，并由 SAP 修复，如其网站所确认。我们感谢他们的合作。没有客户数据受到泄露。&lt;/p&gt;
&lt;h2 id=&#34;介绍研究开始&#34;&gt;介绍：研究开始&lt;/h2&gt;
&lt;p&gt;SAP AI Core 是一项服务，允许用户以可扩展和管理的方式在 SAP 的庞大云资源上开发、训练和运行 AI 服务。类似于其他云提供商（和 AI 基础设施提供商），客户的代码在 SAP 的共享环境中运行——构成跨租户访问的风险。&lt;/p&gt;
&lt;p&gt;我们的研究始于作为 SAP 客户，基本权限允许我们创建 AI 项目。因此，我们首先在 SAP AI Core 上创建了一个常规 AI 应用程序。SAP 的平台允许我们提供一个 Argo Workflow 文件，该文件反过来生成了一个根据我们的配置的新 Kubernetes Pod。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f2_hu39f9c0b1e6c59d292e0aa1d5f0beb587_36980_1020x692_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f2.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f2.png&#34; data-width=&#34;1020&#34; data-height=&#34;692&#34; alt=&#34;image&#34; data-caption=&#34;SAP AI Core 上的 Argo 工作流配置示例&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;SAP AI Core 上的 Argo 工作流配置示例&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这允许我们在 Pod 中按设计运行我们自己的任意代码——不需要任何漏洞。然而，我们的环境受到了相当大的限制。我们很快意识到，我们的 Pod 的网络访问非常有限，这是由 Istio 代理 sidecar 强制执行的——因此，扫描内部网络对我们来说不是一个选项。至少现在不是。&lt;/p&gt;
&lt;h2 id=&#34;bug-1-通过-1337-的力量绕过网络限制&#34;&gt;Bug #1: 通过 1337 的力量绕过网络限制&lt;/h2&gt;
&lt;p&gt;我们首先尝试的是为我们的 Pod 配置“有趣”的权限。然而，SAP 的准入控制器阻止了我们尝试的所有危险安全选项——例如，以&lt;code&gt;root&lt;/code&gt;身份运行我们的容器。&lt;/p&gt;
&lt;p&gt;尽管如此，我们发现准入控制器未能阻止两种有趣的配置。&lt;/p&gt;
&lt;p&gt;第一个是&lt;code&gt;shareProcessNamespace&lt;/code&gt;，它允许我们与我们的 sidecar 容器共享进程命名空间。由于我们的 sidecar 是 Istio 代理，我们获得了对 Istio 的配置的访问权限，包括对集群的集中式 Istiod 服务器的访问令牌。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f3_hu1ee113232a286767b6011a348f43de62_113240_1678x616_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f3.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f3.png&#34; data-width=&#34;1678&#34; data-height=&#34;616&#34; alt=&#34;image&#34; data-caption=&#34;通过我们的 sidecar 容器访问 Istio 令牌&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;通过我们的 sidecar 容器访问 Istio 令牌&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;另一个是&lt;code&gt;runAsUser&lt;/code&gt;（和&lt;code&gt;runAsGroup&lt;/code&gt;）。虽然我们不能成为 root，但所有其他 UID 都是允许的——包括 Istio 的 UID，讽刺的是，这个 UID 是&lt;code&gt;1337&lt;/code&gt;（是的，真的）。我们将我们的 UID 设置为 1337，并成功地以 Istio 用户的身份运行。由于 Istio 本身是&lt;a href=&#34;https://istio.io/latest/docs/reference/config/analysis/ist0144/&#34; title=&#34;从 Istio 的 iptables 规则中排除的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从 Istio 的 iptables 规则中排除的&lt;/a&gt;——我们现在运行时没有任何流量限制！&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f4_hucce2eb2cef516eb1fd2e6e83f17027c7_49702_1732x548_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f4.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f4.png&#34; data-width=&#34;1732&#34; data-height=&#34;548&#34; alt=&#34;image&#34; data-caption=&#34;发送请求到内部网络——在 UID 1337 之前和之后&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;发送请求到内部网络——在 UID 1337 之前和之后&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们摆脱了流量束缚，开始扫描我们 Pod 的内部网络。使用我们的 Istio 令牌，我们能够从 Istiod 服务器读取配置并了解内部环境——这引导我们进行了以下发现。&lt;/p&gt;
&lt;h2 id=&#34;bug-2-loki-泄露-aws-令牌&#34;&gt;Bug #2: Loki 泄露 AWS 令牌&lt;/h2&gt;
&lt;p&gt;我们在集群中找到了一个 Grafana Loki 的实例，因此我们请求了&lt;code&gt;/config&lt;/code&gt;端点以查看 Loki 的配置。API 响应了完整的配置，包括 Loki 用来访问 S3 的 AWS 密钥：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f5_huaa2897b5e4e63de34faf7b73f9936593_32228_1232x506_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f5.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f5.png&#34; data-width=&#34;1232&#34; data-height=&#34;506&#34; alt=&#34;image&#34; data-caption=&#34;来自 SAP 的 Loki 服务器的配置摘录&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;来自 SAP 的 Loki 服务器的配置摘录&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这些密钥授予访问 Loki 的 S3 存储桶的权限，其中包含 AI Core 服务（SAP 称其不敏感）和客户 Pods 的大量日志。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f6_hue0d7f5178b763587af7cc81e3901c0b6_112876_1542x768_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f6.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f6.png&#34; data-width=&#34;1542&#34; data-height=&#34;768&#34; alt=&#34;image&#34; data-caption=&#34;Loki 的 S3 存储桶中的部分文件列表&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Loki 的 S3 存储桶中的部分文件列表&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;bug-3-未经身份验证的-efs-共享暴露用户文件&#34;&gt;Bug #3: 未经身份验证的 EFS 共享暴露用户文件&lt;/h2&gt;
&lt;p&gt;在内部网络中，我们发现了 6 个 AWS Elastic File System（EFS）实例，监听端口 2049。EFS 实例的一个&lt;a href=&#34;https://youtu.be/HcNmkCRXFdE&#34; title=&#34;常见问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;常见问题&lt;/a&gt;是它们默认配置为公共的——这意味着只要您可以访问其 NFS 端口，就不需要凭据即可查看或编辑文件。这些实例也不例外，我们使用简单的开源 NFS 工具，可以自由访问共享的内容。&lt;/p&gt;
&lt;p&gt;列出这些 EFS 实例上存储的文件，揭示了大量 AI 数据，包括代码和训练数据集，按客户 ID 分类：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f7_huea1d2ef8950240b7f27f8b35c438c3aa_141444_2628x1332_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f7.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f7.png&#34; data-width=&#34;2628&#34; data-height=&#34;1332&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f8_hu92afd2164e054e4a3f21b88e3a95ca03_137606_2067x1266_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f8.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f8.png&#34; data-width=&#34;2067&#34; data-height=&#34;1266&#34; alt=&#34;image&#34; data-caption=&#34;两个 EFS 共享的部分文件列表；每个文件夹代表一个不同的客户 ID&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;两个 EFS 共享的部分文件列表；每个文件夹代表一个不同的客户 ID&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;bug-4-未经身份验证的-helm-服务器危及内部-docker-注册表和-artifactory&#34;&gt;Bug #4: 未经身份验证的 Helm 服务器危及内部 Docker 注册表和 Artifactory&lt;/h2&gt;
&lt;p&gt;我们在网络上最有趣的发现是一个名为 Tiller 的服务，这是 Helm 包管理器的服务器组件（版本 2）。&lt;/p&gt;
&lt;p&gt;与 Tiller 的通信是通过其 gRPC 接口在端口 44134 进行的，该端口默认是未经身份验证的。&lt;/p&gt;
&lt;p&gt;在我们的内部网络上查询这个服务器，揭示了对 SAP 的 Docker 注册表以及其 Artifactory 服务器的高权限密钥：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f9_hue182f914ce24aa3f7eae562a9f261657_63094_1356x1176_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f9.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f9.png&#34; data-width=&#34;1356&#34; data-height=&#34;1176&#34; alt=&#34;image&#34; data-caption=&#34;通过 Helm 服务器查询暴露的容器注册表和 Artifactory 凭据&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;通过 Helm 服务器查询暴露的容器注册表和 Artifactory 凭据&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;使用这些密钥的读取权限，潜在的攻击者可以读取内部图像和构建，提取商业秘密，可能还包括客户数据。&lt;/p&gt;
&lt;p&gt;使用这些密钥的写权限，攻击者可以篡改图像和构建，对 SAP AI Core 服务进行供应链攻击。&lt;/p&gt;
&lt;h2 id=&#34;bug-5-未经身份验证的-helm-服务器危及-k8s-集群暴露-google-访问令牌和客户秘密&#34;&gt;Bug #5: 未经身份验证的 Helm 服务器危及 K8s 集群，暴露 Google 访问令牌和客户秘密&lt;/h2&gt;
&lt;p&gt;Helm 服务器暴露了读写操作。尽管读取权限暴露了敏感的秘密（如上所示），但服务器的写权限允许完全接管集群。&lt;/p&gt;
&lt;p&gt;Tiller 的&lt;code&gt;install&lt;/code&gt;命令接受一个 Helm 包并将其部署到 K8s 集群。我们创建了一个恶意 Helm 包，生成了一个具有&lt;code&gt;cluster-admin&lt;/code&gt;权限的新 Pod，并运行了安装命令。&lt;/p&gt;
&lt;p&gt;现在我们在集群上运行具有完全权限！&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f10_hu9184e1f80f877f573b2c4ce097c4c906_116018_2403x1357_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f10.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f10.png&#34; data-width=&#34;2403&#34; data-height=&#34;1357&#34; alt=&#34;image&#34; data-caption=&#34;通过 Helm 获得的 K8s 权限的部分列表&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;通过 Helm 获得的 K8s 权限的部分列表&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;使用这种访问级别，攻击者可以直接访问其他客户的 Pods 并窃取敏感数据，如模型、数据集和代码。这种访问还允许攻击者干扰客户的 Pods，污染 AI 数据并操纵模型的推理。&lt;/p&gt;
&lt;p&gt;此外，这种访问级别还将允许我们查看客户自己的秘密——甚至超出 SAP AI Core 范围的秘密。例如，我们的 AI Core 账户包含了我们的 AWS 账户（用于 S3 数据访问）、我们的 SAP HANA 账户（用于 Data Lake 访问）和我们的 Docker Hub 账户（用于拉取我们的镜像）的秘密。使用我们新获得的访问级别，我们查询了这些秘密，并设法以纯文本形式访问它们所有：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f11_huec839c8f43cf8fccb415f390cea691f8_73710_1632x1102_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f11.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f11.png&#34; data-width=&#34;1632&#34; data-height=&#34;1102&#34; alt=&#34;image&#34; data-caption=&#34;使用我们的 K8s 权限访问客户秘密&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;使用我们的 K8s 权限访问客户秘密&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;同样的查询还揭示了一个名为&lt;code&gt;sap-docker-registry-secret&lt;/code&gt;的 SAP 访问 Google 容器注册表的密钥。我们已经确认这个密钥授予了读写权限——进一步扩大了潜在供应链攻击的范围。&lt;/p&gt;
&lt;h2 id=&#34;启示&#34;&gt;启示&lt;/h2&gt;
&lt;p&gt;我们对 SAP AI Core 的研究表明，深度防御的重要性。我们面临的主要安全障碍是 Istio 阻止我们的流量到达内部网络。一旦我们能够绕过这个障碍，我们就获得了对几个内部资产的访问权限，这些资产不需要任何其他身份验证——这意味着内部网络被视为可信的。加固这些内部服务本可以将这次攻击的影响降至最低，将其从完全服务接管降级为轻微的安全事件。&lt;/p&gt;
&lt;p&gt;符合我们之前与 K8s 相关的漏洞，这项研究还展示了在管理服务中使用 K8s 的租户隔离陷阱。控制平面（服务逻辑）和数据平面（客户计算）之间的关键分离受到了 K8s 架构的影响，该架构通过 API、身份、共享计算和软件分段网络允许它们之间的逻辑连接。&lt;/p&gt;
&lt;p&gt;此外，这项研究表明，AI R&amp;amp;D 过程引入的独特挑战。AI 培训本质上需要运行任意代码；因此，应该有适当的保护措施，确保不受信任的代码与内部资产和其他租户正确分离。&lt;/p&gt;
&lt;h2 id=&#34;披露时间线&#34;&gt;披露时间线&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 1 月 25 日&lt;/strong&gt; – Wiz 研究报告安全发现给 SAP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 1 月 27 日&lt;/strong&gt; – SAP 回复并分配了一个案件编号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 2 月 16 日&lt;/strong&gt; – SAP 修复了第一个漏洞并旋转了相关的秘密&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 2 月 28 日&lt;/strong&gt; – Wiz 研究绕过补丁使用 2 个新漏洞，报告给 SAP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 5 月 15 日&lt;/strong&gt; – SAP 部署修复了所有报告的漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 7 月 17 日&lt;/strong&gt; – 公开披露&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;保持联系&#34;&gt;保持联系！&lt;/h2&gt;
&lt;p&gt;嗨，我们是 Wiz 研究团队的 Hillai Ben-Sasson（&lt;a href=&#34;https://twitter.com/hillai&#34; title=&#34;@hillai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hillai&lt;/a&gt;），Shir Tamari（&lt;a href=&#34;https://twitter.com/shirtamari&#34; title=&#34;@shirtamari&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@shirtamari&lt;/a&gt;），Nir Ohfeld（&lt;a href=&#34;https://twitter.com/nirohfeld&#34; title=&#34;@nirohfeld&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nirohfeld&lt;/a&gt;），Sagi Tzadik（&lt;a href=&#34;https://twitter.com/sagitz_&#34; title=&#34;@sagitz_&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sagitz_&lt;/a&gt;) 和 Ronen Shustin（&lt;a href=&#34;https://twitter.com/ronenshh&#34; title=&#34;@ronenshh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ronenshh&lt;/a&gt;）。我们是一群资深白帽黑客，我们的目标是让云成为每个人更安全的地方。我们主要关注在云中找到新的攻击向量并揭露云供应商的隔离问题。&lt;/p&gt;
&lt;p&gt;我们很想听听您的意见！欢迎通过 Twitter 或电子邮件与我们联系：&lt;a href=&#34;mailto:research@wiz.io&#34; title=&#34;research@wiz.io&#34;&gt;research@wiz.io&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Istio 和 Keycloak 实现身份验证和授权</title>
      <link>https://jimmysong.io/trans/istio-keycloak-authentication-authorization/</link>
      <pubDate>Tue, 16 Jul 2024 12:11:10 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/istio-keycloak-authentication-authorization/</guid>
      <description>
        
        
        &lt;p&gt;在本指南中，我们将探讨如何利用 Istio 和 Keycloak 实现身份验证和授权。目标是简化开发流程，使开发者可以专注于核心任务，而不需要担心身份验证和授权问题。我们将通过实际示例和有效的示例代码，逐步讲解此过程。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/auth_huf4db5f29dba5074c5622c29e2b27fc18_111192_1220x546_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/auth.png&#34; data-img=&#34;/trans/istio-keycloak-authentication-authorization/auth.png&#34; data-width=&#34;1220&#34; data-height=&#34;546&#34; alt=&#34;image&#34; data-caption=&#34;网格&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;网格&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;keycloak-介绍&#34;&gt;Keycloak 介绍&lt;/h2&gt;
&lt;p&gt;Keycloak 是一个开源的身份及访问管理解决方案，提供单点登录（SSO）功能，允许用户一次认证后，使用单一凭证访问多个应用程序和服务。我特别印象深刻的一个功能是 Keycloak 的开发流程简化能力，它支持集成自定义主题，例如登录页面。在这个场景中，我们已将 Keycloak 部署在同一个 Kubernetes 集群内。&lt;/p&gt;
&lt;p&gt;以下是我们用于构建自定义 Keycloak 镜像的 Dockerfile。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM quay.io/keycloak/keycloak:24.0.3
COPY ./ex-offenders-theme /opt/keycloak/themes/ex-offenders-theme
COPY ./providers/create-account-custom-spi.jar /opt/keycloak/providers/create-account-custom-spi.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用以下部署清单来部署 Keycloak。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;automountServiceAccountToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;eocontainerregistry.azurecr.io/keycloak:v1.8.6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# {&amp;#34;$imagepolicy&amp;#34;: &amp;#34;flux-system:keycloak&amp;#34;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KEYCLOAK_ADMIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KEYCLOAK_ADMIN_PASSWORD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;admin-password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KC_HOSTNAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auth.ex-offenders.co.uk&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KC_PROXY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;edge&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KC_DB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KC_DB_URL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;jdbc:mysql://keycloakdb-keycloakdb-mysql.keycloakdb.svc.cluster.local:3306/keycloakdb&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KC_DB_USERNAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;keycloak-user&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jgroups.dns.query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;KC_DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keycloak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;db-password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jgroups&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7600&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;acr-secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，在清单文件中提到的 FluxCD &lt;code&gt;imagepolicy&lt;/code&gt; 引用。借助此功能，我们可以在镜像库中有新镜像可用时自动化部署。&lt;/p&gt;
&lt;h2 id=&#34;istio-介绍&#34;&gt;Istio 介绍&lt;/h2&gt;
&lt;p&gt;Istio 是一个开源的服务网格平台，旨在管理微服务的通信和数据共享。它提供了多种功能，以提升微服务应用的可观测性、安全性和管理能力。我们将很快讨论如何配置 Istio。&lt;/p&gt;
&lt;h2 id=&#34;fastapi-介绍&#34;&gt;FastAPI 介绍&lt;/h2&gt;
&lt;p&gt;FastAPI 是一个现代的 Python 框架，迅速获得了广泛的流行。它设计用于快速开发并最大化开发者体验。在这个示例中，我们将使用两个版本的 job API（&lt;a href=&#34;https://github.com/ex-offenders/job-service-v1&#34; title=&#34;V1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V1&lt;/a&gt;, &lt;a href=&#34;https://github.com/ex-offenders/job-service-v2&#34; title=&#34;V2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V2&lt;/a&gt;）编写于 FastAPI。这个 API 使用 SQLModel 库与后端数据库进行交互，结合了 SQLAlchemy 和 Pydantic 的功能。&lt;/p&gt;
&lt;p&gt;SQLModel 是由与 FastAPI 相同的作者开发的。&lt;/p&gt;
&lt;h2 id=&#34;部署无认证与授权的-job-service-微服务&#34;&gt;部署无认证与授权的 job-service 微服务&lt;/h2&gt;
&lt;p&gt;让我们从更简单的事情开始：一个没有任何认证和授权的 job 微服务。&lt;/p&gt;
&lt;p&gt;这是 job-service v1 和 job-service v2 的部署清单，均在“job-service”命名空间运行。注意每个部署清单中的版本标签。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;automountServiceAccountToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;eocontainerregistry.azurecr.io/job-service:v1.0.3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# {&amp;#34;$imagepolicy&amp;#34;: &amp;#34;flux-system:job-service-v1&amp;#34;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_HOST&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;keycloakdb-keycloakdb-mysql.keycloakdb.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;db-password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_PORT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3306&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_USER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;job-service&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_NAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;job-service&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;64Mi&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;50m&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;acr-secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;automountServiceAccountToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;eocontainerregistry.azurecr.io/job-service-v2:v1.1.3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# {&amp;#34;$imagepolicy&amp;#34;: &amp;#34;flux-system:job-service-v2&amp;#34;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_HOST&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;keycloakdb-keycloakdb-mysql.keycloakdb.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;db-password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_PORT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3306&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_USER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;job-service&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DB_NAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;job-service&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;64Mi&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;50m&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;acr-secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还有一个 ClusterIP 服务，选择器为“app=job-service”。这个配置确保了 job-service v1 和 job-service v2 都被添加为这个服务的端点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kustomize.toolkit.fluxcd.io/name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;flux-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kustomize.toolkit.fluxcd.io/namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;flux-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，我们使用同一个数据库实例为 Keycloak 和不同版本的 job-service。然而，各自的用户被限制不得访问对方的数据库。尽管共享同一个实例，这种设置有效地模拟了微服务架构。&lt;/p&gt;
&lt;p&gt;首先，我们希望将所有流量独占路由到 v1 部署。（如果你查看 job-service v1，你会看到它编写时没有包括任何认证或授权代码。我们计划在接下来的步骤中使用 Istio 实现这些功能。）&lt;/p&gt;
&lt;p&gt;为此，我们创建了如下的虚拟服务和目标规则。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.ex-offenders.co.uk&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;ex-offenders.co.uk&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;job-service.job-service.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;istio-system/gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/jobs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/jobcategories&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service.job-service.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service.job-service.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: job-service
  namespace: job-service
spec:
  host: job-service.job-service.svc.cluster.local
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，在网关部分下，我们指定了我们的入口网关和“mesh”。这是因为我们期望来自外部网关和集群内其他微服务的流量。观察我们如何将 100% 的流量定向到 v1 部署。&lt;/p&gt;
&lt;p&gt;下面是 Istio 网关资源。它处理目标为 ex-offenders.co.uk 域的流量。此外，我们使用 cert-manager 将 Let&amp;rsquo;s Encrypt TLS 证书附加到网关。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIMPLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;credentialName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ex-offenders-tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.ex-offenders.co.uk&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;ex-offenders.co.uk&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;auth.ex-offenders.co.uk&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以使用 Kiali 仪表板来验证我们的路由配置。注意，&lt;code&gt;job-service&lt;/code&gt; 连接到同一个 &lt;code&gt;keycloakdb&lt;/code&gt; MySQL 实例。但实际上，&lt;code&gt;job-service&lt;/code&gt; 只能访问实例内的特定 &lt;code&gt;job-service&lt;/code&gt; 数据库。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/kiali_hu10dab466de327c895a2627bf51cf9ead_64903_1250x418_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/kiali.png&#34; data-img=&#34;/trans/istio-keycloak-authentication-authorization/kiali.png&#34; data-width=&#34;1250&#34; data-height=&#34;418&#34; alt=&#34;image&#34; data-caption=&#34;路由&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;路由&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;现在我们准备进行一些测试。&lt;/p&gt;
&lt;h3 id=&#34;创建新的-job-类别&#34;&gt;创建新的 job 类别&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobcategories/&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Information Technology&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Information Technology&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:17&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建新-job&#34;&gt;创建新 job&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobs/&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;title&amp;#34;: &amp;#34;Software Engineer&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;description&amp;#34;: &amp;#34;Software Engineer with 2 years of experience&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;owner_id&amp;#34;: &amp;#34;5690cc29-5008-4a81-8f08-db92e01d6d44&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;category_id&amp;#34;: 17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer with 2 years of experience&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;owner_id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;5690cc29-5008-4a81-8f08-db92e01d6d44&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;category_id&amp;#34;&lt;/span&gt;:17,&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;f19e68da-e40a-4954-9dbf-6dfaf1f7f4d4&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-id-获取-job-类别&#34;&gt;通过 ID 获取 job 类别&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobcategories/17&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Information Technology&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:17&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-id-获取-job&#34;&gt;通过 ID 获取 job&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobs/bff285f6-34f6-4c5f-9619-2e860bec2d87&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer with 2 years of experience&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;owner_id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;5690cc29-5008-4a81-8f08-db92e01d6d44&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;category_id&amp;#34;&lt;/span&gt;:17,&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;bff285f6-34f6-4c5f-9619-2e860bec2d87&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如您所见，这些端点没有身份验证或授权。任何人都可以创建、更新、删除或检索 job 和 job 类别。&lt;/p&gt;
&lt;p&gt;请注意，我使用与 FastAPI 集成的 Swagger 生成了样本 curl 请求。&lt;/p&gt;
&lt;p&gt;另请注意，当创建新 job 时，我们手动传递了 &lt;code&gt;owner_id&lt;/code&gt;。理想&lt;/p&gt;
&lt;p&gt;情况下，这应该是已登录用户的用户 ID。我们将在讨论 job-service v2 时进一步深入探讨这个问题。&lt;/p&gt;
&lt;h2 id=&#34;使用-istio-实现认证&#34;&gt;使用 Istio 实现认证&lt;/h2&gt;
&lt;p&gt;让我们开始保护我们的端点。&lt;/p&gt;
&lt;p&gt;首先，我们添加 RequestAuthentication 资源，定义对 job 负载支持的请求认证。这个配置确保 Istio 拒绝任何具有无效认证信息的请求。下面，我们定义了我们的 Keycloak 发行者 URL 和公开证书 URL，以便 Istio 验证令牌签名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RequestAuthentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jwtRules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://auth.ex-offenders.co.uk/realms/ex-offenders&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jwksUri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://auth.ex-offenders.co.uk/realms/ex-offenders/protocol/openid-connect/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;forwardOriginalToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，我们设定了“forwardOriginalToken”: true，因为我们需要以“Authorization: Bearer”格式将令牌传递给后端服务。您还可以使用以下代码片段将令牌作为“jwt_parsed”键的值传递给后端服务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jwtRules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://auth.ex-offenders.co.uk/realms/ex-offenders&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jwksUri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://auth.ex-offenders.co.uk/realms/ex-offenders/protocol/openid-connect/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;outputPayloadToHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jwt-parsed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，RequestAuthentication 将拒绝任何带有无效令牌的请求。然而，没有任何认证信息的请求仍然会被接受，但它们不会有一个经过认证的身份。为了处理这些情况，除了 RequestAuthentication 外，我们需要添加授权政策来拒绝缺少认证身份的请求。因此，我们按如下方式添加一个授权策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requestPrincipals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATCH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/jobs*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATCH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/jobcategories*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，上述 AuthorizationPolicy 允许任何人无限制地访问 GET 方法。然而，对 job 和 jobcategory 端点的任何其他方法都需要认证。&lt;/p&gt;
&lt;p&gt;让我们测试一些端点：&lt;/p&gt;
&lt;h3 id=&#34;创建新-job-1&#34;&gt;创建新 job&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobs/&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;title&amp;#34;: &amp;#34;Software Engineer II&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;description&amp;#34;: &amp;#34;Software Engineer with 2 years of experience&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;owner_id&amp;#34;: &amp;#34;5690cc29-5008-4a81-8f08-db92e01d6d44&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;category_id&amp;#34;: 17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RBAC: access denied
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-id-获取-job-1&#34;&gt;通过 ID 获取 job&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobs/bff285f6-34f6-4c5f-9619-2e860bec2d87&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer with 2 years of experience&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;owner_id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;5690cc29-5008-4a81-8f08-db92e01d6d44&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;category_id&amp;#34;&lt;/span&gt;:17,&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;bff285f6-34f6-4c5f-9619-2e860bec2d87&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建新的-job-类别-1&#34;&gt;创建新的 job 类别&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobcategories/&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Computer Science&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RBAC: access denied
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-id-获取-job-类别-1&#34;&gt;通过 ID 获取 job 类别&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobcategories/17&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Information Technology&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:17&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如观察到的，我们可以在没有认证的情况下检索信息。然而，添加、修改或删除条目需要认证。&lt;/p&gt;
&lt;p&gt;接下来，让我们通过调用 Keycloak 令牌 URL 生成令牌，并使用它来执行添加、修改或删除操作：&lt;/p&gt;
&lt;h3 id=&#34;生成令牌&#34;&gt;生成令牌&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://auth.ex-offenders.co.uk/realms/ex-offenders/protocol/openid-connect/token&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data-urlencode &lt;span class=&#34;s1&#34;&gt;&amp;#39;grant_type=password&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data-urlencode &lt;span class=&#34;s1&#34;&gt;&amp;#39;client_id=ex-offenders-platform&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data-urlencode &lt;span class=&#34;s1&#34;&gt;&amp;#39;username=&amp;lt;username&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data-urlencode &lt;span class=&#34;s1&#34;&gt;&amp;#39;password=&amp;lt;password&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将返回一个访问令牌，我们可以用它进行后续请求。&lt;/p&gt;
&lt;h3 id=&#34;创建新-job-2&#34;&gt;创建新 job&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobs/&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Authorization: Bearer &amp;lt;token&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;title&amp;#34;: &amp;#34;Software Engineer II&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;description&amp;#34;: &amp;#34;Software Engineer with 2 years of experience&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;owner_id&amp;#34;: &amp;#34;5690cc29-5008-4a81-8f08-db92e01d6d44&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;category_id&amp;#34;: 17
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer II&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;Software Engineer with 2 years of experience&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;owner_id&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5690cc29-5008-4a81-8f08-db92e01d6d44&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;category_id&amp;#34;&lt;/span&gt;: 17,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;571c9ce6-566f-4e57-a780-9af5275ce5ef&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如所示，经过认证的用户能够成功地添加、修改或删除 job 和 job 类别。&lt;/p&gt;
&lt;h2 id=&#34;使用-istio-实现授权&#34;&gt;使用 Istio 实现授权&lt;/h2&gt;
&lt;p&gt;在这一点上，我们已经配置了认证。就 job 类别而言，我们不预期数据库中存在大量类别。有理由维持有限数量的 job 类别，并将创建、修改和删除权限限制给管理员用户。&lt;/p&gt;
&lt;p&gt;当前，任何具有有效认证的用户都可以修改 job 类别。让我们看看如何实现授权。&lt;/p&gt;
&lt;p&gt;我们修改授权政策，以确保只有拥有管理员角色的用户可以修改 job 类别。或者，如果您有更复杂的用户层次结构，您也可以使用“组”。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requestPrincipals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATCH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/jobs*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requestPrincipals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request.auth.claims[realm_access][roles]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATCH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/jobcategories*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以通过导航到我们使用的 Keycloak 领域下的“Realm Roles”来创建管理员角色。之后，我们前往要分配管理员角色的相应用户，点击“Role Mapping”标签，并将用户添加到新创建的“admin”角色。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/realm-roles_huab337e00b507d0b3d144ec5da58e4b15_28676_1520x265_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/realm-roles.png&#34; data-img=&#34;/trans/istio-keycloak-authentication-authorization/realm-roles.png&#34; data-width=&#34;1520&#34; data-height=&#34;265&#34; alt=&#34;image&#34; data-caption=&#34;领域角色&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;领域角色&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/role-mapping_hu2374fc855d93d6586dd580ce06b0d329_22553_1104x231_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/role-mapping.png&#34; data-img=&#34;/trans/istio-keycloak-authentication-authorization/role-mapping.png&#34; data-width=&#34;1104&#34; data-height=&#34;231&#34; alt=&#34;image&#34; data-caption=&#34;角色映射&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;角色映射&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;创建-job-类别---普通用户&#34;&gt;创建 job 类别 - 普通用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobcategories/&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Authorization: Bearer &amp;lt;token&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Research&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RBAC: access denied
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建-job-类别---管理员用户&#34;&gt;创建 job 类别 - 管理员用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl --location &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://ex-offenders.co.uk/api/jobcategories/&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--header &lt;span class=&#34;s1&#34;&gt;&amp;#39;Authorization: Bearer &amp;lt;token&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Research&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Research&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:20&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如我们所见，现在只有管理员用户可以创建/更新/删除 job 类别。&lt;/p&gt;
&lt;h2 id=&#34;微服务间的授权实施&#34;&gt;微服务间的授权实施&lt;/h2&gt;
&lt;p&gt;现在我们增加另一个名为“job-notification-service”的微服务。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/job-notification-service_hu5c2f0d5f000928b15d4b68f9e69890a4_120059_1356x537_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-keycloak-authentication-authorization/job-notification-service.png&#34; data-img=&#34;/trans/istio-keycloak-authentication-authorization/job-notification-service.png&#34; data-width=&#34;1356&#34; data-height=&#34;537&#34; alt=&#34;image&#34; data-caption=&#34;job 通知服务&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;job 通知服务&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这个服务不通过网关暴露，并且应仅被“job-service”访问。为实现这一点，我们可以添加以下授权政策。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-notification-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-notification-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;job-notification-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;job-service&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;principals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cluster.local/ns/job-service/sa/job-service&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;总结来说，我们使用 Istio 和 Keycloak 实现了对我们的微服务的认证和授权，确保了资源的安全访问。我们配置了基于角色和用户身份的访问控制政策，增强了我们应用的整体安全姿态。&lt;/p&gt;
&lt;p&gt;欢迎您提供任何改进建议、可能忽略的方面或增强本文档的建议。&lt;/p&gt;
&lt;p&gt;注：本页面是 Cloud Agnostic Platform 指南的一部分。点击&lt;a href=&#34;https://github.com/ex-offenders/Cloud-Agnostic-Startup-Platform/tree/main&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;访问主页。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>你可能不需要微服务</title>
      <link>https://jimmysong.io/trans/you-probably-dont-need-microservices/</link>
      <pubDate>Mon, 15 Jul 2024 11:17:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/you-probably-dont-need-microservices/</guid>
      <description>
        
        
        &lt;p&gt;撰写这篇博客非常有趣，虽然它可能不受某些人欢迎，但这是一个必须讨论的话题。&lt;/p&gt;
&lt;p&gt;亲爱的开发者朋友们，我们需要开诚布公地讨论一下微服务以及某些不适宜的使用场景。这个过程可能不会轻松，但我们必须进行这样的探讨，否则我们无法取得成功。&lt;/p&gt;
&lt;p&gt;如今，微服务极为流行，它是一种优秀的架构风格，有助于扩展系统和组织架构。许多成功的公司都在使用微服务（例如 Netflix、Spotify 等），因此，大多数公司正在使用或计划使用微服务并不令人意外。然而，一些公司忽视了它带来的额外成本。&lt;/p&gt;
&lt;p&gt;在深入讨论之前，让我分享一下我与微服务的经历。&lt;/p&gt;
&lt;h2 id=&#34;起始---是微服务吗&#34;&gt;起始 - 是微服务吗？&lt;/h2&gt;
&lt;p&gt;2012 年，在我当时的公司，我们面临一个挑战：如何使公司扩展到数千名工程师和增加 1000 倍的交易量。这篇文章不关注招聘、入职等方面，而是关注架构。&lt;/p&gt;
&lt;p&gt;当时我在阅读《Scalability Rules: 50 Principles for Scaling Web Sites》，这本书介绍了 AKF Scale Cube。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/you-probably-dont-need-microservices/f1_huf402617a1744efd6a2665cb9be75ebf4_66467_445x305_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/you-probably-dont-need-microservices/f1.jpg&#34; data-img=&#34;/trans/you-probably-dont-need-microservices/f1.jpg&#34; data-width=&#34;445&#34; data-height=&#34;305&#34; alt=&#34;image&#34; data-caption=&#34;来自《Scalability Rules: 50 Principles for Scaling Web Sites》的 AKF Scale Cube&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;来自《Scalability Rules: 50 Principles for Scaling Web Sites》的 AKF Scale Cube&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我发现这个模型非常容易理解。因此，我用它来向其他人解释为什么我们需要在生产环境中运行不同的二进制文件。搜索模块的流量模式与购物车模块的流量模式完全不同。将这些组件分开是有道理的。此外，这也允许我们拥有多个独立、自主的团队。这将有助于我们面对公司扩大到数千名工程师的挑战。&lt;/p&gt;
&lt;p&gt;当时我们并没有称之为微服务，只是服务。&amp;ldquo;微服务&amp;quot;这个术语还没有出现在我们的雷达上。在这一过程中，我们犯了很多错误。但从问题出发做出的决定，回顾起来，是正确的。&lt;/p&gt;
&lt;p&gt;因此，你现在知道我对这个话题相当熟悉，而且在这 10 多年中，我在实施众多服务和进行大量重新架构方面有过很多经验。&lt;/p&gt;
&lt;h2 id=&#34;那么问题出在哪里&#34;&gt;那么，问题出在哪里？&lt;/h2&gt;
&lt;p&gt;从本质上说，微服务没有错。单体架构也没有错。但我们的行业似乎忘记了没有银弹。有时候，某些选择实际上可能会带来伤害。不相信？让我给你举几个例子。&lt;/p&gt;
&lt;h4 id=&#34;示例-1---你得到一个服务他也得到一个服务大家都得到一个服务&#34;&gt;示例 1 - 你得到一个服务，他也得到一个服务，大家都得到一个服务&lt;/h4&gt;
&lt;p&gt;我喜欢与行业中的其他人交流，了解他们正在做什么并分享我的经验。这些对话是拓展人脉和从聪明人那里获得洞察的好方法。&lt;/p&gt;
&lt;p&gt;我记得特别是和一家拥有约 200 人技术部门的创业公司的两位工程总监的一次对话。他们是令人难以置信的人物，非常聪明，也很好交流。&lt;/p&gt;
&lt;p&gt;我通常喜欢深入了解技术领域，了解公司正在做什么以及主要的挑战是什么。因此，不出所料，我询问他们是否可以告诉我更多关于架构和团队组织方式的信息。&lt;/p&gt;
&lt;p&gt;其中一位说他们在生产中使用了一个复杂的微服务系统。然后说他们在生产中运行了大约 350 个微服务。他们说的最大挑战是确保所有这些微服务得到维护——过时的依赖项，过时的运行时版本，对一些服务的内部了解不足等。&lt;/p&gt;
&lt;p&gt;公司的微服务数量超过了开发人员数量。在那些为客户提供许多功能的以产品为中心的公司中，跟上所有这些微服务的步伐是很困难的。&lt;/p&gt;
&lt;h4 id=&#34;示例-2---你变我也变大家都变&#34;&gt;示例 2 - 你变我也变，大家都变&lt;/h4&gt;
&lt;p&gt;低耦合和高内聚很难做到正确。在微服务架构中做到这一点更是难上加难。你可能最终会得到一些非常小的微服务（也称为纳米服务），它们耦合紧密，内聚性低。&lt;/p&gt;
&lt;p&gt;我记得在之前的公司中，一个“有界上下文”有许多小服务，任何变更都需要许多团队共同努力才能实现。更糟糕的是，性能非常差。&lt;/p&gt;
&lt;p&gt;这个例子非常好，因为在此基础上，团队希望建立另一个服务来整合所有信息以提高性能。将小服务合并以增加内聚力的想法被认为是不好的，因为它看起来，我引用一下，&amp;ldquo;像一个单体&amp;rdquo;。&lt;/p&gt;
&lt;h4 id=&#34;示例-3---一切都好直到不好&#34;&gt;示例 3 - 一切都好，直到不好&lt;/h4&gt;
&lt;p&gt;随着技术行业裁员的增多，我越来越多地听到公司在大幅裁员后还拥有太多服务的情况。&lt;/p&gt;
&lt;p&gt;这可能不是一个公平的例子，因为谁能猜到公司会开始裁减其技术部门的 40% 或 60% 呢？问题是，简单是我们行业中最难的事情之一。但我们应该力求将事物保持在尽可能简单的状态，但又不能过于简单。&lt;/p&gt;
&lt;p&gt;拥有简单系统的公司在生产中拥有更多的灵活性。他们可以削减成本和减少人员而不必过多担心运营负担。&lt;/p&gt;
&lt;h4 id=&#34;示例-4---让我们使用微服务开始我们的创业项目&#34;&gt;示例 4 - 让我们使用微服务开始我们的创业项目&lt;/h4&gt;
&lt;p&gt;这将是最后一个例子，我保证。这实际上来自一个我正在努力寻找的讲座——如果你知道我所指的是哪个讲座，请在评论中告诉我，以便我可以给予适当的致谢。&lt;/p&gt;
&lt;p&gt;绿地项目很棒，对吧？它就像一块等待创意艺术家开始绘画的空白画布。在这种情况下，艺术家选择绘制一幅多彩的画作。艺术家挑选了所有主要颜色，Ruby、Golang 和 Java。他们将这些颜色与一些 Postgresql、Elasticsearch 和 Cassandra 混合在一起。&lt;/p&gt;
&lt;p&gt;这幅画？如果他们能找到时间完成的话，它本可以成为一幅毕加索作品。&lt;/p&gt;
&lt;p&gt;是否总是不好的？&lt;/p&gt;
&lt;p&gt;我并不是说它不好。我相信 Jet.com 实际上是从使用微服务开始的，并且成功地被沃尔玛收购。我只是说我们作为工程师，需要进行批判性思考并选择最佳方案。&lt;/p&gt;
&lt;h2 id=&#34;好的但为什么&#34;&gt;好的，但为什么？&lt;/h2&gt;
&lt;p&gt;有些人读到这里可能会想，“这是技能问题”。其实不是。在前两个例子中，我认识涉及的人。他们都是非常聪明的优秀工程师。我相信其他例子中的人也同样聪明。&lt;/p&gt;
&lt;p&gt;我们可能已经内化了微服务的思维方式。这也许就是为什么我们看到如此多的小团队采用微服务的原因。这种思维方式深深地植入了我们的大脑。&lt;/p&gt;
&lt;p&gt;零利率政策 (ZIRP) 也可能是罪魁祸首。ZIRP 可能确实促进了这一现象。公司希望增长，并且聘请大量开发人员成为大多数公司的标准选择。&lt;/p&gt;
&lt;p&gt;在后 ZIRP 时代，我预期人们会更加意识到微服务的隐藏成本。即使微服务是解决手头问题的好方法，管理层可能也会更加不愿采用它。&lt;/p&gt;
&lt;h2 id=&#34;你还有时间&#34;&gt;你还有时间&lt;/h2&gt;
&lt;p&gt;如果上述任何例子反映了你的现实，请不要担心。软件的好处是你几乎总是可以改变它。如果你将其视为一个“问题”，试着将“问题”一词替换为“机会”——就像笑话中说的，我有一个喝酒的“机会”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你是否处于服务数量影响你创新能力的位置？&lt;/strong&gt; 制定一个策略，让你的公司可以减少运营开销。也许你可以放松对可靠性的要求，或者你可以投资简化系统架构，以便在未来拥有更多的创新能力。&lt;/p&gt;
&lt;p&gt;第二个例子中的团队就是这样做的。他们提出了一个以节约成本和改善客户体验为重点的合并服务的策略。利益相关者非常满意。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你是否正在创办一家公司？&lt;/strong&gt; 如果你正在创办一家公司并考虑使用微服务，请撰写一份设计文档，解释什么挑战，为什么选择微服务，以及你考虑过的替代方案。如果你有信任的人，分享这份设计文档并征求他们的反馈——如果你可以合法地这样做的话。这可能有助于澄清你的思路并清晰地了解微服务是否适合你的创业项目的正确架构风格。&lt;/p&gt;
&lt;p&gt;微服务很棒，但它增加了你的系统和组织的复杂性。工作方式发生变化，架构变得更加复杂，如果你正从单体架构迁移到微服务，要理解这将需要多年时间。你需要在急于采用微服务之前停下来思考，它们将如何帮助你，又将如何伤害你&amp;hellip;&lt;/p&gt;
&lt;p&gt;而且相信我，它会同时带来伤害和喜悦，即使它是最佳的架构风格。就像生活中的每一件好事一样。&lt;/p&gt;
&lt;p&gt;所以，亲爱的开发者们，我之所以开始这场对话，是因为我关心。我关心我们行业的未来。我希望我们的行业能长久、持续、可持续地建立能抵御时间考验的软件。我希望我们的行业能做出务实的决策，将技术作为手段，而不是目的。&lt;/p&gt;
&lt;p&gt;有时候微服务很棒……但你可能并不需要微服务。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>了解 Llama 3：迄今最强大的免费开源大模型从概念到使用</title>
      <link>https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/</link>
      <pubDate>Mon, 01 Jul 2024 09:33:23 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/</guid>
      <description>
        
        
        &lt;p&gt;Meta 公司最近发布了 &lt;a href=&#34;https://ai.meta.com/blog/meta-llama-3/&#34; title=&#34;Llama 3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Llama 3&lt;/a&gt;，这是其最新一代尖端开源大型语言模型（LLM）。基于其前身的基础之上，Llama 3 旨在提升 Llama 2 作为与 ChatGPT 竞争的重要开源产品的能力，如文章 &lt;a href=&#34;https://www.unite.ai/llama-2-a-deep-dive-into-the-open-source-challenger-to-chatgpt/&#34; title=&#34;Llama 2: 深入探索开源挑战者 ChatGPT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Llama 2: 深入探索开源挑战者 ChatGPT&lt;/a&gt; 中全面回顾的那样。&lt;/p&gt;
&lt;p&gt;在本文中，我们将讨论 Llama 3 背后的核心概念，探索其创新架构和训练过程，并提供关于如何负责任地访问、使用和部署这一开创性模型的实际指导。无论你是研究人员、开发者还是 AI 爱好者，这篇文章都将为你提供利用 Llama 3 为你的项目和应用赋能的知识和资源。&lt;/p&gt;
&lt;h2 id=&#34;llama-的演变从-llama-2-到-llama-3&#34;&gt;Llama 的演变：从 Llama 2 到 Llama 3&lt;/h2&gt;
&lt;p&gt;Meta 的 CEO，Mark Zuckerberg，在 &lt;a href=&#34;https://www.threads.net/@zuck/post/C56MFEKxl-x&#34; title=&#34;Threads.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Threads.net&lt;/a&gt; 上宣布了 Llama 3 的首次亮相，这是 Meta AI 开发的最新 AI 模型。这个尖端模型现在已开源，旨在提升 Meta 的各种产品，包括 Messenger 和 Instagram。Zuckerberg 强调，Llama 3 使 Meta AI 成为最先进的&lt;a href=&#34;https://about.fb.com/news/2024/04/meta-ai-assistant-built-with-llama-3/&#34; title=&#34;免费可用的 AI 助手&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;免费可用的 AI 助手&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在我们讨论 Llama 3 的具体细节之前，让我们简要回顾一下它的前身，Llama 2。Llama 2 于 2022 年推出，是开源 LLM 领域的一个重要里程碑，提供了一个强大而高效的模型，可以在消费者硬件上运行。&lt;/p&gt;
&lt;p&gt;然而，尽管 Llama 2 取得了显著的成就，但它也有其局限性。用户报告了一些问题，如错误拒绝（模型拒绝回答无害的提示）、有限的帮助性，以及在推理和代码生成等领域的改进空间。&lt;/p&gt;
&lt;p&gt;进入 Llama 3：Meta 对这些挑战和社区的反馈做出了回应。通过 Llama 3，Meta 设定了与当今市场上顶级专有模型相媲美的最佳开源模型的目标，同时也优先考虑了负责任的开发和部署实践。&lt;/p&gt;
&lt;h2 id=&#34;llama-3架构和训练&#34;&gt;Llama 3：架构和训练&lt;/h2&gt;
&lt;p&gt;Llama 3 的一项关键创新是其分词器，特点是显著扩展的词汇表，&lt;strong&gt;128,256 个 token&lt;/strong&gt;（从 Llama 2 的 32,000 个增加）。这更大的词汇表允许更有效的文本编码，无论是输入还是输出，可能导致更强的多语言能力和整体性能的提升。&lt;/p&gt;
&lt;p&gt;Llama 3 还采用了&lt;strong&gt;分组查询注意力&lt;/strong&gt;（GQA），这是一种提高可扩展性的有效表示技术，有助于模型更有效地处理更长的上下文。&lt;strong&gt;8B&lt;/strong&gt; 版本的 Llama 3 使用了 GQA，而&lt;strong&gt;8B&lt;/strong&gt; 和 &lt;strong&gt;70B&lt;/strong&gt; 模型都可以处理长达 &lt;strong&gt;8,192 个 token&lt;/strong&gt;的序列。&lt;/p&gt;
&lt;h3 id=&#34;训练数据和扩展&#34;&gt;训练数据和扩展&lt;/h3&gt;
&lt;p&gt;用于 Llama 3 的训练数据是其性能提升的关键因素。Meta 精心策划了一个包含超过 &lt;strong&gt;15 万亿&lt;/strong&gt; token 的庞大数据集，来自公开可获得的在线来源，是用于 Llama 2 的数据集的七倍。这个数据集还包括了超过 5% 的高质量非英语数据，涵盖了 &lt;strong&gt;30 多种语言&lt;/strong&gt;，为未来的多语言应用做准备。&lt;/p&gt;
&lt;p&gt;为了确保数据质量，Meta 采用了先进的过滤技术，包括启发式过滤器、NSFW 过滤器、语义去重和训练在 Llama 2 上预测数据质量的文本分类器。团队还进行了广泛的实验，以确定预训练的最佳数据来源组合，确保 Llama 3 在广泛的用例上表现良好，包括琐事、STEM、编码和历史知识。&lt;/p&gt;
&lt;p&gt;放大预训练是 Llama 3 开发的另一个关键方面。Meta 开发了缩放法则，使他们能够在实际训练之前预测其最大模型在关键任务上的性能，如代码生成。这些信息指导了关于数据组合和计算分配的决策，最终导致了更有效和有效的培训。&lt;/p&gt;
&lt;p&gt;Llama 3 最大的模型是在两个定制构建的 24,000 GPU 集群上训练的，利用数据并行、模型并行和流水线并行技术的组合。Meta 的先进训练堆栈自动化了错误检测、处理和维护，最大化了 GPU 的运行时间，使训练效率比 Llama 2 提高了大约三倍。&lt;/p&gt;
&lt;h3 id=&#34;指令微调和性能&#34;&gt;指令微调和性能&lt;/h3&gt;
&lt;p&gt;为了充分发挥 Llama 3 在聊天和对话应用中的潜力，Meta 创新了其指令微调方法。其方法结合了&lt;strong&gt;监督微调&lt;/strong&gt;（SFT）、拒绝抽样、&lt;strong&gt;近端政策优化&lt;/strong&gt;（PPO）和&lt;strong&gt;直接偏好优化&lt;/strong&gt;（DPO）。&lt;/p&gt;
&lt;p&gt;SFT 中使用的提示质量和在 PPO 和 DPO 中使用的偏好排名在对齐模型的性能中起着关键作用。Meta 的团队精心策划了这些数据，并对由人类注释者提供的注释进行了多轮质量保证。&lt;/p&gt;
&lt;p&gt;通过 PPO 和 DPO 对偏好排名进行训练还显著提高了 Llama 3 在推理和编码任务上的性能。Meta 发现，即使模型在直接回答推理问题时遇到困难，它仍然可能产生正确的推理迹象。通过偏好排名的训练，模型学会了如何从这些迹象中选择正确的答案。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f2_hu0ed64c7710d5a8e9e31c16323192f52e_123898_773x628_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f2.jpg&#34; data-img=&#34;/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f2.jpg&#34; data-width=&#34;773&#34; data-height=&#34;628&#34; alt=&#34;image&#34; data-caption=&#34;对比结果&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;对比结果&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;成果显而易见：Llama 3 在常见的行业基准测试中表现优于许多可用的开源聊天模型，为 LLM 的 8B 和 70B 参数级别建立了新的最佳性能。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f3_hu720c322d4094c045205ccf5be14b2e50_108333_1022x628_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f3.png&#34; data-img=&#34;/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f3.png&#34; data-width=&#34;1022&#34; data-height=&#34;628&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;负责任的开发和安全考虑&#34;&gt;负责任的开发和安全考虑&lt;/h2&gt;
&lt;p&gt;在追求尖端性能的同时，Meta 也优先考虑了负责任的开发和部署实践，用于 Llama 3。该公司采用了系统级方法，将 Llama 3 模型视为更广泛生态系统的一部分，使开发者能够设计和定制模型以满足其特定用例和安全要求。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f4_huc088228df4f20f352a494ae050db7fa4_72555_1047x413_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f4.png&#34; data-img=&#34;/trans/everything-you-need-to-know-about-llama-3-most-powerful-open-source-model-yet-concepts-to-usage/f4.png&#34; data-width=&#34;1047&#34; data-height=&#34;413&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;Meta 进行了广泛的红队演习，执行了对抗评估，并实施了安全缓解技术，以降低其指令调优模型中的残余风险。然而，该公司承认可能仍会存在残余风险，并建议开发者在其特定用例的背景下评估这些风险。&lt;/p&gt;
&lt;p&gt;为支持负责任的部署，Meta 更新了其负责任使用指南，为开发者提供了一个全面的资源，以实施模型和系统级安全最佳实践，用于他们的应用。该指南涵盖了内容审查、风险评估和使用安全工具（如 Llama Guard 2 和 Code Shield）等主题。&lt;/p&gt;
&lt;p&gt;Llama Guard 2，基于 MLCommons 分类法构建，旨在对 LLM 输入（提示）和响应进行分类，检测可能被视为不安全或有害的内容。CyberSecEval 2 在其前身的基础上增加了措施，以防止模型的代码解释器被滥用、攻击性网络安全能力和对提示注入攻击的易感性。&lt;/p&gt;
&lt;p&gt;Code Shield 是 Llama 3 新推出的一个介绍，增加了推断时间的不安全代码过滤，减轻了不安全代码建议、代码解释器滥用和安全命令执行等风险。&lt;/p&gt;
&lt;h2 id=&#34;访问和使用-llama-3&#34;&gt;访问和使用 Llama 3&lt;/h2&gt;
&lt;p&gt;随着 Meta AI 的 Llama 3 发布，已推出了几种开源工具，可在各种操作系统上进行本地部署，包括 Mac、Windows 和 Linux。本节详细介绍了三个值得注意的工具：Ollama、Open WebUI 和 LM Studio，每个工具都提供了利用 Llama 3 功能的独特功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ollama&lt;/strong&gt;：适用于 Mac、Linux 和 Windows，&lt;a href=&#34;https://ollama.com/download&#34; title=&#34;Ollama&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ollama&lt;/a&gt; 简化了在个人计算机上操作 Llama 3 和其他大型语言模型的过程，即使是那些硬件较弱的设备也是如此。它包括一个包管理器，便于模型管理，并支持跨平台的下载和运行模型的命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open WebUI with Docker&lt;/strong&gt;：这个工具提供了一个用户友好的、基于 &lt;a href=&#34;https://docs.docker.com/desktop/&#34; title=&#34;Docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 的界面，兼容 Mac、Linux 和 Windows。它与 Ollama 注册表中的模型无缝集成，允许用户在本地 Web 界面内部署和交互，例如 Llama 3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LM Studio&lt;/strong&gt;：面向 Mac、Linux 和 Windows 的用户，&lt;a href=&#34;https://lmstudio.ai/&#34; title=&#34;LM Studio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LM Studio&lt;/a&gt; 支持一系列模型，基于 llama.cpp 项目构建。它提供了一个聊天界面，便于直接与各种模型进行交互，包括 Llama 3 8B Instruct 模型。&lt;/p&gt;
&lt;p&gt;这些工具确保用户可以在个人设备上高效利用 Llama 3，满足技术技能和需求的不同范围。每个平台都提供了设置和模型交互的分步过程，使先进的人工智能更加易于开发者和爱好者接触。&lt;/p&gt;
&lt;h2 id=&#34;大规模部署-llama-3&#34;&gt;大规模部署 Llama 3&lt;/h2&gt;
&lt;p&gt;除了直接提供模型权重外，Meta 还与各种云提供商、模型 API 服务和硬件平台合作，实现 Llama 3 的无缝部署。&lt;/p&gt;
&lt;p&gt;Llama 3 的一大优势是其改进的 token 效率，这要归功于新的分词器。基准测试显示，与 Llama 2 相比，Llama 3 需要的 token 减少了 &lt;strong&gt;15%&lt;/strong&gt;，从而实现了更快、更经济的推断。&lt;/p&gt;
&lt;p&gt;Grouped Query Attention (GQA) 的整合在 Llama 3 的 8B 版本中有助于保持与 Llama 2 的 7B 版本相当的推断效率，尽管参数数量增加了。&lt;/p&gt;
&lt;p&gt;为简化部署流程，Meta 提供了 Llama Recipes 代码库，其中包含开源代码和微调、部署、模型评估等示例。这个代码库为开发者提供了一个宝贵的资源，帮助他们利用 Llama 3 的能力来应用到他们的应用中。&lt;/p&gt;
&lt;p&gt;对于那些有兴趣探索 Llama 3 性能的人来说，Meta 已经将其最新模型整合到 Meta AI 中，这是一个以 Llama 3 技术构建的领先人工智能助手。用户可以通过各种 Meta 应用程序，如 Facebook、Instagram、WhatsApp、Messenger 和 Web 与 Meta AI 进行交互，以完成任务、学习、创造和与他们关心的事物建立联系。&lt;/p&gt;
&lt;h2 id=&#34;llama-3-接下来会怎样&#34;&gt;Llama 3 接下来会怎样？&lt;/h2&gt;
&lt;p&gt;尽管 8B 和 70B 模型标志着 Llama 3 发布的开始，但 Meta 对这款开创性 LLM 的未来有雄心勃勃的计划。&lt;/p&gt;
&lt;p&gt;在未来几个月，我们可以期待看到新功能的引入，包括多模态（能够处理和生成不同数据模态，如图像和视频）、多语言支持（支持多种语言）和更长的上下文窗口，以提高在需要广泛上下文的任务上的性能。&lt;/p&gt;
&lt;p&gt;此外，Meta 计划发布更大的模型大小，包括目前正在训练中的超过 4000 亿参数的模型，这些模型在性能和能力方面展现出了有前途的趋势。&lt;/p&gt;
&lt;p&gt;为了进一步推进该领域的发展，Meta 还将发布关于 Llama 3 的详细研究论文，与广泛的 AI 社区分享其发现和见解。&lt;/p&gt;
&lt;p&gt;作为即将推出的内容的预览，Meta 分享了一些其最大 LLM 模型在各种基准上的早期性能快照。尽管这些结果是基于早期检查点的，并且可能会发生变化，但它们提供了一个激动人心的展望，展示了 Llama 3 的未来潜力。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Llama 3 代表了开源大型语言模型演变的一个重要里程碑，推动了性能、能力和负责任开发实践的边界。凭借其创新架构、庞大的训练数据集和尖端的微调技术，Llama 3 为 LLM 的 8B 和 70B 参数级别建立了新的最佳性能基准。&lt;/p&gt;
&lt;p&gt;然而，Llama 3 不仅仅是一个强大的语言模型；它还体现了 Meta 致力于培养一个开放和负责任的 AI 生态系统的承诺。通过提供全面的资源、安全工具和最佳实践，Meta 授权开发者充分利用 Llama 3 的潜力，同时确保根据其特定用例和受众的需求实现负责任的部署。&lt;/p&gt;
&lt;p&gt;随着 Llama 3 之旅的继续，随着新的能力、模型大小和研究发现的出现，AI 社区热切期待从这款开创性 LLM 中涌现出的创新应用和突破。&lt;/p&gt;
&lt;p&gt;无论你是一名推动自然语言处理边界的研究人员、一名构建下一代智能应用的开发者还是对最新进展感到好奇的 AI 爱好者，Llama 3 都承诺成为你工具箱中的强大工具，开启新的大门并解锁一系列可能性。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istiod 架构详解</title>
      <link>https://jimmysong.io/trans/istiod-architecture/</link>
      <pubDate>Fri, 14 Jun 2024 11:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/istiod-architecture/</guid>
      <description>
        
        
        &lt;p&gt;本文档描述了 Istio 控制平面——Istiod 的高层架构。Istiod 是一个模块化的单体应用，涵盖了从证书签名、代理配置（XDS）、传统的 Kubernetes 控制器等多种功能。&lt;/p&gt;
&lt;h2 id=&#34;proxy-configuration&#34;&gt;代理配置&lt;/h2&gt;
&lt;p&gt;Istiod 的主要角色——以及大部分代码——是动态配置代理（Envoy sidecar、入口、gRPC、ztunnel 等）。这大致包括 3 个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置摄取（系统的输入）&lt;/li&gt;
&lt;li&gt;配置翻译&lt;/li&gt;
&lt;li&gt;配置服务（XDS）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;配置摄取&#34;&gt;配置摄取&lt;/h3&gt;
&lt;p&gt;Istio 从超过 20 种不同的资源类型读取，并将它们聚合在一起构建代理配置。这些资源可以来自 Kubernetes（通过观察）、文件或通过 xDS；尽管如此，Kubernetes 是最常用的。&lt;/p&gt;
&lt;p&gt;主要出于历史原因，摄取分为几个组件。&lt;/p&gt;
&lt;h4 id=&#34;configstore&#34;&gt;ConfigStore&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ConfigStore&lt;/code&gt; 读取多种资源，并通过标准接口（Get、List 等）暴露它们。这些类型被包装在通用的 &lt;code&gt;config.Config&lt;/code&gt; 结构中，与通常使用每种资源类型的 Kubernetes 客户端形成对比。最常见的是通过 &lt;code&gt;crdclient&lt;/code&gt; 包从 Kubernetes 读取。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
  
  
&lt;/figure&gt;
&lt;h4 id=&#34;ServiceDiscovery&#34;&gt;服务发现&lt;/h4&gt;
&lt;p&gt;另一个主要接口是 ServiceDiscovery。类似于 ConfigStore，它也是对多种资源进行聚合。然而，它不提供通用资源访问，而是预计算了多种服务导向的内部资源，如 &lt;code&gt;model.Service&lt;/code&gt; 和 &lt;code&gt;model.ServiceInstance&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这由两个控制器组成——一个由核心 Kubernetes 类型驱动（“Kube Controller”），一个由 Istio 类型驱动（“ServiceEntry 控制器”）。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
  
  
&lt;/figure&gt;
&lt;p&gt;大部分情况下这是相当直接的。然而，我们支持 &lt;code&gt;ServiceEntry&lt;/code&gt; 选择 &lt;code&gt;Pod&lt;/code&gt;，以及 &lt;code&gt;Service&lt;/code&gt; 选择 &lt;code&gt;WorkloadEntry&lt;/code&gt;，这导致跨控制器通信。&lt;/p&gt;
&lt;p&gt;注意：&lt;code&gt;Pods&lt;/code&gt; 不贡献给 Kube 控制器的 &lt;code&gt;ServiceInstances&lt;/code&gt; 是因为使用了 &lt;code&gt;Endpoints&lt;/code&gt;，它本身是从 Kubernetes 核心的 &lt;code&gt;Pod&lt;/code&gt; 派生的。&lt;/p&gt;
&lt;h4 id=&#34;pushcontext&#34;&gt;PushContext&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;PushContext&lt;/code&gt; 是当前全局状态（SotW）的一个不可变快照。它在每次配置推送时（下面会详细讨论）通常是部分地重新生成的。由于是快照，大多数查找都是无锁的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PushContext&lt;/code&gt; 是通过查询上述层构建的。对于一些简单的用例，这和存储类似于 &lt;code&gt;configstore.List(SomeType)&lt;/code&gt; 的东西一样简单；在这种情况下，与直接暴露 configstore 的唯一区别是要快照当前状态。在其他情况下，一些预计算和索引被计算出来，以便后续访问效率。&lt;/p&gt;
&lt;h4 id=&#34;端点&#34;&gt;端点&lt;/h4&gt;
&lt;p&gt;端点有一个优化的代码路径，因为它们是迄今为止更新最频繁的资源——在一个稳定的集群中，这通常是&lt;em&gt;唯一&lt;/em&gt;的变化，由扩缩容引起。&lt;/p&gt;
&lt;p&gt;因此，它们不经过 &lt;code&gt;PushContext&lt;/code&gt;，变化也不会触发 &lt;code&gt;PushContext&lt;/code&gt; 的重新计算。相反，当前状态是基于来自 &lt;code&gt;ServiceDiscovery&lt;/code&gt; 的事件增量计算的。&lt;/p&gt;
&lt;h4 id=&#34;结论&#34;&gt;结论&lt;/h4&gt;
&lt;p&gt;总体而言，配置摄取流程如下：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
  
  
&lt;/figure&gt;
&lt;h3 id=&#34;配置翻译&#34;&gt;配置翻译&lt;/h3&gt;
&lt;p&gt;配置翻译将上述输入转换为连接的 XDS 客户端（通常是 Envoy）消费的实际类型。这通过 &lt;code&gt;Generators&lt;/code&gt; 完成，这些生成器注册一个函数来构建给定类型。例如，有一个 &lt;code&gt;RouteGenerator&lt;/code&gt; 负责构建 &lt;code&gt;Routes&lt;/code&gt;。除了核心 Envoy XDS 类型外，还有一些自定义的 Istio 类型，例如我们用于 DNS 的 &lt;code&gt;NameTable&lt;/code&gt; 类型，以及调试接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Generators&lt;/code&gt; 的输入是 &lt;code&gt;Proxy&lt;/code&gt;（当前客户端的表示）、当前的 &lt;code&gt;PushContext&lt;/code&gt; 快照以及导致更改的配置更新列表。&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;Proxy&lt;/code&gt; 作为输入参数是重要的，并且与其他一些 XDS 实现的主要区别。我们无法在没有每个客户端信息的情况下静态翻译输入到 XDS。例如，我们依赖于客户端的标签来确定应用的政策集。虽然这是实现 Istio API 的必要条件，但它确实大大限制了性能。&lt;/p&gt;
&lt;h4 id=&#34;缓存&#34;&gt;缓存&lt;/h4&gt;
&lt;p&gt;配置翻译通常占用了 Istiod 的绝大部分资源使用，尤其是 protobuf 编码。因此，引入了缓存，存储给定资源的已编码 &lt;code&gt;protobuf.Any&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这种缓存依赖于声明所有输入到给定生成器作为缓存键的一部分。这极其容易出错，因为没有任何东西阻止生成器使用&lt;em&gt;不&lt;/em&gt;是键部分的输入。当这种情况发生时，不同的客户端将不确定地获得错误的配置。这种类型的错误在历史上导致了 CVE。&lt;/p&gt;
&lt;p&gt;有几种方法可以防止这些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只将缓存键本身传入到生成逻辑中，这样就不能使用其他未计入的输入。不幸的是，今天还没有任何生成器这样做。&lt;/li&gt;
&lt;li&gt;非常非常小心。&lt;/li&gt;
&lt;li&gt;缓存有一个内置测试，通过设置 &lt;code&gt;UNSAFE_PILOT_ENABLE_RUNTIME_ASSERTIONS=true&lt;/code&gt; 启用，该测试在 CI 中运行。如果任何键以不同的值写入，这将引发 panic。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;部分计算&#34;&gt;部分计算&lt;/h4&gt;
&lt;p&gt;与缓存一样，部分计算是确保我们不需要在每次更改时为每个代理构建（或发送）每个资源的关键性能优化。这将在配置服务部分中更详细讨论。&lt;/p&gt;
&lt;h3 id=&#34;配置服务&#34;&gt;配置服务&lt;/h3&gt;
&lt;p&gt;配置服务是实际接受代理客户端的层，这些客户端通过双向 gRPC 流连接，并为它们提供所需的配置。&lt;/p&gt;
&lt;p&gt;我们将有两种触发发送配置的方式——请求和推送。&lt;/p&gt;
&lt;h4 id=&#34;请求&#34;&gt;请求&lt;/h4&gt;
&lt;p&gt;来自客户端的请求特别要求一组资源。这可能是在新连接上请求初始资源集，或者来自新的依赖。例如，&lt;code&gt;Cluster X&lt;/code&gt; 的推送引用 &lt;code&gt;Endpoint Y&lt;/code&gt; 可能导致请求 &lt;code&gt;Endpoint Y&lt;/code&gt;（如果客户端尚未知道的话）。&lt;/p&gt;
&lt;p&gt;注意客户端实际上可以发送三种类型的消息——请求、对先前推送的 ACKs 和对先前推送的 NACKs。不幸的是，这些在 API 中没有清晰地区分，因此有一些逻辑来分解这些（&lt;code&gt;shouldRespond&lt;/code&gt;）。&lt;/p&gt;
&lt;h4 id=&#34;推送&#34;&gt;推送&lt;/h4&gt;
&lt;p&gt;当 Istiod 检测到需要某些配置更新时，会发生推送。这大致与请求的结果相同（新配置推送到客户端），只是由不同的来源触发。&lt;/p&gt;
&lt;p&gt;在配置摄取中描述的各种组件可以触发配置更新。这些被批量处理（&amp;ldquo;debounced&amp;rdquo;），以避免在连续多次更改时活动过度，并最终排队在推送队列中。&lt;/p&gt;
&lt;p&gt;推送队列大部分是一个正常的队列，但它有一些特殊逻辑来合并每个给定代理的推送请求。这导致每个代理有 0 或 1 个未完成的推送请求；如果有更多更新进来，现有的推送请求就会扩展。&lt;/p&gt;
&lt;p&gt;另一个任务轮询这个队列并触发每个客户端开始推送。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
  
  
&lt;/figure&gt;
&lt;p&gt;在高层次上，每个客户端任务将找到正确的生成器来处理请求，生成所需的配置，并发送。&lt;/p&gt;
&lt;h4 id=&#34;优化&#34;&gt;优化&lt;/h4&gt;
&lt;p&gt;一个简单的实现将简单地重新生成每个客户端的所有订阅类型的所有资源，无论配置是否更改。然而，这种方式扩展性很差。因此，我们有许多级别的优化以避免做这些工作。&lt;/p&gt;
&lt;p&gt;首先，我们有一个 &lt;code&gt;Full&lt;/code&gt; 推送的概念。只有在更改时 &lt;code&gt;Full&lt;/code&gt; 推送会重新计算 &lt;code&gt;PushContext&lt;/code&gt;；否则，这将被跳过，重用最后一个 &lt;code&gt;PushContext&lt;/code&gt;。注意：即使是 &lt;code&gt;Full&lt;/code&gt;，我们也尽可能从上一个 &lt;code&gt;PushContext&lt;/code&gt; 复制。例如，如果只有一个 &lt;code&gt;WasmPlugin&lt;/code&gt; 发生了变化，我们不会重新计算服务索引。&lt;/p&gt;
&lt;p&gt;注意：&lt;code&gt;Full&lt;/code&gt; 只是指是否需要重新计算 &lt;code&gt;PushContext&lt;/code&gt;。即使在 &lt;code&gt;Full&lt;/code&gt; 推送中，我们也会跟踪触发此的配置更新，因此我们可以有 &amp;ldquo;Config X 的完整更新&amp;rdquo; 或 &amp;ldquo;所有配置的完整更新&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;接下来，对于单个代理，我们将检查它是否可能受到更改的影响。例如，我们知道一个 sidecar 从不受 &lt;code&gt;Gateway&lt;/code&gt; 更新的影响，我们还可以查看限制更新范围的分流（来自 &lt;code&gt;Sidecar.egress.hosts&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;一旦我们确定代理可能受到影响，我们将确定哪些&lt;em&gt;类型&lt;/em&gt;可能受到影响。例如，我们知道 &lt;code&gt;WasmPlugin&lt;/code&gt; 不影响 &lt;code&gt;Cluster&lt;/code&gt; 类型，所以在这种情况下我们可以跳过生成 &lt;code&gt;Cluster&lt;/code&gt;。警告：Envoy 当前有一个错误，&lt;em&gt;要求&lt;/em&gt; 每当推送对应的 &lt;code&gt;Cluster&lt;/code&gt; 时必须推送 &lt;code&gt;Endpoints&lt;/code&gt;，因此这个优化在这个特定情况下故意关闭了。&lt;/p&gt;
&lt;p&gt;最后，我们确定我们需要生成类型的哪个子集。XDS 有两种模式 - &amp;ldquo;State of the World (SotW)&amp;rdquo; 和 &amp;ldquo;Delta&amp;rdquo;。在 SotW 中，我们通常需要生成类型的所有资源，即使只有一个发生了变化。注意我们实际上需要&lt;em&gt;生成&lt;/em&gt;所有这些，通常是因为我们不存储先前生成的资源（主要因为它们是每个客户端生成的）。这也意味着每当我们确定是否需要更改时，我们都是基于仔细的代码分析，而不是在运行时。&lt;/p&gt;
&lt;p&gt;尽管在 SotW 中有这样的期望，由于协议的一个特点，我们实际上可以启用我们最重要的优化之一。XDS 类型形成一棵树，CDS 和 LDS 是 Envoy 的树根。对于根类型，我们&lt;em&gt;必须&lt;/em&gt;总是生成完整的资源集——缺失的资源被视为删除。
然而，所有其他类型&lt;em&gt;不能&lt;/em&gt;显式删除，而是在所有引用被移除时清理。这意味着我们可以为非根类型发送部分更新，而不删除未发送的资源。这有效地允许在 SotW 上进行 delta 更新。这个优化对我们的端点生成器至关重要，确保当一个 pod 扩展时，我们只需要更新该 pod 内的端点。&lt;/p&gt;
&lt;h2 id=&#34;控制器&#34;&gt;控制器&lt;/h2&gt;
&lt;p&gt;Istiod 由一系列控制器组成。按 Kubernetes 的说法，&amp;ldquo;控制器是观察你的集群状态的控制循环，然后在需要时进行或请求更改。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;在 Istio 中，我们更自由地使用这个术语。Istio 的控制器不仅仅观察一个集群的状态——许多控制器从多个集群读取，甚至从外部来源（文件和 XDS）读取。通常，Kubernetes 控制器然后将状态写回到集群；Istio 确实有几个这样的控制器，但大多数控制器都集中在推动&lt;a href=&#34;#proxy-configuration&#34; title=&#34;代理配置&#34;&gt;代理配置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;编写控制器&#34;&gt;编写控制器&lt;/h3&gt;
&lt;p&gt;Istio 提供了一些帮助库来开始编写控制器。虽然这些库有帮助，但正确编写（和测试！）一个控制器仍然有很多细微之处。&lt;/p&gt;
&lt;p&gt;要开始编写控制器，请查看&lt;a href=&#34;https://github.com/istio/istio/blob/master/pkg/kube/controllers/example_test.go&#34; title=&#34;示例控制器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例控制器&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;控制器概览&#34;&gt;控制器概览&lt;/h3&gt;
&lt;p&gt;下面提供了 Istiod 中控制器的高级概览。有关每个控制器的更多信息，建议咨询控制器的 Go 文档。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
  
  
&lt;/figure&gt;
&lt;p&gt;正如您所看到的，目前控制器的景观相当广泛。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#ServiceDiscovery&#34; title=&#34;服务发现&#34;&gt;服务发现&lt;/a&gt; 和 &lt;a href=&#34;#ConfigStore&#34; title=&#34;Config Store&#34;&gt;Config Store&lt;/a&gt; 已在上文讨论，因此这里不再赘述。&lt;/p&gt;
&lt;h4 id=&#34;网格配置&#34;&gt;网格配置&lt;/h4&gt;
&lt;p&gt;网格配置控制器是一个相当简单的控制器，从 &lt;code&gt;ConfigMap&lt;/code&gt;（如果使用 &lt;code&gt;SHARED_MESH_CONFIG&lt;/code&gt; 则为多个）读取，处理并合并这些到类型化的 &lt;code&gt;MeshConfig&lt;/code&gt; 中。然后它通过一个简单的 &lt;code&gt;mesh.Watcher&lt;/code&gt; 暴露这个，这只是暴露一种访问当前 &lt;code&gt;MeshConfig&lt;/code&gt; 的方式并在它改变时获得通知。&lt;/p&gt;
&lt;h4 id=&#34;ingress&#34;&gt;Ingress&lt;/h4&gt;
&lt;p&gt;除了 &lt;code&gt;VirtualService&lt;/code&gt; 和 &lt;code&gt;Gateway&lt;/code&gt;，Istio 也支持 &lt;code&gt;Ingress&lt;/code&gt; 核心资源类型。像 CRD 一样，&lt;code&gt;Ingress&lt;/code&gt; 控制器实现 &lt;code&gt;ConfigStore&lt;/code&gt;，但有些不同。&lt;code&gt;Ingress&lt;/code&gt; 资源在即时转换为 &lt;code&gt;VirtualService&lt;/code&gt; 和 &lt;code&gt;Gateway&lt;/code&gt;，所以虽然控制器读取 &lt;code&gt;Ingress&lt;/code&gt; 资源（和一些相关类型如 &lt;code&gt;IngressClass&lt;/code&gt;），它发出其他类型。这允许其他代码不用关心 Ingress，只关注核心类型。&lt;/p&gt;
&lt;p&gt;除了这种转换外，&lt;code&gt;Ingress&lt;/code&gt; 还需要在状态中写入它可以访问的地址。这由 Ingress 状态控制器完成。&lt;/p&gt;
&lt;h4 id=&#34;gateway&#34;&gt;Gateway&lt;/h4&gt;
&lt;p&gt;Gateway（指的是 &lt;a href=&#34;http://gateway-api.org/&#34; title=&#34;Kubernetes API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API&lt;/a&gt;，不是同名的 Istio 类型）的工作方式与 &lt;a href=&#34;#ingress&#34; title=&#34;Ingress&#34;&gt;Ingress&lt;/a&gt; 非常相似。网关控制器也将网关 API 类型转换为 &lt;code&gt;VirtualService&lt;/code&gt; 和 &lt;code&gt;Gateway&lt;/code&gt;，实现 &lt;code&gt;ConfigStore&lt;/code&gt; 接口。&lt;/p&gt;
&lt;p&gt;然而，还有一些额外的逻辑。网关类型有广泛的状态报告。与 Ingress 不同，这是状态报告是在主控制器中直接完成的，允许在处理资源的逻辑中直接生成状态。&lt;/p&gt;
&lt;p&gt;此外，Gateway 涉及两个组件写入到集群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网关类控制器是一个简单的控制器，只是写一个描述我们实现的默认 &lt;code&gt;GatewayClass&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;网关部署控制器使用户能够创建一个实际配置底层资源（部署和服务）的网关。这更像是一个传统的“Operator”。这部分逻辑是确定基于 &lt;code&gt;istio.io/rev&lt;/code&gt; 标签哪个 Istiod 修订应该处理资源（反映 sidecar 注入）；因此，这需要依赖“标签观察者”控制器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;crd-观察者&#34;&gt;CRD 观察者&lt;/h4&gt;
&lt;p&gt;对于针对自定义类型（CRD）的观察，我们希望优雅地处理缺失的 CRD。如果对缺失类型启动 informers，则会导致错误并阻塞启动。相反，我们引入了一个“CRD 观察者”组件，观察集群中的 CRD 以确定它们是否可用。&lt;/p&gt;
&lt;p&gt;有两种使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些组件只是在做需要的工作之前阻塞 &lt;code&gt;watcher.WaitForCRD(...)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kclient.NewDelayedInformer&lt;/code&gt; 也可以完全抽象这一点，通过提供一个在幕后处理这一点的客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;credentials-controller&#34;&gt;Credentials Controller&lt;/h4&gt;
&lt;p&gt;凭证控制器暴露访问 TLS 证书信息的途径，这些信息存储在集群的 &lt;code&gt;Secrets&lt;/code&gt; 中。除了简单地访问证书外，它还有一个授权组件，可以验证请求者是否有权读取其命名空间中的 &lt;code&gt;Secrets&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;discovery-filter&#34;&gt;Discovery Filter&lt;/h4&gt;
&lt;p&gt;发现过滤器控制器用于实现 &lt;code&gt;MeshConfig&lt;/code&gt; 的 &lt;code&gt;discoverySelectors&lt;/code&gt; 字段。这个控制器读取集群中的 &lt;code&gt;Namespace&lt;/code&gt; 以确定它们是否应该被“选中”。许多控制器使用这个过滤器来只处理配置的一个子集。&lt;/p&gt;
&lt;h4 id=&#34;多集群&#34;&gt;多集群&lt;/h4&gt;
&lt;p&gt;各种控制器从多个集群读取。&lt;/p&gt;
&lt;p&gt;这始于多集群密钥控制器，该控制器读取 &lt;code&gt;kubeconfig&lt;/code&gt; 文件（存储为 &lt;code&gt;Secrets&lt;/code&gt;），并为每个创建 Kubernetes 客户端。控制器允许注册处理程序，这些处理程序可以处理集群的添加/更新/删除。&lt;/p&gt;
&lt;p&gt;这有两个实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;凭证控制器负责读取存储为 Secrets 的 TLS 证书。&lt;/li&gt;
&lt;li&gt;Kubernetes 服务发现控制器有点像一个大块头，除了核心服务发现控制器之外，还启动了一堆其他子控制器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于整体复杂性，看看这个放大一点会有帮助：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
  
  
&lt;/figure&gt;
&lt;h4 id=&#34;虚拟机&#34;&gt;虚拟机&lt;/h4&gt;
&lt;p&gt;虚拟机支持由两个控制器组成。&lt;/p&gt;
&lt;p&gt;自动注册控制器是一个相当独特的控制器——控制器的输入是 XDS 连接。对每个 XDS 连接，创建一个 &lt;code&gt;WorkloadEntry&lt;/code&gt; 来注册 XDS 客户端（通常是在 VM 上运行的 &lt;code&gt;istio-proxy&lt;/code&gt;）到网格中。这个 &lt;code&gt;WorkloadEntry&lt;/code&gt; 与连接的生命周期绑定，有一些逻辑确保临时的停机（重新连接等）不会移除 &lt;code&gt;WorkloadEntry&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;健康检查控制器还控制 &lt;code&gt;WorkloadEntry&lt;/code&gt; 的健康状态。健康状态通过 XDS 客户端报告并与 &lt;code&gt;WorkloadEntry&lt;/code&gt; 同步。&lt;/p&gt;
&lt;h4 id=&#34;webhook&#34;&gt;Webhook&lt;/h4&gt;
&lt;p&gt;Istio 包含验证和变更 webhook 配置。这些需要在 &lt;code&gt;caBundle&lt;/code&gt; 中指定以配置 TLS 信任。因为 Istiod 的 CA 证书有些动态性，这在运行时进行修补（而不是作为安装的一部分）。webhook 控制器处理这种修补。&lt;/p&gt;
&lt;p&gt;这些控制器非常相似，但由于各种原因是不同的组件。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Kyverno 更轻松地保护服务网格</title>
      <link>https://jimmysong.io/trans/automate-istio-ca-rotation-in-production-at-scale/</link>
      <pubDate>Fri, 08 Mar 2024 13:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/automate-istio-ca-rotation-in-production-at-scale/</guid>
      <description>
        
        
        &lt;p&gt;如今在 Kubernetes 中，服务网格已经变得司空见惯，有些平台甚至默认将其构建到集群中。服务网格无疑在多种方面提供了诸多好处，这些好处众所周知，但也众所周知，它们显著增加了集群的复杂性。除了增加了复杂性之外，服务网格在强制执行 Pod 安全性方面也带来了（臭名昭著的）问题，因为它们需要提升的权限可能对其他准入控制器造成难以处理的困扰，例如 Kubernetes 自身的 Pod 安全准入控制器。在本文中，我们将更详细地解释这个问题以及在使用服务网格时 Kyverno 如何成为真正的救星，同时为你预览一下即将到来的 Kyverno 1.12 版本中的一些东西，这将使安全服务网格变得轻而易举！&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;服务网格&lt;a href=&#34;https://konghq.com/learning-center/service-mesh/what-is-a-service-mesh&#34; title=&#34;为 Kubernetes 应用程序提供了许多好处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为 Kubernetes 应用程序提供了许多好处&lt;/a&gt;，包括更好的负载均衡、双向 TLS、可观测性等。很可能你现在就在你的某个集群中使用了服务网格。最流行的开源服务网格包括 &lt;a href=&#34;https://istio.io/&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 和 &lt;a href=&#34;https://linkerd.io/&#34; title=&#34;Linkerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;。所有服务网格的工作方式基本相同，我们不会在这篇博文中深入探讨。一个显著的点是，为了将流量定向到其“旁路”代理并从其“旁路”代理，需要对底层 Linux 节点的 iptables 规则进行一些调整。这些调整或配置修改是服务网格重写网络堆栈路由规则的结果。为了做到这一点，像 Istio 和 Linkerd 这样的网格使用一个 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&#34; title=&#34;initContainer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;initContainer&lt;/a&gt; 在任何其他容器启动之前执行此操作。为了使该 initContainer 起作用，它需要一些权限，这往往在注重安全的集群中是困难的。至少，这些 initContainer 必须添加两个&lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34; title=&#34;Linux 权限&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 权限&lt;/a&gt;，以允许它们对网络堆栈进行修改：&lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt;。这些 initContainer 甚至可能以 root 用户身份运行，这在容器世界是绝对不允许的。&lt;/p&gt;
&lt;p&gt;例如，Linkerd 2.14 将在应该成为其网格的任何 Pod 中注入类似以下的 initContainer（为简洁起见，省略了一些字段）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;initContainers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cr.l5d.io/linkerd/proxy-init:v2.2.3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;linkerd-init&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowPrivilegeEscalation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;capabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_ADMIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_RAW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsNonRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65534&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seccompProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RuntimeDefault&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;事实上，这些服务网格 initContainer 需要的额外权限被 Kubernetes 官方的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-standards/&#34; title=&#34;Pod 安全标准&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 安全标准&lt;/a&gt; 所禁止。这个事实本身并不是主要问题，而是根据使用的策略引擎，为这些特殊的 initContainer 提供许可是非常困难甚至根本不可能的。我们每周都在 &lt;a href=&#34;https://kyverno.io/community/&#34; title=&#34;Kyverno 社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyverno 社区&lt;/a&gt;听到用户的痛苦，似乎那些最严重受到影响的用户是那些使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-admission/&#34; title=&#34;Pod 安全准入&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 安全准入&lt;/a&gt; 的人，这是实现 Pod 安全标准的进程中的准入控制器。这已经成为一个显著的问题，以至于 Istio 和 Linkerd &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/cni/&#34; title=&#34;都尝试过&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;都尝试过&lt;/a&gt; 解决它（或者更准确地说，解决它的方法） ，通过提供另一种选择：一个自定义的 CNI 插件。&lt;/p&gt;
&lt;h2 id=&#34;cni-插件&#34;&gt;CNI 插件&lt;/h2&gt;
&lt;p&gt;这些 CNI 插件适用于许多情况，但总的来说，它们大都是以牺牲一个问题来解决另一个问题。毕竟，iptables 规则仍然 &lt;strong&gt;必须&lt;/strong&gt; 被重写，而网格中的某些东西仍然 &lt;strong&gt;必须&lt;/strong&gt; 负责执行这个任务。在这两种情况下，CNI 插件实现了一个 DaemonSet，该 DaemonSet 运行一个特权容器，以在每个节点上执行这些修改，从而避免了在每个 Pod 中都需要一个 initContainer 的需求。这确实有它的优点，但也有缺点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DaemonSet 更具特权，因为它需要 hostPath 卷，并将配置文件和二进制文件复制到每个节点。&lt;/li&gt;
&lt;li&gt;它需要了解 CNI 插件，这是专门的知识。&lt;/li&gt;
&lt;li&gt;增加了更多的操作和自动化复杂性。&lt;/li&gt;
&lt;li&gt;与其他 CNI 插件可能发生冲突，因为它们彼此不知道，并且确定如何链接多个插件不是标准化的。&lt;/li&gt;
&lt;li&gt;在水平集群缩放或节点重启期间可能会出现潜在的竞争条件，因为 DaemonSet Pod 可能在工作负载 Pod 之前启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题的关键&#34;&gt;问题的关键&lt;/h2&gt;
&lt;p&gt;但是为什么解决 initContainer 问题会是一个真正的问题呢？答案在于排除。排除，或者你如何免除某些资源不适用于策略，这是区分良好的准入控制器和优秀准入控制器的关键之一。目标是在尽可能不影响你确实需要的事物的同时，提供尽可能强大的 Pod 安全姿态。你希望能够将“好”与“坏”分开，而你的服务网格绝对属于“好”的范畴。但就像筛子筛沙子一样，你必须小心过滤掉“坏”的部分，使你只剩下“好”的部分。在上述 initContainer 示例中，你绝对不希望非服务网格 Pod 添加 &lt;code&gt;NET_ADMIN&lt;/code&gt; 权限，因为那样会给予它们对网络堆栈的不受限制的访问，从而可能导致窥探和伪装等问题。减少漏斗大小的选项如下，从大到小排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在整个集群中禁用 Pod 安全
&lt;ul&gt;
&lt;li&gt;这显然是一个不可行的方案，所以不需要进一步讨论。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在受影响的 Namespace 中禁用 Pod 安全
&lt;ul&gt;
&lt;li&gt;因为我们谈论的是每个必须参与网格的 Pod 中都有一个 initContainer，这基本上意味着你必须在集群的大多数 Namespace 中禁用 Pod 安全，这实际上就像第一种选项一样——行不通。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在包含此检查的配置文件中禁用此配置文件（如果适用）
&lt;ul&gt;
&lt;li&gt;Pod 安全标准组织成称为配置文件的集合，每个配置文件包含多个控制。控制是关于&lt;em&gt;应该&lt;/em&gt;检查哪些字段以及允许或不允许哪些值的命令。你可以找到包含此控制的配置文件，并禁用整个配置文件，但这显然会禁用同一配置文件中的其他控制。这也不是很好。并非所有策略准入控制器都提供此功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Pod 上禁用此控制
&lt;ul&gt;
&lt;li&gt;请求 &lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt; 的这些 initContainer 违反了&lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-standards/#baseline&#34; title=&#34;Pod 安全标准的基线配置文件中的“Capabilities”控制&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 安全标准的基线配置文件中的“Capabilities”控制&lt;/a&gt;，这是 Pod 安全的基本配置文件（受限制配置文件建立在基线配置文件之上）。你可以简单地不在使用这种 initContainer 的任何 Pod 中检查此控制，但这也不好，因为那样一个恶意容器也可以添加 &lt;code&gt;NET_ADMIN&lt;/code&gt;。你可能正在执行所有其他控制，但是简单地关闭一个控制还是太多。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在一个镜像上禁用此控制
&lt;ul&gt;
&lt;li&gt;如果你已经达到了这个级别，那么你做得很好。你可以简单地不在与某种模式匹配的镜像上检查这些特权能力。但我们还可以做得更好。（顺便说一句，基于 initContainer 的名称这样做并不完全安全，因为一些恶意用户可能创建一个名为 &lt;code&gt;istio-init&lt;/code&gt; 的 initContainer，该 initContainer 使用了一个名为 &lt;code&gt;ubuntu:latest&lt;/code&gt; 的镜像。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在一个镜像上以及在 Pod 中的一个位置上禁用此控制
&lt;ul&gt;
&lt;li&gt;现在我们来谈谈。我们可以将一个豁免隔离到仅限于特定的镜像和 Pod 中的特定位置。例如，我们可以在 &lt;code&gt;initContainers[]&lt;/code&gt; 数组中发现 &lt;code&gt;istio/proxyv2&lt;/code&gt; 镜像时，豁免 &lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt; 权限检查。如果同一镜像在主要的 &lt;code&gt;containers[]&lt;/code&gt; 列表中使用，它将导致整个 Pod 被拒绝。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;许多人遇到此问题的原因之一是 Pod 安全准入（PSA）。使用 PSA，你可以实现的最精细的粒度是从顶部的第三个项目：禁用包含此检查的配置文件。由于受限制的配置文件包含基线配置文件，因此在 Namespace 上禁用基线配置文件本质上等同于不执行 Pod 安全检查。这个限制是创建 CNI 插件解决方案的主要原因。如果服务网格可以将对这些提升权限的需求分离到只有一个控制器（一个 DaemonSet）中，并且该控制器仅在一个 Namespace 中运行，那么我们基本上可以将该 Namespace 隔离为一个豁免区域。&lt;/p&gt;
&lt;h2 id=&#34;kyverno-中的策略&#34;&gt;Kyverno 中的策略&lt;/h2&gt;
&lt;p&gt;在 Kyverno 中，您有几种选项来实施 Pod 安全标准。第一种和“原始”的方法是针对 Pod 安全标准中的每个控制编写一个 &lt;code&gt;validate&lt;/code&gt; 规则。Kyverno 已经提供了完整的这些策略，打包为一个 &lt;a href=&#34;https://github.com/kyverno/kyverno/tree/main/charts/kyverno-policies&#34; title=&#34;Helm 图表&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm 图表&lt;/a&gt;，这些策略也可以作为 &lt;a href=&#34;https://kyverno.io/policies/?policytypes=Pod%20Security%20Standards%20%28Baseline%29%2BPod%20Security%20Standards%20%28Restricted%29&#34; title=&#34;单独的策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;单独的策略&lt;/a&gt; 使用。例如，基线配置文件中的“Capabilities”控制可以在&lt;a href=&#34;https://kyverno.io/policies/pod-security/baseline/disallow-capabilities/disallow-capabilities/&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;找到。在这种策略样式中，您可以尽可能地细化。稍微的缺点是，当涉及到预构建的 Pod 安全标准时，它们需要在这些服务网格 initContainers 上进行一些修改。虽然其中一些修改相当温和，但其他可能需要更极端的修改。&lt;/p&gt;
&lt;p&gt;例如，以下是为了允许这些服务网格 initContainers 而进行的相同“Capabilities”检查可能的样子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于 Kyverno 在策略编写方面非常灵活，几乎总会有多种编写相同声明的方式，所以如果您已经这样做了而结果有所不同，请不用担心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;disallow-capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validationFailureAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Enforce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;adding-capabilities-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preconditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ request.operation || &amp;#39;BACKGROUND&amp;#39; }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NotEquals&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DELETE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN, DAC_OVERRIDE, FOWNER,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID, SETPCAP, SETUID, SYS_CHROOT)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          are disallowed. Service mesh initContainers may only add NET_ADMIN and NET_RAW to this list.     &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request.object.spec.initContainers[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preconditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.image }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.securityContext.capabilities.add[] || `[]` }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyNotIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_ADMIN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_RAW&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUDIT_WRITE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CHOWN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DAC_OVERRIDE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FOWNER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FSETID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;KILL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MKNOD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_BIND_SERVICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETFCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETGID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETPCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETUID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SYS_CHROOT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.securityContext.capabilities.add[] || `[]` }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyNotIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUDIT_WRITE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CHOWN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DAC_OVERRIDE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FOWNER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FSETID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;KILL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MKNOD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_BIND_SERVICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETFCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETGID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETPCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETUID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SYS_CHROOT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request.object.spec.[ephemeralContainers, containers][]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.securityContext.capabilities.add[] || `[]` }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyNotIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUDIT_WRITE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CHOWN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DAC_OVERRIDE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FOWNER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FSETID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;KILL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MKNOD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_BIND_SERVICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETFCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETGID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETPCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETUID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SYS_CHROOT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请随时在 &lt;a href=&#34;https://playground.kyverno.io/#/&#34; title=&#34;Kyverno Playground&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyverno Playground&lt;/a&gt; 中试用一下，看看效果。里面包含了 Istio 和 Linkerd 的示例 Pod，所以尝试取消注释并复制元素来测试一下。&lt;/p&gt;
&lt;p&gt;由于 Istio 的 initContainer 需要比 Linkerd 的更多权限，因此还需要对一些其他策略进行一些轻微的修改，这些修改可以在&lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted&#34; title=&#34;受限配置文件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;受限配置文件&lt;/a&gt; 中找到。例如，以下是一个 &lt;a href=&#34;https://playground.kyverno.io/#/&#34; title=&#34;Kyverno Playground 链接&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyverno Playground 链接&lt;/a&gt;，展示了如何修改 &lt;a href=&#34;https://kyverno.io/policies/pod-security/restricted/require-run-as-nonroot/require-run-as-nonroot/&#34; title=&#34;require-run-as-nonroot 策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;require-run-as-nonroot 策略&lt;/a&gt; 来豁免 &lt;code&gt;istio-init&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;像上面展示的个别 Kyverno 策略允许最大的灵活性，但在 Kyverno 中实现 Pod 安全标准还有一种更简单的方式。实施这些标准的第二种方式是使用我们称之为“子规则”的方式来实现 &lt;code&gt;validate&lt;/code&gt; 样式策略。&lt;a href=&#34;https://kyverno.io/docs/writing-policies/validate/#pod-security&#34; title=&#34;在这种样式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这种样式&lt;/a&gt; 中，&lt;code&gt;podSecurity&lt;/code&gt; 元素用于特指这些 Pod 安全标准。在幕后，Kyverno 使用与 Kubernetes 的 Pod 安全 Admission 完全相同的库，但使用不同的“包装器”使其应用更加灵活。&lt;/p&gt;
&lt;p&gt;例如，使用这种类型的子规则将允许您轻松实施 Pod 安全标准的整个基线配置文件，并在其中排除这些服务网格图像，如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-standards&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validationFailureAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Enforce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSecurity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## 强制执行基线配置文件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## 强制执行此配置文件的最新版本&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;排除特定控制，可选特定图像&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;controlName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;exclude[]&lt;/code&gt; 块命名了我们到目前为止一直在讨论的“Capabilities”控制，&lt;code&gt;images[]&lt;/code&gt; 字段命名了应该被排除的两个特定的服务网格图像。通过这种能力，您可以获得类似 PSA 的行为，但是具有简单不可能实现的细粒度。&lt;/p&gt;
&lt;p&gt;这两个选项为您提供了丰富的选择，但它们都涉及直接修改策略。还有另一种选择，允许将异常与策略本身分离，这就是 &lt;a href=&#34;https://kyverno.io/docs/writing-policies/exceptions/&#34; title=&#34;策略异常&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;策略异常&lt;/a&gt;。例如，您可以编写一个策略异常资源，豁免给定 Pod 在特定策略中的特定规则。这对于开发人员自助服务特别有用，因为它允许其他用户请求异常，而无需查看 Kyverno 策略。但是，在 1.11 中，这在某些情况下还不够细粒度，因此在 Kyverno 1.12 中进行了一些很好的升级。接下来将更多介绍。&lt;/p&gt;
&lt;h2 id=&#34;112-中的增强功能&#34;&gt;1.12 中的增强功能&lt;/h2&gt;
&lt;p&gt;在即将推出的 Kyverno 1.12 中，我们正在进行一些令人兴奋的增强，这些增强将使针对诸如服务网格容器等用例的排除变得更加容易。&lt;/p&gt;
&lt;p&gt;1.12 中的第一个增强功能是通过列出特定字段及其值来进一步分类 podSecurity 子规则的排除。这使您既可以使用简单的策略语言，又可以达到最低级别的细粒度。例如，这是您将能够强制执行 Pod 安全标准的整个基线配置文件，但仅从特定的 initContainers 列表中排除 Istio 和 Linkerd 图像的方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;### 即将推出的 Kyverno 1.12 ###&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-standards&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validationFailureAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Enforce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSecurity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;controlName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restrictedField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.initContainers[*].securityContext.capabilities.add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_ADMIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_RAW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二个增强功能是对策略异常的增强，使其具有 podSecurity 意识性，即您将能够在 PolicyException 资源中豁免策略异常的特定控制名称。例如，以下是您将能够在 Kyverno 1.12 中为先前的 &lt;code&gt;validate.podSecurity&lt;/code&gt; 子规则创建的 PolicyException，使您可以将这些排除与只在 &lt;code&gt;staging&lt;/code&gt; 命名空间中创建的 Pod 分离开来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;### 即将推出的 Kyverno 1.12 ###&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v2beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PolicyException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-exception&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;policyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-standards&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ruleNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;baseline-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;staging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSecurity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;controlName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在未来进一步增强，适用于特定容器。查看并关注 &lt;a href=&#34;https://github.com/kyverno/kyverno/issues/8570&#34; title=&#34;此处的问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处的问题&lt;/a&gt; 获取详情。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本文介绍了一些有关服务网格的内容，以及为什么使用 initContainers 以及它们带来的安全问题。我们介绍了 Kyverno 如何以最精细的方式解决这些问题，同时提供了下一个版本的一瞥，以及如何使此过程更加简单。如果您有任何其他问题或反馈，请与 Kyverno 项目 &lt;a href=&#34;https://kyverno.io/community/#get-in-touch&#34; title=&#34;联系&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系&lt;/a&gt;！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Kyverno 更轻松地保护服务网格</title>
      <link>https://jimmysong.io/trans/securing-services-meshes-easier-with-kyverno/</link>
      <pubDate>Fri, 08 Mar 2024 13:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/securing-services-meshes-easier-with-kyverno/</guid>
      <description>
        
        
        &lt;p&gt;如今在 Kubernetes 中，服务网格已经变得司空见惯，有些平台甚至默认将其构建到集群中。服务网格无疑在多种方面提供了诸多好处，这些好处众所周知，但也众所周知，它们显著增加了集群的复杂性。除了增加了复杂性之外，服务网格在强制执行 Pod 安全性方面也带来了（臭名昭著的）问题，因为它们需要提升的权限可能对其他准入控制器造成难以处理的困扰，例如 Kubernetes 自身的 Pod 安全准入控制器。在本文中，我们将更详细地解释这个问题以及在使用服务网格时 Kyverno 如何成为真正的救星，同时为你预览一下即将到来的 Kyverno 1.12 版本中的一些东西，这将使安全服务网格变得轻而易举！&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;服务网格&lt;a href=&#34;https://konghq.com/learning-center/service-mesh/what-is-a-service-mesh&#34; title=&#34;为 Kubernetes 应用程序提供了许多好处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为 Kubernetes 应用程序提供了许多好处&lt;/a&gt;，包括更好的负载均衡、双向 TLS、可观测性等。很可能你现在就在你的某个集群中使用了服务网格。最流行的开源服务网格包括 &lt;a href=&#34;https://istio.io/&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 和 &lt;a href=&#34;https://linkerd.io/&#34; title=&#34;Linkerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;。所有服务网格的工作方式基本相同，我们不会在这篇博文中深入探讨。一个显著的点是，为了将流量定向到其“旁路”代理并从其“旁路”代理，需要对底层 Linux 节点的 iptables 规则进行一些调整。这些调整或配置修改是服务网格重写网络堆栈路由规则的结果。为了做到这一点，像 Istio 和 Linkerd 这样的网格使用一个 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&#34; title=&#34;initContainer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;initContainer&lt;/a&gt; 在任何其他容器启动之前执行此操作。为了使该 initContainer 起作用，它需要一些权限，这往往在注重安全的集群中是困难的。至少，这些 initContainer 必须添加两个&lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34; title=&#34;Linux 权限&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 权限&lt;/a&gt;，以允许它们对网络堆栈进行修改：&lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt;。这些 initContainer 甚至可能以 root 用户身份运行，这在容器世界是绝对不允许的。&lt;/p&gt;
&lt;p&gt;例如，Linkerd 2.14 将在应该成为其网格的任何 Pod 中注入类似以下的 initContainer（为简洁起见，省略了一些字段）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;initContainers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cr.l5d.io/linkerd/proxy-init:v2.2.3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;linkerd-init&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowPrivilegeEscalation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;capabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_ADMIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_RAW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsNonRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65534&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seccompProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RuntimeDefault&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;事实上，这些服务网格 initContainer 需要的额外权限被 Kubernetes 官方的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-standards/&#34; title=&#34;Pod 安全标准&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 安全标准&lt;/a&gt; 所禁止。这个事实本身并不是主要问题，而是根据使用的策略引擎，为这些特殊的 initContainer 提供许可是非常困难甚至根本不可能的。我们每周都在 &lt;a href=&#34;https://kyverno.io/community/&#34; title=&#34;Kyverno 社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyverno 社区&lt;/a&gt;听到用户的痛苦，似乎那些最严重受到影响的用户是那些使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-admission/&#34; title=&#34;Pod 安全准入&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 安全准入&lt;/a&gt; 的人，这是实现 Pod 安全标准的进程中的准入控制器。这已经成为一个显著的问题，以至于 Istio 和 Linkerd &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/cni/&#34; title=&#34;都尝试过&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;都尝试过&lt;/a&gt; 解决它（或者更准确地说，解决它的方法） ，通过提供另一种选择：一个自定义的 CNI 插件。&lt;/p&gt;
&lt;h2 id=&#34;cni-插件&#34;&gt;CNI 插件&lt;/h2&gt;
&lt;p&gt;这些 CNI 插件适用于许多情况，但总的来说，它们大都是以牺牲一个问题来解决另一个问题。毕竟，iptables 规则仍然 &lt;strong&gt;必须&lt;/strong&gt; 被重写，而网格中的某些东西仍然 &lt;strong&gt;必须&lt;/strong&gt; 负责执行这个任务。在这两种情况下，CNI 插件实现了一个 DaemonSet，该 DaemonSet 运行一个特权容器，以在每个节点上执行这些修改，从而避免了在每个 Pod 中都需要一个 initContainer 的需求。这确实有它的优点，但也有缺点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DaemonSet 更具特权，因为它需要 hostPath 卷，并将配置文件和二进制文件复制到每个节点。&lt;/li&gt;
&lt;li&gt;它需要了解 CNI 插件，这是专门的知识。&lt;/li&gt;
&lt;li&gt;增加了更多的操作和自动化复杂性。&lt;/li&gt;
&lt;li&gt;与其他 CNI 插件可能发生冲突，因为它们彼此不知道，并且确定如何链接多个插件不是标准化的。&lt;/li&gt;
&lt;li&gt;在水平集群缩放或节点重启期间可能会出现潜在的竞争条件，因为 DaemonSet Pod 可能在工作负载 Pod 之前启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题的关键&#34;&gt;问题的关键&lt;/h2&gt;
&lt;p&gt;但是为什么解决 initContainer 问题会是一个真正的问题呢？答案在于排除。排除，或者你如何免除某些资源不适用于策略，这是区分良好的准入控制器和优秀准入控制器的关键之一。目标是在尽可能不影响你确实需要的事物的同时，提供尽可能强大的 Pod 安全姿态。你希望能够将“好”与“坏”分开，而你的服务网格绝对属于“好”的范畴。但就像筛子筛沙子一样，你必须小心过滤掉“坏”的部分，使你只剩下“好”的部分。在上述 initContainer 示例中，你绝对不希望非服务网格 Pod 添加 &lt;code&gt;NET_ADMIN&lt;/code&gt; 权限，因为那样会给予它们对网络堆栈的不受限制的访问，从而可能导致窥探和伪装等问题。减少漏斗大小的选项如下，从大到小排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在整个集群中禁用 Pod 安全
&lt;ul&gt;
&lt;li&gt;这显然是一个不可行的方案，所以不需要进一步讨论。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在受影响的 Namespace 中禁用 Pod 安全
&lt;ul&gt;
&lt;li&gt;因为我们谈论的是每个必须参与网格的 Pod 中都有一个 initContainer，这基本上意味着你必须在集群的大多数 Namespace 中禁用 Pod 安全，这实际上就像第一种选项一样——行不通。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在包含此检查的配置文件中禁用此配置文件（如果适用）
&lt;ul&gt;
&lt;li&gt;Pod 安全标准组织成称为配置文件的集合，每个配置文件包含多个控制。控制是关于&lt;em&gt;应该&lt;/em&gt;检查哪些字段以及允许或不允许哪些值的命令。你可以找到包含此控制的配置文件，并禁用整个配置文件，但这显然会禁用同一配置文件中的其他控制。这也不是很好。并非所有策略准入控制器都提供此功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 Pod 上禁用此控制
&lt;ul&gt;
&lt;li&gt;请求 &lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt; 的这些 initContainer 违反了&lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-standards/#baseline&#34; title=&#34;Pod 安全标准的基线配置文件中的“Capabilities”控制&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 安全标准的基线配置文件中的“Capabilities”控制&lt;/a&gt;，这是 Pod 安全的基本配置文件（受限制配置文件建立在基线配置文件之上）。你可以简单地不在使用这种 initContainer 的任何 Pod 中检查此控制，但这也不好，因为那样一个恶意容器也可以添加 &lt;code&gt;NET_ADMIN&lt;/code&gt;。你可能正在执行所有其他控制，但是简单地关闭一个控制还是太多。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在一个镜像上禁用此控制
&lt;ul&gt;
&lt;li&gt;如果你已经达到了这个级别，那么你做得很好。你可以简单地不在与某种模式匹配的镜像上检查这些特权能力。但我们还可以做得更好。（顺便说一句，基于 initContainer 的名称这样做并不完全安全，因为一些恶意用户可能创建一个名为 &lt;code&gt;istio-init&lt;/code&gt; 的 initContainer，该 initContainer 使用了一个名为 &lt;code&gt;ubuntu:latest&lt;/code&gt; 的镜像。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在一个镜像上以及在 Pod 中的一个位置上禁用此控制
&lt;ul&gt;
&lt;li&gt;现在我们来谈谈。我们可以将一个豁免隔离到仅限于特定的镜像和 Pod 中的特定位置。例如，我们可以在 &lt;code&gt;initContainers[]&lt;/code&gt; 数组中发现 &lt;code&gt;istio/proxyv2&lt;/code&gt; 镜像时，豁免 &lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt; 权限检查。如果同一镜像在主要的 &lt;code&gt;containers[]&lt;/code&gt; 列表中使用，它将导致整个 Pod 被拒绝。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;许多人遇到此问题的原因之一是 Pod 安全准入（PSA）。使用 PSA，你可以实现的最精细的粒度是从顶部的第三个项目：禁用包含此检查的配置文件。由于受限制的配置文件包含基线配置文件，因此在 Namespace 上禁用基线配置文件本质上等同于不执行 Pod 安全检查。这个限制是创建 CNI 插件解决方案的主要原因。如果服务网格可以将对这些提升权限的需求分离到只有一个控制器（一个 DaemonSet）中，并且该控制器仅在一个 Namespace 中运行，那么我们基本上可以将该 Namespace 隔离为一个豁免区域。&lt;/p&gt;
&lt;h2 id=&#34;kyverno-中的策略&#34;&gt;Kyverno 中的策略&lt;/h2&gt;
&lt;p&gt;在 Kyverno 中，您有几种选项来实施 Pod 安全标准。第一种和“原始”的方法是针对 Pod 安全标准中的每个控制编写一个 &lt;code&gt;validate&lt;/code&gt; 规则。Kyverno 已经提供了完整的这些策略，打包为一个 &lt;a href=&#34;https://github.com/kyverno/kyverno/tree/main/charts/kyverno-policies&#34; title=&#34;Helm 图表&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm 图表&lt;/a&gt;，这些策略也可以作为 &lt;a href=&#34;https://kyverno.io/policies/?policytypes=Pod%20Security%20Standards%20%28Baseline%29%2BPod%20Security%20Standards%20%28Restricted%29&#34; title=&#34;单独的策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;单独的策略&lt;/a&gt; 使用。例如，基线配置文件中的“Capabilities”控制可以在&lt;a href=&#34;https://kyverno.io/policies/pod-security/baseline/disallow-capabilities/disallow-capabilities/&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;找到。在这种策略样式中，您可以尽可能地细化。稍微的缺点是，当涉及到预构建的 Pod 安全标准时，它们需要在这些服务网格 initContainers 上进行一些修改。虽然其中一些修改相当温和，但其他可能需要更极端的修改。&lt;/p&gt;
&lt;p&gt;例如，以下是为了允许这些服务网格 initContainers 而进行的相同“Capabilities”检查可能的样子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于 Kyverno 在策略编写方面非常灵活，几乎总会有多种编写相同声明的方式，所以如果您已经这样做了而结果有所不同，请不用担心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;disallow-capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validationFailureAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Enforce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;adding-capabilities-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preconditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ request.operation || &amp;#39;BACKGROUND&amp;#39; }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NotEquals&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DELETE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN, DAC_OVERRIDE, FOWNER,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID, SETPCAP, SETUID, SYS_CHROOT)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          are disallowed. Service mesh initContainers may only add NET_ADMIN and NET_RAW to this list.     &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request.object.spec.initContainers[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preconditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.image }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.securityContext.capabilities.add[] || `[]` }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyNotIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_ADMIN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_RAW&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUDIT_WRITE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CHOWN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DAC_OVERRIDE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FOWNER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FSETID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;KILL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MKNOD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_BIND_SERVICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETFCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETGID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETPCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETUID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SYS_CHROOT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.securityContext.capabilities.add[] || `[]` }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyNotIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUDIT_WRITE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CHOWN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DAC_OVERRIDE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FOWNER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FSETID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;KILL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MKNOD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_BIND_SERVICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETFCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETGID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETPCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETUID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SYS_CHROOT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;request.object.spec.[ephemeralContainers, containers][]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;conditions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ element.securityContext.capabilities.add[] || `[]` }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AnyNotIn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUDIT_WRITE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CHOWN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;DAC_OVERRIDE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FOWNER&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;FSETID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;KILL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MKNOD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;NET_BIND_SERVICE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETFCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETGID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETPCAP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SETUID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SYS_CHROOT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请随时在 &lt;a href=&#34;https://playground.kyverno.io/#/&#34; title=&#34;Kyverno Playground&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyverno Playground&lt;/a&gt; 中试用一下，看看效果。里面包含了 Istio 和 Linkerd 的示例 Pod，所以尝试取消注释并复制元素来测试一下。&lt;/p&gt;
&lt;p&gt;由于 Istio 的 initContainer 需要比 Linkerd 的更多权限，因此还需要对一些其他策略进行一些轻微的修改，这些修改可以在&lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted&#34; title=&#34;受限配置文件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;受限配置文件&lt;/a&gt; 中找到。例如，以下是一个 &lt;a href=&#34;https://playground.kyverno.io/#/&#34; title=&#34;Kyverno Playground 链接&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyverno Playground 链接&lt;/a&gt;，展示了如何修改 &lt;a href=&#34;https://kyverno.io/policies/pod-security/restricted/require-run-as-nonroot/require-run-as-nonroot/&#34; title=&#34;require-run-as-nonroot 策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;require-run-as-nonroot 策略&lt;/a&gt; 来豁免 &lt;code&gt;istio-init&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;像上面展示的个别 Kyverno 策略允许最大的灵活性，但在 Kyverno 中实现 Pod 安全标准还有一种更简单的方式。实施这些标准的第二种方式是使用我们称之为“子规则”的方式来实现 &lt;code&gt;validate&lt;/code&gt; 样式策略。&lt;a href=&#34;https://kyverno.io/docs/writing-policies/validate/#pod-security&#34; title=&#34;在这种样式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这种样式&lt;/a&gt; 中，&lt;code&gt;podSecurity&lt;/code&gt; 元素用于特指这些 Pod 安全标准。在幕后，Kyverno 使用与 Kubernetes 的 Pod 安全 Admission 完全相同的库，但使用不同的“包装器”使其应用更加灵活。&lt;/p&gt;
&lt;p&gt;例如，使用这种类型的子规则将允许您轻松实施 Pod 安全标准的整个基线配置文件，并在其中排除这些服务网格图像，如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-standards&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validationFailureAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Enforce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSecurity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## 强制执行基线配置文件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## 强制执行此配置文件的最新版本&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;排除特定控制，可选特定图像&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;controlName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;exclude[]&lt;/code&gt; 块命名了我们到目前为止一直在讨论的“Capabilities”控制，&lt;code&gt;images[]&lt;/code&gt; 字段命名了应该被排除的两个特定的服务网格图像。通过这种能力，您可以获得类似 PSA 的行为，但是具有简单不可能实现的细粒度。&lt;/p&gt;
&lt;p&gt;这两个选项为您提供了丰富的选择，但它们都涉及直接修改策略。还有另一种选择，允许将异常与策略本身分离，这就是 &lt;a href=&#34;https://kyverno.io/docs/writing-policies/exceptions/&#34; title=&#34;策略异常&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;策略异常&lt;/a&gt;。例如，您可以编写一个策略异常资源，豁免给定 Pod 在特定策略中的特定规则。这对于开发人员自助服务特别有用，因为它允许其他用户请求异常，而无需查看 Kyverno 策略。但是，在 1.11 中，这在某些情况下还不够细粒度，因此在 Kyverno 1.12 中进行了一些很好的升级。接下来将更多介绍。&lt;/p&gt;
&lt;h2 id=&#34;112-中的增强功能&#34;&gt;1.12 中的增强功能&lt;/h2&gt;
&lt;p&gt;在即将推出的 Kyverno 1.12 中，我们正在进行一些令人兴奋的增强，这些增强将使针对诸如服务网格容器等用例的排除变得更加容易。&lt;/p&gt;
&lt;p&gt;1.12 中的第一个增强功能是通过列出特定字段及其值来进一步分类 podSecurity 子规则的排除。这使您既可以使用简单的策略语言，又可以达到最低级别的细粒度。例如，这是您将能够强制执行 Pod 安全标准的整个基线配置文件，但仅从特定的 initContainers 列表中排除 Istio 和 Linkerd 图像的方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;### 即将推出的 Kyverno 1.12 ###&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-standards&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validationFailureAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Enforce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSecurity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;baseline&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;controlName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restrictedField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.initContainers[*].securityContext.capabilities.add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_ADMIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NET_RAW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二个增强功能是对策略异常的增强，使其具有 podSecurity 意识性，即您将能够在 PolicyException 资源中豁免策略异常的特定控制名称。例如，以下是您将能够在 Kyverno 1.12 中为先前的 &lt;code&gt;validate.podSecurity&lt;/code&gt; 子规则创建的 PolicyException，使您可以将这些排除与只在 &lt;code&gt;staging&lt;/code&gt; 命名空间中创建的 Pod 分离开来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;### 即将推出的 Kyverno 1.12 ###&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno.io/v2beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PolicyException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-exception&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kyverno&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;policyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-security-standards&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ruleNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;baseline-service-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;staging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSecurity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;controlName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Capabilities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/istio/proxyv2*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*/linkerd/proxy-init*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在未来进一步增强，适用于特定容器。查看并关注 &lt;a href=&#34;https://github.com/kyverno/kyverno/issues/8570&#34; title=&#34;此处的问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处的问题&lt;/a&gt; 获取详情。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本文介绍了一些有关服务网格的内容，以及为什么使用 initContainers 以及它们带来的安全问题。我们介绍了 Kyverno 如何以最精细的方式解决这些问题，同时提供了下一个版本的一瞥，以及如何使此过程更加简单。如果您有任何其他问题或反馈，请与 Kyverno 项目 &lt;a href=&#34;https://kyverno.io/community/#get-in-touch&#34; title=&#34;联系&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系&lt;/a&gt;！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>解密 Kubernetes 网络：跟随数据包的奇妙旅程</title>
      <link>https://jimmysong.io/trans/kubernetes-networking-by-using-cilium-beginner-level/</link>
      <pubDate>Fri, 08 Mar 2024 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/kubernetes-networking-by-using-cilium-beginner-level/</guid>
      <description>
        
        
        &lt;p&gt;最近对于理解 Kubernetes 中的网络有很大的兴趣。本文是我对这个话题的贡献。我会尽力用直观的方式解释，并将技术部分翻译成易懂的语言，以便任何人都能理解。&lt;/p&gt;
&lt;p&gt;最好的学习网络的方式是通过“追踪数据包”或“数据包的生命周期”。基本上，你要跟随数据包从发送者到接收者的旅程，并在每一步停下来。我以前就用 &lt;a href=&#34;https://www.dbi-services.com/blog/exploration-of-calico-in-minikube/&#34; title=&#34;Calico 实现的 Pod 到另一个 Pod 的通信&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Calico 实现的 Pod 到另一个 Pod 的通信&lt;/a&gt; 进行了这样的操作。这次我将使用另一个容器网络接口 (CNI) 叫做 &lt;a href=&#34;https://cilium.io/&#34; title=&#34;Cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt;，它基于 eBPF（了解快速和灵活的路由），并带有许多强大的功能和工具。让我们开始吧！&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中的传统网络&#34;&gt;Kubernetes 中的传统网络&lt;/h2&gt;
&lt;p&gt;我们将从头开始。我会假设你对网络一无所知。也许你已经知道 IP 地址是什么？IP 地址是计算机网络接口的数字地址。这就是你的计算机可以连接到你的 Wi-Fi 网络并让你访问互联网的方式。如果你使用的是笔记本电脑，你的 Wi-Fi 网络接口有一个 IP 地址。这个网络接口还有另一个由硬件提供商烧录的唯一地址。这个地址称为介质访问控制 (MAC) 地址。&lt;/p&gt;
&lt;p&gt;IP 地址属于一个组（IP 子网）。为了知道它属于哪个组，它使用一种称为子网掩码的东西。当子网掩码应用到 IP 地址时，会得到一个结果，对于属于同一组的每个 IP 地址来说，这个结果都是相同的。这就像你所在的社区一样。&lt;/p&gt;
&lt;p&gt;让我们用下面的图来做类比：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/kubernetes-networking-by-using-cilium-beginner-level/f1_hu1ec4ddf4497af64f7910a5d59042bceb_91871_1024x488_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/kubernetes-networking-by-using-cilium-beginner-level/f1.png&#34; data-img=&#34;/trans/kubernetes-networking-by-using-cilium-beginner-level/f1.png&#34; data-width=&#34;1024&#34; data-height=&#34;488&#34; alt=&#34;image&#34; data-caption=&#34;传统网络&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;传统网络&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;房子是一台计算机、服务器或虚拟机。它的大小可以不同，根据它的 CPU 和内存，但为了简单起见，我们使用相同的大小。一栋房子有一扇门，这就是你的网络接口。门上的序列号是你的 MAC 地址，房子上的数字（通常是钉在门上的）是你的 IP 地址。只有在你换门时，你的序列号才会改变。然而，你的房子号码是由你的社区的建筑师分配的，如果有重新分配或设计更改，它可能会改变。&lt;/p&gt;
&lt;p&gt;蓝色的第 10 个社区（使用从 10 到 19 的数字）属于同一组（同一 IP 子网），而绿色的第 20 个社区是另一组。在每个社区中，有五栋房子，所以有空间让社区成长。在每个社区里，门直接连接到一个喷泉，代表一个交换机。在喷泉处，有一个指示每条路径的标志，指示你可以到达哪扇门。是的，喷泉不知道房子号码，只知道门的序列号。对于人类来说，这不是很方便，所以我们使用一张地图（称为 ARP 表），它提供了房子号码与门的序列号之间的转换。&lt;/p&gt;
&lt;p&gt;如果你住在 14 号房子，想拜访 15 号房子，你会使用这条路（只有一条，而且是你的，所以不会有交通堵塞！）先到达喷泉，然后看看标志。你从地图上知道哪个序列号对应哪个房子，所以你可以沿着通往 15 号房子的路线前往。在这种星形拓扑中，你总是先去喷泉，而不是直接去你想要拜访的房子，因为没有直接的路径。社区内的路径代表了第 2 层链接。你无法通过这些路径到达另一个社区。&lt;/p&gt;
&lt;h3 id=&#34;在社区之间旅行&#34;&gt;在社区之间旅行&lt;/h3&gt;
&lt;p&gt;现在，如果从你的 14 号房子，你想要去拜访 24 号房子怎么办？这是另一个社区，这意味着 14 号的 IP 地址/子网掩码与 24 号不同。实际上，第 10 和第 20 社区是不同的。所以你知道目的地是另一个社区，这种情况下，你必须首先去找你的门卫（但总是通过喷泉，正如我们所见）。他是你社区的默认网关，他住在 11 号房子。规则是去找他，对于任何目的地在你社区之外的地方。&lt;/p&gt;
&lt;p&gt;只有他有地图（路由表）能够到达第 20 号社区，并且知道应该走哪条路（这被称为第 3 层路由，因为你正在离开你的社区）。这张地图显示了到达 20 号社区的正确门。等一下，如果一扇门是一个网络接口，那么门卫房子是不是还有另一扇门？完全正确！11 号房子有另一扇门，门上有另一个号码（101），当然这扇门上有另一个序列号（MAC 地址）。&lt;/p&gt;
&lt;p&gt;通过这扇门出去，你现在可以沿着路径到达第 20 号社区，这个社区有自己的门卫在 21 号房子。这个门卫的地图（路由表）指导你到达目的地的正确门。这扇门让你进入了第 20 号社区，因为你的目的地 24 属于它。门卫还给了你地图（ARP 表），所以你可以在喷泉上找到方向。现在，你可以沿着通往绿色喷泉的路径走了。从那里，你只需跟着标志和路径到达 24 号房子。当你想回家时，你沿着相反的方向走同样的路径回去。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中的网络&#34;&gt;Kubernetes 中的网络&lt;/h2&gt;
&lt;p&gt;现在你了解了网络的基础知识，让我们来看看在 Kubernetes 中它是如何工作的。是的，它稍微复杂一些，但让我们一步一步来，使用下面的图片来更好地理解：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/kubernetes-networking-by-using-cilium-beginner-level/f2_hu1d380b19e7d07adf8d3996151ce876d9_50384_1024x586_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/kubernetes-networking-by-using-cilium-beginner-level/f2.png&#34; data-img=&#34;/trans/kubernetes-networking-by-using-cilium-beginner-level/f2.png&#34; data-width=&#34;1024&#34; data-height=&#34;586&#34; alt=&#34;image&#34; data-caption=&#34;使用 Cilium 的 Kubernetes 网络&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;使用 Cilium 的 Kubernetes 网络&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们现在没有房子，而是建筑。建筑之间的网络与传统网络仍然相同，中间有一个交换机/喷泉。建筑的入口有一扇门，上面有建筑的号码（它的 IP 地址），它是 1000 个社区的一份子。一个建筑将代表我们 Kubernetes 集群的一个节点。&lt;/p&gt;
&lt;p&gt;你知道 Kubernetes 是一个容器编排器。一个容器包装成一个 pod。为了简单起见，让我们假设一个 pod 只有一个容器，因此这两个术语在这里是等价的。这个 pod 就像我们建筑中的一个私人部分。公寓的大小可以不同，因为它可能有 2、3 或 4 个卧室，这将是你的容器在节点上需要的 CPU 和内存容量。有些公寓是空的，所以建筑仍然有一些容量。然而，在 Kubernetes 中，pod 是根据需要创建和删除的。所以在我们的建筑中，这意味着有时会创建一个 2 卧室的公寓，当不再使用时，它可能会被从建筑物中移除。然后，如果建筑有足够的空间，可能会创建一个 5 卧室的公寓。然后想象一下，这是一座乐高建筑，里面你可以根据需要建造和拆除不同大小的公寓！这不是很棒吗？&lt;/p&gt;
&lt;p&gt;在每个建筑物中，容器/pod 有自己的社区（IP 子网）。在 Kubernetes 中，CNI 的功能基本上是为 pod 分配号码（IP 地址），以便它们可以彼此通信。默认情况下，Cilium 为每个建筑使用不同的社区。当创建一个公寓时，Cilium 会为其分配一个号码。当删除并重新创建一个公寓时，它将获得另一个号码，因此它是临时的。这里蓝色的社区使用 10 号范围，绿色的社区使用 20 号。你可以注意到蓝色和绿色社区的数字范围与建筑物的范围不同。只是为了让你知道，这种设计被称为叠加网络。还有其他可能的，但这是常用的一种。这是一个在节点网络之上的 pod 网络。&lt;/p&gt;
&lt;h3 id=&#34;在同一建筑中的公寓之间旅行&#34;&gt;在同一建筑中的公寓之间旅行&lt;/h3&gt;
&lt;p&gt;现在，你住在 12 号公寓，你要怎么去拜访 14 号公寓？就像我们在传统网络示例中所做的那样，你是我们要追踪的数据包！当然，你通过它的门（它的网络接口）离开公寓。与我们之前的示例不同之处在于，你现在不是离开房子，而是离开了你的公寓，但仍然在建筑物内部。然后你走过一个私人走廊，到达另一扇门（这是 LXC 接口）。&lt;/p&gt;
&lt;p&gt;这扇门给了你进入建筑的公共空间的访问，这里进行了路由和派发。我们称之为 Cilium 大厅（蓝色矩形）。当选择 Cilium 为这个 Kubernetes 集群提供通信时，每个建筑物都安装了这个大厅的 Cilium 代理。大厅里有一个门卫，他不住在公寓里，而是在大厅的一个甲板上等待。他有一个服务人员团队，在建筑物的不同门处等候提供指导。这是因为 Cilium 使用一个叫做 eBPF 的魔法路由地图，有效地帮助旅行者。&lt;/p&gt;
&lt;p&gt;当你到达走廊尽头的门时，你向等在这里的服务人员表示你要去 14 号。他在他的魔法 eBPF 地图中找到了一个与 14 号相匹配的项目，并直接向你展示了右上角的走廊门。你不必去大厅，他向你展示了一条秘密通道，直接到达那里。然后你打开那扇门，跟着走廊，到达了 14 号公寓。你回去到 12 号公寓，沿着相同的路径和过程，但是方向相反。&lt;/p&gt;
&lt;p&gt;因此，这种调度与传统的交换方式不同，并且非常快速，这要归功于魔法 eBPF 地图！&lt;/p&gt;
&lt;h3 id=&#34;在不同建筑物的公寓之间旅行&#34;&gt;在不同建筑物的公寓之间旅行&lt;/h3&gt;
&lt;p&gt;现在，从 12 号公寓，你想去拜访另一个建筑物里的 22 号公寓。你的旅行开始和以前一样，你离开你的公寓，沿着走廊，询问等待在这里的服务人员的方向。由于目的地是另一个社区的 22 号，这次他把你引导到了大厅。在这里，与传统网络一样，你需要大厅中的门卫的帮助。门卫查看他的地图（路由表），指引你去 22 号的方向，并向你展示要使用的门号码 11（cilium_host）。&lt;/p&gt;
&lt;p&gt;当你打开那扇门时，你会看到后面有另一扇门：那就是蓝色的三角形，称为 VXLAN 接口。这扇门通向一个漂亮的透明隧道，穿过建筑物的主门。你受到雨水的保护，可以欣赏到另一个建筑物的景色。你甚至可以看到室外的喷泉！当你到达绿色建筑物时，你离开隧道，去见在绿色三角形（VXLAN 接口）处等待你的服务人员。你告诉他你的目的地，他在他的魔法 eBPF 地图中找到了与 22 号相匹配的项目，并向你展示了一条通往左上角走廊门的秘密通道。然后你跟着走廊，到达了你的目的地。和以前一样，你回去的路线将沿着相同的路径，但方向相反。&lt;/p&gt;
&lt;p&gt;这就是第 3 层路由，因为目的社区与你的不同。你可以看到在 Kubernetes 中比传统路由稍微复杂一些。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;希望这有助于你理解传统网络和 Kubernetes 网络之间的区别，也希望后者现在对你来说更清晰了。如果这就是你所需要的，那么我很高兴你阅读了这篇博文，希望你喜欢它。如果你现在想了解更多关于 Kubernetes 网络的内容，请保持关注，因为我将写一篇 &lt;a href=&#34;https://www.dbi-services.com/blog/kubernetes-networking-by-using-cilium-intermediate-level-part-1/&#34; title=&#34;中级篇&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中级篇&lt;/a&gt;，你将在其中看到一个真实集群上建筑物的样子！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 中基于标头的路由——无需标头传播</title>
      <link>https://jimmysong.io/trans/header-based-routing-in-istio-without-header-propagation/</link>
      <pubDate>Wed, 06 Mar 2024 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/header-based-routing-in-istio-without-header-propagation/</guid>
      <description>
        
        
        &lt;p&gt;Istio 使用 Envoy 代理作为 Pod sidecar，应用程序将网络责任（例如入站和出站流量）委托给它，但有一个责任仍然属于应用程序容器：标头传播。&lt;/p&gt;
&lt;p&gt;Envoy 代理无法将其发送到应用程序的请求与应用程序响应的请求关联起来，因此 Istio 无法自动传播标头。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/header-based-routing-in-istio-without-header-propagation/f1.webp&#34; data-img=&#34;/trans/header-based-routing-in-istio-without-header-propagation/f1.webp&#34; data-width=&#34;1024&#34; data-height=&#34;403&#34; alt=&#34;image&#34; data-caption=&#34;图 1：如果应用程序容器不转发回标头，Sidecar 无法将请求与响应关联起来。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：如果应用程序容器不转发回标头，Sidecar 无法将请求与响应关联起来。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在大多数情况下，基于标头的路由需要应用程序开发人员实现标头转发。例如，在 Istio 的 Bookinfo 应用程序中， &lt;code&gt;productpage&lt;/code&gt; 微服务是&lt;a href=&#34;https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/productpage.py#L102&#34; title=&#34;这样&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这样&lt;/a&gt;实现的。这让我们想到一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;平台管理员如何在不修改应用程序内部的情况下使用基于标头的路由？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;泳道方法&#34;&gt;泳道方法&lt;/h2&gt;
&lt;p&gt;使用 Bookinfo 应用程序，我们将根据 &lt;code&gt;x-version&lt;/code&gt; 标头对请求路径进行分段，如下图 2 所示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/header-based-routing-in-istio-without-header-propagation/f2.webp&#34; data-img=&#34;/trans/header-based-routing-in-istio-without-header-propagation/f2.webp&#34; data-width=&#34;900&#34; data-height=&#34;541&#34; alt=&#34;image&#34; data-caption=&#34;图 2：根据 x-version 标头分段请求路径。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：根据 x-version 标头分段请求路径。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;没有 &lt;code&gt;x-version&lt;/code&gt; 标头的请求可能会被路由到任意后端。&lt;/p&gt;
&lt;h2 id=&#34;部署工作负载&#34;&gt;部署工作负载&lt;/h2&gt;
&lt;p&gt;我们将使用 Istio 的 Bookinfo &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34; title=&#34;示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例&lt;/a&gt; ，并对版本控制应用程序进行一些细微的更改作为示例实现。&lt;/p&gt;
&lt;p&gt;首先，我们创建三个 productpage 部署，仅更改 &lt;code&gt;version&lt;/code&gt; 标签。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage-v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为它们创建服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，为 reviews 应用程序创建三个部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews-v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v{1,2,3}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;rating 和 details 应用程序与原始示例中的内容相同。&lt;/p&gt;
&lt;h2 id=&#34;部署-istio-配置&#34;&gt;部署 Istio 配置&lt;/h2&gt;
&lt;p&gt;这就是 Istio 的路由功能发挥作用的地方。每个版本的 &lt;code&gt;productpage&lt;/code&gt; 的 &lt;code&gt;DestinationRule subsets&lt;/code&gt; 定义为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loadBalancer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;simple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RANDOM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中有几个 &lt;code&gt;VirtualService&lt;/code&gt; 实现了泳道标头逻辑的前半部分。以下负责前缀匹配并使用 &lt;code&gt;delegate&lt;/code&gt; 功能来使用第二个 &lt;code&gt;VirtualService&lt;/code&gt;，因此配置是原子的并且 &lt;code&gt;mesh&lt;/code&gt; 避免声明网关选择器（参见下面的引用）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;bookinfo-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/login&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/logout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/api/v1/products&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;delegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage-route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在指派 &lt;code&gt;productpage-route&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage-route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;productpage-v1-route&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;x-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;productpage-v2-route&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;x-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;productpage-v3-route&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;x-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;productpage-default-route&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;withoutHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;x-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;productpage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，在 &lt;code&gt;Reviews&lt;/code&gt; 级别，在 &lt;code&gt;httpMatchRequest&lt;/code&gt; 中使用 &lt;code&gt;sourceLabels&lt;/code&gt; 配置制作泳道的后半部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个或多个标签，这些标签约束规则对具有给定标签的源 (客户机) 工作负载的适用性。如果 VirtualService 有一个在顶级 &lt;code&gt;gateways&lt;/code&gt; 字段中指定的网关列表，那么它必须包含该字段适用的保留网关 &lt;code&gt;mesh&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;来源：&lt;/em&gt; &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPMatchRequest&#34; title=&#34;&amp;lt;em&amp;gt;Istio 虚拟服务文档&amp;lt;/em&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Istio 虚拟服务文档&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 &lt;code&gt;VirtualService&lt;/code&gt; 使用该 &lt;code&gt;sourceLabels&lt;/code&gt; 功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews-route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reviews-v1-route&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;sourceLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reviews-v2-route&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;sourceLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reviews-v3-route&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;sourceLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;在没有标头传播的情况下测试标头路由&#34;&gt;在没有标头传播的情况下测试标头路由&lt;/h2&gt;
&lt;p&gt;首先，从无标头场景开始，您可以从所有通道获得响应：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; —————»  ns:bookinfo ❯ for i in {1..5}; do curl -s localhost:8080/productpage | grep -A1 &amp;#34;Reviews served by&amp;#34;; done
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v2-955b74755-t4jkb&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v2-955b74755-t4jkb&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后检查 &lt;code&gt;x-version: v1&lt;/code&gt; header 是否有作用。您可以看到工作负载发出的所有对 &lt;code&gt;productpage-v1&lt;/code&gt; 的调用均由  &lt;code&gt;reviews-v1&lt;/code&gt; 专门提供服务。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; —————»  ns:bookinfo ❯ for i in {1..10}; \
do curl -s localhost:8080/productpage -H &amp;#34;x-version: v1&amp;#34; \
| grep -A1 &amp;#34;Reviews served by&amp;#34;; done
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v1-5cf854487-hjtrg&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;v3&lt;/code&gt; 标头值完成测试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  —————»  ns:bookinfo ❯ for i in {1..10}; \
do curl -s localhost:8080/productpage -H &amp;#34;x-version: v3&amp;#34; \
| grep -A1 &amp;#34;Reviews served by&amp;#34;; done
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
        &amp;lt;dt&amp;gt;Reviews served by:&amp;lt;/dt&amp;gt;
        &amp;lt;u&amp;gt;reviews-v3-797fc48bc9-wsg26&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;在本文中，我们在标头上使用 &lt;code&gt;match&lt;/code&gt; ，在 Istio 中使用 &lt;code&gt;subsets&lt;/code&gt; 和 &lt;code&gt;sourceLabels&lt;/code&gt; 基于标头进行路由，而无需标头传播。您还可以查看 &lt;code&gt;delegate&lt;/code&gt; 功能以及 &lt;code&gt;withoutHeaders&lt;/code&gt; 匹配的使用情况。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果您是服务网格新手，Tetrate&lt;a href=&#34;https://tetr8.io/academy&#34; title=&#34;在 Tetrate Academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Tetrate Academy&lt;/a&gt;提供了一系列免费在线课程，可帮助您快速熟悉 Istio 和 Envoy。如果您正在寻找使用 Istio 进行生产的最可靠方法，请查看 &lt;a href=&#34;https://tetr8.io/tid&#34; title=&#34;Tetrate Istio Subscription&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Subscription&lt;/a&gt;。Tetrate Istio 订阅拥有在高度监管和任务关键型生产环境中运行 Istio 和 Envoy 所需的一切。它包括 &lt;a href=&#34;https://istio.tetratelabs.io/&#34; title=&#34;Tetrate Istio Distro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro&lt;/a&gt;，这是 Istio 和 Envoy 的 100% 上游发行版，经过 FIPS 验证并准备好 FedRAMP。对于需要开源 Istio 和 Envoy 而无需专有供应商依赖的团队，Tetrate 提供唯一 100% 上游 Istio 企业支持产品。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何在 Istio 中按路径配置全局速率限制</title>
      <link>https://jimmysong.io/trans/how-to-configure-global-rate-limits-by-path-in-istio/</link>
      <pubDate>Thu, 29 Feb 2024 20:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/how-to-configure-global-rate-limits-by-path-in-istio/</guid>
      <description>
        
        
        &lt;p&gt;本文是为那些刚开始使用 Istio 速率限制功能，希望了解基于请求路径的速率限制如何工作的人而写的。它源于我的实践，并澄清了关于&lt;code&gt;rate_limit&lt;/code&gt;操作中 AND/OR 操作的困惑。我花了比预期更多的时间来弄清楚我将在这里为你总结的内容，以便你在几分钟内学习。&lt;/p&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;
&lt;p&gt;Istio 在 Envoy 之上运行，而我们将讨论的主要技术是 Envoy。Envoy 有在代理本身上实现的本地速率限制和在 L4 或 L7 上调用外部服务的全局速率限制的选项。&lt;/p&gt;
&lt;h2 id=&#34;外部速率限制服务&#34;&gt;外部速率限制服务&lt;/h2&gt;
&lt;p&gt;外部速率限制服务（RLS）与 Redis 数据库配合使用，通过 gRPC 与 envoy 实例连接。该 RLS 是由 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/rate_limit_filter#rate-limit&#34; title=&#34;filter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;filter&lt;/a&gt; 在 HTTP 路由过滤器之前的侦听器链中添加而被调用的。&lt;/p&gt;
&lt;p&gt;这个外部过滤器将描述符组织成域组。每个描述符都是一个键值对，由速率限制过滤器填充，并传递给 RLS 供其在规则执行逻辑中使用。请参阅 &lt;a href=&#34;https://github.com/envoyproxy/ratelimit#overview&#34; title=&#34;https://github.com/envoyproxy/ratelimit#overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/envoyproxy/ratelimit#overview&lt;/a&gt; 进行实现。&lt;/p&gt;
&lt;p&gt;RLS 需要由集群操作员（你）安装和管理，并且不会随 Istio 一起提供，尽管可以在你安装时从 Istio 包的示例目录中找到它。&lt;/p&gt;
&lt;h2 id=&#34;envoy-http-速率限制过滤器&#34;&gt;Envoy HTTP 速率限制过滤器&lt;/h2&gt;
&lt;p&gt;Envoy 的设置由应用于入口网关的两个 Envoy 配置组成，一个在侦听器组件中添加速率限制过滤器，另一个在动态路由组件中定义虚拟主机级别的操作。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-to-configure-global-rate-limits-by-path-in-istio/f1_hu69455888500c848e7fd5a982afe748e1_38501_917x728_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-to-configure-global-rate-limits-by-path-in-istio/f1.jpg&#34; data-img=&#34;/trans/how-to-configure-global-rate-limits-by-path-in-istio/f1.jpg&#34; data-width=&#34;917&#34; data-height=&#34;728&#34; alt=&#34;image&#34; data-caption=&#34;Envoy HTTP 速率限制过滤器&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy HTTP 速率限制过滤器&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;带有速率限制过滤器的侦听器组件 filter_chains.filters[] 在路由器之前。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-to-configure-global-rate-limits-by-path-in-istio/f2_hufc8003c500b6c7bcbee5a43c92e29fe0_38371_815x783_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-to-configure-global-rate-limits-by-path-in-istio/f2.jpg&#34; data-img=&#34;/trans/how-to-configure-global-rate-limits-by-path-in-istio/f2.jpg&#34; data-width=&#34;815&#34; data-height=&#34;783&#34; alt=&#34;image&#34; data-caption=&#34;虚拟主机“httpbin.com:80”的路由组件中的速率限制操作&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;虚拟主机“httpbin.com:80”的路由组件中的速率限制操作&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;注意：你可以通过以下方式从任何 envoy 代理（当然是网关）获取此转储：&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;k exec &amp;lt;POD&amp;gt; -c istio-proxy -- curl &amp;#39;localhost:15000/config_dump&amp;#39; &amp;gt; config_dump.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;侦听器过滤器配置了如何到达 RLS、它正在监视的域以及一些其他设置。当满足路由中定义的操作时，此过滤器将访问在路由中定义的操作，并触发到 RLS 上游的 gRPC 调用，其中包括域、描述符键和值，以便它返回一个判断。&lt;/p&gt;
&lt;h2 id=&#34;istio-中按请求路径设置速率限制的示例&#34;&gt;Istio 中按请求路径设置速率限制的示例&lt;/h2&gt;
&lt;p&gt;你需要按照&lt;a href=&#34;https://istio.io/latest/docs/tasks/policy-enforcement/rate-limit/&#34; title=&#34;此&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此&lt;/a&gt;开始。花点时间分析基于前文介绍的配置。供你参考，我使用的是你也可以在 Istio 包的示例目录中访问的 &lt;code&gt;httpbin&lt;/code&gt; 服务。&lt;/p&gt;
&lt;h3 id=&#34;错误的方法&#34;&gt;错误的方法&lt;/h3&gt;
&lt;p&gt;所以，我希望根据两个路径 &lt;code&gt;/delay&lt;/code&gt; 和 &lt;code&gt;/status&lt;/code&gt; 进行速率限制。看起来很容易，所以我配置了我的 Envoy Filter 和 RLS 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# EnvoyFilter 配置路由操作&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;MERGE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rate_limits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;actions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;header_value_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;descriptor_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;descriptor_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:path&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;safe_regex_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;google_re2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.*delay.*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;header_value_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;descriptor_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;descriptor_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:path&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;safe_regex_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;google_re2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.*status.*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# RLS configmap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config.yaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    domain: tetrate-ratelimit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    descriptors:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      - key: PATH
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        value: &amp;#34;yes&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        rate_limit:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          unit: minute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          requests_per_unit: 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      - key: PATH
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        value: &amp;#34;no&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        rate_limit:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          unit: minute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          requests_per_unit: 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了这个，我期望通过调用以下命令来使其工作：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl http://127.0.0.1:8080/delay/1 -H&amp;#34;host: httpbin.com&amp;#34; -v -o /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 RLS 甚至没有注意到这个调用，所以速率限制没有发生：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# k logs -n default -f ratelimit-57bf5688c-f8q5k
time=&amp;#34;2023-11-29T17:34:10Z&amp;#34; level=debug msg=&amp;#34;[gostats] Flush() called, all stats would be flushed&amp;#34;
time=&amp;#34;2023-11-29T17:34:20Z&amp;#34; level=debug msg=&amp;#34;[gostats] flushing counter ratelimit.go.mallocs: 460&amp;#34;
time=&amp;#34;2023-11-29T17:34:20Z&amp;#34; level=debug msg=&amp;#34;[gostats] flushing counter ratelimit.go.frees: 26&amp;#34;
time=&amp;#34;2023-11-29T17:34:20Z&amp;#34; level=debug msg=&amp;#34;[gostats] flushing counter ratelimit.go.totalAlloc: 15624&amp;#34;
time=&amp;#34;2023-11-29T17:34:20Z&amp;#34; level=debug msg=&amp;#34;[gostats] flushing gauge ratelimit.go.sys: 0&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;为了设置调试模式，你可以编辑 ratelimit-server 部署的容器参数。在那里，你将找到日志级别标志。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我尝试了所有种类的组合在 &lt;code&gt;rate_limits.actions&lt;/code&gt; 设置中，使用 &lt;code&gt;string_match&lt;/code&gt; 和 &lt;code&gt;prefix_match&lt;/code&gt; 替代了 &lt;code&gt;safe_regex_match&lt;/code&gt;，但没有成功。&lt;/p&gt;
&lt;p&gt;还尝试使用单个 &lt;code&gt;descriptor_key&lt;/code&gt;，不同的值以及甚至不设置它并使用默认的 &lt;code&gt;header_match&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;顿悟时刻&#34;&gt;顿悟时刻&lt;/h2&gt;
&lt;p&gt;我发现过滤器没有发送任何东西到 RLS，因为前者在任何请求上都保持沉默。然后，通过文档我读到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;如果操作不能添加描述符条目，则不会为配置生成描述符&amp;rdquo;，见&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#config-route-v3-ratelimit&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后，发起调用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl http://127.0.0.1:8080/status/delay -H&amp;#34;host: httpbin.com&amp;#34; -v -o /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;time=&amp;#34;2023-11-29T16:07:07Z&amp;#34; level=debug msg=&amp;#34;got descriptor: (PATH=yes),(PATH=no)&amp;#34;
time=&amp;#34;2023-11-29T16:07:07Z&amp;#34; level=debug msg=&amp;#34;starting get limit lookup&amp;#34;
time=&amp;#34;2023-11-29T16:07:07Z&amp;#34; level=debug msg=&amp;#34;looking up key: PATH_yes&amp;#34;
time=&amp;#34;2023-11-29T16:07:07Z&amp;#34; level=debug msg=&amp;#34;found rate limit: PATH_yes&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，只有当我的路径满足 &lt;em&gt;两个&lt;/em&gt; &lt;code&gt;header_value_match&lt;/code&gt; 时，描述符才会传递给 RLS。我的当前配置正如一个 AND 运算符一样工作。&lt;/p&gt;
&lt;p&gt;然后，一切都归结为：&lt;em&gt;如何在 rate_limit 操作中设置 OR 逻辑而不是 AND？&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;原始配置略有变化，如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# EnvoyFilter 配置路由操作   
        value:
          rate_limits:
            - actions: # 任何操作在此处
              - header_value_match:
                  descriptor_key: &amp;#34;PATH_DELAY&amp;#34;
                  descriptor_value: &amp;#34;yes&amp;#34;
                  headers:
                    - name: &amp;#34;:path&amp;#34;
                      safe_regex_match:
                        google_re2: {}
                        regex: &amp;#34;.*delay.*&amp;#34;
            - actions:
              - header_value_match:
                  descriptor_key: &amp;#34;PATH_STATUS&amp;#34;
                  descriptor_value: &amp;#34;yes&amp;#34;
                  headers:
                    - name: &amp;#34;:path&amp;#34;
                      safe_regex_match:
                        google_re2: {}
                        regex: &amp;#34;.*status.*&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看起来像一个有效的配置，就像：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ curl http://127.0.0.1:8080/delay/1 -H&amp;#34;host: httpbin.com&amp;#34; -v -s -o /dev/null 
*   Trying 127.0.0.1:8080...
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
&amp;gt; GET /delay/1 HTTP/1.1
&amp;gt; Host: httpbin.com
&amp;gt; User-Agent: curl/7.81.0
&amp;gt; Accept: */*
&amp;gt; 
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 200 OK
&amp;lt; server: istio-envoy
&amp;lt; date: Wed, 29 Nov 2023 20:17:02 GMT
&amp;lt; content-type: application/json
&amp;lt; content-length: 703
&amp;lt; access-control-allow-origin: *
&amp;lt; access-control-allow-credentials: true
&amp;lt; x-envoy-upstream-service-time: 1005
&amp;lt; 
{ [703 bytes data]
* Connection #0 to host 127.0.0.1 left intact

❯ curl http://127.0.0.1:8080/delay/1 -H&amp;#34;host: httpbin.com&amp;#34; -v -s -o /dev/null 
*   Trying 127.0.0.1:8080...
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
&amp;gt; GET /delay/1 HTTP/1.1
&amp;gt; Host: httpbin.com
&amp;gt; User-Agent: curl/7.81.0
&amp;gt; Accept: */*
&amp;gt; 
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 429 Too Many Requests &amp;lt;---------- 参见
&amp;lt; x-envoy-ratelimited: true
&amp;lt; date: Wed, 29 Nov 2023 20:17:06 GMT
&amp;lt; server: istio-envoy
&amp;lt; content-length: 0
&amp;lt; 
* Connection #0 to host 127.0.0.1 left intact
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和 RLS 日志：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;time=&amp;#34;2023-11-29T16:33:57Z&amp;#34; level=debug msg=&amp;#34;starting cache lookup&amp;#34;
time=&amp;#34;2023-11-29T16:33:57Z&amp;#34; level=debug msg=&amp;#34;looking up cache key: tetrate-ratelimit_PATH_DELAY_yes_1701275580&amp;#34;
time=&amp;#34;2023-11-29T16:33:57Z&amp;#34; level=debug msg=&amp;#34;cache key: tetrate-ratelimit_PATH_DELAY_yes_1701275580 current: 1&amp;#34;
time=&amp;#34;2023-11-29T16:33:57Z&amp;#34; level=debug msg=&amp;#34;returning normal response&amp;#34;
time=&amp;#34;2023-11-29T16:33:57Z&amp;#34; level=debug msg=&amp;#34;[gostats] flushing time ratelimit_server.ShouldRateLimit.response_time: 0.000000&amp;#34;
time=&amp;#34;2023-11-29T16:33:59Z&amp;#34; level=debug msg=&amp;#34;got descriptor: (PATH_DELAY=yes)&amp;#34;
time=&amp;#34;2023-11-29T16:33:59Z&amp;#34; level=debug msg=&amp;#34;starting get limit lookup&amp;#34;
time=&amp;#34;2023-11-29T16:33:59Z&amp;#34; level=debug msg=&amp;#34;looking up key: PATH_DELAY_yes&amp;#34;
time=&amp;#34;2023-11-29T16:33:59Z&amp;#34; level=debug msg=&amp;#34;found rate limit: PATH_DELAY_yes&amp;#34;
time=&amp;#34;2023-11-29T16:33:59Z&amp;#34; level=debug msg=&amp;#34;applying limit: 1 requests per MINUTE, shadow_mode: false&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相信我，&lt;code&gt;/status&lt;/code&gt; 的限制也是存在的。&lt;/p&gt;
&lt;p&gt;AND/OR逻辑用于速率限制 &lt;code&gt;rate_limits&lt;/code&gt; 配置在其数组中支持多个位置，因此 AND/OR 逻辑操作取决于动作是否嵌套到相同的 &lt;code&gt;actions&lt;/code&gt; 子集中。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：可能有一种更安全、更有效的路径匹配方式，而不是像这个例子中那样打开正则表达式。它很简单，所以我们专注于主题。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Weaveworks 倒闭：云原生行业的变革与挑战</title>
      <link>https://jimmysong.io/trans/end-of-an-era-weaveworks-closes-shop-amid-cloud-native-turbulence/</link>
      <pubDate>Wed, 07 Feb 2024 09:05:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/end-of-an-era-weaveworks-closes-shop-amid-cloud-native-turbulence/</guid>
      <description>
        
        
        &lt;p&gt;Weaveworks 的首席执行官兼联合创始人 Alexis Richardson 在 LinkedIn 上分享了公司关闭的沉重消息。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.weave.works/&#34; title=&#34;Weaveworks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weaveworks&lt;/a&gt;，曾经在云原生容器管理领域是创新的先驱，如今宣布停止运营，这一举动反映了科技初创公司行业不稳定的本质。&lt;/p&gt;
&lt;p&gt;在周一发布的令人惊讶的&lt;a href=&#34;https://www.linkedin.com/posts/richardsonalexis_hi-everyone-i-am-very-sad-to-announce-activity-7160295096825860096-ZS67/&#34; title=&#34;LinkedIn 帖子&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkedIn 帖子&lt;/a&gt;中，Weaveworks 首席执行官宣布公司即将停止运营。&lt;/p&gt;
&lt;p&gt;Weaveworks 的故事是一个典型的初创公司与市场动态和资金约束的潮起潮落的故事。尽管在 2023 年取得了两位数的增长，但公司面临着“波动”的销售和资金不足的局面，加剧了失败的收购谈判，这是许多初创公司都害怕但不可避免地会遇到的情况。&lt;/p&gt;
&lt;p&gt;成立于 2014 年，当时“云原生”这个词更多地是一个噱头而不是一个商业现实时，Weaveworks 立志于用他们的新概念&lt;a href=&#34;https://www.weave.works/technologies/gitops/&#34; title=&#34;GitOps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitOps&lt;/a&gt;来塑造未来的云基础设施管理。然而，尽管有着开拓精神和早期进入市场的优势，但该公司仍然与一个司空见惯的敌人搏斗：财务可持续性。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/weaveworks/weave-gitops&#34; title=&#34;Weave GitOps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weave GitOps&lt;/a&gt;是一个开源软件包，旨在简化从 Git 存储库到 Kubernetes 集群的连续交付（CD）过程中部署应用程序和更新的过程，对公司未来的光明有所期待。然而，这一切都成为了泡影。&lt;/p&gt;
&lt;p&gt;云原生领域的竞争在多年来不断加剧，竞争对手如&lt;a href=&#34;https://circleci.com/&#34; title=&#34;CircleCI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CircleCI&lt;/a&gt;和&lt;a href=&#34;https://www.harness.io/&#34; title=&#34;Harness Labs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Harness Labs&lt;/a&gt;吸引了注意力和资金。Weaveworks 与这些资金更充裕的竞争对手的斗争凸显了初创公司生态系统的残酷现实，即单靠创新并不能保证成功。&lt;/p&gt;
&lt;p&gt;在其生命周期内，&lt;a href=&#34;https://www.crunchbase.com/organization/weaveworks&#34; title=&#34;Weaveworks 筹集了超过 6100 万美元&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weaveworks 筹集了超过 6100 万美元&lt;/a&gt;。但是，该公司 2020 年的最后一轮融资金额为 3600 万美元。这是不错的，但在风险投资界，四年已经是一段漫长的时间了。随着 2022 年经济的下滑，该公司 —— 像许多其他公司一样 —— 首先无法获得更多的投资，然后未能达成一项合并协议，这将为其提供前进的道路。&lt;/p&gt;
&lt;h2 id=&#34;短暂的科技&#34;&gt;短暂的科技&lt;/h2&gt;
&lt;p&gt;Richardson 的公告不仅是告别，也是对科技创业的暂时性提醒。他对公司的结局感到遗憾，但也指出了行业面临的更广泛挑战。这是许多初创公司都能够共鸣的情感，突显了即使是最有前景的企业在面对财务不稳定和市场饱和的现实时也可能失败。&lt;/p&gt;
&lt;p&gt;然而，Weaveworks 的遗产将永存。公司对开源社区的贡献，特别是通过&lt;a href=&#34;https://www.cncf.io/projects/flux/&#34; title=&#34;CNCF Flux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Flux&lt;/a&gt;，证明了其致力于推动云原生技术发展的承诺。Richardson 希望 Flux 能够继续下去。&lt;/p&gt;
&lt;p&gt;“故事并没有就此结束 —— 我们的开源软件被广泛使用。我正在与几个大型组织合作，确保 CNCF Flux 处于最健康的状态，”Richardson 写道。&lt;/p&gt;
&lt;p&gt;在我们回顾 Weaveworks 的关闭时，很明显，科技生态系统既是机遇的乐土，也是耐力的战场。该公司的故事是对驱动科技行业向前发展的创业精神的感人提醒，即使在面对变革的必然性和商业运营的严酷现实时也是如此。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>后 Serverless 时代的云计算趋势分析</title>
      <link>https://jimmysong.io/trans/cloud-computing-post-serverless-trends/</link>
      <pubDate>Fri, 02 Feb 2024 13:05:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/cloud-computing-post-serverless-trends/</guid>
      <description>
        
        
        &lt;h2 id=&#34;主要观点&#34;&gt;主要观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;无服务器计算正在超越其最初的范围，函数部分或完全被多才多艺的云构件取代，标志着云架构的新时代。&lt;/li&gt;
&lt;li&gt;云市场正朝着高度专业化的垂直多云服务转变，提供独特的、精细粒度的功能，专门满足开发人员的需求。&lt;/li&gt;
&lt;li&gt;即将推出的云服务将充满构件，改变开发人员处理路由、过滤和事件触发等任务的方式，使其更高效和用户友好。&lt;/li&gt;
&lt;li&gt;从基础设施即代码转向构件即代码的趋势显著，开发人员使用熟悉的编程语言进行更直观的云服务配置。&lt;/li&gt;
&lt;li&gt;微服务正在云景观中重新定义，从仅仅是架构边界演变为组织边界，在统一的开发者语言下整合各种云构件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AWS Lambda 将在今年迎来其 10 周年之际，无服务器计算不再仅限于“函数即服务”（FaaS）。今天，无服务器描述了不需要手动配置、提供按需自动扩展和使用基于消耗的定价的云服务。这一转变是云计算中更广泛演变的一部分，无服务器技术不断变革。本文关注无服务器之后的未来，探讨云景观将如何发展超越当前的超级扩展模型以及对开发人员和运营团队的影响。我将探讨塑造这一演变的前三大趋势。&lt;/p&gt;
&lt;h2 id=&#34;从基本构件到构件即服务&#34;&gt;从基本构件到构件即服务&lt;/h2&gt;
&lt;p&gt;在软件开发中，“模块”或“组件”通常指的是执行一组协同操作的自包含软件单元。这个概念与通常在长时间运行的计算服务（如虚拟机（VM）或容器服务）上运行的微服务架构相对应。AWS EC2 是第一个广泛可访问的云计算服务之一，提供可扩展的 VM。引入这样的可扩展、可访问的云资源为微服务架构变得实用和普及提供了基础。这种转变导致将庞大的应用程序分解成可独立部署的微服务单元。&lt;/p&gt;
&lt;p&gt;让我们继续使用软件单元的这个类比。函数是一个代码块，封装了一系列具有定义的输入和输出的单一任务的语句序列。这个代码单元与 FaaS 执行模型非常匹配。在事件触发无需管理基础架构的情况下执行代码的 FaaS 概念在 AWS Lambda 之前已经存在，但缺乏广泛的实施和认可。&lt;/p&gt;
&lt;p&gt;在 AWS Lambda 将 FaaS 带入主流之前，已经有了执行代码以响应事件而无需管理基础架构的 FaaS 概念，如 Google App Engine、Azure WebJobs、IronWorker 和 AWS Elastic Beanstalk 等服务。Lambda 作为 FaaS 的首个重大商业实施，通过简化开发人员的部署流程，成为其流行的催化剂。这一进步导致将微服务转变为更小的、可单独扩展的、事件驱动的操作。&lt;/p&gt;
&lt;p&gt;在向作为服务提供的更小软件单元的演进中，人们可能会想知道我们是否会看到基本的编程元素，如表达式或语句作为服务（例如 int x = a + b;）。然而，演进的方向与此不同。相反，我们正在见证函数的最小化和最终由可配置的云构件替代。在软件开发中，构件涵盖了诸如条件语句（if-else、switch 语句）、循环（for、while）、异常处理（try-catch-finally）或用户定义的数据结构等元素，这些元素在控制程序流程或管理复杂数据类型方面发挥着重要作用。在云服务中，构件与能够组成分布式应用程序的能力相一致，它们互相链接软件模块，如微服务和函数，并管理它们之间的数据流。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cloud-computing-post-serverless-trends/f1_hu2af43fe4a71a9d2c64e3fa98f41d525b_44219_1231x480_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cloud-computing-post-serverless-trends/f1.jpg&#34; data-img=&#34;/trans/cloud-computing-post-serverless-trends/f1.jpg&#34; data-width=&#34;1231&#34; data-height=&#34;480&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;云构件取代函数，取代微服务，取代庞大的应用程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然以前可能使用函数来过滤、路由、批量处理、拆分事件，或调用另一个云服务或函数，但现在这些操作以及更多操作都可以在你的函数中使用更少的代码，或者在许多情况下根本不需要函数代码。它们可以被可配置的云构件替代，这些构件是云服务的一部分。让我们看一些 AWS 的具体示例，以演示从 Lambda 函数代码到云构件的过渡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求路由&lt;/strong&gt; - 不再使用 Lambda 来解析请求并将其路由到正确的后端端点，而是可以使用&lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-routes.html&#34; title=&#34;API Gateway 路由&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API Gateway 路由&lt;/a&gt;进行路由。而且，API Gateway 还可以与其他 AWS 服务集成，直接调用它们，消除了对函数的需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求验证&lt;/strong&gt; - API Gateway 可以使用 OpenAPI 验证请求的主体、查询字符串参数和标头。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据转换&lt;/strong&gt; - API Gateway 可以使用 Apache Velocity 模板来&lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html&#34; title=&#34;转换&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;转换&lt;/a&gt;请求和响应数据，以覆盖有效载荷、参数、标头和状态代码，而无需使用 Lambda。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流式数据库更改&lt;/strong&gt; - &lt;a href=&#34;https://aws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns/&#34; title=&#34;DynamoDB Streams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DynamoDB Streams&lt;/a&gt;会发出所有数据更改。这对于任何数据存储来说都是一个必要的构件，消除了应用程序代码的双重写入和任何数据轮询代码，通过&lt;a href=&#34;https://www.infoq.com/articles/microservices-inside-out/&#34; title=&#34;将微服务内外颠倒&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将微服务内外颠倒&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件触发&lt;/strong&gt; - &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html&#34; title=&#34;AWS 事件源映射&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS 事件源映射&lt;/a&gt;允许通过从事件源读取并调用 Lambda 函数来触发 Lambda。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件过滤&lt;/strong&gt; - &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html&#34; title=&#34;事件源映射&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;事件源映射&lt;/a&gt;可以执行事件过滤，以控制从流或队列中调用 Lambda 函数的哪些记录。这消除了在函数内编写过滤逻辑的需要，并大大减小了函数的大小和成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件批处理&lt;/strong&gt; - 类似地，事件源映射会将记录批处理成单个有效载荷，然后发送给你的函数。不需要手动循环聚合事件或在处理之前拆分它们。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件转换&lt;/strong&gt; - &lt;a href=&#34;https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-input-transformation.html&#34; title=&#34;EventBridge Pipes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EventBridge Pipes&lt;/a&gt;可以在将数据发送到目标之前使用 JSON 路径语法来转换源数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件丰富化&lt;/strong&gt; - EventBridge Pipes 还可以调用另一个端点来丰富请求，然后进一步处理它。这提供了可以完全声明性使用的&lt;a href=&#34;https://www.enterpriseintegrationpatterns.com/patterns/messaging/DataEnricher.html&#34; title=&#34;内容丰富器模式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内容丰富器模式&lt;/a&gt;的实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件路由&lt;/strong&gt; - 与请求路由类似，EventBridge &lt;a href=&#34;https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-rules.html&#34; title=&#34;规则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;规则&lt;/a&gt;可以执行事件路由，允许你从应用程序代码中卸载此责任，并消除 Lambda 函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于结果的路由&lt;/strong&gt; - Lambda &lt;a href=&#34;https://aws.amazon.com/blogs/compute/introducing-aws-lambda-destinations/&#34; title=&#34;Destination&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Destination&lt;/a&gt;允许异步调用将执行结果路由到其他 AWS 服务，以配置代码替换 Lambda 调用代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用其他服务&lt;/strong&gt; - &lt;a href=&#34;https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-services.html&#34; title=&#34;StepFunction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StepFunction&lt;/a&gt; 任务不需要 Lambda 函数来调用其他服务或外部 HTTP 端点。通过这种方式，StepFunction 任务定义可以执行例如&lt;a href=&#34;https://aws.amazon.com/blogs/aws/external-endpoints-and-testing-of-task-states-now-available-in-aws-step-functions/&#34; title=&#34;执行 HTTP 调用&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;执行 HTTP 调用&lt;/a&gt;或读取、更新和删除数据库记录等操作，而无需 Lambda 函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这只是应用程序代码构件变成无服务器云构件的一些示例。你可以通过配置验证输入值，而不是在函数中使用 if-else 逻辑。你可以在函数之外声明性地定义路由逻辑，而不是使用 case 或 switch 语句从函数内调用其他代码。事件可以在数据更改时触发，批处理或拆分，无需重复构造，例如 for 或 while 循环。&lt;/p&gt;
&lt;p&gt;事件可以在没有函数的情况下进行验证、转换、批处理、路由、过滤和丰富。故障可以在没有 try-catch 代码的情况下进行处理和定向到 &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2023/06/amazon-sqs-dead-letter-queue-redrive-aws-sdk-cli/&#34; title=&#34;DLQs 和回退&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DLQs 和回退&lt;/a&gt;，而成功完成可以定向到其他函数和服务端点。将这些构件从应用程序代码移到构件配置中减少了应用程序代码的大小，或者将其移除，消除了安全修补和任何维护的需要。&lt;/p&gt;
&lt;p&gt;在编程中，原语和构件具有不同的含义和作用。原语是编程语言固有的基本数据类型。它包含了基本值，例如整数、浮点数、布尔值或字符，不包含其他类型。与此概念类似，云 - 就像一个巨大的编程运行时 - 正在从基础设施原语（如网络负载均衡器、虚拟机、文件存储和数据库）进化为更精致和可配置的云构件。&lt;/p&gt;
&lt;p&gt;与编程构件类似，这些云构件编排分布式应用程序交互并管理复杂的数据流。然而，这些构件不是孤立的云服务；没有独立的“过滤器服务”或“事件发射器服务”。没有“构件作为服务”，但它们越来越成为核心云原语（如网关、数据存储、消息代理和函数运行时）的重要功能。&lt;/p&gt;
&lt;p&gt;这种演进降低了应用程序代码的复杂性，并在许多情况下消除了自定义函数的需求。这从 FaaS 到 NoFaaS（无麻烦，意味着简单）的转变刚刚开始，有深入的&lt;a href=&#34;https://www.youtube.com/watch?v=sdCA0Y7QDrM&#34; title=&#34;演讲&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演讲&lt;/a&gt;和 GitHub 上的代码示例。接下来，我将探讨垂直多云服务中构件丰富的云服务的出现。&lt;/p&gt;
&lt;h2 id=&#34;从超大规模到超专业化&#34;&gt;从超大规模到超专业化&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://www.diagrid.io/blog/evolution-of-cloud-computing&#34; title=&#34;无服务器后云时代&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;无服务器后云时代&lt;/a&gt;，仅提供高度可扩展的云原语（如容器和函数的计算，或诸如键/值存储、事件存储、关系数据库或网络原语等存储服务）已经不再足够。无服务器后云服务必须富含开发者构件，并卸载应用程序的大部分基础设施。这超越了为广泛用户群体进行通用云服务的超大规模；它涉及深度专业化，并向更具要求的用户公开高级构件。&lt;/p&gt;
&lt;p&gt;像 AWS、Azure、GCP 等超大规模云服务提供商，凭借其广泛的服务范围和庞大的用户群体，很好地把握了新用户需求和构件。然而，提供这些更细粒度的开发者构件会增加复杂性。每个服务中的每个新构件都需要深入学习曲线以了解其有效利用的特定内容。因此，在无服务器后时代，我们将看到垂直多云服务的兴起，这些服务在一个领域表现出色。这代表了云服务的超专业化。&lt;/p&gt;
&lt;p&gt;以 Confluent Cloud 为例。虽然所有主要的超大规模云服务提供商（AWS、Azure、GCP 等）都提供 Kafka 服务，但没有一家能够与 Confluent Cloud 提供的开发者体验和构件相匹配。通过其 Kafka 代理、众多的 Kafka 连接器、集成的模式注册表、Flink 处理、数据治理、跟踪和消息浏览器，Confluent Cloud 提供了最丰富和专业化的 Kafka 服务，超越了超大规模云服务提供商的提供。&lt;/p&gt;
&lt;p&gt;这种趋势并不孤立；许多例子包括 MongoDB Atlas 与 DocumentDB、GitLab 与 CodeCommit、DataBricks 与 EMR、RedisLabs 与 ElasticCache 等。除了已建立的云公司外，新一波初创公司正在崭露头角，专注于一个多云原语（如专业化的计算、存储、网络、构件流水线、监控等）并通过开发者构件来丰富它，以提供独特的价值主张。以下是一些专门化于单一开源技术的云服务，旨在提供丰富的构件体验，并吸引用户远离超大规模云服务提供商：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://vercel.com/&#34; title=&#34;Vercel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vercel&lt;/a&gt;：以其出色的前端开发者体验而闻名，简化了 Web 应用程序的部署。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://railway.app/&#34; title=&#34;Railway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Railway&lt;/a&gt;：以增强后端开发者体验以及简单的部署和扩展管理而著名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://supabase.com/&#34; title=&#34;Supabase&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Supabase&lt;/a&gt;：是 Firebase 的开源替代方案，提供更灵活的相似功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fauna.com/&#34; title=&#34;Fauna&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fauna&lt;/a&gt;：以声明性关系查询和强一致性事务中的功能业务逻辑而闻名的无服务器数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://neon.tech/&#34; title=&#34;Neon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Neon&lt;/a&gt;：提供最简单的无服务器 PostgreSQL，具有数据库分支和最小管理开销等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://planetscale.com/&#34; title=&#34;PlanetScale&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PlanetScale&lt;/a&gt;：以高级 MySQL 云服务而闻名，侧重于开发友好的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://polyscale.ai/&#34; title=&#34;PolyScale&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PolyScale&lt;/a&gt;：专注于通过智能缓存优化数据性能的 AI 驱动缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://upstash.com/&#34; title=&#34;Upstash&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Upstash&lt;/a&gt;：提供全托管的低延迟无服务器 Kafka 解决方案，适用于事件流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.diagrid.io/catalyst&#34; title=&#34;Diagrid Catalyst&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Diagrid Catalyst&lt;/a&gt;：提供用于消息、数据和工作流的无服务器 Dapr API，充当云服务之间的连接纽带。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://temporal.io/&#34; title=&#34;Temporal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Temporal&lt;/a&gt;：提供持久的执行，为可靠管理复杂工作流程提供平台。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个列表代表了一个不断增长的生态系统的一部分，这个生态系统是建立在超大规模云服务提供商提供的核心云原语之上的垂直多云服务。它们通过提供一套全面的可编程构件和增强的开发者体验来竞争。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cloud-computing-post-serverless-trends/f2_hu81d2c012dc32729ef0c06650105a1c99_90677_1188x669_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cloud-computing-post-serverless-trends/f2.jpg&#34; data-img=&#34;/trans/cloud-computing-post-serverless-trends/f2.jpg&#34; data-width=&#34;1188&#34; data-height=&#34;669&#34; alt=&#34;image&#34; data-caption=&#34;无服务器云服务通过丰富的开发人员构造，超专业地处理一件事&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;无服务器云服务通过丰富的开发人员构造，超专业地处理一件事&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;一旦完成了这个过渡，缺乏丰富构件的基本云服务，甚至是无服务器的云服务，都会显得像过时的本地软件。存储服务必须像 DynamoDB 一样流式传输更改；消息代理应包括类似于 EventBridge 的构件，用于事件驱动的路由、过滤和终端点调用，包括重试和 DLQs；发布/订阅系统应提供消息批处理、拆分、过滤、转换和丰富功能。&lt;/p&gt;
&lt;p&gt;最终，虽然超大规模云服务提供商通过不断增加的服务数组在水平方向扩展，但超专业化服务提供商在垂直方向增长，提供一个丰富构件的最佳服务，形成一个&lt;a href=&#34;https://www.infoq.com/articles/cloud-bound-applications/&#34; title=&#34;生态系统&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;生态系统&lt;/a&gt;的垂直多云服务。云服务竞争的未来将从基础设施原语转向核心云原语和面向开发者的构件的组合。&lt;/p&gt;
&lt;h2 id=&#34;从基础设施到组合即代码cac&#34;&gt;从基础设施到组合即代码（CaC）&lt;/h2&gt;
&lt;p&gt;云构件越来越模糊了应用程序和基础设施职责之间的界限。下一个演进是云自动化的“左移”，将应用程序和自动化代码集成为工具和责任的一部分。让我们看看这个过渡是如何展开的。&lt;/p&gt;
&lt;p&gt;云基础设施管理的第一代是由基础设施即代码（IaC）定义的，这是一种旨在简化基础设施的供应和管理的模式。这种方法建立在云计算中虚拟化的商品化趋势的基础上。&lt;/p&gt;
&lt;p&gt;最初的 IaC 工具引入了专门用于以可重复的方式创建、配置和管理云资源的领域特定语言（DSL）。像 Chef、Ansible、Puppet 和 Terraform 这样的工具引领了这个阶段。这些工具利用了声明性语言，允许运维团队以代码定义基础设施的期望状态，抽象出底层的复杂性。&lt;/p&gt;
&lt;p&gt;然而，随着云计算从低级粗粒度基础设施过渡到更面向开发者的可编程细粒度构件，使用现有通用编程语言来定义这些构件的趋势正在兴起。新的参与者，如 Pulumi 和 AWS Cloud Development Kit（CDK），处于这一浪潮的前沿，支持诸如 TypeScript、Python、C#、Go 和 Java 等语言。&lt;/p&gt;
&lt;p&gt;采用通用编程语言的转变是由于需要克服声明性语言的局限性，后者在以编程方式定义云构件方面缺乏表现力和灵活性，并且由于云构件配置的责任从运维转向开发者。与适用于低级静态基础设施的声明性语言的静态性质不同，通用编程语言使开发者能够定义动态、逻辑驱动的云构件，实现与应用程序代码更紧密的对齐。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cloud-computing-post-serverless-trends/f3_hu8b369d7de1b4dfcb4a7596d847746bcc_63367_1060x602_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cloud-computing-post-serverless-trends/f3.jpg&#34; data-img=&#34;/trans/cloud-computing-post-serverless-trends/f3.jpg&#34; data-width=&#34;1060&#34; data-height=&#34;602&#34; alt=&#34;image&#34; data-caption=&#34;将应用程序的组成从基础设施转移到开发人员团队&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;将应用程序的组成从基础设施转移到开发人员团队&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;无服务器后云开发人员需要通过创建函数和微服务来实现业务逻辑，但还需要使用可编程云构件将它们组合在一起。这塑造了更广泛的开发者责任集，用于开发和组合云应用程序。例如，具有 Lambda 函数中的业务逻辑的代码还需要 API Gateway 中的路由、过滤和请求转换配置。&lt;/p&gt;
&lt;p&gt;另一个 Lambda 函数可能需要 DynamoDB 流配置来流式传输特定数据更改，EventBridge 路由、过滤和丰富配置。&lt;/p&gt;
&lt;p&gt;第三个应用程序可能将其大部分编排逻辑表达为 StepFunction，其中 Lambda 代码只是一个小任务。开发者，而不是平台工程师或运维成员，可以将这些代码单元组合在一起。工具，如 Pulumi、AWS CDK 和其他工具，允许开发者使用他们选择的语言来实现函数，并使用相同的语言来组合它与云环境的交互，最适合这个时代。&lt;/p&gt;
&lt;p&gt;平台团队仍然可以使用声明性语言，比如 Terraform，来管理、保护、监视和启用云环境中的团队，但以开发者为重点的构件，结合以开发者为重点的云自动化语言，将云构件向左移动，并使开发者能够自助使用云服务成为现实。&lt;/p&gt;
&lt;p&gt;从 DSL 到通用编程语言的过渡标志着 IaC 演进的重要里程碑。它承认了应用程序代码向云构件的过渡，这些构件通常需要开发者更深入地控制资源以满足应用程序需求。这个转变代表了 IaC 工具的成熟，现在需要满足更广泛的基础设施编排需求，为更复杂、更高级的抽象和工具铺平了道路。&lt;/p&gt;
&lt;p&gt;基础设施管理的过程将从静态配置转向更加动态、基于代码的方法。这一演进不仅仅止步于基础设施即代码，它正在超越到一个更加微妙的领域，被称为组合即代码。这一范式进一步模糊了应用程序代码和基础设施之间的界限，导致更加流畅、高效和开发者友好的实践。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总结趋势及其加强效应，我们观察到编程构件逐渐整合到云服务中。每个计算服务都将集成 CI/CD 流水线；数据库将提供来自边缘的 HTTP 访问并发出更改事件；消息代理将通过过滤、路由、幂等性、转换、DLQ 等功能增强能力。&lt;/p&gt;
&lt;p&gt;基础设施服务正在演变为无服务器 API、从代码中推断的基础设施 (&lt;a href=&#34;https://klo.dev/state-of-infrastructure-from-code-2023/&#34; title=&#34;IfC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IfC&lt;/a&gt;)、&lt;a href=&#34;https://vercel.com/blog/framework-defined-infrastructure&#34; title=&#34;框架定义的基础设施&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;框架定义的基础设施&lt;/a&gt;，或由开发者明确组合 (CaC)。这一演进导致了更小的函数，有时甚至是 NoFaaS 模式，为超专业化、以开发者为先的垂直多云服务铺平了道路。这些服务将提供&lt;a href=&#34;https://thenewstack.io/raising-the-serverless-bar-infrastructure-apis-unleash-more-value-for-enterprises/&#34; title=&#34;可编程 API 的基础设施&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可编程 API 的基础设施&lt;/a&gt;，使开发者能够无缝地使用他们喜欢的编程语言合并其应用程序。&lt;/p&gt;
&lt;p&gt;使用云服务进行应用程序构件的左移将与应用程序编程越来越融合，将微服务从一种架构风格转变为一种组织风格。一个微服务将不再只是一个单一的部署单元或过程边界，而是由开发者选择的单一语言中实现和粘合的函数、容器和云构件组成。未来正在成为超专业化，并专注于以开发者为先的云。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Cilium 和 BGP 为 Kubernetes 服务进行负载均衡</title>
      <link>https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/</link>
      <pubDate>Tue, 30 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/</guid>
      <description>
        
        
        &lt;p&gt;Cilium 是一个开源项目，旨在为云原生环境提供网络、安全和可观测性，例如 Kubernetes 集群和其他容器编排平台。本博客展示了如何使用 Cilium 和 BGP 将您的 Kubernetes 服务暴露给外部世界。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP&lt;/strong&gt;
边界网关协议（BGP）是一种标准化的外部网关协议，旨在在互联网上的自治系统（AS）之间交换路由和可达性信息。该协议被分类为路径矢量协议，因此它根据由网络管理员配置的路径、网络策略或规则集来做出路由决策。它参与制定核心路由决策，这使得它对互联网的正常运行至关重要。&lt;/p&gt;
&lt;p&gt;BGP 专为健壮性和可扩展性而开发，用于在大型网络之间路由数据，包括 ISP 和其他大型组织。它确保了无环的域间路由，并有助于维护稳定的网络结构。BGP 可以处理数千个路由，并以其随着网络增长而扩展的能力而脱颖而出。由于其灵活性和对路由策略的控制，它被广泛使用，使其能够快速响应网络变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cilium 和 BGP&lt;/strong&gt;
在版本 1.10 中，Cilium 集成了对 MetalLB 的 BGP 支持，从而使其能够宣布 Kubernetes 服务的 IP 地址类型为&lt;a href=&#34;https://sue.eu/insights/bgp-load-balancing/&#34; title=&#34;使用 BGP 的 LoadBalancer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 BGP 的 LoadBalancer&lt;/a&gt;。其结果是，服务可以从 Kubernetes 网络外部访问，无需额外的组件，例如 Ingress 路由器。特别是“无需额外组件”的部分是令人振奋的消息，因为每个组件都会增加延迟，因此没有额外组件会减少延迟。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_huc0027cec4f219049b7ce0f71ae3f2ecf_58915_1024x895_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1.jpg&#34; data-img=&#34;/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;895&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;此示例中显示的网络配置代表了具有用于服务负载均衡的 BGP 集成的基于 Kubernetes 的环境。以下是配置的详细信息：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端网络（LAN 网络）：&lt;/strong&gt; 存在一个具有 IP 范围 192.168.10.0/24 的本地区域网络（LAN），连接了多个客户端。该网络包含了设置的用户端，用户和其他设备可以在其中访问托管在 Kubernetes 集群上的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 网络：&lt;/strong&gt; Kubernetes 集群具有自己的网络空间，由子网 192.168.1.0/24 指定。该网络包括 Kubernetes 主节点（k8s-master1）和多个工作节点（从 k8s-worker1 到 k8s-worker5）。这些节点托管了 Kubernetes 集群的实际容器和工作负载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管理网络：&lt;/strong&gt; 一个独立的管理网络，至少有一个设备（k8s-control）用于控制和管理 Kubernetes 集群。这与 Kubernetes 数据平面分开，以确保安全性和管理效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP 路由器：&lt;/strong&gt; bgp-router1 桥接了外部网络/互联网和 Kubernetes 网络。它负责使用 BGP 来广播路由将流量路由到 Kubernetes 集群中的适当服务。IP 范围 172.16.10.0/24 保留供 Kubernetes 集群内的 LoadBalancer 服务使用。当将 Kubernetes 服务公开为 LoadBalancer 时，它会分配一个来自此池的 IP 地址。然后，BGP 路由器将此 IP 广播到外部网络，从而使流量路由到 LoadBalancer 服务。&lt;/p&gt;
&lt;p&gt;此网络配置允许通过利用 BGP 进行 IP 地址管理和路由来实现运行在 Kubernetes 集群上的服务的可扩展和灵活的负载均衡。它将客户端访问、集群管理和服务流量分别分隔到不同的网络中，以进行组织和安全性目的。&lt;/p&gt;
&lt;h2 id=&#34;暴露服务&#34;&gt;暴露服务&lt;/h2&gt;
&lt;p&gt;一旦构建了上述基础架构，就可以创建一个部署并使用 BGP 将其暴露给网络。让我们从一个部署开始，其中包含一个简单的 NGINX Web 服务器，提供默认的 Web 页面。我们还添加了一个类型为 LoadBalancer 的 Service。这将导致使用 BGP 向我们的路由器宣布外部 IP 地址。&lt;/p&gt;
&lt;p&gt;一旦构建完成，命令 &lt;code&gt;kubectl get svc&lt;/code&gt; 显示我们的服务具有外部 IP 地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAME          TYPE           CLUSTER-IP       EXTERNAL-IP       PORT(S)         AGE
kubernetes    ClusterIP      10.96.0.1        &amp;lt;none&amp;gt;            443/TCP         7d3h
web1-lb       LoadBalancer   10.106.236.120   172.16.10.0       80:30256/TCP    7d2h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;172.16.10.0 这个地址看起来很奇怪，但没问题。通常会跳过.0 地址，而使用.1 地址作为第一个地址。其中一个原因是在早期，.0 地址用于广播，后来改为.255。由于.0 仍然是一个有效的地址，负责地址池的 MetalLB 会将其分配为第一个地址。在路由器 bgp-router1 上运行的命令 &lt;code&gt;vtysh -c &#39;show bgp summary&#39;&lt;/code&gt; 显示它已接收到一个前缀：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;IPv4 Unicast description:
BGP router identifier 192.168.1.1, local AS number 64512 vrf-id 0
BGP table version 17
RIB entries 1, using 192 bytes of memory
Peers 6, using 128 KiB of memoryNeighbour V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt
192.168.1.10 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.21 4 64512 446 435 0 0 0 03:36:54 1 0
192.168.1.22 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.23 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.24 4 64512 446 435 0 0 0 03:36:56 1 0
192.168.1.25 4 64512 445 435 0 0 0 03:36:56 1 0

Total number of neighbors 6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;路由表的以下片段（ip route）告诉我们，对于特定的 IP 地址 172.16.10.0，存在 6 个可能的路由/目标。换句话说，所有 Kubernetes 节点都宣布它们正在处理该地址的流量。太棒了！！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;172.16.10.0 proto bgp metric 20
nexthop via 192.168.1.10 dev enp7s0 weight 1
nexthop via 192.168.1.21 dev enp7s0 weight 1
nexthop via 192.168.1.22 dev enp7s0 weight 1
nexthop via 192.168.1.23 dev enp7s0 weight 1
nexthop via 192.168.1.24 dev enp7s0 weight 1
nexthop via 192.168.1.25 dev enp7s0 weight 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上，现在从我们的路由器上可以看到 Web 页面。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -s -v http://172.16.10.0/ -o /dev/null

* Trying 172.16.10.0…
* TCP_NODELAY set
* Connected to 172.16.10.0 (172.16.10.0) port 80 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: 172.16.10.0
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Accept: */*
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Server: nginx/1.21.3
&amp;lt; Date: Sun, 31 Oct 2023 14:19:17 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: 615
&amp;lt; Last-Modified: Tue, 07 Sep 2023 15:21:03 GMT
&amp;lt; Connection: keep-alive
&amp;lt; ETag: “6137835f-267”
&amp;lt; Accept-Ranges: bytes&amp;gt;
{ [615 bytes data]}
* Connection #0 to host 172.16.10.0 left intact
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而且，位于我们客户端网络中的客户端也可以访问相同的页面，因为它使用 bgp-router1 作为默认路由。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hua74f243ba1f8352a252e4c249554adf9_22316_598x345_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2.jpg&#34; data-img=&#34;/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2.jpg&#34; data-width=&#34;598&#34; data-height=&#34;345&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;更多细节&#34;&gt;更多细节&lt;/h2&gt;
&lt;p&gt;现在一切都运作正常，大多数工程师都想看到更多细节，所以我不会让你失望。&lt;/p&gt;
&lt;h3 id=&#34;ping&#34;&gt;Ping&lt;/h3&gt;
&lt;p&gt;你将注意到的第一件事是，LoadBalancer 的 IP 地址无法通过 ping 访问。深入挖掘一下可以揭示原因。我们创建了源端口 80 和目标端口 80 之间的映射。此映射在接口上使用 eBPF 逻辑执行，并存在于所有节点上。此映射确保只有端口 80 的流量被均衡。所有其他流量，包括 ping，都不被接收。这就是为什么你可以看到 icmp 数据包到达节点，但从未发送响应的原因。&lt;/p&gt;
&lt;h3 id=&#34;观察流量&#34;&gt;观察流量&lt;/h3&gt;
&lt;p&gt;Hubble 是建立在 eBPF 和 Cilium 之上的网络和安全性可观测平台。通过命令行和图形 Web GUI，可以查看当前和历史流量。在这个示例中，Hubble 放置在 k8s-control 节点上，该节点直接访问 Hubble Relay 的 API。Hubble Relay 是从 Cilium 节点获取所需信息的组件。请注意，Hubble 命令也存在于每个 Cilium 代理 Pod 中，但那个命令只会显示特定代理的信息！以下输出显示了从路由器上执行 curl http://172.16.10.0/ 命令后的观察者信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hubble observe –namespace default –follow

Oct 31 15:43:41.382: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: SYN)
Oct 31 15:43:41.384: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.384: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:43:41.385: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.385: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.386: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:43:41.386: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之前，我警告过不要在 Cilium 代理 Pod 内使用 hubble 命令，但在特定节点流量中看到具体的情况也可以非常有信息价值。在这种情况下，每个 Cilium 代理 Pod 中都执行了 &lt;code&gt;hubble observe –namespace default –follow&lt;/code&gt;，并且路由器的 curl 执行了一次。&lt;/p&gt;
&lt;p&gt;在托管 Pod 的节点（k8s-worker2）上，我们看到与上面的输出相同的输出。但是，在另一个 Pod（k8s-worker1）上，我们看到以下输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Oct 31 15:56:05.220: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: SYN)
Oct 31 15:56:05.220: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: SYN, ACK)
Oct 31 15:56:05.220: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:05.221: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:05.221: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:05.222: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:05.222: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:05.222: 10.0.3.103:48278 -&amp;gt; default/web1

-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:12.739: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: SYN)
Oct 31 15:56:12.739: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: SYN, ACK)
Oct 31 15:56:12.742: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:12.742: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:12.745: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:12.749: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:12.749: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: ACK, FIN)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在这里看到的是，我们的路由器将 IP 地址 172.16.10.0 的流量发送到 k8s-worker1，但该工作节点不托管我们的 web1 容器，因此它将流量转发到处理流量的 k8s-worker2。所有的转发逻辑都使用 eBPF 处理 - 附加到接口的一个小的 BPF 程序将在需要时发送流量和路由到另一个工作节点。这也是为什么在 k8s-worker1 上运行 tcpdump，初始接收到流量的地方，不会显示任何流量的原因。它已经在进入 k8s-worker1 的 IP 堆栈之前被重定向到 k8s-worker2。&lt;/p&gt;
&lt;p&gt;我们的合作伙伴 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/ebpf/intro/&#34; title=&#34;Isovalent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Isovalent&lt;/a&gt; 有很多关于 eBPF 和内部工作原理的信息。如果你还没有听说过 eBPF，而且你对 Linux 和/或网络感兴趣，请务必探索一下基础知识。在我看来，eBPF 将在不久的将来彻底改变 Linux 的网络，特别是对于云原生环境！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io/&#34; title=&#34;Cilium.io &#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium.io &lt;/a&gt;上有很多关于 eBPF 和内部工作原理的信息。如果你还没有听说过 eBPF，而且你对 Linux 和/或网络感兴趣，请务必了解至少基础知识。在我看来，eBPF 将在不久的将来彻底改变 Linux 的网络，特别是对于云原生环境！&lt;/p&gt;
&lt;h3 id=&#34;hubble-web-gui&#34;&gt;Hubble Web GUI&lt;/h3&gt;
&lt;p&gt;通过一个工作正常的 BGP 设置，使 Hubble Web GUI 对外界也很简单。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu19c8bc06258ac49725e20a7cd729c9d4_62707_1500x826_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3.jpg&#34; data-img=&#34;/trans/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3.jpg&#34; data-width=&#34;1500&#34; data-height=&#34;826&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;最后的话&#34;&gt;最后的话&lt;/h2&gt;
&lt;p&gt;通过 MetalLB 的集成，使用 BGP 设置 Cilium 变得非常简单，消除了昂贵的网络硬件的需求。Cilium/BGP 的这种组合，特别是与停用 kube-proxy 结合使用，显著降低了到云端服务的延迟。它还通过仅宣布 LoadBalancer 的 IP 地址来增强安全性和透明性。虽然这种设置不需要 Ingress Controller，但对于大多数 HTTP 服务仍然建议使用一个。像 NGINX 或 Traefik 这样的控制器，通过 BGP 公开，提供协议级别的重写和请求速率限制等重大优势。&lt;/p&gt;
&lt;p&gt;这种云原生和基于 Linux 的网络的进步确实是一个飞跃，标志着网络技术的激动人心的时代！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Cilium 的控制平面升级之路：xDS API 的引入与应用</title>
      <link>https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/</link>
      <pubDate>Mon, 29 Jan 2024 20:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/</guid>
      <description>
        
        
        &lt;p&gt;在这篇博客中，我们将探讨当前的 Cilium 控制平面设计，&lt;a href=&#34;https://github.com/cilium/cilium/issues/30283&#34; title=&#34;大规模部署可能出现的限制的位置和原因&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大规模部署可能出现的限制的位置和原因&lt;/a&gt;，以及社区如何使用 CNCF 的 &lt;a href=&#34;https://github.com/cncf/xds&#34; title=&#34;通用数据平面 (xDS) API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;通用数据平面 (xDS) API&lt;/a&gt; 推进这个架构。&lt;/p&gt;
&lt;h2 id=&#34;了解-cilium-的控制平面架构&#34;&gt;了解 Cilium 的控制平面架构&lt;/h2&gt;
&lt;p&gt;Cilium 遵循基于“数据平面”和“控制平面”的常见网络架构。在 Cilium 中，数据平面部署在每个主机（或 Kubernetes 节点）上，包括用于处理 L3/L4 连接和策略的 eBPF 程序。为了简化起见，对于完整性，Cilium 还在其数据平面中使用 Envoy 代理处理 L7 策略，但我们将省略这部分。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f1_huc884a16806c306e29d90f188177ce15d_29921_704x1024_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f1.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/f1.jpg&#34; data-width=&#34;704&#34; data-height=&#34;1024&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;Cilium 控制平面以 cilium-agent 守护程序的形式实现，部署在每个 Kubernetes 节点上。每个 cilium-agent 都是控制平面的单独、独立的实例。&lt;/p&gt;
&lt;p&gt;cilium-agent 连接到 Kubernetes API 服务器，监视配置更改，然后使用它来配置数据平面。cilium-agent 还将配置写入 Kubernetes API，表示正在其各自节点上创建的端点或标识。&lt;/p&gt;
&lt;p&gt;例如，当在 Kubernetes 节点上启动一个 Pod 时，cilium-agent 负责编写一个 CiliumEndpoint 自定义资源（CR），并可能是一个表示 Pod 网络标识的 CiliumIdentity CR。cilium-agent 还会更新与标识和端点映射相关的节点上的 eBPF 映射。其他 Kubernetes 节点上的 cilium-agent 也会监视这些新的 CiliumEndpoint 和 CiliumIdentity CR 的创建，并更新其本地的 eBPF 数据平面以执行策略。这种机制能够协调每个节点上的全局策略执行配置，以便所有节点看到相同的执行行为。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f2_hu9bc46edfbf4c7931aa282f5d845e7a5b_99091_2048x1350_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f2.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/f2.jpg&#34; data-width=&#34;2048&#34; data-height=&#34;1350&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;构建控制平面的最佳实践&#34;&gt;构建控制平面的最佳实践&lt;/h2&gt;
&lt;p&gt;我们以前 &lt;a href=&#34;https://www.solo.io/blog/building-a-control-plane-for-envoy/&#34; title=&#34;曾多次在博客中&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;曾多次在博客中&lt;/a&gt; &lt;a href=&#34;https://www.solo.io/blog/guidance-for-building-a-control-plane-for-envoy-part-3-domain-specific-configuration/&#34; title=&#34;讨论过构建&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;讨论过构建&lt;/a&gt; &lt;a href=&#34;https://www.solo.io/blog/why-the-control-plane-matters/&#34; title=&#34;可扩展、安全、高效的控制平面的最佳实践&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可扩展、安全、高效的控制平面的最佳实践&lt;/a&gt;。在深入研究如何扩展 Cilium 的控制平面之前，我们应该回顾一些这些最佳实践。&lt;/p&gt;
&lt;p&gt;网络架构中的数据平面应该尽可能简单，性能高，以及高效完成它需要做的事情：在本例中，来回传输字节，实施策略，并执行安全性。控制平面的作用是保护数据平面免受复杂性的干扰，以及任何分散数据平面核心任务的事物。&lt;/p&gt;
&lt;p&gt;另一方面，用户需要能够以最适合他们用户体验的形式指定配置和策略。很多时候，通过某种 &lt;a href=&#34;https://www.solo.io/blog/guidance-for-building-a-control-plane-for-envoy-part-3-domain-specific-configuration/&#34; title=&#34;特定领域的配置格式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;特定领域的配置格式&lt;/a&gt; 来实现。然后需要将这种更高级别的用户配置与基础设施状态相结合，并将其转化为较低级别的数据平面格式。转译是一半的战斗。还需要将较低级别的配置分发到数据平面，并高效地执行。这就是控制平面出现在画面中的地方。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f3_hu287aa85ed2f8c6a5d0c7f8770bc2f8d7_23325_768x1104_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f3.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/f3.jpg&#34; data-width=&#34;768&#34; data-height=&#34;1104&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;控制平面允许配置解耦并与平台的其他部分集成，这些部分随后可以通知数据平面。在许多方面，这个图表与我们构建应用程序时使用的 &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier&#34; title=&#34;三层架构&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;三层架构&lt;/a&gt; 类似：表示层，解耦的业务逻辑层和数据存储。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f4_hu1e09b223e67c243936ca8ec32625a375_17623_718x1024_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f4.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/f4.jpg&#34; data-width=&#34;718&#34; data-height=&#34;1024&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;在网络架构的情况下，控制平面层将处理读取/写入 Kubernetes API 和创建网络标识等敏感数据。由于它是一个单独的层，我们可以对其进行安全和硬化处理，并消除数据平面需要执行这些任务的权限。在许多情况下，虽然开始时更简单，但合并一些层会导致效率低下、安全问题和扩展/耦合问题。&lt;/p&gt;
&lt;h2 id=&#34;cilium-控制平面架构的扩展考虑&#34;&gt;Cilium 控制平面架构的扩展考虑&lt;/h2&gt;
&lt;p&gt;集群中的每个 cilium-agent 负责将全局集群配置更新到其本地数据平面配置。每个 cilium-agent 可能会监视多达 15 种 CRD 类型。&lt;/p&gt;
&lt;p&gt;随着集群在节点、Pod、命名空间和网络策略方面的规模增长，每个 cilium-agent 需要执行的工作量也会增加。为了服务和更新所有这些状态，会对 Kubernetes apiserver 造成压力，可能导致 &lt;a href=&#34;https://github.com/cilium/cilium/issues/29127&#34; title=&#34;问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f5_hue7ed0158ce51c9b331ab31adb8afb3a0_126407_2048x1286_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f5.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/f5.jpg&#34; data-width=&#34;2048&#34; data-height=&#34;1286&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;在大规模部署中，这种对 Kubernetes API 服务器的压力可能最终会减慢 &lt;em&gt;甚至导致&lt;/em&gt; 集群中的所有操作。&lt;/p&gt;
&lt;p&gt;在查看集群中的常见操作以及 cilium-agent 处理它的方式时，全局配置状态对每个节点的影响确实开始放大：工作负载和命名空间被标记、重新标记或取消标记。&lt;/p&gt;
&lt;p&gt;cilium-agent 负责为调度到其节点上的 Pod 编写 CiliumEndpoint 和 CiliumIdentity 资源。由于这些资源依赖于 Pod 和命名空间标签的组合，标签的更改将导致所有依赖资源的更新。这会导致大量的写操作和相应的读取操作，因为此状态随后会传播到所有 cilium-agent，它们必须做出反应并重新配置其本地数据平面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium.io/v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumIdentity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;50568&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.serviceaccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.kubernetes.pod.namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;security-labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.namespace.labels.team&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;loyalty&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.namespace.labels.version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v10.45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.policy.serviceaccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.kubernetes.pod.namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;代码清单 1：&lt;code&gt;CiliumIdentity&lt;/code&gt; 资源结合了 &lt;em&gt;Pod&lt;/em&gt; 和 &lt;em&gt;命名空间&lt;/em&gt; 标签。对任一者的更改都会强制重新计算并生成新的 &lt;code&gt;CiliumIdentity&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对集群中的命名空间进行标记等操作对于 Cilium 可能非常昂贵，并且有可能导致 API 服务器操作减慢到爬行的程度（&lt;a href=&#34;https://docs.cilium.io/en/stable/operations/performance/scalability/identity-relevant-labels/&#34; title=&#34;请参阅用于标识目的包括/排除标签的建议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请参阅用于标识目的包括/排除标签的建议&lt;/a&gt;）。例如，在中等规模集群中更改命名空间的标签可能会导致足够多的 cilium-agent 导致 Kubernetes API 服务器响应延迟约 &lt;strong&gt;4 分钟&lt;/strong&gt;。这将有效地使集群上的所有操作停滞不前。&lt;/p&gt;
&lt;p&gt;考虑以下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 个节点的 Kubernetes 集群&lt;/li&gt;
&lt;li&gt;5 个命名空间&lt;/li&gt;
&lt;li&gt;每个命名空间有 50 个部署&lt;/li&gt;
&lt;li&gt;每个部署有 80 个副本（总共 20,000 个 Pod）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一次更新跨命名空间的标签的测试中，我们看到 CPU 利用率急剧上升，约为 150%，并且内存在整个集群的所有节点上升到约 1 GB。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g1_hua52c85a8206eb9df0debde7d5516fdf4_45787_2048x566_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g1.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/g1.jpg&#34; data-width=&#34;2048&#34; data-height=&#34;566&#34; alt=&#34;image&#34; data-caption=&#34;图 1：所有节点上的 CPU 和内存峰值&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：所有节点上的 CPU 和内存峰值&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在整个集群的所有节点上同时提高 CPU 和内存是不希望看到的行为，然而更严重的是 cilium-agent 事件的读写如何影响 Kubernetes API 服务器的延迟。在下图中，我们看到延迟增长到 3 到 4 &lt;em&gt;分钟&lt;/em&gt;。这肯定会导致各种类型的停机！不幸的是，由于这种控制平面架构，通过增加容量来处理扩展问题的典型方法不起作用；实际上，添加更多节点和/或更多工作负载会放大这种行为。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g2_hucb4e599317ac8eb6b090155fc0fe3321_85993_2048x840_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g2.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/g2.jpg&#34; data-width=&#34;2048&#34; data-height=&#34;840&#34; alt=&#34;image&#34; data-caption=&#34;图 2：Kubernetes API 服务器延迟增加到 3 - 4 分钟&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：Kubernetes API 服务器延迟增加到 3 - 4 分钟&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;减轻-kubernetes-api-服务器的压力&#34;&gt;减轻 Kubernetes API 服务器的压力&lt;/h2&gt;
&lt;p&gt;对于较大的 Cilium 集群，您可以通过使用&lt;a href=&#34;https://docs.cilium.io/en/latest/kvstore/&#34; title=&#34;专用的键值存储&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;专用的键值存储&lt;/a&gt; 来减轻 Kubernetes API 服务器上的压力。键值存储用于存储工作负载标识、端点和 IP 到标识映射等内容。Cilium 不再将此信息存储在 Kubernetes 自定义资源（CRD）中，而是在其自己的数据库中直接监视、操作和写入对象。Cilium Helm 图表支持将 etcd 作为专用键值存储来进行安装，以满足此目的。&lt;/p&gt;
&lt;p&gt;随着集群的增长，使用 kv-store 来卸载 Cilium 对象的读/写操作可能是一个好主意，而不是给 Kubernetes API 服务器施加压力。&lt;/p&gt;
&lt;p&gt;注意：Cilium 还进行了其他优化，以减轻 Kubernetes API 服务器的压力，例如策略状态更新。有关更多信息，请参阅&lt;a href=&#34;https://docs.cilium.io/en/stable/internals/cilium_operator/#policy-status-update&#34; title=&#34;k8s-events-handover 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s-events-handover 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果我们在存在 kv-store 的情况下重新运行先前的测试，我们会看到对 Kubernetes API 服务器的压力减轻，尽管 CPU 可能没有减轻。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g3_hu03ee2df6886e0aead8ba1c0e8a4bfd85_40363_2048x469_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g3.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/g3.jpg&#34; data-width=&#34;2048&#34; data-height=&#34;469&#34; alt=&#34;image&#34; data-caption=&#34;图 3：所有节点上的 CPU 峰值，内存保持在 300-400 MB 范围内&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 3：所有节点上的 CPU 峰值，内存保持在 300-400 MB 范围内&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;与先前情况下的 150% CPU 消耗不同，CPU 在大约 100% 左右波动，而内存保持在大约 300 到 400 MB 的范围内。这是因为对每个 Pod 和每个标识（Cilium 在更改标签时创建所有新标识，并且必须更新引用旧标识的所有 eBPF 映射的 CiliumEndpoint 和 CiliumIdentity 对象的重新计算和生成需要 CPU 计算资源来完成，无论使用何种后备存储（CRD、kv-store 等）。&lt;/p&gt;
&lt;p&gt;如果我们观察 kv-store，我们会看到在此命名空间标签事件期间，事件操作/秒和延迟会急剧上升：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g4_hu9a2efd15f71651839149532ec8fba102_21221_1024x247_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g4.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/g4.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;247&#34; alt=&#34;image&#34; data-caption=&#34;图 4：kv-store 上的事件操作和延迟在此命名空间标签事件期间急剧上升&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 4：kv-store 上的事件操作和延迟在此命名空间标签事件期间急剧上升&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在这种特殊情况下，我们看到 kv-store 承受了相当大的负载，通过事件 IO，我们看到 kv-store 调用的延迟降低到约 15 秒左右。总之，这对于整个集群操作而言要好得多，而不是用请求使 Kubernetes API 服务器饱和。事实上，在图 5 中，我们可以看到 Kubernetes API 服务器的延迟保持在 10 到 40 毫秒的可接受范围内，而在先前的示例中，延迟升高到 4 分钟。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g5_huff501482344fa25fe8b78a743ca16b56_55565_2048x821_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g5.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/g5.jpg&#34; data-width=&#34;2048&#34; data-height=&#34;821&#34; alt=&#34;image&#34; data-caption=&#34;图 5：Kubernetes API Server 延迟在 10 到 40ms 之间&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 5：Kubernetes API Server 延迟在 10 到 40ms 之间&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;使用 kv-store 后端来存储 Cilium 对象是一种缓解 Kubernetes API 服务器压力的好方法，但它也有其缺点。现在有两个持久存储需要维护，而且随着规模的增加，运维负担也增加。在生产环境中运行数据库或持久存储（总体来说）以支持规模化并非易事。如果失去一致性，恢复过程是必需的，因为现在有两个“真相源”。许多平台完全管理 Kubernetes API 服务器及其存储，但 kv-store 并不是如此。由于绝大多数负载是读取操作，缓存将在减少运维复杂性的同时产生相同的改进。&lt;/p&gt;
&lt;h2 id=&#34;使用-xds-改进-cilium-的控制平面扩展安全性和效率&#34;&gt;使用 xDS 改进 Cilium 的控制平面扩展、安全性和效率&lt;/h2&gt;
&lt;p&gt;如果我们可以兼顾两全呢？既减轻 Kubernetes API 服务器的压力，又消除维护单独数据存储的昂贵生产操作的需要？甚至可能解决一些其他尚未解决的 Cilium 扩展和安全性问题？&lt;/p&gt;
&lt;p&gt;在 Solo.io，我们很高兴为 Cilium 社区中更广泛的 xDS 工作作出贡献，并帮助推动该项目朝着可扩展、安全和高效的控制平面迈进。使用&lt;a href=&#34;https://github.com/cncf/xds&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;使我们能够在集群中扩展到数千甚至数万个节点。这种方法解决了上面讨论的许多问题，以及其他问题，如单节点妥协影响范围和规模上的 CiliumIdentity 重复。让我们看看它是如何工作的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cncf/xds&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;最初是一种动态配置&lt;a href=&#34;https://www.envoyproxy.io/&#34; title=&#34;Envoy 代理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 代理&lt;/a&gt;的方式，但是它建立的理念是可以用来支持“通用数据平面”。该协议已成为在多个节点之间同步状态的有效方式，&lt;a href=&#34;https://github.com/cncf/xds&#34; title=&#34;现在由 CNCF 工作组管理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现在由 CNCF 工作组管理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最终，我们希望消除每个 cilium-agent 所做的冗余工作，将诸如标识创建之类的复杂且权限敏感的操作集中在一起，并以高效的方式为代理提供状态，同时不损害 Kubernetes 作为整体的可靠性。&lt;/p&gt;
&lt;p&gt;为了做到这一点，我们将不再让每个 cilium-agent 充当独立的控制平面，而是考虑让 cilium-agent 充当智能集中控制平面的简单只读客户端。控制平面将保护代理免受复杂和权限敏感的操作。&lt;/p&gt;
&lt;p&gt;cilium-agent（现在属于数据平面的一部分）与控制平面之间的通信将采用&lt;a href=&#34;https://github.com/cncf/xds&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;。数据平面不允许从数据平面到控制平面的写操作，因此 cilium-agent 不需要对后端存储（CRD/kv-store）具有写入访问权限。xDS 控制平面服务可以得到安全加固，是唯一需要支持对 Kubernetes API 服务器进行读/写操作的组件。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f6_hud06f088070b8a4b45fcfc26cbe240d6e_75149_1536x1136_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/f6.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/f6.jpg&#34; data-width=&#34;1536&#34; data-height=&#34;1136&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;这种架构减轻了 Kubernetes API 服务器的负载，并且不需要任何外部管理的数据存储。它看起来也更接近之前讨论的三层控制平面架构。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g6_hu490d613048364fd74eba646cc8785540_43458_1572x796_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-cilium-to-new-heights-with-xds/g6.jpg&#34; data-img=&#34;/trans/scaling-cilium-to-new-heights-with-xds/g6.jpg&#34; data-width=&#34;1572&#34; data-height=&#34;796&#34; alt=&#34;image&#34; data-caption=&#34;图 6：xDS 实现的初始测试显示 CPU 和内存使用的预期行为&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 6：xDS 实现的初始测试显示 CPU 和内存使用的预期行为&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在这种架构中，我们确实看到了 xDS 控制平面 pods 中的 CPU 和内存开销，正如预期的那样，每个节点仍然需要处理 eBPF 数据平面的一些 CPU/内存处理开销。&lt;/p&gt;
&lt;p&gt;这种模型带来的其他好处包括在节点受损时更小的影响范围，以及消除了 cilium-agent 创建的重复标识。在原始架构（CRD 或 kv-store）中，每个节点都有一个完整的控制平面，需要特殊权限来读取和写入&lt;code&gt;CiliumEndpoints&lt;/code&gt;和&lt;code&gt;CiliumIdentity&lt;/code&gt;。如果某个节点上的 cilium-agent 受到妥协，那么整个控制平面将受到威胁，并使攻击者能够影响其他节点。这可能导致整个集群妥协。在 xDS 模型中，cilium-agent 被允许从控制平面读取数据（不允许写入），单个 cilium-agent 的妥协不会给予对整个控制平面或集群的访问权限。正如前面提到的，xDS 控制平面被视为特权组件，可以进行锁定和安全设置，甚至可以完全在集群之外运行。&lt;/p&gt;
&lt;p&gt;xDS 方法的另一个好处是通过集中标识创建来消除 Cilium 中重复标识的生成。在现有模型中，每个 cilium-agent 都独立充当控制平面，与其他节点隔离，正如在现有模型中，它试图做出可能是重复的决策。例如，当 Pod 分配到节点时，CNI 负责设置网络端点，当 cilium-agent 识别到一个新的端点，它没有现有的&lt;code&gt;CiliumIdentity&lt;/code&gt;时，它将尝试创建它。如果命名空间标签发生更改并且需要重新计算所有标识，那么也会发生相同的情况。由于标识创建在多个节点上独立进行，因此有很大机会为相同标识创建多个&lt;code&gt;CiliumIdentity&lt;/code&gt;（在极端情况下，&lt;a href=&#34;https://docs.google.com/document/d/1Hcc_2mB9OOUxrqQgZ-gSYDPnLYE_If_TCzVbUGDOdGM/edit?pli=1#heading=h.yzvq0akbw7z9&#34; title=&#34;如此描述的易于重现&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如此描述的易于重现&lt;/a&gt;）。在 xDS 方法中，&lt;code&gt;CiliumIdentity&lt;/code&gt;在集中创建，从而消除了这种情况。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Cilium 在 eBPF 基础上构建了强大的数据平面，但要使 Cilium 在规模上有效运行，我们可以利用 xDS 协议来改进控制平面架构。xDS 是一种高效的协议，允许我们利用多年来学到的构建控制平面的最佳实践。事实上，如果我们将 xDS 控制平面 &lt;a href=&#34;https://docs.google.com/document/d/1U4pO_dTaHERKOtrneNA8njW19HSVbq3sBM3x8an4878/edit#heading=h.ghzkbpzc9oea&#34; title=&#34;直接构建到 cilium-operator 中&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;直接构建到 cilium-operator 中&lt;/a&gt;，那么从这个实施中不会增加新的复杂性。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>DoorDash 的服务网格之旅：如何实现高效的区域感知路由</title>
      <link>https://jimmysong.io/trans/doordash-service-mesh/</link>
      <pubDate>Thu, 18 Jan 2024 21:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/doordash-service-mesh/</guid>
      <description>
        
        
        &lt;p&gt;DoorDash 从单体应用架构演变为基于&lt;a href=&#34;https://www.youtube.com/watch?v=ReRrhU-yRjg&#34; title=&#34;单元（cells）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;单元（cells）&lt;/a&gt;和&lt;a href=&#34;https://doordash.engineering/2020/12/02/how-doordash-transitioned-from-a-monolith-to-microservices/&#34; title=&#34;微服务（microservices）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务（microservices）&lt;/a&gt;架构后，获得了许多好处。新的架构降低了开发、测试和部署所需的时间，同时提高了可伸缩性和用户体验，包括商家、送餐员和消费者。然而，随着微服务和后端数量的增加，DoorDash 注意到了跨可用区（AZ）的数据传输成本上升。这些数据传输成本 — &lt;a href=&#34;https://aws.amazon.com/blogs/architecture/overview-of-data-transfer-costs-for-common-architectures/&#34; title=&#34;在发送和接收时发生&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在发送和接收时发生&lt;/a&gt; — 允许 DoorDash 为其最终用户提供高可用性的服务，可以抵御一个或多个 AZ 的降级。&lt;/p&gt;
&lt;p&gt;成本上升促使我们的工程团队调查了以更高效的方式提供相同级别的服务的替代方法。在本博客文章中，我们描述了 DoorDash 使用服务网格实现数据传输成本节省而不牺牲服务质量的过程。&lt;/p&gt;
&lt;h2 id=&#34;doordash-流量架构&#34;&gt;DoorDash 流量架构&lt;/h2&gt;
&lt;p&gt;在我们深入解决方案之前，让我们回顾一下 DoorDash 的流量基础设施。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;基于单元的架构：&lt;/em&gt; 如下图所示，我们的流量架构遵循&lt;a href=&#34;https://www.youtube.com/watch?v=ReRrhU-yRjg&#34; title=&#34;基于单元的设计&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于单元的设计&lt;/a&gt;。所有微服务 Pod 都部署在多个隔离的单元中。每个服务在每个单元中都有一个 Kubernetes 部署。为了确保单元之间的隔离，不允许单元间的流量。这种方法使我们能够减小单个单元故障的影响范围。对于单例服务或尚未迁移到单元架构的服务，部署在一个全局单元中。内部的&lt;a href=&#34;https://www.envoyproxy.io/&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;路由器允许全局单元与复制的单元之间进行通信。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kubernetes 集群部署：&lt;/em&gt; 每个单元由多个 Kubernetes 集群组成；每个微服务都专门部署在给定单元内的一个集群中。这个设计确保了可伸缩性和可靠性，同时与我们的基于单元的架构保持一致。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f1_hu201f2507ca02928060bb35bc5aabe48b_129907_1600x751_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f1.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f1.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;751&#34; alt=&#34;image&#34; data-caption=&#34;图 1：基于单元的多集群部署&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：基于单元的多集群部署&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;高可用性：&lt;/em&gt; 为了增强可用性和容错性，每个 Kubernetes 集群都部署在多个 AZ 中。这个做法最大程度地减少了由于一个或多个 AZ 中断引起的中断。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;平面网络中的直接通信：&lt;/em&gt; 利用&lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s&#34; title=&#34;AWS-CNI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS-CNI&lt;/a&gt;，在一个单元中的不同集群中的微服务 Pod 可以直接通信。这种平面网络架构简化了通信路径，促进了微服务之间的高效交互。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;自定义多集群服务发现：&lt;/em&gt; 我们的自定义服务发现解决方案，DoorDash 数据中心服务发现（DDSD），提供了一个自定义的 DNS 域，以支持多集群通信。客户端使用 DNS 名称动态发现所需服务的所有 Pod IP 地址。DDSD 的功能类似于 Kubernetes 的&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#headless-services&#34; title=&#34;无头服务&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;无头服务&lt;/a&gt;，但它也适用于集群间通信。例如，不同集群中的客户端可以使用&lt;em&gt;payment-service.service.prod.ddsd&lt;/em&gt;来检索与支付服务相关联的所有 Pod IP 地址。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;客户端负载平衡：&lt;/em&gt; 服务网格负责客户端负载平衡。对于未加入服务网格的服务，负载平衡发生在客户端应用程序端。&lt;/p&gt;
&lt;p&gt;图 2 描述了上述四个特征：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f2_hu737f2842b7f721e296ca2dd9d853163b_64231_769x428_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f2.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f2.jpg&#34; data-width=&#34;769&#34; data-height=&#34;428&#34; alt=&#34;image&#34; data-caption=&#34;图 2：单元内和跨 AZ 通信模式&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：单元内和跨 AZ 通信模式&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;服务网格架构：&lt;/em&gt; 如图 3 所示，DoorDash 的服务网格部署在每个单元中，采用了一种边车容器设计模式，利用&lt;a href=&#34;https://www.envoyproxy.io/&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;代理作为数据平面。我们建立了我们自己的基于&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34; title=&#34;xDS 的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 的&lt;/a&gt;控制平面来管理 Envoy 配置。边车容器作为一种即插即用的解决方案，可以在不需要对应用程序代码进行任何修改的情况下，无缝地拦截、控制和转换进出 DoorDash 微服务的所有 HTTP1/HTTP2/gRPC 流量。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f3_hud8763179a438b3333cf80918b4759166_79470_1459x810_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f3.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f3.jpg&#34; data-width=&#34;1459&#34; data-height=&#34;810&#34; alt=&#34;image&#34; data-caption=&#34;图 3：服务网格高级架构&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 3：服务网格高级架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;虽然 DoorDash 的流量架构具有独特的组件，但我们认为我们在网络流量效率方面遇到的挑战和经验可以广泛应用于其他架构。&lt;/p&gt;
&lt;h2 id=&#34;doordash-的常见数据传输模式&#34;&gt;DoorDash 的常见数据传输模式&lt;/h2&gt;
&lt;p&gt;对于跨可用区的流量，我们将我们的流量模式分类如下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HTTP1/HTTP2/gRPC流量：&lt;/em&gt; 在同一单元内的微服务之间进行直接的 Pod 到 Pod 通信；在全局单元中的微服务与涉及到调用路径中的额外跃点的单元之间的流量 — 例如内部路由器 — 增加了跨可用区流量的可能性。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;存储流量：&lt;/em&gt; 包括来自微服务到有状态系统（如 Aurora PostgreSQL、CockroachDB、Redis 和 Kafka）的流量。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;内部基础设施流量：&lt;/em&gt; 内部 Kubernetes 流量，例如&lt;a href=&#34;https://github.com/coredns/coredns&#34; title=&#34;coredns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;coredns&lt;/a&gt;流量或&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/components/#control-plane-components&#34; title=&#34;Kubernetes 控制平面组件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 控制平面组件&lt;/a&gt;之间的通信。这种类型的流量通常使用 Kubernetes 内部 DNS 而不是 DDSD。&lt;/p&gt;
&lt;h2 id=&#34;初步假设&#34;&gt;初步假设&lt;/h2&gt;
&lt;p&gt;我们认为，由于我们的微服务架构，同一单元内的 HTTP1/HTTP2/gRPC 流量是跨可用区数据传输成本的最大来源。我们还确定服务网格可能通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/zone_aware&#34; title=&#34;Envoy 中的该功能&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 中的该功能&lt;/a&gt;实现所有微服务的区域感知路由。了解了这两点后，我们优先研究和优化 HTTP1/HTTP2/gRPC 流量模式，以提高效率而不降低服务质量。&lt;/p&gt;
&lt;h2 id=&#34;解决-http1http2grpc-流量成本问题&#34;&gt;解决 HTTP1/HTTP2/gRPC 流量成本问题&lt;/h2&gt;
&lt;p&gt;最初，服务之间的流量在不同的 AZ 之间均匀分布，如图 4 所示。有了 Envoy 的区域感知路由功能，调用者服务现在更倾向于将流量引导到同一 AZ 中的被调用者服务，如图 5 所示，从而降低了跨可用区的数据传输成本。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f4_hufe82b0b12857247940f4feaf301af123_50723_1089x601_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f4.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f4.jpg&#34; data-width=&#34;1089&#34; data-height=&#34;601&#34; alt=&#34;image&#34; data-caption=&#34;图 4：Pod 之间的简单轮询负载平衡&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 4：Pod 之间的简单轮询负载平衡&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f5_hu169a0fffcc2be40a44c29056a5832973_42092_1083x606_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f5.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f5.jpg&#34; data-width=&#34;1083&#34; data-height=&#34;606&#34; alt=&#34;image&#34; data-caption=&#34;图 5：区域感知路由&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 5：区域感知路由&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;为了启用 Envoy 的区域感知路由功能，我们在服务网格的控制平面中进行了更改，将服务发现类型从&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#strict-dns&#34; title=&#34;STRICT_DNS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;STRICT_DNS&lt;/a&gt;切换到终端发现服务（&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#endpoint-discovery-service-eds&#34; title=&#34;EDS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EDS&lt;/a&gt;）。如下图所示，对于 DDSD 域，控制平面现在会动态地将来自每个 Envoy 集群的 EDS 资源发送回 Envoy 边车容器。EDS 资源包括 Pod IP 地址及其 AZ 信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;payment-service.service.prod.ddsd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;locality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;zone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-west-2a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1.1.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;locality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;zone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-west-2b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.2.2.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;locality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;zone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-west-2c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.3.3.3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;图 6：一个 EDS 响应的示例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;通过 EDS 响应中提供的数据，Envoy 获取了调用者服务和被调用者服务的 AZ 分布。这些信息使 Envoy 能够&lt;a href=&#34;https://github.com/envoyproxy/envoy/blob/v1.28.0/source/common/upstream/load_balancer_impl.cc#L520&#34; title=&#34;计算&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;计算&lt;/a&gt;Pod 之间的权重。尽管仍然优先通过本&lt;/p&gt;
&lt;p&gt;地 AZ 发送流量，但为了确保均衡分布并避免过载任何单个 Pod，一些流量可能仍然会引导到跨越 AZ，如图 7 所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f7_hue10a58200cdcf40f2f3993a8eb6ff209_49479_1254x697_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f7.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f7.jpg&#34; data-width=&#34;1254&#34; data-height=&#34;697&#34; alt=&#34;image&#34; data-caption=&#34;图 7：优先使用本地 AZ，同时确保流量均衡&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 7：优先使用本地 AZ，同时确保流量均衡&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这种路由解决方案具有多种好处，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在服务不均匀分布在不同 AZ 的情况下仍然保持流量平衡&lt;/li&gt;
&lt;li&gt;可以动态设置 Pod 之间的流量权重，消除手动操作&lt;/li&gt;
&lt;li&gt;减少单个或多个 AZ 中断的影响范围&lt;/li&gt;
&lt;li&gt;减少流量延迟 — 调用者服务连接到更近的被调用者服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的解决方案在服务 Pod 均匀部署在可用区时变得更加有效。为实现这一目标，我们利用了&lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/&#34; title=&#34;topologySpreadConstraints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;topologySpreadConstraints&lt;/a&gt;，并将&lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/#spread-constraint-definition&#34; title=&#34;maxSkew&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;maxSkew&lt;/a&gt;设置为 1，当 Unsatisfiable 时设置为 ScheduleAnyway，如图 8 所示。这意味着 Kubernetes 调度器将仍然调度 Pod，即使条件未满足，优先选择最小化偏差的节点。&lt;/p&gt;
&lt;p&gt;这种方法确保了 Pod 仍然被调度；否则将会减少装箱量，增加空闲计算量，并最终影响了区域感知的与流量相关的成本减少。在我们的生产系统中，我们观察到有 10% 的流量是根据这个 topologySpreadConstraints 策略跨可用区发送的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;topologySpreadConstraints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;maxSkew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topologyKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;topology.kubernetes.io/zone&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;whenUnsatisfiable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ScheduleAnyway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;图 8：配置以均匀部署 Pod 在可用区之间&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;随着我们逐渐推出上述更改，我们看到了 AWS 跨可用区传输费用的改进。即便如此，我们预期的减少要更大。因此，我们着手调查为什么我们没有节省多少预期的费用。&lt;/p&gt;
&lt;h2 id=&#34;大海捞针更好地了解跨可用区的流量&#34;&gt;大海捞针：更好地了解跨可用区的流量&lt;/h2&gt;
&lt;p&gt;我们通过验证&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/upstream/cluster_manager/cluster_stats#config-cluster-manager-cluster-per-az-stats&#34; title=&#34;Envoy 在可用区之间的指标&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 在可用区之间的指标&lt;/a&gt;和应用程序日志，确认了区域感知路由正在按预期工作，但我们需要更多的可见性来确定数据传输成本降低的根本原因低于预期。这促使我们使用了多种可观测性工具，包括&lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html&#34; title=&#34;VPC 流量日志&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VPC 流量日志&lt;/a&gt;，&lt;a href=&#34;https://doordash.engineering/2023/08/15/bpfagent-ebpf-for-monitoring-at-doordash/&#34; title=&#34;ebpf 代理指标&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ebpf 代理指标&lt;/a&gt;和 Envoy 网络字节指标，以纠正这种情况。&lt;/p&gt;
&lt;p&gt;使用 VPC 流量日志，我们将&lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-logs-fields&#34; title=&#34;srcaddr 和 dstaddr IP 地址&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;srcaddr 和 dstaddr IP 地址&lt;/a&gt;映射到部署在我们的 AWS 帐户结构中的相应子网。这个映射提供了一个汇总规则，让我们理解托管云足迹的不同部分之间的出口/入口流量模式，包括用于生产 Kubernetes 集群、存储解决方案、缓存和消息代理的子网，如表 1 所示。我们确认，我们跨可用区传输费用的最大来源是每个单元内的非存储流量。其中约有 20% 的费用是由于流量传输到用于我们事件接收流水线（&lt;a href=&#34;https://doordash.engineering/2022/08/02/building-scalable-real-time-event-processing-with-kafka-and-flink/&#34; title=&#34;Iguazu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Iguazu&lt;/a&gt;）的一个弹性负载均衡器（ELB）引起的。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/t1_huc229e08443e6116a671675d014bfbe04_34839_752x324_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/t1.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/t1.jpg&#34; data-width=&#34;752&#34; data-height=&#34;324&#34; alt=&#34;image&#34; data-caption=&#34;表 1：使用 VPC 流量日志进行跨可用区流量归因&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;表 1：使用 VPC 流量日志进行跨可用区流量归因&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;此外，我们检查了服务网格 HTTP1/HTTP2/gRPC 指标，特别是用于所有请求和响应的连接字节，包括入口和出口流量。来自服务网格 Envoy 代理的最重要的指标是&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/upstream/cluster_manager/cluster_stats.html#general&#34; title=&#34;来自 Envoy 侦听器和集群的 cx_rx_bytes_total 和 cx_tx_bytes_total&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 Envoy 侦听器和集群的 cx_rx_bytes_total 和 cx_tx_bytes_total&lt;/a&gt;。但是，由于当时并非所有服务都已加入到服务网格中，因此我们依赖于 BPFAgent 的指标，该指标在每个生产 Kubernetes 节点上都全球部署，以增加对总网络字节的可见性。使用这两个来源的指标，我们发现了 90% 的流量是 HTTP1/HTTP2/gRPC 流量；其中 45% 的流量已经加入了服务网格，并且该部分流量的 91% 被发送到 Iguazu！&lt;/p&gt;
&lt;h2 id=&#34;环环相扣iguazu-的流量流动&#34;&gt;环环相扣：Iguazu 的流量流动&lt;/h2&gt;
&lt;p&gt;在分析了如图 9 所示的 Iguazu 流量流动之后，我们意识到在调用者和被调用者服务或 Pod 之间存在多个中间跃点。当流量从调用者服务传输到 Iguazu 时，它首先经过 ELBs，然后着陆在全球单元中不同 Kubernetes 集群中的一个工作节点上。因为&lt;a href=&#34;https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip&#34; title=&#34;externalTrafficPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;externalTrafficPolicy&lt;/a&gt;配置为集群，&lt;em&gt;iptables&lt;/em&gt;会将流量重定向到另一个节点以确保负载均衡。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f9_hu6f2ca8cb484a91365dc2956faee37fec_64761_1553x455_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f9.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f9.jpg&#34; data-width=&#34;1553&#34; data-height=&#34;455&#34; alt=&#34;image&#34; data-caption=&#34;图 9：Iguazu 的原始流量流动&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 9：Iguazu 的原始流量流动&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们观察到以下数据传输行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向 ELBs 发送流量的客户端仍然直接使用 ELB DNS 名称。因为客户端没有使用内部的 DDSD 域，所以 Envoy 集群中的服务发现类型仍然是 STRICT_DNS，而不是 EDS，这是启用区域感知路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由的先决条件。这意味着 Envoy Sidecar 容器使用简单的轮询方法来将流量分发给 ELBs。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 ELBs 到 Cluster 2 的 Kubernetes 工作节点的流量的情况下，禁用了跨可用区的负载均衡。&lt;/li&gt;
&lt;li&gt;当流量从 Iguazu ELB 到达 Kubernetes 工作节点时，&lt;em&gt;iptables&lt;/em&gt;会将其进一步重定向到随机节点，这也增加了跨可用区流量的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑到 Iguazu 调用图内部的多个跃点的复杂性，我们决定将 Iguazu 服务迁移到与其客户端部署在同一单元的地方。我们还配置了所有客户端 Envoy Sidecar 的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/rds&#34; title=&#34;路由规则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由规则&lt;/a&gt;，将流量路由到新集群中的 Iguazu Pod，而不需要我们的工程师对其服务进行任何代码或配置更改。这使我们能够为 Iguazu 流量启用直接的 Pod 间通信，实现区域感知路由，同时减少了 ELBs 处理的流量量，如图 10 所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/doordash-service-mesh/f10_hu7b66b3de073405b79992d097d1b05510_50975_1600x492_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/doordash-service-mesh/f10.jpg&#34; data-img=&#34;/trans/doordash-service-mesh/f10.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;492&#34; alt=&#34;image&#34; data-caption=&#34;图 10：Iguazu 的新流量流动&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 10：Iguazu 的新流量流动&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这些操作使 DoorDash 的数据传输成本以及 ELB 成本受到了很大的打击，以至于我们的云服务提供商与我们联系，询问我们是否遇到了与生产相关的问题。&lt;/p&gt;
&lt;h2 id=&#34;吸取的教训&#34;&gt;吸取的教训&lt;/h2&gt;
&lt;p&gt;在我们的旅程中，我们获得了一些关键的发现，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云服务提供商的数据传输定价比起初看起来更加复杂。值得投入时间来理解定价模型，以构建正确的效率解决方案。&lt;/li&gt;
&lt;li&gt;要全面了解/查看所有跨可用区的流量是具有挑战性的。然而，将来自不同来源的网络字节指标结合起来，足以识别热点，一旦解决，可以在使用和成本方面产生实质性影响。&lt;/li&gt;
&lt;li&gt;Envoy 的区域感知路由可以将流量发送到其本地可用区，同时通过平衡流量自动确保弹性。&lt;/li&gt;
&lt;li&gt;随着微服务调用图中跃点数量的增加，数据被传输到跨可用区的可能性增加，增加了确保所有跃点支持区域感知路由的复杂性。&lt;/li&gt;
&lt;li&gt;如果你考虑使用服务网格来管理流量，你也可以利用它来提高效率。&lt;/li&gt;
&lt;li&gt;要了解更多关于 DoorDash 的服务网格之旅的信息，请查看 Hochuen 的 KubeCon + CloudNativeCon North America 2023&lt;a href=&#34;https://www.youtube.com/watch?v=I6E_7f40YP0&#34; title=&#34;服务网格会议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格会议&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;未来的工作&#34;&gt;未来的工作&lt;/h2&gt;
&lt;p&gt;我们已经列出了我们希望实施的解决方案增强功能的列表，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化从不同来源收集指标并提供成本和使用情况的统一概述的过程。&lt;/li&gt;
&lt;li&gt;启用内部 Envoy 路由器的区域感知路由功能。&lt;/li&gt;
&lt;li&gt;使解决方案更具可扩展性，以支持 DDSD 之外的其他域的 HTTP1/HTTP2/gRPC 流量。&lt;/li&gt;
&lt;li&gt;使用 Kubernetes 网络代理 kube-proxy 为内部基础设施流量启用&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/topology-aware-routing/&#34; title=&#34;拓扑感知路由&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;拓扑感知路由&lt;/a&gt;功能。&lt;/li&gt;
&lt;li&gt;探索优化的路由，用于与 DoorDash 的有状态系统（例如 PostgreSQL、CRDB、Redis 和 Kafka）之间的大数据传输操作。这将允许流量在有意义的情况下保持在单一 AZ 泳道中，进一步降低成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;致谢&#34;&gt;致谢&lt;/h2&gt;
&lt;p&gt;我们感谢&lt;strong&gt;Darshit Gavhane&lt;/strong&gt;和&lt;strong&gt;Allison Cheng&lt;/strong&gt;将所有 Iguazu 服务迁移到客户端正在运行的同一单元，以及&lt;strong&gt;Steve Hoffman&lt;/strong&gt;和&lt;strong&gt;Sebastian Yates&lt;/strong&gt;在旅程中的建议和指导。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>KEDA vs. 原生 Kubernetes：谁是云原生应用的自动伸缩王者？</title>
      <link>https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/</link>
      <pubDate>Fri, 12 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/</guid>
      <description>
        
        
        &lt;h3 id=&#34;1-引言自动伸缩的重要性&#34;&gt;1. 引言：自动伸缩的重要性&lt;/h3&gt;
&lt;p&gt;在今天的云原生生态系统中，波动的工作负载和动态的流量模式是常态。适应这种不可预测的行为需要能够实时调整的系统。自动伸缩是必需的，可以确保资源的最佳分配，遏制过度成本，并促进资源的高效使用。&lt;/p&gt;
&lt;p&gt;自动伸缩不仅关乎成本。它在维护应用性能和吞吐量方面发挥着关键作用。通过避免欠配置（导致用户体验不佳）和过度配置（导致不必要的成本），自动伸缩可以实现合理的平衡。&lt;/p&gt;
&lt;h3 id=&#34;2-竞争者了解基础知识&#34;&gt;2. 竞争者：了解基础知识&lt;/h3&gt;
&lt;h3 id=&#34;水平-pod-自动伸缩器hpa&#34;&gt;水平 Pod 自动伸缩器（HPA）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&#34; title=&#34;HPA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HPA&lt;/a&gt;，作为 Kubernetes 的本地解决方案，根据观察到的指标（主要是 CPU 和内存）来扩展 Pod 的数量。虽然对于统一的工作负载来说非常直接和有益，但当考虑到其无法扩展到零并且完全依赖 CPU 和内存指标时，它的局限性就变得明显了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/1_hu71fb034953f4bdfa1b239b10f67e172e_30637_1159x447_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/1.jpg&#34; data-img=&#34;/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/1.jpg&#34; data-width=&#34;1159&#34; data-height=&#34;447&#34; alt=&#34;image&#34; data-caption=&#34;HPA 改变 Pod 的数量&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;HPA 改变 Pod 的数量&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;垂直-pod-自动伸缩器vpa&#34;&gt;垂直 Pod 自动伸缩器（VPA）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler#intro&#34; title=&#34;VPA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VPA&lt;/a&gt;更多地涉及资源的调整而不是扩展它们。它评估需求并动态调整资源，确保工作负载的合适适配。但这里有一个问题：增强型的 Pod 并不一定更好。有时，拥有更多的工作进程来处理数据比拥有一个大而强大的工作进程更高效。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/2_hu8ec066d116ed7a51a6c50fd6fe3605d3_39117_1302x581_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/2.jpg&#34; data-img=&#34;/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/2.jpg&#34; data-width=&#34;1302&#34; data-height=&#34;581&#34; alt=&#34;image&#34; data-caption=&#34;VPA 调整 Pod 的大小&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;VPA 调整 Pod 的大小&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;3-限制当原生-kubernetes-自动伸缩器不足以应对时&#34;&gt;3. 限制：当原生 Kubernetes 自动伸缩器不足以应对时&lt;/h2&gt;
&lt;p&gt;尽管内置的 Kubernetes 自动伸缩器如 HPA 和 VPA 提供了基本的扩展能力，但它们在范围上天然有限。它们主要关注 CPU 和内存指标可能对于现代应用来说是一个重大限制，因为这些应用可能需要对各种指标做出反应，其中一些甚至可能不是来自应用程序本身的指标。&lt;/p&gt;
&lt;p&gt;现代应用面临的引人注目的挑战之一是根据外部系统的事件来进行扩展。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息队列：&lt;/strong&gt; 应用程序可能需要根据队列中的消息数量（如 RabbitMQ 或 Kafka）来进行扩展。如果有大量未处理的消息涌入，这可能是一个扩展的指标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库触发器：&lt;/strong&gt; 数据库中的更改或更新（如某个表的行突然增加）可能需要将应用程序进行扩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;展以处理或分析数据的涌入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外部 Webhook：&lt;/strong&gt; 来自第三方服务的传入 Webhook（例如 GitHub 推送或电子商务交易事件）可能需要更多的资源来处理额外的负载。&lt;/li&gt;
&lt;li&gt;‍&lt;strong&gt;IoT 信号：&lt;/strong&gt; 对于连接到物联网设备的应用程序，来自这些设备的信号可能是需要扩展的指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，还存在将扩展到零的必要来有效管理资源的情况，或者存在不同指标的组合决定扩展逻辑的情况，例如 CPU 利用率与数据库读/写速率。这些微妙的需求突显了内置 Kubernetes 自动伸缩器的不足之处。‍&lt;/p&gt;
&lt;h3 id=&#34;hpa-的自定义指标扩展&#34;&gt;HPA 的自定义指标扩展&lt;/h3&gt;
&lt;p&gt;Kubernetes 引入了一个&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#scaling-on-custom-metrics&#34; title=&#34;自定义指标&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义指标&lt;/a&gt;的接口，旨在为水平 Pod 自动伸缩器（HPA）提供更多超越 CPU 和内存指标的适应性。然而，实际实现中出现了挑战。&lt;/p&gt;
&lt;p&gt;尽管强大，但自定义指标 API 并不直观易用。它要求对 Kubernetes 内部有详细的了解，使设置和调整变得繁琐。‍&lt;/p&gt;
&lt;h3 id=&#34;插曲prometheus-适配器&#34;&gt;插曲：Prometheus 适配器&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/prometheus-adapter&#34; title=&#34;Prometheus 适配器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus 适配器&lt;/a&gt;试图通过利用自定义指标 API 来弥合这一差距，引入了 Prometheus 的广泛指标。但它也有一些缺点：复杂、不直观的配置以及仅与 Prometheus 指标相关联。实施和维护配置需要不断的警觉性。基础架构或应用程序的更改可能会触发重新配置的需求。&lt;/p&gt;
&lt;h3 id=&#34;4-登场-keda对决中的英雄&#34;&gt;4. 登场 KEDA：对决中的英雄&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://keda.sh/&#34; title=&#34;Kubernetes 事件驱动自动伸缩（KEDA）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 事件驱动自动伸缩（KEDA）&lt;/a&gt;不仅与 Kubernetes 的自定义指标 API 集成，还使其变得更加可访问。这是用户友好界面如何改变体验的证明，使自动伸缩真正具有可定制性和多功能性。&lt;/p&gt;
&lt;h3 id=&#34;keda-的好处&#34;&gt;KEDA 的好处&lt;/h3&gt;
&lt;p&gt;KEDA 提供了多个技术优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件驱动自动伸缩：&lt;/strong&gt; KEDA 能够响应特定事件，甚至扩展到零，确保资源得到明智地使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于使用：&lt;/strong&gt; 其直观的配置使实施变得轻松，允许开发人员专注于应用逻辑而不是配置语法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广泛应用：&lt;/strong&gt; 除了仅扩展 Pod 外，KEDA 还可以基于事件安排 Kubernetes 作业，适用于不需要持续运行但可能需要定期大量资源的任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多功能集成：&lt;/strong&gt; 支持多种身份验证提供程序，集成 KEDA 既简单又安全。‍&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;keda-在实践中的应用&#34;&gt;KEDA 在实践中的应用&lt;/h3&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/3_hu31b978290a4d134e0518f442ee726eb2_35380_1220x799_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/3.jpg&#34; data-img=&#34;/trans/battle-of-the-pods-kubernetes-autoscaling-showdown-keda-vs-vanilla-kubernetes/3.jpg&#34; data-width=&#34;1220&#34; data-height=&#34;799&#34; alt=&#34;image&#34; data-caption=&#34;KEDA 扩展 Kafka Consumer 应用程序&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;KEDA 扩展 Kafka Consumer 应用程序&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;虽然传统的指标如 CPU 和内存提供了一些见解，但现实世界的应用程序通常需要更精细和多样化的指标来进行有效的自动伸缩。以下是一些要考虑的情景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件驱动应用程序：&lt;/strong&gt; 考虑一个基于 Kafka 的设置。虽然 CPU 使用率可能保持稳定，但传入 Kafka 事件的激增是确定负载的真正指标。在这种情况下，自动伸缩应该理想地对入站事件的速率或消息积压做出响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;电子商务交易：&lt;/strong&gt; 在电子商务框架中，特殊销售活动可能会导致订单结帐激增。CPU 可能不受影响，但真正的负载可能是数据库队列中积累的未处理订单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流数据管道：&lt;/strong&gt; 从平台（如 Apache Kafka 或 AWS Kinesis）处理数据流的应用程序会经历可变的数据流入率。在这里，相关的指标可能是处理的积压或滞后，而不是 CPU 或内存消耗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Selenium 测试工作者：&lt;/strong&gt; 在持续集成（CI）流水线中，当提交新代码时，可能会触发一系列 Selenium 测试。这里真正的度量标准可能是等待测试的队列。如果有大量等待测试的测试存在瓶颈，基于这个队列来自动伸缩 Selenium 工作者比仅仅观察 CPU 或内存指标更有效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 速率限制：&lt;/strong&gt; 对于大量依赖第三方 API 且具有速率限制的应用程序，接近速率限制可能是需要进行伸缩的信号。与对速率限制错误的被动反应不同，基于 API 调用频率进行主动伸缩可以确保操作顺利进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样多样化的现实场景强调了需要一种多功能的自动伸缩解决方案，能够理解并响应多种度量标准。KEDA 凭借其灵活性和适应性有效地应对了这些挑战。&lt;/p&gt;
&lt;h3 id=&#34;5-结论keda-自动伸缩的未来&#34;&gt;5. 结论：KEDA 自动伸缩的未来&lt;/h3&gt;
&lt;p&gt;尽管 Kubernetes 拥有原生的自动伸缩工具如 HPA 和 VPA，以及像 Prometheus 适配器这样的扩展，但它们通常伴随着复杂性。而 KEDA 提供了一个简单的平台，适用于各种各样的自动伸缩需求。它处理事件驱动的扩展，包括缩减到零，这是一个重大优势。此外，设置 KEDA 更加简单，减少了用户在处理 Kubernetes 自定义指标时通常会遇到的典型障碍。&lt;/p&gt;
&lt;p&gt;KEDA 的活跃社区证明了它的实用性。对该项目的定期贡献、像 Kedify 或 Microsoft 这样的供应商以及不断增加的&lt;a href=&#34;https://keda.sh/community/#end-users&#34; title=&#34;企业采用&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;企业采用&lt;/a&gt;显示出它在 Kubernetes 生态系统中日益重要。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>OpenTelemetry 的最新进展及其对可观测性的影响</title>
      <link>https://jimmysong.io/trans/why-the-latest-advances-in-opentelemetry-are-significant/</link>
      <pubDate>Fri, 12 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/why-the-latest-advances-in-opentelemetry-are-significant/</guid>
      <description>
        
        
        &lt;p&gt;今年，在云原生计算基金会（Cloud Native Computing Foundation）中，一个备受关注的项目是&lt;a href=&#34;https://thenewstack.io/observability-in-2024-more-opentelemetry-less-confusion/&#34; title=&#34;OpenTelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt;和&lt;a href=&#34;https://thenewstack.io/how-the-opentelemetry-collector-scales-observability/&#34; title=&#34;OpenTelemetry Collector&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry Collector&lt;/a&gt;。这个项目是观测领域的一个非常令人兴奋的运动，旨在跨行业合作，达成观测和遥测的标准数据格式。&lt;/p&gt;
&lt;p&gt;这本身就非常重要，因为它允许多个观测和分析工具进行互操作，而以前的团队如果想要一个工具与另一个工具进行互操作，就必须多次转换数据。随着观测领域围绕人工智能/机器学习的炒作，公司更有可能从一个系统中存储和查看数据，然后在另一个系统中进行机器学习模型的训练。&lt;/p&gt;
&lt;p&gt;更棒的是，由于行业供应商和个人在&lt;a href=&#34;https://opentelemetry.io/docs/collector/&#34; title=&#34;OpenTelemetry Collector&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry Collector&lt;/a&gt;上合作，这个项目继续不断发展。它是一个标准化的代理和遥测收集器，提供高吞吐量的遥测数据收集和分析。该收集器已经支持跟踪和度量数据一段时间了，但直到去年的&lt;a href=&#34;https://thenewstack.io/kubeconcloudnativecon-2022-rolls-into-detroit/&#34; title=&#34;KubeCon Detroit 2022&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon Detroit 2022&lt;/a&gt;，社区才吸纳了 OpenLogs 项目，并开始实施日志收集和分析功能。现在，日志支持已经完全成熟。&lt;/p&gt;
&lt;p&gt;在接下来的部分中，我将分享一些关于这个项目的新特性以及它们对社区的重要性。&lt;/p&gt;
&lt;h2 id=&#34;1-新的转换语言&#34;&gt;1. 新的转换语言&lt;/h2&gt;
&lt;p&gt;我发现许多代理的语法使得进行有意义的转换非常困难，需要使用一些奇怪的 YAML 或 TOML。Otel Collector 仍然依赖于 YAML 格式，但它的新转换语言允许使用基于函数的语句，执行起来非常快速，可以管理复杂性。查看一些&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/pkg/ottl/README.md&#34; title=&#34;语法示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;语法示例&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;2-日志正式发布&#34;&gt;2. 日志正式发布&lt;/h2&gt;
&lt;p&gt;在大约一年的开发时间内，日志收集和分析现在已经正式发布。该实施有一些收集日志的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，它作为一个独立的代理运行，并从文件系统收集日志。它可以直接发送到最终目的地，也可以转发到以收集器模式运行的 OpenTelemetry Collector，可以即时计算日志指标。&lt;/li&gt;
&lt;li&gt;其次，存在许多日志 SDK，可以直接在应用程序中实施，并将日志发送到中央收集器或直接发送到最终目的地，这有助于减少磁盘 IO 的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-自动仪器成熟度&#34;&gt;3. 自动仪器成熟度&lt;/h2&gt;
&lt;p&gt;自动仪器是自动将应用程序连接到发出跟踪和度量数据而无需或仅需进行最少代码更改的能力。Java 和.Net 得到了全面支持，其他语言正处于不同开发和发布阶段。这个功能是一些专有解决方案展示出来的特色，因为它通过减少开发人员的时间来降低部署复杂性，现在它将同样强大的功能带到了 OpenTelemetry 生态系统中。&lt;/p&gt;
&lt;h2 id=&#34;4-语义约定&#34;&gt;4. 语义约定&lt;/h2&gt;
&lt;p&gt;这一点非常重要，并且正在从 ElasticSearch 向 OpenTelemetry 项目捐赠 ECS（Elastic Common Schema）而受益。规范化日志和遥测结构具有挑战性，因为似乎几乎每个人都以稍微不同的格式生成遥测数据；但要能够分析、创建警报并以人性化的方式呈现数据，所有遥测字段都需要以某种方式映射。如果每个人和每个系统都略有不同，那么在创建可重用的仪表板和组件方面就会出现挑战。现在，软件供应商可以负责在多个平台上创建仪表板，合理地确保数据将以多个平台上的正确格式进行发送。与此同时，我们管理大量遥测数据的人可以通过使用众所周知的字段名称来提高摄取和查询效率，并且在大多数客户发送的内容依赖于这些字段名称时，可以提供更高级的功能，同时减少计算资源和内存开销。&lt;/p&gt;
&lt;p&gt;完整的架构仍然需要一段时间才能最终确定，但逐步正在批准这些约定。例如，在 KubeCon 上，他们宣布了 HTTP 架构的最终确定。&lt;/p&gt;
&lt;h2 id=&#34;5-插件框架和生态系统&#34;&gt;5. 插件框架和生态系统&lt;/h2&gt;
&lt;p&gt;生态系统正在不断成熟。可扩展性框架允许自定义任何摄取管道&lt;/p&gt;
&lt;p&gt;的任何阶段。有越来越多的接收器用于各种系统，处理器具有越来越先进的功能，目标也在增加。我特别对新版本的 OpenSearch 扩展感到兴奋，它可以发送预打包在简化的遥测或 ECS 格式中的日志数据。&lt;/p&gt;
&lt;p&gt;从开发者的角度来看，我发现模式和内部“p”消息模式的结构非常周到，内置了 protobuf。它在功能自由度和最小复杂度之间有一个良好的平衡。&lt;/p&gt;
&lt;h2 id=&#34;6-社区合作&#34;&gt;6. 社区合作&lt;/h2&gt;
&lt;p&gt;这对于 CNCF 社区来说并不是很新鲜，但这个项目的速度和影响体现了 CNCF 社区哲学的精神。竞争公司正在共同努力，使计算的一部分变得更好、更容易，以造福我们其他人。有些人可能担心去除供应商锁定会导致客户离开，或者共享代码可能泄漏专有 IP。&lt;/p&gt;
&lt;p&gt;然而，在遥测领域，代理和收集器的核心架构通常是已解决的问题。那么为什么不制作一些遵循惯例并在各个平台上运行的东西，以便公司不再必须维护代理代码，其中 80% 都是重复的呢？这使公司可以在互操作性和创新可以通过这个框架传递的专有处理器方面共同开发插件。好处也延伸到所有运营商和软件供应商。借助标准化的 Otel Collector SDK，供应商可以创建一个单一的集成来为其应用程序添加遥测，并极大简化了收集过程，试图让所有主要的观测提供商为你的应用程序实施支持。&lt;/p&gt;
&lt;p&gt;运营商也从“随处收集”和“随处发送”的理念中受益。通过标准的配置文件格式简化了设置，减少了新系统的引入复杂性。我还怀疑，许多日志系统的运营商在观测数据的语义约定项目减少了许多问题后，将大大减少字段映射的基数问题。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;向所有项目贡献者和社区成员表示衷心的“感谢”！这里有太多人要列出来了，但你可以在&lt;a href=&#34;https://github.com/open-telemetry/community/blob/main/community-members.md&#34; title=&#34;GitHub 上的 OpenTelemetry 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub 上的 OpenTelemetry 项目&lt;/a&gt;上找到他们。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 和 OpenTelemetry Collector 的功能和未来路径正在以极快的速度前进，过去一年是 CNCF 组合中贡献第二多的项目，仅次于 Kubernetes。有这么多贡献者保持组织和合作，成熟度将继续加速。这将有望通过增加互操作性并简化仪表系统的仪器化过程来促进观测领域的创新。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>用 eBPF 洞察应用层网络流量</title>
      <link>https://jimmysong.io/trans/application-traffic-with-ebpf/</link>
      <pubDate>Wed, 10 Jan 2024 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/application-traffic-with-ebpf/</guid>
      <description>
        
        
        &lt;p&gt;在&lt;a href=&#34;../ebpf-adventures-in-networking/&#34; title=&#34;先前的帖子&#34;&gt;先前的帖子&lt;/a&gt;中，我稍微谈到了建立 eBPF 知识，以开始更多地了解网络适配器的输入和输出情况。基本上，将以太网帧并剥离标头（以太网标头+IP 标头+TCP/UDP 标头），最终你将得到来自应用程序或数据角度的数据包中剩余的内容。&lt;/p&gt;
&lt;p&gt;所有的代码都在“学习 eBPF”存储库中，具体的 eBPF 代码在&lt;a href=&#34;https://github.com/thebsdbox/learning-ebpf/blob/main/ebpf/http/http.c&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。这篇文章的计划是逐步介绍我认为有用或可能重要的部分&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：此代码确实对入口/出口数据包进行了一些修改，因此需要 6.1+ 的 Linux 内核才能使用一些 eBPF 助手函数。&lt;/p&gt;
&lt;h2 id=&#34;映射&#34;&gt;映射！&lt;/h2&gt;
&lt;p&gt;你可能以前遇到过这些吧？如果没有，不用担心！简而言之，eBPF 映射是在用户空间和内核中的 eBPF 程序之间通信的机制。在我看来，非常酷的一点是这些映射使用键和值&amp;hellip;所以我不必循环比较数据并寻找匹配的内容，我传递一个键，如果有匹配的内容，我就得到相应的数据:D&lt;/p&gt;
&lt;p&gt;下面是我将要使用的映射，称为&lt;code&gt;url_map&lt;/code&gt;，键是 20 个字符长（可以说是有界的“字符串”），分配给该键的值是我在上面定义的结构体。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 定义与键关联的不同URL
struct url_path {
  __u8 path_len;
  __u8 path[max_path_len]; // 这应该是一个char，但在这里和Go之间的代码生成有点不同...
};

// 定义我的URL映射
struct {
  __uint(type, BPF_MAP_TYPE_HASH);
  __uint(max_entries, 1024);
  __type(key, char[max_path_len]);
  __type(value, struct url_path);
}
url_map SEC(&amp;#34;.maps&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ebpf-程序&#34;&gt;eBPF 程序！&lt;/h2&gt;
&lt;p&gt;代码中定义了两个 eBPF 程序&lt;code&gt;tc_egress&lt;/code&gt;和&lt;code&gt;tc_ingress&lt;/code&gt;，如果你能猜到它们是如何连接的，那就加分！在这篇文章中，我们只关注&lt;code&gt;tc_ingress&lt;/code&gt;程序。&lt;/p&gt;
&lt;p&gt;就像我们在已经存在的众多示例中看到的那样，我们需要进行标头识别的操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进行合理性检查，并将&lt;code&gt;data&lt;/code&gt;强制转换为&lt;code&gt;ethhdr&lt;/code&gt;类型（&lt;a href=&#34;https://en.wikipedia.org/wiki/Ethernet_frame&#34; title=&#34;以太网标头&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;以太网标头&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;通过读取以太网标头内部的&lt;code&gt;h_proto&lt;/code&gt;（也称为&lt;code&gt;Ethertype&lt;/code&gt;）来查找以太网帧内部的协议。&lt;/li&gt;
&lt;li&gt;将以太网标头后的数据强制转换为&lt;code&gt;iphdr&lt;/code&gt;类型（&lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Protocol_version_4#Header&#34; title=&#34;IP 标头&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IP 标头&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;在 IP 标头内查找协议，我们还需要确定 IP 标头的大小（原来它们可以有不同的大小！&lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;为了确定标头的大小，我们将其值乘以四，你可能会问为什么！好吧，这个值乘以 32 位以确定标头的大小，所以如果值为 6，那么标头将是 192 位（或 24 字节）。所以，为了简单地确定 IP 标头的字节数，我们可以将这个值乘以 4！&lt;/li&gt;
&lt;li&gt;将以 IP 标头后的数据强制转换为&lt;code&gt;tcphdr&lt;/code&gt;类型（&lt;a href=&#34;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure&#34; title=&#34;TCP 标头&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP 标头&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;像步骤（5）一样，我们需要确定 TCP 标头的大小（它也可以是动态的），在这里的步骤也是一样的，我们只需要将值&lt;code&gt;doff&lt;/code&gt;乘以四来确定标头的大小（以字节为单位）。&lt;/li&gt;
&lt;li&gt;通过计算所有这些，我们现在可以推断出数据位于以太网标头大小、IP 标头大小和 TCP 标头大小的末尾。&lt;/li&gt;
&lt;li&gt;最后，我们可以通过从 IP 标头中减去 IP 和 TCP 标头的大小来确定应用程序数据的大小，使用&lt;code&gt;tot_len&lt;/code&gt;（总长度）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;应用数据&#34;&gt;应用数据！！&lt;/h3&gt;
&lt;p&gt;为了读取这些数据，我们将需要上面提到的一些东西！&lt;/p&gt;
&lt;p&gt;首先，我们需要数据偏移量（数据起始位置），它位于以太网标头+IP 标头大小（一旦计算出来）和 TCP 标头（再次，一旦计算出来）之后。我们还需要一个缓冲区来存储我们将从套接字缓冲区中读取的数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 用于存储我们应用程序数据的数据缓冲区
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 计算数据实际位置的偏移量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;poffset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ETH_HLEN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ip_hlen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp_hlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 从套接字缓冲区加载数据，poffset 从 TCP 标头的末尾开始
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bpf_skb_load_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;poffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们使用&lt;code&gt;bpf_skb_load_bytes&lt;/code&gt;从套接字缓冲区（&lt;code&gt;skb&lt;/code&gt;）中读取一定量的数据（60 个字节）到我们的缓冲区（&lt;code&gt;pdata&lt;/code&gt;），起始位置是我们知道数据位于的偏移量（&lt;code&gt;poffset&lt;/code&gt;）！&lt;/p&gt;
&lt;p&gt;此时，我们有了 60 字节的数据，应该足够让我们编写一些代码来理解它。&lt;/p&gt;
&lt;h3 id=&#34;http-数据--&#34;&gt;HTTP 数据 :-)&lt;/h3&gt;
&lt;p&gt;让我们看看当我们尝试进行 HTTP 请求时会发生什么！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ~ curl code/test -vvv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*   Trying 192.168.0.22:80...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Connected to code (192.168.0.22) port 80 (#0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; GET /test HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Host: code
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; User-Agent: curl/7.87.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Accept: */*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我正在使用&lt;code&gt;curl&lt;/code&gt;从主机&lt;code&gt;code&lt;/code&gt;（code 是我的开发 VM，运行 code-server）请求 URL &lt;code&gt;/test&lt;/code&gt;。我们可以看到发送到服务器的数据（每行以&lt;code&gt;&amp;gt;&lt;/code&gt;开头，用于确定通信的方向）。HTTP 请求中的第一行数据通常是一个&lt;em&gt;动词&lt;/em&gt;，后面是我们希望与之交互的资源，然后是 HTTP 规范和回车符，如&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP#HTTP/1.1_request_messages&#34; title=&#34;HTTP 标准&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 标准&lt;/a&gt;中定义。因此，我们可以看到我们关心的行是&lt;code&gt;GET /test&lt;/code&gt;（在这一点上，我们/我不太关心 HTTP 规范:D）。&lt;/p&gt;
&lt;p&gt;第一步是读取&lt;code&gt;pdata&lt;/code&gt;的前三个字符，查找&lt;code&gt;pdata[0] == G&lt;/code&gt;，&lt;code&gt;pdata[1] == E&lt;/code&gt;和&lt;code&gt;pdata[2] == T&lt;/code&gt;，这将有效地帮助我们确定首先是否是 HTTP 请求，特别是是否是 HTTP 请求！&lt;/p&gt;
&lt;p&gt;一旦我们验证了这前 3 个字节，我们将想要从第 4 个字节（请求的前三个字节加上一个用于分隔的空格）开始读取更多数据！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_path_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 查找请求 URI（从偏移量 4 开始），以空格结束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;path_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的函数将从 HTTP 数据的第 4 个字节开始（从第 4 个字节开始）读取其余的数据，直到遇到空格为止，留下我们要&lt;code&gt;GET&lt;/code&gt;的 URL！我们可以通过一个调试打印语句来验证这一点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;bpf_printk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;- incoming path [%s], length [%d]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在日志中显示如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;idle&amp;gt;-0       [001] dNs3. 2252901.017812: bpf_trace_printk: &amp;lt;- incoming path [/test], length [5]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;对-http-应用程序请求采取行动&#34;&gt;对 HTTP 应用程序请求采取行动&lt;/h3&gt;
&lt;p&gt;上述解释详细说明了我们如何读取数据以及如何读取数据，但如果我们想要“动态”查找 HTTP 请求，我们将需要使用 eBPF 映射。&lt;/p&gt;
&lt;p&gt;在我们的 Go 用户空间代码中，我们执行以下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;The URL Path to watch for&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 创建一个 uint8 数组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;urlPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 将我们的字节复制到 uint8 数组中（我们可以进行类型转换）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urlPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:],&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 将我们的 urlPath 作为键
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;objs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UrlMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urlPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;bpfUrlPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;urlPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;PathLen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urlPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如我们在上面的代码中看到的，当我们启动 Go 程序时，它将从标志&lt;code&gt;-path&lt;/code&gt;中读取，并将其用作我们 eBPF 映射中的&lt;strong&gt;键&lt;/strong&gt;，可以暂时忽略值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;found_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bpf_map_lookup_elem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;found_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;bpf_printk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Looks like we&amp;#39;ve found your path [%s]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 可能进行更多操作，阻止流量或重定向？
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在我们的 eBPF 程序中，我们将对 HTTP 请求进行映射查找，如果该请求作为 char 数组存在于&lt;strong&gt;键&lt;/strong&gt;中，那么我们就可以对其进行操作！&lt;/p&gt;
&lt;p&gt;现在启动我们的 Go 程序 &lt;code&gt;sudo ./http -interface ens160 -path /test&lt;/code&gt; 将得到以下结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO[0000] Starting 🐝 the eBPF HTTP watcher, on interface [ens160] for path [/test]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO[0000] Loaded TC QDisc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO[0000] Press Ctrl-C to exit and remove the program
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;idle&amp;gt;-0       [001] d.s3. 2252901.015575: bpf_trace_printk: &amp;lt;- 0.0.0.0:56345 -&amp;gt; 0.0.0.0:80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;idle&amp;gt;-0       [001] D.s3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;. 2252901.015642: bpf_trace_printk: -&amp;gt; 192.168.0.22:80 -&amp;gt; 192.168.0.180:56345
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;idle&amp;gt;-0       [001] d.s3. 2252901.017552: bpf_trace_printk: &amp;lt;- 0.0.0.0:56345 -&amp;gt; 0.0.0.0:80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;idle&amp;gt;-0       [001] d.s3. 2252901.017793: bpf_trace_printk: &amp;lt;- 0.0.0.0:56345 -&amp;gt; 0.0.0.0:80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;idle&amp;gt;-0       [001] dNs3. 2252901.017812: bpf_trace_printk: &amp;lt;- incoming path [/test], length [5]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;idle&amp;gt;-0       [001] dNs3. 2252901.017814: bpf_trace_printk: Looks like we&amp;#39;ve found your path [/test]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;解析 HTTP 并不太困难，因为它是一个相对简单的协议，它使用简单的动词和结构的简单方法，使用空格和回车符来区分。这种方法可能也适用于其他协议，如 DNS、POP3 或 SMTP。当数据加密时，我们需要一种解密的方法，然后才能解析数据（这超出了我的能力&amp;hellip;）。但是，我希望这会激发你更多地尝试使用 eBPF 来解析和操作应用程序的想法！&lt;/p&gt;
&lt;p&gt;我一直想写一些有希望有用的关于 eBPF 的帖子，尽管通常在我想出可能有用的东西之后，别人已经抢先一步。鉴于我已经在一段时间里以某种方式关注网络，这基本上是我关注的领域，尽管我确实为最近的 eBPF 峰会 2023 编写了一些有趣的内容。如上所述，有很多人开始撰写 eBPF 内容，所以我可能会参考他们的帖子，而不是重复内容。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何用 eBPF 改变网络编程的游戏规则</title>
      <link>https://jimmysong.io/trans/ebpf-adventures-in-networking/</link>
      <pubDate>Wed, 10 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/ebpf-adventures-in-networking/</guid>
      <description>
        
        
        &lt;p&gt;我一直想写一些关于 eBPF 的帖子，希望它们能有所帮助，尽管通常在我想到可能有用的东西时，其他人已经先我一步了。鉴于我已经在网络方面集中精力一段时间，这基本上是我专注的领域，尽管我确实设法为最近的 eBPF 峰会 2023 准备了一些我认为很有趣的东西。正如我之前提到的，有很多人开始撰写关于 eBPF 的内容，因此我可能会参考他们的帖子，而不是重复内容。&lt;/p&gt;
&lt;p&gt;我将从一些在 Linux 内核中可能或可能不会遇到的首字母缩写或技术开始。但基本上从我的角度来看，这些是你修改正在运行的系统以与网络数据交互的主要选项。&lt;/p&gt;
&lt;h3 id=&#34;xdp&#34;&gt;XDP&lt;/h3&gt;
&lt;p&gt;关于 eXpress Data Plane 已经存在大量信息，因此我不会深入探讨太多细节。&lt;code&gt;tl;dr&lt;/code&gt;是 XDP eBPF 程序挂钩到 XDP 将使其能够访问由内核自身处理之前的传入网络帧。在某些情况下，eBPF 程序将加载到 NIC 驱动程序本身中，这将有效地将程序卸载到 NIC 本身。&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最佳性能&lt;/li&gt;
&lt;li&gt;非常适用于防火墙、DDoS 防护或负载均衡等用例&lt;/li&gt;
&lt;li&gt;在任何其他内容进行修改之前看到传入的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;仅支持入站流量，使用 XDP 程序看到的任何流量都只是传入流量，目前无法看到出站流量&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;XDP&lt;/code&gt;数据结构，与大多数套接字编程的默认数据结构&lt;code&gt;SKB&lt;/code&gt;有一些不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tctraffic-control或流量控制&#34;&gt;TC（Traffic Control）或流量控制&lt;/h3&gt;
&lt;p&gt;Traffic Control 是内核网络结构的一个重要组成部分，主要包括添加诸如 qdisc 和过滤器之类的功能到接口的能力。qdisc 主要集中在为 TBD（待定）提供服务，而过滤器通常在底层实际上是一个 eBPF 程序。&lt;/p&gt;
&lt;p&gt;常见的工作流程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个关注入口或出口的 qdisc，或者替换一个现有的 qdisc。qdisc 将附加到接口上。&lt;/li&gt;
&lt;li&gt;加载你的 eBPF 程序。&lt;/li&gt;
&lt;li&gt;创建一个过滤器，将其附加到通过接口上的 qdisc 上的入口或出口之一。该过滤器将与 eBPF 程序相关联，这意味着所有传入或传出的流量现在都会通过一个程序运行（如果连接）。&lt;/li&gt;
&lt;li&gt;获利 💰&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;优点-1&#34;&gt;优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供入口和出口的挂钩点&lt;/li&gt;
&lt;li&gt;使用传统的&lt;code&gt;SKB&lt;/code&gt;数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点-1&#34;&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将 TC 程序附加到入口或出口队列稍微复杂一些。用户需要使用 qdisc 来做到这一点，某些 eBPF SDK 不会原生支持 TC 程序的使用。&lt;/li&gt;
&lt;li&gt;TC eBPF 程序看到的流量可能已经被之前的 XDP 程序或内核本身修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统调用&#34;&gt;系统调用&lt;/h3&gt;
&lt;p&gt;与其他两种专门设计用于处理网络的方法相比，这可能会显得有些奇怪，因为它是将一些 eBPF 代码附加到内核中的系统调用的一种替代方法，具体来说是&lt;code&gt;tcp4_connect()&lt;/code&gt; / &lt;code&gt;tcp6_connect()&lt;/code&gt;等调用。这在协议栈中略微靠后，因为在此时，传入数据包已经经过了很多内核逻辑，而 eBPF 内省点是当流量即将与应用程序本身交互时。&lt;/p&gt;
&lt;h2 id=&#34;编写网络程序&#34;&gt;编写网络程序！&lt;/h2&gt;
&lt;p&gt;所以在这一点上，我们（希望）意识到我们有许多不同的入口点，允许我们在“传送带”上注入我们的代码，这个传送带从 NIC 开始，一直到应用程序（以及在出站的情况下）。&lt;/p&gt;
&lt;h3 id=&#34;回顾&#34;&gt;回顾&lt;/h3&gt;
&lt;p&gt;在我们所谓的“传送带”的开头，我们可以附加我们的 XDP 程序并获得未经触碰的原始网络数据。在“传送带”的中间，我们的 TC 程序将成为通过内核的路径的一部分，并接收可能被修改的网络数据。在传送带的末端，我们可以将代码附加到应用程序将在它被运行之前获取网络数据的函数，这些函数可以在传送带的末端进行附加。&lt;/p&gt;
&lt;h3 id=&#34;数据表示&#34;&gt;数据表示&lt;/h3&gt;
&lt;p&gt;你的程序附加到的位置决定了两个主要事物，一个是潜在的流量修改的相对级别，另一个是流量的表示方式。&lt;/p&gt;
&lt;h3 id=&#34;xdp-结构&#34;&gt;XDP 结构&lt;/h3&gt;
&lt;p&gt;我会写关于它的内容，但是 DataDog 已经做了，你可以在&lt;a href=&#34;https://www.datadoghq.com/blog/xdp-intro/#the-flow-of-an-xdp-program&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;阅读。&lt;/p&gt;
&lt;h3 id=&#34;skb套接字缓冲区&#34;&gt;SKB（套接字缓冲区）&lt;/h3&gt;
&lt;p&gt;SKB 是在 eBPF 添加到内核之前就存在于内核中的数据类型，它已经具备了一些使与 SKB 对象交互变得稍微容易一些的辅助功能。有关更深入的 SKB 介绍，你可以阅读此文 -&amp;gt; &lt;a href=&#34;http://vger.kernel.org/~davem/skb_data.html&#34; title=&#34;http://vger.kernel.org/~davem/skb_data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://vger.kernel.org/~davem/skb_data.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;解析数据&#34;&gt;解析数据&lt;/h3&gt;
&lt;p&gt;无论与哪个结构进行交互，它们都共享一些共同之处，这主要是两个变量，对于这两种数据类型来说是相同的。&lt;/p&gt;
&lt;p&gt;这些变量是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt;，它是 eBPF 程序接收到的数据的指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data_len&lt;/code&gt;，它是一个整数，指定了有多少数据可用（以帮助确保你永远不会访问&lt;code&gt;data&lt;/code&gt;超过&lt;code&gt;data_len&lt;/code&gt;（显而易见的真理 🤓））&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以这一切似乎很简单，但等等&amp;hellip; &lt;code&gt;*data&lt;/code&gt;中实际上有什么？（这取决于你的发现）&lt;/p&gt;
&lt;p&gt;通过不断“转换”&lt;code&gt;*data&lt;/code&gt;并沿着它移动以剥离各种标头，我们可以了解和查找底层数据！&lt;/p&gt;
&lt;h3 id=&#34;转换&#34;&gt;转换？&lt;/h3&gt;
&lt;p&gt;如果你愿意，你可以跳过此部分，但这是一个快速（且糟糕）的示例，说明了我们通常如何将一些原始数据转换为有意义的东西。目前，&lt;code&gt;*data&lt;/code&gt;将只是一串随机数据，毫无意义，我们需要有效地为其添加“格式”以便我们可以理解其外观。&lt;/p&gt;
&lt;p&gt;考虑一下随机数据行：“Bobby0004500100.503 Harvard Drive90210”，其中一些对裸眼来说是有意义的，但有些是不清楚的。&lt;/p&gt;
&lt;p&gt;想象一下名为“person”的数据结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Name: string
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Age: number
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Balance: float
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Street: string
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ZipCode: number
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们要将我们的随机数据“转换”为上面的“person”结构，它将突然变成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Name: Bobby
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Age: &lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Balance: 100.50
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Street: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; Harvard Drive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ZipCode: &lt;span class=&#34;m&#34;&gt;90210&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在突然间，我能够理解并访问结构中的底层变量，因为它们现在是有意义的，即 person-&amp;gt;Name，并且发现此特定的 person 类型对象具有名称变量“Bobby”！&lt;/p&gt;
&lt;p&gt;这正是我们将对我们的&lt;code&gt;*data&lt;/code&gt;所做的！&lt;/p&gt;
&lt;h3 id=&#34;数据中包含什么&#34;&gt;数据中包含什么？&lt;/h3&gt;
&lt;p&gt;因此，第一步是确定数据是否以以太网帧开头！几乎所有传输的数据都以以太网帧开头，这相当简单，但其作用是具有源和目标硬件地址（无论虚拟化/容器化/有线网络还是 WiFi 如何）。因此，我们的第一步是将我们的&lt;code&gt;*data&lt;/code&gt;转换为类型&lt;code&gt;ETHHDR&lt;/code&gt;，如果成功，我们现在将能够了解组成以太网头数据类型的变量。这些包括源和目标 MAC 地址，但更重要的是剩余数据的内容是什么。再次，在大多数情况下，以太网头之后的&lt;code&gt;*data&lt;/code&gt;内容通常是 IP 头，但我们将通过检查以太网帧的 TBD 变量来验证。&lt;/p&gt;
&lt;p&gt;一旦我们验证下一组数据是 IP 头，我们将需要将以太网头之后的数据转换为 IPHDR 类型。一旦我们这样做，我们将能够访问 IP 特定的数据，例如源 IP（&lt;code&gt;saddr&lt;/code&gt;）或目标地址（&lt;code&gt;daddr&lt;/code&gt;），再次重要的是 IP 头包含一个变量，详细说明了 IP 头之后的数据是什么。这通常是 TCP 头或 UDP 头，但还有其他选择，例如 sctp 等。&lt;/p&gt;
&lt;p&gt;一旦我们查看了 IP 头的内部并确定数据类型是 TCP（也可能是 UDP 或其他内容），我们将把以太网头和 IP 头之后的数据都转换为 TCP 头类型！（几乎完成了）。通过访问 TCP 头的内容，我们可以获得 TCP 特定的数据，例如源端口或目标端口，用于验证数据的有效性的校验和以及其他有用的变量。&lt;/p&gt;
&lt;p&gt;现在我们几乎拥有一切，但是 TCP 头的长度可能是可变的，因此我们需要通过查看 tcl_len 变量来确定这一点，我们需要将其乘以 4。现在我们拥有了访问最终数据所需的一切！&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;*data&lt;/code&gt;指向数据的开头！我们已经确定了以太网头之后是 IP 头，最后是 TCP 头，这意味着`*data + 以太网头 + IP 头 + TCP 头 = 实际应用程序数据！&lt;/p&gt;
&lt;h3 id=&#34;我们可以用这些信息做什么&#34;&gt;我们可以用这些信息做什么？&lt;/h3&gt;
&lt;p&gt;当我们解析各种标头时，实际上在 OSI 模型的不同层次上解锁了越来越多的信息！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[第 2 层]&lt;/strong&gt; 以太网头为我们提供了源和目标硬件地址，我们可以使用此信息来潜在地阻止从我们知道危险的源 MAC 地址处理的帧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[第 3 层]&lt;/strong&gt; IP 头包含源和目标 IP 地址，再次，我们可以像防火墙一样运作，通过使用 eBPF 程序丢弃特定 IP 地址的所有流量。或者，我们可以根据 IP 地址重定向流量，或者甚至在这一层实施负载均衡逻辑，以将流量重定向到其他底层 IP 地址集合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[第 4 层]&lt;/strong&gt; TCP 或 UDP 标头定义了目标端口号，我们可以使用这些信息来确定应用程序协议是什么（即端口 80 通常意味着剩余的*data 可能是 HTTP 数据）。在这一层，我们通常会执行负载均衡等操作，基于目标（即在多个其他负载均衡器地址之间平衡）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[第 7 层]&lt;/strong&gt; 正如前面提到的，各种标头集合的末尾的数据是实际的应用程序数据，只要我们知道格式，我们也可以解析它。例如，如果外部 Web 浏览器尝试访问我的计算机上的&lt;code&gt;/index.html&lt;/code&gt;并附加了 eBPF 程序，我会解析到 TCP，然后确定它是端口 80，然后应用程序数据应该是 HTTP 格式。我可以通过查看应用程序数据的前三个字符（在所有标头之后）来验证这一点，使用以下伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ApplicationData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; EthernetHDR + IPHDR + TCPHDR // 将所有标头长度相加以找到数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;If &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; data&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ApplicationData&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ApplicationData+1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ApplicationData+2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	// 这是一个HTTP GET请求
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	// 做一些令人兴奋的事情
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;现在我们“有点”理解了这个逻辑，也许我们应该考虑实施一些代码来完成所有这些&amp;hellip;但这将是另一天的事情。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>云原生软件的关键用例安全保障之道</title>
      <link>https://jimmysong.io/trans/securing-cloud-natives-most-important-use-cases/</link>
      <pubDate>Wed, 10 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/securing-cloud-natives-most-important-use-cases/</guid>
      <description>
        
        
        &lt;p&gt;摘要：云原生软件开发意味着为公有云和私有云的特性优化应用和环境。Chainguard 旨在提供不影响开发者体验的软件供应链安全工具，通过提供最小化、强化的容器镜像，让用户能够准确地扫描漏洞并消除 CVE 警报。本文介绍了 Chainguard Images 为 Istio 和 Cilium 这两个云原生基础技术提供的安全增强方案。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;从根本上说，构建云原生软件意味着构建针对公共和私有云特性进行优化的应用程序和环境。开发云原生软件意味着管理一定程度的混乱，这不是所有类型的软件都需要的。&lt;/p&gt;
&lt;p&gt;这在新的一年尤其重要，我们可以预期产品将趋向于优先考虑开发者体验，并且平台工程的崛起。良好的工程和工具使开发者可以专注于构建和创新。已经构建的所有内部开发者平台和即将推出的平台都需要尽量将基础设施管理从开发者那里抽象出来。&lt;/p&gt;
&lt;p&gt;这正是 Chainguard 想要解决的问题领域，特别是在安全性和漏洞管理方面。我们致力于提供不妨碍开发者体验的工具，以确保软件供应链的安全。我们通过提供最小化、加固的容器镜像来实现这一目标，这使我们的用户可以获得准确的扫描结果，并将 CVE 收件箱警报降至零。&lt;/p&gt;
&lt;h3 id=&#34;推出新的-chainguard-images-捆绑包适用于-cilium-和-istio&#34;&gt;推出新的 Chainguard Images 捆绑包，适用于 Cilium 和 Istio&lt;/h3&gt;
&lt;p&gt;为了实现这一目标，我们密切关注最受欢迎的开源项目，但也关注那些如果经过加固，将为整个开源生态系统提供重要的安全改进的项目。为了在整个生态系统中产生最大的影响，我们应该帮助加固那些作为云原生软件基石的技术。Istio 和 Cilium 正是这样的明显示例，它们是云原生软件生态系统的基础构建模块之一。通过提供新的 Chainguard Images Istio 和 Cilium 捆绑包，我们为这些项目的用户提供了一个安全地将它们引入其构建流程的简便方法。&lt;/p&gt;
&lt;p&gt;在任何给定的供应链中，有些原材料比其他原材料更为基础。如果这些原材料得到了妥善保护，那么这将对后续工作产生连锁效应（或者如果你愿意的话，可以说是对整个堆栈产生上下游影响）。&lt;/p&gt;
&lt;p&gt;Cilium 和 Istio 技术都涵盖了对 Kubernetes 环境具有基础作用的各种用例。Cilium 和 Istio 是两个流行的工具，通过提供流量路由、负载平衡、服务发现等功能来帮助解决这些挑战。这些功能对于确保 Kubernetes 和其他云原生软件部署的顺利、高效和安全运行至关重要。最终，构建云原生软件意味着创建专为云设计的应用程序，而 Cilium 和 Istio 在帮助开发者实现这一目标方面发挥了关键作用。&lt;/p&gt;
&lt;h3 id=&#34;istio-和-cilium-在云计算中不可或缺的作用&#34;&gt;Istio 和 Cilium 在云计算中不可或缺的作用&lt;/h3&gt;
&lt;p&gt;根据 2022 年的 &lt;a href=&#34;https://www.cncf.io/reports/cncf-annual-survey-2022/&#34; title=&#34;CNCF 年度调查&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 年度调查&lt;/a&gt;，Istio 是受访者中使用最广泛的服务网格，73% 的受访公司使用它。这种广泛的采用证明了 Istio 在解决各种服务管理挑战方面的有效性，使其成为现代企业寻求构建强大、安全和可扩展的微服务架构的重要工具。Istio 在 GitHub 上拥有超过 34,000 颗星星，使其成为 CNCF 中最受欢迎的项目之一。&lt;/p&gt;
&lt;p&gt;从同一份 CNCF 调查中，有 47% 的受访者将 Cilium 作为他们容器编排平台（如 Kubernetes）的首选网络插件。它也受欢迎于网络安全领域，有 43% 的受访者将其用于此目的。eBPF 的未来和力量是不可思议的，所有人都同意这一点。&lt;/p&gt;
&lt;p&gt;最近，我们推出了我们的新的 &lt;a href=&#34;https://images.chainguard.dev/&#34; title=&#34;Chainguard Images 目录&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chainguard Images 目录&lt;/a&gt;，这是一个公开可用的网站，用户可以在其中浏览我们库存中的所有镜像。在每个 Chainguard&lt;/p&gt;
&lt;p&gt;Image 列表中，你将找到有关安装、基础设施、签名和 SBOM 的源数据的相关信息，以及更多其他相关信息。Chainguard Images 目录还包括一个新的&lt;a href=&#34;https://images.chainguard.dev/security&#34; title=&#34;安全通报&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全通报&lt;/a&gt;页面，显示用户已知的 CVE，修复的状态等信息。&lt;/p&gt;
&lt;p&gt;如果你正在寻找更多关于如何在本地环境中启动 Chainguard Images Cilium 或 Istio 捆绑包的技术指导，请查看 Chainguard 工程师&lt;a href=&#34;https://www.linkedin.com/in/tcnghia/&#34; title=&#34;Nghia Tran&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nghia Tran&lt;/a&gt;在 Chainguard Academy 上提供的这些方便入门的指南。非常感谢我们的朋友&lt;a href=&#34;https://www.linkedin.com/in/feroz-salam-372a4113/&#34; title=&#34;Isovalent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Isovalent&lt;/a&gt;的 Feroz Salam 在 Cilium Images 方面给了我们帮助，以及多年来帮助我们的 Istio 的&lt;a href=&#34;https://www.linkedin.com/in/-johnhoward/&#34; title=&#34;John Howard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Howard&lt;/a&gt;！以下是指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://edu.chainguard.dev/chainguard/chainguard-images/getting-started/getting-started-istio/&#34; title=&#34;开始使用 Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开始使用 Istio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://edu.chainguard.dev/chainguard/chainguard-images/getting-started/getting-started-cilium/&#34; title=&#34;开始使用 Cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开始使用 Cilium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chainguard Developer Images 提供了带有 &lt;code&gt;:latest&lt;/code&gt; 和 &lt;code&gt;:latest-dev&lt;/code&gt; 标签的免费镜像，供你在开发和测试环境中使用。在新的目录中，每个镜像页面还包括重要的特定于镜像的详细信息，例如版本标签和其他变体，如 FIPS 和长期支持（LTS），这些都适用于购买了这些解决方案的 Chainguard Images 客户。如果你想了解有关我们的 Production Images 中面向企业的功能的更多信息，请&lt;a href=&#34;https://www.chainguard.dev/contact&#34; title=&#34;联系我们的团队&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们的团队&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何使用 Calico 构建和管理 Kubernetes Cluster Mesh</title>
      <link>https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/</link>
      <pubDate>Tue, 09 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 是构建灵活可扩展基础设施以运行动态工作负载的优秀解决方案。然而，随着我们的集群扩展，我们可能会面临同时扩展和管理多个集群的不可避免情况。这个概念可能会给我们的日常工作负载维护带来很多复杂性，并增加在所有环境中保持所有策略和服务的最新性的难度。在这种情况下，&lt;a href=&#34;https://www.tigera.io/blog/using-calico-to-create-a-kubernetes-cluster-mesh-for-multi-cluster-environments/&#34; title=&#34;集群网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;集群网格&lt;/a&gt; 可以在这些集群之间建立无缝的连接，并将工作负载集成到统一的网络环境中。&lt;/p&gt;
&lt;p&gt;集群网格是连接独立 Kubernetes 集群并在不同集群中的资源之间提供连接性的绝佳方式，以提供超出单个集群情况下可能的容错性和高可用性。&lt;/p&gt;
&lt;p&gt;在本博客文章中，我们将引导你完成构建多集群环境并建立集群网格所需的步骤，利用 Calico Open Source 的多功能能力。我们将探讨不同的方法，如顶级机架 (TOR) 和 overlay，以建立集群网格，解决不同环境提出的独特网络挑战。这是可能的，因为 Calico 提供了建立多集群环境的多种方法，灵活适应你的网络基础设施和特定要求。此外，我们还将介绍如何加入 DNS 连通性以增强集群间通信。&lt;/p&gt;
&lt;p&gt;随着你的集群网格环境扩展，我们将讨论涉及&lt;a href=&#34;https://www.tigera.io/learn/guides/kubernetes-security/kubernetes-federation/&#34; title=&#34;联邦&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联邦&lt;/a&gt;和使用 Calico Enterprise 进行多集群管理的下一步，以及涉及联邦集群。我们将展示 Calico 如何提供多集群管理平面，允许在集群间无缝实施安全性和可观测性。&lt;/p&gt;
&lt;p&gt;最后，我们将涉及到 Calico Enterprise 联邦身份如何在&lt;a href=&#34;https://www.tigera.io/learn/guides/kubernetes-networking/kubernetes-multi-cluster/&#34; title=&#34;多集群&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多集群&lt;/a&gt;环境中弥合差距，提供一种统一的方式来定制网络策略，可以引用来自不同集群的资源并构建跨集群边界负载平衡请求的服务。&lt;/p&gt;
&lt;h2 id=&#34;什么是集群网格&#34;&gt;什么是集群网格？&lt;/h2&gt;
&lt;p&gt;集群网格连接了两个或多个独立集群内部资源。通常，每个 Kubernetes 集群将为内部资源分配私有 IP 地址，除非将&lt;strong&gt;节点端口&lt;/strong&gt;或&lt;strong&gt;负载均衡器&lt;/strong&gt;服务与它们关联，否则这些资源对任何外部实体都不可见。然而，将资源暴露给所有人可能会带来安全风险，并破坏你应该保持的&lt;a href=&#34;https://www.tigera.io/learn/guides/zero-trust/zero-trust-security/&#34; title=&#34;零信任安全&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任安全&lt;/a&gt;姿态，以保护你的环境。此外，它可以通过允许恶意用户利用漏洞并在关键服务中占据立足点来危及整个环境。&lt;/p&gt;
&lt;p&gt;在多集群环境中建立集群网格提供了一种安全机制，用于促进集群之间的直接通信。这种通信可以通过指定的集群服务或私有 IP 地址进行，确保强大而受控制的交互，同时减轻了将内部资源暴露给更广泛网络的风险。&lt;/p&gt;
&lt;h3 id=&#34;如何构建多集群环境并建立集群网格&#34;&gt;如何构建多集群环境并建立集群网格&lt;/h3&gt;
&lt;p&gt;以下图片说明了 Calico 如何在你的集群之间建立集群网格连接。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/1_huc6e3bf5c860d4951a5c56f583a803318_23942_958x587_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/1.png&#34; data-img=&#34;/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/1.png&#34; data-width=&#34;958&#34; data-height=&#34;587&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;Calico 提供了不同的方式，你可以使用这些方式来构建多集群环境，从而提供了与你的网络基础设施和需求相匹配的灵活性。Calico 最好的部分是，在将两个集群连接在一起后，它将自动提供集群网格，你可以通过使用它们的内部集群服务和 IP 地址开始在不同的集群中使用资源。&lt;/p&gt;
&lt;h3 id=&#34;在扁平网络环境中的集群网格&#34;&gt;在扁平网络环境中的集群网格&lt;/h3&gt;
&lt;p&gt;集群网格的配置可以根据底层基础设施的不同而变化，但其基本目的保持不变，实质上是用于建立独立集群之间的连接。&lt;/p&gt;
&lt;p&gt;例如，在我们的集群的参与节点通过广播域直接连接的环境中，我们可以通过传播内部路由到外部实体的路由协议来快速建立一个网格。这将允许我们广告内部路由，而无需通过&lt;strong&gt;节点端口&lt;/strong&gt;服务将它们暴露给我们的目标服务。&lt;/p&gt;
&lt;p&gt;以下图片说明了扁平网络的常见设计：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/2_hu9fb4ef0fa3c0b12b4cd895c6fa568fcd_7488_358x364_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/2.png&#34; data-img=&#34;/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/2.png&#34; data-width=&#34;358&#34; data-height=&#34;364&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;考虑观看我们的视频，&lt;a href=&#34;https://www.youtube.com/watch?v=PefluN8YM9o&amp;amp;ab_channel=ProjectCalico&#34; title=&#34;使用 Calico 开源进行 Kubernetes 的 BGP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Calico 开源进行 Kubernetes 的 BGP&lt;/a&gt;，以了解使用全网格方法部署集群网格的全面教程。&lt;/p&gt;
&lt;h3 id=&#34;在企业或云网络环境中的集群网格&#34;&gt;在企业或云网络环境中的集群网格&lt;/h3&gt;
&lt;p&gt;在复杂的网络环境中，例如云或企业网络，形成集群的基础设施资源通常分为单独的广播域。这是因为这些域中的每个实体都被要求通过网关来到达其目的地。但是，默认情况下，这个额外的跳跃（网关）需要了解我们在 Kubernetes 集群中创建的内部集群资源。因此，网关会丢弃前往这些内部资源的数据包，使简单的路由方法无法满足要求。&lt;/p&gt;
&lt;p&gt;以下图片说明了复杂网络环境的常见设计：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/3_hu131d697ea25f60816a99dfe45f7913bf_16473_579x357_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/3.png&#34; data-img=&#34;/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/3.png&#34; data-width=&#34;579&#34; data-height=&#34;357&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;既然我们知道了问题，让我们看看如何利用 Calico 来解决这个问题。&lt;/p&gt;
&lt;p&gt;为了在这样的环境中建立集群网格，我们可以使用两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶层机架（TOR）&lt;/li&gt;
&lt;li&gt;overlay&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tor-方法推荐&#34;&gt;TOR 方法（推荐）&lt;/h4&gt;
&lt;p&gt;在企业或云环境中，资源通常通过中间网关互连。通常，我们建议我们的客户使用 TOR，因为通过与云提供商自动建立路由传播机制来使你的集群了解你监管下的所有云资源，从而使你的集群具备高可用性。这也在云提供商的底层网络基础设施上发挥了作用，从而使你的集群在网络基础设施的支持下具备高可用性。&lt;/p&gt;
&lt;p&gt;假设你可以配置云网关并将其与像 Calico 这样的强大的&lt;a href=&#34;https://www.tigera.io/learn/guides/kubernetes-networking/kubernetes-cni/&#34; title=&#34;容器网络接口（CNI）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器网络接口（CNI）&lt;/a&gt;配对，那么你可以利用 BGP 路由来建立集群网格。Calico BGP 集成提供了动态路由，允许你将内部 Pod 和集群 IP 路由传播到网络基础设施中的其他资源。&lt;/p&gt;
&lt;p&gt;以下图片说明了支持 BGP 的云环境的常见设计：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/4_hu9fc30ce6bdbd6078a2ff08a4f9f44a5b_7195_310x452_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/4.png&#34; data-img=&#34;/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/4.png&#34; data-width=&#34;310&#34; data-height=&#34;452&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;在许多情况下，TOR（顶层机架）提高了高可用性和容错性。这种方法优化了网络流量分布，减轻了单点故障，并进一步增强了你的基础设施的可靠性和弹性。&lt;/p&gt;
&lt;p&gt;注意：要了解使用 TOR 方法部署集群网格的详细指南，请查看&lt;a href=&#34;https://docs.tigera.io/calico/latest/networking/configuring/bgp#top-of-rack-tor&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;的教程。&lt;/p&gt;
&lt;h4 id=&#34;ipip-overlay&#34;&gt;IPIP overlay&lt;/h4&gt;
&lt;p&gt;在某些情况下，你可能无法访问网关以修改其设置，或者它可能不支持 BGP 对等连接。在这种情况下，你可以使用 IPIP overlay 来封装流向目标集群的流量。overlay 网络允许网络设备在底层网络（称为底层）上相互通信，而底层网络不需要了解连接到 overlay 网络的设备。&lt;/p&gt;
&lt;p&gt;注意：如果你想了解更多关于 overlay 网络的信息，请单击&lt;a href=&#34;https://docs.tigera.io/calico/latest/about/kubernetes-training/about-networking#overlay-networks&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;vxlan-overlay-calico-enterprise&#34;&gt;VXLAN overlay (Calico Enterprise)&lt;/h4&gt;
&lt;p&gt;即将发布的 Calico Enterprise（3.18+）版本将在多集群环境下启用 VXLAN 网络。这种方法的一个显著优势之一是能够使用身份感知策略来保护跨集群的流量（你将在接下来的联邦部分了解有关此功能的信息）。通过其多集群网络功能，Calico Enterprise 自动扩展 overlay 网络，以在集群之间建立 Pod IP 路由。&lt;/p&gt;
&lt;p&gt;在使用 VXLAN 的 Calico Enterprise 集群网格设置中，每个集群都充当本地集群和远程集群，本地集群配置为从远程集群的加密通道中检索端点和路由数据。VXLAN 集群网格提供了一种安全、可扩展和高效的解决方案，用于管理多集群网络，实现了跨集群的无缝通信和身份感知策略强制执行。&lt;/p&gt;
&lt;p&gt;注意：如果你想了解有关 VXLAN overlay 的更多信息，请单击&lt;a href=&#34;https://www.tigera.io/news/tigera-introduces-powerful-enhancements-to-calico-open-source-and-calico-cloud-to-elevate-security-scalability-and-performance/&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下图片说明了没有 BGP 能力的云环境的常见设计：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/5_huf3baf178438fbb5f9a3ae4e5014ff10c_9335_353x445_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/5.png&#34; data-img=&#34;/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/5.png&#34; data-width=&#34;353&#34; data-height=&#34;445&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;注意：要了解使用 TOR 方法部署集群网格的全面指南，请查看&lt;a href=&#34;https://youtu.be/rv-DnExi6SM?t=2287&#34; title=&#34;此教程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此教程&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;dns-连接&#34;&gt;DNS 连接&lt;/h3&gt;
&lt;p&gt;在建立多集群之后，各个集群可以在 IP 级别进行通信。然而，根据你的网络规模以及 Kubernetes IP 地址的性质，这些地址可以随时动态更改，因此你需要实现一种更容易建立这些集群之间连接的方式。域名解析可以成为你的集群网格的重要补充，允许更容易进行集群间通信。&lt;/p&gt;
&lt;p&gt;在大多数 Kubernetes 部署中，CoreDNS 作为负责解析集群域名的主要工作负载。要将 DNS 与集群网格无缝集成，只需对 CoreDNS 配置映射进行简单的修改即可。具体来说，你需要将其他集群的 CoreDNS 内部服务 IP 添加为转发器到你的配置中。&lt;/p&gt;
&lt;p&gt;这个简单的调整使你的集群能够通过向其他集群发送查询来解析名称，并检索所需资源的相应 IP 地址。这种集成大大简化了集群网格内的通信，增强了整体连通性，并提高了管理效率。&lt;/p&gt;
&lt;p&gt;注意：考虑观看&lt;a href=&#34;https://youtu.be/rv-DnExi6SM?t=2574&#34; title=&#34;此视频&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此视频&lt;/a&gt;以了解有关 DNS 连接的全面教程。&lt;/p&gt;
&lt;h2 id=&#34;联邦和多集群管理下一步&#34;&gt;联邦和多集群管理（下一步）&lt;/h2&gt;
&lt;p&gt;随着你的环境扩展，你可能会遇到多个团队必须同时在所有集群上工作的情况。多集群管理（MCM）通常解决的一个常见问题是以集中的方式处理来自不同集群的对象，包括网络策略、Pod、&lt;a href=&#34;https://www.tigera.io/learn/guides/kubernetes-security/kubernetes-compliance/&#34; title=&#34;合规性&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;合规性&lt;/a&gt;报告、可观测性和安全日志。&lt;/p&gt;
&lt;p&gt;虽然从技术上讲，可以通过 kubectl 为每个集群手动创建策略、网络集和其他资源，但这种方法会在你的日常维护任务中引入相当复杂性，并可能为意外的凭据泄漏开辟一条途径。此外，与我们在前一节中探讨的类似，它反映了没有良好结构的多集群环境所面临的挑战，特别是在集群管理、网络、故障排除和可观测性方面。&lt;/p&gt;
&lt;h3 id=&#34;使用-calico-enterprise-进行多集群管理&#34;&gt;使用 Calico Enterprise 进行多集群管理&lt;/h3&gt;
&lt;p&gt;Calico Enterprise 提供了一个 MCM 平面，通过在这些集群之间建立安全连接，实现了多集群的安全和可观测性。该架构还支持跨集群联邦&lt;a href=&#34;https://www.tigera.io/learn/guides/kubernetes-security/kubernetes-network-policy/&#34; title=&#34;网络策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络策略&lt;/a&gt;资源，并为真正的集中式管理、可观测性和集群维护奠定了基础。&lt;/p&gt;
&lt;p&gt;以下图像是列出所有已连接集群的 MCM 页面的示例。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/6_huc3d79e412370b7beb0d46279371e4b91_31348_1914x597_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/6.png&#34; data-img=&#34;/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/6.png&#34; data-width=&#34;1914&#34; data-height=&#34;597&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;MCM 的安全功能不仅限于集群的网络方面。由于 MCM 完全集成了 Kubernetes 基于角色的访问控制（RBAC），你可以制定授权，允许用户仅查看他们需要查看的信息。&lt;/p&gt;
&lt;p&gt;注意：使用&lt;a href=&#34;https://www.tigera.io/tutorials/?_sft_tutorial_product=calico-enterprise&#34; title=&#34;这个&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个&lt;/a&gt;实际操作的工作坊来了解更多关于多集群管理的信息。&lt;/p&gt;
&lt;h3 id=&#34;利用-calico-enterprise-的联邦身份和统一策略执行&#34;&gt;利用 Calico Enterprise 的联邦身份和统一策略执行&lt;/h3&gt;
&lt;p&gt;Calico Enterprise 联邦将工作负载和服务端点与在集群之间共享的唯一身份关联起来。&lt;/p&gt;
&lt;p&gt;联邦身份可以与网络安全策略关联，以创建引用位于不同集群中的端点的唯一资源，从而实现对集群间安全的无缝控制。&lt;/p&gt;
&lt;p&gt;此外，通过联邦服务，你可以发现并与位于不同集群中的远程 Pod 互动。这两个关键功能使得可以创建精确、细粒度的安全控制，加强了跨多个集群的整体安全姿态。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/7_hue11fa8a0a0e071e4d2a90f475f46ffbe_43942_950x406_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/7.png&#34; data-img=&#34;/trans/what-is-a-kubernetes-cluster-mesh-and-what-are-the-benefits/7.png&#34; data-width=&#34;950&#34; data-height=&#34;406&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;通过实施联邦层和策略，你可以灵活地定义网络安全策略，这些策略可以普遍适用于所有集群，也可以专门针对一组定义的集群。这种方法提供了一种有效的手段，以在扩展部署以包括多个集群的同时扩展安全措施。通过将这些安全控制扩展到现有和新的集群，你有效地减少了策略的重复和简化了从创建到维护的整个过程。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;总结一下，集群网格连接不同 Kubernetes 集群中的内部资源。Calico 的灵活集群网格设置为在任何环境中连接到多个集群提供了构建块。&lt;/p&gt;
&lt;p&gt;Calico Enterprise MCM、联邦和联邦策略强制执行成为多集群架构的缺失环节，允许无缝通信，同时优先考虑安全性。Calico 在这个领域的能力使你能够无缝提供多集群管理、可观测性、联邦服务和身份，从而使你的组织能够自信而高效地应对现代网络的复杂性。随着组织的继续扩展和扩大规模，整合这些策略将在塑造多集群环境的未来中发挥关键作用。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Cilium 实现 Gateway API 指南</title>
      <link>https://jimmysong.io/trans/cilium-gateway-api/</link>
      <pubDate>Thu, 04 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/cilium-gateway-api/</guid>
      <description>
        
        
        &lt;p&gt;在 Kubernetes 上部署应用程序后，通常的下一步是让用户可以访问它。我们通常使用&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&#34; title=&#34;&amp;lt;strong&amp;gt;Ingress 控制器&amp;lt;/strong&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Ingress 控制器&lt;/strong&gt;&lt;/a&gt;，例如 Nginx、Haproxy、Traefik 或来自云提供商的控制器，来引导传入的流量到应用程序，管理负载平衡、TLS 终止等等。&lt;/p&gt;
&lt;p&gt;然后，我们必须从众多&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&#34; title=&#34;可用的选项&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可用的选项&lt;/a&gt; 中进行选择。Cilium 是其中一个相对较新的选项，旨在处理所有这些网络方面的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io/&#34; title=&#34;&amp;lt;strong&amp;gt;Cilium&amp;lt;/strong&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Cilium&lt;/strong&gt;&lt;/a&gt; 是一个基于 eBPF 的开源网络和安全解决方案，其采用速度增长迅猛。它可能是提供最多功能的网络插件之一。我们不会涵盖所有功能，但其中一个功能涉及使用&lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; title=&#34;&amp;lt;strong&amp;gt;Gateway API&amp;lt;/strong&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Gateway API&lt;/strong&gt;&lt;/a&gt; (&lt;code&gt;GAPI&lt;/code&gt;) 管理传入流量。&lt;/p&gt;
&lt;h2 id=&#34;我们的目标&#34;&gt;我们的目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;准确了解 &lt;strong&gt;Gateway API&lt;/strong&gt; 是什么，以及它如何代表从 &lt;code&gt;Ingress&lt;/code&gt; API 进化而来。&lt;/li&gt;
&lt;li&gt;演示以 GitOps 方式部署的真实场景。&lt;/li&gt;
&lt;li&gt;当前的限制和即将推出的新功能。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;本文中执行的所有步骤都来自这个&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api&#34; title=&#34;&amp;lt;strong&amp;gt;git 存储库&amp;lt;/strong&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;git 存储库&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我鼓励你探索它，因为它远远超出了本文的范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用启用了 kube-proxy 替代并具有专用 Daemonset 用于 &lt;code&gt;Envoy&lt;/code&gt; 的 &lt;code&gt;Cilium&lt;/code&gt; 配置的 &lt;strong&gt;EKS&lt;/strong&gt; 集群的安装。&lt;/li&gt;
&lt;li&gt;提出了具有依赖关系管理和我认为非常高效的 DRY 代码的 &lt;code&gt;Flux&lt;/code&gt; 结构。&lt;/li&gt;
&lt;li&gt;简化了用于平台组件的 IAM 权限管理的 &lt;code&gt;Crossplane&lt;/code&gt; 和 &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html&#34; title=&#34;IRSA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IRSA&lt;/a&gt; 组合。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;External-DNS&lt;/code&gt; 和 &lt;code&gt;Let&#39;s Encrypt&lt;/code&gt; 自动管理域名和证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个想法是只需几分钟内设置好一切，只需一个命令行。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;介绍-gateway-api&#34;&gt;介绍 Gateway API&lt;/h2&gt;
&lt;p&gt;正如前面提到的，有许多&lt;strong&gt;Ingress 控制器&lt;/strong&gt;选项，每个都有其特定性和特殊功能，有时会使它们的使用变得复杂。此外，Kubernetes 中传统的 &lt;code&gt;Ingress&lt;/code&gt; API 具有非常有限的参数。一些解决方案甚至创建了自己的&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; title=&#34;CRDs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRDs&lt;/a&gt;（Kubernetes 自定义资源），而其他解决方案则使用 &lt;code&gt;annotations&lt;/code&gt; 来克服这些限制。&lt;/p&gt;
&lt;p&gt;这就是&lt;strong&gt;Gateway API&lt;/strong&gt;的用武之地！实际上，这是一种&lt;strong&gt;标准&lt;/strong&gt;，允许声明高级网络功能，而无需对底层控制器进行特定扩展。而且，由于所有控制器都使用相同的 API，因此可以在不改变配置的情况下从一个解决方案切换到另一个解决方案（Kubernetes 清单描述了如何路由传入流量）。&lt;/p&gt;
&lt;p&gt;在我们将要探讨的概念中，GAPI 引入了一个精细的授权模型，定义了具有不同权限的&lt;strong&gt;显式角色&lt;/strong&gt;（有关 GAPI 安全模型的更多信息，请参阅&lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/security-model/#roles-and-personas&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;值得注意的是，该项目由&lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-network&#34; title=&#34;sig-network-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sig-network-kubernetes&lt;/a&gt;工作组推动，还有一个 Slack &lt;a href=&#34;https://kubernetes.slack.com/archives/CR0H13KGA&#34; title=&#34;频道&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;频道&lt;/a&gt;，你可以在需要时联系他们。&lt;/p&gt;
&lt;p&gt;让我们看看在实践中如何使用 GAPI 与 Cilium！&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;在本文的其余部分，我们假设已部署了一个 EKS 集群。如果你没有使用&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/tree/main/terraform/eks&#34; title=&#34;演示存储库中建议的方法&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演示存储库中建议的方法&lt;/a&gt;作为本文的基础，那么有一些&lt;strong&gt;要检查的要点&lt;/strong&gt;，以便使用 GAPI。&lt;/p&gt;
&lt;p&gt;此处描述的安装方法基于 &lt;code&gt;Helm&lt;/code&gt;，所有的 &lt;code&gt;values&lt;/code&gt; 可以在&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/terraform/eks/helm_values/cilium.yaml&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href=&#34;https://github.com/kubernetes-sigs/gateway-api/tree/main/config/crd&#34; title=&#34;Gateway API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API&lt;/a&gt;存储库中&lt;strong&gt;安装&lt;/strong&gt;可用的 &lt;code&gt;CRDs&lt;/code&gt;。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    如果 Cilium 设置为支持 &lt;code&gt;GAPI&lt;/code&gt;（见下文），并且缺少 CRDs，则它将无法启动。在&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api&#34; title=&#34;演示存储库&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演示存储库&lt;/a&gt;中，&lt;strong&gt;GAPI CRDs&lt;/strong&gt;在集群创建期间安装一次，以便 Cilium 可以启动，然后由 Flux 管理。
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Cilium 和 &lt;code&gt;eBPF&lt;/code&gt; 的网络转发功能&lt;strong&gt;替换&lt;/strong&gt; &lt;code&gt;kube-proxy&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kubeProxyReplacement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用&lt;/strong&gt; Gateway API 支持。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;gatewayAPI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查&lt;/strong&gt;安装。为此，你需要安装名为 &lt;code&gt;cilium&lt;/code&gt; 的命令行工具。我个人使用 &lt;a href=&#34;https://blog.ogenki.io/post/asdf/asdf/&#34; title=&#34;asdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asdf&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;asdf plugin-add cilium-cli
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;asdf install cilium-cli 0.15.7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;asdf global cilium 0.15.7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下命令允许确保所有组件都正常运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium status --wait
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   /¯¯\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;/¯¯\__/¯¯\    Cilium:             OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;\__/¯¯\__/    Operator:           OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;/¯¯\__/¯¯\    Envoy DaemonSet:    OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;\__/¯¯\__/    Hubble Relay:       disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   \__/       ClusterMesh:        disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Deployment             cilium-operator    Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;DaemonSet              cilium             Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;DaemonSet              cilium-envoy       Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Containers:            cilium             Running: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-operator    Running: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-envoy       Running: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Cluster Pods:          33/33 managed by Cilium
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Helm chart version:    1.14.2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Image versions         cilium             quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-operator    quay.io/cilium/operator-aws:v1.14.2@sha256:8d514a9eaa06b7a704d1ccead8c7e663334975e6584a815efe2b8c15244493f1: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-envoy       quay.io/cilium/cilium-envoy:v1.25.9-e198a2824d309024cb91fb6a984445e73033291d@sha256:52541e1726041b050c5d475b3c527ca4b8da487a0bbb0309f72247e8127af0ec: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，你可以通过运行以下命令来检查是否启用了 Gateway API 支持：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium config view | grep -w &amp;#34;enable-gateway-api&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;enable-gateway-api                                true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;enable-gateway-api-secrets-sync                   true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你还可以运行以下端到端测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium connectivity test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，此命令（&lt;code&gt;connectivity test&lt;/code&gt;）当前在启用 Envoy 作为 DaemonSet 时会抛出错误。(&lt;a href=&#34;https://github.com/cilium/cilium/issues/28057&#34; title=&#34;Github Issue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Issue&lt;/a&gt;)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;&lt;strong&gt;Envoy 作为 DaemonSet&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，Cilium 代理还在同一 Pod 中运行 &lt;code&gt;Envoy&lt;/code&gt;，并委托给它级别 7 的网络操作。从版本 &lt;code&gt;v1.14&lt;/code&gt; 开始，可以将 Envoy 单独部署，这带来了一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果修改/重新启动一个组件（无论是 Cilium 还是 Envoy），都不会影响另一个组件。&lt;/li&gt;
&lt;li&gt;更好地分配资源给每个组件以优化性能。&lt;/li&gt;
&lt;li&gt;在某个 Pod 被攻击的情况下限制攻击面。&lt;/li&gt;
&lt;li&gt;Envoy 日志和 Cilium 代理日志不会混合在一起。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以使用以下命令来检查此功能是否已启用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    /¯¯\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; /¯¯\__/¯¯\    Cilium:             OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; \__/¯¯\__/    Operator:           OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; /¯¯\__/¯¯\    Envoy DaemonSet:    OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; \__/¯¯\__/    Hubble Relay:       disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    \__/       ClusterMesh:        disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/cilium-release-114/#h-envoy-daemonset&#34; title=&#34;更多信息&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更多信息&lt;/a&gt;。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;入口点gatewayclass-和-gateway&#34;&gt;入口点：GatewayClass 和 Gateway&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cilium-gateway-api/gateway_hu052a454012dce8476457ee2d39f00b3d_54224_1374x1008_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cilium-gateway-api/gateway.jpg&#34; data-img=&#34;/trans/cilium-gateway-api/gateway.jpg&#34; data-width=&#34;1374&#34; data-height=&#34;1008&#34; alt=&#34;image&#34; data-caption=&#34;网关&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;网关&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;一旦满足先决条件，我们就可以访问多个元素。我们可以利用 Gateway API CRDs 定义的自定义资源。而且，在安装 Cilium 后，一个 &lt;code&gt;GatewayClass&lt;/code&gt; 立即可用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get gatewayclasses.gateway.networking.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME     CONTROLLER                     ACCEPTED   AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium   io.cilium/gateway-controller   True       7m59s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Kubernetes 集群上，你可以配置多个 &lt;code&gt;GatewayClasses&lt;/code&gt;，从而能够使用不同的实现。例如，我们可以通过在 &lt;code&gt;Gateway&lt;/code&gt; 配置中引用 GatewayClass 来使用 &lt;code&gt;Linkerd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Gateway&lt;/code&gt; 是允许触发在云提供商中创建负载均衡组件的资源。&lt;/p&gt;
&lt;p&gt;这是一个简单的示例：&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/gateway.yaml&#34; title=&#34;apps/base/echo/gateway.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/gateway.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Same&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 AWS（EKS）上，配置 &lt;code&gt;Gateway&lt;/code&gt; 时，Cilium 会创建一个类型为 &lt;code&gt;LoadBalancer&lt;/code&gt; 的 &lt;code&gt;Service&lt;/code&gt;。然后，另一个控制器（&lt;a href=&#34;https://kubernetes-sigs.github.io/aws-load-balancer-controller&#34; title=&#34;AWS Load Balancer Controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Load Balancer Controller&lt;/a&gt;）处理云负载均衡器（&lt;a href=&#34;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html&#34; title=&#34;NLB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NLB&lt;/a&gt;）的创建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get svc -n echo cilium-gateway-echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME                  TYPE           CLUSTER-IP     EXTERNAL-IP                                                                 PORT(S)        AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium-gateway-echo   LoadBalancer   172.20.19.82   k8s-echo-ciliumga-64708ec85c-fcb7661f1ae4e4a4.elb.eu-west-3.amazonaws.com   80:30395/TCP   2m58s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是，负载均衡器地址也与 &lt;code&gt;Gateway&lt;/code&gt; 相关联。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get gateway -n echo echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME   CLASS    ADDRESS                                                                     PROGRAMMED   AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo   cilium   k8s-echo-ciliumga-64708ec85c-fcb7661f1ae4e4a4.elb.eu-west-3.amazonaws.com   True         16m
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;路由规则httproute&#34;&gt;路由规则：HTTPRoute&lt;/h2&gt;
&lt;h3 id=&#34;基本规则&#34;&gt;基本规则&lt;/h3&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cilium-gateway-api/httproute_hubb25ad1dac8d79cc5043b05fdc17320a_107336_1930x1394_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cilium-gateway-api/httproute.jpg&#34; data-img=&#34;/trans/cilium-gateway-api/httproute.jpg&#34; data-width=&#34;1930&#34; data-height=&#34;1394&#34; alt=&#34;image&#34; data-caption=&#34;HTTPRoute&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;HTTPRoute&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;简而言之，上面的图表可总结为几句话：&lt;code&gt;HTTPRoute&lt;/code&gt; 允许通过引用 Gateway 并定义所需的路由参数来配置到服务的路由。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;&lt;strong&gt;Kyverno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截止目前，无法配置由 &lt;code&gt;Gateways&lt;/code&gt; 生成的服务的注释（&lt;a href=&#34;https://github.com/cilium/cilium/issues/25357&#34; title=&#34;Github Issue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Issue&lt;/a&gt;）。已提出一种解决方法，即在创建 &lt;code&gt;Gateway&lt;/code&gt; 后立即修改由 &lt;code&gt;Gateway&lt;/code&gt; 创建的服务。&lt;/p&gt;
&lt;p&gt;Kyverno 是一种确保配置符合最佳实践和安全要求的工具。我们在这里仅仅使用它来轻松描述&lt;a href=&#34;https://kyverno.io/docs/writing-policies/mutate/&#34; title=&#34;突变&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;突变&lt;/a&gt;规则。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/security/mycluster-0/echo-gw-clusterpolicy.yaml&#34; title=&#34;security/mycluster-0/echo-gw-clusterpolicy.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;security/mycluster-0/echo-gw-clusterpolicy.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mutate-svc-annotations&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium-gateway-echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mutate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patchStrategicMerge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;external-dns.alpha.kubernetes.io/hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo.${domain_name}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service.beta.kubernetes.io/aws-load-balancer-scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;internet-facing&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loadBalancerClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service.k8s.aws/nlb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，服务 &lt;code&gt;cilium-gateway-echo&lt;/code&gt; 将添加 AWS 控制器的注释，以及一个允许自动 DNS 记录配置的注释。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/httproute.yaml&#34; title=&#34;apps/base/echo/httproute.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/httproute.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面使用的示例非常简单：所有请求都会转发到 &lt;code&gt;echo-1-echo-server&lt;/code&gt; 服务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parentRefs&lt;/code&gt; 指示使用哪个 &lt;code&gt;Gateway&lt;/code&gt;，然后在 &lt;code&gt;rules&lt;/code&gt; 部分定义了路由规则。&lt;/p&gt;
&lt;p&gt;路由规则还可以基于 &lt;code&gt;path&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;foo.bar.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/login&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者基于 HTTP 标头&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们检查服务是否可访问。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl -s http://echo.cloud.ogenki.io | jq -rc &amp;#39;.environment.HOSTNAME&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-1-echo-server-fd88497d-w6sgn
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如你所看到的，该服务以 HTTP 方式暴露，没有证书。让我们尝试解决这个问题。&lt;/p&gt;
&lt;h3 id=&#34;配置-tls-证书&#34;&gt;配置 TLS 证书&lt;/h3&gt;
&lt;p&gt;有多种方法可以使用 GAPI 配置 TLS。在这里，我们将使用最常见的情况：HTTPS 协议和在 Gateway 上终止 TLS。&lt;/p&gt;
&lt;p&gt;假设我们想要配置之前使用的域名 &lt;code&gt;echo.cloud.ogenki.io&lt;/code&gt;。配置主要通过配置 &lt;code&gt;Gateway&lt;/code&gt; 来完成。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/tls-gateway.yaml&#34; title=&#34;apps/base/echo/tls-gateway.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/tls-gateway.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;echo.${domain_name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Same&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Terminate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certificateRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的关键点是引用一个包含名称为 &lt;code&gt;echo-tls&lt;/code&gt; 的证书的密钥。这个证书可以手动创建，但是为了本文，我选择使用 &lt;strong&gt;Let&amp;rsquo;s Encrypt&lt;/strong&gt; 和 &lt;code&gt;cert-manager&lt;/code&gt; 来自动化这个过程。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;}
&lt;strong&gt;cert-manager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;cert-manager&lt;/code&gt;，自动创建和更新由 &lt;code&gt;Gateway&lt;/code&gt; 暴露的证书非常简单。为此，你需要允许控制器访问 &lt;a href=&#34;https://aws.amazon.com/route53/&#34; title=&#34;route53&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;route53&lt;/a&gt;，以解决 DNS01 挑战（这是一种确保客户端只能为自己拥有的域请求证书的机制）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/security/base/cert-manager/cluster-issuer-staging.yaml&#34; title=&#34;ClusterIssuer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ClusterIssuer&lt;/a&gt; 资源描述了使用 cert-manager 生成证书所需的配置。&lt;/p&gt;
&lt;p&gt;接下来，我们只需要添加一个注释 &lt;code&gt;cert-manager.io/cluster-issuer&lt;/code&gt; 并设置存储证书的 Kubernetes 密钥。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/usage/gateway/&#34; title=&#34;更多信息&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更多信息&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在演示存储库中，权限是使用 &lt;code&gt;Crossplane&lt;/code&gt; 分配的，它负责在 AWS 中配置这些 IAM 权限。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;为了使路由正常工作，你还需要将 &lt;code&gt;HTTPRoute&lt;/code&gt; 附加到正确的 &lt;code&gt;Gateway&lt;/code&gt; 并指定域名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;echo.${domain_name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;几秒钟后，证书将被创建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get cert -n echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME       READY   SECRET     AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-tls   True    echo-tls   43m
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，我们可以检查证书确实来自 Let&amp;rsquo;s Encrypt，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl https://echo.cloud.ogenki.io -v 2&amp;gt;&amp;amp;1 | grep -A 6 &amp;#39;Server certificate&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;* Server certificate:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  subject: CN=echo.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  start date: Sep 15 14:43:00 2023 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  expire date: Dec 14 14:42:59 2023 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  subjectAltName: host &amp;#34;echo.cloud.ogenki.io&amp;#34; matched cert&amp;#39;s &amp;#34;echo.cloud.ogenki.io&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  issuer: C=US; O=Let&amp;#39;s Encrypt; CN=R3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  SSL certificate verify ok.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    GAPI 还允许你配置 &lt;strong&gt;端到端的 TLS&lt;/strong&gt;，一直到容器。这是通过配置 &lt;code&gt;Gateway&lt;/code&gt; 为 &lt;code&gt;Passthrough&lt;/code&gt; 模式并使用 &lt;code&gt;TLSRoute&lt;/code&gt; 资源来完成的。证书也必须由执行 TLS 终止的 pod 携带。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;在多个命名空间中共享-gateway&#34;&gt;在多个命名空间中共享 Gateway&lt;/h3&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cilium-gateway-api/shared-gateway_hu674c7133083fe92ba85944442e1371df_93399_1734x1156_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cilium-gateway-api/shared-gateway.jpg&#34; data-img=&#34;/trans/cilium-gateway-api/shared-gateway.jpg&#34; data-width=&#34;1734&#34; data-height=&#34;1156&#34; alt=&#34;image&#34; data-caption=&#34;共享网关&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;共享网关&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;使用 &lt;code&gt;GAPI&lt;/code&gt;，你可以在 &lt;code&gt;命名空间&lt;/code&gt; 之间路由流量。这得益于每个功能的不同资源：一个 &lt;code&gt;Gateway&lt;/code&gt; 允许配置基础设施，以及 &lt;code&gt;*Routes&lt;/code&gt;。这些路由可以附加到位于另一个命名空间中的 Gateway。因此，不同的团队/项目可以共享相同的基础设施组件。&lt;/p&gt;
&lt;p&gt;但是，这需要指定哪个路由允许引用该 Gateway。在这里，我们假设我们有一个专门用于内部工具的 Gateway，名为 &lt;code&gt;platform&lt;/code&gt;。通过使用 &lt;code&gt;allowedRoutes&lt;/code&gt; 参数，我们明确指定了哪些命名空间允许附加到此 Gateway。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/infrastructure/base/gapi/platform-gateway.yaml&#34; title=&#34;infrastructure/base/gapi/platform-gateway.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;infrastructure/base/gapi/platform-gateway.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Selector&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes.io/metadata.name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;In&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;observability&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;flux-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Terminate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certificateRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;platform-tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命名空间 &lt;code&gt;observability&lt;/code&gt; 和 &lt;code&gt;flux-system&lt;/code&gt; 中配置的 &lt;code&gt;HTTPRoutes&lt;/code&gt; 附加到此唯一的 &lt;code&gt;Gateway&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;infrastructure&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，使用来自云提供商的相同负载均衡器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NLB_DOMAIN=$(kubectl get svc -n infrastructure cilium-gateway-platform -o jsonpath={.status.loadBalancer.ingress[0].hostname})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;dig +short ${NLB_DOMAIN}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;13.36.89.108
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;dig +short grafana-mycluster-0.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;13.36.89.108
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;dig +short gitops-mycluster-0.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;13.36.89.108
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    这些内部工具不应该暴露在互联网上，但是你知道：这只是一个演示。例如，我们可以使用内部 Gateway（私有 IP）通过调整注释并使用私有连接系统（VPN、隧道等）来实现。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;流量分流&#34;&gt;流量分流&lt;/h3&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cilium-gateway-api/split_hu65c77c2437bb4a145d7de277091dab88_84912_1524x1036_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cilium-gateway-api/split.jpg&#34; data-img=&#34;/trans/cilium-gateway-api/split.jpg&#34; data-width=&#34;1524&#34; data-height=&#34;1036&#34; alt=&#34;image&#34; data-caption=&#34;分流&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;分流&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;由服务网格常常提供的一个功能是在有新版本可用时（A/B 测试或金丝雀部署）对部分流量测试应用程序的能力。&lt;code&gt;GAPI&lt;/code&gt;通过使用权重来实现这一点，使其变得非常简单。&lt;/p&gt;
&lt;p&gt;以下是一个将 5% 的流量转发到服务 &lt;code&gt;echo-2-echo-server&lt;/code&gt; 的示例：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/httproute-split.yaml&#34; title=&#34;apps/base/echo/httproute-split.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/httproute-split.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;split-echo.${domain_name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-2-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们检查分发是否按预期进行：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/scripts/check-split.sh&#34; title=&#34;scripts/check-split.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scripts/check-split.sh&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;./scripts/check-split.sh https://split-echo.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-1 的请求次数：95
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-2 的请求次数：5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改标头&#34;&gt;修改标头&lt;/h3&gt;
&lt;p&gt;还可以更改 HTTP &lt;strong&gt;标头&lt;/strong&gt;：添加、修改或删除它们。这些修改可以通过在 &lt;code&gt;HTTPRoute&lt;/code&gt; 清单中使用 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/api-types/httproute#filters-optional&#34; title=&#34;filters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;filters&lt;/a&gt; 应用于请求标头或响应标头。&lt;/p&gt;
&lt;p&gt;例如，我们将在 &lt;strong&gt;请求&lt;/strong&gt; 中添加一个标头。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/req-header-add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RequestHeaderModifier&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requestHeaderModifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令允许查看标头是否确实已添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl -s https://echo.cloud.ogenki.io/req-header-add | jq &amp;#39;.request.headers&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;host&amp;#34;: &amp;#34;echo.cloud.ogenki.io&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;user-agent&amp;#34;: &amp;#34;curl/8.2.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;accept&amp;#34;: &amp;#34;*/*&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-forwarded-for&amp;#34;: &amp;#34;81.220.234.254&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-forwarded-proto&amp;#34;: &amp;#34;https&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-envoy-external-address&amp;#34;: &amp;#34;81.220.234.254&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-request-id&amp;#34;: &amp;#34;320ba4d2-3bd6-4c2f-8a97-74296a9f3f26&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分配适当的权限&#34;&gt;分配适当的权限&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;GAPI&lt;/code&gt; 提供了一种清晰的权限共享模型，用于管理流量路由基础设施（由集群管理员管理）和应用程序（由开发人员管理）之间的关系。&lt;/p&gt;
&lt;p&gt;多个自定义资源的可用性允许使用 Kubernetes 的 &lt;strong&gt;RBAC&lt;/strong&gt; 配置以声明性方式分配权限。我已经添加了一些示例，这些示例在我的演示集群中没有效果，但可能会给你一个想法。&lt;/p&gt;
&lt;p&gt;下面的配置授予 &lt;code&gt;developers&lt;/code&gt; 组的成员在 echo 命名空间内管理 &lt;code&gt;HTTPRoutes&lt;/code&gt; 的能力，同时仅提供对 &lt;code&gt;Gateways&lt;/code&gt; 的读取权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gapi-developer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gateway.networking.k8s.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;httproutes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gateway.networking.k8s.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gateways&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gapi-developer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;developers&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gapi-developer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;乍一看有点模糊&#34;&gt;乍一看有点模糊&lt;/h2&gt;
&lt;p&gt;人们可能会对通常称为 &lt;code&gt;API 网关&lt;/code&gt; 的东西感到困惑。已经创建了 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/faq/&#34; title=&#34;FAQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAQ&lt;/a&gt; 的一个部分，以澄清它与 &lt;code&gt;Gateway API&lt;/code&gt; 的不同之处。尽管 GAPI 提供了通常在 API 网关中找到的功能，但它主要是 Kubernetes 的一个特定实现。然而，选择这个名称确实可能引起 &lt;strong&gt;混淆&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此外，请注意，本文仅关注入站流量，通常由 &lt;em&gt;Ingress Controllers&lt;/em&gt; 管理，称为 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/glossary/#northsouth-traffic&#34; title=&#34;南北&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;南北&lt;/a&gt;，这实际上是 GAPI 的初始范围。最近的一个名为 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/gamma/&#34; title=&#34;&amp;lt;strong&amp;gt;GAMMA&amp;lt;/strong&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;GAMMA&lt;/strong&gt;&lt;/a&gt; 的倡议旨在处理 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/glossary/#eastwest-traffic&#34; title=&#34;东西流量&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;东西流量&lt;/a&gt; 路由，这将在将来标准化某些常见的功能，通常由 &lt;code&gt;Service Meshes&lt;/code&gt; 解决方案提供。（有关更多详细信息，请参阅 &lt;a href=&#34;https://kubernetes.io/blog/2023/08/29/gateway-api-v0-8/&#34; title=&#34;此文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此文章&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;最后的想法&#34;&gt;最后的想法&lt;/h2&gt;
&lt;p&gt;老实说，我已经知道 &lt;strong&gt;Gateway API&lt;/strong&gt; 有一段时间了。尽管我读了一些文章，但我并没有真正深入研究过。我会想：“为什么要麻烦呢？我的 &lt;em&gt;Ingress Controller&lt;/em&gt; 可以工作，而且这需要学习曲线。”&lt;/p&gt;
&lt;p&gt;GAPI 正在崭露头角，即将发布 GA 版本。多个 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/implementations/&#34; title=&#34;项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;项目&lt;/a&gt; 已经拥抱它，这个用于管理 Kubernetes 内流量的 API 将迅速成为标准。&lt;/p&gt;
&lt;p&gt;我必须说，配置 GAPI 感觉直观而明确。它的安全模型取得了平衡，赋予开发人员权力而不会损害安全性。而且无缝的基础设施管理？你可以在不触及 &lt;code&gt;*Routes&lt;/code&gt; 的情况下在不同的实现之间切换。&lt;/p&gt;
&lt;p&gt;现在就用 &lt;code&gt;Cilium&lt;/code&gt; 交换我的 Ingress Controller 吗？&lt;strong&gt;还没有，但它即将到来&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;值得强调的是，Cilium 的功能非常广泛：在 Kubernetes 周围有大量的工具，Cilium 脱颖而出，承诺提供指标、跟踪、服务网格、安全性，以及 &lt;em&gt;Ingress Controller&lt;/em&gt; 与 GAPI。&lt;/p&gt;
&lt;p&gt;然而，需要注意一些挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cilium/cilium/issues/21929&#34; title=&#34;TCP 和 UDP 支持&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP 和 UDP 支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cilium/cilium/issues/21928&#34; title=&#34;GRPC 支持&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GRPC 支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要使用变异规则来配置云组件（&lt;a href=&#34;https://github.com/cilium/cilium/issues/25357&#34; title=&#34;Github Issue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Issue&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;本文讨论的许多功能仍处于实验阶段。例如，最新版本（我写作时的 &lt;code&gt;v1.14.2&lt;/code&gt;）支持的 &lt;a href=&#34;https://github.com/cilium/cilium/pull/27472&#34; title=&#34;扩展功能&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扩展功能&lt;/a&gt;。我尝试设置一个简单的 HTTP&amp;gt;HTTPS 重定向，但遇到了 &lt;a href=&#34;https://github.com/kubernetes-sigs/gateway-api/issues/1185&#34; title=&#34;这个问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个问题&lt;/a&gt;。因此，我预计 API 将来会有一些修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然我只是涉及了 Cilium 的 GAPI 能够提供的一小部分内容（老实说，这篇文章已经相当长了），但我希望我们可以很快在生产中使用它。但考虑到前面提到的几点，我建议等待一段时间。不过，如果你想为未来做准备，那么现在是时候了！&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; title=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gateway-api.sigs.k8s.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/latest/network/servicemesh/gateway-api/gateway-api/#gs-gateway-api&#34; title=&#34;https://docs.cilium.io/en/latest/network/servicemesh/gateway-api/gateway-api/#gs-gateway-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.cilium.io/en/latest/network/servicemesh/gateway-api/gateway-api/#gs-gateway-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://isovalent.com/blog/post/cilium-gateway-api/&#34; title=&#34;https://isovalent.com/blog/post/cilium-gateway-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://isovalent.com/blog/post/cilium-gateway-api/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://isovalent.com/blog/post/tutorial-getting-started-with-the-cilium-gateway-api/&#34; title=&#34;https://isovalent.com/blog/post/tutorial-getting-started-with-the-cilium-gateway-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://isovalent.com/blog/post/tutorial-getting-started-with-the-cilium-gateway-api/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Isovalent 的 &lt;a href=&#34;https://isovalent.com/resource-library/labs/&#34; title=&#34;labs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;labs&lt;/a&gt; 是开始使用 Gateway API 并且你将获得新的徽章以添加到你的收藏中的好方法&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Istio Sidecar 的资源和性能管理：从监控到自动扩缩容的最佳实践</title>
      <link>https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/</link>
      <pubDate>Wed, 03 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/</guid>
      <description>
        
        
        &lt;p&gt;本文讨论我们如何在工作负载中扩展 Istio Sidecar，以及如何考虑 Sidecar 资源与应用程序紧密耦合的关系。&lt;/p&gt;
&lt;p&gt;目前有很多关于 Istio 新的 &lt;a href=&#34;https://istio.io/v1.15/blog/2022/introducing-ambient-mesh/&#34; title=&#34;Ambient Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient Mesh&lt;/a&gt; 的讨论。这种部署服务网格的新方法放弃了 Sidecar，而采用了两个新组件，&lt;code&gt;ztunnel&lt;/code&gt;，一个用于处理核心 L4 网络问题的每节点组件，以及（如果需要）&lt;code&gt;waypoint proxy&lt;/code&gt; 来处理 L7 问题。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/image_hu1d2c03859a6775e2b2922a51b37f7b03_228534_3130x1612_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/image.jpg&#34; data-img=&#34;/trans/scaling-and-sizing-the-sidecar/image.jpg&#34; data-width=&#34;3130&#34; data-height=&#34;1612&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;来源：&lt;a href=&#34;https://istio.io/v1.15/blog/2022/introducing-ambient-mesh&#34; title=&#34;https://istio.io/v1.15/blog/2022/introducing-ambient-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://istio.io/v1.15/blog/2022/introducing-ambient-mesh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我听到的远离 Sidecar 的一个主要原因是，扩展 Sidecar 很复杂。如果只使用 L4 功能，我同意这一观点。然而，作为 L7 功能的重度用户，对我来说，似乎我们只是在管理 Waypoint 代理的规模，而不是 Sidecar。对我个人而言，也许有点自私，它感觉像是一个横向（充其量）的步骤，而不是前进。&lt;/p&gt;
&lt;p&gt;此外，我并不觉得管理 Sidecar 资源很痛苦，所以我很难产生共鸣。这部分是因为我从早期就开始使用 Istio，并建立了有助于这一过程的工具和流程。我意识到我从未真正分享过关于我们如何管理这一过程的信息，所以在这里分享一下。&lt;/p&gt;
&lt;h3 id=&#34;一些背景&#34;&gt;一些背景&lt;/h3&gt;
&lt;p&gt;背景很重要，你如何思考监控和伸缩将取决于你如何构建你的 Kubernetes 设置，以及你的组织结构。也没有一种大小适合所有情况，这只是对我们有效的方法。因此我相信 Ambient 模式将减少某些 Operator 的复杂性，但可能会增加其他 Operator 的复杂性（我承认，这可能是少数情况）。&lt;/p&gt;
&lt;p&gt;我们运行大约 700 个个别服务（“工作负载”）。每个服务都有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在自己的 &lt;code&gt;Namespace&lt;/code&gt; 中运行&lt;/li&gt;
&lt;li&gt;使用自己的 &lt;code&gt;Service Account&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拥有自己的 &lt;code&gt;Service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由自己的隔离 CI/CD 流水线部署&lt;/li&gt;
&lt;li&gt;从 Istio 和网络策略的角度来看，都在默认拒绝的设置中运行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/workload_hu0b519ca4c675bb049c34cedee2fce13f_15613_251x191_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/workload.png&#34; data-img=&#34;/trans/scaling-and-sizing-the-sidecar/workload.png&#34; data-width=&#34;251&#34; data-height=&#34;191&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;对于我们来说，命名空间是工作负载的边界，这是一种一对一的关系，而且是一条坚决的规则。因此，我相信我们也会为每个命名空间创建一个 waypoint 代理。我们不会在多个工作负载之间共享 waypoint 代理，因为这会导致耦合（风险/冲击范围）。因此，我们将得到类似于这样的结果：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/waypoint_hubcf41d6bd604bb9c2694a37dbd2db12d_18004_361x191_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/waypoint.png&#34; data-img=&#34;/trans/scaling-and-sizing-the-sidecar/waypoint.png&#34; data-width=&#34;361&#34; data-height=&#34;191&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;与其扩展 &lt;code&gt;Sidecar&lt;/code&gt;，我们将扩展 &lt;code&gt;Waypoint&lt;/code&gt; - 这就是我所说的对于我们来说，是横向的。我们仍然需要考虑某种规模的问题。&lt;/p&gt;
&lt;h3 id=&#34;可观测性只是另一个容器&#34;&gt;可观测性：只是另一个容器&lt;/h3&gt;
&lt;p&gt;这基本上总结了我对 Sidecar 的看法。它只是你的工作负载中的另一个容器。为了&lt;a href=&#34;https://karlstoney.com/managing-your-costs-on-kubernetes/&#34; title=&#34;有效管理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有效管理&lt;/a&gt;成本（&amp;ldquo;合适大小&amp;rdquo;），你应该已经在监控你的工作负载时监控关键指标，这些指标自然扩展到涵盖 &lt;code&gt;istio-proxy&lt;/code&gt;。对我来说，这些指标包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 和内存 &lt;strong&gt;请求&lt;/strong&gt;（例如 &lt;code&gt;kube_pod_container_resource_requests&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;CPU 和内存 &lt;strong&gt;使用&lt;/strong&gt;（例如 &lt;code&gt;container_memory_working_set_bytes&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;CPU 和内存 &lt;strong&gt;计算利用率&lt;/strong&gt;（Usage / Requests）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暂时忽略 Istio，如果你没有做上述操作，那么你应该开始做。为了帮助你，这是我用于 CPU 计算利用率的指标：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;container_cpu_usage_against_request:pod:rate1m&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    (   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      count(kube_pod_container_resource_requests{resource=&amp;#34;cpu&amp;#34;, container!=&amp;#34;&amp;#34;}) by (container, pod, namespace)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      *   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      avg(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        irate(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          container_cpu_usage_seconds_total{container!=&amp;#34;&amp;#34;}[1m]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        )   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      ) by (container, pod, namespace)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    )   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    /   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    avg(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      avg_over_time(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        kube_pod_container_resource_requests{resource=&amp;#34;cpu&amp;#34;, container!=&amp;#34;&amp;#34;}[1m]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      )   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    ) by (container, pod, namespace) * 100 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    *   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    on(pod) group_left(workload) (
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      avg by (pod, workload) (
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        label_replace(kube_pod_info{created_by_kind=~&amp;#34;ReplicaSet|Job&amp;#34;}, &amp;#34;workload&amp;#34;, &amp;#34;$1&amp;#34;, &amp;#34;created_by_name&amp;#34;, &amp;#34;^(.*)-([^-]+)$&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        or  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        label_replace(kube_pod_info{created_by_kind=~&amp;#34;DaemonSet|StatefulSet&amp;#34;}, &amp;#34;workload&amp;#34;, &amp;#34;$1&amp;#34;, &amp;#34;created_by_name&amp;#34;, &amp;#34;(.*)&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        or  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        label_replace(kube_pod_info{created_by_kind=&amp;#34;Node&amp;#34;}, &amp;#34;workload&amp;#34;, &amp;#34;node&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        or  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        label_replace(kube_pod_info{created_by_kind=&amp;#34;&amp;#34;}, &amp;#34;workload&amp;#34;, &amp;#34;none&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      )   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    )&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会注意到在这个指标中，我还与 &lt;code&gt;kube_pod_info&lt;/code&gt; 进行了关联，这为我的指标提供了一些额外的维度，特别是 &lt;code&gt;workload&lt;/code&gt;。这仅在我们有一个部署与一个命名空间相对应，等于一个工作负载的关系时才有效。这是可选的，只是帮助我在各个级别查看这个指标，包括 &lt;code&gt;container&lt;/code&gt;、&lt;code&gt;pod&lt;/code&gt;、&lt;code&gt;node&lt;/code&gt; 或 &lt;code&gt;workload&lt;/code&gt;。这样做将自然地为你的所有容器提供数据，当然也包括你的 Sidecar：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-08.33.17_hu5014aa02411b0d5d8f53aa5857659ab9_211123_3432x1570_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-08.33.17.jpg&#34; data-img=&#34;/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-08.33.17.jpg&#34; data-width=&#34;3432&#34; data-height=&#34;1570&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h3 id=&#34;sidecar-与工作负载一起扩展&#34;&gt;Sidecar 与工作负载一起扩展&lt;/h3&gt;
&lt;p&gt;对于 HTTP 工作负载，我们观察到 Sidecar 的扩展方式与底层应用程序非常相似。你可以在上面的截图中看到 &lt;code&gt;istio-proxy&lt;/code&gt; 容器的 &amp;ldquo;计算利用率&amp;rdquo; 如何紧密跟随 &lt;code&gt;master&lt;/code&gt; 容器。&lt;/p&gt;
&lt;p&gt;这就是我真正喜欢 Sidecar 模式的地方。你的 Sidecar 利用率与你的工作负载利用率紧密耦合，而工作负载利用率与工作负载的副本数量紧密耦合。在上面的示例中，如果我们需要水平扩展工作负载，利用率将保持大致相同。例如，你可以看到 &lt;code&gt;master&lt;/code&gt; 容器的利用率峰值为 75%，而 &lt;code&gt;istio-proxy&lt;/code&gt; 的利用率为 60%，如果我们将副本数量加倍，这两个值会松散减半，但保持大致一致。我们只是水平扩展一个 &lt;code&gt;Deployment&lt;/code&gt; 对象，而不是两个。我们认为这更容易理解。&lt;/p&gt;
&lt;p&gt;我们向应用程序所有者提供的指导是，我们希望利用率在峰值时保持在 75% 左右。在这里，人们自然会问为什么我们不使用自动扩展。自动扩展依赖于底层云提供商提供的计算资源。我们曾经遇到过多次影响客户的事件，因为我们无法按需扩展，原因是底层云提供商的容量存在问题。此外，自动扩展会带来延迟，很难对突然的负载急剧增加做出响应，因此它只对具有明显逐渐季节性的工作负载有效，就像上面的工作负载一样。我们认为与自动扩展相关的成本节省不值得与不能对需求做出反应的风险相匹配，因此我们会略微过度配置我们的工作负载（因此是 75%）。&lt;/p&gt;
&lt;p&gt;但是，如果你对自动扩展感到满意，你可以在自动扩展配置中设置目标 CPU，然后就可以了。你有一个工作负载，以及一个与之紧密相关的 Sidecar，它们一起扩展。&lt;/p&gt;
&lt;p&gt;这就是我对 Waypoint 的看法。因为在我们的设置中，我们每个工作负载都有一个 waypoint 代理，我们将创建两个需要以不同方式但同步扩展的独立部署，这将解耦了我们自身有意关联的东西。&lt;/p&gt;
&lt;h3 id=&#34;设置正确的-cpu-和内存值&#34;&gt;设置正确的 CPU 和内存值&lt;/h3&gt;
&lt;p&gt;在上面的示例中，你可以看到我们有一个相对健康的工作负载。&lt;code&gt;istio-proxy&lt;/code&gt; 容器被分配了适合工作负载配置文件的 &lt;code&gt;CPU&lt;/code&gt; 量，允许其利用率紧密跟踪底层应用程序的利用率。经验告诉我，一旦你将这两者对齐，它们就不会松散对齐。它们会漂移的唯一时间是如果任一容器的性能配置发生了显著变化（例如，如果开发人员将应用程序性能提高了 2 倍，则 &lt;code&gt;master&lt;/code&gt; 的利用率会下降）。&lt;/p&gt;
&lt;p&gt;在 AutoTrader，我们的平台团队负责构建“交付平台”，开发人员将应用程序部署到其中，但应用程序开发人员负责确定其工作负载的大小（CPU 和 RAM）。平台团队构建了帮助他们做出明智决策的工具，涉及这些值。&lt;/p&gt;
&lt;p&gt;这意味着简单的抽象。我们不让开发人员编写 100 个 Kubernetes 清单来部署工作负载。他们不需要关心 Istio &lt;code&gt;VirtualServices&lt;/code&gt;、&lt;code&gt;Sidecars&lt;/code&gt;、Kubernetes &lt;code&gt;Deployments&lt;/code&gt; 或记住在哪里放置注释以正确设置 Sidecar 的规模。相反，我们要求在他们的存储库中提供一个 yaml 文件，其内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;deployment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;500m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;80Mi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1000m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;956Mi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，你可以看到，服务的所有者负责设置其 &lt;code&gt;master&lt;/code&gt; 容器和其 &lt;code&gt;istio-proxy&lt;/code&gt; 的资源。我们的责任是构建工具，帮助他们在选择这些值时做出明智决策。&lt;/p&gt;
&lt;p&gt;你已经看到了我们如何在上面的 Grafana 仪表板中使用 &amp;ldquo;Utilisation&amp;rdquo; 等指标来做到这一点，但我们还做了一些称为 &amp;ldquo;建议&amp;rdquo; 的事情。这些是我们向应用程序所有者提供的有关优化配置其服务的提示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-09.19.52_hu2db1669047680bed32628c454179d7bc_235529_3456x1920_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-09.19.52.jpg&#34; data-img=&#34;/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-09.19.52.jpg&#34; data-width=&#34;3456&#34; data-height=&#34;1920&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;因此，你可以在这里看到我们有一个名为 &lt;code&gt;ProxyMasterImbalance&lt;/code&gt; 的建议。如果我们检测到给定工作负载内的 &lt;code&gt;master&lt;/code&gt; 和 &lt;code&gt;istio-proxy&lt;/code&gt; 容器之间的漂移超过 30%，则此建议将处于活动状态。以下是此建议触发的示例：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-09.44.09_hu3b79b7aa933cdd920f6b9a403fa7524b_62392_2806x214_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-09.44.09.png&#34; data-img=&#34;/trans/scaling-and-sizing-the-sidecar/Screenshot-2023-10-03-at-09.44.09.png&#34; data-width=&#34;2806&#34; data-height=&#34;214&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;希望你可以看到在大小调整 Sidecar 方面，它如何可以轻松地融入到你现有的用于大小调整工作负载的业务流程中。无论如何，你都应该这样做，以保持你的基础架构的健康利用率。&lt;/p&gt;
&lt;p&gt;我们已经建立了一种文化，小组关心并拥有他们的软件在生产环境中运行，其中包括关键的 CFR（成本），他们知道通过掌握这些事物，他们正在为更大的目标做出贡献，总体而言，他们做到了。至关重要的是，他们已经关心他们的 &lt;code&gt;master&lt;/code&gt; 容器利用率，因此 &lt;code&gt;istio-proxy&lt;/code&gt; 只是他们需要设置 2 个值（CPU/内存）的另一个容器，我们提供了使其尽可能容易的数据，而在绝大多数情况下 - 这只是你需要调整一次的事情。&lt;/p&gt;
&lt;p&gt;我还想指出，这篇文章专门思考了规模的问题。将代理与应用程序分离出来还存在其他潜在优势（例如隔离升级）。不过再次强调，我个人认为这有利有弊（就像技术中的大多数决策一样），但这是另一天的博客文章。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>OpenTelemetry 与可观测性：展望未来</title>
      <link>https://jimmysong.io/trans/opentelemetry-and-observability-looking-forward/</link>
      <pubDate>Tue, 02 Jan 2024 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/opentelemetry-and-observability-looking-forward/</guid>
      <description>
        
        
        &lt;p&gt;让我们探讨一些令人兴奋的趋势，考虑到我们期待 2024 年会有什么样的可观测性发展。&lt;/p&gt;
&lt;p&gt;随着年底的临近，现在是一个停下来思考的好时机。2023 年对于 OpenTelemetry 来说是一个里程碑，因为其三个基本信号，跟踪、度量和日志，都达到了稳定版本。这一成就标志着&lt;a href=&#34;https://thenewstack.io/opentelemetry-gaining-traction-from-companies-and-vendors/&#34; title=&#34;OpenTelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt;最初愿景的实现，即提供一个基于标准的框架，用于仪器化和收集可观测性数据。&lt;/p&gt;
&lt;p&gt;让我们抓住这个机会，探讨一下我们所见证的一些令人兴奋的趋势，深入研究创新的产品和用例，并在期待 2024 年的到来时深思熟虑地考虑可观测性的不断演变。&lt;/p&gt;
&lt;h2 id=&#34;度量标准的崭露头角&#34;&gt;度量标准的崭露头角&lt;/h2&gt;
&lt;p&gt;尽管 OpenTelemetry 关于度量的规范在 2022 年 5 月被宣布为稳定版本，但今年看到了其被广泛采用。以下是一些从业者的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由 VMware 的 Matthew Kocher 和 Carson Long 撰写的文章，标题为“&lt;a href=&#34;https://opentelemetry.io/blog/2023/cloud-foundry/&#34; title=&#34;体验报告：在 Cloud Foundry 中采用 OpenTelemetry 进行度量&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;体验报告：在 Cloud Foundry 中采用 OpenTelemetry 进行度量&lt;/a&gt;”。&lt;/li&gt;
&lt;li&gt;我们自己的 Matheus Nogueira 撰写的文章，标题为“&lt;a href=&#34;https://tracetest.io/blog/adding-opentelemetry-metrics-in-your-go-app&#34; title=&#34;在你的 Go 应用程序中添加 OpenTelemetry 度量&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在你的 Go 应用程序中添加 OpenTelemetry 度量&lt;/a&gt;”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;展望 2024 年，可以预期会看到类似的日志运动和采用。&lt;/p&gt;
&lt;h2 id=&#34;关注在负载测试中使用分布式跟踪&#34;&gt;关注在负载测试中使用分布式跟踪&lt;/h2&gt;
&lt;p&gt;2023 年，两个领先的负载测试工具，&lt;a href=&#34;https://k6.io/&#34; title=&#34;Grafana k6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana k6&lt;/a&gt;和&lt;a href=&#34;https://artillery.io/&#34; title=&#34;Artillery.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artillery.io&lt;/a&gt;，都添加了对 OpenTelemetry 的支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grafana k6 &lt;a href=&#34;https://github.com/grafana/xk6-distributed-tracing&#34; title=&#34;引入了跟踪&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;引入了跟踪&lt;/a&gt;功能，使性能工程师能够在&lt;a href=&#34;https://thenewstack.io/trace-based-testing-the-next-step-in-observability/&#34; title=&#34;负载测试&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;负载测试&lt;/a&gt;期间识别系统瓶颈或故障。&lt;/li&gt;
&lt;li&gt;Artillery.io 随后也&lt;a href=&#34;https://www.artillery.io/blog/introducing-opentelemetry-support&#34; title=&#34;添加了度量和分布式跟踪&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加了度量和分布式跟踪&lt;/a&gt;，提供了对系统性能更详细的分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tracetest 利用了 k6 测试中暴露的功能，以&lt;a href=&#34;https://docs.tracetest.io/tools-and-integrations/k6&#34; title=&#34;启用基于跟踪的负载测试&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;启用基于跟踪的负载测试&lt;/a&gt;，在运行测试时进行深入的断言。我们已经看到许多客户广泛使用了这个功能，比如&lt;a href=&#34;https://tracetest.io/case-studies/how-sigma-software-built-load-testing-for-their-microservices-with-k6-tracetest&#34; title=&#34;Sigma Software&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sigma Software&lt;/a&gt;。在 2024 年，Tracetest 团队将考虑将这一能力添加到&lt;a href=&#34;http://artillery.io/&#34; title=&#34;Artillery.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artillery.io&lt;/a&gt;和其他负载测试工具中。&lt;/p&gt;
&lt;h2 id=&#34;opentelemetry-的支持和用例扩展&#34;&gt;OpenTelemetry 的支持和用例扩展&lt;/h2&gt;
&lt;p&gt;越来越多的供应商正在采用 OpenTelemetry 标准，以支持典型但非常重要的遥测数据分析之外的行动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些公司，比如&lt;a href=&#34;https://opentelemetry.io/blog/2023/tyk-api-gateway/&#34; title=&#34;Tyk 正在仪器化其 API 网关，以原生支持 OpenTelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tyk 正在仪器化其 API 网关，以原生支持 OpenTelemetry&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;终端用户正在发现 OpenTelemetry 的新用例，比如&lt;a href=&#34;https://thenewstack.io/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/&#34; title=&#34;使用分布式跟踪来观察你的 CI/CD 流水线&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用分布式跟踪来观察你的 CI/CD 流水线&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tracetest.io/&#34; title=&#34;Tracetest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tracetest&lt;/a&gt;利用分布式跟踪数据进行集成和端到端测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;强调-opentelemetry-收集器&#34;&gt;强调 OpenTelemetry 收集器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/how-adobe-uses-opentelemetry-collector/&#34; title=&#34;OpenTelemetry 收集器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 收集器&lt;/a&gt;位于 OpenTelemetry 世界的中心，接收来自应用程序的信号，处理和转换这些信号，然后将它们导出到任意数量的后端系统。随着对 OpenTelemetry 的集成和供应商支持的扩展，对这个集中式收集器的需求和要求也在增加。&lt;/p&gt;
&lt;p&gt;2023 年引入了 OpenTelemetry Transformation Language (OTTL)，增强了 OpenTelemetry 收集器处理和转换传入信号的能力。&lt;/p&gt;
&lt;p&gt;在 Tracetest 中，我们能够利用&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/filterprocessor/README.md&#34; title=&#34;在过滤器处理器中使用 OTTL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在过滤器处理器中使用 OTTL&lt;/a&gt;的能力，改进了我们从输出大量遥测数据的生产环境中收集跟踪数据的方式。这一变化对&lt;a href=&#34;https://tracetest.io/blog/opentelemetry-collectors-new-filter-processor&#34; title=&#34;OpenTelemetry 收集器的过滤器处理器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 收集器的过滤器处理器&lt;/a&gt;使 Tracetest 适用于在高负载环境中运行测试，包括生产环境。&lt;/p&gt;
&lt;h2 id=&#34;无处不在的可观测性&#34;&gt;无处不在的可观测性&lt;/h2&gt;
&lt;p&gt;在最近的讨论中，我们发现了一种客户中不断增长的趋势，即“无处不在的可观测性”方法。这些公司不仅限于由网站可靠性工程师和 DevOps 传统使用，还包括了每个人，包括开发人员和测试人员，参与到可观测性中。这种转变重新定义&lt;/p&gt;
&lt;p&gt;了可观测性，使其从生产问题的一种反应性工具变成了在开发和测试中都有益的一种主动工具。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.honeycomb.io/&#34; title=&#34;Honeycomb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honeycomb&lt;/a&gt;强调了&lt;a href=&#34;https://www.honeycomb.io/blog/observability-driven-development&#34; title=&#34;在开发过程中使用可观测性&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在开发过程中使用可观测性&lt;/a&gt;，而像&lt;a href=&#34;http://digma.ai/&#34; title=&#34;Digma.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Digma.ai&lt;/a&gt;和 Tracetest 这样的工具正在推动这一前进。&lt;/p&gt;
&lt;h2 id=&#34;浏览器&#34;&gt;浏览器&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 的主要作用一直局限于仪器化后端系统，而基于开放标准的浏览器仪器化仍然是实验性的，进展缓慢。正在努力改进和标准化这种仪器化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tracetest.io/case-studies/how-uzufly-built-end-to-end-testing-serverless-web-app-with-distributed-traces&#34; title=&#34;Uzufly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uzufly&lt;/a&gt;在这方面脱颖而出。它使用现有的客户端仪器化来构建测试。展望未来，它的雄心是扩展基于跟踪的测试，以覆盖浏览器内部发起的前端操作所进行的测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这将实现前端和后端的全面端到端测试。请关注 2024 年更多关于这个主题的信息！&lt;/p&gt;
&lt;h2 id=&#34;2023-已经过去&#34;&gt;2023 已经过去&lt;/h2&gt;
&lt;p&gt;告别 2023，我们怀着热情期待 2024 年的到来。OpenTelemetry 具有势头，得到了标准和广泛采用的支持，推动了其增长。新的一年承诺带来令人兴奋的发展，围绕 OpenTelemetry 出现了创新的产品和用例。我迫不及待地想看到 2024 年将揭示的进步和创新。愿 OpenTelemetry 长存！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>2024 年 API 管理趋势预测</title>
      <link>https://jimmysong.io/trans/what-will-be-the-api-management-trends-for-2024/</link>
      <pubDate>Mon, 01 Jan 2024 11:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/what-will-be-the-api-management-trends-for-2024/</guid>
      <description>
        
        
        &lt;p&gt;我们已经审视了 2023 年的发展，并确定了几个可能在明年主导 API 管理领域的关键趋势。&lt;/p&gt;
&lt;p&gt;根据一个想法：API 完全控制了数字世界，预测到本十年结束时，API 管理市场将增长六倍。&lt;/p&gt;
&lt;p&gt;随着越来越多的公司转向 API 为先的架构，API 管理的需求变得至关重要。一家组织可能会管理数百甚至数千个微服务，它们需要工具来有效地编排和监控这些 API。&lt;/p&gt;
&lt;p&gt;因此，随着这种增长的开始，API 管理在未来会带来什么？我们已经审视了 2023 年的发展，并确定了几个可能在 2024 年主导 API 管理领域的关键趋势。&lt;/p&gt;
&lt;h2 id=&#34;是时候实行零信任了这并不是坏事&#34;&gt;是时候实行零信任了（这并不是坏事！）&lt;/h2&gt;
&lt;p&gt;随着 API 的不断增加，安全漏洞、黑客和 API 问题的风险也在增加。将零信任安全概念与你的 API 战略结合起来，倡导一种安全模型，其中不管交互发生在网络边界内还是外部，都不会假定信任。&lt;/p&gt;
&lt;p&gt;这种方法要求对每个试图访问网络内资源的个人和设备进行严格的身份验证，有效地消除了传统的受信任的内部网络概念。在数据泄露和恶意行为者变得越来越复杂的时代，采用零信任框架对于全面的安全至关重要，包括 API、云服务和网络基础设施在内的所有技术方面。&lt;/p&gt;
&lt;p&gt;在 API 管理领域，API 网关在实施零信任架构中起着关键作用。作为第一道防线，这些网关对每个 API 请求执行严格的身份验证和授权策略。它们负责验证凭据，管理访问令牌，并确保每个请求，无论来自组织内部还是外部，都要经过相同严格的安全检查。&lt;/p&gt;
&lt;p&gt;在这个框架中，API 网关不仅仅是流量管理器；它们是安全姿态的一部分，将零信任原则嵌入到 API 交互的核心。它们帮助构建适应持续风险评估、基于上下文的访问控制和深度监控 API 使用模式的动态安全策略。&lt;/p&gt;
&lt;p&gt;在零信任模型中，API 网关演变为安全执行者，对流经 API 的数据的完整性和机密性至关重要。这种演变强调了高级 API 管理工具在维护零信任原则和确保安全和弹性基础设施方面的重要性。&lt;/p&gt;
&lt;h2 id=&#34;多体验架构将成为常态&#34;&gt;“多体验架构”将成为常态&lt;/h2&gt;
&lt;p&gt;随着 2024 年 Gartner 的“多体验架构”概念变得越来越普遍，API 管理的复杂性将升级。组织不再只处理一种类型的 API；他们在同一应用生态系统中处理多种协议和架构。这种情况是现代应用多样性的结果，这些应用不仅包括基于 Web 的门户和本机移动应用，还包括扩展，如手表应用、实时对话界面和人工智能集成。&lt;/p&gt;
&lt;p&gt;每个组件都需要特定的 API 方法。通常情况下，REST API 在外部通信中因其简单性和通用性而受欢迎，而 gRPC 由于其效率和速度而可能被选择用于内部服务通信。与此同时，GraphQL 因其创建联合图和子图的能力而越来越多地用于高度灵活和高效的数据检索，这对于复杂的客户端应用程序是必不可少的。此外，消息代理对于实现需要立即数据更新和交互的应用程序的实时通信至关重要。&lt;/p&gt;
&lt;p&gt;在这种环境下，API 管理的挑战是多方面的。它涉及编排不同类型的 API 并确保在这些不同的架构中实现无缝集成、一致的安全执行和有效的性能监控。解决方案在于高级 API 管理工具和网关，它们能够处理这种多样性。这些工具必须提供复杂的功能，如协议转换、统一的安全策略和可以适应每种 API 类型的独特需求的分析。&lt;/p&gt;
&lt;p&gt;因此，2024 年的 API 管理将涉及到拥抱和管理这种复杂性，提供一个有凝聚力和高效率的框架，支持多体验架构的各种需求。&lt;/p&gt;
&lt;h2 id=&#34;api-管理正在变成组织管理&#34;&gt;API 管理正在变成组织管理&lt;/h2&gt;
&lt;p&gt;有一个著名的故事，来自前亚马逊和谷歌工程师 Steve Yegge，讲述了 Jeff Bezos 在 2002 年在亚马逊网络服务（AWS）制定的一项核心任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;所有团队将通过服务接口公开其数据和功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;团队必须通过这些接口相互通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不允许其他形式的进程间通信：不允许直接链接，不允许直接读取另一个团队的数据存储，不允许共享内存模型，也不允许任何后门。唯一允许的通信是通过网络上的服务接口调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论他们使用什么技术。HTTP、Corba、Pubsub、自定义协议——都无所谓。贝佐斯不关心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有服务接口，没有例外，必须从头开始设计，以便能够将接口暴露给外部世界的开发人员。不允许例外。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不这样做的人将被解雇。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;贝佐斯正在为亚马逊的面向服务的体系结构打下基础。二十二年后，这一框架在技术领域普及。这意味着 API 管理实际上是团队在组织内部进行通信和操作的方式。&lt;/p&gt;
&lt;p&gt;API 已经成为组织过程的生命线，代表了从孤立的功能到集成系统的转变。这种转变将 API 管理从技术任务转变为组织领导的核心方面。这带来了几个具体的变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;战略对齐&lt;/strong&gt;。API 管理与业务战略密切对齐。它涉及理解 API 如何能够实现业务目标，如进入新市场、提升客户体验或简化运营。这种战略对齐要求 API 倡议与组织的方向和目标同步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨职能合作&lt;/strong&gt;。API 不再仅仅是 IT 部门的责任。它们需要跨各种功能领域的合作，包括营销、销售、客户服务和业务发展。这种合作确保 API 以支持多样化的组织需求和机会的方式开发和管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将 API 作为产品的思维方式&lt;/strong&gt;。API 越来越被视为产品，有专门的团队负责它们的生命周期，从构思到淘汰。这种方法涉及定期更新、用户反馈集成和持续改进，就像公司提供的任何其他产品或服务一样。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能指标和分析&lt;/strong&gt;。API 的成功不仅通过技术性能来衡量，还通过其对业务结果的影响来衡量。诸如 API 使用趋势、用户参与度和对收入增长的贡献等指标成为 API 有效性的重要指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，API 的管理不再仅仅关于技术规范或协议，而是关于管理信息分享和服务交付的方式，跨整个组织。这种方法促进了敏捷性、可扩展性和创新，这在今天不断发展的技术领域中是必不可少的。&lt;/p&gt;
&lt;h2 id=&#34;gitops-已经在-api-中使用&#34;&gt;GitOps 已经在 API 中使用&lt;/h2&gt;
&lt;p&gt;将 GitOps 集成到 API 管理中标志着 API 是如何更高效、透明和可靠地开发、部署和维护的一种显著转变。GitOps 是一种将 git 的版本控制原则应用于操作工作流程的方法，对于以更高效、透明和可靠的方式管理 API 的生命周期至关重要。&lt;/p&gt;
&lt;p&gt;在这个框架中，API 的每个方面，从其设计文档和配置到代码和部署清单，都存储在 git 存储库中。这种方法确保了整个 API 生命周期都受到版本控制，允许详细跟踪更改，以及在出现问题时轻松回滚，增强了团队成员之间的协作。&lt;/p&gt;
&lt;p&gt;自动化部署流程是使用 GitOps 管理 API 的一个关键优势。通过利用 git 作为唯一的真相来源，可以设置自动化流水线，以在提交更改时部署 API。这种自动化不仅限于简单的部署，还包括配置和策略的更新，确保 API 的所有方面都得到一致和可靠的更新。团队可以创建与 GitOps 工作流程直接集成的分散的声明性工作流，用于复杂的自定义配置。&lt;/p&gt;
&lt;p&gt;GitOps 还为 API 管理带来了更高级别的安全性。关于更改的拉取请求鼓励同行审查和批准，为引入修改提供了更健壮的流程。此外，git 存储库的不可变性增加了额外的安全性层，因为每个更改都是被跟踪和可审计的。&lt;/p&gt;
&lt;p&gt;GitOps 有望通过引入版本控制、自动化、安全和协作原则来改变 API 管理，从而使 API 开发和管理更加与现代敏捷实践相符，提高了效率和可靠性。&lt;/p&gt;
&lt;h2 id=&#34;开发者体验将成为标配&#34;&gt;开发者体验将成为标配&lt;/h2&gt;
&lt;p&gt;在 2024 年，提供卓越的开发者体验（DevX）将不再是奢侈；它将成为一项必需。未将 DevX 置于优先位置的 API 管理系统越来越有被淘汰的风险，因为以开发者为中心的模式正在成为标准。&lt;/p&gt;
&lt;p&gt;这一变革的基石在于认识到开发者需要与其工作流程相一致并增强生产力的工具和系统。这其中的一个关键方面是采用&lt;a href=&#34;https://thenewstack.io/why-use-infrastructure-as-code/&#34; title=&#34;基础设施即代码&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基础设施即代码&lt;/a&gt;（IaC）实践。IaC 允许开发者通过代码而不是手动流程来管理和配置基础设施。&lt;/p&gt;
&lt;p&gt;另一个关键因素是 API 管理系统支持各种部署环境的能力。随着部署模型的多样化，从本地部署到&lt;a href=&#34;https://www.getambassador.io/kubernetes-glossary/cloud-native&#34; title=&#34;云原生&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生&lt;/a&gt;等，一个灵活的 API 管理解决方案，能够适应不同的环境至关重要。&lt;/p&gt;
&lt;p&gt;API 管理系统必须不断发展，以满足现代软件开发实践的需求。未能提供以开发者为中心的体验的系统，其特点包括 IaC、与标准工具的集成、易用性、灵活性和强大的分析功能，将在开发者体验至关重要的环境中难以保持相关性。&lt;/p&gt;
&lt;h2 id=&#34;捆绑随后的解绑&#34;&gt;捆绑随后的解绑&lt;/h2&gt;
&lt;p&gt;API 管理工具的演变正在见证回归到捆绑解决方案，这是与最近的点对点解决方案的趋势相反。与旧的企业捆绑解决方案不同，这些新一代捆绑解决方案适用于更广泛的组织范围，提供了综合的、集成的解决方案。&lt;/p&gt;
&lt;p&gt;API 生态系统的不断复杂和规模的增加推动了这一转变。现代 API 管理需要一种全面的方法，包括强大的身份验证机制、严格的安全协议和自助开发者工具。通过将这些功能整合到&lt;a href=&#34;https://www.getambassador.io/products/edge-stack/api-gateway&#34; title=&#34;单一的、连贯的包中&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;单一的、连贯的包中&lt;/a&gt;，捆绑解决方案提供了一种更简化和高效的 API 管理方式。&lt;/p&gt;
&lt;p&gt;在这些捆绑解决方案中包括网关对于流量管理至关重要，提供了速率限制、请求路由和协议转换等功能。身份验证是另一个关键组成部分，确保通过 OAuth 和 JSON Web Tokens（JWT）等机制安全访问 API。这些捆绑解决方案中的安全功能不仅限于身份验证，还提供了全面的保护，防止 SQL 注入、DDoS 攻击和数据泄露等威胁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.getambassador.io/products/telepresence&#34; title=&#34;自助开发者工具&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自助开发者工具&lt;/a&gt;是这些捆绑解决方案的重要组成部分。它们赋予开发者独立创建、测试和部署 API 的能力，减少了对 IT 团队的依赖，加速了开发。这些工具必须包括用户友好的界面、详细的文档和自动化的测试功能。&lt;/p&gt;
&lt;p&gt;API 管理中捆绑解决方案的再次出现代表着对现代 API 景观需求的适应。通过在一个统一的包中提供网关、身份验证、安全和开发者工具，这些捆绑解决方案提供了适用于各种组织需求的多功能和高效的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;未知的人工智能&#34;&gt;未知的人工智能&lt;/h2&gt;
&lt;p&gt;人工智能正在颠覆数十个行业的规则，并以意想不到的方式重塑它们。&lt;/p&gt;
&lt;p&gt;“意想不到”是描述人工智能/机器学习技术将如何扰乱 API 管理生态系统的好方式。KubeCon North America 2023 与 OpenAI Dev Day 同时举行，但两者似乎天差地别。在 KubeCon 上，AI 只轻微&lt;a href=&#34;https://danielbryantuk.medium.com/kubecon-chicago-key-takeaways-3de5ca13b375&#34; title=&#34;提及&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;提及&lt;/a&gt;，似乎 DevOps 和 API 管理行业对人工智能没有太多（尚未！）言论。&lt;/p&gt;
&lt;p&gt;但是，将 AI 排除在外将严重低估 AI 发展的范围和速度。去年这个时候，ChatGPT 才两周大。那时没有人知道它将如何彻底改变技术的各个方面。&lt;/p&gt;
&lt;p&gt;因此，AI/机器学习与 API 战略的融合是不可避免的，可能会彻底改变 API 的开发、管理和优化方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AI 驱动的分析可以提供对 API 使用模式的更深入洞察，从而实现更有效的资源管理和优化。&lt;/li&gt;
&lt;li&gt;AI 可以自动化和增强安全协议，比传统方法更有效地检测异常和潜在威胁。&lt;/li&gt;
&lt;li&gt;AI 可以显着简化 API 开发过程。通过使用机器学习算法，API 可以变得更加自适应和智能，能够以更高的准确性和效率处理复杂请求。这种集成可能导致自我优化的 API，根据实时反馈调整其行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI 与 API 管理的交汇是即将到来的现实。随着 AI 继续渗透各个领域，其融入 API 生态系统将提供前所未有的效率、安全性和适应性水平，宣告了 API 管理和使用方式的新时代。&lt;/p&gt;
&lt;h2 id=&#34;未知的未知&#34;&gt;未知的未知&lt;/h2&gt;
&lt;p&gt;还有什么在未来？随着技术进步的极速和 API 已经吞噬了整个世界的方式，预测 API 管理的未来就像试图绘制未知领域一样困难。&lt;/p&gt;
&lt;p&gt;这个领域正在迅速发展，受新兴技术和 Paradigm 转变的推动，这使得难以预见未来的变化的全部范围。就像 API 已经改变了数字基础设施一样，未来的创新和方法将进一步重新定义我们今天对 API 管理的理解。&lt;/p&gt;
&lt;p&gt;请告诉我们你认为 2024 年将为 API 管理带来什么，以及你认为明年我们将使用什么令人兴奋的技术。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>令人惊叹的 Grafana 仪表盘用途：2023 年最有创意和有趣的用例分享</title>
      <link>https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/</link>
      <pubDate>Fri, 29 Dec 2023 11:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/</guid>
      <description>
        
        
        &lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;本文译自：&lt;a href=&#34;https://grafana.com/blog/2023/12/27/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/&#34; title=&#34;Grafana dashboards in 2023: Memorable use cases of the year&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana dashboards in 2023: Memorable use cases of the year&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;摘要：这篇文章回顾了 2023 年社区中一些令人印象深刻的 Grafana 仪表盘的用例，它们展示了 Grafana 的多样性和创造力，以及如何用可视化的方式监控和分析各种数据和场景。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;随着每年使用 &lt;a href=&#34;https://grafana.com/oss/grafana?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;Grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana&lt;/a&gt; 的用户人数增加，人们使用 &lt;a href=&#34;https://grafana.com/grafana/dashboards/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;Grafana 仪表板&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana 仪表板&lt;/a&gt; 的原因也日益多样化。在 2023 年，我们社区内外的成员分享了一些令人难以置信的专业和个人项目，包括 Grafana 如何帮助他们成功发射火箭，减少碳排放，甚至帮助平衡国家电网。让我们回顾一下今年看到的一些最令人难忘的仪表板：&lt;/p&gt;
&lt;h2 id=&#34;获奖者&#34;&gt;获奖者&lt;/h2&gt;
&lt;p&gt;Grafana 在六月份迎来了 10 岁的生日，为了庆祝这一时刻，我们首次推出了 &lt;a href=&#34;https://grafana.com/about/events/grafanacon/2023/golden-grot-awards/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;Golden Grot 奖项&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Golden Grot 奖项&lt;/a&gt;，这些奖项帮助突出显示了我们社区创建的令人惊叹的 Grafana 仪表板。但今年并不是唯一一个与仪表板相关的胜利：今年三月，加州大学洛杉矶分校的火箭工程团队使用 Grafana 作为测试和发射过程中的可视化工具，在一次业余火箭竞赛中赢得了冠军，并打破了世界纪录。&lt;/p&gt;
&lt;h3 id=&#34;监控能源基础设施httpsgrafanacomblog20230615meet-our-golden-grot-awards-grand-prize-winnerspgblogplcmtbody-txt&#34;&gt;&lt;a href=&#34;https://grafana.com/blog/2023/06/15/meet-our-golden-grot-awards-grand-prize-winners/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;监控能源基础设施&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;监控能源基础设施&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Golden Grot 奖项有两位大奖得主，在个人仪表板类别中，奖项授予了荷兰 Erasmus 经济学院的研究生 Nicky Sonnemans。他用仪表板监控 &lt;a href=&#34;https://grafana.sonnem.nl/d/uCV3CiPVz/european-energy-infastructure-golden-grot?orgId=2&#34; title=&#34;欧洲能源基础设施的当前状态&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;欧洲能源基础设施的当前状态&lt;/a&gt; — 具体包括有关天然气储存、天然气在欧洲的实际流动、电力生成和能源价格的当前和历史信息。Sonnemans 创建这个仪表板的灵感来自于他想要将能源数据可视化到一个集中的地方，以便他可以轻松地实时发现任何异常情况并收到任何必要的警报。他补充说：“我的主要动机是展示 Grafana 可以用作商业智能工具，而不仅仅是用于技术监控和服务器监控。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f1_hu8b33ea886530720725403110840e9074_216084_1600x1358_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f1.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f1.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;1358&#34; alt=&#34;image&#34; data-caption=&#34;Nicky Sonnemans 的 Golden Grot 奖获奖仪表板&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Nicky Sonnemans 的 Golden Grot 奖获奖仪表板&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;解决工作中的可观测性问题httpsgrafanacomblog20230615meet-our-golden-grot-awards-grand-prize-winnerspgblogplcmtbody-txt&#34;&gt;&lt;a href=&#34;https://grafana.com/blog/2023/06/15/meet-our-golden-grot-awards-grand-prize-winners/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;解决工作中的可观测性问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;解决工作中的可观测性问题&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在今年的 Golden Grot 奖项的专业仪表板类别中，获奖者是南非约翰内斯堡的 IT 专业人员 Raymond Sowden。他是 RadixTrie PTY LTD 的 CNC 团队负责人，专注于 Oracle 的 JD Edwards EnterpriseOne ERP (JDE)。他创建了获奖的 Grafana 仪表板来解决工作中的一个重大可观测性问题：“我们没有一个单一的监控视图来监控 JDE，所以我们的仪表板为我们提供了对 JDE 的整体健康和性能的无与伦比的见解。”他说，一个重要时刻是当他们能够看到后端和前端发生了什么时：“那时我们知道我们有了特别的东西。”&lt;/p&gt;
&lt;p&gt;Raymond 的仪表板提供了对系统健康状况的高级概述，但各种小部件链接到了更多技术数据的详细仪表板。它被他公司的 JDE 技术人员使用，以及他们客户的技术人员，一直到执行层级。他说：“我们通过提供实时见解和指标来减少了日常检查、日常报告等人工工作的工作量。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f2_hu4a236b4253c5c47c8e9e6fef4141a603_156197_1600x772_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f2.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f2.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;772&#34; alt=&#34;image&#34; data-caption=&#34;Raymond Sowden 的 Golden Grot 奖获奖仪表板&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Raymond Sowden 的 Golden Grot 奖获奖仪表板&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;在火箭发射过程中提供数据可见性httpsgrafanacomblog20230421how-grafana-helped-a-rocket-engineering-team-break-a-world-recordpgblogplcmtbody-txt&#34;&gt;&lt;a href=&#34;https://grafana.com/blog/2023/04/21/how-grafana-helped-a-rocket-engineering-team-break-a-world-record/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;在火箭发射过程中提供数据可见性&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在火箭发射过程中提供数据可见性&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在一篇关于赢得 &lt;a href=&#34;https://friendsofamateurrocketry.org/dpf-challenge/&#34; title=&#34;Dollar Per Foot 挑战&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dollar Per Foot 挑战&lt;/a&gt; 并创下液体火箭最高高度的大学生和软件工程师 Philip Do 的博客文章中，他和来自 &lt;a href=&#34;http://rocketproject.seas.ucla.edu/&#34; title=&#34;UCLA 火箭项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UCLA 火箭项目&lt;/a&gt; 的队友解释了他们是如何依赖 &lt;a href=&#34;https://grafana.com/oss/grafana?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;Grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana&lt;/a&gt; 来进行工作的。“通过我们的仪表板，我们可以快速可视化数据，并在测试和发射的关键阶段监控潜在的硬件问题，”他说。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f3_hu2fe11708080749cef549fa9a74873f3f_102975_1600x1001_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f3.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f3.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;1001&#34; alt=&#34;image&#34; data-caption=&#34;Rocket Project 的发射仪表板中的传感器和阀门数据&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Rocket Project 的发射仪表板中的传感器和阀门数据&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;家居&#34;&gt;家居&lt;/h2&gt;
&lt;p&gt;Grafana Labs 坚定地相信工作与生活的平衡，但当你对 Grafana 仪表板的吸引力和信息丰富性如此熟悉时，难以抵挡创建一个用于监视家庭事物的诱惑。我们在 2023 年展示的 Grafanista 制作的项目包括一个&lt;a href=&#34;https://grafana.com/blog/2023/05/19/monitoring-a-furnace-with-home-assistant-prometheus-and-grafana/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;可视化家用炉子的运行时间&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可视化家用炉子的运行时间&lt;/a&gt;、一个&lt;a href=&#34;https://grafana.com/blog/2023/02/15/breathing-easy-with-grafana-dashboards-and-3d-printing/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;监控空气质量&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;监控空气质量&lt;/a&gt;的项目，同时使用 3D 打印机，以及一个&lt;a href=&#34;https://grafana.com/blog/2023/10/23/monitor-temperature-and-humidity-with-grafana-and-raspberry-pi/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;跟踪温度和湿度&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;跟踪温度和湿度&lt;/a&gt;的项目，用于监控滨海家庭。还有一个旨在监控 &lt;a href=&#34;https://www.plex.tv/your-media/&#34; title=&#34;Plex 媒体服务器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plex 媒体服务器&lt;/a&gt; 的项目，是 &lt;a href=&#34;https://grafana.com/blog/2023/04/28/plexporters-energize-how-we-monitor-plex-with-grafana/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;内部 homelab Slack 频道的三位 Grafanista 在一次黑客马拉松期间创建的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内部 homelab Slack 频道的三位 Grafanista 在一次黑客马拉松期间创建的&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另一个值得注意的家庭项目来自公司外部：&lt;a href=&#34;https://grafana.com/about/events/grafanacon/2023/&#34; title=&#34;GrafanaCON 2023&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GrafanaCON 2023&lt;/a&gt; 上，Toyota Racing Development 的高级 DevOps 工程师 Kyle Shelton 提供了一个演示，他介绍了如何将他在工作中使用的 &lt;a href=&#34;https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;Grafana Cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana Cloud&lt;/a&gt; 经验，用于在家中使用 Grafana Cloud Free &lt;a href=&#34;https://grafana.com/about/events/grafanacon/2023/session/triathlon-training-with-prometheus-python-grafana-cloud/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;监控个人三项铁人训练&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;监控个人三项铁人训练&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;从任何地方监测游泳池水位&#34;&gt;从任何地方监测游泳池水位&lt;/h3&gt;
&lt;p&gt;高级解决方案工程师 Brian LeBlanc 创建了一个 Grafana 仪表板，以便他可以监测自家游泳池的水位。这使他可以安心地进行了一次为期 10 天的旅行，而不会过度担心游泳池水泵可能遭受的潜在损害（更换费用：1000 美元）。在&lt;a href=&#34;https://grafana.com/blog/2023/08/14/how-to-monitor-pool-water-levels-from-anywhere-with-grafana/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;一篇博客文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一篇博客文章&lt;/a&gt;中，他解释了他如何建立一个系统，其中包括一个名为 &lt;a href=&#34;https://www.rola-chem.com/m-3000-pool-sentry/&#34; title=&#34;Pool Sentry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pool Sentry&lt;/a&gt; 的机械设备，一个 &lt;a href=&#34;https://www.link-tap.com/&#34; title=&#34;LinkTap G2S&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkTap G2S&lt;/a&gt;（一个连接到花园水管的物联网智能水控制器），以及一个 &lt;a href=&#34;https://weatherflow.com/tempest-home-weather-system/&#34; title=&#34;Tempest 天气站&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tempest 天气站&lt;/a&gt;。他使用 Docker 运行了一个在 GitHub 上找到的 &lt;a href=&#34;https://github.com/nalbury/tempest-exporter&#34; title=&#34;exporter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exporter&lt;/a&gt;，并将数据导出到 &lt;a href=&#34;https://grafana.com/oss/prometheus/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;Prometheus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus&lt;/a&gt;，然后远程将指标数据写入了由 Grafana Mimir 提供支持的 &lt;a href=&#34;https://grafana.com/products/cloud/metrics/&#34; title=&#34;Grafana Cloud Metrics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana Cloud Metrics&lt;/a&gt;。他解释说：“Tempest exporter 从 Tempest Cloud 中获取数据。然后，我的本地 Prometheus 实例会抓取这些数据并将其发布到 Grafana Cloud Metrics 中，以便我可以在 Grafana Cloud 中可视化它。”结果，他说：“我可以将两个物联网设备的数据汇总到一个窗口中，以评估水的消耗、降雨量和环境温度。”&lt;/p&gt;
&lt;p&gt;这个项目在多个方面都取得了成功：“作为一名新的 Grafanista，它为我提供了一些实际的用例，让我有机会亲自学习我们的产品，”他说。“在我和家人度假期间，它也一直运行得非常顺利。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f4_hu810d6a540cf53e0a506474421f781824_58743_1418x627_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f4.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f4.jpg&#34; data-width=&#34;1418&#34; data-height=&#34;627&#34; alt=&#34;image&#34; data-caption=&#34;一个 Grafana 仪表板的截图，涵盖了大范围的时间，包括水的使用数据、降水和温度。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;一个 Grafana 仪表板的截图，涵盖了大范围的时间，包括水的使用数据、降水和温度。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;环境气候和能源消耗&#34;&gt;环境、气候和能源消耗&lt;/h2&gt;
&lt;p&gt;今年的许多杰出仪表板是作为环保使命的一部分创建的。Grafana Labs 的一个客户转向 Grafana，帮助减少对环境的影响。在另一个用例中，我们了解到 Grafana Cloud 在一次能源危机期间发挥了关键作用。我们还发现，Grafana Labs 的一名工程师曾经将 Grafana 作为可持续农业系统的一部分使用。&lt;/p&gt;
&lt;h3 id=&#34;减少数据中心的碳排放&#34;&gt;减少数据中心的碳排放&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sentrysoftware.com/&#34; title=&#34;Sentry Software&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sentry Software&lt;/a&gt; 是 Hardware Sentry 的制造商，它是一款 IT 监控软件，其业务的很大一部分依赖于在其数据中心中维持最佳的温度条件，这一操作对公司的整体碳足迹有所贡献。&lt;/p&gt;
&lt;p&gt;最近，Sentry Software 开始采取措施，在位于巴黎的主要数据中心中降低电力消耗，以减少其碳排放。通过实施开放标准和 Grafana Labs 技术，他们开发了一个&lt;a href=&#34;https://grafana.com/grafana/dashboards/17229-hardware-sentry-site/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;使用 Grafana 仪表板监控电力使用情况&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Grafana 仪表板监控电力使用情况&lt;/a&gt;的监控系统，以更高效地监测电力使用情况。最终结果是数据中心的空调能源使用减少了 19%，年度二氧化碳排放量减少了 7%。&lt;/p&gt;
&lt;p&gt;最好的部分是，由于整个监控系统是建立在开源解决方案和开放标准之上的，任何人都可以复制该公司的成功经验。Sentry Software CEO Bertrand Martin 在&lt;a href=&#34;https://grafana.com/about/events/grafanacon/2023/session/grafana-opentelemetry-to-reduce-electricity-usage-at-sentry-software/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;GrafanaCON 2023 演讲&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GrafanaCON 2023 演讲&lt;/a&gt;中表示：“这个故事可以成为你的故事，你不需要复杂的企业解决方案。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f5_hu409530e00e568f3883e30e66fcad98c4_123900_1999x946_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f5.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f5.jpg&#34; data-width=&#34;1999&#34; data-height=&#34;946&#34; alt=&#34;image&#34; data-caption=&#34;Sentry Software 的 Grafana 仪表板为更有效地跟踪其数据中心的碳足迹提供了有关能源消耗、成本和排放的实时和累积数据。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Sentry Software 的 Grafana 仪表板为更有效地跟踪其数据中心的碳足迹提供了有关能源消耗、成本和排放的实时和累积数据。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;在法国平衡电网&#34;&gt;在法国平衡电网&lt;/h3&gt;
&lt;p&gt;去年冬天，Flexcity —— 电动灵活性市场的市场领导者 —— 面临了前所未有的挑战：帮助法国电网运营商 &lt;a href=&#34;https://www.rte-france.com/en/home&#34; title=&#34;RTE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RTE&lt;/a&gt; 在欧洲普遍的能源危机阴云笼罩下稳定法国国家电网。随着公司因其努力而上了新闻头条，Flexcity 的技术团队将 &lt;a href=&#34;https://grafana.com/products/cloud/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;Grafana Cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana Cloud&lt;/a&gt; 归功于帮助法国渡过了那个特别艰难的时期。利用 Grafana 仪表板，Flexcity 团队可以实时跟踪客户的能源消耗数据，从而在电网最需要的关键时刻节省了数千千瓦时电力。&lt;/p&gt;
&lt;p&gt;Flexcity 的 CTO Mathias Deshayes 表示：“当我们收到电网运营商的请求时，我们使用 Grafana 仪表板实时查看客户基础的能源和功率消耗和产量水平。我们在客户现场安装了小型设备，每隔四秒，我们的平台就会将他们的消耗发送到我们的平台，并在 Grafana 中显示出来。因此，我们在 Grafana 中有了我们组合的总和，我们可以在激活期间跟踪消耗，即当电网运营商要求设备上下调整功率以帮助平衡电网时。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f6_hu5272964dba6ae51ed4a11c83b52492f6_96351_1822x792_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f6.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f6.jpg&#34; data-width=&#34;1822&#34; data-height=&#34;792&#34; alt=&#34;image&#34; data-caption=&#34;Flexcity 比利时组合的 Grafana Cloud 仪表板，显示了公司客户和服务 KPI 的全球消耗。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Flexcity 比利时组合的 Grafana Cloud 仪表板，显示了公司客户和服务 KPI 的全球消耗。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;监管小农场&#34;&gt;监管小农场&lt;/h3&gt;
&lt;p&gt;在加入 Grafana Labs 之前，高级解决方案工程师 Chris Wilkes 经营了一个鱼塘农场 —— 严格来说是一个水耕农场。 （水耕农业结合了养鱼业和水培，即在液体培养基中种植蔬菜。）Wilkes 是一名初学者农民，坦言在开始时遇到了很多问题。例如，有一次，他的所有鱼在晚上一台空气泵发生故障后死亡。&lt;/p&gt;
&lt;p&gt;在深入研究物联网领域之后，他说：“农场上的每一台机器都有一个微控制器。”随着时间的推移，农场上发展出了一个控制和监控系统，他使用 PubNub 查询了所有板，并将数据转储到运行在中央服务器上（一台旧的笔记本电脑放在集装箱中）的 PostgreSQL 数据库中。当他偶然发现 Grafana 时，他说：“就像走出黑暗洞穴进入光明。”&lt;/p&gt;
&lt;p&gt;Wilkes 经营了这个农场约五年。他说：“Grafana 的监控能力在我管理和改进农业技术方面发挥了重要作用。”他补充说，他计划有一天回到农业领域，将更加高级的 Grafana 技能与他对可持续性的热情结合起来。他说：“我们需要改变种植食物的方式，特别是在食物稀缺和不确定的地方。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f7_hub1af386da5767638f97dff94312b30fb_96169_1999x1359_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f7.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f7.jpg&#34; data-width=&#34;1999&#34; data-height=&#34;1359&#34; alt=&#34;image&#34; data-caption=&#34;2016 年左右的 Grafana 仪表板，跟踪了农场的物联网数据。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;2016 年左右的 Grafana 仪表板，跟踪了农场的物联网数据。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;户外&#34;&gt;户外&lt;/h2&gt;
&lt;p&gt;我们经常看到 Grafana 仪表板突然出现，但今年有两个特别引人注目。&lt;/p&gt;
&lt;h3 id=&#34;the-ocean-race&#34;&gt;The Ocean Race&lt;/h3&gt;
&lt;p&gt;参赛者在这个全球帆船比赛中环绕世界比赛，这意味着他们需要全天候监测包括 GPS 位置、风速以及空气和水温在内的数据。代表德国的 &lt;a href=&#34;https://www.theoceanrace.com/en/teams/team-malizia&#34; title=&#34;Team Malizia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Team Malizia&lt;/a&gt;分享了&lt;a href=&#34;https://exocet.cloud/grafana/d/bsbc_7MGx/malizia-public-dashboard-the-ocean-race?orgId=15&#34; title=&#34;帮助他们在艰难的六个月冒险中跟踪进展的 Grafana 仪表板&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;帮助他们在艰难的六个月冒险中跟踪进展的 Grafana 仪表板&lt;/a&gt;。The Ocean Race 总部还展示了一些令人印象深刻的 Grafana 仪表板，以监测整个比赛。&lt;/p&gt;
&lt;h3 id=&#34;call-of-duty&#34;&gt;Call of Duty&lt;/h3&gt;
&lt;p&gt;Grafana 仪表板的现实世界示例并不新鲜，但它们也在虚拟世界中使用。下面的图像来自视频游戏 Call of Duty: Modern Warfare 2。&lt;/p&gt;
&lt;p&gt;Grafana Labs 的首席执行官兼联合创始人 Raj Dutt 在&lt;a href=&#34;https://grafana.com/about/events/grafanacon/2023/session/keynote-grafana-10/?pg=blog&amp;amp;plcmt=body-txt&#34; title=&#34;GrafanaCON 2023 主题演讲&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GrafanaCON 2023 主题演讲&lt;/a&gt;中说：“对于那些了解 Grafana 的人来说，这显然非常像 Grafana，从指针的样式、颜色方案以及一切都清晰可见。”“所以无论是谁在 Activision 是 Grafana 的粉丝并且负责这个，谢谢你！我们所有人都表示由衷的敬意。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f8_hu9e7b9040cde68acfbadffad5a8ea1d56_94703_1200x675_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f8.jpg&#34; data-img=&#34;/trans/grafana-dashboards-in-2023-memorable-use-cases-of-the-year/f8.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;675&#34; alt=&#34;image&#34; data-caption=&#34;Call of Duty 视频游戏中的 Grafana 仪表板截图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Call of Duty 视频游戏中的 Grafana 仪表板截图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们期待在 2024 年看到更多令人惊叹的仪表板！&lt;/p&gt;
&lt;p&gt;想要与社区分享您的 Grafana 故事和仪表板吗？给我们发送邮件：&lt;a href=&#34;mailto:stories@grafana.com&#34; title=&#34;stories@grafana.com&#34;&gt;stories@grafana.com&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>给初学生成式 AI（GenAI）的开发人员的 7 条最佳实践</title>
      <link>https://jimmysong.io/trans/7-best-practices-for-developers-getting-started-with-genai/</link>
      <pubDate>Wed, 20 Dec 2023 11:30:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/7-best-practices-for-developers-getting-started-with-genai/</guid>
      <description>
        
        
        &lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;编辑评论：这是一篇非常有价值的文章，向开发者展示了生成式 AI 的潜力和应用。生成式 AI 是一种利用大型语言模型来生成和转换文本的技术，它可以帮助开发者解决一些复杂的问题，如代码生成，文档编写，内容创作等。生成式 AI 也是一种云原生的技术，它需要大量的计算资源和数据，以及高效的部署和管理方式。文章提供了一些实用的工具和平台，如 GitHub Copilot，Bard，ChatGPT 等，让开发者可以轻松地尝试和使用生成式 AI。文章还给出了一些注意事项和建议，如保护数据隐私，验证输出质量，避免滥用等，让开发者可以负责任地使用生成式 AI。我认为这篇文章是一个很好的入门指南，让开发者可以了解和利用生成式 AI 来打造创新的云原生应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;通过一点经验，你可以使用 GenAI 解决一些相当困难的问题，就像学习任何新技术一样，最好的方法就是动手实践。&lt;/p&gt;
&lt;p&gt;随着可访问的生成式人工智能进入主流，以及由此产生的通过简单语言转化整个人类知识的能力，每个企业都在竭力将人工智能整合到其技术体系中。对于开发人员来说，压力很大，但也有着令人兴奋的无限可能性。&lt;/p&gt;
&lt;p&gt;如果你有一些经验，你可以使用 GenAI 解决一些相当困难的问题，就像学习自 HTML 诞生以来的每一项新技术一样。让我们看看你可以采取的七个步骤，以开始建立 GenAI 的基础，并最终逐步发展成一个完全运作、可扩展的应用程序。&lt;/p&gt;
&lt;h2 id=&#34;1-玩转现有的-genai-工具&#34;&gt;1. 玩转现有的 GenAI 工具&lt;/h2&gt;
&lt;p&gt;入门 GenAI 的最佳方法是实践，而且门槛非常低。市场上现在有许多免费选项，比如 Bard、ChatGPT、Bing 和 Anthropic，有很多可以学习的选择。&lt;/p&gt;
&lt;p&gt;尝试使用 GenAI 工具和代码生成解决方案进行实验（并鼓励你的团队进行实验），例如&lt;a href=&#34;https://github.com/features/copilot&#34; title=&#34;GitHub Copilot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Copilot&lt;/a&gt;，它集成到每个流行的 IDE 中，充当一对程序员。Copilot 提供程序员建议，帮助解决代码问题，并生成整个函数，使学习和适应GenAI变得更快更容易。&lt;/p&gt;
&lt;p&gt;当你首次使用这些现成的工具时，要小心使用专有或敏感的公司数据，即使只是提供给工具一个提示也要小心。Gen AI 供应商可能会存储并使用你的数据用于将来的训练运行，这是公司数据政策和信息安全协议的重大违规行为。确保你及时直接地向你的团队传达这一黄金规则。&lt;/p&gt;
&lt;h2 id=&#34;2-了解从-genai-中可以获得什么&#34;&gt;2. 了解从 GenAI 中可以获得什么&lt;/h2&gt;
&lt;p&gt;一旦你开始尝试 GenAI，你将很快了解到不同提示会产生什么类型的输出。大多数 GenAI 工具可以生成各种格式的文本，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;生成&lt;/strong&gt;新的故事、想法、文章或任意长度的文本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转换&lt;/strong&gt;现有文本为不同格式，如 JSON、Markdown 或 CSV。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;翻译&lt;/strong&gt;文本成不同语言。&lt;/li&gt;
&lt;li&gt;以聊天的方式&lt;strong&gt;对话&lt;/strong&gt;来回。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;审查&lt;/strong&gt;文本以展示特定元素。&lt;/li&gt;
&lt;li&gt;将长篇内容&lt;strong&gt;汇总&lt;/strong&gt;以获取洞察。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析&lt;/strong&gt;文本的情感。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何人都可以生成这些类型的生成文本结果，无需编程技能。只需键入提示，文本就会产生。然而，大型语言模型（LLM）经过的培训越多，即它摄取的语言碎片越多，随着时间的推移，它在生成、更改和分析文本方面就会变得更加准确。&lt;/p&gt;
&lt;h2 id=&#34;3-学习提示工程&#34;&gt;3. 学习提示工程&lt;/h2&gt;
&lt;p&gt;部署 GenAI 的良好方法之一是掌握编写提示的技巧，这既是一门艺术又是一门科学。虽然提示工程师是一个实际的职位描述，但它也是任何希望提高他们使用 AI 的人的好绰号。优秀的提示工程师知道如何开发、完善和优化文本提示，以获得最佳结果并提高整个 AI 系统的性能。&lt;/p&gt;
&lt;p&gt;提示工程不需要特定的学位或背景，但从事这项工作的人需要擅长清晰解释事物。这是重要的，因为所有可用的 LLM 都是无状态的，这意味着没有长期记忆，每次交互只存在于小会话中。&lt;/p&gt;
&lt;p&gt;在提示工程中，以下三个因素变得重要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;上下文&lt;/strong&gt;：你提出的问题、聊天历史记录和你设置的参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;知识&lt;/strong&gt;：LLM 已经接受的培训内容以及你通过提示提供的新信息的结合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;形式&lt;/strong&gt;：你期望以何种方式生成信息的语气。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上下文、知识和形式的结合塑造了 GenAI 的大量知识存储成为你希望获得的响应类型。&lt;/p&gt;
&lt;h2 id=&#34;4-探索其他-genai-提示方法&#34;&gt;4. 探索其他 GenAI 提示方法&lt;/h2&gt;
&lt;p&gt;到目前为止，我们一直在谈论零-shot 提示，这基本上意味着提出一个带有一些上下文的问题。如果你从这种方法中没有得到期望的结果，还有四种提示 GenAI 的方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;单次提示&lt;/strong&gt;：提供你正在寻找的输出类型的示例。如果你想要特定类型的格式，例如[标题]和[4 个要点]，这将特别有用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;少量提示&lt;/strong&gt;：这类似于单次提示，但你会提供三到五个示例而不仅仅是一个。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“让我们一步一步地思考”&lt;/strong&gt;：这种技巧对 LLM 和对人都同样有效。如果你有一个包含多个部分的复杂问题，请在末尾输入此短语，等待 LLM 分解问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;思路链提示&lt;/strong&gt;：对于涉及复杂算术或其他推理任务的问题，思路链提示会指示工具“展示其工作方式”并解释其如何得出答案。以下是可能的示例：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/7-best-practices-for-developers-getting-started-with-genai/f1_hu5da5e28c94c7cdc0c2775914665ea64e_96992_1338x708_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/7-best-practices-for-developers-getting-started-with-genai/f1.png&#34; data-img=&#34;/trans/7-best-practices-for-developers-getting-started-with-genai/f1.png&#34; data-width=&#34;1338&#34; data-height=&#34;708&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;5-查看其他-genai-工作示例&#34;&gt;5. 查看其他 GenAI 工作示例&lt;/h2&gt;
&lt;p&gt;一旦你熟悉了 GenAI 工具并了解如何编写出色的提示，&lt;a href=&#34;https://github.com/openai/openai-cookbook/tree/main/examples&#34; title=&#34;请查看 OpenAI 发布的一些示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请查看 OpenAI 发布的一些示例&lt;/a&gt;，了解其他人正在做什么以及可能的其他可能性。随着你的实验，你将更加熟悉聊天界面，并学会如何对其进行微调，以便熟练地缩小响应范围，甚至将响应转换为 CSV 文件或其他类型的表格。&lt;/p&gt;
&lt;p&gt;考虑如何将你的 GenAI 知识应用于你的业务，以简化困难或重复性任务，生成创意并使信息易于让更广泛的受众访问。你可以想象出哪些新的用例？以前不可能的东西现在成为可能了吗？&lt;/p&gt;
&lt;h2 id=&#34;6-集成第三方-genai-工具和-api&#34;&gt;6. 集成第三方 GenAI 工具和 API&lt;/h2&gt;
&lt;p&gt;考虑使用 ChatGPT、Bard 和 Claude 2 等 API 通过 API 使用 LLMs 的角色。这些工具都提供了强大的 API，并有支持文档，因此入门门槛很低。大多数这些 API 是基于使用量的，因此更容易玩弄。&lt;/p&gt;
&lt;p&gt;通常情况下，通过语义搜索和由向量数据库支持的嵌入来将自定义或私有数据集成到 LLM 提示中，你还可以集成自定义或私有数据。通常称为 RAG（检索增强生成）。&lt;/p&gt;
&lt;p&gt;分解这两个术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语义搜索&lt;/strong&gt;：使用词嵌入比较查询的含义与其索引中文档的含义，即使没有完全匹配的单词也能获得更相关的结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;嵌入&lt;/strong&gt;：将对象（如单词、句子或整个文档）的数值表示转化为多维空间。这使得评估不同实体之间的关系成为可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是这可能看起来的一个示例：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/7-best-practices-for-developers-getting-started-with-genai/f2_hu7405699fb1f5ef241729ad19d0f40079_80167_1422x1138_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/7-best-practices-for-developers-getting-started-with-genai/f2.png&#34; data-img=&#34;/trans/7-best-practices-for-developers-getting-started-with-genai/f2.png&#34; data-width=&#34;1422&#34; data-height=&#34;1138&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;这幅图展示了“猫”和“狗”的概念比它们与“人”或“蜘蛛”的概念更接近，“车辆汽车”则是最远的，是概念中最不相关的。（&lt;a href=&#34;https://www.confluent.io/blog/chatgpt-and-streaming-data-for-real-time-generative-ai/#connecting-knowledge-base-to-gpt&#34; title=&#34;这里有更多关于如何使用语义搜索和嵌入的信息&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里有更多关于如何使用语义搜索和嵌入的信息&lt;/a&gt;。）&lt;/p&gt;
&lt;h2 id=&#34;7-从头开始训练自己的模型&#34;&gt;7. 从头开始训练自己的模型&lt;/h2&gt;
&lt;p&gt;这最后的建议实际上不太像建议，更像是一个“可选的下一步”。训练自己的 GenAI 模型并不适合每个人，但如果你：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有独特而有价值的知识库。&lt;/li&gt;
&lt;li&gt;想要执行商业 LLM 无法完成的某些任务。&lt;/li&gt;
&lt;li&gt;发现商业 LLM 的推理成本在商业上没有意义。&lt;/li&gt;
&lt;li&gt;有特定的安全要求，需要托管自己的 LLM 数据，并且不愿通过第三方 API 传递数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;训练自己的模型的一种方法是使用开源模型，例如 Llama 2、Mosaic MPT-7B、Falcon 或 Vicuna，其中许多还提供了商业使用许可证。这些通常根据它们具有的参数数量进行标记：7B、13B、40B 等。 “B”代表模型的参数数目，以及它可以处理和存储的信息量。数字越高，模型就越复杂和复杂，但训练和运行成本也越高。如果你的用例不复杂，并且如果你计划在性能相当强大的现代笔记本电脑上运行模型，那么具有较低参数的模型是开始的最佳且最经济的方法。&lt;/p&gt;
&lt;p&gt;中大型组织可能会选择从头开始构建和训练一个 LLM 模型。这是一条非常昂贵、资源密集且耗时的 AI 之路。你需要难以招聘的技术人才，并具备长时间迭代的机会，因此对大多数组织来说，这条路线不现实。&lt;/p&gt;
&lt;h3 id=&#34;微调-llm&#34;&gt;微调 LLM&lt;/h3&gt;
&lt;p&gt;一些组织选择中间路径：微调基本开源 LLM 以实现模型预训练能力之外的特定功能。如果你希望以你品牌独特的声音创建虚拟助手或基于真实客户购买构建的推荐系统，那么这是一个很好的选择。这些模型会随着你纳入排名靠前的用户交互而不断地训练自己。事实上，&lt;a href=&#34;https://voicebot.ai/2023/08/23/openai-brings-fine-tuning-to-gpt-3-5-turbo-and-gpt-4/&#34; title=&#34;Open AI 报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open AI 报告&lt;/a&gt;，使用此模型，可以将提示长度缩短多达 90%，同时保持性能不变。此外，Open AI 的商业 API 的最新增强功能使其与驱动 ChatGPT 和 Bing AI 的模型一样强大和易于访问。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes 在裸机上比虚拟机表现更好吗：Kubernetes 性能对比实验</title>
      <link>https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/</link>
      <pubDate>Mon, 18 Dec 2023 14:30:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/</guid>
      <description>
        
        
        &lt;p&gt;许多人认为部署在裸机上的 Kubernetes 集群比部署在虚拟机上的性能更好，但直到现在都没有关于这一假设的证据。在 Gcore，我们只提供基于充分证据的信息给客户，因此我们决定自行测试 Kubernetes 是否在&lt;a href=&#34;https://thenewstack.io/bare-metal-in-a-cloud-native-world/&#34; title=&#34;裸机上&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;裸机上&lt;/a&gt;比在虚拟机上表现更好，如果是的话，差距有多大。我将分享我们内部测试的结果。&lt;/p&gt;
&lt;p&gt;我故意不讨论虚拟节点与裸机节点竞争的其他方面，如&lt;a href=&#34;https://gcore.com/blog/kubernetes-on-bare-metal/&#34; title=&#34;成本效益或基础设施控制级别&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;成本效益或基础设施控制级别&lt;/a&gt;。这超出了本文的范围，本文只关注性能比较。&lt;/p&gt;
&lt;h2 id=&#34;vm-和裸机-kubernetes-之间的区别&#34;&gt;VM 和裸机 Kubernetes 之间的区别&lt;/h2&gt;
&lt;p&gt;当您在虚拟机上部署 Kubernetes 集群时，与裸机（BM）相比，您会得到额外的基础设施层，即虚拟机监视器和客户操作系统。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/39ff19bc-image1a-e1700581613781_hu27ac17046494e97f5da336cf7b6b4aec_150631_1920x836_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/39ff19bc-image1a-e1700581613781.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/39ff19bc-image1a-e1700581613781.png&#34; data-width=&#34;1920&#34; data-height=&#34;836&#34; alt=&#34;image&#34; data-caption=&#34;显示裸机和虚拟机架构差异的图表&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;显示裸机和虚拟机架构差异的图表&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 1：裸机和虚拟机架构的差异。&lt;/p&gt;
&lt;p&gt;这些层占用物理 CPU 和 RAM 来运行，从工作负载中拿走一些计算能力。虚拟化还会影响网络和存储性能：虚拟网络和存储比物理网络和存储慢。&lt;/p&gt;
&lt;p&gt;相比之下，当您在&lt;a href=&#34;https://thenewstack.io/provision-bare-metal-kubernetes-with-the-cluster-api/&#34; title=&#34;裸机服务器上部署 Kubernetes 集群&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;裸机服务器上部署 Kubernetes 集群&lt;/a&gt;时，您没有任何额外的基础设施层和虚拟化。服务器的物理资源完全专用于您的工作负载，容器化应用程序可以直接访问这些资源。&lt;/p&gt;
&lt;h2 id=&#34;我们如何比较虚拟机和裸机-k8s-性能&#34;&gt;我们如何比较虚拟机和裸机 K8s 性能&lt;/h2&gt;
&lt;p&gt;为了全面了解虚拟机和裸机集群性能的比较，我们测量了以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU：&lt;/strong&gt; 速度和利用率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAM：&lt;/strong&gt; 延迟&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储：&lt;/strong&gt; 每秒事务（TPS）和延迟&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络：&lt;/strong&gt; 带宽和延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了保持工作负载的一致性，所有测试应用程序都以容器化方式部署在比较的工作节点上。&lt;/p&gt;
&lt;h3 id=&#34;我们的测试条件&#34;&gt;我们的测试条件&lt;/h3&gt;
&lt;p&gt;在测试中，我们使用了运行在&lt;a href=&#34;https://gcore.com/cloud/managed-kubernetes&#34; title=&#34;Gcore 托管的 Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gcore 托管的 Kubernetes&lt;/a&gt;上的 K8s 集群。然而，由于托管的 Kubernetes 不会增加工作节点性能的任何开销，因此这些结果也与标准 Kubernetes 相关。&lt;/p&gt;
&lt;p&gt;为了保持工作负载的相同条件，我们选择了相似的虚拟机和裸机工作节点的配置。以下是这种比较配置的示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;裸机工作节点：&lt;/strong&gt; 1x Intel Xeon E-2388 8C/16T 3.2 GHz / 64 GB / Ubuntu 22.04&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟机工作节点：&lt;/strong&gt; 16 vCPU / 64 GiB 内存 / Ubuntu 22.04&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试结果摘要&#34;&gt;测试结果摘要&lt;/h2&gt;
&lt;p&gt;在测试中，我们比较了两个 Kubernetes 集群，一个部署在虚拟机（VMs）上，另一个部署在裸机上。它们的配置相似。作为测试工作负载，我们运行了以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于 CPU 测试的 CPU 基准测试&lt;/li&gt;
&lt;li&gt;用于 RAM 测试的 Sysbench&lt;/li&gt;
&lt;li&gt;用于存储测试的 Pgbench&lt;/li&gt;
&lt;li&gt;用于网络测试的 Netperf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是总结最重要的测试结果的表格：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/417a03ef-summary1_hu068d1b36957dce082fad71aedf8b692d_70229_1800x698_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/417a03ef-summary1.jpg&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/417a03ef-summary1.jpg&#34; data-width=&#34;1800&#34; data-height=&#34;698&#34; alt=&#34;image&#34; data-caption=&#34;测试结果表格&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;测试结果表格&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;显然，裸机集群在所有情况下效率更高。&lt;/p&gt;
&lt;p&gt;让我们详细查看结果，并确定裸机性能对您的工作负载意味着什么。&lt;/p&gt;
&lt;h2 id=&#34;详细测试结果&#34;&gt;详细测试结果&lt;/h2&gt;
&lt;p&gt;现在，让我们详细查看每个评估标准下裸机和 VM 集群的性能。&lt;/p&gt;
&lt;h2 id=&#34;cpu-速度和利用率&#34;&gt;CPU 速度和利用率&lt;/h2&gt;
&lt;p&gt;对于 CPU 速度比较，我们使用了 Alex Dedyura 的 &lt;a href=&#34;https://github.com/alexdedyura/cpu-benchmark&#34; title=&#34;CPU 基准测试&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CPU 基准测试&lt;/a&gt;。这是一个计算到 10,000 位小数的 pi 的脚本。以秒为单位的计算时间，平均值在 10 次测试中被视为测试结果。计算 pi 是一个 CPU 密集型任务，因此该基准测试清晰地显示了被测试 CPU 的性能。&lt;/p&gt;
&lt;p&gt;以下是 CPU 速度比较的结果：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/f35507b7-image3a_hu8acf870943b3ee86bfc2079c92800984_20901_1999x878_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/f35507b7-image3a.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/f35507b7-image3a.png&#34; data-width=&#34;1999&#34; data-height=&#34;878&#34; alt=&#34;image&#34; data-caption=&#34;图表显示，裸机集群的 CPU 速度比虚拟机集群的 CPU 快了两倍多&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图表显示，裸机集群的 CPU 速度比虚拟机集群的 CPU 快了两倍多&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 3：裸机集群的 CPU 速度比虚拟机集群的 CPU 快了两倍多。&lt;/p&gt;
&lt;p&gt;虚拟机集群的 10 次重试的平均时间为 47.07 秒；而裸机集群为 21.46 秒。因此，裸机集群快了两倍多。&lt;/p&gt;
&lt;p&gt;以下是虚拟机集群的 CPU 利用率测试结果：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/12670f56-image4a_huc2a2bed3317dd210c5fad67a650fe171_51217_1999x426_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/12670f56-image4a.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/12670f56-image4a.png&#34; data-width=&#34;1999&#34; data-height=&#34;426&#34; alt=&#34;image&#34; data-caption=&#34;平均利用率为 86.81%&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;平均利用率为 86.81%&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 4：虚拟机集群的 CPU 平均利用率为 86.81%。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/ef618156-image5a_hu5a9ab61ed358d8066a27bf4dbfff558b_20194_1999x219_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/ef618156-image5a.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/ef618156-image5a.png&#34; data-width=&#34;1999&#34; data-height=&#34;219&#34; alt=&#34;image&#34; data-caption=&#34;图 5：虚拟机集群 CPU 的每个核心使用信息&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 5：虚拟机集群 CPU 的每个核心使用信息&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 5：虚拟机集群 CPU 的每个核心使用信息。&lt;/p&gt;
&lt;p&gt;在上图 4 中，红色点表示最大的 CPU 核心负载*，绿色表示所有核心的总 CPU 负载。在执行脚本期间，大部分时间内核心都以 100% 的利用率运行；平均值为 86.81%。还有一个小的窃取时间峰值，大约在 15:16（参见图 4），这是一个常见情况，当一个虚拟机由于等待物理 CPU 共享计算资源而没有运行时会发生。&lt;/p&gt;
&lt;p&gt;*&lt;strong&gt;最大 CPU 核心负载：&lt;/strong&gt; 这个指标通常是指在虚拟机内或主机上所有虚拟机中观察到的单个 CPU 核心的最高利用率百分比。它表示在给定时刻一个特定的 CPU 核心有多重地被利用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总 CPU 核心负载：&lt;/strong&gt; 此指标表示主机机器上所有可用 CPU 核心的整体 CPU 利用率。它考虑了所有 CPU 核心的综合使用情况，提供了运行在主机上的所有虚拟机使用了多少 CPU 容量的综合视图。&lt;/p&gt;
&lt;p&gt;以下是裸机集群的 CPU 利用率测试结果：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/d79f8453-image6a_hu9ddbefe05fdb1ac82de520b0f02b4e31_60116_1999x420_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/d79f8453-image6a.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/d79f8453-image6a.png&#34; data-width=&#34;1999&#34; data-height=&#34;420&#34; alt=&#34;image&#34; data-caption=&#34;图表显示，裸机集群的 CPU 平均利用率为 43.75%&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图表显示，裸机集群的 CPU 平均利用率为 43.75%&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 6：裸机集群的 CPU 平均利用率为 43.75%。&lt;/p&gt;
&lt;p&gt;平均 CPU 负载约为 43.75%，最大负载为 62.57%，没有窃取时间。因此，就 CPU 性能而言，测试显示裸机集群约为虚拟机集群的两倍有效。&lt;/p&gt;
&lt;h2 id=&#34;ram-延迟&#34;&gt;RAM 延迟&lt;/h2&gt;
&lt;p&gt;对于 RAM 测试，&lt;a href=&#34;https://github.com/akopytov/sysbench&#34; title=&#34;我们使用了 sysbench&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我们使用了 sysbench&lt;/a&gt; 并通过 RAM 传输了 6400 GB 的数据。以下是执行的写入和读取操作的关键结果：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/684e605e-7a_hu5c5182f7b5a8160d8fffd31c89448f18_26318_1999x935_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/684e605e-7a.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/684e605e-7a.png&#34; data-width=&#34;1999&#34; data-height=&#34;935&#34; alt=&#34;image&#34; data-caption=&#34;图 7：裸机集群的 RAM 大约比虚拟机集群的 RAM 快三倍&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 7：裸机集群的 RAM 大约比虚拟机集群的 RAM 快三倍&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 7：裸机集群的 RAM 大约比虚拟机集群的 RAM 快三倍。&lt;/p&gt;
&lt;p&gt;虚拟机集群执行写入操作的平均时间为 174.53 毫秒，而裸机集群相同操作仅需 62.02 毫秒。读取操作分别在 173.75 和 47.33 毫秒内完成。&lt;/p&gt;
&lt;p&gt;这意味着裸机集群的 RAM 大约比虚拟机集群的 RAM 快三倍。&lt;/p&gt;
&lt;h2 id=&#34;存储-tps-和延迟&#34;&gt;存储 TPS 和延迟&lt;/h2&gt;
&lt;p&gt;为了测试存储性能，我们运行了一个 PostgreSQL 集群，并使用了 &lt;a href=&#34;https://www.postgresql.org/docs/current/pgbench.html&#34; title=&#34;pgbench 基准测试&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pgbench 基准测试&lt;/a&gt;。我们测量了 TPS（每秒事务数）和延迟。我们还变化了工作负载，测试了相同集群配置下的 8 GB 和 75 GB 数据库。&lt;/p&gt;
&lt;p&gt;以下是这些实例的配置：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/87869729-image8a_huffbbd08389e2f14687d50805f04a0fdc_38292_1999x551_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/87869729-image8a.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/87869729-image8a.png&#34; data-width=&#34;1999&#34; data-height=&#34;551&#34; alt=&#34;image&#34; data-caption=&#34;图 8：存储测试的裸机和虚拟机集群配置&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 8：存储测试的裸机和虚拟机集群配置&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 8：存储测试的裸机和虚拟机集群配置。&lt;/p&gt;
&lt;h3 id=&#34;存储-tps-结果&#34;&gt;存储 TPS 结果&lt;/h3&gt;
&lt;p&gt;以下是 TPS 比较的平均结果：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/7bda97df-image9a_hu0ee6bfdb91c77088450cbbe04207741c_24629_1999x935_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/7bda97df-image9a.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/7bda97df-image9a.png&#34; data-width=&#34;1999&#34; data-height=&#34;935&#34; alt=&#34;image&#34; data-caption=&#34;图 9：裸机集群的存储 TPS 值大约是虚拟机集群的两倍&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 9：裸机集群的存储 TPS 值大约是虚拟机集群的两倍&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 9：裸机集群的存储 TPS 值大约是虚拟机集群的两倍。&lt;/p&gt;
&lt;p&gt;在运行 8 GB 数据库时，虚拟机集群显示了 7,359 TPS，而裸机集群为 14,087 TPS。75 GB 数据库的性能结果分别为 4,636 和 12,029 TPS。&lt;/p&gt;
&lt;h3 id=&#34;存储延迟结果&#34;&gt;存储延迟结果&lt;/h3&gt;
&lt;p&gt;以下是延迟测试的平均结果：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/311dd007-image10_hud023dac9efbc60874abb889bd08f12c3_24857_1999x935_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/311dd007-image10.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/311dd007-image10.png&#34; data-width=&#34;1999&#34; data-height=&#34;935&#34; alt=&#34;image&#34; data-caption=&#34;图表显示，8 GB 测试中裸机集群的存储延迟约为虚拟机集群的一半，在 75 GB 测试中几乎是其三倍&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图表显示，8 GB 测试中裸机集群的存储延迟约为虚拟机集群的一半，在 75 GB 测试中几乎是其三倍&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 10：裸机在存储延迟方面优于虚拟机。&lt;/p&gt;
&lt;p&gt;在运行 8 GB 数据库时，虚拟机集群的延迟为 34.78 毫秒，而裸机集群的延迟为 18.17 毫秒。对于 75 GB 数据库，延迟分别为 55.21 毫秒和 21.28 毫秒。&lt;/p&gt;
&lt;p&gt;对于 8 GB 数据库，裸机集群的存储性能约为虚拟机集群的两倍。对于 75 GB 数据库，裸机集群相对于虚拟机集群的优势更加明显。&lt;/p&gt;
&lt;h2 id=&#34;网络带宽和延迟&#34;&gt;网络带宽和延迟&lt;/h2&gt;
&lt;p&gt;为了测试网络性能，我们使用了 &lt;a href=&#34;https://github.com/kubernetes/perf-tests/tree/master/network/benchmarks/netperf&#34; title=&#34;netperf 基准测试&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;netperf 基准测试&lt;/a&gt;，其中 MSS（最大段大小）从 1 到 65,536 不等。MSS 中的“段”元素是在网络上传输的一种 IP 数据包捆绑。因此，MSS 越大，传输的流量就越多。&lt;/p&gt;
&lt;p&gt;我们在两个物理节点上部署了三个工作节点：Worker 1 和 Worker 2 位于第一个节点上，而 Worker 3 位于第二个节点上。然后，我们测试了所有三个工作节点之间的网络性能。在所有情况下，结果趋势都相似 — 裸机优于虚拟机。&lt;/p&gt;
&lt;p&gt;最有趣的测试是物理距离最远的测试之一，即 Worker 1/Worker 2（位于第一个节点上）与 Worker 3（位于第二个节点上）之间的距离，当流量在第一个和第二个物理节点之间传输时。我们可以将这看作是所有测试中最具挑战性的条件。图 10 和图 11 显示了此测试的结果。图 10 显示了 MSS 值为 1、2、4 和 8 时的网络带宽比较：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/4d53bfd2-image11_hu6d156c35875b2a62cf2aa654edd2f92d_23424_1999x912_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/4d53bfd2-image11.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/4d53bfd2-image11.png&#34; data-width=&#34;1999&#34; data-height=&#34;912&#34; alt=&#34;image&#34; data-caption=&#34;图 11：裸机集群的网络带宽比虚拟机集群的网络带宽大五倍&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 11：裸机集群的网络带宽比虚拟机集群的网络带宽大五倍&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 11：裸机集群的网络带宽比虚拟机集群的网络带宽大五倍。&lt;/p&gt;
&lt;p&gt;虚拟机集群的带宽范围从 MSS=1 时的 862 KB/秒到 MSS=8 时的 6.52 MB/秒，而裸机集群的带宽在相同的 MSS 值范围内从 4.17 MB/秒到 31 MB/秒不等。平均而言，裸机集群的带宽比虚拟机集群的带宽大五倍。&lt;/p&gt;
&lt;p&gt;图 12 显示了使用相同 MSS 值的网络延迟比较：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/5f29719e-image12_hu269aa8260c5cb7ccc76de9f0945579fd_24084_1999x912_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/5f29719e-image12.png&#34; data-img=&#34;/trans/does-kubernetes-really-perform-better-on-bare-metal-vs-vms/5f29719e-image12.png&#34; data-width=&#34;1999&#34; data-height=&#34;912&#34; alt=&#34;image&#34; data-caption=&#34;图 12：裸机集群的网络延迟比虚拟机集群的网络延迟低了多达六倍&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 12：裸机集群的网络延迟比虚拟机集群的网络延迟低了多达六倍&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图 12：裸机集群的网络延迟比虚拟机集群的网络延迟低了多达六倍。&lt;/p&gt;
&lt;p&gt;正如我们所见，当使用 MSS=8 时，虚拟机集群的延迟约为 145 微秒（us），而裸机的延迟为 24.5 微秒。此外，在裸机集群的情况下，随着 MSS 的增加，延迟增长较慢。&lt;/p&gt;
&lt;p&gt;对于所有测试，请注意我们报告的是&lt;em&gt;内部&lt;/em&gt;集群网络的网络性能比较。我们在一个网络中的节点之间测量了带宽和延迟，位于一个位置。如果我们使用不同位置的节点，这将增加互联网延迟，这是不稳定的，并且可能因提供商而异。我们保持了合成纯净的条件；这可能无法在实际环境中复制。但是，一般趋势可以预期会被重现。&lt;/p&gt;
&lt;h2 id=&#34;裸机性能优势意味着什么&#34;&gt;裸机性能优势意味着什么&lt;/h2&gt;
&lt;p&gt;更好的裸机性能相对于虚拟机提供了两个简单但关键的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thenewstack.io/how-do-applications-run-on-kubernetes/&#34; title=&#34;部署在裸机工作节点上的应用程序&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;部署在裸机工作节点上的应用程序&lt;/a&gt;运行和响应速度比部署在虚拟机上的应用程序更快。&lt;/li&gt;
&lt;li&gt;因此，当选择裸机时，客户在使用您的产品时将有更好的体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的测试结果证实了一个普遍的期望，即裸机对于需要高性能和低延迟的计算密集型工作负载（例如数据库、AI/ML 模型和其他类型的实时应用程序）更为适用。虚拟机则更适合不需要高计算和低延迟敏感性的工作负载，如 Web 服务器、网站和开发环境。如果高性能和低延迟对于您的用户至关重要，并直接影响您的业务，您应该考虑在 Kubernetes 集群中使用裸机。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;我们的测试证实了裸机工作节点优于虚拟机工作节点的假设。即裸机比起虚拟机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 CPU 速度和利用率方面高三倍&lt;/li&gt;
&lt;li&gt;RAM 延迟是虚拟机的 1/3&lt;/li&gt;
&lt;li&gt;存储性能高两倍多&lt;/li&gt;
&lt;li&gt;网络延迟是虚拟机的 1/5&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>HashiCorp 创始人 Mitchell Hashimoto 宣布离职</title>
      <link>https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/</link>
      <pubDate>Fri, 15 Dec 2023 08:13:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/</guid>
      <description>
        
        
        &lt;p&gt;云原生社区报道：Mitchell Hashimoto 的离职意味着 HashiCorp 这一领先的云原生工具和解决方案提供商将迎来新的篇章。他在离开之际分享了对过去的回顾和对未来的展望。HashiCorp 社区和生态系统将继续发展壮大，我们期待看到他们在云原生领域取得更多的成功。&lt;/p&gt;
&lt;p&gt;下文是 Mitchell Hashimoto 在 Hashicorp 官网上发布的&lt;a href=&#34;https://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp&#34; title=&#34;离职感言&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;离职感言&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;在经过超过 11 年的时光后，HashiCorp 共同创始人 Mitchell Hashimoto 写下了一封深情的告别信，向他所帮助创立的公司告别。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2023 年 12 月 14 日，作者：&lt;a href=&#34;https://www.hashicorp.com/blog/authors/mitchell-hashimoto&#34; title=&#34;Mitchell Hashimoto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mitchell Hashimoto&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本周早些时候，我向 HashiCorp 的员工发送了这封信，并在这里发布，以让整个 HashiCorp 社区了解我的计划：&lt;/p&gt;
&lt;p&gt;今天，我有一些双重情感要与大家分享：我决定离开 HashiCorp，不久后将不再是该公司的员工。我刚刚庆祝了自从开始 HashiCorp 以来的 11 年，回顾过去的十年，我认为自己无法找到更好的方式来度过我生命的这一部分。&lt;/p&gt;
&lt;p&gt;我离开 HashiCorp 是我长时间以来一直在思考和策划的事情。自从创立 HashiCorp 以来，我一直觉得有必要建立一个公司，我不必参与日常运营，其他领导者可以随着时间推移继续前进。随着时间的推移，我对此非常有意识：2016 年辞去首席执行官职务，随着时间的推移，不断改进领导层自治文化，不需要我的参与来做出决策，最终在 2021 年&lt;a href=&#34;https://www.hashicorp.com/blog/mitchell-s-new-role-at-hashicorp&#34; title=&#34;离开了领导团队和董事会&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;离开了领导团队和董事会&lt;/a&gt;。从那时起，我有幸全职从事我最喜欢的工作——作为一名全职的、亲自动手的工程师。&lt;/p&gt;
&lt;p&gt;作为一名工程师，我的激情不仅限于基础架构，我一直知道，某个时候——当公司和我准备好的时候——我会继续前进，承担新的、不同的挑战。我的家庭最近迎来了我们的第一个孩子，休息期间，我觉得现在是完成这个过渡的合适时机。云自动化和基础架构工具领域仍然充满了机遇和增长，但在专门从事这个领域的工具近 15 年后，我已经准备尝试新的领域。&lt;/p&gt;
&lt;p&gt;尽管我离开 HashiCorp 正是我计划的，但这仍然是一个令人难以忘怀的时刻。几乎我整个成年生活都与这家公司有关。我最具有决定性的记忆中有许多不容忽视的瞬间。在这里无法一一列举，但我想突出几个。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/f1_hu8ebb2ed7b6829dbb9d23c3fb1a415625_225225_1200x638_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/f1.jpg&#34; data-img=&#34;/trans/mitchell-reflects-as-he-departs-hashicorp/f1.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;638&#34; alt=&#34;image&#34; data-caption=&#34;Mitchell 和 Armon，2013 年&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Mitchell 和 Armon，2013 年&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;早在我们创办 HashiCorp 之前，我和 Armon [Dadgar，HashiCorp 共同创始人兼首席技术官] 经常讨论云、自动化和分布式系统。那时我们还是青少年，我们曾玩笑地——并非认真——说过类似的话：“如果有一天最大的公司使用我们的软件会怎么样？”然而，有一天，我们迈出了第一步，将一些想法变成了实际的代码。接下来，我们意识到我们拥有了成千上万的用户。然后，我们又迈出了一步，创办了一家公司。再过一段时间，我们又迈出了下一步，决定筹集资金。这就是 HashiCorp 今天的样子：我们像这样迈出了许多小小的步骤，直到我们发现那种玩味十足的、青少年的理想主义已经成为现实。&lt;/p&gt;
&lt;p&gt;正式开始后，我觉得一些“第一次”尤为重要。&lt;a href=&#34;https://www.hashicorp.com/blog/hashiconf-2015-wrap-up&#34; title=&#34;2015 年的第一届 HashiConf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015 年的第一届 HashiConf&lt;/a&gt; 将永远是一个特殊的回忆。这是数字世界真正跨足物理世界的第一次，很难相信其中的任何一部分是真实的。我知道我们的下载量很高，我知道我每天都与社区成员在线互动，但看到数百人愿意亲自出席却是一种完全不同的体验。我感到非常自豪，但那也是我第一次感到责任的沉重。我感到内心挣扎，一方面想要建设，但另一方面需要引导我和 Armon 创建的这家公司。我非常感谢那些早期采用者和员工们参加了这次活动。&lt;/p&gt;
&lt;p&gt;几年后，我们的第一次全公司内部外出活动是我下一个重大的“哇”的经历。出席的人数比第一届 HashiConf 还要多！我和 Armon 一起创办了这家公司，专注于我对技术的激情，但像这样的时刻教会了我人员也同样重要。人和我们共享的经历是我现在最怀念的东西。&lt;/p&gt;
&lt;p&gt;在我与 HashiCorp 的历史中，还有许多类似的影响深远的时刻，我为其中每一个经验（甚至是艰难的经验）都感到感激，因为它是实现每个个体里程碑的必要步骤之一。&lt;/p&gt;
&lt;p&gt;我与 Armon 已经一起工作了将近 15 年（甚至在 HashiCorp 之前就开始了！），与 Dave [McJannet，HashiCorp CEO] 已经合作了 7 年多。我们一起领导了公司，直到我在 2021 年退出了领导团队。除了是同事，我们已经成为亲密的朋友。我继续信任他们的领导才能，将非常怀念与他们一起工作的时光。&lt;/p&gt;
&lt;p&gt;我们创办这家公司的多云等有争议的世界观现在已经成为主流，&lt;a href=&#34;https://www.hashicorp.com/state-of-the-cloud/2021&#34; title=&#34;得到广泛接受&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;得到广泛接受&lt;/a&gt;。我帮助创办的软件被从业者广泛使用，从世界上最大的公司的业余爱好者到专业人士。最近，&lt;a href=&#34;https://solutionshub.epam.com/blog/post/programming-language-popularity-on-github&#34; title=&#34;GitHub Octoverse 报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Octoverse 报告&lt;/a&gt; 发现 HashiCorp 配置语言（HCL）再次成为开源项目中使用最多的语言之一。这些只是一些例子，显示了 HashiCorp 在行业中持续产生的影响、增长和光明未来。这已经超出了我所能期望的，我离开时为自己在实现这一切中扮演的小角色感到自豪。&lt;/p&gt;
&lt;p&gt;正如我之前所说，几乎我整个成年生活都与 HashiCorp 有关。这家公司不仅对我的生活产生了巨大的影响，也对许多人的生活产生了巨大的影响，包括我们充满激情的社区、珍贵的客户、众多亲密的生态伙伴和我们了不起的员工。感谢大家的支持和信任。最后，我衷心祝愿整个公司一切顺利。我将为你们加油打气，感激我为塑造 HashiCorp 的旅程做出的贡献，期待看到你们接下来将要做的事情。&lt;/p&gt;
&lt;h2 id=&#34;评价&#34;&gt;评价&lt;/h2&gt;
&lt;p&gt;Mitchell Hashimoto 的离职标志着他个人职业生涯的新篇章，同时也对 HashiCorp 公司和云原生领域带来了重大影响。作为公司的共同创始人之一，他在 HashiCorp 中度过了 11 年，为公司成功发展做出了巨大贡献。离开公司，他追求新的挑战，反映了公司文化演进，强调了领导力的重要性。他的工作对云原生社区和生态系统产生了深远影响，HashiCorp 的工具广泛应用于云原生领域。他的离职不会改变 HashiCorp 在该领域的地位，同时为他提供了继续成长和探索新领域的机会，也让公司有机会吸引新领导者和推动创新。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>CNCF 将服务网格接口（SMI）项目归档</title>
      <link>https://jimmysong.io/trans/cncf-archives-the-service-mesh-interface-smi-project/</link>
      <pubDate>Tue, 12 Dec 2023 12:30:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/cncf-archives-the-service-mesh-interface-smi-project/</guid>
      <description>
        
        
        &lt;p&gt;本文译自 &lt;a href=&#34;https://www.cncf.io/blog/2023/10/03/cncf-archives-the-service-mesh-interface-smi-project/&#34; title=&#34;CNCF 官方博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 官方博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;CNCF（&lt;a href=&#34;https://github.com/cncf/toc&#34; title=&#34;&amp;lt;strong&amp;gt;技术监督委员会（TOC）&amp;lt;/strong&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;技术监督委员会（TOC）&lt;/strong&gt;&lt;/a&gt;）已经投票批准&lt;a href=&#34;https://github.com/cncf/toc/pull/1156&#34; title=&#34;&amp;lt;strong&amp;gt;归档&amp;lt;/strong&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;归档&lt;/strong&gt;&lt;/a&gt;服务网格接口（SMI）项目。&lt;/p&gt;
&lt;p&gt;SMI 被创建为在 Kubernetes 上为服务网格提供标准接口以及最常见的服务网格用例的基本功能集。它于 2020 年 3 月被接受为 CNCF 沙盒项目。&lt;/p&gt;
&lt;p&gt;SMI 是第五个被 CNCF 归档的项目。开源项目有一个生命周期，项目可能因各种原因而不活跃。还有一些情况下，项目可能不再希望得到 CNCF、维护者或 TOC 的支持。&lt;/p&gt;
&lt;p&gt;CNCF 的 CTO Chris Aniszczyk 表示：“在 CNCF 中，项目有一个生命周期，有时包括归档项目，特别是因为沙盒项目是用于实验的。这实际上是维护一个健康的开源生态系统的一部分。”他还说：“项目将自然地在生命周期中移动，并可能变得不太活跃，或者可能不再适合某个用例。就 SMI 而言，维护者已经决定将精力集中在 Kubernetes SIG Network 倡议下的 &lt;a href=&#34;https://kubernetes.io/blog/2023/08/29/gateway-api-v0-8/&#34; title=&#34;GAMMA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GAMMA&lt;/a&gt; 服务网格上。”&lt;/p&gt;
&lt;p&gt;在 2022 年 7 月，SMI 团队更新了项目博客站点：&lt;a href=&#34;https://smi-spec.io/blog/announcing-smi-gateway-api-gamma/&#34; title=&#34;宣布 SMI 参与 Gateway API GAMMA 倡议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布 SMI 参与 Gateway API GAMMA 倡议&lt;/a&gt;。在 SMI 旗下没有进一步的工作，SMI 维护者目前建议归档 SMI 项目，并鼓励人们参与 GAMMA 倡议。&lt;/p&gt;
&lt;p&gt;一旦项目被归档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CNCF 将不再为该项目提供支持&lt;/li&gt;
&lt;li&gt;它将在网上列为归档项目&lt;/li&gt;
&lt;li&gt;CNCF 可以提供服务，如文档更新，以帮助用户过渡。&lt;/li&gt;
&lt;li&gt;CNCF 将不再为该项目提供其他营销活动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNCF TOC 感谢 SMI 项目的维护者和贡献者在推动云原生服务网格技术和标准化方面发挥的重要作用。&lt;/p&gt;
&lt;p&gt;了解更多关于 &lt;a href=&#34;https://github.com/cncf/toc/blob/main/process/archiving.md&#34; title=&#34;CNCF 归档流程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 归档流程&lt;/a&gt; 的信息。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>JWT 在 API 网关中的角色：服务间认证的新视角</title>
      <link>https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/</link>
      <pubDate>Fri, 08 Dec 2023 12:30:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/</guid>
      <description>
        
        
        &lt;p&gt;云原生架构中的 API 网关组件至关重要，因为它将关键的 API 安全性和策略功能卸载到一个公共位置，使后端 API 和服务能够专注于业务逻辑。API 身份验证、授权、审计、限流等任务可能会非常复杂且难以正确实现，因此许多组织选择使用 API 网关来处理它们。&lt;/p&gt;
&lt;p&gt;那么对于服务与服务（S2S）或内部东/西流量呢？强制 S2S 流量“回头”通过 API 网关会引入额外的跳跃、更多的延迟、增加的流量以及效率降低。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/hairpin-api-gateway-calls_hu076a0e88fab01344babf409c0fe4fcf7_230463_1024x768_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/hairpin-api-gateway-calls.png&#34; data-img=&#34;/trans/jwts-authenticate-services-api-gateways/hairpin-api-gateway-calls.png&#34; data-width=&#34;1024&#34; data-height=&#34;768&#34; alt=&#34;image&#34; data-caption=&#34;通过 API 网关的 S2S 流量“回头”示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;通过 API 网关的 S2S 流量“回头”示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;但是，如果您跳过 API 网关直接调用服务，如何确保流量的安全性？接收服务如何进行身份验证并知道是谁在调用它？&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/service-a-b_hu3d2bab74c1d65451274219457e895af2_29459_1024x334_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/service-a-b.png&#34; data-img=&#34;/trans/jwts-authenticate-services-api-gateways/service-a-b.png&#34; data-width=&#34;1024&#34; data-height=&#34;334&#34; alt=&#34;image&#34; data-caption=&#34;显示 Service B 需要对 Service A 进行身份验证的示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;显示 Service B 需要对 Service A 进行身份验证的示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;保障 S2S 通信的两种常见方式是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用传输层安全性（TLS）和客户端证书（双向 TLS 或 mTLS）。&lt;/li&gt;
&lt;li&gt;使用签名的 JSON Web Tokens（JWT）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://www.solo.io/topics/service-mesh/&#34; title=&#34;服务网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格&lt;/a&gt;通过使用第一种方法自动化了许多最佳实践并减轻了与之相关的&lt;a href=&#34;https://istio.io/latest/blog/2023/secure-apps-with-istio/&#34; title=&#34;问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;开发人员可以选择使用 JWT 进行 S2S 身份验证，但这会“削弱”API 网关的预期功能。也就是说，您曾期望 API 网关处理的所有安全性复杂性和脆弱性必须在每个 S2S 通信的微服务中重新创建和复制。这是一个重大问题，因为使用 JWT 进行 S2S 身份验证会引入复杂性和对细节的严格要求。（有关此主题和下面的场景的更多信息，请观看 Hoot 第 59 集：“&lt;a href=&#34;https://youtu.be/Q2KfNUBfnjo&#34; title=&#34;JWT 与 Service-to-Service 身份验证的比较&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWT 与 Service-to-Service 身份验证的比较&lt;/a&gt;”。所有演示都可以在我们的&lt;a href=&#34;https://github.com/peterj/jwts-for-services/tree/main&#34; title=&#34;GitHub 仓库&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub 仓库&lt;/a&gt;中找到。）&lt;/p&gt;
&lt;p&gt;虽然有一些出色的处理 JWT 的框架和库，而 JWT 确实有其用武之地，但将 JWT 用于 S2S 流量的身份验证是复杂且繁重的，并且需要开发人员非常准确地完成工作。这种复杂性（或缺乏意识）可能会降低总体安全性，如果开发人员采取捷径或忽视关键属性，可能会降低总体安全性。开发人员还需要以特定于语言和框架的方式执行此操作（例如，使用 Java 解决此问题与使用 Go 或 Node.js 不同）。在所有代码库中维护、打补丁和审核每个实现都需要付出成本。&lt;/p&gt;
&lt;h2 id=&#34;如何使用-jwt-进行-s2s-通信身份验证&#34;&gt;如何使用 JWT 进行 S2S 通信身份验证&lt;/h2&gt;
&lt;p&gt;有两种方法可以创建 JWT 以进行 S2S 通信身份验证：使用身份提供者（IdP）（也称为安全令牌服务或 STS）或允许各个服务自行签署 JWT。（如果您对 JWT 概念不熟悉或需要复习，请查看 Auth0 提供的&lt;a href=&#34;https://auth0.com/docs/secure/tokens/json-web-tokens&#34; title=&#34;JWT 概述&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWT 概述&lt;/a&gt;。）&lt;/p&gt;
&lt;h3 id=&#34;选项-1使用-sts-发放令牌&#34;&gt;选项 1：使用 STS 发放令牌&lt;/h3&gt;
&lt;p&gt;第一种方法涉及使用安全令牌服务（STS），这是一个可信任的身份或令牌提供者，例如&lt;a href=&#34;https://www.keycloak.org/&#34; title=&#34;Keycloak&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keycloak&lt;/a&gt;、&lt;a href=&#34;https://www.okta.com/&#34; title=&#34;Okta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Okta&lt;/a&gt;或&lt;a href=&#34;https://auth0.com/&#34; title=&#34;Auth0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Auth0&lt;/a&gt;，用于发放代表特定服务的令牌。&lt;/p&gt;
&lt;p&gt;在此方法中，服务使用长期凭据（例如用户名和密码或 OAuth2.0 客户端凭据）与 STS 交换 JWT，表明“我是 Service A”。&lt;/p&gt;
&lt;p&gt;注意：长期凭据应安全存储并有限使用。例如，您可以在启动时使用它一次来引导身份，并且以后不再使用。此外，这些凭据应仅存储在内存中。&lt;/p&gt;
&lt;p&gt;STS 使用其私钥签署 JWT，可以使用其公钥验证 JWT。然后，Service A 将 JWT 附加到发送给 Service B 的请求中。从这里，Service B 可以通过使用 STS 的公钥验证 JWT 的签名来验证 JWT 是由 STS 签发的。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/authentication_huf5da9d57a58ed9361b30e110d446b107_61415_1024x634_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/authentication.png&#34; data-img=&#34;/trans/jwts-authenticate-services-api-gateways/authentication.png&#34; data-width=&#34;1024&#34; data-height=&#34;634&#34; alt=&#34;image&#34; data-caption=&#34;显示服务如何相互验证的示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;显示服务如何相互验证的示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;为了使此工作正常运行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;流量必须加密。&lt;/li&gt;
&lt;li&gt;服务 B 必须检查 JWT 的&lt;code&gt;aud&lt;/code&gt;声明、过期时间、颁发时间以及不早于时间。&lt;/li&gt;
&lt;li&gt;当 STS 签发的 JWT 签名密钥轮换时，服务 B 必须准备好更新 STS 的公钥。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;加密流量至关重要，因为在这种情况下使用 JWT 时，它们代表了一个“承载令牌”，因此拥有令牌的任何人都可以冒充 Service A。在 Service A 和 Service B 之间加密流量（例如使用单向服务器 TLS）有助于减轻这个问题。&lt;/p&gt;
&lt;p&gt;Service B 还必须检查 JWT 的过期时间（&lt;code&gt;exp&lt;/code&gt;）、颁发时间（&lt;code&gt;iat&lt;/code&gt;）、不早于时间（&lt;code&gt;nbf&lt;/code&gt;）以及特别是&lt;code&gt;aud&lt;/code&gt;声明，以验证令牌是否有效（未过期，位于其时间窗口内并用于 Service B 的使用）。JWT 使用这个约定来防范重放攻击，其中攻击者冒充 Service B，从 Service A 获取令牌，然后冒充 Service A 来调用 Service C。有效的 Service C 会检查&lt;code&gt;aud&lt;/code&gt;声明，看到代表 Service A 的 JWT 是为 Service B 而设计的，然后拒绝它。&lt;/p&gt;
&lt;p&gt;每次调用服务 A 都必须使用不同的 JWT，因为&lt;code&gt;aud&lt;/code&gt;声明会不同。尝试使用没有&lt;code&gt;aud&lt;/code&gt;声明的 JWT 或使用通配符&lt;code&gt;aud&lt;/code&gt;声明会增加 JWT 被破坏的风险。避免这样做。&lt;/p&gt;
&lt;p&gt;最后，常常被忽略的是轮换 STS 的公钥。在计划的密钥轮换或计划的撤销 STS 用于签署 JWT 的密钥时，Service B（或任何依赖 STS 进行验证的服务）必须能够处理更新的签名公钥。&lt;/p&gt;
&lt;h3 id=&#34;选项-2让服务自行签署其令牌&#34;&gt;选项 2：让服务自行签署其令牌&lt;/h3&gt;
&lt;p&gt;第二种方法使用服务特定的密钥来签署 JWT。可以使用对称密钥或非对称密钥。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/authentication-service-specific-keys_hub0329cc1d9cabe7247e286cbf825bb2a_71960_1024x698_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/authentication-service-specific-keys.png&#34; data-img=&#34;/trans/jwts-authenticate-services-api-gateways/authentication-service-specific-keys.png&#34; data-width=&#34;1024&#34; data-height=&#34;698&#34; alt=&#34;image&#34; data-caption=&#34;使用特定于服务的密钥进行 S2S 身份验证的示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;使用特定于服务的密钥进行 S2S 身份验证的示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在这种情况下，Service A 使用自己的密钥来签署发送给 Service B（或任何其他服务）的 JWT。Service B 将需要 Service A 的公钥（或对称密钥，由于密钥交换和冒充问题更加危险）来验证 Service A 发送的 JWT。实际上，Service B 将需要每个调用它的服务的公钥，这些服务使用 JWT 作为身份验证主体。&lt;/p&gt;
&lt;p&gt;与 STS 签发的 JWT 示例一样，服务之间的流量必须加密，Service B 还必须检查&lt;code&gt;aud&lt;/code&gt;声明，并且您需要一种签署公钥轮换的方法。您还必须为每个调用的服务使用不同的 JWT。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/different-jwt-dependent-services_hu983afb956ff943d4b93c91c8180e02df_241549_1024x854_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/jwts-authenticate-services-api-gateways/different-jwt-dependent-services.png&#34; data-img=&#34;/trans/jwts-authenticate-services-api-gateways/different-jwt-dependent-services.png&#34; data-width=&#34;1024&#34; data-height=&#34;854&#34; alt=&#34;image&#34; data-caption=&#34;服务 B 检查 aud 声明&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;服务 B 检查 aud 声明&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;开发人员必须采取措施并跟踪许多内容，以确保一切正确。证书还必须至少分发给一半的服务（接收端的服务）以提供至少单向 TLS。此外，整个过程的关键是密钥管理、轮换和安全保管密钥。&lt;/p&gt;
&lt;h2 id=&#34;jwt-可能出现问题的地方&#34;&gt;JWT 可能出现问题的地方&lt;/h2&gt;
&lt;p&gt;我们已经介绍了 JWT 可用于表示服务身份的一些方式，并提出了关注的领域。在服务架构中，有几个需要密切关注的领域，以避免安全漏洞。如果这些不是牢不可破的，您将为攻击者提供机会来破坏您的系统。&lt;/p&gt;
&lt;p&gt;在使用客户端证书/mTLS（例如服务网格）和 JWT 进行身份验证之间最重要的区别之一是：JWT 通过网络发送敏感的承载令牌材料，而 mTLS 不会。使用 mTLS 时，只会发送公钥，而不会发送私钥，会协商会话密钥。如果 JWT 泄露，JWT 是私密材料，可以被重放。对于证书，只有公共证书被共享。&lt;/p&gt;
&lt;p&gt;为防止重播承载令牌，您必须通过设置短暂的到期时间，理想情况下只有几分钟，来限制其暴露。这会增加服务刷新其 JWT 以进行请求的责任。设置数小时、数天或数月的到期时间发生得太频繁。这是一个严重的安全隐患。&lt;/p&gt;
&lt;p&gt;另一个重大的安全漏洞是，在使用 STS 获取 JWT 材料时，您会多次通过网络发送长期凭据（例如客户端凭证流程）。这些长期凭据非常敏感，应谨慎使用（例如，在启动时使用），而不应连续使用。&lt;/p&gt;
&lt;p&gt;此外，使用通配符&lt;code&gt;aud&lt;/code&gt;声明或完全省略&lt;code&gt;aud&lt;/code&gt;声明也是一个重大问题。未能在服务之间一致使用这些约定以进行身份验证会导致严重问题。确保为&lt;em&gt;每个&lt;/em&gt;调用的服务创建具有正确&lt;code&gt;aud&lt;/code&gt;声明的 JWT。&lt;/p&gt;
&lt;p&gt;最后，密钥轮换与短暂到期时间和 aud 声明检查同样重要。在发生违规事件时，使密钥无效是最后的努力，应尽快且高效地处理。&lt;/p&gt;
&lt;h2 id=&#34;jwt-的复杂性是服务网格简化事物的地方&#34;&gt;JWT 的复杂性是服务网格简化事物的地方&lt;/h2&gt;
&lt;p&gt;服务网格简化了服务之间的身份验证，并允许开发人员专注于业务逻辑，而不是正确地处理 JWT 和秘密材料（希望如此）。就像 API 网关应用于处理北/南和入口流量的安全性一样，服务网格应用于处理东/西和 S2S 流量的安全性。保持服务和 API 专注于它们可以提供的不同 iating 业务价值，而不是模板（但极其重要的）的安全性代码。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Envoy 创始人 Matt Klein 领衔 Bitdrift 创业，推出创新移动可观测性产品并获得 1500 万美元 A 轮融资</title>
      <link>https://jimmysong.io/trans/matt-created-bitdrift/</link>
      <pubDate>Tue, 05 Dec 2023 16:13:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/matt-created-bitdrift/</guid>
      <description>
        
        
        &lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/image-20231205162037349_hud982893848483148c960ef831e228f51_120494_1172x528_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/image-20231205162037349.png&#34; data-img=&#34;/trans/matt-created-bitdrift/image-20231205162037349.png&#34; data-width=&#34;1172&#34; data-height=&#34;528&#34; alt=&#34;image&#34; data-caption=&#34;Matt Klein 的推文宣布推出公司第一个产品及完成 A 轮融资&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Matt Klein 的推文宣布推出公司第一个产品及完成 A 轮融资&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;云原生社区报道：&lt;/p&gt;
&lt;p&gt;近期，Matt Klein——Envoy 代理的创造者——领导下的创业公司 Bitdrift 发布了他们的首款产品：Capture。这款专注于移动端可观测性的产品获得了 1500 万美元 A 轮融资，由 Amplify Partners 领投。这标志着 Bitdrift 在解决移动和服务器端可观测性问题方面迈出了重要的一步。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/team-photo_hud7574b6a0241c125d210ad3a0cc8db87_330924_1120x510_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/team-photo.jpg&#34; data-img=&#34;/trans/matt-created-bitdrift/team-photo.jpg&#34; data-width=&#34;1120&#34; data-height=&#34;510&#34; alt=&#34;image&#34; data-caption=&#34;Bitdrift 初创团队&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Bitdrift 初创团队&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Bitdrift 的创始缘起于团队在规模化构建互联网基础设施时的挑战和挫折。公司团队来自 Twitter、AWS、Square、Google、Microsoft、Netflix 等知名企业，他们认为当前的可观测性生态系统存在供应商和消费者之间的不匹配问题。Bitdrift 旨在通过实时动态控制，仅发出可能用于解决客户问题的遥测数据，以改变这一现状。&lt;/p&gt;
&lt;p&gt;目前，移动端可观测性被认为是浪费、无序且远落后于服务器端。大约 95% 用于监控系统健康的数据从未被阅读。与此同时，移动工程师在生产中拥有的分析事件集合通常是静态的，而且调整这些事件以调试正在进行的问题可能需要数周甚至数月的时间。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/workflows_hu52495ba55e0278c23d39f1af22423c8c_25896_800x660_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/workflows.png&#34; data-img=&#34;/trans/matt-created-bitdrift/workflows.png&#34; data-width=&#34;800&#34; data-height=&#34;660&#34; alt=&#34;image&#34; data-caption=&#34;Capture workflow&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Capture workflow&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Capture 通过在 iOS 和 Android 上实现发出会话遥测数据的动态实时控制，改变了可观测性游戏的规则。这个系统允许对设备进行即时定位，从所有客户端到特定群体，甚至个别设备。结合先进的本地存储和实时配置，Capture 支持分布式搜索和遥测数据，使得数据仅在解决客户问题时才被请求和发送。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/ring_buffer_hude5c2defbf9be80cc3abb1c120dc8afd_52694_604x558_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/ring_buffer.png&#34; data-img=&#34;/trans/matt-created-bitdrift/ring_buffer.png&#34; data-width=&#34;604&#34; data-height=&#34;558&#34; alt=&#34;image&#34; data-caption=&#34;Ring buffer&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ring buffer&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Capture 的本地存储解决方案核心是所谓的“环形缓冲区”，一种高性能的子系统，使用有界且实时可配置的 RAM 和磁盘空间。数据首先被刷新到 RAM，然后在后台级联到磁盘。Capture 还包括高效且注重隐私的会话回放实现，可以捕获移动屏幕状态的 2D 和 3D 表示。&lt;/p&gt;
&lt;p&gt;Capture 已在 Lyft 应用中部署到数百万设备上，并在大规模下经过战斗测试。它已准备好为全球的组织解决现实世界的挑战【18†source】。&lt;/p&gt;
&lt;p&gt;Bitdrift 的愿景是开创可观测性的未来。通过 Capture，Bitdrift 开始了一段旅程，将本地遥测存储与实时控制和分布式搜索相结合，这不仅适用于移动端，而且适用于整个分布式系统——从每个服务器到移动边缘。&lt;/p&gt;
&lt;p&gt;作为云原生社区，我们对 Matt Klein 和 Bitdrift 团队在改善可观测性生态系统方面的努力表示赞赏。他们的创新不仅对移动工程师，而且对整个分布式系统的健康和效率具有深远影响。欢迎来到可观测性的未来。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bitdrift.io/about&#34; title=&#34;Bitdrift 介绍&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bitdrift 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.bitdrift.io/post/honey-i-shrunk-the-telemetry&#34; title=&#34;Honey, I shrunk the telemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honey, I shrunk the telemetry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Cilium 的相互认证如何危及安全</title>
      <link>https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/</link>
      <pubDate>Fri, 01 Dec 2023 10:33:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/</guid>
      <description>
        
        
        &lt;p&gt;最近，Cilium 项目宣布支持一种&lt;a href=&#34;https://docs.cilium.io/en/latest/network/servicemesh/mutual-authentication/mutual-authentication/&#34; title=&#34;新的双向认证机制&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;新的双向认证机制&lt;/a&gt;，可以通过简单的配置标志透明地部署到应用程序中。从表面上看，这似乎是一种简单的方法，可以使用 Cilium 为 Kubernetes 工作负载实现服务之间的双向认证。然而，这种设计存在一个严重的缺陷，不容忽视：&lt;/p&gt;
&lt;p&gt;Cilium 中的双向认证的整个基础是&lt;em&gt;最终一致性&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;在安全实现的数据路径中，最终一致性可能导致意图中的安全属性失败，并且可能导致在不应该允许的情况下服务之间的流量继续传递。&lt;/p&gt;
&lt;h2 id=&#34;cilium-双向认证的工作原理&#34;&gt;Cilium 双向认证的工作原理&lt;/h2&gt;
&lt;p&gt;Cilium 的自定义双向认证机制会透明地对服务之间的流进行身份验证，并构建在 Cilium 的现有扩展伯克利数据包过滤器（&lt;a href=&#34;https://thenewstack.io/ebpf-offers-a-new-way-to-secure-cloud-native-systems/&#34; title=&#34;eBPF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt;）数据平面之上。Cilium 使用 eBPF 来实现诸如服务网络、网络策略和连接处理等功能。&lt;/p&gt;
&lt;p&gt;Cilium 使用“无双向传输层安全（mTLS-less）”（或 mTLess）来对服务进行身份验证。我称之为“less”，因为它没有使用 mTLS 来完成 mTLS 设计的任务：验证、加密和检查在两个对等方之间传输的数据的完整性。Cilium 的双向认证实现&lt;em&gt;不是 mTLS&lt;/em&gt;，我将在下面解释。&lt;/p&gt;
&lt;p&gt;当服务（或 Pod）A 想要与服务（或 Pod）B 通信时，Cilium 会尝试对这两个对等方进行身份验证，然后标记一个特殊的本地节点“身份验证缓存”，指示是否允许特定流。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f1_hu94feb57f32cb77e30649409eb45961de_33552_1500x579_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f1.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f1.png&#34; data-width=&#34;1500&#34; data-height=&#34;579&#34; alt=&#34;image&#34; data-caption=&#34;图 1：由于未经身份验证而丢弃的初始连接。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：由于未经身份验证而丢弃的初始连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当 Pod A 想要与 Pod B 通信时，它会通过正常的 Cilium eBPF 数据平面流动，但 eBPF 代码会检查该连接是否已通过检查本地节点身份验证缓存进行身份验证。在第一次尝试时，该调用将不会得到身份验证，因此&lt;a href=&#34;https://github.com/cilium/cilium/issues/23808&#34; title=&#34;Cilium 将丢弃数据包&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 将丢弃数据包&lt;/a&gt;。但这将触发一个在幕后进行的机制，尝试对 Pod A 和 Pod B 之间的流进行身份验证。如果成功，它将更新本地节点身份验证缓存。&lt;/p&gt;
&lt;p&gt;期望的是，在幕后的机制能够快速进行 Pod A 呼叫 Pod B 的身份验证，以便最初丢弃的数据包将被重试，不会导致太多延迟。在幕后使用的机制是从运行在 Pod B 所在节点上的 cilium-agent（使用&lt;a href=&#34;https://roadmap.sh/golang&#34; title=&#34;Go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt;编写）到另一个 cilium-agent 的“mTLess”连接。所有这些都不会在 eBPF 数据平面中发生，而是在用户空间的 Cilium 代理中进行。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f2_hu52d94383cf3b4e196078516d3500571d_43528_1500x750_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f2.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f2.png&#34; data-width=&#34;1500&#34; data-height=&#34;750&#34; alt=&#34;image&#34; data-caption=&#34;图 2：如果两个不同节点上运行的 cilium-agent 之间的 mTLS 连接成功，则认为流是经过身份验证的。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：如果两个不同节点上运行的 cilium-agent 之间的 mTLS 连接成功，则认为流是经过身份验证的。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我将这个连接称为“mTLess”，因为它用于测试身份验证并立即关闭，并且所有用于加密和完整性的协商的会话密钥都会被丢弃。也就是说，Cilium 不会在连接的整个生命周期内保留 mTLS 安全属性；它只使用握手的身份验证部分。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f3_hu3d2666b07117459a758a5a756c216963_57643_1500x561_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f3.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f3.png&#34; data-width=&#34;1500&#34; data-height=&#34;561&#34; alt=&#34;image&#34; data-caption=&#34;图 3：在握手后，Cilium 终止 mTLess 连接。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 3：在握手后，Cilium 终止 mTLess 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;如果此 mTLess 连接成功（即握手成功），Cilium 将考虑将来自 Pod A 到 Pod B 的流程视为“已验证”。此时，本地节点身份验证缓存中的条目将被更新，以指示应允许来自 Pod A 到 Pod B 的流程。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f4_huedce182ff0c7b31fd6e184ab21f6a5de_43071_1500x650_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f4.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f4.png&#34; data-width=&#34;1500&#34; data-height=&#34;650&#34; alt=&#34;image&#34; data-caption=&#34;图 4：Cilium 更新身份验证缓存，指示 Pod A 具有呼叫 Pod B 的身份验证。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 4：Cilium 更新身份验证缓存，指示 Pod A 具有呼叫 Pod B 的身份验证。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;现在，当它重试连接数据包时，身份验证缓存将指示流程已经通过身份验证，应允许连接并继续 eBPF 数据平面的其余部分（该部分强制执行网络和其他策略）。这个本地节点身份验证缓存确实表现出最终一致性的迹象，可能会失去同步，但这并不是最令人担忧的最终一致性属性。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f5_huba7a6f742d9ae64733c6848223ae9dd4_42521_1500x528_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f5.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f5.png&#34; data-width=&#34;1500&#34; data-height=&#34;528&#34; alt=&#34;image&#34; data-caption=&#34;图 5：一旦缓存已更新并重试数据包，连接将会流动。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 5：一旦缓存已更新并重试数据包，连接将会流动。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;cilium-方法的主要问题&#34;&gt;Cilium 方法的主要问题&lt;/h2&gt;
&lt;p&gt;对于真正的 mTLS 连接，在成功握手之后，您希望使用在参与各方之间协商的密钥来加密剩余的数据。Cilium 中流的成功认证并不意味着它是加密的（它将是纯文本），也不保证流量以一种仅对相关方可见的方式进行加密。如果您需要加密，可以使用基于 WireGuard（或 IPSec）的 Cilium 加密选项，但这只是两个 Kubernetes 节点之间的加密，而不是特定的已认证的工作负载。在“mTLess”连接检查和将实际（敏感）数据放入线路之间，可能会发生很多事情。&lt;/p&gt;
&lt;p&gt;随着一些 Cilium 开发人员继续迭代这个实现，有关将 mTLS 连接中协商的某些密钥转移到底层节点到节点加密方法（例如 IPSec）的谈论。这个实现还有待观察。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f6_hu02b66137872ca125620a70e5dec93203_50734_1500x842_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f6.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f6.png&#34; data-width=&#34;1500&#34; data-height=&#34;842&#34; alt=&#34;image&#34; data-caption=&#34;图 6：具有不同会话密钥的流量&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 6：具有不同会话密钥的流量&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f7_hu1a3982a82c4bcbe670f00eb84b119343_49359_1500x835_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f7.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f7.png&#34; data-width=&#34;1500&#34; data-height=&#34;835&#34; alt=&#34;image&#34; data-caption=&#34;图 7：基于 WireGuard 的加密。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 7：基于 WireGuard 的加密。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Cilium 最终一致性双向认证实现的真正问题出现在 Cilium 的核心身份模型周围。我在上面简要介绍了 TLS 握手，但如果您阅读 Cilium 文档，您会看到用于“mTLess”的 X509 证书具有可选基于&lt;a href=&#34;https://thenewstack.io/the-rise-of-workload-identity-in-cloud-native-with-spiffe-spire/&#34; title=&#34;SPIFFE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt;（Secure Production Identity Framework For Everyone）的身份模型。实际上，在部署实现 Cilium 双向认证所需的组件时，您可以选择部署 SPIFFE Runtime Environment（SPIRE），这是 SPIFFE 的一个实现，Cilium 使用它来生成代表工作负载及其身份的证书。&lt;/p&gt;
&lt;p&gt;这个 SPIFFE 身份用于握手所使用的证书，&lt;em&gt;但 SPIFFE 不是 Cilium 中使用的基础通用工作负载身份&lt;/em&gt;。SPIFFE 用作独立的身份层，映射到 Cilium 现有身份实现。Cilium 在其&lt;a href=&#34;https://doc.crds.dev/github.com/cilium/cilium/cilium.io/CiliumIdentity/v2@1.9.3&#34; title=&#34;核心身份&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;核心身份&lt;/a&gt;概念周围构建了所有的网络策略。CiliumIdentity 实现将一个整数映射到一组 IP 地址（与一组 Pod 关联的 Pod IP）。这个“整数”及其映射到 Pod IP 地址的方式代表了&lt;em&gt;Cilium 中的核心身份原语&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f8_hub131bbebecb097ab2c779305be2aca06_55180_1500x733_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f8.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f8.png&#34; data-width=&#34;1500&#34; data-height=&#34;733&#34; alt=&#34;image&#34; data-caption=&#34;图 8：Cilium 的核心身份原语基于在每个节点上的本地缓存中映射到 IP 地址的整数。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 8：Cilium 的核心身份原语基于在每个节点上的本地缓存中映射到 IP 地址的整数。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们在博客文章“&lt;a href=&#34;https://www.solo.io/blog/could-network-cache-based-identity-be-mistaken/&#34; title=&#34;网络基于缓存的身份可能会被误解吗？&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络基于缓存的身份可能会被误解吗？&lt;/a&gt;”中详细讨论了这个问题。由于这个问题，我们建议在考虑使用依赖身份到 IP 地址映射的容器网络接口（CNI）和&lt;a href=&#34;https://thenewstack.io/secure-your-service-mesh-a-13-item-checklist/&#34; title=&#34;服务网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格&lt;/a&gt;进行网络安全时采取深度防御姿态。&lt;/p&gt;
&lt;p&gt;问题的关键在于：&lt;/p&gt;
&lt;p&gt;为集群中的每个身份的所有 IP 映射&lt;em&gt;都存在于集群中每个节点上的本地缓存中&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f9_hued5a97755ae5449d607a28a02809c90a_70758_1500x910_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f9.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f9.png&#34; data-width=&#34;1500&#34; data-height=&#34;910&#34; alt=&#34;image&#34; data-caption=&#34;图 9：显示每个身份的 IP 的图表&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 9：显示每个身份的 IP 的图表&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f10_hu19468d410a278c3ef2edf690c8d3e4f6_74498_1500x893_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-ciliums-mutual-authentication-can-compromise-security/f10.png&#34; data-img=&#34;/trans/how-ciliums-mutual-authentication-can-compromise-security/f10.png&#34; data-width=&#34;1500&#34; data-height=&#34;893&#34; alt=&#34;image&#34; data-caption=&#34;图 10：最终一致性问题的图表&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 10：最终一致性问题的图表&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;为了使 Cilium 的双向认证和策略执行正常工作，必须使用正确的 IP 到身份映射更新这些缓存。然而，在集群中的所有节点上更新单独的缓存&lt;em&gt;是一种最终一致性操作&lt;/em&gt;。当 Cilium 的 eBPF 数据平面尝试推理连接策略时，它将参考其节点本地缓存中的 IP 到身份映射。&lt;em&gt;如果该缓存过期或延迟&lt;/em&gt;，将导致不正确的网络策略（可能不符合要求，允许恶意活动，威胁数据等）。无论您是否使用 WireGuard 或 IPSec 来加密节点之间的流量，这都不会影响此身份混淆场景。&lt;/p&gt;
&lt;p&gt;这个演示说明了在使用 Cilium 的双向认证时可能导致违反网络策略的身份混淆：&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;因此，总结一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 项目引入了一种新颖的 Kubernetes 工作负载的双向认证机制。&lt;/li&gt;
&lt;li&gt;Cilium 中的双向认证建立在最终一致性之上，可能会危及安全性。&lt;/li&gt;
&lt;li&gt;Cilium 使用“mTLess”进行身份验证，但不会维护整个连接的加密。&lt;/li&gt;
&lt;li&gt;Cilium 的身份模型包括 SPIFFE，但其核心身份是一个基于整数的单独身份层。&lt;/li&gt;
&lt;li&gt;核心问题在于，IP 到身份的映射存储在每个节点上的本地缓存中，这可能导致最终一致性的更新。&lt;/li&gt;
&lt;li&gt;在 Cilium 的双向认证中的最终一致性可能导致不正确的网络策略和安全漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要正确使用依赖身份到 IP 地址映射的 CNI，请考虑采用深度防御姿态，将一个服务网格（如 Istio Ambient）叠加在其上。Istio Ambient 实现了一种无 sidecar 的服务网格，在服务之间的数据路径上使用 mTLS（无论其 IP 地址如何）。在&lt;a href=&#34;https://thenewstack.io/solo-io-istio-is-winning-the-service-mesh-war/&#34; title=&#34;像 Istio 这样的服务网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;像 Istio 这样的服务网格&lt;/a&gt;中，身份模型是由 SPIFFE 定义的，并根据负责签署用于身份验证流量的证书的证书颁发机构建立的。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用相互 TLS 和 Istio 保护应用程序通信</title>
      <link>https://jimmysong.io/trans/secure-apps-with-istio/</link>
      <pubDate>Mon, 06 Nov 2023 18:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/secure-apps-with-istio/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;摘要：本文讨论了使用相互 TLS (mTLS) 和 Istio 保护应用程序通信的重要性。mTLS 提供了端到端的安全性，只有源和目标可以解密数据，从而防止中间人攻击。然而，如果源或目标的身份没有加密，可能会出现问题。Istio 中的 mTLS 可以简单地启用，并为每个应用程序 pod 提供身份证书。为了强制执行严格的 mTLS，可以使用 Istio 的 PeerAuthentication 策略和 AuthorizationPolicy。最后，TLS 协议是最广泛审查、专家批准、经过战斗测试的数据安全协议之一，Istio 默认在内网应用程序通信中使用 TLS 1.3 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户采用服务网格的最大原因之一是使用相互 TLS（mTLS）基于可通过加密验证的身份来启用应用程序之间的安全通信。在此博客中，我们将讨论应用程序之间安全通信的要求，以及 mTLS 如何实现并满足所有这些要求，以及使用 Istio 启用应用程序之间 mTLS 的简单步骤。&lt;/p&gt;
&lt;h2 id=&#34;您需要什么来保护应用程序之间的通信&#34;&gt;您需要什么来保护应用程序之间的通信？&lt;/h2&gt;
&lt;p&gt;现代云原生应用程序经常分布在多个 Kubernetes 集群或虚拟机中。新版本经常进行阶段性部署，它们可以根据用户请求快速扩展和缩小。由于现代应用程序通过不依赖共同定位来提高资源利用效率，因此能够应用访问策略并保护这些分布式应用程序之间的通信至关重要，因为增加的多个入口点导致了更大的攻击面。忽视这一点将邀请数据丢失、数据盗窃、伪造数据或简单处理等巨大的业务风险。&lt;/p&gt;
&lt;p&gt;以下是应用程序之间安全通信的常见关键要求：&lt;/p&gt;
&lt;h3 id=&#34;身份&#34;&gt;身份&lt;/h3&gt;
&lt;p&gt;身份是任何安全架构的基本组成部分。在您的应用程序可以安全地发送数据之前，必须为应用程序建立&lt;strong&gt;身份&lt;/strong&gt;。这个建立身份的过程被称为&lt;strong&gt;身份验证&lt;/strong&gt; - 它涉及由某个知名的，受信任的&lt;strong&gt;权威机构&lt;/strong&gt;对应用程序工作负载进行一次或多次检查，以确认它是它所声称的那样。一旦权威机构满意，它就会授予工作负载一个身份。&lt;/p&gt;
&lt;p&gt;考虑出示护照的行为 - 你会向某个权威机构请求一个，那个权威机构可能会要求你提供几个不同的身份验证证明你是你所说的那个人 - 出生证明、现住址、医疗记录等。一旦你满足了所有的身份验证要求，你将（希望）被授予身份证件。你可以将那个身份证件给别人作为你已经满足了发证机构的所有身份验证要求的证据，如果他们信任发证机构（和身份证件本身），他们就可以信任关于你的所有内容（或者他们可以联系受信任的权威机构并验证该文件）。&lt;/p&gt;
&lt;p&gt;身份可以采取任何形式，但是，就像任何形式的身份证明一样，身份验证越弱，伪造就越容易，身份证明对于使用它进行决策的任何人来说就越无用。这就是为什么在计算中，密码可验证的身份非常重要 - 它们由可验证的权威机构签署，类似于您的护照和驾驶执照。基于任何较少的身份都是一个可以相对容易地利用的安全弱点。&lt;/p&gt;
&lt;p&gt;您的系统可能具有源自网络属性（例如 IP 地址）的身份，具有分布式身份缓存，跟踪身份与这些网络属性之间的映射。这些身份不像密码可验证的身份那样具有强大的保证，因为 IP 地址可能被重新分配给不同的工作负载，并且身份缓存可能并不总是更新到最新的状态。&lt;/p&gt;
&lt;p&gt;您希望应用程序使用密码可验证的身份，因为在建立连接时交换应用程序的密码可验证身份本质上比依赖于将 IP 地址映射到身份的系统更可靠，更安全。这些系统依赖于具有最终一致性和过时问题的分布式身份缓存，这可能在 Kubernetes 中创建结构性弱点，其中高频率的自动 pod 转换是常态。&lt;/p&gt;
&lt;h3 id=&#34;机密性&#34;&gt;机密性&lt;/h3&gt;
&lt;p&gt;加密应用程序之间传输的数据至关重要 - 因为在破坏常见、成本高昂和实际上微不足道的世界中，完全依赖于&lt;em&gt;安全的&lt;/em&gt;内部环境或其他安全边界早已不再适用。为了防止&lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34; title=&#34;中间人攻击&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中间人攻击&lt;/a&gt;，你需要为源 - 目标对创建一个唯一的加密通道，因为你希望有强大的身份唯一性保证以避免&lt;a href=&#34;https://en.wikipedia.org/wiki/Confused_deputy_problem&#34; title=&#34;混淆副手问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;混淆副手问题&lt;/a&gt;。换句话说，仅仅加密通道是不够的 - 它必须使用直接从唯一源和目标身份派生的唯一密钥进行加密，以便只有源和目标可以解密数据。此外，您可能需要根据安全团队的要求定制加密，例如通过选择特定的密码。&lt;/p&gt;
&lt;h3 id=&#34;完整性&#34;&gt;完整性&lt;/h3&gt;
&lt;p&gt;从源发送到目标的加密数据在发送后不能被除源和目标之外的任何身份修改。换句话说，接收到的数据与发送的数据相同。如果你没有&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_integrity&#34; title=&#34;data integrity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data integrity&lt;/a&gt;，那么中间的人可能在源和目标之间的通信过程中修改一些位或整个数据的内容。&lt;/p&gt;
&lt;h3 id=&#34;访问策略执行&#34;&gt;访问策略执行&lt;/h3&gt;
&lt;p&gt;应用程序所有者需要对其应用程序应用访问策略，并正确、一致且不含糊地执行它们。为了对通信渠道的两端应用策略，我们需要为每一端确定一个应用程序身份。一旦我们为可能的通信渠道的两端都有了一个可以通过密码验证的身份，并且来源链条明确，我们就可以开始确定谁可以与何物进行通信的策略。标准的 TLS，这是一种广泛使用的密码协议，用于保护客户端（例如，Web 浏览器）和服务器（例如，Web 服务器）之间的通信，只真正验证并要求一方的身份 - 服务器。但是，对于全面的端到端策略执行，对双方 - 客户端和服务器都有一个可靠、可验证、明确的身份至关重要。这对内部应用程序来说是一个共同的需求 - 想象一下，只有一个 &lt;code&gt;frontend&lt;/code&gt; 应用程序应该调用后端 &lt;code&gt;checkout&lt;/code&gt; 应用程序的 &lt;strong&gt;GET&lt;/strong&gt; 方法，但是不应该被允许调用 &lt;code&gt;POST&lt;/code&gt; 或 &lt;code&gt;DELETE&lt;/code&gt; 方法。或者，只有那些由特定 JWT 发行者发出 JWT 令牌的应用程序才能调用 &lt;code&gt;checkout&lt;/code&gt; 应用程序的 &lt;code&gt;GET&lt;/code&gt; 方法。通过利用双端的密码身份，我们可以确保强大的访问策略被正确地、安全地、可靠地执行，而且有可验证的审计轨迹。&lt;/p&gt;
&lt;h3 id=&#34;fips-合规性&#34;&gt;FIPS 合规性&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nist.gov/standardsgov/compliance-faqs-federal-information-processing-standards-fips&#34; title=&#34;联邦信息处理标准 (FIPS)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联邦信息处理标准 (FIPS)&lt;/a&gt; 是由 &lt;a href=&#34;https://www.nist.gov/&#34; title=&#34;国家标准与技术研究院 (NIST)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;国家标准与技术研究院 (NIST)&lt;/a&gt; 制定的联邦计算机系统的标准和指南。并非每个人都需要 FIPS 合规性，但 FIPS 合规性意味着满足了美国政府为保护敏感信息而设立的所有必要安全要求。与联邦政府合作时需要它。为了遵循美国政府制定的与网络安全相关的指南，许多私营部门都自愿使用这些 FIPS 标准。&lt;/p&gt;
&lt;p&gt;为了说明上述安全应用程序要求（身份、机密性和完整性），让我们使用 &lt;code&gt;frontend&lt;/code&gt; 应用程序调用 &lt;code&gt;checkout&lt;/code&gt; 应用程序的例子。记住，您可以把图中的 &lt;strong&gt;ID&lt;/strong&gt; 看作是任何类型的身份证明，比如政府颁发的护照、照片识别器：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/secure-apps-with-istio/requirements-flow_hu821d11a2a6c34a4d7299535bbd0ee6ee_167309_1000x625_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/secure-apps-with-istio/requirements-flow.png&#34; data-img=&#34;/trans/secure-apps-with-istio/requirements-flow.png&#34; data-width=&#34;1000&#34; data-height=&#34;625&#34; alt=&#34;image&#34; data-caption=&#34;前端调用结账应用程序时的要求&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;前端调用结账应用程序时的要求&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;mtls-如何满足上述要求&#34;&gt;mTLS 如何满足上述要求？&lt;/h2&gt;
&lt;p&gt;TLS 1.3（在撰写本文时的最新 TLS 版本） &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446&#34; title=&#34;规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;规范&lt;/a&gt; 的主要目标是在两个通信对等方之间提供一个安全通道。TLS 安全通道具有以下属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;验证：通道的服务器端始终被验证，客户端可选地被验证。当客户端也被验证时，安全通道成为一个相互的 TLS 通道。&lt;/li&gt;
&lt;li&gt;机密性：数据被加密且只对客户端和服务器可见。必须使用与源和目标身份证明无歧义地密码绑定的密钥来加密数据，以便可靠地保护应用程序层的流量。&lt;/li&gt;
&lt;li&gt;完整性：通过通道发送的数据无法在未被检测到的情况下进行修改。这是通过只有源和目标拥有给定会话的加密和解密密钥的事实来保证的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mtls-内部逻辑&#34;&gt;mTLS 内部逻辑&lt;/h3&gt;
&lt;p&gt;我们已经确定了，使用可以通过加密验证的身份标识对于保护通道和支持访问策略执行至关重要，我们也已经确定了，mTLS 是一种经过严密测试的协议，它为在通道的两端使用可以通过加密验证的身份标识提供了一些极其重要的保证 - 让我们深入了解一下 mTLS 协议在实际运行中是如何工作的。&lt;/p&gt;
&lt;h3 id=&#34;握手协议&#34;&gt;握手协议&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446#section-4&#34; title=&#34;握手协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;握手协议&lt;/a&gt; 验证了通信双方的身份，协商了加密模式和参数，并建立了共享的密钥材料。换句话说，握手的角色是验证通信双方的身份并协商会话密钥，以便连接的其余部分可以根据会话密钥进行加密。当您的应用程序建立 mTLS 连接时，服务器和客户端协商一个密码套件，该套件规定了您的应用程序将用于连接其余部分的加密算法，您的应用程序还协商了要使用的加密会话密钥。整个握手过程都被设计为能抵抗篡改 - 任何未持有与源和/或目标相同的独特，能够通过加密验证的身份文档的实体的干扰都会被拒绝。因此，在任何通信方继续进行应用程序数据之前，都有必要检查整个握手过程并验证其完整性。&lt;/p&gt;
&lt;p&gt;握手可以被认为是按照 TLS 1.3 规范中的&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446#section-2&#34; title=&#34;握手协议概述&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;握手协议概述&lt;/a&gt;有三个阶段 - 再次使用&lt;code&gt;frontend&lt;/code&gt;应用程序调用后端&lt;code&gt;checkout&lt;/code&gt;应用程序的例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一阶段：&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;协商可以用来保护握手和流量数据的加密参数和密钥。&lt;/li&gt;
&lt;li&gt;第二阶段：在此阶段和之后的所有内容都是加密的。在这个阶段，&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;建立其他握手参数，并确定是否也对客户端进行身份验证 - 也就是说，mTLS。&lt;/li&gt;
&lt;li&gt;第三阶段：&lt;code&gt;frontend&lt;/code&gt;通过其可通过加密验证的身份验证&lt;code&gt;checkout&lt;/code&gt;（在 mTLS 中，&lt;code&gt;checkout&lt;/code&gt;以相同的方式验证&lt;code&gt;frontend&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自 TLS 1.2 以来，与握手相关的有几个主要区别，有关更多详细信息，请参考 TLS 1.3 规范：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有握手消息（第二阶段和第三阶段）都使用在第一阶段协商的加密密钥进行加密。&lt;/li&gt;
&lt;li&gt;已经削减了遗留的对称加密算法。&lt;/li&gt;
&lt;li&gt;添加了零往返时间（0-RTT）模式，节省了连接设置的一个往返时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;记录协议&#34;&gt;记录协议&lt;/h3&gt;
&lt;p&gt;在握手阶段协商了 TLS 协议版本、会话密钥和&lt;a href=&#34;https://en.wikipedia.org/wiki/HMAC&#34; title=&#34;HMAC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HMAC&lt;/a&gt;后，双方现在可以通过&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446#section-5&#34; title=&#34;记录协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;记录协议&lt;/a&gt;安全地交换被分块的加密数据。使用握手中协商的完全相同的参数对流量进行加密是至关重要的（并且是规范的一部分），以确保流量的机密性和完整性。&lt;/p&gt;
&lt;p&gt;将 TLS 1.3 规范中的两个协议放在一起，并使用&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;应用程序来说明以下流程：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/secure-apps-with-istio/mtls-flow_hu8ec90b8bb233e370e5a4eccd37afe29b_173241_1000x596_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/secure-apps-with-istio/mtls-flow.png&#34; data-img=&#34;/trans/secure-apps-with-istio/mtls-flow.png&#34; data-width=&#34;1000&#34; data-height=&#34;596&#34; alt=&#34;image&#34; data-caption=&#34;当前端调用结账应用程序时的 mTLS 流程&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;当前端调用结账应用程序时的 mTLS 流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;谁为&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;发出身份证书？它们通常由具有自己的&lt;a href=&#34;https://en.wikipedia.org/wiki/Root_certificate&#34; title=&#34;根证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;根证书&lt;/a&gt;或使用其根 CA 的中间证书的&lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority&#34; title=&#34;证书颁发机构（CA）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书颁发机构（CA）&lt;/a&gt;发出。根证书基本上是一份标识根 CA 的公钥证书，您的组织可能已经拥有此证书。根证书会与&lt;code&gt;frontend&lt;/code&gt;（或&lt;code&gt;checkout&lt;/code&gt;）的自己的根签名身份证书一起分发到&lt;code&gt;frontend&lt;/code&gt;。这就是基本的公钥基础设施（PKI）的工作方式 - CA 负责验证实体的身份文档，然后以证书的形式授予它一个无法伪造的身份文档。&lt;/p&gt;
&lt;p&gt;您可以依赖您的 CA 和中间 CA 作为身份&lt;strong&gt;真理&lt;/strong&gt;的来源，以一种维持高可用性并提供稳定、持久可验证的身份保证的结构化方式，而一个庞大的分布式 IP 和身份映射缓存则无法做到这一点。当&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;的身份证书由同一个根证书发出时，&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;可以始终以一致且可靠的方式验证其对等身份，无论它们运行在哪个集群或节点或规模中。&lt;/p&gt;
&lt;p&gt;您了解了 mTLS 如何提供加密身份、机密性和完整性，那么当您的应用程序数量增长到数千个或更多，并且跨多个集群时，其可扩展性如何呢？如果您在多个集群中建立一个单一的根证书，那么只要它被根证书信任，系统就不需要在应用程序收到来自另一个集群的连接请求时进行处理 - 系统知道连接上的身份已经通过加密进行了验证。当您的应用程序 pod 更改 IP 或被重新部署到另一个集群或网络时，您的应用程序（或代表其行动的组件）只需使用其由 CA 铸造的受信任证书向目标发起流量即可。无论是 500+ 网络跳转还是直接连接，您的访问策略都会以相同的方式执行，无需跟踪身份缓存并计算哪个 IP 地址映射到哪个应用程序 pod。&lt;/p&gt;
&lt;p&gt;那么关于 FIPS 合规性呢？根据 TLS 1.3 规范，TLS 兼容的应用程序必须实现&lt;code&gt;TLS_AES_128_GCM_SHA256&lt;/code&gt;密码套件，并建议实现&lt;code&gt;TLS_AES_256_GCM_SHA384&lt;/code&gt;，这两者都在 NIST 的&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r2.pdf&#34; title=&#34;TLS 指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS 指南&lt;/a&gt;中。RSA 或 ECDSA 服务器证书也被 TLS 1.3 规范和 NIST 的 TLS 指南推荐。只要您为 mTLS 连接使用 FIPS 140-2 或 140-3 合规的加密模块，您就会走上&lt;a href=&#34;https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules&#34; title=&#34;FIPS 140-2 或 140-3 验证&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FIPS 140-2 或 140-3 验证&lt;/a&gt;的正确路径。&lt;/p&gt;
&lt;h2 id=&#34;可能出现的问题&#34;&gt;可能出现的问题&lt;/h2&gt;
&lt;p&gt;按照 TLS 1.3 规范正确实施 mTLS 至关重要。如果不按照 TLS 规范正确使用 mTLS，以下是一些可能在未被检测的情况下出现的问题：&lt;/p&gt;
&lt;h3 id=&#34;如果有人在连接中间静默地捕获加密数据会怎么样&#34;&gt;如果有人在连接中间静默地捕获加密数据会怎么样？&lt;/h3&gt;
&lt;p&gt;如果连接没有按照 TLS 规范中概述的握手和记录协议来进行，例如，连接遵循握手协议，但在记录协议中没有使用握手中协商的会话密钥和参数，您可能会发现您的连接的握手和记录协议之间没有关联，握手和记录协议之间的身份可能不同。TLS 要求握手和记录协议在同一连接中共享，因为将它们分开会增加中间人攻击的攻击面。&lt;/p&gt;
&lt;p&gt;mTLS 连接从握手开始到结束都具有一致的端到端安全性。加密数据是用证书中公钥协商的会话密钥加密的。只有源和目标可以使用私钥解密数据。换句话说，只有拥有私钥的证书所有者才能解密数据。除非黑客控制了证书的私钥，否则他或她没有办法搞乱 mTLS 连接以成功执行中间人攻击。&lt;/p&gt;
&lt;h3 id=&#34;如果源或目标身份没有加密安全怎么办&#34;&gt;如果源或目标身份没有加密安全怎么办？&lt;/h3&gt;
&lt;p&gt;如果身份基于网络属性，如 IP 地址，这些属性可能会重新分配给其他 pod，就无法使用加密技术验证该身份。由于此类身份不基于加密身份，因此您的系统可能有一个身份缓存，用于跟踪身份、pod 的网络标签、相应的 IP 地址和部署 pod 的 Kubernetes 节点信息之间的映射。使用身份缓存，您可能会遇到 pod IP 地址被重用和身份错误，当身份缓存在短时间内同步出现问题时，策略可能无法正确执行。例如，如果您的连接之间的对等方没有加密身份，您的系统将不得不从可能过时或不完整的身份缓存中获取身份。&lt;/p&gt;
&lt;p&gt;将身份映射到工作负载 IP 的这些身份缓存不是 ACID（原子性、一致性、隔离性和持久性），您希望您的安全系统应用于具有强保证的事物。考虑以下属性和您可能想要问自己的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过时：对等方如何验证缓存中的条目是否是&lt;strong&gt;当前&lt;/strong&gt;的？&lt;/li&gt;
&lt;li&gt;不完整：如果缓存未命中并且系统未能关闭连接，只有缓存&lt;strong&gt;同步器&lt;/strong&gt;失败时网络才会变得不稳定吗？&lt;/li&gt;
&lt;li&gt;如果某个东西根本没有 IP 怎么办？例如，默认情况下，AWS Lambda 服务没有公共 IP。&lt;/li&gt;
&lt;li&gt;非事务性：如果您读取两次身份，会看到相同的值吗？如果在访问策略或审计实施中不小心，这可能会导致真正的问题。&lt;/li&gt;
&lt;li&gt;谁将守护守护者自己？是否有既定的实践来保护缓存，就像 CA 有的那样？您有什么证据证明缓存没有被篡改吗？您是否被迫对一些不是您的 CA 的复杂基础设施的安全性进行推理（和审计）？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上问题中有些比其他问题更糟。您可以应用&lt;strong&gt;失败关闭&lt;/strong&gt;原则，但这并不能解决所有问题。&lt;/p&gt;
&lt;p&gt;身份也用于执行访问策略，例如授权策略，这些访问策略在请求路径中，您的系统必须快速做出决定，允许或拒绝访问。每当身份出现错误时，访问策略可能会被绕过，而无法被检测或审计。例如，您的身份缓存可能将您的&lt;code&gt;checkout&lt;/code&gt; pod 的先前分配的 IP 地址作为&lt;code&gt;checkout&lt;/code&gt;身份之一。如果&lt;code&gt;checkout&lt;/code&gt; pod 被回收，同一 IP 地址刚刚被分配给一个&lt;code&gt;frontend&lt;/code&gt; pod，那么在缓存更新之前，该&lt;code&gt;frontend&lt;/code&gt; pod 可能具有&lt;code&gt;checkout&lt;/code&gt;的身份，这可能导致错误的访问策略被执行。&lt;/p&gt;
&lt;p&gt;让我们假设以下大规模多集群部署，说明身份缓存过时问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;100 个集群，每个集群有 100 个节点，每个节点有 20 个 pod。总的 pod 数量是 200,000。&lt;/li&gt;
&lt;li&gt;0.25% 的 pod 一直在变动（滚动更新，重启，恢复，节点变动等），每次变动的窗口是 10 秒。&lt;/li&gt;
&lt;li&gt;每 10 秒有 500 个正在变动的 pod 分布到 10,000 个节点（缓存）。&lt;/li&gt;
&lt;li&gt;如果缓存同步器停滞，系统在 5 分钟后过时的%可能高达&lt;strong&gt;7.5%&lt;/strong&gt;！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上假设缓存同步器处于稳态。如果缓存同步器出现问题，会影响其健康检查，增加变动率，导致级联不稳定。&lt;/p&gt;
&lt;p&gt;CA 也可能被攻击者&lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority#CA_compromise&#34; title=&#34;攻击&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;攻击&lt;/a&gt;，攻击者假装是别人，欺骗 CA 发出证书。然后，攻击者可以使用该证书与其他对等方通信。这是&lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority#Certificate_revocation&#34; title=&#34;证书撤销&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书撤销&lt;/a&gt;可以通过撤销证书使其无效来解决问题。否则，攻击者可以利用被攻击的证书直到其过期。保持根证书的私钥在 HSM 中至关重要，该 HSM 应保持&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_and_offline&#34; title=&#34;离线&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;离线&lt;/a&gt;，并使用中间证书签署工作负载证书。在 CA 停顿或停滞 5 分钟的情况下，您将无法获得新的或续期的工作负载证书，但之前发出的有效证书将继续为您的工作负载提供强大的身份保证。为了提高发行的可靠性，您可以将中间 CA 部署到不同的区域和地区。&lt;/p&gt;
&lt;h2 id=&#34;istio-中的-mtls&#34;&gt;Istio 中的 mTLS&lt;/h2&gt;
&lt;h3 id=&#34;启用-mtls&#34;&gt;启用 mTLS&lt;/h3&gt;
&lt;p&gt;在 Istio 中为内网应用程序启用 mTLS 非常简单。您需要做的就是将您的应用程序添加到网格中，这可以通过为您的命名空间标记侧车注入或环境来完成。在侧车的情况下，需要进行滚动重启，以便侧车被注入到您的应用程序 pod 中。&lt;/p&gt;
&lt;h3 id=&#34;加密身份&#34;&gt;加密身份&lt;/h3&gt;
&lt;p&gt;在 Kubernetes 环境中，&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#istio-identity&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;根据其服务帐户创建应用程序的身份。将应用程序添加到网格后，将向网格中的每个应用程序 pod 提供身份证书。&lt;/p&gt;
&lt;p&gt;默认情况下，您的 pod 的身份证书在 24 小时后过期，Istio 每 12 小时旋转一次 pod 身份证书，以便在出现妨害行为的情况下（例如，被攻击的 CA 或被盗的 pod 的私钥），被攻击的证书只能在证书过期并因此限制其可能造成的损害的非常有限的时间内工作。&lt;/p&gt;
&lt;h3 id=&#34;强制执行严格的-mtls&#34;&gt;强制执行严格的 mTLS&lt;/h3&gt;
&lt;p&gt;默认的 mTLS 行为是尽可能使用 mTLS，但并不强制执行。要严格强制您的应用程序只接受 mTLS 流量，您可以使用 Istio 的&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/peer_authentication/&#34; title=&#34;PeerAuthentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PeerAuthentication&lt;/a&gt;策略，对整个网格或每个命名空间或工作负载进行操作。此外，您还可以应用 Istio 的&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/&#34; title=&#34;AuthorizationPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AuthorizationPolicy&lt;/a&gt;来控制您的工作负载的访问。&lt;/p&gt;
&lt;h3 id=&#34;tls-版本&#34;&gt;TLS 版本&lt;/h3&gt;
&lt;p&gt;TLS 版本 1.3 是 Istio 在内网应用程序通信中的默认设置，使用 Envoy 的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto&#34; title=&#34;默认密码套件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;默认密码套件&lt;/a&gt;（例如，对于 Istio 1.19.0，为&lt;code&gt;TLS_AES_256_GCM_SHA384&lt;/code&gt;）。如果您需要旧的 TLS 版本，您可以为您的工作负载&lt;a href=&#34;https://istio.io/latest/docs/tasks/security/tls-configuration/workload-min-tls-version/&#34; title=&#34;配置不同的网格范围内的最小 TLS 协议版本&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置不同的网格范围内的最小 TLS 协议版本&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;结束语&#34;&gt;结束语&lt;/h2&gt;
&lt;p&gt;由互联网工程任务组（IETF）制定的 TLS 协议是存在的最广泛审查、专家批准、经过战斗测试的数据安全协议之一。TLS 也在全球广泛使用 - 每当您访问任何安全网站，您都可以放心购物，部分原因是因为锁定图标表明您正在使用 TLS 安全连接到受信任的网站。TLS 1.3 协议设计具有端到端的身份验证、保密性和完整性，以确保您的应用程序的身份和通信不被破坏，并防止中间人攻击。为了实现这一点（并被认为是符合标准的 TLS），正确验证通信对等方并使用从握手协商的密钥加密流量不仅重要，而且至关重要。现在您知道 mTLS 在满足您的安全应用程序通信要求（加密身份、保密性、完整性和访问策略执行）方面表现优秀，您可以简单地使用 Istio 将您的内网应用程序通信升级到 mTLS - 配置非常少！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;特别感谢 Louis Ryan、Ben Leggett、John Howard、Christian Posta、Justin Pettit 花费大量时间审查和提出博客的更新！&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>创业指南</title>
      <link>https://jimmysong.io/trans/startup-playbook/</link>
      <pubDate>Sun, 05 Nov 2023 18:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/startup-playbook/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;摘要：创业指南强调了几个关键方面：首先，创业公司应快速解雇对文化有毒的员工，忽略竞争对手，特别是当他们筹集大量资金或在媒体上制造大量噪音时。其次，创业公司需要找到盈利的方法，尽快达到“拉面盈利”的状态，即赚足够的钱让创始人可以靠拉面度日。最后，筹资是大多数创业公司在某个时候都会面临的问题，成功筹资的秘诀是拥有一家好公司，而不是过度优化流程。创业公司应该在需要资金或者在条件好的情况下筹资，但要小心不要失去节俭精神，或者开始通过投钱来解决问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者 Sam Altman 是一位知名的企业家和投资人，他是 OpenAI 的创始人，Y Combinator（一家著名的创业孵化器）的前任主席。&lt;/p&gt;
&lt;p&gt;我们花了很多时间为创业公司提供咨询。虽然一对一的建议一直是至关重要的，但我们认为，如果我们能将这些建议中最能普遍化的部分提炼成一种可以给 YC 和 YC Fellowship 公司的指南，可能会帮助我们扩大 YC 的规模。&lt;/p&gt;
&lt;p&gt;然后我们想，我们应该把它给所有人。&lt;/p&gt;
&lt;p&gt;这本指南主要是为创业世界的新人准备的。对于已经阅读过很多 YC 合作伙伴所写的内容的人来说，这里的大部分内容可能并不新鲜——我们的目标是把它们都集中在一个地方。&lt;/p&gt;
&lt;p&gt;关于如何扩大创业公司的第二部分可能会在以后发布——这部分主要涵盖了如何启动一个创业公司。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;引言&lt;/p&gt;
&lt;p&gt;我们花了很多时间为创业公司提供咨询。虽然一对一的建议一直是至关重要的，但我们认为，如果我们能将这些建议中最能普遍化的部分提炼成一种可以给 YC 和 YC Fellowship 公司的指南，可能会帮助我们扩大 YC 的规模。&lt;/p&gt;
&lt;p&gt;想法&lt;/p&gt;
&lt;p&gt;我们首先询问 YC 公司他们正在做什么以及为什么要做。我们在此处寻找清晰、简洁的答案。这既是为了评估你作为创始人的能力，也是为了评估想法本身。能够清晰地思考和沟通对于创始人来说非常重要。&lt;/p&gt;
&lt;p&gt;优秀的团队&lt;/p&gt;
&lt;p&gt;平庸的团队无法建立伟大的公司。我们最关注的事情之一就是创始人的实力。当我过去进行后期投资时，我同样关注创始人所雇佣的员工的实力。&lt;/p&gt;
&lt;p&gt;优秀的产品&lt;/p&gt;
&lt;p&gt;这是成功的秘诀：拥有一个优秀的产品。这是所有伟大公司共有的唯一特点。如果你没有制造出用户喜爱的产品，你最终将失败。然而，创始人总是在寻找其他的秘诀。创业公司是你生活中停止使用小把戏的时期。&lt;/p&gt;
&lt;p&gt;优秀的执行&lt;/p&gt;
&lt;p&gt;虽然建立一个伟大的产品是必要的，但这还不够。你还需要把它变成一家伟大的公司，而且你必须亲自去做——雇佣一个“有经验的管理者”来完成所有这些工作是一种非常普遍的幻想，也是失败公司的墓地。你不能将这项工作外包给其他人很长一段时间。&lt;/p&gt;
&lt;p&gt;增长&lt;/p&gt;
&lt;p&gt;增长和动力是执行工作的关键。增长（只要不是以 90 美分的价格卖一美元钞票的增长）能解决所有问题，而缺乏增长除了增长之外，不能被任何东西解决。如果你在增长，你会感觉到你正在赢，人们会感到快乐。&lt;/p&gt;
&lt;p&gt;专注与强度&lt;/p&gt;
&lt;p&gt;如果我必须把我关于如何运作的建议简化到只有两个词，我会选择专注和强度。这些词似乎真的适用于我所认识的最好的创始人。&lt;/p&gt;
&lt;p&gt;CEO 的职务&lt;/p&gt;
&lt;p&gt;我前面提到，CEO 的唯一普遍的工作描述是确保公司取胜。虽然这是真的，我想更具体地谈谈 CEO 应该如何分配他或她的时间。&lt;/p&gt;
&lt;p&gt;招聘与管理&lt;/p&gt;
&lt;p&gt;招聘是你最重要的工作之一，也是建立一家伟大公司（而不仅仅是一款伟大的产品）的关键。我关于招聘的第一条建议是不要去做。我们在 YC 工作过的最成功的公司在开始雇佣员工之前都等了相当长的时间。&lt;/p&gt;
&lt;p&gt;竞争对手&lt;/p&gt;
&lt;p&gt;关于竞争对手的一句快速的话：竞争对手是创业公司的鬼故事。首次创业的人认为竞争对手是 99% 的创业公司死亡的原因。但是，99% 的创业公司是自杀，而不是他杀。相反，你应该担心你所有的内部问题。如果你失败，很可能是因为你没有做出一个伟大的产品和/或没有做出一个伟大的公司。&lt;/p&gt;
&lt;p&gt;赚钱&lt;/p&gt;
&lt;p&gt;哦，是的，赚钱。你需要找出如何做到这一点。这个问题的简短版本是，你必须让人们付给你的钱多于你提供商品/服务的成本。出于某种原因，人们总是忘记考虑提供商品/服务的成本部分。&lt;/p&gt;
&lt;p&gt;筹资&lt;/p&gt;
&lt;p&gt;大多数创业公司在某个时候都会筹集资金。当你需要资金或者能以优惠条件获得资金时，你应当筹集资金。小心不要丧失你的节俭观念，或者开始通过抛钱解决问题。资金不足可能会导致问题，但是资金过多几乎总是会带来问题。&lt;/p&gt;
&lt;p&gt;结束语&lt;/p&gt;
&lt;p&gt;记住，每个伟大的想法都有至少一千个人想到过。其中有一人实际上获得了成功。区别在于执行。这是一个磨人的过程，每个人都希望有其他的方式将“想法”转化为“成功”，但是至今还没有人找到。&lt;/p&gt;
&lt;p&gt;作为一家创业公司，你的目标是创造用户喜爱的东西。如果你做到了这一点，那么你就必须想办法获得更多的用户。但是这个第一步是至关重要的——想想今天的那些非常成功的公司。他们都是从一个早期用户非常喜欢并向其他人推荐的产品开始的。如果你做不到这一点，你就会失败。如果你欺骗自己，认为用户喜欢你的产品但实际上他们并不喜欢，你仍然会失败。&lt;/p&gt;
&lt;p&gt;创业公司的墓地上散落着认为他们可以跳过这一步的人们的尸体。&lt;/p&gt;
&lt;p&gt;与大量用户喜欢的产品相比，首先制作出一小部分用户喜爱的产品要好得多。尽管总体上的积极感觉是一样的，但是获取更多用户要比从喜欢变为喜爱容易得多。&lt;/p&gt;
&lt;p&gt;关于选择创业的警告：这真的很糟糕！我们从 YC 创始人那里得到的最一致的反馈就是，它比他们想象中的要难，因为他们没有一个框架来理解创业需要的工作和强度。加入一个初创阶段、发展势头强劲的创业公司通常是一个更好的财务选择。&lt;/p&gt;
&lt;p&gt;另一方面，创业对你的职业生涯实际上并不冒险——如果你真的擅长科技，即使你失败了，你也还有工作机会。大多数人非常不擅长评估风险。我个人认为，更冒险的选项是拥有一个你非常热衷的想法或项目，但是选择在一个安全、轻松、没有成就感的工作中工作。&lt;/p&gt;
&lt;p&gt;要成功的创业公司需要：一个伟大的想法（包括一个伟大的市场）、一个伟大的团队、一个伟大的品，和伟大的执行力。&lt;/p&gt;
&lt;h2 id=&#34;理念&#34;&gt;理念&lt;/h2&gt;
&lt;p&gt;我们首先询问 YC 公司的是他们正在做什么以及为什么。&lt;/p&gt;
&lt;p&gt;我们在这里寻找清晰，简洁的答案。这既是为了评估你作为创始人，也是为了评估想法本身。作为创始人，能够清晰地思考和交流很重要 - 你需要用它来招聘，筹集资金，销售等。一般来说，想法需要清晰才能传播，复杂的想法几乎总是混乱思维或者问题的标志。如果想法第一次听到时并未真正激发起至少一些人的兴趣，那就糟糕了。&lt;/p&gt;
&lt;p&gt;我们还会问谁迫切需要这个产品。&lt;/p&gt;
&lt;p&gt;最好的情况是，你自己就是目标用户。其次是你非常了解目标用户。&lt;/p&gt;
&lt;p&gt;如果公司已经有用户，我们会询问有多少用户，以及这个数字正在如何增长。我们试图弄清楚为什么它没有增长得更快，我们特别试图弄清楚用户是否真的喜欢这个产品。通常，这意味着他们在公司没有提示的情况下告诉他们的朋友使用产品。我们还会问公司是否正在创收，如果没有，为什么没有。&lt;/p&gt;
&lt;p&gt;如果公司尚无用户，我们会试图搞清楚首先要建立的最小事物 - 即，如果我们从完美的体验反向工作，我们试图搞清楚从哪个核心开始。&lt;/p&gt;
&lt;p&gt;测试一个想法的方式是启动它并看看会发生什么，或者尝试销售它（例如，在你编写一行代码之前尝试获得意向书。）前者更适合消费者想法（用户可能会告诉你他们会使用它，但实际上可能无法脱颖而出），后者更适合企业想法（如果一家公司告诉你他们会购买某物，那么就去建造它。）具体来说，如果你是一家企业公司，我们会首先问你的问题之一是，你是否有一份来自客户的意向书，称他们会购买你正在建造的东西。对于大多数生物技术和硬科技公司，测试想法的方法是首先与潜在客户交谈，然后搞清楚首先可以建造的技术的最小子集。&lt;/p&gt;
&lt;p&gt;当你从用户那里得到反馈时，让你的想法进化是非常重要的。并且你真的需要非常了解你的用户 - 你需要这个来评估一个想法，打造一个伟大的产品，并建立一个伟大的公司。&lt;/p&gt;
&lt;p&gt;如前所述，创业是非常艰难的。它需要很长的时间和持续的强烈努力。创始人和员工需要有共享的使命感来支持他们。所以我们询问创始人为什么想要创办这个特定的公司。&lt;/p&gt;
&lt;p&gt;我们还会问这家公司将如何成为一家垄断公司。这有很多不同的术语，但我们使用彼得·蒂尔（Peter Thiel）的。显然，我们不希望你的公司对竞争对手采取不道德的行为。相反，我们正在寻找随着规模的扩大变得更强大且难以复制的企业。&lt;/p&gt;
&lt;p&gt;最后，我们提问关于市场。我们询问市场今天的规模，增长速度有多快，以及为什么在十年后它会变得很大。我们试图理解为什么市场将快速增长，以及为什么这是一个创业公司应该追求的好市场。我们喜欢在大多数人还没有意识到的时候，主要的技术转变刚刚开始——大公司在处理这些问题上不擅长。而且有点反直觉的是，最好的答案是去追求一个小市场的大部分。&lt;/p&gt;
&lt;p&gt;关于想法的一些其他想法：&lt;/p&gt;
&lt;p&gt;我们更喜欢新的东西而不是衍生的东西。大多数真正的大公司都从一些根本新的东西开始（新的一个可接受的定义是比原来好 10 倍）。如果有十个其他公司同时开始实施同样的计划，并且听起来很像已经存在的东西，我们会持怀疑态度。&lt;/p&gt;
&lt;p&gt;这其中一个重要的反直觉原因是，做一些新的和困难的事情比做一些衍生的和容易的事情更容易。如果是前者，人们会想要帮助你和加入你；如果是后者，他们不会。&lt;/p&gt;
&lt;p&gt;好的想法听起来不好，但实际上是好的。所以，你不需要对你的想法过于保密——如果它实际上是个好主意，那么它可能看起来不值得偷。即使它听起来值得偷，有好想法的人至少比愿意付出将伟大的想法变成伟大公司所需的工作的人多一千倍。而且，如果你告诉人们你在做什么，他们可能会帮助。&lt;/p&gt;
&lt;p&gt;说到告诉人们你的想法——虽然这个想法第一次听到时真的让一些人很兴奋是很重要的，但几乎每个人都会告诉你，你的想法很糟糕。也许他们是对的。也许他们不擅长评估创业公司，或者也许他们只是&lt;/p&gt;
&lt;p&gt;在讨论你的创意时，你需要知道的是，尽管你的创意在人们第一次听到时，可能会让一些人感到非常兴奋，但几乎所有人都会告诉你，你的创意太糟糕了。也许他们是对的，也许他们不擅长评估创业公司，或者他们只是嫉妒。无论原因是什么，这种情况都会经常发生，会让你感到痛苦，即使你认为自己不会受到它的影响，你还是会受到影响。你能够越快地建立自我信念，不被憎恨者拖累，你就会越好。无论你有多成功，憎恨者永远不会消失。&lt;/p&gt;
&lt;p&gt;如果你没有创意，但想要创业，也许你不应该这么做。首先有创意，然后创业是将创意推向世界的方式，这样做会更好。&lt;/p&gt;
&lt;p&gt;我们曾经尝试过一个实验，我们资助一批没有创意的有前途的创始团队，希望他们在我们资助他们后能找到一个有前途的创意。&lt;/p&gt;
&lt;p&gt;他们都失败了。我认为问题的一部分是，好的创始人通常有很多好的创意（通常是太多）。但更大的问题是，一旦你有了一个创业公司，你就必须赶快想出一个创意，而且因为它已经是一个正式的公司，所以创意不能太疯狂。你最终会得到看起来合理但是衍生的创意。这就是转型的危险。&lt;/p&gt;
&lt;p&gt;所以，最好不要过于积极地强迫自己想出创业创意。相反，学习不同的东西。练习注意问题，看起来效率低的事情，以及重大的技术转变。&lt;a href=&#34;http://blog.samaltman.com/projects-and-companies&#34; title=&#34;做你感兴趣的项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;做你感兴趣的项目&lt;/a&gt;。尽可能地和聪明、有趣的人在一起。在某个时候，创意就会出现。&lt;/p&gt;
&lt;h2 id=&#34;优秀的团队&#34;&gt;优秀的团队&lt;/h2&gt;
&lt;p&gt;平庸的团队不会建立伟大的公司。我们最关注的事情之一是创始人的实力。当我过去做后期投资的时候，我也十分关注创始人所雇佣的员工的实力。&lt;/p&gt;
&lt;p&gt;什么才是优秀的创始人呢？最重要的特性是坚不可摧，决心，坚实可靠，和足智多谋。智力和热情也非常重要。这些都比经验和语言 X 框架 Y 的“专业知识”更重要。&lt;/p&gt;
&lt;p&gt;我们注意到最成功的创始人是那种与之合作压力较小的人，因为你觉得“无论什么事，他/她都能完成”。有时候，你可以通过 sheer force of will 来取得成功。&lt;/p&gt;
&lt;p&gt;好的创始人具有许多看似矛盾的特质。一个重要的例子是刚柔并济。你想要有关于公司核心和其使命的强烈信念，但是在几乎所有其他事情上，你还需要非常灵活并愿意学习新事物。&lt;/p&gt;
&lt;p&gt;最好的创始人反应非常敏捷。这是果断，专注，热情和执行力的指示器。&lt;/p&gt;
&lt;p&gt;与之交谈困难的创始人几乎总是糟糕的。沟通是创始人非常重要的技能 - 实际上，我认为这是最重要的一种鲜为人知的创始人技能。&lt;/p&gt;
&lt;p&gt;科技创业公司至少需要一个能够构建公司产品或服务的创始人，以及至少一个在销售和与用户交谈方面是（或可以成为）擅长的创始人。这可以是同一个人。&lt;/p&gt;
&lt;p&gt;在选择联合创始人时考虑这些标准 - 这是你将做出的最重要的决定之一，而这通常是相当随机的。你需要了解你的人，而不是你刚在创始人约会上遇到的人。你可以使用更多的数据来评估你可能与之合作的任何人，并且你真的不想得到这个错误的答案。此外，在某个时刻，创业公司的预期价值可能会低于 X 轴。如果你与你的联合创始人有预先存在的关系，你们都不会希望让对方失望，你们会继续前进。创始人分手是早期创业公司死亡的主要原因之一，我们在创始人为了创办公司而见面的情况下看到这种情况发生得非常非常频繁。&lt;/p&gt;
&lt;p&gt;最好的情况，无疑是，拥有一个好的联合创始人。其次是成为单打独斗的创始人。最糟糕的情况，无疑是，有一个糟糕的联合创始人。如果事情没有进展，你应该尽快分道扬镳。&lt;/p&gt;
&lt;p&gt;关于股权的一个快速提示：关于股权分配的谈话随着时间的推移并没有变得更容易 - 最好早点设置。几乎平等是最好的，尽管在两个创始人的情况下，最好有一个人拥有额外的股份以防止在创始人有分歧时出现僵局。&lt;/p&gt;
&lt;h2 id=&#34;优秀的产品&#34;&gt;优秀的产品&lt;/h2&gt;
&lt;p&gt;成功的秘诀就是拥有一个优秀的产品。这是所有伟大公司的共同点。&lt;/p&gt;
&lt;p&gt;如果你没有开发出用户喜爱的产品，你最终将会失败。然而，创始人总是在寻找其他的策略。创业是你人生中不能再依赖技巧的时期。&lt;/p&gt;
&lt;p&gt;优秀的产品是长期增长的唯一方式。最终，你的公司会变得如此庞大，以至于所有的增长黑客都无法运作，你必须依靠人们想要使用你的产品来发展。这是理解超级成功公司最重要的事情。没有其他方式。想想所有非常成功的科技公司——他们都这么做。&lt;/p&gt;
&lt;p&gt;你需要在你的公司中建立一个“产品改进引擎”。你应该与你的用户交谈，观察他们如何使用你的产品，找出哪些部分表现不佳，然后改进你的产品。然后再做一次。这个周期应该是公司的首要关注点，它应该推动所有其他事情。如果你每周改进你的产品 5%，它将会产生真正的复利效果。&lt;/p&gt;
&lt;p&gt;这个周期的重复速率越快，公司通常会变得越好。在 YC 期间，我们告诉创始人他们应该构建产品，与用户交谈，除了吃饭、睡觉、锻炼和与他们爱的人共度时光之外，他们不应该做其他太多的事情。&lt;/p&gt;
&lt;p&gt;要做好这个周期，你必须非常了解你的用户。真正观察他们如何使用你的产品。如果可以的话，坐在他们的办公室里。既要重视他们告诉你的内容，也要重视他们实际做的事情。你不应该让任何人在创始人和用户之间，尽可能长的时间——这意味着创始人需要做销售、客户支持等工作。&lt;/p&gt;
&lt;p&gt;尽你所能了解你的用户。真正了解他们需要什么，在哪里找他们，以及什么驱动他们。&lt;/p&gt;
&lt;p&gt;“做不易扩展的事情”已经成为创业公司的口头禅。你通常需要一个接一个地招募初始用户（Ben Silbermann 过去常常在 Palo Alto 的咖啡店里接触陌生人，让他们试试 Pinterest），然后构建他们要求的东西。许多创始人讨厌这个部分，只想在媒体上宣布他们的产品。但这几乎永远不会有效。手动招募用户，使产品如此优秀以至于你招募的用户会告诉他们的朋友。&lt;/p&gt;
&lt;p&gt;你还需要将事情分解成非常小的部分，然后在进行的过程中进行迭代和适应。不要试图&lt;/p&gt;
&lt;p&gt;你需要将事情分解成很小的部分，然后边做边调整。不要试图过早规划，绝对不要把所有事情都堆积到一个大的公开发布中。你需要从非常简单的东西开始——尽可能少的接触面——然后比你预期的更早去发布。事实上，简单总是好的，你应该始终保持你的产品和公司尽可能地简单。&lt;/p&gt;
&lt;p&gt;我们经常向遇到问题的创业公司提出一些常见的问题：用户是否会多次使用你的产品？你们的用户对你们的产品是否狂热？如果你的公司消失了，你的用户会真的很难过吗？你的用户是否会在你没有要求他们这样做的情况下推荐你给其他人？如果你是一个 B2B 公司，你是否至少有 10 个付费客户？&lt;/p&gt;
&lt;p&gt;如果没有，那通常就是根本的问题，我们会告诉这些公司去改进他们的产品。我对大多数关于为什么公司不增长的借口都持怀疑态度——非常常见的真正原因是产品还不够好。&lt;/p&gt;
&lt;p&gt;当创业公司对他们的产品下一步该做什么，或者他们的产品还不够好的时候，我们会让他们去和他们的用户交谈。这在每个案例中都不一定管用——毫无疑问，人们本来会要求福特生产更快的马车——但是它通常还是有效的。事实上，更普遍的是，当公司中有任何争议的时候，去和你的用户交谈。&lt;/p&gt;
&lt;p&gt;最好的创始人对产品质量似乎过于在乎，甚至对看似不重要的细节也是如此。但是它似乎有效。顺便说一句，“产品”包括用户与公司的所有互动。你需要提供优质的支持，优质的销售互动等等。&lt;/p&gt;
&lt;p&gt;请记住，如果你没有做出一个伟大的产品，那么其他一切都无法拯救你。&lt;/p&gt;
&lt;h2 id=&#34;执行力&#34;&gt;执行力&lt;/h2&gt;
&lt;p&gt;虽然你需要打造一个出色的产品，但这还远远不够。你还需要把它变成一个出色的公司，并且你需要自己去做&amp;ndash;雇佣一个“有经验的管理者”来做所有这些工作的幻想是非常普遍的，也是许多失败公司的坟墓。你长时间内不能把工作外包给别人。&lt;/p&gt;
&lt;p&gt;这听起来很明显，但你必须要赚钱。现在是开始思考如何实现的好时机。&lt;/p&gt;
&lt;p&gt;CEO 的唯一普遍职责就是确保公司成功。即使你有许多缺点，通常会让你无法胜任 CEO 的职位，只要你雇佣能弥补你自身技能的人，并让他们做好自己的工作，作为创始人，你就能做到这一点。那些有经验的 CEO，有华丽的 MBA 学位，可能没有你所拥有的技能缺口，但他或她不会像你那样理解用户，不会有同样的产品直觉，也不会那么在乎。&lt;/p&gt;
&lt;h2 id=&#34;成长&#34;&gt;成长&lt;/h2&gt;
&lt;p&gt;成长和动力是执行力的关键。只要不是以“90 美分卖出 1 美元的方式”获得的成长，成长就能解决所有问题，而缺乏成长则只能通过成长来解决。如果你在成长，感觉就像你在赢，人们会感到快乐。如果你在成长，新的角色和责任会不断出现，人们会感到他们的职业生涯在进步。如果你没有成长，就感觉你在输，人们会不快乐并离开。如果你没有成长，人们只会为责任斗争和归责。&lt;/p&gt;
&lt;p&gt;创始人和员工在没有动力的创业公司中几乎都会疲惫不堪。这种情况的消沉程度是难以言喻的。&lt;/p&gt;
&lt;p&gt;执行力的首要准则是“永不失去动力”。但是如何做到呢？&lt;/p&gt;
&lt;p&gt;最重要的方式就是把它当作你的首要任务。公司做的是 CEO 所衡量的。对公司进行优化的单一指标是有价值的，找到正确的成长指标是值得花时间的。如果你关心成长，并设定了执行标准，公司的其他部分都会集中精力去实现。&lt;/p&gt;
&lt;p&gt;这里有几个例子。&lt;/p&gt;
&lt;p&gt;Airbnb 的创始人画了一幅他们想要达到的增长图，展望未来。他们把这画放在各处——冰箱上，桌子上，浴室的镜子上。如果他们那周达到了这个数字，那就好。如果没有，那就是他们唯一会谈论的事情。&lt;/p&gt;
&lt;p&gt;马克·扎克伯格曾经说过，Facebook 最重要的创新之一是他们在增长放缓时建立了一个增长小组。这个小组是公司中最有声望的小组之一——每个人都知道它的重要性。&lt;/p&gt;
&lt;p&gt;保持一个阻碍增长的事情的列表。作为一个公司来讨论你们如何能够更快地增长。如果你知道什么是限制因素，你就会自然地思考如何解决它们。&lt;/p&gt;
&lt;p&gt;对于你考虑做的任何事情，问自己“这是优化增长的最好方式吗？”例如，去参加一个会议通常不是优化增长的最好方式，除非你期望在那里卖出很多产品。&lt;/p&gt;
&lt;p&gt;对于度量（以及财务）有极端的内部透明度是一件好事。出于某种原因，创始人总是对此感到非常害怕。但是，这对于让整个公司专注于增长是非常有益的。似乎公司员工对度量的关注度与他们的表现之间存在直接的关联。如果你隐藏度量，人们就很难专注于它们。&lt;/p&gt;
&lt;p&gt;说到度量，不要用虚荣度量来欺骗自己。这里的常见错误是专注于注册并忽略保留。但是，保留对于增长来说与新用户获取一样重要。&lt;/p&gt;
&lt;p&gt;建立内部节奏以保持动力也很重要。你想有一个可以在内外谈论的“节拍”——新的特性，客户，雇员，收入里程碑，合作伙伴等。&lt;/p&gt;
&lt;p&gt;你应该设定激进但边界可达的目标，并每月检查进度。庆祝胜利！一直在内部讨论策略，告诉每个人你从客户那里听到的事情等等。你在内部分享的信息越多——无论是好的还是坏的——你就会越好。&lt;/p&gt;
&lt;p&gt;有一些陷阱是创始人经常会掉入的。其中一个是，如果公司的增长如火如荼，但是一切都看起来非常破碎和低效，每个人都会担心事情会解体。实际上，这种情况似乎很少发生（Friendster 是我能指出的最近一个由于技术债务而死亡的创业公司的例子。）违反直觉的是，如果你的增长速度很快，但是没有任何优化——你只需要修复它&lt;/p&gt;
&lt;p&gt;创业者往往会陷入几个常见的陷阱。其中之一就是，如果公司的增长疯狂，但一切似乎都非常破烂和低效，所有人都会担心事情会破裂。实际上，这种情况很少发生（Friendster 是我能举出的最近一个因技术债务而死去的创业公司的例子）。事实证明，如果你的增长速度很快，但是没有任何东西是优化的，这是好事——你只需要修复它就可以获得更多的增长！我的最喜欢的投资就是那些增长非常快但是非常未优化的公司——它们被严重低估了。&lt;/p&gt;
&lt;p&gt;一个相关的陷阱是过多的考虑未来的问题——比如，“我们如何在大规模的情况下做到这一点？”答案是，等你到达那里的时候再去解决。因为在辩论这个问题的时候死掉的创业公司比因为没有足够思考这个问题而死掉的创业公司要多。一个好的经验法则是只考虑在你目前规模的 10 倍的情况下，事情会如何运作。大多数早期的创业公司应该将“做一些不可扩展的事情”挂在墙上，并按照它来生活。举个例子，伟大的创业公司在早期总是有很好的客户服务，而糟糕的创业公司担心对单位经济的影响以及它不会扩展。但是，优秀的客户服务会让早期的用户充满热情，而且当产品变得更好的时候，你需要的支持会更少，因为你会知道客户常常在哪些地方挣扎，并在那些地方改善产品/体验。（顺便说一下，这是一个非常重要的例子——要有优秀的客户支持。）&lt;/p&gt;
&lt;p&gt;这里有一个大的陷阱——“做一些不可扩展的事情”并不意味着你不需要最终赚钱。在早期，你的单位经济状况不好是可以的，但是你必须要有一个好的理由，解释为什么单位经济会在后期变好。&lt;/p&gt;
&lt;p&gt;另一个陷阱是因为增长在绝对数值上很差，即使在百分比上很好，也会让人感到沮丧。人们对于指数增长的直觉是非常差的。提醒你的团队这一点，所有的大公司都是从小数目开始增长的。&lt;/p&gt;
&lt;p&gt;创始人常常陷入一些陷阱，他们认为这些陷阱会带来增长，但实际上几乎从未成功，却浪费了大量的时间。常见的例子包括与其他公司的交易和“大新闻发布”。对这些要警惕，并且明白它们实际上永远不会起作用。相反，像所有伟大的公司一样，通过打造用户喜爱的产品、先手动招募用户，然后测试各种增长策略（如广告、推荐计划、销售和营销等），并做更多有效果的事情。向你的客户询问你可以在哪里找到更多像他们一样的人。&lt;/p&gt;
&lt;p&gt;记住，销售和营销并不是坏词。虽然如果你没有一个伟大的产品，它们都无法拯救你，但它们都可以帮助你大幅加速增长。如果你是一家企业公司，你的公司可能需要在这些方面做得好。&lt;/p&gt;
&lt;p&gt;不要害怕销售。至少有一个创始人必须擅长要求人们使用你的产品并给你钱。&lt;/p&gt;
&lt;p&gt;Alex Schultz&lt;a href=&#34;http://startupclass.samaltman.com/courses/lec06/&#34; title=&#34;对消费产品的增长给出了一个讲座&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;对消费产品的增长给出了一个讲座&lt;/a&gt;，值得一看。对于 B2B 产品，我认为几乎总是要追踪每月的收入增长，记住销售周期较长意味着前几个月可能看起来很难看（尽管有时把创业公司作为初始客户可以解决这个问题）。&lt;/p&gt;
&lt;h2 id=&#34;聚焦与高强度&#34;&gt;聚焦与高强度&lt;/h2&gt;
&lt;p&gt;如果我必须将我的建议精简为两个词，我会选择聚焦和高强度。这两个词似乎真的适用于我所知道的最好的创始人。&lt;/p&gt;
&lt;p&gt;他们对自己的产品和增长保持坚定不移的关注。他们不试图做所有的事情——实际上，他们经常说“不”，这很困难，因为开始创业的人往往喜欢尝试新事物。&lt;/p&gt;
&lt;p&gt;作为一个普遍的原则，不要让你的公司开始做下一件事，除非你已经在第一件事上取得了主导地位。我所知道的所有伟大的公司都没有一开始就做很多事情——他们从对一件事充满信念开始，然后一路看下去。你可以做的事情比你想象的要少。做太多错误的事情是创业公司死亡的一个非常、非常常见的原因。优先级的设定是关键，也是困难的。（设定公司的优先级和设定你自己的战术优先级同样重要。我发现对我个人来说最有效的方法是为每一天制定一份包含大约 3 个主要任务和大约 30 个次要任务的纸质清单，以及一份列出整体目标的年度待办事项清单。）&lt;/p&gt;
&lt;p&gt;虽然伟大的创始人不做很多大项目，但他们做任何事都非常高强度。他们非常快地完成事情。他们果断，这在你经营创业公司时很困难——你会得到很多相互矛盾的建议，这既因为有多种方式可以做事情，也因为存在很多糟糕的建议。伟大的创始人会倾听所有的建议，然后迅速做出自己的决定。&lt;/p&gt;
&lt;p&gt;请注意，这并不意味着要对所有事情都保持高强度——这是不可能的。你必须选择正确的事情。正如 Paul Buchheit 所说，找到用 10% 的努力获得 90% 价值的方法。市场不关心你工作多么辛苦——它只关心你是否做了正确的事情。&lt;/p&gt;
&lt;p&gt;在对产品质量痴迷和非常快速地移动之间取得平衡非常困难。但这是伟大创始人的最明显特点之一。&lt;/p&gt;
&lt;p&gt;我从未见过一个行动缓慢的创始人能够取得真正的成功。&lt;/p&gt;
&lt;p&gt;你和其他创业公司没有什么两样。你依然需要保持专注并且快速行动。那些构建火箭和核反应堆的公司仍然设法做到这一点。所有失败的公司都有一个宠物解释，为什么他们与众不同，不需要快速行动。&lt;/p&gt;
&lt;p&gt;当你发现有效的方法，继续这样做。不要分心去做其他事情。不要松懈。&lt;/p&gt;
&lt;p&gt;不要被初期的成功所迷惑——你不是通过参加大量的网络活动和发表大量的演讲才取得了初步的成功。创业公司的创始人在初步取得成功后有两条路径可选：要么他们继续做他们正在做的事情，要么他们开始花大量的时间思考他们的“个人品牌”并享受作为创始人的地位。&lt;/p&gt;
&lt;p&gt;参加会议和接受媒体报道的诱惑很难抵挡——他们让人感觉很好，尤其是在看到你所在领域的其他创始人得到关注时。但是这种情况不会持续很久。最终，新闻媒体会弄清楚谁才是真正的赢家，如果你的公司真的成功了，你会得到比你期望的更多的关注。极端的情况——初创阶段的创始人有自己的公关——你可能认为这只会在电视节目中出现，但实际上真的存在，而且他们几乎总是失败。&lt;/p&gt;
&lt;p&gt;长期来看，专注和强度将取得胜利。 (Charlie Rose 曾经说过，世界上的事情是通过专注和人际关系的结合来完成的，这一点一直让我记忆犹新。)&lt;/p&gt;
&lt;h2 id=&#34;ceo-的职责&#34;&gt;CEO 的职责&lt;/h2&gt;
&lt;p&gt;我之前提到过，CEO 唯一的职责就是确保公司取得胜利。尽管这是事实，但我想更具体地谈谈 CEO 应该如何安排他或她的时间。&lt;/p&gt;
&lt;p&gt;一个 CEO 需要 1）为公司设定愿景和戈略；2）向所有人宣扬公司；3）招聘和管理团队，尤其是在你自己有空白的领域；4）筹集资金；以及 5）设定执行质量标准。&lt;/p&gt;
&lt;p&gt;除此之外，还要找出你最喜欢的商业部分，并保持参与。&lt;/p&gt;
&lt;p&gt;正如我一开始提到的，这是一份繁重的工作。如果你成功了，它会在你无法想象的程度上接管你的生活——你会一直在思考公司的事情。极度的专注和强度意味着它并不是工作生活平衡的最佳选择。你可以有另一件大事——你的家庭，做很多铁人三项比赛，等等——但可能不会有比这更多的事情。你必须时刻保持警惕，有很多决策只有你可以做，无论你如何善于委托。&lt;/p&gt;
&lt;p&gt;你应该目标明确，对你的团队和外界总是反应迅速，总是清楚地说明战略和优先事项，参加所有重要的事情，并快速执行（尤其是在别人因为等待你的决定而被阻碍时）。你还应该采取一种“不择手段”的态度——会有很多令人不愉快的疲劳。如果团队看到你在做这些事情，他们也会这么做。&lt;/p&gt;
&lt;p&gt;管理你自己的心理是既困难又重要的。这在现在已经成为陈词滥调，但实际上是真的——情绪的高低起伏非常剧烈，如果你没有找到在它们中间保持平衡的方法，你会遇到困难。做 CEO 是孤独的。当一切都在崩溃时，你可以打电话给其他 CEO 的关系是很重要的（YC 的一个重要的意外发现就是为创始人提供了一个可以有同行的方式）。&lt;/p&gt;
&lt;p&gt;一个成功的创业公司需要很长的时间——当然比大多数创始人在开始时想的要长。你不能把它当作通宵达旦的事情。你必须吃好，睡好，做运动。你必须花时间和你的家人和朋友在一起。你还需要在你真正热衷的领域工作——没有别的事情能支持你十年。&lt;/p&gt;
&lt;p&gt;一切都会感觉像是破碎的——灾难的多样性和程度会让你惊讶。你的工作就是面带微笑地修复它们，并向你的团队保证一切都会好的。通常事情没有看起来那么糟，但有时候它们实际上真的很糟。无论如何，继续前进。继续成长。&lt;/p&gt;
&lt;p&gt;CEO 不能找借口。会有很多坏事和不公平的事情发生。但不要让自己说，尤其是对团队说，“如果我们有更多的钱”或者“如果我们有另一个工程师”。要么找出一种方法来实现，要么找出不需要它的方法做事。让自己找很多借口的人通常会失败，做创业公司的 CEO 这样做几乎总是会失败。让自己对不公感到沮丧 1 分钟，然后意识到找出解决方案取决于你。努力让人们在谈论你时说“X 总是能够完成事情”。&lt;/p&gt;
&lt;p&gt;没有一个第一次做创始人的人知道他或她在做什么。你以多大的程度理解这一点，并寻求帮助，你就会更好。花时间学习成为一个好的领导和管理者是值得的。做这件事的最好方法是找一个导师——读书似乎不太管用。&lt;/p&gt;
&lt;p&gt;我们在 YC 给出的很多建议都是“直接问他们”或“直接去做”。第一次做创始人的人认为当你需要别人的东西或者你想做一些新的事情时，一定有一些秘密。但是再次强调，创业公司是骗术停止工作的地方。只要直接点，愿意要求你想要的，不要做一个混蛋。&lt;/p&gt;
&lt;p&gt;你需要为他人扭曲现实，但不是为你自己。你必须让其他人相信你的公司有望成为本十年最重要的创业公司，但你自己应该对可能出错的事情保持警惕。&lt;/p&gt;
&lt;p&gt;坚持到底。大多数创始人放弃得太快，或者太快地转向下一个产品。如果事情通常不顺利，找出问题的根本原因，并确保你解决了这个问题。做一个成功的创业公司 CEO 的很大一部分就是不放弃（虽然你也不想在所有的理由都被否定后还固执地坚持——这是另一个明显的矛盾，也是一个很难做出的判断）。&lt;/p&gt;
&lt;p&gt;保持乐观。尽管可能世界上有一位伟大的悲观主义 CEO，但我还没遇到过他或她。CEO 需要有一种未来会变得更好的信念，并且公司将在使未来变得更好的过程中发挥重要作用，这对于 CEO 来说很重要，他们需要将这种信念传染给公司的其他成员。在理论上这很简单，但在面对短期挑战的现实中却很困难。不要忽视长期愿景，相信日复一日的挑战终将被遗忘，被年复一年的进步所取代。&lt;/p&gt;
&lt;p&gt;你最重要的工作之一是定义使命和价值观。这可能感觉有点做作，但在初期就开始做这件事是值得的。无论你在一开始设置的是什么，几年后通常仍然有效，随着你的成长，每一个新加入的人都需要首先接受并然后向其他人推销公司的使命和价值观。所以尽早将你的文化价值观和使命写下来。&lt;/p&gt;
&lt;p&gt;我认为值得重复的一个老生常谈的观点是：建立一个公司有点像建立一个宗教。如果人们不能将他们日常的工作与他们关心的更高目标联系起来，他们就无法做好自己的工作。我认为在 YC 网络中，Airbnb 在这方面做得最好，我强烈建议大家去看看他们的文化价值观。&lt;/p&gt;
&lt;p&gt;CEO 经常犯的一个错误是在商业的老路上创新，而不是在新产品和解决方案上创新。例如，许多创始人认为他们应该花时间去发现新的人力资源、营销、销售、融资、公关等方法。这几乎总是不好的。在已经有定式的领域里，做已经被证明有效的事情，将你的创新精力集中在你正在构建的产品或服务上。&lt;/p&gt;
&lt;h2 id=&#34;招聘和管理&#34;&gt;招聘和管理&lt;/h2&gt;
&lt;p&gt;招聘是你最重要的工作之一，也是打造一家伟大公司（而非伟大产品）的关键。&lt;/p&gt;
&lt;p&gt;我对招聘的第一条建议就是不要去做。我们在 YC 合作过的最成功的公司都等待了相对较长的时间才开始雇佣员工。员工很贵。员工会增加组织复杂性和沟通开销。有些你可以对创始人说的事情，你在员工面前就不能说。员工还会增加惯性——随着团队人数的增加，改变方向就会变得越来越困难。抵制从你的员工数量中寻求自我价值的冲动。&lt;/p&gt;
&lt;p&gt;最优秀的人有很多机会。他们想加入火箭般的公司。如果你一无所有，你很难聘请到他们。一旦你明显得胜，他们就会想加入你。&lt;/p&gt;
&lt;p&gt;值得重申的是，优秀的人有很多选择，而你需要优秀的人来打造一家伟大的公司。请慷慨地给予股权、信任和责任。愿意去追求那些你认为你可能无法得到的人。记住，你想聘请的那种人如果愿意的话，他们可以自己创办公司。&lt;/p&gt;
&lt;p&gt;当你处于招聘模式（即从你获得产品市场契合度到 T 无穷大的时候），你应该花大约 25% 的时间在这上面。至少有一位创始人，通常是 CEO，需要在招聘上变得很棒。这是大多数 CEO 的时间消耗最大的活动。每个人都说 CEO 应该花大量的时间招聘，但实际上，除了最好的 CEO，没有人这么做。这可能有一些道理。&lt;/p&gt;
&lt;p&gt;不要妥协于你雇佣的人的质量。每个人都知道这一点，然而每个人在某个绝望的时刻都妥协过。每个人都会后悔，有时这几乎会杀死公司。好人和坏人都有感染力，如果你从一开始就雇佣了平庸的人，平均水平通常不会上升。刚开始就雇佣了平庸的早期员工的公司几乎永远无法恢复。对人的直觉要有信心。如果你有疑虑，那么答案就是不。&lt;/p&gt;
&lt;p&gt;不要雇佣长期消极的人。他们不适合早期创业公司的需求——世界其他地方每天都会预测你的失败，公司内部需要团结一致，相信反其道而行之。&lt;/p&gt;
&lt;p&gt;对于几乎所有的角色，都应优先考虑能力而非经验。寻找具有原始智力并且有完事业成果的人。寻找你喜欢的人——你们会一起度过很多时间，而且经常处于紧张的情况。对于你不熟悉的人，尝试在他们全职加入之前一起做一个项目。&lt;/p&gt;
&lt;p&gt;投入时间成为一个好的管理者。这对大多数创始人来说都很困难，而且肯定是反直觉的。但这是非常重要的。找到可以在这方面帮助你的导师。如果你在这方面做得不好，你会很快失去员工，如果你不能留住员工，你无论你是世界上最好的招聘者，都没关系。关于如何做一个好的管理者的原则已经讨论得很多了，但我从未看到过讨论“不要进入英雄模式”的。大多数初次当管理者的人在某个时候都会成为这种模式的受害者，尝试自己做所有的事情，并对他们的员工不可接近。这通常以崩溃告终。抵制任何进入这种模式的诱惑，并愿意接受项目延期以有一个运作良好的团队。&lt;/p&gt;
&lt;p&gt;说到管理，尽力让所有人都在同一个办公室。不知为何，创业公司总是在这方面妥协。但几乎所有最成功的创业公司开始的时候都在一起。我认为远程工作对于大公司可能很好，但对于创业公司来说，它并不是成功的秘诀。&lt;/p&gt;
&lt;p&gt;最后，快速解雇。每个人都知道这一点，但没人会做。但我还是想说一下。另外，无论他们在做什么事情上有多好，只要他们对文化有毒，就解雇他们。文化是由你雇佣、解雇和提升的人来定义的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.samaltman.com/how-to-hire&#34; title=&#34;我写了一篇更详细的博客文章。&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我写了一篇更详细的博客文章。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;竞争对手&#34;&gt;竞争对手&lt;/h2&gt;
&lt;p&gt;关于竞争对手的一句话：竞争对手是创业公司的鬼故事。创业公司认为它们是杀死 99% 的创业公司的原因。但 99% 的创业公司是自杀，而非他杀。你应该更担心你所有的内部问题。如果你失败，很可能是因为你没能制造出一个伟大的产品，和/或没能打造出一个伟大的公司。&lt;/p&gt;
&lt;p&gt;99% 的时间，你应该忽略竞争对手。特别是当他们筹集大量资金或在媒体上制造大量噪音时，更应该忽略他们。在他们用一个真实的，已经发布的产品击败你之前，不要担心竞争对手。新闻发布比写代码更容易，写代码又比制作伟大的产品更容易。用亨利·福特的话来说：“应当害怕的竞争者是那些完全不理会你，只是一直在改善他们自己的业务的人。”&lt;/p&gt;
&lt;p&gt;每一个巨头公司在他们小时候都面对过比你现在面临的更严重的竞争威胁，而他们都很好的度过了。总是有对策。&lt;/p&gt;
&lt;h2 id=&#34;赚钱&#34;&gt;赚钱&lt;/h2&gt;
&lt;p&gt;哦，赚钱。你需要弄清楚如何去做。&lt;/p&gt;
&lt;p&gt;这个的简短版本是，你必须让人们支付给你的钱超过你提供商品/服务的成本。不知为何，人们总是忘记考虑提供服务的成本部分。&lt;/p&gt;
&lt;p&gt;如果你有一个免费的产品，不要计划通过购买用户来增长。对于依赖广告的业务来说，这真的很难。你需要制作一些人们会和朋友分享的东西。&lt;/p&gt;
&lt;p&gt;如果你有一个付费产品，但客户生命周期价值 (LTV) 小于 500 美元，你通常无法负担销售。试验不同的用户获取方法，如 SEO/SEM，广告，邮件等，但尽量在 3 个月内回收你的客户获取成本 (CAC)。&lt;/p&gt;
&lt;p&gt;如果你有一个付费产品，其 LTV（净收入）超过 500 美元，你通常可以负担得起直销。尝试先自己销售产品，了解什么是有效的。《Hacking Sales》是一本有用的书。&lt;/p&gt;
&lt;p&gt;无论如何，尽快达到“拉面盈利”——即，赚足够的钱让创始人可以靠拉面度日——的状态。当你到达这里，你就掌握了自己的命运，不再受投资者和金融市场的摆布。&lt;/p&gt;
&lt;p&gt;一直关注你的现金流。虽然这听起来难以置信，但我们已经看到过创始人在没有意识到的情况下用光了资金（并且&lt;a href=&#34;http://paulgraham.com/aord.html&#34; title=&#34;阅读 Paul Graham 的文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阅读 Paul Graham 的文章&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;筹资&#34;&gt;筹资&lt;/h2&gt;
&lt;p&gt;大多数创业公司在某个时候都会筹资。&lt;/p&gt;
&lt;p&gt;在你需要资金或者在条件好的情况下可以获得资金时，你应该筹资。小心不要失去你的节俭精神，或者开始通过投钱来解决问题。没有足够的钱可能会很糟糕，但是有太多的钱几乎总是糟糕的。&lt;/p&gt;
&lt;p&gt;成功筹资的秘诀是拥有一家好公司。所有其他的创始人试图过度优化流程的东西可能只在 5% 的时间里有用。投资者正在寻找的是那些无论他们是否投资，都会非常成功，但有了外部资本可以更快发展的公司。“非常成功”的部分很重要——因为投资者的回报主要是由大成功驱动的，如果一个投资者认为你有 100% 的机会创造一个 1000 万美元的公司，但几乎没有机会建立一个更大的公司，他/她即使在非常低的估值下也可能不会投资。总是解释为什么你可能会获得巨大的成功。&lt;/p&gt;
&lt;p&gt;投资者受到错过下一个谷歌和害怕在看起来明显愚蠢的事情上损失钱的双重恐惧的驱动。（对于最好的公司，他们同时害怕这两个。）&lt;/p&gt;
&lt;p&gt;在你的公司处于不足以吸引资本的状态时，试图筹资是个坏主意。你会烧钱并浪费时间。&lt;/p&gt;
&lt;p&gt;如果你在筹资方面挣扎，不要失去信心。许多最好的公司都曾在这方面挣扎，因为最好的公司通常在一开始看起来很糟糕（而且他们几乎总是看起来不合时宜）。当投资者对你说不的时候，相信他们说的“不”，但不要相信他们的理由。并记住，除了“是”，任何东西都是“不”——投资者有一种让“不”听起来像“可能是”的能力。&lt;/p&gt;
&lt;p&gt;进行筹款谈判时，你需要并行进行，而不是顺序地按照你最喜欢的投资者名单进行。让投资者采取行动的途径，就是害怕其他投资者会抢走他们的机会。&lt;/p&gt;
&lt;p&gt;把筹款看作是一种必要的恶，尽快完成。有些创始人热衷于筹款；这总是不好的。最好将这项任务交给一位创始人，这样公司就不会停滞不前。&lt;/p&gt;
&lt;p&gt;请记住，大多数风险投资人对大多数行业了解不深。数据永远是最有说服力的。&lt;/p&gt;
&lt;p&gt;这种情况开始有所改变，但不幸的是，大多数投资者（尤其是 Y Combinator）仍然需要你们共同认识的人的介绍，他们才会认真对待你。&lt;/p&gt;
&lt;p&gt;坚持使用简洁的条款（复杂的条款会累积并在每一轮投资中变得更糟），但不要过度优化，特别是在估值方面。估值是可以量化竞争的东西，所以创始人喜欢争夺最高估值。但中等估值并不重要。&lt;/p&gt;
&lt;p&gt;第一笔资金最难获得，所以应该集中精力获取，这通常意味着你需要将注意力集中在最喜欢你的人身上。始终要有多个计划，其中一个是不筹集任何资金，根据兴趣灵活调整——如果你能更好地使用更多的资金，并且它在合理的条款下可用，那么请考虑接受。&lt;/p&gt;
&lt;p&gt;擅长推销的一个重要秘诀是，让你的故事尽可能清晰、易懂。当然，最重要的秘诀是，你真的需要有一个好公司。关于推销内容有很多想法，但至少你需要包括：使命、问题、产品/服务、商业模式、团队、市场和市场增长率、财务。&lt;/p&gt;
&lt;p&gt;要记住，每一轮筹资的标准都会更高。如果你在种子轮时只是一个引人注目的演讲者，那么在 A 轮筹资时可能就没有效果了。&lt;/p&gt;
&lt;p&gt;好的投资者确实能带来很大的价值。坏的投资者会带来很大的负面影响。大多数投资者处于中间地位，既没有增加也没有减少。只投资少量资金的投资者通常不会对你有任何帮助（即，要警惕聚会轮投资）。&lt;/p&gt;
&lt;p&gt;优秀的董事会成员是公司外部驱动力中最好的一种，除了用户之外，外部驱动力比大多数创始人想象的更有价值。愿意接受较低的估值，以获取愿意积极参与的优秀董事会成员。&lt;/p&gt;
&lt;p&gt;我认为&lt;a href=&#34;http://paulgraham.com/fr.html&#34; title=&#34;Paul Graham 的这篇文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paul Graham 的这篇文章&lt;/a&gt; 是关于筹款的最好的文章。&lt;/p&gt;
&lt;h2 id=&#34;结束语&#34;&gt;结束语&lt;/h2&gt;
&lt;p&gt;要记住，每一个伟大的想法都有至少一千人有。其中有一个人会成功。区别在于执行。这是一种磨磨蹭蹭的过程，每个人都希望有其他方式将“想法”转化为“成功”，但是还没有人找到方法。&lt;/p&gt;
&lt;p&gt;所以你需要的就是一个伟大的想法，一个伟大的团队，一个伟大的产品，以及伟大的执行力。那么简单！;)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何在 Docker 容器中运行 GUI 应用程序</title>
      <link>https://jimmysong.io/trans/run-gui-applications-as-containers-with-x11docker/</link>
      <pubDate>Tue, 19 Sep 2023 12:03:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/run-gui-applications-as-containers-with-x11docker/</guid>
      <description>
        
        
        &lt;p&gt;作为开发人员，您可能需要使用 GUI 容器进行工作。如果是这种情况，您会很快发现，传统的 Docker 运行时引擎并不支持运行 GUI 应用程序（除非它们是基于 Web 的类型）。当您想要开发容器化的 GUI 应用程序时，您该怎么办呢？&lt;/p&gt;
&lt;p&gt;幸运的是，有许多第三方应用程序可以在桌面上轻松启动 GUI 容器。正如您可能预期的那样，这需要一个桌面环境（否则，您将在更传统的基于服务器的设置上进行开发）。其中一个应用程序叫做 &lt;a href=&#34;https://github.com/mviereck/x11docker&#34; title=&#34;x11docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x11docker&lt;/a&gt;。顾名思义，此应用程序与 Linux X 显示服务器配合使用（这意味着您需要一个 Linux 发行版才能使其正常工作）。&lt;/p&gt;
&lt;p&gt;x11docker 应用程序包括以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPU 硬件加速&lt;/li&gt;
&lt;li&gt;PulseAudio 或 ALSA 声音&lt;/li&gt;
&lt;li&gt;剪贴板共享&lt;/li&gt;
&lt;li&gt;打印机和摄像头访问&lt;/li&gt;
&lt;li&gt;持久的主目录&lt;/li&gt;
&lt;li&gt;Wayland 支持&lt;/li&gt;
&lt;li&gt;语言区域设置创建&lt;/li&gt;
&lt;li&gt;容器内的多个 init 系统和 DBus&lt;/li&gt;
&lt;li&gt;支持多个容器运行时和后端（包括 Podman）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可能会问：“X11 不安全吗？”是的，确实。幸运的是，x11docker 通过使用多个 X 服务器来避免 X 服务器泄漏。因此，您可以放心使用该工具，而不必担心会暴露自己、系统或容器给典型的 X11 服务器弱点。&lt;/p&gt;
&lt;p&gt;需要记住的一件事是，x11docker 创建了一个非特权容器用户。该用户的密码为 x11docker，并限制了容器的功能。因此，某些应用程序可能无法按预期方式运行。例如，当尝试从容器内运行 Tor 浏览器时，它无法访问 /dev/stdout，这意味着容器将无法运行。但并不是所有容器都是如此。我将用 VLC 媒体播放器进行演示，该播放器可以按预期运行。&lt;/p&gt;
&lt;p&gt;接下来，我将向您展示如何在运行中的基于 Ubuntu 的桌面操作系统实例上安装 x11docker。当然，首先您必须安装 Docker 运行时引擎。为此，我将向您展示两种不同的方法。&lt;/p&gt;
&lt;p&gt;准备好了吗？我们开始吧。&lt;/p&gt;
&lt;h2 id=&#34;所需的工具&#34;&gt;所需的工具&lt;/h2&gt;
&lt;p&gt;正如我已经提到的，您需要运行中的基于 Ubuntu 的 Linux 桌面发行版实例。您还需要一个具有 sudo 权限的用户。就这些。&lt;/p&gt;
&lt;h2 id=&#34;安装-docker&#34;&gt;安装 Docker&lt;/h2&gt;
&lt;p&gt;首先，我们将使用传统的方法安装 Docker 运行时引擎。首先要做的是使用以下命令将官方 Docker GPG 添加到系统中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -fsSL &amp;lt;https://download.docker.com/linux/ubuntu/gpg&amp;gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，我们必须添加 Docker 仓库，以便安装软件。使用以下命令完成此操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] &amp;lt;https://download.docker.com/linux/ubuntu&amp;gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; stable&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /etc/apt/sources.list.d/docker.list &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加仓库后，我们将使用以下命令安装一些依赖项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用以下命令更新 apt：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我们可以使用以下命令安装 Docker：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install docker-ce docker-ce-cli containerd.io -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了能够在不使用 &lt;em&gt;sudo&lt;/em&gt; 的情况下运行 Docker 命令（这可能存在安全风险），请使用以下命令将您的用户添加到 docker 用户组中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo usermod -aG docker &lt;span class=&#34;nv&#34;&gt;$USER&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注销并重新登录以使更改生效。&lt;/p&gt;
&lt;p&gt;如果您希望采用快速方式，可以使用以下命令安装 Docker：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install curl wget uidmap -y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget -qO- https://get.docker.com/ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要能够以无特权方式运行 Docker，请执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dockerd-rootless-setuptool.sh install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何安装-x11docker&#34;&gt;如何安装 x11docker&lt;/h2&gt;
&lt;p&gt;在安装 x11docker 之前，我们必须安装一些依赖项。可以使用以下命令完成此操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install xpra xserver-xephyr xinit xauth xclip x11-xserver-utils x11-utils -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，使用以下命令安装 x11docker：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -fsSL https://raw.githubusercontent.com/mviereck/x11docker/master/x11docker &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo bash -s -- --update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，您可以使用以下命令更新 x11docker：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo x11docker --update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何使用-x11docker&#34;&gt;如何使用 x11docker&lt;/h2&gt;
&lt;p&gt;安装了 x11docker 之后，就可以开始测试了。让我们使用 VLC 应用程序容器进行测试。首先，使用以下命令拉取镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull jess/vlc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拉取镜像后，使用以下命令（借助 x11docker）运行 VLC：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x11docker --pulseaudio --share&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/Videos jess/vlc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您应该会看到 VLC 窗口打开，准备好供使用（图 1）。它的速度比直接安装在您的桌面上要慢一些，但除此之外，它应该按预期工作。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/run-gui-applications-as-containers-with-x11docker/docker_hu7af1eb32b7036660bb546c727cf1eec4_34121_621x486_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/run-gui-applications-as-containers-with-x11docker/docker.jpg&#34; data-img=&#34;/trans/run-gui-applications-as-containers-with-x11docker/docker.jpg&#34; data-width=&#34;621&#34; data-height=&#34;486&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;当然，如果您是开发人员，这对您帮助不大，因为您想要开发自己的容器。您可以始终创建要使用的映像，对其进行标记，将其推送到您选择的存储库，使用 docker pull 命令将其拉到开发系统上，然后使用 x11docker 部署容器。&lt;/p&gt;
&lt;p&gt;就是这样。现在，您可以通过 x11docker 在 Docker 容器中运行 GUI 应用程序了。借助自己的图像部署自己的定制容器，看看它的工作原理。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>WebAssembly 能够取代 Kubernetes 吗？探索其优势和限制</title>
      <link>https://jimmysong.io/trans/wasm-vs-kubernetes/</link>
      <pubDate>Mon, 11 Sep 2023 19:03:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/wasm-vs-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;摘要：WebAssembly 可以作为一种部署应用程序的方式，可以在服务器操作系统上运行，且在许多不同的硬件环境中表现出色。与 Kubernetes 相比，WebAssembly 的优点在于简易性和安全性。但是，Kubernetes 始终有其用途，它将始终用于编排微服务和容器。因此，对于某些用例来说，WebAssembly 可以替代 Docker 和容器，但是在高度分布式的云原生环境中，使用 WebAssembly 来编排容器和微服务程度上与 Kubernetes 相同的程度是不可能的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;是的，WebAssembly 可以解决 Kubernetes 的一些问题。&lt;/p&gt;
&lt;p&gt;WebAssembly 或 Wasm 被证明是一种在 Web 浏览器上运行代码的非常实用的方式，它可以作为编译器。它已经作为一种语言运行得非常好，以至于世界万维网联盟（W3C）在 2019 年将其命名为 Web 标准，成为第四个 Web 标准，与 HTML、CSS 和 JavaScript 一起。&lt;/p&gt;
&lt;p&gt;主要的 Web 浏览器，包括 Mozilla、Chrome、Internet Explorer 等，都兼容 Wasm，用于编写代码和创建 Web 浏览器应用程序的使用越来越普遍。除了 Web 工作马车 JavaScript 外，Wasm 还可以容纳其他语言，包括 Go、.NET、C++、Java、PHP、Rust 和 Python。&lt;/p&gt;
&lt;p&gt;Adobe 依赖于 Wasm/WASI 平台在浏览器上直接运行 C++ 代码，这是其中一个更有趣的用例。这使得用户可以在浏览器上直接运行 Adobe 的 Photoshop 和 Acrobat，从而无需在用户的计算机上下载这些软件工具进行工作。&lt;/p&gt;
&lt;p&gt;最终，开发人员意识到 Wasm 也可以在服务器操作系统上运行，现在它的使用范围扩展到硬件平台。它在许多不同的硬件环境中表现出色，从服务器端到边缘部署和物联网设备，或者任何可以直接在 CPU 上运行代码的地方。代码打包在整洁的 Wasm 可执行文件中，可以将其与容器或甚至可以与较少配置的代码和目标运行的迷你操作系统进行比较。无论在哪里部署代码，应用程序都比仅限于 Web 浏览器环境更加广泛。&lt;/p&gt;
&lt;p&gt;在许多方面，Wasm 的功能可以与一个“大杂烩”多语言编译器相比。然而，与编译器相比，同一二进制可执行文件的 Wasm 可以针对多个平台进行目标和运行，而无需在 Wasm 代码和目标设备上进行配置。&lt;/p&gt;
&lt;p&gt;因此，与编译器相比，Wasm 在完美针对多个目标运行二进制可执行文件时显然比较优越。而在这种情况下，单个二进制可执行文件可以针对多个目标运行，而无需重新配置：这就是 Wasm 的优美之处。&lt;/p&gt;
&lt;p&gt;“Wasm 终于让我们在不涉及开发人员的情况下在服务器、云和边缘设备之间移动代码。这将最终结束开发人员花费大量时间担心调整他们的代码以及为不同的目标平台提供支持的时代，”Enterprise Management Associates（EMA）的分析师 Torsten Volk 告诉 The New Stack。“Wasm 的工作是在所有这些平台上提供一致的运行时。”&lt;/p&gt;
&lt;p&gt;因此，Wasm 可以在某些情况下为 Kubernetes 提供很好的替代方案。与 Kubernetes 相比的主要优点是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简易性&lt;/strong&gt;。在部署应用程序时，即使将应用程序分发到不同的终端，也会有许多明显缺少的步骤。Cosmonic 的 PaaS 版本可以用几个命令行在图形界面中部署应用程序。当使用 Fermyon 和 Fastly 的 Compute@Edge 时，情况也是如此。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;。在 Kubernetes 这种高度分布式的环境中，安全性是一个真正的问题，并且问题点的详尽列表太长，这里不再赘述。微服务之间的互连性意味着，在一个 Pod 中有数百个入口点中获得访问权限的攻击者可能会对组织的整个基础架构造成严重破坏。&lt;a href=&#34;https://thenewstack.io/kubernetes-secrets-management-3-approaches-9-best-practices/&#34; title=&#34;秘密管理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;秘密管理&lt;/a&gt;是另一个问题，并且与名称一样，在容器中指定谁可以访问它们也存在困难。&lt;/p&gt;
&lt;p&gt;Wasm 的可移植性和一致性可以使安全性和合规性更易于管理（再次强调，它在 CPU 级别的二进制格式中运行）。此外，Wasm 结构的简单性意味着代码在几乎直接到达端点的封闭沙箱环境中发布。Wasm 并非没有漏洞可以利用。只是相对于 Kubernetes，它的漏洞利用可能性更少。&lt;/p&gt;
&lt;h2 id=&#34;但它们并不是同一件事情&#34;&gt;但它们并不是同一件事情&lt;/h2&gt;
&lt;p&gt;Wasm 提供了巨大的机会，并且可能会作为一种部署应用程序的方式，在未来几个月和几年中，我们将看到供应商变得更加有创造力，以便用户可以利用它。相比之下，那些预测 Wasm 最终将吃掉 Kubernetes 的午餐并完全取代它的人，可以说是错过了重点。不可能说会发生什么，以及其他用于在云环境中部署和管理高度分布式应用程序的技术可能最终取代 Kubernetes。但是，它高度不可能是 Wasm。&lt;/p&gt;
&lt;p&gt;这是因为 Kubernetes 始终有其用途。它将始终用于编排微服务，以及当然还有容器。它也可以被认为实际上就是 Wasm 将在其中运行的东西，并且其支持者已经说过 Wasm 非常适合在 Kubernetes 环境中运行。&lt;/p&gt;
&lt;p&gt;“&lt;a href=&#34;https://thenewstack.io/webassembly/serverless-webassembly-for-browser-developers/&#34; title=&#34;Wasm 是为开发人员提供无需编写和维护大量基础设施 YAML 的无服务器运行时&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasm 是为开发人员提供无需编写和维护大量基础设施 YAML 的无服务器运行时&lt;/a&gt;。Wasm 为应用程序代码提供了一组标准 API，以便访问关键的运行时服务，例如 SQL 或 NoSQL、Kafka 消息传递或代码调试，”Volk 说。“但是，然后 Wasm 依赖于资源编排层，可以由 Kubernetes 或任何其他调度器提供，以提供这些服务所需的基础设施资源。这些资源可以以容器、虚拟机、裸机或一些未曾想到的花哨未来技术的形式交付。”&lt;/p&gt;
&lt;p&gt;然而，并非所有人都认为 Kubernetes 作为容器编排的能力将无限期地保持其首选。许多 Wasm 领域的人都倾向于 HashiCorp 的 Nomad 调度器。的确，Fermyon 已经放弃了 Krustlet（Wasm-on-Kubernetes），并将重点转向 HashiCorp Nomad 作为其调度器。Butcher 说：“Nomad 在调度容器方面与 Kubernetes 相当，但具有一个至关重要的附加功能：它可以调度非容器工作负载。在 Fermyon 中，我们能够使 Nomad 调度和执行 WebAssembly 应用程序，而无需编写任何自定义代码。”&lt;/p&gt;
&lt;p&gt;与此同时，Kubernetes 开发人员需要在低级别上&lt;a href=&#34;https://thenewstack.io/webassembly/what-is-webassembly-and-why-do-you-need-it/&#34; title=&#34;接受 WebAssembly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;接受 WebAssembly&lt;/a&gt;，并更改内置的、容器特定的假设，Butcher 说。微软是第一家真正拥抱这个概念的公司，它的&lt;a href=&#34;https://github.com/containerd/runwasi&#34; title=&#34;runwasi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;runwasi&lt;/a&gt;项目是 WebAssembly 如何在 Kubernetes 内部执行的示例，Butcher 说。&lt;/p&gt;
&lt;p&gt;“runwasi 项目仅仅是 Kubernetes 需要经历的一系列转型中的第一步，如果它不想被 Nomad 和 Wasm 超越，它的开发人员和维护人员需要快速采取行动。”Butcher 说。“Kubernetes 的游戏要输，但如果它不想被 Nomad 和 Wasm 取代，它们需要迅速采取行动。”&lt;/p&gt;
&lt;h2 id=&#34;存在的威胁&#34;&gt;存在的威胁&lt;/h2&gt;
&lt;p&gt;WebAssembly 对于 Docker 以及容器构成了一种存在的威胁，尽管在超越 Kubernetes 方面，WebAssembly 的简单性、可移植性和安全性等优势使其成为弥补 Docker 缺陷的良好选择，特别是对于边缘和分布式应用。然而，Butcher 指出，Docker 在以下两种应用程序提供环境时表现出色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长时间运行的过程，如数据库和消息队列，这些过程需要强大的 I/O 和内存管理能力。&lt;/li&gt;
&lt;li&gt;遗留（传统）代码，该代码在应用程序中保留状态并大量使用线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Butcher 说：“我对 Docker 的看法是，它在市场上有一个强大且不可撼动的地位，WebAssembly 不太可能取代它。但是，当涉及到微服务和 Web 应用程序后端时，我认为 WebAssembly 有望削减 Docker 的使用。”&lt;/p&gt;
&lt;p&gt;因此，对于某些用例来说，Wasm 可以替代 Docker 和容器，但是在高度分布式的云原生环境中，使用 Wasm 来编排容器和微服务程度上与 Kubernetes 相同的程度是不可能的。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>创建高效 Kubernetes 策略的 7 个步骤</title>
      <link>https://jimmysong.io/trans/7-steps-to-highly-effective-kubernetes-policies/</link>
      <pubDate>Mon, 11 Sep 2023 09:03:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/7-steps-to-highly-effective-kubernetes-policies/</guid>
      <description>
        
        
        &lt;p&gt;你刚刚开始了一份新工作，在这个工作中，你第一次有责任操作和管理 Kubernetes 基础设施。你对更深入地了解云原生充满了热情，但同时也非常担心。&lt;/p&gt;
&lt;p&gt;是的，你关注的是编写符合命名和资源使用控制最佳实践的安全应用程序的最佳方法，但是关于已经部署到生产环境中的所有其他内容呢？你打开一个新的工具来查看正在发生的情况，发现有 100 个高或严重的 CVE 和 YAML 配置问题。你关闭标签页告诉自己，你以后会处理所有这些问题的。&lt;/p&gt;
&lt;p&gt;你会吗？&lt;/p&gt;
&lt;p&gt;也许最有雄心壮志和无所畏惧的人会，但问题在于云原生社区喜欢谈论安全、标准化和“左移”，但这些对话都无法减轻因安全、资源、语法和工具问题而产生的不安全感。没有一个开发范式或工具似乎发现了在不压垮人的情况下让错误配置可见的正确方式。&lt;/p&gt;
&lt;p&gt;就像我们可能面对的所有待办事项列表一样，无论是工作还是家务，我们的大脑只能有效地处理有限数量的问题。太多问题了，我们就会迷失在上下文切换和优先处理不完整的临时解决方案之间。我们需要更好的方法来限制范围（即分类），设置里程碑，最终使安全工作可管理。&lt;/p&gt;
&lt;p&gt;是时候忽略问题的数量，专注于交互地塑造，然后强制执行你的组织使用已建立策略的方式，以产生影响——无需产生不安全感。&lt;/p&gt;
&lt;h2 id=&#34;云原生策略的历史&#34;&gt;云原生策略的历史&lt;/h2&gt;
&lt;p&gt;从 Kubernetes 的第一天开始，YAML 配置就是构建完整集群和运行应用程序的基石。作为开发人员应用程序代码和运维工程师维护集群之间的必要桥梁，它们不仅难以正确获取，而且还是 Kubernetes 中大多数部署/服务级别问题的根源。更有甚者，没有人——既不是开发人员，也不是运维工程师——想独自对此负责。&lt;/p&gt;
&lt;p&gt;策略作为一种自动化的方式进入了云原生空间，用于编写和审批为生产环境编写的 YAML 配置。如果没有一个人或团队想要根据内部样式指南手动检查每个配置，那么策略可以慢慢塑造团队解决安全、资源使用和云原生最佳实践中的常见配置错误的方式。更不用说任何唯一应用程序的规则或习语了。&lt;/p&gt;
&lt;p&gt;Kubernetes 中策略的挑战在于它对如何、何时和为什么执行它们是不可知的。你可以用多种方式编写规则，在软件开发生命周期（SDLC）的不同点执行它们，并出于不同的原因使用它们。&lt;/p&gt;
&lt;p&gt;在此混乱中，没有比 Pod 安全策略（PSP）更好的例子了，它在 2016 年 v1.3 中进入 Kubernetes 生态系统。PSP 的设计目的是控制 pod 的操作方式并拒绝任何不符合要求的配置。例如，它允许 K8s 管理员防止开发人员在任何地方运行特权 pod，从而实质上将低级别的 Linux 安全决策与开发生命周期分离开来。&lt;/p&gt;
&lt;p&gt;PSP 从未离开 beta 阶段，有几个很好的理由。这些政策仅在人或进程请求创建 pod 时应用，这意味着没有办法对 PSP 进行改进或默认启用。Kubernetes 团队承认 PSP 使意外授予过于广泛的权限变得太容易了，除了&lt;a href=&#34;https://youtu.be/SFtHRmPuhEw?feature=shared&amp;amp;t=970&#34; title=&#34;其他困难&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;其他困难&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Kubernetes 安全领域的 PSP 时代充满了风险，这启发了一个新的发布周期管理规则：任何 Kubernetes 项目不能超过两个发布周期处于 beta 状态，必须成为稳定的或者标记为[弃用](&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/migrate-from-psp/#disable-psp&#34; title=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/migrate-from-psp/#disable-psp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/configure-pod-container/migrate-from-psp/#disable-psp&lt;/a&gt; &lt;a href=&#34;https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/&#34; title=&#34;https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/&lt;/a&gt;)和删除。&lt;/p&gt;
&lt;p&gt;另一方面，PSP 使 Kubernetes 安全领域朝着积极的方向发展：通过将 Kubernetes 安全策略的创建和实例化分离，PSP 开辟了一个新的外部接入控制器和策略执行工具生态系统，例如&lt;a href=&#34;https://kyverno.io/&#34; title=&#34;Kyverno&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyverno&lt;/a&gt;、&lt;a href=&#34;https://open-policy-agent.github.io/gatekeeper/website/&#34; title=&#34;Gatekeeper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gatekeeper&lt;/a&gt;和&lt;a href=&#34;https://monokle.io/&#34; title=&#34;Monokle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Monokle&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们用这些工具摆脱了 PSP 的束缚，并用 Pod Security Standard（PSS）替换了它。一会我们再来谈这个巨大的区别。&lt;/p&gt;
&lt;h2 id=&#34;基于阶段的-kubernetes-策略方法&#34;&gt;基于阶段的 Kubernetes 策略方法&lt;/h2&gt;
&lt;p&gt;在确定了策略创建和实例化之间的解耦后，您现在可以在不管您选择哪些工具的情况下，在您的集群、环境和团队之间应用一致的策略语言。您也可以随时更改您用于创建和实例化的工具，并在您的集群中获得可靠的结果。&lt;/p&gt;
&lt;p&gt;创建通常发生在集成开发环境（IDE）中，这意味着您可以继续使用您当前最喜欢的语言来使用规则特定的语言，如&lt;a href=&#34;https://monokle.io/learn/what-is-opa-for-the-kubernetes-connoisseur-its-as-essential-as-salt&#34; title=&#34;Open Policy Agent (OPA)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Policy Agent (OPA)&lt;/a&gt;、Kyverno 的声明性语法或 Go 或 TypeScript 等编程语言。&lt;/p&gt;
&lt;p&gt;实例化和强制执行可以在软件开发生命周期的不同部分进行。正如我们在我们之前的&lt;a href=&#34;https://medium.com/kubeshop-i/kubernetes-yaml-policies-101-649a23780371&#34; title=&#34;101 级帖子&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;101 级帖子&lt;/a&gt;中看到的那样，您可以在配置生命周期的一个或多个点应用验证：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过开发人员的命令行界面（CLI）或 IDE 直接预提交&lt;/li&gt;
&lt;li&gt;通过您的CI/CD流水线进行预部署&lt;/li&gt;
&lt;li&gt;通过像 Kyverno 或 Gatekeeper 这样的&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/&#34; title=&#34;接入控制器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;接入控制器&lt;/a&gt;进行后部署，或者&lt;/li&gt;
&lt;li&gt;在集群中检查部署状态是否仍符合您的策略标准。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;策略的实例化、验证和强制执行越晚，危险的错误配置就越容易滑入生产环境，发现和修复任何发现的错误配置的原始来源所需的工作也越多。您可以在几个阶段实例化和强制执行策略，但越早越好——这正是 Monokle 擅长的，具有强大的预提交和预部署验证支持。&lt;/p&gt;
&lt;p&gt;有了这个场景，以及对 Kubernetes 策略景观的理解，您可以开始消除您面前的误配置。&lt;/p&gt;
&lt;h3 id=&#34;步骤-1实施-pod-security-标准&#34;&gt;步骤 1：实施 Pod Security 标准&lt;/h3&gt;
&lt;p&gt;让我们从前面提到的 PSS 开始。Kubernetes 现在描述了&lt;a href=&#34;https://kubernetes.io/docs/concepts/security/pod-security-standards/&#34; title=&#34;三个包容性策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;三个包容性策略&lt;/a&gt;，您可以快速在整个集群中实施和执行。 “特权”策略完全不受限制，应该仅保留给由管理员管理的系统和基础设施工作负载。&lt;/p&gt;
&lt;p&gt;您应该从实例化“基线”策略开始，它允许最小规格的 Pod，这是大多数新接触 Kubernetes 的开发人员开始的地方：&lt;/p&gt;
&lt;p&gt;从基线开始的好处是，您无需修改所有现有的 Dockerfile 和 Kubernetes 配置即可防止已知的权限升级。会有一些例外情况，稍后我会谈到。&lt;/p&gt;
&lt;p&gt;在命名空间级别上创建和实例化这个策略级别是相对简单的：&lt;/p&gt;
&lt;p&gt;您肯定会有一些特殊的服务需要比基线允许的访问权限更多，例如用于收集日志和可观测性的&lt;a href=&#34;https://grafana.com/docs/loki/latest/clients/promtail/&#34; title=&#34;Promtail 代理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Promtail 代理&lt;/a&gt;。在这些情况下，您需要在特权策略下运行那些命名空间。您需要跟进该供应商的安全改进，以限制您的风险。&lt;/p&gt;
&lt;p&gt;通过强制执行 Pod Security 标准的基线水平来处理大多数配置，并允许一些特权配置，然后修复违反这些策略的任何误配置，您就完成了下一个策略里程碑。&lt;/p&gt;
&lt;h3 id=&#34;步骤-2修复标签和注释&#34;&gt;步骤 2：修复标签和注释&lt;/h3&gt;
&lt;p&gt;标签用于标识资源进行分组或过滤，而注释则用于重要但不用于识别的上下文。如果您的头脑仍在旋转，来自 Ambassador Labs 的 Richard Li 的&lt;a href=&#34;https://blog.getambassador.io/kubernetes-labels-vs-annotations-95fc47196b6d&#34; title=&#34;一个方便的定义&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一个方便的定义&lt;/a&gt;可能会帮助：“标签是为 Kubernetes 而设计的，而注释是为人类而设计的。”&lt;/p&gt;
&lt;p&gt;标签应仅用于其预定目的，即使在这种情况下，您在何处以及如何应用它们时也要小心。过去，&lt;a href=&#34;https://sysdig.com/blog/exposed-prometheus-exploit-kubernetes-kubeconeu/&#34; title=&#34;攻击者已使用标签&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;攻击者已使用标签&lt;/a&gt;深入探索 Kubernetes 集群的架构，包括哪些节点运行单个 Pod，而不留下运行的查询的日志。&lt;/p&gt;
&lt;p&gt;同样的想法也适用于注释：虽然它们是为人类而设计的，但它们经常被用于&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/issues/8503&#34; title=&#34;获取凭证&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;获取凭证&lt;/a&gt;，进而获得访问更多秘密的权限。如果您使用注释来描述应在出现问题的情况下联系的人员，请知道您正在为社交工程攻击创建额外的软目标。&lt;/p&gt;
&lt;h3 id=&#34;步骤-3迁移到受限制的-pss&#34;&gt;步骤 3：迁移到受限制的 PSS&lt;/h3&gt;
&lt;p&gt;虽然基线是可允许但相对安全的，但“受限制”Pod Security 标准采用了目前加固 Pod 的最佳实践。正如 Red Hat 的 Mo Khan&lt;a href=&#34;https://youtu.be/SFtHRmPuhEw?t=1951&#34; title=&#34;曾经描述&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;曾经描述&lt;/a&gt;的那样，受限制的标准确保“您能做的最糟糕的事情是毁掉自己”，而不是您的集群。&lt;/p&gt;
&lt;p&gt;使用受限制的标准，开发人员必须编写在只读模式下运行的应用程序，仅启用 Pod 运行所需的 Linux 功能，不能在任何时候升级特权等。&lt;/p&gt;
&lt;p&gt;我建议从基线开始并稍后迁移到受限制，作为单独的里程碑，因为后者几乎总是需要对现有的 Dockerfile 和 Kubernetes 配置进行主动更改。一旦您实例化并强制执行了受限制策略，您的配置将需要遵守这些策略，否则它们将被您的验证器或接入控制器拒绝。&lt;/p&gt;
&lt;h3 id=&#34;步骤-3a压制而不是忽略不可避免的误报&#34;&gt;步骤 3a：压制而不是忽略不可避免的误报&lt;/h3&gt;
&lt;p&gt;在完成基线和受限制的里程碑时，您正在接近策略管理的更成熟（和复杂）水平。为了确保每个人都在当前策略里程碑方面保持一致，您应该开始处理虚假阳性或必须显式允许的配置，尽管违反了受限制的 PSS。&lt;/p&gt;
&lt;p&gt;在忽略规则或抑制规则之间进行选择时，始终选择抑制规则。这需要一个可审计的操作，具有日志或配置更改，以将例外情况编码为已建立的策略框架。您可以在源中添加抑制规则，直接添加到您的 K8s 配置中或在外部添加，其中开发人员请求其运维同行重新配置其验证器或接入控制器，以允许“误配置”通过。&lt;/p&gt;
&lt;p&gt;在 Monokle 中，您可以将抑制直接添加到您的配置中作为注释，使用&lt;a href=&#34;https://docs.oasis-open.org/sarif/sarif/v2.1.0/sarif-v2.1.0.html&#34; title=&#34;静态分析结果交换格式（SARIF）规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;静态分析结果交换格式（SARIF）规范&lt;/a&gt;所称的&lt;a href=&#34;https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317739&#34; title=&#34;理由&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理由&lt;/a&gt;：&lt;/p&gt;
&lt;h3 id=&#34;第-4-步加入常见加固指南&#34;&gt;第 4 步：加入常见加固指南&lt;/h3&gt;
&lt;p&gt;在这一步中，您已经超越了已有的 Kubernetes 安全框架，这意味着您需要更多地积极构建和努力实现自己的里程碑。&lt;/p&gt;
&lt;p&gt;美国国家安全局（NSA）和网络安全和基础设施安全局（CISA）有一份受欢迎的&lt;a href=&#34;https://media.defense.gov/2022/Aug/29/2003066362/-1/-1/0/CTR_KUBERNETES_HARDENING_GUIDANCE_1.2_20220829.PDF&#34; title=&#34;Kubernetes 加固指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 加固指南&lt;/a&gt;，其中详细介绍了不仅是 Pod 级别的改进措施，如有效地使用不可变容器文件系统，还包括网络分离、审计日志和威胁检测。&lt;/p&gt;
&lt;h3 id=&#34;第-5-步插入并播放&#34;&gt;第 5 步：插入并播放&lt;/h3&gt;
&lt;p&gt;在实施了一些或所有已有的加固指南之后，每个新的策略都涉及选择、信任和权衡。花些时间在谷歌或 StackOverflow 上，你就会发现很多推荐的插入和播放策略。&lt;/p&gt;
&lt;p&gt;你可以从众包策略中受益，其中许多来自于那些有着更独特经验的人，但请记住，虽然规则可能是出于良好意图的，但你并不了解推荐者的优先事项或操作上下文。他们知道如何实现某些“高挂水果”政策，因为他们不得不这样做，而不是因为这些政策普遍有价值。&lt;/p&gt;
&lt;p&gt;目前正在进行的辩论是是否以及如何严格限制容器的资源需求。对于请求限制也是如此。不配置限制可能会引入安全风险，但如果严重限制 Pod，它们可能无法正常运行。&lt;/p&gt;
&lt;h3 id=&#34;第-6-步添加自定义规则以应对未预料的特殊情况&#34;&gt;第 6 步：添加自定义规则以应对未预料的特殊情况&lt;/h3&gt;
&lt;p&gt;现在，你已经到了 Kubernetes 策略的远端，远离了导致生产负面影响的 20％的错误配置和漏洞。但即使现在，即使已经实施了所有的最佳实践和集体云原生知识，你仍然无法免疫不会意地引发事故或停机的错误配置 - 安全和稳定的奇妙未知未知。&lt;/p&gt;
&lt;p&gt;一个好的经验法则是，如果一个奇特的（错）配置在生产中引起了两次问题，那么就该将其编码为一条自定义规则，在开发过程中强制执行，或由准入控制器强制执行。它太重要了，不能仅在内部悄悄地记录下来，希望开发人员阅读它，在彼此的拉取请求审查中注意到它并捕获它。&lt;/p&gt;
&lt;p&gt;一旦编码到您现有的策略中，自定义规则就成为了您尽可能接近开发人员执行的防护栏杆。如果你可以在开发人员提交工作之前就用验证到达开发人员，Monokle Cloud 就可以无缝地执行这一点，使用自定义插件和您本地运行的开发服务器，那么您可以节省整个组织大量的重复工作和调整他们的拇指等待 CI/CD 管道无可避免地失败时他们可以构建新功能或修复错误。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;如果您实施了以上所述的所有框架和里程碑，并对您的 Dockerfile 和 Kubernetes 配置进行了所有必要的更改以满足这些新策略，那么您可能会发现您的 90 个主要漏洞清单已经减少到了一个更易管理的数量。&lt;/p&gt;
&lt;p&gt;您正在看到我们逐步塑造和执行 Kubernetes 策略的方法的价值。您与新策略和规则的影响互动得越多，就像 Monokle 在提交之前唯一做到的那样，就越容易在不压垮自己或其他人的情况下逐步迈出步伐。&lt;/p&gt;
&lt;p&gt;您甚至可能会自豪地宣称，您的 Kubernetes 环境完全没有配置错误。这是一种胜利，毫无疑问，但这不是保证 - 总会有新的 Kubernetes 版本、新的应用程序和新的最佳实践融入到您已经完成的工作中。利用框架和加固指南的优势在于，您有更好的共同基础来谈论您在认证、合规和长期安全目标方面的影响。&lt;/p&gt;
&lt;p&gt;对于非专家来说，哪种听起来更有说服力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;您将 CVE 数量从 90 个降至 X 个，&lt;/li&gt;
&lt;li&gt;还是您完全符合美国国家安全局的 Kubernetes 加固指南？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们越早不再担心数字，而是更多地关注共同里程碑，在应用程序生命周期的早期（理想情况下是 pre-commit！）尽早执行，我们就能找到每个云原生策略的可持续甜蜜点。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes 故障排除智慧的演变</title>
      <link>https://jimmysong.io/trans/can-chatgpt-save-collective-kubernetes-troubleshooting/</link>
      <pubDate>Sun, 10 Sep 2023 19:03:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/can-chatgpt-save-collective-kubernetes-troubleshooting/</guid>
      <description>
        
        
        &lt;p&gt;摘要：本文讨论了在 Kubernetes 故障排除中的两种路径：一种是增强操作员的分析工作，通过自动化和简化对故障排除知识的访问来提供帮助；另一种是将操作员从故障排除中排除，通过使用 AI/ML 模型和可观测性数据来自动化故障修复。同时强调了数据的重要性，以及继续共享故障排除经验和建立对可观测性的一致认识的必要性。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文译自：https://thenewstack.io/can-chatgpt-save-collective-kubernetes-troubleshooting/&lt;/p&gt;
&lt;p&gt;数十年前，系统管理员们开始在互联网上分享他们每天面临的技术问题。他们进行了长时间、充满活力且富有价值的讨论，探讨如何调查和解决问题的根本原因，然后详细说明最终对他们有效的解决方案。&lt;/p&gt;
&lt;p&gt;这股洪流从未停歇，只是改变了流向。如今，这些讨论仍在 Stack Overflow、Reddit 以及企业工程博客上进行。每一次讨论都是对全球 IT 系统故障排除经验的宝贵贡献。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://roadmap.sh/kubernetes&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt;也从根本上改变了这种流向。与几十年来困扰系统管理员和 IT 人员的虚拟机（VM）和单体应用程序相比，&lt;a href=&#34;https://thenewstack.io/microservices/&#34; title=&#34;微服务架构&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务架构&lt;/a&gt;要复杂得多。由于 Kubernetes 缺乏数据持久性，往往无法对规模化的 K8s 错误进行本地重现。即使能够捕获，观测数据也会在多个平台上分散，而资源和依赖关系的相互关联关系也难以捕捉。&lt;/p&gt;
&lt;p&gt;现在，凭直觉并不一定足够。您需要知道如何调试集群以获得下一步的线索。&lt;/p&gt;
&lt;p&gt;这种复杂性意味着公开的故障排除讨论比以往任何时候都更为重要，但现在我们开始看到这股宝贵的洪流不是被重定向，而是完全被堵住了。你在谷歌上看到了这一点。任何与 Kubernetes 相关问题的搜索都会出现一半以上的付费广告和至少一页 SEO 驱动的文章，这些文章缺乏技术深度。&lt;a href=&#34;https://thenewstack.io/stack-overflow-adds-ai-will-the-community-respond/&#34; title=&#34;Stack Overflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow&lt;/a&gt; 正在失去其作为技术人员首选问答资源的主导地位，Reddit 在过去几年中也陷入了争议。&lt;/p&gt;
&lt;p&gt;现在，每个 Kubernetes 的 DevOps 平台都在建立最后一个堤坝：将您的故障排除知识集中在其平台上，并用&lt;a href=&#34;https://thenewstack.io/70-percent-of-developers-using-or-will-use-ai-says-stack-overflow-survey/&#34; title=&#34;人工智能（AI）和机器学习（ML）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;人工智能（AI）和机器学习（ML）&lt;/a&gt;取而代之，直到整个堆栈对于甚至是最有经验的云原生工程师来说都成为一个黑盒。当发生这种情况时，您失去了逐个探测、排除故障和修复系统的能力。这种趋势将曾经是众包故障排除技能洪流变成了过去所能提供的仅仅是一滴水。&lt;/p&gt;
&lt;p&gt;当我们依赖于平台时，故障排除技术的集体智慧就会消失。&lt;/p&gt;
&lt;h2 id=&#34;故障排除智慧的传承&#34;&gt;故障排除智慧的传承&lt;/h2&gt;
&lt;p&gt;起初，系统管理员依靠实体书籍进行技术文档和整体最佳实践的实施。随着互联网在 80 年代和 90 年代的普及，这些人通常通过&lt;a href=&#34;https://today.duke.edu/2010/05/usenet.html&#34; title=&#34;Usenet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Usenet&lt;/a&gt;与同行进行交流，并在像 comp.lang.* 这样的新闻组中提出工作中的技术问题，这类新闻组类似于我们今天所知的论坛的简化版本。&lt;/p&gt;
&lt;p&gt;随着互联网的普及迅速，并几乎完全改变了故障排除智慧的洪流。工程师和管理员们不再聚集在新闻组中，而是涌向包括 Experts Exchange 在内的数千个论坛，该论坛于 1996 年上线。在积累了大量的问题和答案之后，Experts Exchange 团队将所有答案都放在了每年 250 美元的付费墙后面，这使得无数宝贵的讨论无法公开获取，最终导致了该网站的影响力下降。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2018/04/06/the-stack-overflow-age/&#34; title=&#34;Stack Overflow 随后出现&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow 随后出现&lt;/a&gt;，再次向公众开放了这些讨论，并通过声望点数对讨论进行游戏化，这些声望点数可以通过提供见解和解决方案来获得。其他用户随后对“最佳”解决方案进行投票和验证，这有助于其他搜索者快速找到答案。Stack Overflow 的游戏化、自我管理和社区使其成为了洪流式故障排除知识的唯一渠道。&lt;/p&gt;
&lt;p&gt;但是，就像其他时代一样，没有什么好事能永远持续下去。近 10 年来，人们一直在预测&lt;a href=&#34;https://johnslegers.medium.com/the-decline-of-stack-overflow-7cb69faa575d&#34; title=&#34;“Stack Overflow 的衰落”&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“Stack Overflow 的衰落”&lt;/a&gt;，并指出由于其具有攻击性的性质和由拥有最多声望点数的人进行管理的结构，它“讨厌新用户”。虽然 Stack Overflow 的影响力和流行度确实下降了，但 Reddit 的开发/工程专注的 subreddit 填补了这个空白，它仍然是公开可访问的故障排除知识的最大存储库。&lt;/p&gt;
&lt;p&gt;特别是对于 Kubernetes 和云原生社区来说，这仍然是一个重要的资源，因为它们仍然在经历重大的增长阵痛。而这是一种宝贵的资源，因为如果您认为现在的 Kubernetes 已经很复杂了&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-的复杂性问题&#34;&gt;Kubernetes 的复杂性问题&lt;/h2&gt;
&lt;p&gt;在一篇关于“直观调试”失败的精彩文章中，软件交付顾问 Pete Hodgson 认为，构建和交付软件的现代架构（如 Kubernetes 和微服务）比以往任何时候都更加复杂。他写道：“对于我们大多数人来说，为服务器命名为希腊神话角色，并通过 ssh 进入服务器运行&lt;code&gt;tail&lt;/code&gt;和&lt;code&gt;top&lt;/code&gt;的日子已经一去不复返了。”但是，“这种转变是有代价的……传统的理解和故障排除生产环境的方法在这个新世界中已经行不通了。”&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/can-chatgpt-save-collective-kubernetes-troubleshooting/cynfin_hua353e1f3a668859fa4d7a161556969e4_94124_1000x889_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/can-chatgpt-save-collective-kubernetes-troubleshooting/cynfin.jpg&#34; data-img=&#34;/trans/can-chatgpt-save-collective-kubernetes-troubleshooting/cynfin.jpg&#34; data-width=&#34;1000&#34; data-height=&#34;889&#34; alt=&#34;image&#34; data-caption=&#34;Cynefin 模型&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cynefin 模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Cynefin 模型。来源：维基百科&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hodgson 使用&lt;a href=&#34;https://en.wikipedia.org/wiki/Cynefin_framework&#34; title=&#34;Cynefin 模型&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cynefin 模型&lt;/a&gt;来说明软件架构过去是复杂的，因为有足够的经验，人们可以理解故障排除和解决方案之间的因果关系。&lt;/p&gt;
&lt;p&gt;他认为，分布式微服务架构是复杂的，即使经验丰富的人对根本原因以及如何进行故障排除也只有“有限的直觉”。他们必须花更多时间通过可观测性数据提出问题和回答问题，最终假设可能出错的原因。&lt;/p&gt;
&lt;p&gt;如果我们同意 Hodgson 的前提 - Kubernetes 本质上是复杂的，并且在响应之前需要花费更多的时间分析问题，那么与 Kubernetes 一起工作的工程师学会了哪些问题最重要，然后用可观测性数据回答，以进行最佳的下一步行动，似乎是至关重要的。&lt;/p&gt;
&lt;p&gt;这正是新一代以 AI 驱动的故障排除平台所提供的智慧。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-故障排除的两种路径&#34;&gt;Kubernetes 故障排除的两种路径&lt;/h2&gt;
&lt;p&gt;多年来，像 OpenAI 这样的公司一直在根据 Stack Overflow、Reddit 等公开数据进行抓取和训练模型，这意味着这些 AI 模型可以访问大量的系统和应用知识，包括 Kubernetes。还有一些人意识到组织的可观测性数据是训练 AI/ML 模型分析新场景的宝贵资源。&lt;/p&gt;
&lt;p&gt;他们都在问同一个问题：我们如何利用关于 Kubernetes 的现有数据来简化搜索最佳解决方案的过程？他们正在构建的产品采取非常不同的路径。&lt;/p&gt;
&lt;h3 id=&#34;第一种增强操作员的分析工作&#34;&gt;第一种：增强操作员的分析工作&lt;/h3&gt;
&lt;p&gt;这些工具自动化和简化对公开在线发布的大量故障排除知识的访问。它们不会取代进行适当故障排除或&lt;a href=&#34;https://aws.amazon.com/opensearch-service/resources/root-cause-analysis/&#34; title=&#34;根本原因分析&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;根本原因分析&lt;/a&gt;（RCA）所需的人类直觉和创造力，而是有条不紊地自动化操作员查找相关信息的方式。&lt;/p&gt;
&lt;p&gt;例如，如果一个刚接触 Kubernetes 的开发人员在运行&lt;code&gt;kubectl get pods&lt;/code&gt;时发现&lt;code&gt;CrashLoopBackOff&lt;/code&gt;状态导致他们无法部署应用程序，他们可以查询一个 AI 驱动的工具以获得建议，比如运行&lt;code&gt;kubectl describe $POD&lt;/code&gt;或&lt;code&gt;kubectl logs $POD&lt;/code&gt;。这些步骤可能会进一步引导开发人员使用&lt;code&gt;kubectl describe $DEPLOYMENT&lt;/code&gt;来调查相关的部署情况。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://botkube.io/&#34; title=&#34;Botkube&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Botkube&lt;/a&gt;，我们对使用 AI 在大量故障排除智慧的基础上自动化这个来回查询的概念非常感兴趣。用户应该能够直接在 Slack 中提问，如“我如何排除这个无法正常工作的服务？”并收到 ChatGPT 撰写的回答。在一次公司范围的黑客马拉松活动中，我们着手实施这一概念，为我们的协作故障排除平台构建了一个新的插件。&lt;/p&gt;
&lt;p&gt;通过&lt;a href=&#34;https://botkube.io/blog/use-chatgpt-to-troubleshoot-kubernetes-errors-with-botkubes-doctor&#34; title=&#34;Doctor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Doctor&lt;/a&gt;，您可以利用大量的故障排除知识，通过 Botkube 作为您的 Kubernetes 集群和消息/协作平台之间的桥梁，无需在 Stack Overflow 或 Google 搜索广告中漫游，这对于新手 Kubernetes 开发人员和操作员特别有用。&lt;/p&gt;
&lt;p&gt;该插件还通过生成一个带有&lt;strong&gt;获取帮助&lt;/strong&gt;按钮的 Slack 消息进一步自动化，用于任何错误或异常，然后查询 ChatGPT 以获取可行的解决方案和下一步操作。您甚至可以将 Doctor 插件的结果导入其他操作或集成，以简化您主动使用现有广泛的 Kubernetes 故障排除知识来更直观地调试和感知问题的方式。&lt;/p&gt;
&lt;h3 id=&#34;第二种将操作员从故障排除中排除&#34;&gt;第二种：将操作员从故障排除中排除&lt;/h3&gt;
&lt;p&gt;这些工具不关心公开知识的泛滥。如果它们可以基于实际的可观测性数据训练通用的 AI/ML 模型，然后根据您的特定架构进行微调，它们可以试图完全剔除人为操作员在根本原因分析和故障修复中的作用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.causely.io/platform/causely-for-kubernetes-applications/&#34; title=&#34;Causely&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Causely&lt;/a&gt;就是这样一家初创公司，他们并不回避使用 AI 来“消除人为故障排除”的愿景。该平台连接到您现有的可观测性数据，并处理它们以微调因果关系模型，理论上可直接进行修复步骤 - 无需探测或使用&lt;code&gt;kubectl&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果说有时候有一个 Kubernetes 神灵听起来很诱人，那我可能会撒谎，但我对像 Causely 这样的工具夺走运维工作并不担心。我担心的是在 Causely 引领的未来中，我们宝贵的故障排除知识会发生什么。&lt;/p&gt;
&lt;h3 id=&#34;这两种路径之间的差距数据&#34;&gt;这两种路径之间的差距：数据&lt;/h3&gt;
&lt;p&gt;我不是在为“人工智能将取代所有 DevOps 工作”发表言论。我们已经读过太多这样的末日场景，适用于每个小众和行业。我更关心这两种路径之间的差距：用于训练和回答问题或呈现结果的数据是什么？&lt;/p&gt;
&lt;p&gt;第一种路径通常使用现有的公开数据。尽管有关 AI 公司爬取这些站点进行训练数据的担忧-Reddit 和 Twitter，但这些数据的开放性仍然提供了一个激励循环，以保持开发人员和工程师继续在 Reddit、Stack Overflow 和其他平台上共享知识的持续泛滥。&lt;/p&gt;
&lt;p&gt;云原生社区通常也倾向于共享技术知识，认同共享技术知识和一个“涨潮（Kubernetes 故障排除技巧的涨潮）抬高所有船（压力巨大的 Kubernetes 工程师）”的想法。&lt;/p&gt;
&lt;p&gt;第二条路径看起来更为暗淡。随着以 AI 驱动的 DevOps 平台的兴起，越来越多的故障排除知识被锁定在这些仪表板和驱动平台的专有 AI 模型中。我们都同意，Kubernetes 基础架构将继续变得更加复杂，而不是更简单，这意味着随着时间的推移，我们对节点、Pod 和容器之间发生的情况的理解将变得更少。&lt;/p&gt;
&lt;p&gt;当我们停止互相分析问题和感知解决方案时，我们变得依赖于平台。这对每个人来说都是一条失败的道路，除了平台之外。&lt;/p&gt;
&lt;h3 id=&#34;我们如何不失去或失去得更少&#34;&gt;我们如何不失去（或失去得更少）？&lt;/h3&gt;
&lt;p&gt;我们能做的最好的事情是继续在线上发布关于我们在 Kubernetes 和其他领域的故障排除经验的惊人内容，比如“&lt;a href=&#34;https://learnk8s.io/troubleshooting-deployments&#34; title=&#34;关于故障排除 Kubernetes 部署的视觉指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关于故障排除 Kubernetes 部署的视觉指南&lt;/a&gt;”；通过游戏化创造教育性应用程序，比如&lt;a href=&#34;https://sadservers.com/&#34; title=&#34;SadServers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SadServers&lt;/a&gt;；在故障排除系统时采取我们最喜欢的第一步，比如“&lt;a href=&#34;https://rachelbythebay.com/w/2018/03/26/w/&#34; title=&#34;为什么在排除未知机器问题时我通常首先运行‘w’&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么在排除未知机器问题时我通常首先运行‘w’&lt;/a&gt;”；并进行详细的事后分析，详细描述了探测、感知和应对潜在灾难性情况的压力故事，比如&lt;a href=&#34;https://mail.tarsnap.com/tarsnap-announce/msg00050.html&#34; title=&#34;2023 年 7 月的 Tarsnap 故障&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023 年 7 月的 Tarsnap 故障&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们还可以超越技术解决方案，比如讨论我们如何在紧张的故障排除场景中管理和支持同事，或者在组织范围内建立对可观测性的一致认识。&lt;/p&gt;
&lt;p&gt;尽管它们目前面临困境，但 Stack Overflow 和 Reddit 将继续是讨论故障排除和寻求答案的可靠渠道。如果它们最终与 Usenet 和 Experts Exchange 齐名，它们可能会被其他可公开获得的替代品所取代。&lt;/p&gt;
&lt;p&gt;无论何时何地以何种方式发生，我希望您能加入我们在 Botkube 和全新的 Doctor 插件中，为在 Kubernetes 中协作解决复杂问题构建新的渠道。&lt;/p&gt;
&lt;p&gt;无论 AI 驱动的 DevOps 平台是否继续基于抓取的公共 Kubernetes 数据训练新模型，只要我们不自愿地将好奇心、冒险精神和解决问题的能力全部放入这些黑匣子中，就会始终有一条新路径，让宝贵的故障排除知识源源不断地流动。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>将 AI 应用于 WebAssembly 还为时过早吗？</title>
      <link>https://jimmysong.io/trans/is-it-too-early-to-leverage-ai-for-webassembly/</link>
      <pubDate>Thu, 07 Sep 2023 21:03:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/is-it-too-early-to-leverage-ai-for-webassembly/</guid>
      <description>
        
        
        &lt;p&gt;摘要：Fermyon Technologies 认为，将 AI 应用于 WebAssembly 并不为时过早。WebAssembly 为在服务器上运行推理提供了坚实的基础，而且在许多不同的环境中，如浏览器和物联网设备等，通过将这些工作负载移动到终端用户设备上，可以消除延迟并避免将数据发送到集中式服务器，同时能够在边缘发现的多种异构设备上运行。Fermyon Serverless AI 通过提供超过 100 倍于其他按需 AI 基础设施服务的亚秒冷启动时间来解决了企业级 AI 应用程序成本高的问题。这是一种共生关系。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;人工智能及其在 IT、软件开发和运营方面的应用刚开始发挥作用，预示着人类角色将如何在近期和长期内演变，特别是在较小的规模上，WebAssembly 代表着一种正在引起重大关注的技术，同时证明了其可行性，但成功的商业模型尚未实现，主要是由于最终端点的缺乏标准化。与此同时，至少有一家供应商 Fermyon 认为，在这个阶段应用 AI 于 WebAssembly 并不为时过早。&lt;/p&gt;
&lt;p&gt;那么，AI 如何潜在地帮助 Wasm 的开发和采用，这是否为时过早？正如 VMware CTO 办公室的高级工程师 Angel M De Miguel Meana 所指出的那样，自从 ChatGPT 推出以来，AI 生态系统已经发生了巨大的变化，WebAssembly 为在服务器上运行推理提供了坚实的基础，而且在许多不同的环境中，如浏览器和物联网设备等，通过将这些工作负载移动到终端用户设备上，可以消除延迟并避免将数据发送到集中式服务器，同时能够在边缘发现的多种异构设备上运行。由于 Wasm 生态系统仍在兴起，因此在早期阶段集成 AI 将有助于推动新的和现有的与 AI 相关的标准。这是一种共生关系。&lt;/p&gt;
&lt;h2 id=&#34;完美的匹配&#34;&gt;完美的匹配&lt;/h2&gt;
&lt;p&gt;Fermyon Technologies 的联合创始人兼首席执行官 Matt Butcher 告诉 The New Stack：“我们成立 Fermyon 的目标是打造下一代无服务器平台。AI 显然是这一下一代的一部分。在我们的行业中，我们经常看到革命性的技术一起成长：Java 和 Web、云和微服务、Docker 和 Kubernetes。WebAssembly 和 AI 是一对完美的组合。我看到它们一起成长（并变老）。”&lt;/p&gt;
&lt;p&gt;“烘焙”AI 模型，如 LLM（大型语言模型）或转换器，到 WebAssembly 运行时中，是加速采用 WebAssembly 的逻辑下一步，Enterprise Management Associates (EMA) 的分析师 Torsten Volk 告诉 The New Stack。与调用诸如通过 API 的数据库服务类似，编译 WebAssembly 应用程序（二进制文件）可以将其 API 请求发送到 WebAssembly 运行时，该运行时将该调用中继到 AI 模型并将模型响应返回给发起者，Volk 说。&lt;/p&gt;
&lt;p&gt;“一旦我们有一个提供开发人员一个标准 API 的通用组件模型（CCM），访问数据库、AI 模型、GPU、消息传递、身份验证等，这些 API 请求将变得非常强大。CCM 将让开发人员编写相同的代码，在数据中心、云甚至边缘位置的任何类型的服务器上与 AI 模型（例如 GPT 或 Llama）进行通信，只要该服务器拥有足够的硬件资源可用，”Volk 说。“这一切都归结为关键问题，即产业参与者何时会就 CCM 达成一致。同时，WebAssembly 云（如 Fermyon）可以利用 WebAssembly 使 AI 模型在其自己的云基础设施中具有可移植性和可扩展性，无需 CCM，并将一些节省成本传递给客户。”&lt;/p&gt;
&lt;h2 id=&#34;解决问题&#34;&gt;解决问题&lt;/h2&gt;
&lt;p&gt;同时，Fermyon 认为，在这个阶段应用 AI 于 WebAssembly 并不为时过早。正如 Butcher 所指出的那样，负责在 LLM（如 LLaMA2）上构建和运行企业 AI 应用程序的开发人员面临着 100 倍计算成本的挑战，即每小时 32 美元及以上的 GPU 访问费用。或者，他们可以使用按需服务，但是启动时间却非常慢。这使得以实惠的方式提供企业级 AI 应用程序变得不切实际。&lt;/p&gt;
&lt;p&gt;Fermyon Serverless AI 通过提供超过 100 倍于其他按需 AI 基础设施服务的亚秒冷启动时间来解决了这个问题，Butcher 说。这一“突破”得益于驱动 Fermyon Cloud 的服务器 WebAssembly 技术，该技术被架构为亚毫秒冷启动和高容量时间分片的计算实例，已被证明可以将计算密度提高 30 倍。“将此运行时配置文件扩展到 GPU 将使 Fermyon Cloud 成为最快的 AI 推理基础设施服务，”Butcher 说。&lt;/p&gt;
&lt;p&gt;Volk 说，这样的推理服务“非常有趣”，因为典型的 WebAssembly 应用程序仅包含几兆字节，而 AI 模型的大小要大得多。这意味着它们不会像传统的 WebAssembly 应用程序那样启动得那么快。“我认为 Fermyon 已经想出了如何使用时间分片为 WebAssembly 应用程序提供 GPU 访问的方法，以便所有这些应用程序都可以通过其 WebAssembly 运行时保留一些时间片来获取所需的 GPU 资源”，Volk 说。“这意味着很多应用程序可以共享一小部分昂贵的 GPU，以按需为其用户提供服务。这有点像分时共享，但不需要强制参加午餐时间的演示。”&lt;/p&gt;
&lt;p&gt;使用 Spin 入门。&lt;/p&gt;
&lt;p&gt;!https://prod-files-secure.s3.us-west-2.amazonaws.com/86575c70-5cc9-4b3e-bee7-d1bb14ba20e3/6bf78916-e34c-4051-86a7-52145cdc372a/4a27b287-capture-decran-2023-09-05-192118.png&lt;/p&gt;
&lt;p&gt;那么，用户如何与 Serverless AI 交互？Fermyon 的 Serverless AI 没有 REST API 或外部服务，它仅构建在 Fermyon 的 Spin 本地和 Fermyon Cloud 中，Butcher 解释说。“在您的代码的任何位置，您都可以将提示传递到 Serverless AI 并获得响应。在这个第一个测试版中，我们包括 LLaMa2 的聊天模型和最近宣布的 Code Llama 代码生成模型，”Butcher 说。“因此，无论您是在总结文本、实现自己的聊天机器人还是编写后端代码生成器，Serverless AI 都可以满足您的需求。我们的目标是使 AI 变得简单，使开发人员可以立即开始利用它来构建新的令人瞩目的无服务器应用程序。”&lt;/p&gt;
&lt;h2 id=&#34;重要意义&#34;&gt;重要意义&lt;/h2&gt;
&lt;p&gt;使用 WebAssembly 来运行工作负载，可以使用 Fermyon Serverless AI 将“GPU 的一小部分”分配给用户应用程序，以“及时”执行 AI 操作，Fermyon CTO 和联合创始人 Radu Matei 在一篇博客文章中写道。 “当操作完成时，我们将该 GPU 的一小部分分配给队列中的另一个应用程序，”Matei 写道。“由于 Fermyon Cloud 中的启动时间为毫秒级，因此我们可以在分配给 GPU 的用户应用程序之间快速切换。如果所有 GPU 分数都在忙于计算数据，我们将在下一个可用的应用程序之前将传入的应用程序排队。”&lt;/p&gt;
&lt;p&gt;这有两个重大的影响，Matei 写道。首先，用户不必等待虚拟机或容器启动并附加到 GPU 上。此外，“我们可以实现更高的资源利用率和效率，”Matei 写道。&lt;/p&gt;
&lt;p&gt;Fermyon 传达的 Serverless AI 的具体特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一款开发人员工具和托管服务，专为使用开源 LLM 进行 AI 推理的无服务器应用程序而设计。&lt;/li&gt;
&lt;li&gt;由于我们的核心 WebAssembly 技术，我们的冷启动时间比竞争对手快 100 倍，从几分钟缩短到不到一秒。这使我们能够在相同的时间内（并且使用相同的硬件）执行数百个应用程序（二进制文件），而今天的服务用于运行一个。&lt;/li&gt;
&lt;li&gt;我们为使用 Spin 构建和运行 AI 应用程序提供了本地开发体验，然后将其部署到 Fermyon Cloud 中，以高性能的方式以其他解决方案的一小部分成本提供服务。&lt;/li&gt;
&lt;li&gt;Fermyon Cloud 使用 AI 级别的 GPU 处理每个请求。由于我们的快速启动和高效的时间共享，我们可以在数百个应用程序之间共享单个 GPU。&lt;/li&gt;
&lt;li&gt;我们正在推出免费的私人测试版。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大希望&#34;&gt;大希望&lt;/h2&gt;
&lt;p&gt;然而，在 Wasm 和 AI 同时达到潜力之前，还有很长的路要走。在 WasmCon 2023 上，Second State 的 CEO 兼联合创始人 Michael Yuan 和 Wasm 的运行时项目以及 WasmEdge 的讨论了一些正在进行的工作。他在与 De Miguel Meana 的谈话中涵盖了这个话题，“开始使用 AI 和 WebAssembly”在 WasmCon 2023 上。&lt;/p&gt;
&lt;p&gt;“在这个领域（AI 和 Wasm）需要做很多生态系统工作。例如，仅拥有推理是不够的，”Yuan 说。“现在的百万美元问题是，当您拥有图像和文本时，如何将其转换为一系列数字，然后在推理之后如何将这些数字转换回可用的格式？”&lt;/p&gt;
&lt;p&gt;预处理和后处理是 Python 今天最大的优势之一，这得益于为这些任务提供的众多库，Yuan 说。将这些预处理和后处理函数合并到 Rust 函数中将是有益的，但需要社区更多的努力来支持其他模块。“这个生态系统有很大的增长潜力，”Yuan 说。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>O&#39;Reilly：值得关注的雷达趋势（2023 年 8 月）</title>
      <link>https://jimmysong.io/trans/radar-trends-to-watch-august-2023/</link>
      <pubDate>Thu, 10 Aug 2023 13:05:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/radar-trends-to-watch-august-2023/</guid>
      <description>
        
        
        &lt;p&gt;人工智能依然是新闻头条。在过去的一个月中，我们看到了许多语言模型的重大更新：Claude 2，其上下文限制为 10 万个令牌；LLaMA 2，限制相对较宽松；以及 Stable Diffusion XL，是 Stable Diffusion 的一个功能更强大的版本。Claude 2 的巨大上下文是否真的改变了模型的能力？开放访问和开源语言模型在商业应用发展中将扮演什么角色？&lt;/p&gt;
&lt;h2 id=&#34;人工智能&#34;&gt;人工智能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stability.ai/blog/stable-diffusion-sdxl-1-announcement&#34; title=&#34;Stable Diffusion XL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stable Diffusion XL&lt;/a&gt; 是一个新的生成模型，扩展了 Stable Diffusion 的能力。它承诺更短、更容易的提示；正确地在图像内生成文本的能力；能够在私有数据上进行训练；以及更高质量的输出。在 &lt;a href=&#34;https://clipdrop.co/stable-diffusion&#34; title=&#34;clipdrop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;clipdrop&lt;/a&gt; 上试用它。&lt;/li&gt;
&lt;li&gt;OpenAI &lt;a href=&#34;https://arstechnica.com/information-technology/2023/07/openai-discontinues-its-ai-writing-detector-due-to-low-rate-of-accuracy/&#34; title=&#34;撤回了 OpenAI Classifier&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;撤回了 OpenAI Classifier&lt;/a&gt;，这是一个用于检测 AI 生成文本的工具，因为它的准确性不够高。&lt;/li&gt;
&lt;li&gt;ChatGPT 添加了一个名为“&lt;a href=&#34;https://openai.com/blog/custom-instructions-for-chatgpt&#34; title=&#34;Custom Instructions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Custom Instructions&lt;/a&gt;”的新功能。这个功能允许用户在任何其他用户生成的提示之前指定一个初始提示；实际上，它是一个个人的“系统提示”。这样可以让 Prompt Injection 更有趣。&lt;/li&gt;
&lt;li&gt;高通正与 Facebook/Meta 合作，在像手机这样的小型设备上运行 &lt;a href=&#34;https://www.qualcomm.com/news/releases/2023/07/qualcomm-works-with-meta-to-enable-on-device-ai-applications-usi&#34; title=&#34;LLaMA 2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LLaMA 2&lt;/a&gt;，使得 AI 应用可以在本地运行。目标机器的大小将比开源和其他许可证的区别更少。&lt;/li&gt;
&lt;li&gt;StabilityAI 发布了两个新的大型语言模型，&lt;a href=&#34;https://stability.ai/blog/freewilly-large-instruction-fine-tuned-models&#34; title=&#34;FreeWilly1 和 FreeWilly2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FreeWilly1 和 FreeWilly2&lt;/a&gt;。它们分别基于 LLaMA 和 LLaMA 2。它们被称为开放访问（而不是开源），声称某些任务的性能类似于 GPT 3.5。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chat.lmsys.org/?arena&#34; title=&#34;Chatbot Arena&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chatbot Arena&lt;/a&gt; 让 &lt;a href=&#34;https://arxiv.org/abs/2306.05685&#34; title=&#34;聊天机器人互相对战&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;聊天机器人互相对战&lt;/a&gt;。用户输入提示，然后将其发送给两个未知（随机选择？）的语言模型。在生成响应后，用户可以宣布获胜者，并了解竞争的模型。&lt;/li&gt;
&lt;li&gt;GPT-4 解决问题的能力可能在过去几个月中 &lt;a href=&#34;https://arxiv.org/pdf/2307.09009.pdf&#34; title=&#34;有所下降&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有所下降&lt;/a&gt;，特别是它解决数学问题和生成正确的 Python 代码的能力似乎有所下降。另一方面，它对越狱攻击更加稳健。&lt;/li&gt;
&lt;li&gt;Facebook/Meta 发布了 &lt;a href=&#34;https://ai.meta.com/llama/&#34; title=&#34;Llama 2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Llama 2&lt;/a&gt;。虽然对其使用的限制较少，但它并不是 &lt;a href=&#34;https://blog.opensource.org/metas-llama-2-license-is-not-open-source/&#34; title=&#34;开源的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开源的&lt;/a&gt;，尽管 Facebook 声称它是。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Forethought-Technologies/AutoChain&#34; title=&#34;Autochain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Autochain&lt;/a&gt; 是 Langchain 的一种轻量级、简化的替代品。它允许开发人员在大型语言模型和数据库之上构建复杂的应用程序。&lt;/li&gt;
&lt;li&gt;Elon Musk &lt;a href=&#34;https://techxplore.com/news/2023-07-musk-xai-rival-openai-google.html&#34; title=&#34;宣布了&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布了&lt;/a&gt; 他的新人工智能公司 xAI。这是否真正有助于人工智能或成为另一个花边，还有待观察。&lt;/li&gt;
&lt;li&gt;Anthropic 宣布了 &lt;a href=&#34;https://www.anthropic.com/index/claude-2&#34; title=&#34;Claude 2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Claude 2&lt;/a&gt;，这是他们大型语言模型的新版本。在 &lt;a href=&#34;https://claude.ai/login&#34; title=&#34;claude.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;claude.ai&lt;/a&gt; 上提供了聊天界面，API 访问也可用。Claude 2 允许多达 10 万个令牌的提示，比其他 LLM 大得多，并且可以生成长度为“几千个令牌”的输出。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zelikman.me/parselpaper/&#34; title=&#34;parsel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;parsel&lt;/a&gt; 是一个框架，帮助大型语言模型在涉及分层多步推理和问题解决的任务上做得更好。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mshumer/gpt-prompt-engineer&#34; title=&#34;gpt-prompt-engineer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpt-prompt-engineer&lt;/a&gt; 是一个工具，它读取您希望 AI 执行的任务的描述，以及若干个测试用例。然后，它生成关于一个主题的大量提示，测试提示，然后对结果进行评分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jerryjliu/llama_index&#34; title=&#34;LlamaIndex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LlamaIndex&lt;/a&gt; 是一个面向语言模型的 &lt;a href=&#34;https://www.llamaindex.ai/&#34; title=&#34;数据框架&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据框架&lt;/a&gt;（有时被称为“编排框架”），简化了对用户数据进行索引并使用该数据构建复杂提示的过程。它可以与 Langchain 一起用于构建复杂的 AI 应用程序。&lt;/li&gt;
&lt;li&gt;OpenAI 正在逐步发布其 &lt;a href=&#34;https://openai.com/blog/chatgpt-plugins&#34; title=&#34;代码解释器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;代码解释器&lt;/a&gt;，它将允许 ChatGPT 执行它创建的任何代码，使用用户提供的数据，并将输出发送回用户。代码解释器可以减少幻觉、错误和错误的数学。&lt;/li&gt;
&lt;li&gt;人类现在可以通过 &lt;a href=&#34;https://goattack.far.ai/pdfs/go_attack_paper.pdf&#34; title=&#34;找到并利用 AI 系统的游戏弱点&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;找到并利用 AI 系统的游戏弱点&lt;/a&gt;，诱导 AI 犯下严重错误，从而打败 AI 的围棋。&lt;/li&gt;
&lt;li&gt;时间到了提出存在性问题的时候：单个香蕉存在吗？&lt;a href=&#34;https://www.digital-science.com/tldr/article/the-lone-banana-problem-or-the-new-programming-speaking-ai/&#34; title=&#34;Midjourney 不这么认为&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Midjourney 不这么认为&lt;/a&gt;。说真的，这是一篇关于设计适当的提示以提供适当结果的困难的优秀文章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theregister.com/2023/07/03/jolly_roger_telephone_company/&#34; title=&#34;Jolly Roger Telephone Company&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jolly Roger Telephone Company&lt;/a&gt; 开发了基于 GPT-4 的语音机器人，可以雇佣它来回答电话，当推销员打电话时。如果你想听听，结果可能会很有趣。&lt;/li&gt;
&lt;li&gt;Apache Spark 现在有了一个 &lt;a href=&#34;https://www.databricks.com/blog/introducing-english-new-programming-language-apache-spark&#34; title=&#34;English SDK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;English SDK&lt;/a&gt;。它比 CoPilot 等工具更进一步，允许您在编写代码时直接使用英语。&lt;/li&gt;
&lt;li&gt;人类可能会更愿意相信由 AI 生成的错误信息，可能是因为 AI 生成的文本比大多数人类文本更好结构化。或者，可能是因为 AI 很擅长说服。&lt;/li&gt;
&lt;li&gt;OpenOrca是另一个基于 LLaMA 的开源语言模型和数据集。它的目标是复制 Microsoft 的&lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/orca-progressive-learning-from-complex-explanation-traces-of-gpt-4/&#34; title=&#34;Orca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Orca&lt;/a&gt;的训练数据，该模型是使用 GPT-4 的链式思考提示和响应进行训练的。Orca 模型的主张是它可以复制 GPT-4 的“推理”过程。&lt;/li&gt;
&lt;li&gt;在其&lt;a href=&#34;https://thenewstack.io/snowflake-pushes-range-of-new-ai-developer-capabilities/&#34; title=&#34;开发者峰会&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开发者峰会&lt;/a&gt;上，Snowflake 宣布了 Document AI：对非结构化文档集合的自然语言查询。该产品基于他们自己的大型语言模型，而不是 AI 提供商。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程&#34;&gt;编程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;“它在我的机器上运行”已经变成了“&lt;a href=&#34;https://dwdraju.medium.com/how-it-works-in-my-machine-turns-it-works-in-my-container-1b9a340ca43d&#34; title=&#34;它在我的容器中运行&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;它在我的容器中运行&lt;/a&gt;”：这篇文章提供了一些关于如何避免困扰计算机用户数十年的问题的好建议。&lt;/li&gt;
&lt;li&gt;StackOverflow 正在将 AI 集成到其产品中。StackOverflow for Teams 现在有一个&lt;a href=&#34;https://stackoverflow.co/labs/slack/&#34; title=&#34;chatbot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chatbot&lt;/a&gt;来帮助解决技术问题，以及一个新的&lt;a href=&#34;https://genai.stackexchange.com/&#34; title=&#34;GenAI StackExchange&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GenAI StackExchange&lt;/a&gt;用于讨论生成 AI，提示编写和相关问题。&lt;/li&gt;
&lt;li&gt;GitHub 泄露私钥和身份验证密钥并不是新闻。但是对 DockerHub 上可用的容器进行的研究表明，Docker 容器也会泄露密钥和密码，其中许多密钥正在使用中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://firejail.wordpress.com/&#34; title=&#34;Firejail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firejail&lt;/a&gt;是一个 Linux 工具，可以在私有，安全的沙箱中运行任何进程。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2023/07/10/complexity-software-information/&#34; title=&#34;复杂和复杂&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;复杂和复杂&lt;/a&gt;：有什么区别？它与信息有关，在“复杂系统”的时代，了解它很重要。第一部分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/panki27/npm-manifest-check&#34; title=&#34;npm-manifest-check&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npm-manifest-check&lt;/a&gt;是一个工具，用于检查NPM 包中的内容与包的清单。这是解决 NPM 中恶意包问题的部分解决方案。&lt;/li&gt;
&lt;li&gt;Facebook 描述了他们的&lt;a href=&#34;https://engineering.fb.com/2023/06/27/developer-tools/meta-developer-tools-open-source/&#34; title=&#34;软件开发平台&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;软件开发平台&lt;/a&gt;，其中大部分已经开源。很少有开发人员需要使用这么大的软件项目，但是他们的工具（包括测试框架，版本控制和构建系统）值得探究。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dredozubov/polyrhythmix&#34; title=&#34;Polyrhythmix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polyrhythmix&lt;/a&gt;是一个命令行程序，用于生成多节奏鼓部。没有涉及 AI。&lt;/li&gt;
&lt;li&gt;Philip Guo 的“&lt;a href=&#34;https://www.oreilly.com/radar/real-real-world-programming-with-chatgpt/&#34; title=&#34;Real-Real-World Programming with ChatGPT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Real-Real-World Programming with ChatGPT&lt;/a&gt;”展示了使用 ChatGPT 执行真实编程任务的情况：哪些工作得很好，哪些不好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安全&#34;&gt;安全&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个研究小组发现了一种方法来&lt;a href=&#34;https://llm-attacks.org/&#34; title=&#34;自动生成攻击字符串&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动生成攻击字符串&lt;/a&gt;，以迫使大型语言模型生成有害内容。这些攻击可针对开源和闭源模型。AI 提供商无法防御它们还不清楚。&lt;/li&gt;
&lt;li&gt;黑客集团 Lazarus Group 正在对 JavaScript 加密货币开发人员进行&lt;a href=&#34;https://socket.dev/blog/social-engineering-campaign-npm-malware&#34; title=&#34;社交工程攻击&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;社交工程攻击&lt;/a&gt;。开发人员被邀请在依赖于恶意 NPM 包的 Github 项目上进行合作。&lt;/li&gt;
&lt;li&gt;语言模型是网络犯罪的下一个大事。一个名为WormGPT的大型语言模型已经被开发用于网络犯罪。它基于 GPT-J。WormGPT 可在暗网上使用，以及成千上万的被盗 ChatGPT 凭据。&lt;/li&gt;
&lt;li&gt;根据 MITRE 的研究，&lt;a href=&#34;https://www.theregister.com/2023/06/29/cwe_top_25_2023/&#34; title=&#34;越界写入&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;越界写入&lt;/a&gt;是最危险的安全漏洞之一。它们也是最常见的，并且一直位列榜首。解决问题的简单方法是使用 Rust。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络&#34;&gt;网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;又一个 Web 框架？&lt;a href=&#34;https://enhance.dev/&#34; title=&#34;Enhance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enhance&lt;/a&gt;声称是 HTML 优先，只有在需要时才使用 JavaScript。实际情况可能并不那么简单，但如果没有其他东西，它证明了对复杂和臃肿的 Web 应用程序的不满正在增长。&lt;/li&gt;
&lt;li&gt;又一个新的浏览器？&lt;a href=&#34;https://arc.net/&#34; title=&#34;Arc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Arc&lt;/a&gt; &lt;a href=&#34;https://arstechnica.com/gadgets/2023/07/the-browsing-companys-unconventional-browser-arc-releases-publicly-on-mac/#p3&#34; title=&#34;重新思考&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重新思考&lt;/a&gt;浏览体验，具有在选项卡组之间切换和自定义单个网站的功能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34; title=&#34;HTMX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTMX&lt;/a&gt;提供一种使用 HTML 属性构建许多高级 Web 页面功能的方法，包括 WebSockets 和我们曾经称之为 Ajax。所有复杂性似乎都打包在一个 JavaScript 库中。&lt;/li&gt;
&lt;li&gt;在元宇宙中有一家&lt;a href=&#34;https://www.technologyreview.com/2023/06/28/1074338/future-job-metaverse-lawyer/&#34; title=&#34;律师事务所&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;律师事务所&lt;/a&gt;，以及一个新兴的元宇宙律师协会。这是一个很好的会议地点，尽管律师不能获得在元宇宙中执业的许可。&lt;/li&gt;
&lt;li&gt;欧洲法院（CJEU）裁定 Meta 的 GDPR 合规方法是非法的，Meta 可能不会在未经明确，自由授予的同意的情况下使用数据进行除核心功能之外的任何其他事情; 不在使用条款文件中隐藏的同意不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加密货币&#34;&gt;加密货币&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;谷歌已更新其关于 Android 应用程序的&lt;a href=&#34;https://android-developers.googleblog.com/2023/07/new-blockchain-based-content-opportunities-google-play.html&#34; title=&#34;政策&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;政策&lt;/a&gt;，允许应用程序提供基于区块链的资产，例如 NFT。&lt;/li&gt;
&lt;li&gt;ChatGPT 可以编程为&lt;a href=&#34;https://marginalrevolution.com/marginalrevolution/2023/07/teaching-gpt-to-send-bitcoin-payments.html&#34; title=&#34;发送比特币付款&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;发送比特币付款&lt;/a&gt;。正如第一个评论者指出的那样，这是 Langchain 的一个相当简单的应用。但这肯定会发生的事情。但问题是：我们何时会有基于 GPT 的加密货币套利？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生物学&#34;&gt;生物学&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google 开发了&lt;a href=&#34;https://arxiv.org/abs/2307.14334&#34; title=&#34;Med-PaLM M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Med-PaLM M&lt;/a&gt;，试图构建一个被训练用于生物医学应用程序的“通用”多模态 AI。Med-PaLM M 仍然是一个研究项目，但可能代表了将大型语言模型应用于医学的一步前进。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;材料&#34;&gt;材料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2307.12008&#34; title=&#34;室温常压超导体&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;室温常压超导体&lt;/a&gt;：这一说法引起了很多怀疑 - 但是一如既往，最好等到另一个团队成功或未能复制结果。如果这项研究成果成立，那么这是一个巨大的进步。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>WebAssembly 的采用受到了什么阻碍？</title>
      <link>https://jimmysong.io/trans/whats-holding-up-webassemblys-adoption/</link>
      <pubDate>Mon, 07 Aug 2023 13:05:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/whats-holding-up-webassemblys-adoption/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;译者注：WebAssembly 的采用情况受到了组件模型的阻碍，这是一个需要解决的关键问题。尽管 WebAssembly 已经被广泛部署以提高应用程序在浏览器或后端运行时的性能，但其全部潜力尚未得到实现。为了实现一次编写、多处部署范例，需要一个通用的标准来将不同语言与其特定的功能集和设计范式集成起来。许多公司和大学的工程师正在开发组件模型、WASI 提议和语言工具链，这些工程师的目标是将规范放入 W3C 中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WebAssembly 的承诺是：将应用程序放在 WebAssembly（Wasm）模块中，可以提高运行时性能和降低延迟速度，同时提高跨平台的兼容性。&lt;/p&gt;
&lt;p&gt;WebAssembly 只需要 CPU 指令集。这意味着在 WebAssembly 模块中部署一个应用程序理论上应该能够在不同的不同的设备上运行和更新，无论是服务器、边缘设备、多云、无服务器环境等等。&lt;/p&gt;
&lt;p&gt;因此，WebAssembly 已经被广泛部署以提高应用程序在浏览器或后端运行时的性能。然而，WebAssembly 的全部潜力尚未得到实现。&lt;/p&gt;
&lt;p&gt;尽管 &lt;a href=&#34;https://webassembly.github.io/spec/core/bikeshed/&#34; title=&#34;WebAssembly 核心规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 核心规范&lt;/a&gt; 已经成为标准，但服务器端 Wasm 仍然是一个正在进行中的工作。服务器端 Wasm 层有助于确保在部署 Wasm 应用程序的不同设备和服务器之间的端点兼容性。如果没有一个服务器端 WebAssembly 的标准化机制，那么将需要为每种语言构建导出和导入，以便每个运行时将以不同的方式理解导出/导入。&lt;/p&gt;
&lt;p&gt;截至今天，“Wasm 组件”是组件模型，但还有其他品种正在被研究；“&lt;a href=&#34;https://thenewstack.io/mozilla-extends-webassembly-beyond-the-browser-with-wasi/&#34; title=&#34;Wasi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasi&lt;/a&gt;”是一种为特定硬件配置 WASM 的方法。wasi-libc 是“posixlike kernel”组或“world”；wasi-cloud-core 是一个无服务器“world”的提议。因此，开发人员可以使用他们选择的语言创建应用程序，同时在任何环境中同时分发，无论是在 Kubernetes 集群、服务器、边缘设备等等。&lt;/p&gt;
&lt;p&gt;“超音速”性能、降低操作成本和平台中立性是 WebAssembly 的价值主张，但组件模型仍然是关键问题，Butcher 说。“性能是最容易解决的问题，我认为我们已经能够核对它了。在 Fermyon，我们看到成千上万的用户注册我们的云服务，使总拥有成本直线下降，”Butcher 说。“但是，平台中立性——在我们关心的层面上——需要组件模型。在这方面，明天来临得越快越好。”&lt;/p&gt;
&lt;p&gt;WebAssembly 设计成可以运行使用多种语言编写的应用程序。它现在可以容纳 Python、JavaScript、C++、Rust 等。使用不同编程语言编写的不同应用程序应该能够在单个模块内运行，但这种能力仍然在开发中。&lt;/p&gt;
&lt;p&gt;“在系统级别上使编程语言真正可互换可能是实现一次编写、多处部署范例的最后一个领域。但是为了使这项工作成功，我们需要一个通用的标准来将不同语言与其特定的功能集和设计范式集成起来，”Enterprise Management Associates（EMA）的分析师 Torsten Volk 表示。&lt;/p&gt;
&lt;p&gt;“这是一个经典的集体行动问题，其中单独的营利组织必须合作才能共同实现语言互操作的最终目标。此外，当涉及到在跨语言上标准化和完善功能集时，它们需要就务实妥协达成一致。”&lt;/p&gt;
&lt;h2 id=&#34;汇聚在一起&#34;&gt;汇聚在一起&lt;/h2&gt;
&lt;p&gt;与此同时，来自许多公司和大学的工程师正在开发组件模型、Wasi 提议和语言工具链，这些工程师的目标是将规范放入 World Wide Web Consortium (W3C) 中，Microsoft 的主要项目经理、Azure Core Upstream 的负责人 Ralph Squillace 表示。&lt;/p&gt;
&lt;p&gt;这些工程师通过为开源项目做出贡献或维护开源项目，参与 ByteCode Alliance 等工作，积极为知识共享做出贡献，或在会议上分享他们的知识和经验，例如在 KubeCon + CloudNativeCon Europe 的联合活动 Cloud Native Wasm Day 上。&lt;/p&gt;
&lt;p&gt;“当涉及到标准时，所有主要的相关方都需要能够告诉他们的利益相关者为什么有必要在这个努力上花费宝贵的开发人员时间。当不同的当事方遵循不同的激励结构时，这变得特别棘手，例如，云服务提供商有兴趣让客户在他们的服务上花费尽可能多的钱，而不会因移动到另一个云而感到不满，”Volk 表示。“这意味着需要某种程度的锁定，而企业软件供应商需要专注于高度可定制性和可移植性，从而将其产品开放给尽可能多的受众。所有这些组合显示了实现 Wasm 的互操作性的困难程度之高。我希望我们可以，因为回报肯定应该是值得的。”&lt;/p&gt;
&lt;p&gt;许多提供 PaaS 提供的工具成员继续不断涌现，以等待预期的 WebAssembly 时代的到来。参与者包括 Fermyon 和 Cosmonic。新的玩家 Dylibso 正在开发定制解决方案进行观察性分析；这些解决方案包括 Modsurfer，用于分析在您的环境中运行特定代码的复杂性和潜在风险。&lt;/p&gt;
&lt;p&gt;与此同时，大多数大型软件公司正在积极为 Wasm 做出贡献，而不一定创建正式的部门来支持 Wasm 相关的开源项目、开发、基础设施和网络拓扑的集成，或为 Wasm 开发应用程序，技术领袖几乎都在生产中或作为沙盒项目使用 Wasm。&lt;/p&gt;
&lt;p&gt;为了促进 WebAssembly（Wasm）的整合并弥合任何现有的差距，VMware 的 Wasm Labs 推出了 Wasm Language Runtimes 项目。主要目标是准备运行语言运行时、库和组件，供对 WebAssembly 感兴趣的开发人员使用，根据 VMware 的高级主管、Bitnami 的 CEO Daniel Lopez Ridruejo 表示。&lt;/p&gt;
&lt;p&gt;这些语言运行时可以与其他各种倡议结合使用，包括 mod_wasm（用于运行传统的 Web 应用程序，例如 WordPress）和 Wasm Workers Server（用于执行边缘/无服务器应用程序）。Ridruejo 还提到了 Language Runtime 项目与 Fermyon 的 Spin 等开源努力的兼容性。&lt;/p&gt;
&lt;p&gt;其他公司，如 Chronosphere 和 Microsoft，已经开始使用 WebAssembly 支持其操作，同时继续积极为社区的 Wasm 开发做出贡献。在 Microsoft 的情况下，它与 WebAssembly 的工作可以追溯到多年前。例如，Microsoft Flight Simulator 多年来一直在使用 WebAssembly 进行模块保护，例如当它被证明可以提高分发为 WebAssembly 模块的附加组件的安全性和可移植性时。Excel Online 使用 WebAssembly 计算 Lambda 函数。&lt;/p&gt;
&lt;p&gt;如今，Microsoft 的大部分工作都集中在即将到来的组件模型上，Microsoft 的 Squillace 表示。例如，Microsoft 正在扩大 Azure Kubernetes Service WASI NodePool 的预览，并在 Wasm 沙盒之上为其服务提供额外的超级监视保护，用于请求。这为非常小的裸机微型虚拟机非常快速地提供了用于 wasm 函数的使用。）&lt;/p&gt;
&lt;p&gt;在边缘浏览器之外，Microsoft 主要投资于基于服务器的 Wasm、系统接口（wasi）和围绕 Bytecode Alliance Foundation 的 Wasm 组件生态系统，以及基础设施和语言工具链，以实现有效的使用，Squillace 表示。“这意味着像 CNCF 的 Containerd runwasi shim 用于 Kubernetes 集成这样的开源投资，但也意味着与 TinyGo 兼容的 Wasm 组件工具、VSCode 扩展和 serverless 提案，例如 wasi-cloud-core，以及 Azure 投资于安全性，例如 hyperlight 和诸如 AKS WASI NodePool Preview 和 AKS Edge Essentials 等 Azure 服务。”&lt;/p&gt;
&lt;h2 id=&#34;大炒作&#34;&gt;大炒作&lt;/h2&gt;
&lt;p&gt;WebAssembly 的轨迹反映了类似技术（如 Java、容器等）发生的周期。Ridruejo 表示：“每一个都看到了一个围绕它的生态系统增长的周期，有了新的监控方式、安全等等。现在还太早，不知道它看起来是什么样子，”Ridruejo 表示。“问题是，在工具提供商和大型企业开始利用 WebAssembly 赚钱之前，需要发生什么。对此，Squillace 表示：&lt;/p&gt;
&lt;p&gt;“客户已经告诉我们，他们需要一个可理解的（如果不是伟大的）开发体验和一个稳固的部署和管理体验。他们还需要网络支持（在第二个预览版中推出）；没有网络支持意味着 IoT 中没有服务主机的运行时支持。最后，他们需要一致的交互式调试。这最后一个在所有语言和运行时上都很难。”&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>OpenTelemetry Protocol (OTLP) 1.0.0 发布</title>
      <link>https://jimmysong.io/trans/otlp-version-one-released/</link>
      <pubDate>Sun, 06 Aug 2023 13:05:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/otlp-version-one-released/</guid>
      <description>
        
        
        &lt;p&gt;最近，&lt;a href=&#34;https://opentelemetry.io/&#34; title=&#34;OpenTelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt; Protocol (OTLP) 1.0.0 发布了。OTLP 规范描述了遥测数据在遥测源、收集器等中间节点和遥测后端之间的编码、传输和传递机制。它是 OpenTelemetry 项目中设计的通用遥测数据传递协议。&lt;/p&gt;
&lt;p&gt;OpenTelemetry (OTEL) 是一个由 OpenCensus 和 OpenTracing 项目合并形成的开源 Cloud Native Computing Foundation (CNCF) 项目。它是一个供仪表化、生成、收集和导出遥测数据（例如跟踪、指标和日志）使用的供应商中立的开源可观测性框架。该框架提供了一组 API、库、代理和收集器服务，用于捕获分布式跟踪和指标。此外，它的规范在 2021 年早些时候达到了 1.0.0 版本状态，并被 InfoQ 报道。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 通过使用 API 来仪表化应用程序代码，以生成遥测数据，并在不同的 SDK 实现之间无缝地引导收集指标。它提供了针对特定语言的集成和库，例如 Java、Golang、.NET 和 Python 的 OTel SDK，以使开发人员能够仪表化其代码并捕获遥测数据。这些库中的遥测数据被收集并传输到 OpenTelemetry Collector，利用 OTLP 在客户端和服务器之间进行数据交换。OTLP 定义了一个序列化模式，紧密遵循跟踪、指标和日志的数据模型。&lt;/p&gt;
&lt;p&gt;作为中央存储库，OpenTelemetry Collector 接收、处理和导出从各种源收集的遥测数据，既作为单个应用程序的本地代理，也作为多个应用程序的网关。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/otlp-version-one-released/otel-diagram.svg&#34; data-img=&#34;/trans/otlp-version-one-released/otel-diagram.svg&#34; alt=&#34;image&#34; data-caption=&#34;OpenTelemetry 架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;OpenTelemetry 架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Open Telemetry Diagram（来源：&lt;a href=&#34;https://opentelemetry.io/docs/&#34; title=&#34;OpenTelemetry 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 文档&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OTLP 在数据序列化、反序列化和网络服务之间的传输方面发挥着重要作用。该协议旨在指定一个序列化模式，紧密遵循数据模型并解决其他遥测协议的问题。&lt;/p&gt;
&lt;p&gt;Honeycomb 开发者倡导者 &lt;a href=&#34;https://twitter.com/MartinDotNet&#34; title=&#34;Martin Thwaites&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Martin Thwaites&lt;/a&gt; 说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OTLP 是 OpenTelemetry 的生命力，使其比以往任何时候都更强大；转向 v1 将把这一点提升到一个新的水平。已经有大多数供应商适应了使用 OTLP 协议接收数据；通过 V1，这将给人们带来一些急需的信心，希望可以让最后几个顽固分子添加 OTLP 支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，他表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这很重要，因为它开启了更多的互操作性，减少了添加专有协议库到我们堆栈中的需求，这对于希望更好地了解其应用程序的情况下获得更多可见性的人来说只能是一个胜利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，OpenTelemetry 项目目前是 CNCF 的&lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;孵化项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;孵化项目&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>OSM（Open Service Mesh）项目将停止更新，团队将协力 Istio 服务网格开发</title>
      <link>https://jimmysong.io/trans/osm-deprecated/</link>
      <pubDate>Fri, 05 May 2023 09:16:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/osm-deprecated/</guid>
      <description>
        
        
        &lt;p&gt;开放服务网格（OSM）于 2020 年 8 月推出，并于此后不久加入了 CNCF。自那以后，OSM 一直在与社区紧密合作，提供一个使用可互操作的服务网格 API 集合的简化操作服务网格体验，这些 API 集合通过&lt;a href=&#34;https://smi-spec.io/&#34; title=&#34;服务网格接口（SMI）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格接口（SMI）&lt;/a&gt;实现。&lt;/p&gt;
&lt;p&gt;服务网格社区涌现了大量的兴奋、进步和共享的想法，这些想法与 OSM 的指导原则相一致。OSM 的宪章一直是提供一个聚焦于易于消费和操作的服务网格体验。同样，另一个服务网格社区项目 Istio 也简化了操作，并且 Istio 项目继续发展和支持一组新的用例和功能，以推进未来各种工作负载，例如无 Sidecar 模式。随着 &lt;a href=&#34;https://istio.io/latest/blog/2022/istio-accepted-into-cncf/&#34; title=&#34;Istio 项目加入 CNCF 的宣布&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 项目加入 CNCF 的宣布&lt;/a&gt;，OSM 团队很高兴能够与 Istio 社区更加紧密地合作。这种合作将导致 OSM 项目在与 CNCF 的档案工作中向着 Istio 项目进行重点资源的集中。&lt;/p&gt;
&lt;h2 id=&#34;服务网格成熟度&#34;&gt;服务网格成熟度&lt;/h2&gt;
&lt;p&gt;随着云原生采用的势头不断增强，用户需要服务网格提供的核心功能和可扩展性来支持他们的云原生微服务。增强功能，如 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; title=&#34;Kubernetes Gateway API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt; 和 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/contributing/gamma/&#34; title=&#34;用于网格管理和管控的网关 API（GAMMA）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;用于网格管理和管控的网关 API（GAMMA）&lt;/a&gt;，进一步凸显了服务网格在当今云原生栈中的关键重要性和成熟度。&lt;/p&gt;
&lt;p&gt;因此，服务网格正在发展以满足未来云原生工作负载的需求，这是 OSM 团队在项目路线图和技术决策方面的关注点。我们看到社区继续致力于为服务网格用户提供简化的操作体验是一个重要的投资领域，无论是在时间还是资源方面。随着社区在诸如 Gateway API 之类的功能上进行投资，例如通过 GAMMA 为标准的一组服务网格 API 和无 Sidecar 代理模式，我们认为这些是激发集体努力的领域。这些社区主导的举措为增强协作提供了坚实的基础，并创造了一个更可持续的服务网格生态系统。&lt;/p&gt;
&lt;h2 id=&#34;前进的道路&#34;&gt;前进的道路&lt;/h2&gt;
&lt;p&gt;OSM 维护人员很高兴与 Istio 社区以及 Gateway API 和 GAMMA 的项目合作，在 CNCF 提供的强大治理和协作生态系统下开展合作。Istio 项目继续发展以支持一组新的用例和功能，例如带&lt;a href=&#34;https://istio.io/latest/blog/2022/introducing-ambient-mesh/&#34; title=&#34;环境网格（Ambient Mesh）的宣布&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;环境网格（Ambient Mesh）的宣布&lt;/a&gt;的无 Sidecar 模式。&lt;/p&gt;
&lt;p&gt;OSM 团队一直致力于满足社区需求，提供亟需的服务网格功能，以解决当前问题并开发下一代服务网格技术。这个决定将使团队帮助加速实现这一目标。&lt;strong&gt;此外，将不再发布 OSM 的新版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前，与 Istio 的即刻兴趣和合作包括利用 Kubernetes 的 ClusterTrustBundles 功能增强 Istio 的网格证书管理体验（&lt;a href=&#34;https://docs.google.com/document/d/1eVKo57JVQ8QGjqRkMYGHDraS_vANJf3tTUWqqbvcylQ/edit&#34; title=&#34;RFC：ClusterTrustBundle 与 Istio 的集成&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC：ClusterTrustBundle 与 Istio 的集成&lt;/a&gt;），提出“安全模式”功能方法，为 Istio 提供一种简化的方式，以对最稳定的 API 进行任务关键型企业环境的防护（&lt;a href=&#34;https://docs.google.com/document/d/1aaORW2Ak4Vfpr-N68Q04qS7iskDdF3v7lcZFQsFA_L0/edit&#34; title=&#34;提案：Istio 安全模式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;提案：Istio 安全模式&lt;/a&gt;），改进 Istio 的遥测体验，并与 Istio 新宣布的无 Sidecar 环境网格模式进行合作。鉴于有许多共享目标，OSM 团队认为这是一种有效和高效的协作方式，可以推动社区向前发展。我们很高兴宣布这一努力，并期待更多贡献者和维护者加入塑造下一代服务网格的发展。如果您尚未加入 Istio 的 CNCF Slack 频道，请考虑加入，成为当前和未来讨论 Istio 的一部分。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Tetrate 推出针对 Amazon EKS 设计的服务网格解决方案 TSE</title>
      <link>https://jimmysong.io/trans/introducing-tetrate-service-express/</link>
      <pubDate>Thu, 13 Apr 2023 16:13:33 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/introducing-tetrate-service-express/</guid>
      <description>
        
        
        &lt;p&gt;Tetrate Service Express (TSE) 是一款基于开源软件的服务连接、安全和弹性自动化解决方案，专为 Amazon EKS 设计。&lt;/p&gt;
&lt;p&gt;本文译自：&lt;a href=&#34;https://tetrate.io/blog/introducing-tetrate-service-express/&#34; title=&#34;Tetrate Service Express 介绍&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Express 介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;快速实现-amazon-eks-上安全和弹性的服务网格&#34;&gt;快速实现 Amazon EKS 上安全和弹性的服务网格&lt;/h2&gt;
&lt;p&gt;今天我们很高兴地宣布 Tetrate Service Express (TSE)，这是一款针对 Amazon EKS 的服务连接、安全和弹性自动化解决方案。我们基于 Istio 和 Envoy 等开源服务网格组件构建了 TSE，并针对 AWS 对 TSE 进行了简化安装、配置和操作的优化。如果您的团队正在 AWS 上进行服务网格实验，并且需要快速证明投资回报率，而无需掌握复杂的 Istio 和 AWS 基元，那么 TSE 就是适合您的选择！如果您的团队已经在单个集群上拥有了服务网格，但希望将网格扩展到多个集群甚至区域，那么 TSE 也可以帮助您。事实上，TSE 是唯一一款基于开源软件并针对 AWS 进行优化的产品，预先集成了最受欢迎的 AWS 服务，可在几分钟内让您上手。&lt;/p&gt;
&lt;p&gt;如果您想快速了解 Tetrate Service Express 的功能，在&lt;a href=&#34;https://tetr8.io/tse&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;加入等待列表以获取您的评估副本。&lt;/p&gt;
&lt;p&gt;如果您想深入了解 Tetrate Service Express 的新功能，请继续阅读。&lt;/p&gt;
&lt;h2 id=&#34;为什么选择-tetrate-service-express&#34;&gt;为什么选择 Tetrate Service Express&lt;/h2&gt;
&lt;p&gt;如果您的组织想要创造更好的客户体验、提高运营效率或保护知识产权，那么很可能必须构建和运行软件——更高质量、更快速的发布、更好的正常运行时间。而且很可能，应用程序开发团队、运营团队和平台团队正在借助两种创新趋势来实现这些目标：云基础设施的灵活性和微服务。&lt;/p&gt;
&lt;p&gt;在云中构建微服务时，许多团队选择 Amazon EKS 的便利性。然而，随着他们扩展 EKS 工作负载，他们会发现自己面临以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何保护分布在 AWS 上的微服务组件？&lt;/li&gt;
&lt;li&gt;如何在更新或负载下单个组件失败时保持可靠性？&lt;/li&gt;
&lt;li&gt;当一切都是动态的，手动配置不再起作用时，如何管理服务之间的流量？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;越来越多的平台运营团队会在微服务之上创建一个专用的基础设施层——服务网格——它提供了跨微服务组件的服务发现、安全性、认证和可观测性。Istio 和 Envoy 是服务网格控制平面和数据平面的开源标准，但 Istio 和 Envoy 只是部分解决方案，因为它们为运行 Amazon EKS 的团队添加了新的操作复杂性。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image_hu5b2f4aea65b7ebe1bd5b4f5c12ade8c5_60235_1460x867_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image.png&#34; data-img=&#34;/trans/introducing-tetrate-service-express/image.png&#34; data-width=&#34;1460&#34; data-height=&#34;867&#34; alt=&#34;image&#34; data-caption=&#34;Amazon EKS 上的服务网格挑战&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Amazon EKS 上的服务网格挑战&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Tetrate Service Express 为平台团队提供了 Istio 和 Envoy 之上的服务网格自动化。它处理在 Amazon EKS 上安装和配置开源组件，与 AWS 服务集成，并为平台运营商提供管理控制台，以快速配置服务网格以实现安全、弹性和可观测性。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-1_hud387f18fb204c9034a906d87e98fddd1_351772_1474x828_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-1.png&#34; data-img=&#34;/trans/introducing-tetrate-service-express/image-1.png&#34; data-width=&#34;1474&#34; data-height=&#34;828&#34; alt=&#34;image&#34; data-caption=&#34;Tetrate Service Express 提供了一种一致的、可自动化的方法，用于在 Amazon EKS 内部和跨 Amazon EKS 连接、保护和观察服务&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Tetrate Service Express 提供了一种一致的、可自动化的方法，用于在 Amazon EKS 内部和跨 Amazon EKS 连接、保护和观察服务&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;快速安装-amazon-eks-和集成-aws-服务&#34;&gt;快速安装 Amazon EKS 和集成 AWS 服务&lt;/h2&gt;
&lt;p&gt;让 Istio 在 EKS 上运行可能变得更加容易（例如使用&lt;a href=&#34;https://tetrate.io/blog/tid-add-on-for-eks/&#34; title=&#34;Tetrate Istio Distro EKS add-on&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro EKS add-on&lt;/a&gt;），但在您可以操作功能性服务网格之前，还需要完成更多的工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何确保所有服务网格组件都已正确安装和配置？&lt;/li&gt;
&lt;li&gt;如何定义 Istio 和 Envoy 周围的网络基础架构，以实现安全的跨集群连接和可用性？&lt;/li&gt;
&lt;li&gt;如何观察和排查网格上的服务，以协助扩展和优化？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TSE 可以使用 Helm chart 轻松安装在 EKS 上，并与 Route 53 和 NLB（或其他 AWS 负载平衡器类型）轻松集成，以便您可以快速：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定位服务的边缘和入口网关，以管理和安全地控制入口和出口流量。&lt;/li&gt;
&lt;li&gt;通过内置身份验证、速率限制、HA 和安全性提供应用程序的 API。&lt;/li&gt;
&lt;li&gt;获取服务和应用程序的 MELT（度量、事件、日志、跟踪）。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-2_hu6edbc2dd43713e3c95f9bc0844ad92f5_305723_1600x783_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-2.png&#34; data-img=&#34;/trans/introducing-tetrate-service-express/image-2.png&#34; data-width=&#34;1600&#34; data-height=&#34;783&#34; alt=&#34;image&#34; data-caption=&#34;使用 Tetrate Service Express 和示例配置开始&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;使用 Tetrate Service Express 和示例配置开始&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;一步式服务间的-mtls-加密&#34;&gt;一步式服务间的 mTLS 加密&lt;/h2&gt;
&lt;p&gt;服务网格的第一个用例之一是使用 mTLS 启用服务间加密，但一旦你扩展到多个集群，事情就会很快变得复杂：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何在各个集群之间建立和管理单个信任根？&lt;/li&gt;
&lt;li&gt;如何在全面支持零信任姿态的情况下，强制执行 mTLS？&lt;/li&gt;
&lt;li&gt;如何定期轮换证书，并在泄漏或损坏证书的情况下做出响应？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tetrate Service Express 通过提供以下内容使服务易于加密并应用零信任姿态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内置的易于使用的证书颁发机构，可在所有群集中轮换和管理证书。&lt;/li&gt;
&lt;li&gt;在管理级别上定义对所有服务的 mTLS 需求。&lt;/li&gt;
&lt;li&gt;从默认的拒绝所有姿态开始创建细粒度的访问策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-3_hu6edbc2dd43713e3c95f9bc0844ad92f5_120424_1600x783_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-3.png&#34; data-img=&#34;/trans/introducing-tetrate-service-express/image-3.png&#34; data-width=&#34;1600&#34; data-height=&#34;783&#34; alt=&#34;image&#34; data-caption=&#34;默认设置 mTLS&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;默认设置 mTLS&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;集群和区域之间的易于故障转移设置&#34;&gt;集群和区域之间的易于故障转移设置&lt;/h2&gt;
&lt;p&gt;在定义应用程序基础架构时，设置服务的内部高可用性可能是比较复杂的事情，特别是在不同的区域内。一些可能遇到的问题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何配置 Route53、Amazon 负载均衡和其他负载均衡服务，以在不同的集群之间实现可靠的 HA？&lt;/li&gt;
&lt;li&gt;如何在没有 Hairpinning 的情况下设置跨集群通信和内部高可用性？&lt;/li&gt;
&lt;li&gt;当服务失败时如何自动化网络配置更改？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tetrate Service Express 通过提供以下功能使获取服务 HA 易于实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对服务发布进行自动配置的入口、Amazon 负载均衡和 Route 53。&lt;/li&gt;
&lt;li&gt;为内部高可用性自动配置内部和东/西网关。&lt;/li&gt;
&lt;li&gt;动态重新配置网络规则，以在最小中断的情况下在集群之间和之间传输流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-4_hue1b036012aa61af809eb8e728b9f7c49_191752_1600x823_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/introducing-tetrate-service-express/image-4.png&#34; data-img=&#34;/trans/introducing-tetrate-service-express/image-4.png&#34; data-width=&#34;1600&#34; data-height=&#34;823&#34; alt=&#34;image&#34; data-caption=&#34;配置跨区域故障转移&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;配置跨区域故障转移&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;接下来&#34;&gt;接下来&lt;/h2&gt;
&lt;p&gt;这只是我们要从 Tetrate Service Express 中突出显示的一些功能。Tetrate Service Express 将在本月晚些时候发布技术预览版，但是您现在可以加入等待列表，以在发布时获取评估副本。一旦您加入等待列表，我们将与您联系，向您提供访问评估软件、新文档门户网站和 Slack 社区频道的信息。&lt;/p&gt;
&lt;p&gt;我们还计划推出一系列额外的博客、视频和网络研讨会，以展示更多 TSE 的功能。下一场网络研讨会定于 5 月举行，请&lt;a href=&#34;https://app.livestorm.co/p/06a20bee-58b0-4976-977d-c2e4b16dbe68&#34; title=&#34;立即注册&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;立即注册&lt;/a&gt;。最后，请不要忘记在&lt;a href=&#34;https://twitter.com/Tetrateio&#34; title=&#34;Twitter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;或&lt;a href=&#34;https://www.linkedin.com/company/tetrate&#34; title=&#34;LinkedIn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkedIn&lt;/a&gt;上关注 Tetrate，以便在新的 TSE 内容可用时获得即时更新！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 中的外部授权过滤器：使用 OPA 实现灵活的授权策略</title>
      <link>https://jimmysong.io/trans/understanding-istio-and-open-policy-agent-opa/</link>
      <pubDate>Tue, 28 Mar 2023 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/understanding-istio-and-open-policy-agent-opa/</guid>
      <description>
        
        
        &lt;p&gt;客户向我们询问服务网格实践中关于开放策略代理 (OPA) 和服务网格如何结合使用的问题。我们探讨了关于服务网格和 OPA 策略的最佳实践，以及它们如何相互补充的想法。为了构建讨论框架，我们使用了 NIST 的零信任架构标准。在即将发布的 NIST 标准文档特别出版物 800-207A 中，基于身份的分段是一个主要概念。最低标准包括五项策略检查，应应用于进入的每个请求系统和每个后续跃点。您可以观看我们在今年的 CloudNativeSecurityCon 上与来自 NIST 的 Ramaswami Chandramouli 进行的深入讨论的&lt;a href=&#34;https://www.youtube.com/watch?v=s2lIaFhkA8c&#34; title=&#34;演示&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演示&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用服务网格实现基于身份的分割的五个策略检查：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传输中加密&lt;/li&gt;
&lt;li&gt;服务身份和认证&lt;/li&gt;
&lt;li&gt;服务到服务授权&lt;/li&gt;
&lt;li&gt;最终用户身份和身份验证&lt;/li&gt;
&lt;li&gt;最终用户对资源的授权&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简而言之，服务网格是一个专用的基础设施层，专门用于为前四项检查实施策略，并在第五项中发挥一定作用。OPA 的亮点在于第五点：最终用户对资源的授权。&lt;/p&gt;
&lt;p&gt;Istio 的 sidecar 代理充当微服务应用程序的安全内核。Envoy 数据平面是一个通用的策略执行点 (PEP)，可以拦截所有流量并可以在应用层应用策略。就此而言，它是一个参考监视器 ( &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-204b/final&#34; title=&#34;NIST SP 800-204B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST SP 800-204B&lt;/a&gt; )。将 Envoy 作为 PEP，我们可以将安全问题从应用程序转移到网格中。&lt;/p&gt;
&lt;p&gt;策略&lt;strong&gt;检查 1-2：传输中的加密和服务身份与认证&lt;/strong&gt;。为了满足前两个策略检查、传输中的加密以及服务身份和身份验证，网格为系统中的所有通信实施 mTLS。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;策略检查 3：服务到服务授权。&lt;/strong&gt; 服务网格还提供策略三，即服务到服务的授权。OPA 可以在这里开始发挥作用，但由于 OPA 是通用的，它没有围绕服务通信的 DSL，因此您必须自己创建它。另一方面，我们认为策略往往更自然，更容易用专为它构建的语言来表达。服务网格 —— 更重要的是，我们在 Istio 之上构建的应用程序连接和安全平台 &lt;a href=&#34;https://tetrate.io/tetrate-service-bridge/&#34; title=&#34;Tetrate Service Bridge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge&lt;/a&gt;—— 具有对编写服务到服务策略有意义的名词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;策略检查 4：最终用户身份和身份验证。&lt;/strong&gt; 对于第四个策略检查，我们需要在系统的每一跳验证最终用户身份。服务网格提供执行点来进行检查，但有关用户身份验证的实际决定既不在服务网格领域也不在 OPA 范围内。相反，我们需要委托给受信任的身份提供者来在此处做出判决。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;策略检查 5：最终用户对资源的授权。&lt;/strong&gt; 零信任云原生访问控制的第五个策略检查是 OPA 可以发挥重要作用的地方。服务网格没有最终用户和资源之间关系的模型，因此不适合编写有关它的策略。NIST 的指南是通过 OIDC 与现有系统集成或利用专用授权基础设施 —— 例如，NIST 的下一代访问控制 (NGAC) 和 Open Policy Agent。&lt;/p&gt;
&lt;p&gt;例如，以媒体流服务及其播放列表为例。我们可能需要授权最终用户访问数百万到数十亿个播放列表。就像 OPA 不是特别适合服务到服务的授权一样，Istio 授权策略也不适合最终用户到资源的授权；但是，OPA 适合。&lt;/p&gt;
&lt;p&gt;OPA 也非常适合超越 NIST ZTA 策略框架的步骤：&lt;strong&gt;将特定于业务的策略应用于请求。&lt;/strong&gt; 在我们完成零信任的五项策略检查之后，我们可以委托 OPA 作为规则引擎来执行业务策略。&lt;/p&gt;
&lt;p&gt;在接下来的几个月里，我们将对此发表更多看法，尤其是在 SP 800-207A 进入起草过程时。但是，与此同时，我们在 Cloud Native Security Con 上的谈话录音对这些问题进行了更深入的讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=s2lIaFhkA8c&#34; title=&#34;ZTA 基于身份的分割 ——Zack Butcher、Tetrate 和 Ramaswamy Chandramouli，NIST&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZTA 基于身份的分割 ——Zack Butcher、Tetrate 和 Ramaswamy Chandramouli，NIST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=YdcVALVwwY4&#34; title=&#34;赞助主题演讲：从 Google 到 NIST — 云原生安全的未来 — Zack Butcher，Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;赞助主题演讲：从 Google 到 NIST — 云原生安全的未来 — Zack Butcher，Tetrate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tetrate 开源项目 Wazero 简介</title>
      <link>https://jimmysong.io/trans/introducing-wazero-from-tetrate/</link>
      <pubDate>Mon, 20 Mar 2023 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/introducing-wazero-from-tetrate/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;译者注：本文译自 &lt;a href=&#34;https://tetrate.io/blog/introducing-wazero-from-tetrate/&#34; title=&#34;Tetrate 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 博客&lt;/a&gt;。这篇文章介绍了 wazero，一个由 Tetrate 开发的用 Go 语言编写的 WebAssembly 运行时。wazero 可以让开发者用不同的编程语言编写代码，并在安全的沙箱环境中运行。wazero 有以下几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯 Go，无依赖，支持跨平台和跨架构&lt;/li&gt;
&lt;li&gt;遵循 WebAssembly 核心规范 1.0 和 2.0&lt;/li&gt;
&lt;li&gt;支持 Go 的特性，如并发安全和上下文传递&lt;/li&gt;
&lt;li&gt;提供了丰富的编程接口和命令行工具&lt;/li&gt;
&lt;li&gt;性能优异，超过了其他同类运行时&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;WebAssembly，也称为 Wasm，是一种编译用一种编程语言（例如 C 或 Rust）编写的代码并在不同的运行时（例如 Web 浏览器或微服务）上运行它的方法。这使得它成为编写插件、扩展以及在安全沙箱环境中运行任意用户定义代码的绝佳选择。&lt;/p&gt;
&lt;p&gt;WebAssembly 经常被误认为是一种仅限浏览器的技术，而实际上 Wasm 是一种跨平台的二进制文件，可以由任何 WebAssembly 运行时执行。从历史上看，Go 程序员没有太多好的选择，但这种情况已经改变。&lt;/p&gt;
&lt;p&gt;本文介绍了 &lt;a href=&#34;https://wazero.io/&#34; title=&#34;wazero&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wazero&lt;/a&gt;，它在用 Go 编程语言编写的基础设施中很重要，并涵盖了其最引人注目的功能。&lt;/p&gt;
&lt;h2 id=&#34;在-go-中运行-webassembly-的简史&#34;&gt;在 Go 中运行 WebAssembly 的简史&lt;/h2&gt;
&lt;p&gt;最初，大多数 WebAssembly 运行时是用 C/C++ 和 Rust 编程语言编写的。许多云原生项目，包括 Docker、Istio 和 Kubernetes 都是用 Go 编写的。不是用 Go 编写的运行时可通过称为 CGO 的机制获得。然而，CGO 不是 Go，通过选择 CGO，您就放弃了 Go 运行时的许多杀手级功能，例如对广泛平台交叉编译的一流支持。围绕 CGO 的复杂性，尤其是隐含的本机库，是将 wasm 扩展到 Kubernetes 调度程序的请求被拒绝的原因。总之，Go 缺乏原生运行时延迟或限制了将 WebAssembly 引入核心基础设施。&lt;/p&gt;
&lt;h2 id=&#34;wazero-是为-go-开发人员编写的&#34;&gt;wazero 是为 Go 开发人员编写的&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://wazero.io/&#34; title=&#34;wazero&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wazero&lt;/a&gt; 是唯一用 Go 编写的&lt;strong&gt;零依赖 WebAssembly 运行时&lt;/strong&gt;。这个开源项目最初是由 &lt;strong&gt;Takeshi Yoneda&lt;/strong&gt; 作为爱好开始的。2021 年底，Tetrate 认识到其战略价值并投入了几名全职员工，以期有朝一日发布 1.0 版。&lt;/p&gt;
&lt;p&gt;在过去的几个月里，该团队孜孜不倦地工作以支持多种平台、架构和编程接口。我们很高兴地宣布 wazero 1.0 发布！&lt;/p&gt;
&lt;p&gt;Wazero 是一个功能齐全、符合标准、丰富且经过实战检验的 WebAssembly 运行时，它与 Go 运行时的最佳特性无缝集成，例如安全并发和上下文传播。它包括一个面向 Go 开发人员的编程接口和一个面向那些只想运行 Wasm 的人的 CLI。&lt;/p&gt;
&lt;h2 id=&#34;wazero-有什么不同之处&#34;&gt;Wazero 有什么不同之处？&lt;/h2&gt;
&lt;p&gt;你可能想知道 wazero 的优势在哪里，考虑到 Go 与其他语言具有良好的互操作性。这允许您通过 CGO 选择多个不是用 Go 编写的运行时。以下是考虑 Wazero 的五个理由：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;最佳 Go 支持&lt;/strong&gt;。Wazero 是纯 Go 语言，不引入任何依赖，但支持更进一步。Wazero 包括惯用的 Go 函数，例如上下文集成。这允许您重用传入的截止日期，例如来自 gRPC 请求以限制在 wasm 函数中花费的时间。运行时是专门为 Go 设计的，因此在 Go 开发人员关注的问题（例如 goroutine security /wazero）方面&lt;a href=&#34;https://pkg.go.dev/github.com/tetratelabs&#34; title=&#34;记录很好&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;记录很好&lt;/a&gt;。比如很多库可以同时使用 wazero 而不互相冲突，这些都是在 Go 中测试过的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 兼容性&lt;/strong&gt;。WebAssembly 运行时嵌入在项目的底层位置，因此兼容性的变化可能会导致版本锁定，尤其是在中间件中。Wazero 是唯一已知的提供语义版本控制的运行时。函数可以制作成 1.1 版本，它们不会破坏 1.0 用户。Wazero 承诺保持零依赖并与 Go 的前两个版本一起工作。总之，wazero 的兼容性方法是模仿 Go 本身，为其用户引入最少的维护问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;平台兼容性&lt;/strong&gt;。wazero 完全支持 amd64、arm64、FreeBSD、Linux、macOS 和 Windows 在最新三个版本的 Go 上的任意组合。它还通过其“解释器运行时”将对 Go 的支持扩展到其他平台，它的执行速度比本机“编译器运行时”慢。wazero 在 Windows 上非常棒，因为它不仅是一流的平台，而且我们还在发布时生成签名的 MSI 安装程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;坚如磐石的测试方法&lt;/strong&gt;。Wazero 通过多项规范测试来测试平台支持，包括 WebAssembly 核心规范的 1.0 和 2.0 草案版本以及用于测试 I/O 功能的 WASI 测试套件。我们还运行由 Zig 和 TinyGo 编写的标准库测试。最后，我们运行基准测试并对每个更改进行“模糊测试”。所有这些都使得 wazero 的错误易于识别和修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;活跃的终端用户社区。&lt;/strong&gt; wazero 的社区包括许多公司的极强的开发人员。我们涉及一些与 Go 支持 WebAssembly 有关的方面，并为 Go 和 TinyGo 编译器做出贡献。请查看我们的&lt;a href=&#34;https://wazero.io/community/&#34; title=&#34;社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;社区&lt;/a&gt;和&lt;a href=&#34;https://wazero.io/community/users/&#34; title=&#34;用户&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;用户&lt;/a&gt;页面，了解更多关于我们以及您如何融入其中的信息！&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;将-wazero-嵌入您的项目中&#34;&gt;将 wazero 嵌入您的项目中&lt;/h2&gt;
&lt;p&gt;Wazero 显然也是一个 Go 库，其主要目标是让您与运行时环境无缝集成，并使用 WebAssembly 扩展您的 Go 应用程序。例如，假设您想运行&lt;a href=&#34;https://en.wikipedia.org/wiki/Cowsay&#34; title=&#34;经典的 Unix 程序 cowsay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;经典的 Unix 程序 cowsay&lt;/a&gt;（最初是用 Perl 编写的）。那么您可以输入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Download the executable from:
// https://github.com/evacchi/cowsay/releases/download/0.1.0/cowsay.wasm
//go:embed &amp;#34;cowsay.wasm&amp;#34;
var cowsay []byte

func main() {
	ctx := context.Background()
	r := wazero.NewRuntime(ctx)
	wasi_snapshot_preview1.MustInstantiate(ctx, r)
	r.InstantiateWithConfig(ctx, cowsay,
		wazero.NewModuleConfig().
			WithArgs(&amp;#34;cowsay&amp;#34;, // first arg is usually the executable name
				&amp;#34;wazero is awesome!&amp;#34;).
			WithStdout(os.Stdout))
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行它会显示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; ____________________
&amp;lt; wazero is awesome! &amp;gt;
 --------------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
               ||----w |
                ||     ||
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用-wazero-cli-入门&#34;&gt;使用 wazero CLI 入门&lt;/h2&gt;
&lt;p&gt;该项目现在包括一个 CLI，用于运行 WebAssembly 二进制文件。我们发现许多用户无论使用哪种编程语言都选择它，因此我们决定使用这个例子。&lt;/p&gt;
&lt;p&gt;现在，您可以使用一个简单的命令下载和安装 wazero CLI：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl https://wazero.io/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者在 Windows 上，您可以&lt;a href=&#34;https://github.com/tetratelabs/wazero/releases/download/v1.0.0-rc.2/wazero_1.0.0-rc.2_windows_amd64.msi&#34; title=&#34;下载有 MSI 签名的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载有 MSI 签名的&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然后您可以使用以下命令运行您的 WebAssembly 二进制文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./bin/wazero run someApp.wasm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如，假设您想在 CLI 上运行 cowsay，那么只需键入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -LO https://github.com/evacchi/cowsay/releases/download/0.1.0/cowsay.wasm
$ wazero run cowsay.wasm wazero is awesome!
 ____________________
&amp;lt; wazero is awesome! &amp;gt;
 --------------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
               ||----w |
                ||     ||
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，也许你更想玩 1977 年的 Infocom 文本冒险游戏 Zork。&lt;/p&gt;
&lt;p&gt;你可以从 &lt;a href=&#34;https://github.com/evacchi/zork-1/releases/tag/v0.0.1&#34; title=&#34;https://github.com/evacchi/zork-1/releases/tag/v0.0.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/evacchi/zork-1/releases/tag/v0.0.1&lt;/a&gt; 获取一个 Wasm 二进制文件，然后使用以下命令调用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -L https://github.com/evacchi/zork-1/releases/download/v0.0.1/zork-wasm-wasi.tgz | tar xzf -
$ wazero run -mount=.:/ zork.wasm
Welcome to Dungeon.			This version created 11-MAR-91.
You are in an open field west of a big white house with a boarded
front door.
There is a small mailbox here.
&amp;gt;open mailbox
Opening the mailbox reveals:
  A leaflet.
&amp;gt;read leaflet
Taken.
		    Welcome to Dungeon!

   Dungeon is a game of adventure, danger, and low cunning.  In it
you will explore some of the most amazing territory ever seen by mortal
man.  Hardened adventurers have run screaming from the terrors contained
within.

   In Dungeon, the intrepid explorer delves into the forgotten secrets
of a lost labyrinth deep in the bowels of the earth, searching for
vast treasures long hidden from prying eyes, treasures guarded by
fearsome monsters and diabolical traps!

   No DECsystem should be without one!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尽情玩吧！&lt;/p&gt;
&lt;h2 id=&#34;最后的话&#34;&gt;最后的话&lt;/h2&gt;
&lt;p&gt;这是我们的第一个重大发布，但我们才刚刚开始！&lt;strong&gt;有许多值得期待的事情&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;WebAssembly 规范正在不断更新，我们将密切关注它：例如，&lt;a href=&#34;https://github.com/WebAssembly/tail-call/blob/main/README.md&#34; title=&#34;tail call proposal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tail call proposal&lt;/a&gt; 刚刚进入第 4 阶段，&lt;a href=&#34;https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md&#34; title=&#34;GC proposal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GC proposal&lt;/a&gt; 则是许多编程语言（如 Java）的支持者，最近进入了第 3 阶段。Wazero 将继续通过所有测试，随着 WebAssembly 的发展而发展。&lt;/p&gt;
&lt;p&gt;我们还希望作为您 WebAssembly 运行时的战略性选择。您可以期待持续致力于性能，可观测性和可扩展性。一个例子是我们即将推出的低级文件系统插件。它支持比 Go 的 fs.FS 更多的功能，现在就可以使用，例如创建目录和文件。该设计支持自定义审计和访问控制，并可用于第三方主机函数。&lt;/p&gt;
&lt;p&gt;最后，如果您在 3 月 23 日和 24 日参加巴塞罗那的 Wasm I/O 活动，就有机会认识我们团队的一部分！&lt;/p&gt;
&lt;p&gt;如果您在会议结束后留在那里，或者您只是在那个晚上在城市里，&lt;strong&gt;在 3 月 24 日星期五&lt;/strong&gt;，我们也很高兴&lt;a href=&#34;https://www.eventbrite.com/e/wazero-10-launch-party-tickets-585204150367&#34; title=&#34;邀请您参加 wazero 1.0 自己的官方发布派对&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;邀请您参加 wazero 1.0 自己的官方发布派对&lt;/a&gt;。我们将提供小吃，饮料和许多社区贡献者，他们将展示他们如何使用我们所钟爱的 WebAssembly 运行时！一位幸运的参会者将有机会按下 1.0 的发布按钮！&lt;/p&gt;
&lt;p&gt;我们很兴奋地看到您将如何使用 Wazero 构建项目。&lt;a href=&#34;https://wazero.io/community/users/&#34; title=&#34;加入我们不断增长的社区用户列表&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;加入我们不断增长的社区用户列表&lt;/a&gt;，并让我们知道您正在创造什么！&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

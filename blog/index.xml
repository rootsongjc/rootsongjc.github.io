<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - 云原生|开源|社区 – 博客</title>
    <link>https://jimmysong.io/blog/</link>
    <description>Recent content in 博客 on Jimmy Song - 云原生|开源|社区</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright &amp;copy; 2017-2022 Jimmy Song 保留所有权利</copyright>
    <lastBuildDate>Sat, 12 Feb 2022 00:19:04 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Envoy 基础教程</title>
      <link>https://jimmysong.io/blog/envoy/</link>
      <pubDate>Sat, 12 Feb 2022 00:19:04 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/envoy/</guid>
      <description>
        
        
        &lt;h1 id=&#34;10-envoy-简介&#34;&gt;1.0 Envoy 简介&lt;/h1&gt;
&lt;p&gt;在 Envoy 介绍模块中，你将了解 Envoy 的概况，并通过一个例子了解 Envoy 的构建模块。在本模块结束时，你将通过运行 Envoy 的示例配置来了解 Envoy。&lt;/p&gt;
&lt;h1 id=&#34;11-什么是-envoy&#34;&gt;1.1 什么是 Envoy？&lt;/h1&gt;
&lt;p&gt;行业正在向微服务架构和云原生解决方案发展。由于使用不同的技术开发了成百上千的微服务，这些系统可能变得复杂，难以调试。&lt;/p&gt;
&lt;p&gt;作为一个应用开发者，你考虑的是业务逻辑 - 购买产品或生成发票。然而，任何像这样的业务逻辑都会导致不同服务之间的多个服务调用。每个服务可能都有它的超时、重试逻辑和其他可能需要调整或微调的网络特定代码。&lt;/p&gt;
&lt;p&gt;如果在任何时候最初的请求失败了，就很难通过多个服务来追踪它，准确地指出失败发生的地方，并了解它为什么失败。是网络不可靠吗？我们是否需要调整重试或超时？或者是业务逻辑问题或错误？&lt;/p&gt;
&lt;p&gt;使这种调试的复杂性增加的是，服务可能使用不一致的跟踪和记录机制。这些问题使你很难确定问题发生在哪里，以及如何解决。如果你是一个应用程序开发人员，而调试网络问题不属于你的核心技能，那就更是如此。&lt;/p&gt;
&lt;p&gt;让调试这些网络问题变得更容易的是，将网络问题从应用程序堆栈中抽离出来，由另一个组件来处理网络部分。这就是 Envoy 所能做的。&lt;/p&gt;
&lt;p&gt;在它的一种部署模式中，我们在每个服务实例旁边都有一个 Envoy 实例在运行。这种类型的部署也被称为 &lt;strong&gt;Sidecar 部署&lt;/strong&gt;。Envoy 的另一种模式是&lt;strong&gt;边缘代理&lt;/strong&gt;，用于构建 API 网关。&lt;/p&gt;
&lt;p&gt;Envoy 和应用程序形成一个原子实体，但仍然是独立的进程。应用程序处理业务逻辑，而 Envoy 则处理网络问题。&lt;/p&gt;
&lt;p&gt;在发生故障的情况下，分离关注点可以更容易确定故障是来自应用程序还是网络。&lt;/p&gt;
&lt;p&gt;为了帮助网络调试，Envoy 提供了以下高级功能。&lt;/p&gt;
&lt;h2 id=&#34;进程外架构&#34;&gt;进程外架构&lt;/h2&gt;
&lt;p&gt;Envoy 是一个独立的进程，旨在与每个应用程序一起运行 —— 也就是我们前面提到的 Sidecar 部署模式。集中配置的 Envoy 的集合形成了一个透明的服务网格。&lt;/p&gt;
&lt;p&gt;路由和其他网络功能的责任被推给了 Envoy。应用程序向一个虚拟地址（localhost）而不是真实地址（如公共 IP 地址或主机名）发送请求，不知道网络拓扑结构。应用程序不再承担路由的责任，因为该任务被委托给一个外部进程。&lt;/p&gt;
&lt;p&gt;与其让应用程序管理其网络配置，不如在 Envoy 层面上独立于应用程序管理网络配置。在一个组织中，这可以使应用程序开发人员解放出来，专注于应用程序的业务逻辑。&lt;/p&gt;
&lt;p&gt;Envoy 适用于任何编程语言。你可以用 Go、Java、C++ 或其他任何语言编写你的应用程序，而 Envoy 可以在它们之间架起桥梁。它的行为是相同的，无论应用程序的编程语言或它们运行的操作系统是什么。&lt;/p&gt;
&lt;p&gt;Envoy 还可以在整个基础设施中透明地进行部署和升级。这与为每个单独的应用程序部署库升级相比，后者可能是非常痛苦和耗时的。&lt;/p&gt;
&lt;p&gt;进程外架构是有益的，因为它使我们在不同的编程语言 / 应用堆栈中保持一致，我们可以免费获得独立的生命周期和所有的 Envoy 网络功能，而不必在每个应用中单独解决这些问题。&lt;/p&gt;
&lt;h2 id=&#34;l3l4-过滤器结构&#34;&gt;L3/L4 过滤器结构&lt;/h2&gt;
&lt;p&gt;Envoy 是一个 L3/L4 网络代理，根据 IP 地址和 TCP 或 UDP 端口进行决策。它具有一个可插拔的过滤器链，可以编写你的过滤器来执行不同的 TCP/UDP 任务。&lt;/p&gt;
&lt;p&gt;** 过滤器链（Filter Chain）** 的想法借鉴了 Linux shell，即一个操作的输出被输送到另一个操作中。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ls -l &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;Envoy*.cc&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Envoy 可以通过堆叠所需的过滤器来构建逻辑和行为，形成一个过滤器链。许多过滤器已经存在，并支持诸如原始 TCP 代理、UDP 代理、HTTP 代理、TLS 客户端认证等任务。Envoy 也是可扩展的，我们可以编写我们的过滤器。&lt;/p&gt;
&lt;h2 id=&#34;l7-过滤器结构&#34;&gt;L7 过滤器结构&lt;/h2&gt;
&lt;p&gt;Envoy 支持一个额外的 HTTP L7 过滤器层。我们可以在 HTTP 连接管理子系统中插入 HTTP 过滤器，执行不同的任务，如缓冲、速率限制、路由 / 转发等。&lt;/p&gt;
&lt;h2 id=&#34;一流的-http2-支持&#34;&gt;一流的 HTTP/2 支持&lt;/h2&gt;
&lt;p&gt;Envoy 同时支持 HTTP/1.1 和 HTTP/2，并且可以作为一个透明的 HTTP/1.1 到 HTTP/2 的双向代理进行操作。这意味着任何 HTTP/1.1 和 HTTP/2 客户端和目标服务器的组合都可以被桥接起来。即使你的传统应用没有通过 HTTP/2 进行通信，如果你把它们部署在 Envoy 代理旁边，它们最终也会通过 HTTP/2 进行通信。&lt;/p&gt;
&lt;p&gt;推荐在所有的服务间配置的 Envoy 使用 HTTP/2，以创建一个持久连接的网格，请求和响应可以在上面复用。&lt;/p&gt;
&lt;h2 id=&#34;http-路由&#34;&gt;HTTP 路由&lt;/h2&gt;
&lt;p&gt;当以 HTTP 模式操作并使用 REST 时，Envoy 支持路由子系统，能够根据路径、权限、内容类型和运行时间值来路由和重定向请求。在将 Envoy 作为构建 API 网关的前台 / 边缘代理时，这一功能非常有用，在构建服务网格（sidecar 部署模式）时，也可以利用这一功能。&lt;/p&gt;
&lt;h2 id=&#34;grpc-准备就绪&#34;&gt;gRPC 准备就绪&lt;/h2&gt;
&lt;p&gt;Envoy 支持作为 gRPC 请求和响应的路由和负载均衡底层所需的所有 HTTP/2 功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gRPC 是一个开源的远程过程调用（RPC）系统，它使用 HTTP/2 进行传输，并将协议缓冲区作为接口描述语言（IDL），它提供的功能包括认证、双向流和流量控制、阻塞 / 非阻塞绑定，以及取消和超时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;服务发现和动态配置&#34;&gt;服务发现和动态配置&lt;/h2&gt;
&lt;p&gt;我们可以使用静态配置文件来配置 Envoy，这些文件描述了服务和服务通信方式。&lt;/p&gt;
&lt;p&gt;对于静态配置 Envoy 不现实的高级场景，Envoy 支持动态配置，在运行时自动重新加载配置。一组名为 xDS 的发现服务可以用来通过网络动态配置 Envoy，并为 Envoy 提供关于主机、集群 HTTP 路由、监听套接字和加密信息。&lt;/p&gt;
&lt;h2 id=&#34;健康检查&#34;&gt;健康检查&lt;/h2&gt;
&lt;p&gt;负载均衡器有一个特点，那就是只将流量路由到健康和可用的上游服务。Envoy 支持健康检查子系统，对上游服务集群进行主动健康检查。然后，Envoy 使用服务发现和健康检查信息的组合来确定健康的负载均衡目标。Envoy 还可以通过离群检测子系统支持被动健康检查。&lt;/p&gt;
&lt;h2 id=&#34;高级负载均衡&#34;&gt;高级负载均衡&lt;/h2&gt;
&lt;p&gt;Envoy 支持自动重试、断路、全局速率限制（使用外部速率限制服务）、请求影子（或流量镜像）、离群检测和请求对冲。&lt;/p&gt;
&lt;h2 id=&#34;前端--边缘代理支持&#34;&gt;前端 / 边缘代理支持&lt;/h2&gt;
&lt;p&gt;Envoy 的特点使其非常适合作为边缘代理运行。这些功能包括 TLS 终端、HTTP/1.1、HTTP/2 和 HTTP/3 支持，以及 HTTP L7 路由。&lt;/p&gt;
&lt;h2 id=&#34;tls-终止&#34;&gt;TLS 终止&lt;/h2&gt;
&lt;p&gt;应用程序和代理的解耦使网格部署模型中所有服务之间的 TLS 终止（双向 TLS）成为可能。&lt;/p&gt;
&lt;h2 id=&#34;一流的可观察性&#34;&gt;一流的可观察性&lt;/h2&gt;
&lt;p&gt;为了便于观察，Envoy 会生成日志、指标和跟踪。Envoy 目前支持 statsd（和兼容的提供者）作为所有子系统的统计。得益于可扩展性，我们也可以在需要时插入不同的统计提供者。&lt;/p&gt;
&lt;h2 id=&#34;http3-alpha&#34;&gt;HTTP/3 (Alpha)&lt;/h2&gt;
&lt;p&gt;Envoy 1.19.0 支持 HTTP/3 的上行和下行，并在 HTTP/1.1、HTTP/2 和 HTTP/3 之间进行双向转义。&lt;/p&gt;
&lt;h1 id=&#34;12-envoy-的构建模块&#34;&gt;1.2 Envoy 的构建模块&lt;/h1&gt;
&lt;p&gt;在这一课中，我们将解释 Envoy 的基本构建模块。&lt;/p&gt;
&lt;p&gt;Envoy 配置的根被称为引导配置。它包含了一些字段，我们可以在这里提供静态或动态的资源和高级别的 Envoy 配置（例如，Envoy 实例名称、运行时配置、启用管理界面等等）。&lt;/p&gt;
&lt;p&gt;为了开始学习，我们将主要关注静态资源，在课程的后面，我们将介绍如何配置动态资源。&lt;/p&gt;
&lt;p&gt;Envoy 输出许多统计数据，这取决于启用的组件和它们的配置。我们会在整个课程中提到不同的统计信息，在课程后面的专门模块中，我们会更多地讨论统计信息。&lt;/p&gt;
&lt;p&gt;下图显示了通过这些概念的请求流。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9kd0lwv0j31hc0u0my9.jpg&#34; alt=&#34;Envoy 构建块&#34;&gt;&lt;/p&gt;
&lt;p&gt;这一切都从&lt;strong&gt;监听器&lt;/strong&gt;开始。Envoy 暴露的监听器是命名的网络位置，可以是一个 IP 地址和一个端口，也可以是一个 Unix 域套接字路径。Envoy 通过监听器接收连接和请求。考虑一下下面的 Envoy 配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;static_resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;listeners&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;listener_0&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;filter_chains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;{}&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过上面的 Envoy 配置，我们在地址和 &lt;code&gt;0.0.0.0&lt;/code&gt; 端口 &lt;code&gt;10000&lt;/code&gt; 上声明了一个名为 &lt;code&gt;listener_0的监听器&lt;/code&gt;。这意味着 Envoy 正在监听 &lt;code&gt;0.0.0.0:10000&lt;/code&gt; 的传入请求。&lt;/p&gt;
&lt;p&gt;每个监听器都有不同的部分需要配置。然而，唯一需要的设置是地址。上述配置是有效的，你可以用它来运行 Envoy—— 尽管它没有用，因为所有的连接都会被关闭。&lt;/p&gt;
&lt;p&gt;我们让 &lt;code&gt;filter_chains&lt;/code&gt; 字段为空，因为在接收数据包后不需要额外的操作。&lt;/p&gt;
&lt;p&gt;为了进入下一个构件（路由），我们需要创建一个或多个网络过滤器链（&lt;code&gt;filter_chains&lt;/code&gt;），至少要有一个过滤器。&lt;/p&gt;
&lt;p&gt;网络过滤器通常对数据包的有效载荷进行操作，查看有效载荷并对其进行解析。例如，Postgres 网络过滤器解析数据包的主体，检查数据库操作的种类或其携带的结果。&lt;/p&gt;
&lt;p&gt;Envoy 定义了三类过滤器：监听器过滤器、网络过滤器和 HTTP 过滤器。监听器过滤器在收到数据包后立即启动，通常对数据包的头信息进行操作。监听器过滤器包括代理监听器过滤器（提取 PROXY 协议头），或 TLS 检查器监听器过滤器（检查流量是否为 TLS，如果是，则从 TLS 握手中提取数据）。&lt;/p&gt;
&lt;p&gt;每个通过监听器进来的请求可以流经多个过滤器。我们还可以写一个配置，根据传入的请求或连接属性选择不同的过滤器链。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9kd15t7tj318r0u0go4.jpg&#34; alt=&#34;过滤器链&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个特殊的、内置的网络过滤器被称为 &lt;strong&gt;HTTP 连接管理器&lt;/strong&gt;过滤器（HTTP Connection Manager Filter）或 &lt;strong&gt;HCM&lt;/strong&gt;。HCM 过滤器能够将原始字节转换为 HTTP 级别的消息。它可以处理访问日志，生成请求 ID，操作头信息，管理路由表，并收集统计数据。我们将在以后的课程中对 HCM 进行更详细的介绍。&lt;/p&gt;
&lt;p&gt;就像我们可以为每个监听器定义多个网络过滤器（其中一个是 HCM）一样，Envoy 也支持在 HCM 过滤器中定义多个 HTTP 级过滤器。我们可以在名为 &lt;code&gt;http_filters的&lt;/code&gt;字段下定义这些 HTTP 过滤器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9kd0buajj31hc0u0mza.jpg&#34; alt=&#34;HCM 过滤器&#34;&gt;&lt;/p&gt;
&lt;p&gt;HTTP 过滤器链中的最后一个过滤器必须是路由器过滤器（&lt;code&gt;envoy.filters.HTTP.router&lt;/code&gt;）。路由器过滤器负责执行路由任务。这最终把我们带到了第二个构件 —— &lt;strong&gt;路由&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们在 HCM 过滤器的 &lt;code&gt;route_config&lt;/code&gt; 字段下定义路由配置。在路由配置中，我们可以通过查看元数据（URI、Header 等）来匹配传入的请求，并在此基础上，定义流量的发送位置。&lt;/p&gt;
&lt;p&gt;路由配置中的顶级元素是虚拟主机。每个虚拟主机都有一个名字，在发布统计数据时使用（不用于路由），还有一组被路由到它的域。&lt;/p&gt;
&lt;p&gt;让我们考虑下面的路由配置和域的集合。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my_route_config&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tetrate_host&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;test_hosts&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test.tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;qa.tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果传入请求的目的地是 &lt;code&gt;tetrate.io&lt;/code&gt;（即 &lt;code&gt;Host/Authority&lt;/code&gt; 标头被设置为其中一个值），则 &lt;code&gt;tetrate_hosts &lt;/code&gt;虚拟主机中定义的路由将得到处理。&lt;/p&gt;
&lt;p&gt;同样，如果 &lt;code&gt;Host/Authority&lt;/code&gt; 标头包含 &lt;code&gt;test.tetrate.io&lt;/code&gt; 或 &lt;code&gt;qa.tetrate.io&lt;/code&gt;，&lt;code&gt;test_hosts&lt;/code&gt; 虚拟主机下的路由将被处理。使用这种设计，我们可以用一个监听器（&lt;code&gt;0.0.0.0:10000&lt;/code&gt;）来处理多个顶级域。&lt;/p&gt;
&lt;p&gt;如果你在数组中指定多个域，搜索顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;精确的域名（例如：&lt;code&gt;tetrate.io&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;后缀域名通配符（如 &lt;code&gt;*.tetrate.io）&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;前缀域名通配符（例如：&lt;code&gt;tetrate.*&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;匹配任何域的特殊通配符（&lt;code&gt;*&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Envoy 匹配域名后，是时候处理所选虚拟主机中的 &lt;code&gt;routes&lt;/code&gt; 字段了。这是我们指定如何匹配一个请求，以及接下来如何处理该请求（例如，重定向、转发、重写、发送直接响应等）的地方。&lt;/p&gt;
&lt;p&gt;我们来看看一个例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;static_resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;listeners&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;listener_0&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;filter_chains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.network.http_connection_manager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;typed_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;stat_prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_world_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;http_filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.http.router&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my_first_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;direct_response_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;direct_response&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;body&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;inline_string&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yay&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置的顶部部分与我们之前看到的一样。我们已经添加了 HCM 过滤器、统计前缀（&lt;code&gt;hello_world_service&lt;/code&gt;）、单个 HTTP 过滤器（路由器）和路由配置。&lt;/p&gt;
&lt;p&gt;在虚拟主机内，我们要匹配任何域名。在 &lt;code&gt;routes&lt;/code&gt; 下，我们匹配前缀（&lt;code&gt;/&lt;/code&gt;），然后我们可以发送一个响应。&lt;/p&gt;
&lt;p&gt;当涉及到匹配请求时，我们有多种选择。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;路由匹配&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前缀必须与&lt;code&gt;:path&lt;/code&gt; 头的开头相符。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/hello&lt;/code&gt; 与 &lt;code&gt;hello.com/hello&lt;/code&gt;、&lt;code&gt;hello.com/helloworld&lt;/code&gt; 和 &lt;code&gt;hello.com/hello/v1&lt;/code&gt; 匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;路径必须与&lt;code&gt;:path&lt;/code&gt; 头完全匹配。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/hello &lt;/code&gt;匹配 &lt;code&gt;hello.com/hello&lt;/code&gt;，但不匹配 &lt;code&gt;hello.com/helloworld &lt;/code&gt;或 &lt;code&gt;hello.com/hello/v1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;safe_regex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所提供的正则表达式必须与&lt;code&gt;:path&lt;/code&gt; 头匹配。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/\{3}&lt;/code&gt; 匹配任何以 &lt;code&gt;/&lt;/code&gt; 开头的三位数。例如，与 &lt;code&gt;hello.com/123&lt;/code&gt; 匹配，但不能匹配 &lt;code&gt;hello.com/hello&lt;/code&gt; 或 &lt;code&gt;hello.com/54321。&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;connect_matcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配器只匹配 CONNECT 请求&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一旦 Envoy 将请求与路由相匹配，我们就可以对其进行路由、重定向或返回一个直接响应。在这个例子中，我们通过 &lt;code&gt;direct_response&lt;/code&gt; 配置字段使用&lt;strong&gt;直接响应&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以把上述配置保存到 &lt;code&gt;envoy-direct-response.yaml中&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们将使用一个名为 &lt;a href=&#34;https://func-e.io/&#34;&gt;func-e&lt;/a&gt; 的命令行工具。func-e 允许我们选择和使用不同的 Envoy 版本。&lt;/p&gt;
&lt;p&gt;我们可以通过运行以下命令下载 func-e CLI。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl https://func-e.io/install.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo bash -s -- -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们用我们创建的配置运行 Envoy。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;func-e run -c envoy-direct-response.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦 Envoy 启动，我们就可以向 &lt;code&gt;localhost:10000&lt;/code&gt; 发送一个请求，以获得我们配置的直接响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ curl localhost:10000
yay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，如果我们添加一个不同的主机头（例如 &lt;code&gt;-H &amp;quot;Host: hello.com&amp;quot;&lt;/code&gt;）将得到相同的响应，因为 &lt;code&gt;hello.com&lt;/code&gt; 主机与虚拟主机中定义的域相匹配。&lt;/p&gt;
&lt;p&gt;在大多数情况下，从配置中直接发送响应是一个很好的功能，但我们会有一组端点或主机，我们将流量路由到这些端点或主机。在 Envoy 中做到这一点的方法是通过定义&lt;strong&gt;集群&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;集群（Cluster）是一组接受流量的上游类似主机。这可以是你的服务所监听的主机或 IP 地址的列表。&lt;/p&gt;
&lt;p&gt;例如，假设我们的 hello world 服务是在 &lt;code&gt;127.0.0.0:8000&lt;/code&gt; 上监听。然后，我们可以用一个单一的端点创建一个集群，像这样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_world_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;load_assignment&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;cluster_name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_world_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;endpoints&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lb_endpoints&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;endpoint&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;集群的定义与监听器的定义在同一级别，使用 &lt;code&gt;clusters&lt;/code&gt; 字段。我们在路由配置中引用集群时，以及在导出统计数据时，都会使用集群。该名称在所有集群中必须是唯一的。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;load_assignment&lt;/code&gt; 字段下，我们可以定义要进行负载均衡的端点列表，以及负载均衡策略设置。&lt;/p&gt;
&lt;p&gt;Envoy 支持多种负载均衡算法（round-robin、Maglev、least-request、random），这些算法是由静态引导配置、DNS、动态 xDS（CDS 和 EDS 服务）以及主动 / 被动健康检查共同配置的。如果我们没有通过 &lt;code&gt;lb_policy&lt;/code&gt; 字段明确地设置负载均衡算法，它默认为 round-robin。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;endpoints&lt;/code&gt; 字段定义了一组属于特定地域的端点。使用可选的 &lt;code&gt;locality&lt;/code&gt; 字段，我们可以指定上游主机的运行位置，然后在负载均衡过程中使用（即，将请求代理到离调用者更近的端点）。&lt;/p&gt;
&lt;p&gt;添加新的端点指示负载均衡器在一个以上的接收者之间分配流量。通常情况下，负载均衡器对所有端点一视同仁，但集群定义允许在端点内建立一个层次结构。&lt;/p&gt;
&lt;p&gt;例如，端点可以有一个 &lt;strong&gt;权重（weight）&lt;/strong&gt; 属性，这将指示负载均衡器与其他端点相比，向这些端点发送更多 / 更少的流量。&lt;/p&gt;
&lt;p&gt;另一种层次结构类型是基于&lt;strong&gt;地域性的（locality）&lt;/strong&gt;，通常用于定义故障转移架构。这种层次结构允许我们定义地理上比较接近的 &amp;ldquo;首选&amp;rdquo; 端点，以及在 &amp;ldquo;首选&amp;rdquo; 端点变得不健康的情况下应该使用的 &amp;ldquo;备份&amp;rdquo; 端点。&lt;/p&gt;
&lt;p&gt;由于我们只有一个端点，所以我们还没有设置 locality。在 &lt;code&gt;lb_endpoints&lt;/code&gt; 字段下，可以定义 Envoy 可以路由流量的实际端点。&lt;/p&gt;
&lt;p&gt;我们可以在 Cluster 中配置以下可选功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动健康检查（&lt;code&gt;health_checks&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;断路器 (&lt;code&gt;circuit_breakers&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;异常值检测（&lt;code&gt;outlier_detection&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;在处理上游的 HTTP 请求时有额外的协议选项。&lt;/li&gt;
&lt;li&gt;一组可选的网络过滤器，应用于所有出站连接等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和监听器的地址一样，端点地址可以是一个套接字地址，也可以是一个 Unix 域套接字。在我们的例子中，我们使用一个套接字地址，并在 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 为我们的服务定义端点。一旦选择了端点，请求就会被代理到该端点的上游。&lt;/p&gt;
&lt;p&gt;让我们看看我们定义的集群是如何与其他配置结合起来的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;static_resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;listeners&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;listener_0&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;filter_chains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.network.http_connection_manager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;typed_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;stat_prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_world_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;http_filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.http.router&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my_first_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;direct_response_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_world_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_world_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;connect_timeout&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;5s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;load_assignment&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;cluster_name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_world_service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;endpoints&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lb_endpoints&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;endpoint&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们已经添加了集群配置，我们没有使用 &lt;code&gt;direct_response&lt;/code&gt;，而是使用 &lt;code&gt;routes&lt;/code&gt; 字段并指定集群名称。&lt;/p&gt;
&lt;p&gt;为了尝试这种配置，让我们在 &lt;code&gt;8000&lt;/code&gt; 端口启动一个 hello-world Docker 镜像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -dit -p 8000:3000 gcr.io/tetratelabs/hello-world:1.0.0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以向 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 发送一个请求，以检查我们是否得到 &amp;ldquo;Hello World&amp;rdquo; 的响应。&lt;/p&gt;
&lt;p&gt;接下来，让我们把上述 Envoy 配置保存到 &lt;code&gt;envoy-clusters.yaml中&lt;/code&gt;，并启动 Envoy 代理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;func-e run -c envoy-cluster.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 Envoy 代理启动时，向 &lt;code&gt;0.0.0.0:10000&lt;/code&gt; 发送一个请求，让 Envoy 代理请求到 hello world 端点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ curl -v 0.0.0.0:10000
...
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost:10000
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&amp;lt; date: Wed, &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 23:53:47 GMT
&amp;lt; content-length: &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;
&amp;lt; content-type: text/plain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
&amp;lt; x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&amp;lt; server: envoy
&amp;lt;
* Connection &lt;span class=&#34;c1&#34;&gt;#0 to host localhost left intact&lt;/span&gt;
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;13-实验室的先决条件&#34;&gt;1.3 实验室的先决条件&lt;/h1&gt;
&lt;p&gt;从冗长的输出中，我们会注意到由 Envoy 代理设置的响应头 &lt;code&gt;x-envoy-upstream-service-time&lt;/code&gt; 和 &lt;code&gt;server: envoy&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在课程中，我们将利用实际的实验室来实践我们所学的知识。&lt;/p&gt;
&lt;p&gt;所有实验室都是在 Linux Debian 10 上开发和测试的，安装了以下工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://func-e.io/&#34;&gt;func-e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;hey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;20-http-连接管理器-hcm&#34;&gt;2.0 HTTP 连接管理器 (HCM)&lt;/h1&gt;
&lt;p&gt;在 HCM 模块中，我们将对 HTTP 连接管理器过滤器进行扩展。我们将学习过滤器的排序，以及 HTTP 路由和匹配如何工作。我们将向你展示如何分割流量、操作 Header 信息、配置超时、实现重试、请求镜像和速率限制。&lt;/p&gt;
&lt;p&gt;在本模块结束时，你将对 HCM 过滤器有一个很好的理解，以及如何路由和拆分 HTTP 流量，操纵 Header 等等。&lt;/p&gt;
&lt;h1 id=&#34;21-http-连接管理器hcm介绍&#34;&gt;2.1 HTTP 连接管理器（HCM）介绍&lt;/h1&gt;
&lt;p&gt;HCM 是一个网络级的过滤器，将原始字节转译成 HTTP 级别的消息和事件（例如，收到的 Header，收到的 Body 数据等）。&lt;/p&gt;
&lt;p&gt;HCM 过滤器还处理标准的 HTTP 功能。它支持访问记录、请求 ID 生成和跟踪、Header 操作、路由表管理和统计等功能。&lt;/p&gt;
&lt;p&gt;从协议的角度来看，HCM 原生支持 HTTP/1.1、WebSockets、HTTP/2 和 HTTP/3（仍在 Alpha 阶段）。&lt;/p&gt;
&lt;p&gt;Envoy 代理被设计成一个 HTTP/2 复用代理，这体现在描述 Envoy 组件的术语中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2 术语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 HTTP/2 中，流是已建立的连接中的字节的双向流动。每个流可以携带一个或多个&lt;strong&gt;消息（message）&lt;/strong&gt;。消息是一个完整的**帧（frame）&lt;strong&gt;序列，映射到一个 HTTP 请求或响应消息。最后，帧是 HTTP/2 中最小的通信单位。每个帧都包含一个**帧头（frame header）&lt;/strong&gt;，它至少可以识别该帧所属的流。帧可以携带有关 HTTP Header、消息有效载荷等信息。&lt;/p&gt;
&lt;p&gt;无论流来自哪个连接（HTTP/1.1、HTTP/2 或 HTTP/3），Envoy 都使用一个叫做 &lt;strong&gt;编解码 API（codec PAI）&lt;/strong&gt; 的功能，将不同的线程协议翻译成流、请求、响应等协议无关模型。协议无关的模型意味着大多数 Envoy 代码不需要理解每个协议的具体内容。&lt;/p&gt;
&lt;h2 id=&#34;http-过滤器&#34;&gt;HTTP 过滤器&lt;/h2&gt;
&lt;p&gt;在 HCM 中，Envoy 支持一系列的 HTTP 过滤器。与监听器级别的过滤器不同，这些过滤器对 HTTP 级别的消息进行操作，而不知道底层协议（HTTP/1.1、HTTP/2 等）或复用能力。&lt;/p&gt;
&lt;p&gt;有三种类型的 HTTP 过滤器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解码器（Decoder）：当 HCM 对请求流的部分进行解码时调用。&lt;/li&gt;
&lt;li&gt;编码器（Encoder）：当 HCM 对响应流的部分进行编码时调用。&lt;/li&gt;
&lt;li&gt;解码器 / 编码器（Decoder/Encoder）：在两个路径上调用，解码和编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图解释了 Envoy 如何在请求和响应路径上调用不同的过滤器类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9kop73v4j31kd0u0djh.jpg&#34; alt=&#34;请求响应路径及 HTTP 过滤器&#34;&gt;&lt;/p&gt;
&lt;p&gt;像网络过滤器一样，单个的 HTTP 过滤器可以停止或继续执行后续的过滤器，并在单个请求流的范围内相互分享状态。&lt;/p&gt;
&lt;h3 id=&#34;数据共享&#34;&gt;数据共享&lt;/h3&gt;
&lt;p&gt;在高层次上，我们可以把过滤器之间的数据共享分成&lt;strong&gt;静态&lt;/strong&gt;和&lt;strong&gt;动态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;静态包含 Envoy 加载配置时的任何不可变的数据集，它被分成三个部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 元数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Envoy 的配置，如监听器、路由或集群，都包含一个&lt;code&gt;metadata&lt;/code&gt;数据字段，存储键 / 值对。元数据允许我们存储特定过滤器的配置。这些值不能改变，并在所有请求 / 连接中共享。例如，元数据值在集群中使用子集选择器时被使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 类型化的元数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类型化元数据不需要为每个流或请求将元数据转换为类型化的类对象，而是允许过滤器为特定的键注册一个一次性的转换逻辑。来自 xDS 的元数据在配置加载时被转换为类对象，过滤器可以在运行时请求类型化的版本，而不需要每次都转换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.HTTP 每路过滤器配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与适用于所有虚拟主机的全局配置相比，我们还可以指定每个虚拟主机或路由的配置。每个路由的配置被嵌入到路由表中，可以在 &lt;code&gt;typed_per_filter_config&lt;/code&gt; 字段下指定。&lt;/p&gt;
&lt;p&gt;另一种分享数据的方式是使用&lt;strong&gt;动态状态&lt;/strong&gt;。动态状态会在每个连接或 HTTP 流中产生，并且它可以被产生它的过滤器改变。名为 &lt;code&gt;StreamInfo&lt;/code&gt; 的对象提供了一种从 map 上存储和检索类型对象的方法。&lt;/p&gt;
&lt;h3 id=&#34;过滤器顺序&#34;&gt;过滤器顺序&lt;/h3&gt;
&lt;p&gt;指定 HTTP 过滤器的顺序很重要。考虑一下下面的 HTTP 过滤器链。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;http_filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filter_1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filter_2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filter_3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般来说，链中的最后一个过滤器通常是路由器过滤器。假设所有的过滤器都是解码器 / 编码器过滤器，HCM 在请求路径上调用它们的顺序是&lt;code&gt;filter_1&lt;/code&gt;、&lt;code&gt;filter_2&lt;/code&gt;、&lt;code&gt;filter_3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在响应路径上，Envoy 只调用编码器过滤器，但顺序相反。由于这三个过滤器都是解码器 / 编码器过滤器，所以在响应路径上的顺序是 &lt;code&gt;filter_3&lt;/code&gt;、&lt;code&gt;filter_2&lt;/code&gt;、&lt;code&gt;filter_1&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;内置-http-过滤器&#34;&gt;内置 HTTP 过滤器&lt;/h3&gt;
&lt;p&gt;Envoy 已经内置了几个 HTTP 过滤器，如 CORS、CSRF、健康检查、JWT 认证等。你可以&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/http_filters#config-http-filters&#34;&gt;在这里&lt;/a&gt;找到 HTTP 过滤器的完整列表。&lt;/p&gt;
&lt;h1 id=&#34;22-http-路由&#34;&gt;2.2 HTTP 路由&lt;/h1&gt;
&lt;p&gt;前面提到的路由器过滤器（&lt;code&gt;envoy.filters.http.router&lt;/code&gt;）就是实现 HTTP 转发的。路由器过滤器几乎被用于所有的 HTTP 代理方案中。路由器过滤器的主要工作是查看路由表，并对请求进行相应的路由（转发和重定向）。&lt;/p&gt;
&lt;p&gt;路由器使用传入请求的信息（例如，&lt;code&gt;host &lt;/code&gt; 或 &lt;code&gt;authority&lt;/code&gt; 头），并通过虚拟主机和路由规则将其与上游集群相匹配。&lt;/p&gt;
&lt;p&gt;所有配置的 HTTP 过滤器都使用包含路由表的路由配置（&lt;code&gt;route_config&lt;/code&gt;）。尽管路由表的主要消费者将是路由器过滤器，但其他过滤器如果想根据请求的目的地做出任何决定，也可以访问它。&lt;/p&gt;
&lt;p&gt;一组&lt;strong&gt;虚拟主机&lt;/strong&gt;构成了路由配置。每个虚拟主机都有一个逻辑名称，一组可以根据请求头被路由到它的域，以及一组指定如何匹配请求并指出下一步要做什么的路由。&lt;/p&gt;
&lt;p&gt;Envoy 还支持路由级别的优先级路由。每个优先级都有其连接池和断路设置。目前支持的两个优先级是 DEFAULT 和 HIGH。如果我们没有明确提供优先级，则默认为 DEFAULT。&lt;/p&gt;
&lt;p&gt;这里有一个片段，显示了一个路由配置的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my_route_config&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 用于统计的名称，与路由无关&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bar_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;priority&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HIGH&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bar_io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;foo_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;foo.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;foo_io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;foo_io_api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当一个 HTTP 请求进来时，虚拟主机、域名和路由匹配依次发生。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;或&lt;code&gt;authority&lt;/code&gt;头被匹配到每个虚拟主机的&lt;code&gt;domains&lt;/code&gt;字段中指定的值。例如，如果主机头被设置为 &lt;code&gt;foo.io&lt;/code&gt;，则虚拟主机 &lt;code&gt;foo_vhost&lt;/code&gt; 匹配。&lt;/li&gt;
&lt;li&gt;接下来会检查匹配的虚拟主机内&lt;code&gt;routs&lt;/code&gt;下的条目。如果发现匹配，就不做进一步检查，而是选择一个集群。例如，如果我们匹配了 &lt;code&gt;foo.io&lt;/code&gt; 虚拟主机，并且请求前缀是 &lt;code&gt;/api&lt;/code&gt;，那么集群 &lt;code&gt;foo_io_api&lt;/code&gt; 就被选中。&lt;/li&gt;
&lt;li&gt;如果提供，虚拟主机中的每个虚拟集群（&lt;code&gt;virtual_clusters&lt;/code&gt;）都会被检查是否匹配。如果有匹配的，就使用一个虚拟集群，而不再进行进一步的虚拟集群检查。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟集群是一种指定针对特定端点的重组词匹配规则的方式，并明确为匹配的请求生成统计信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虚拟主机的顺序以及每个主机内的路由都很重要。考虑下面的路由配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_io_api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_io_api_v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们发送以下请求，哪个路由 / 集群被选中？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl hello.io/api/v1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个设置集群 &lt;code&gt;hello_io_api的&lt;/code&gt;路由被匹配。这是因为匹配是按照前缀的顺序进行评估的。然而，我们可能错误地期望前缀为 &lt;code&gt;/api/v1&lt;/code&gt; 的路由被匹配。为了解决这个问题，我们可以调换路由的顺序，或者使用不同的匹配规则。&lt;/p&gt;
&lt;h1 id=&#34;23-请求匹配&#34;&gt;2.3 请求匹配&lt;/h1&gt;
&lt;h2 id=&#34;路径匹配&#34;&gt;路径匹配&lt;/h2&gt;
&lt;p&gt;我们只谈了一个使用&lt;code&gt;前缀&lt;/code&gt;字段匹配前缀的匹配规则。下面的表格解释了其他支持的匹配规则。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;规则名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前缀必须与&lt;code&gt;path&lt;/code&gt;标头的开头相匹配。例如，前缀 &lt;code&gt;/api&lt;/code&gt; 将匹配路径 &lt;code&gt;/api&lt;/code&gt; 和 &lt;code&gt;/api/v1&lt;/code&gt;，而不是 &lt;code&gt;/&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;路径必须与确切的&lt;code&gt;path&lt;/code&gt;标头相匹配（没有查询字符串）。例如，路径 &lt;code&gt;/api&lt;/code&gt; 将匹配路径 &lt;code&gt;/api&lt;/code&gt;，但不匹配 &lt;code&gt;/api/v1&lt;/code&gt; 或 &lt;code&gt;/&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;safe_regex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;路径必须符合指定的正则表达式。例如，正则表达式 &lt;code&gt;^/products/\d+$&lt;/code&gt; 将匹配路径 &lt;code&gt;/products/123&lt;/code&gt; 或 &lt;code&gt;/products/321&lt;/code&gt;，但不是 &lt;code&gt;/products/hello&lt;/code&gt; 或 &lt;code&gt;/api/products/123&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;connect_matcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配器只匹配 CONNECT 请求（目前在 Alpha 中）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;默认情况下，前缀和路径匹配是大小写敏感的。要使其不区分大小写，我们可以将 &lt;code&gt;case_sensitive&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt;。注意，这个设置不适用于 &lt;code&gt;safe_regex&lt;/code&gt; 匹配。&lt;/p&gt;
&lt;h2 id=&#34;header-匹配&#34;&gt;Header 匹配&lt;/h2&gt;
&lt;p&gt;另一种匹配请求的方法是指定一组 Header。路由器根据路由配置中所有指定的 Header 检查请求 Header。如果所有指定的头信息都存在于请求中，并且设置了相同的值，则进行匹配。&lt;/p&gt;
&lt;p&gt;多个匹配规则可以应用于Header。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;范围匹配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range_match&lt;/code&gt; 检查请求 Header 的值是否在指定的以十进制为单位的整数范围内。该值可以包括一个可选的加号或减号，后面是数字。&lt;/p&gt;
&lt;p&gt;为了使用范围匹配，我们指定范围的开始和结束。起始值是包含的，而终止值是不包含的（&lt;code&gt;[start, end)&lt;/code&gt;）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;minor_version&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;range_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;start&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;end&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述范围匹配将匹配 &lt;code&gt;minor_version&lt;/code&gt; 头的值，如果它被设置为 1 到 10 之间的任何数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存在匹配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;present_match&lt;/code&gt; 检查传入的请求中是否存在一个特定的头。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;debug&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;present_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们设置了&lt;code&gt;debug&lt;/code&gt;头，无论头的值是多少，上面的片段都会评估为&lt;code&gt;真&lt;/code&gt;。如果我们把 &lt;code&gt;present_match&lt;/code&gt; 的值设为 &lt;code&gt;false&lt;/code&gt;，我们就可以检查是否有 Header。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串匹配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;string_match&lt;/code&gt; 允许我们通过前缀或后缀，使用正则表达式或检查该值是否包含一个特定的字符串，来准确匹配头的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 头部`regex_match`匹配所提供的正则表达式&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;regex_match&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;string_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;safe_regex_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;google_re2&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;regex&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;^v\\d+$&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Header `exact_match`包含值`hello`。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;exact_match&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;string_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;exact&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 头部`prefix_match`以`api`开头。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;prefix_match&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;string_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;api&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 头部`后缀_match`以`_1`结束&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;suffix_match&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;string_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;suffix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;_1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 头部`contains_match`包含值 &amp;#34;debug&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;contains_match&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;string_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;contains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;反转匹配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们设置了 &lt;code&gt;invert_match&lt;/code&gt;，匹配结果就会反转。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;version&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;range_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;start&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;end&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;invert_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的片段将检查&lt;code&gt;version&lt;/code&gt;头中的值是否在 1 和 5 之间；然而，由于我们添加了 &lt;code&gt;invert_match&lt;/code&gt; 字段，它反转了结果，检查头中的值是否超出了这个范围。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;invert_match&lt;/code&gt; 可以被其他匹配器使用。比如说。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;env&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;contains_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;invert_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的片段将检查 &lt;code&gt;env&lt;/code&gt; 头的值是否包含字符串&lt;code&gt;test&lt;/code&gt;。如果我们设置了 &lt;code&gt;env&lt;/code&gt; 头，并且它不包括字符串&lt;code&gt;test&lt;/code&gt;，那么整个匹配的评估结果为真。&lt;/p&gt;
&lt;h2 id=&#34;查询参数匹配&#34;&gt;查询参数匹配&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;query_parameters&lt;/code&gt; 字段，我们可以指定路由应该匹配的 URL 查询的参数。过滤器将检查来自&lt;code&gt;path&lt;/code&gt;头的查询字符串，并将其与所提供的参数进行比较。&lt;/p&gt;
&lt;p&gt;如果有一个以上的查询参数被指定，它们必须与规则相匹配，才能评估为真。&lt;/p&gt;
&lt;p&gt;请考虑以下例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;query_parameters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;env&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;present_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果有一个名为 &lt;code&gt;env&lt;/code&gt;的查询参数被设置，上面的片段将评估为真。它没有说任何关于该值的事情。它只是检查它是否存在。例如，使用上述匹配器，下面的请求将被评估为真。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;GET /hello?env&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还可以使用字符串匹配器来检查查询参数的值。下表列出了字符串匹配的不同规则。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;规则名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;必须与查询参数的精确值相匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前缀必须符合查询参数值的开头。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;后缀必须符合查询参数值的结尾。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;safe_regex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查询参数值必须符合指定的正则表达式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查查询参数值是否包含一个特定的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除了上述规则外，我们还可以使用 &lt;code&gt;ignore_case&lt;/code&gt; 字段来指示精确、前缀或后缀匹配是否应该区分大小写。如果设置为 &amp;ldquo;true&amp;rdquo;，匹配就不区分大小写。&lt;/p&gt;
&lt;p&gt;下面是另一个使用前缀规则进行不区分大小写的查询参数匹配的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;query_parameters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;env&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;string_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;env_&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;ignore_case&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果有一个名为 &lt;code&gt;env&lt;/code&gt; 的查询参数，其值以 &lt;code&gt;env_&lt;/code&gt;开头，则上述内容将评估为真。例如，&lt;code&gt;env_staging&lt;/code&gt; 和 &lt;code&gt;ENV_prod&lt;/code&gt; 评估为真。&lt;/p&gt;
&lt;h2 id=&#34;grpc-和-tls-匹配器&#34;&gt;gRPC 和 TLS 匹配器&lt;/h2&gt;
&lt;p&gt;我们可以在路由上配置另外两个匹配器：gRPC 路由匹配器（&lt;code&gt;grpc&lt;/code&gt;）和 TLS 上下文匹配器（&lt;code&gt;tls_context&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;gRPC 匹配器将只在 gRPC 请求上匹配。路由器检查内容类型头的 &lt;code&gt;application/grpc&lt;/code&gt; 和其他 &lt;code&gt;application/grpc+&lt;/code&gt; 值，以确定该请求是否是 gRPC 请求。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;grpc&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意 gRPC 匹配器没有任何选项。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果请求是 gRPC 请求，上面的片段将匹配路由。&lt;/p&gt;
&lt;p&gt;同样，如果指定了 TLS 匹配器，它将根据提供的选项来匹配 TLS 上下文。在 &lt;code&gt;tls_context&lt;/code&gt; 字段中，我们可以定义两个布尔值——presented 和 validated。&lt;code&gt;presented&lt;/code&gt;字段检查证书是否被出示。&lt;code&gt;validated&lt;/code&gt;字段检查证书是否被验证。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;tls_context&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;presented&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;validated&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果一个证书既被出示又被验证，上述匹配评估为真。&lt;/p&gt;
&lt;h1 id=&#34;24-流量分割&#34;&gt;2.4 流量分割&lt;/h1&gt;
&lt;p&gt;Envoy 支持在同一虚拟主机内将流量分割到不同的路由。我们可以在两个或多个上游集群之间分割流量。&lt;/p&gt;
&lt;p&gt;有两种不同的方法。第一种是使用运行时对象中指定的百分比，第二种是使用加权群组。&lt;/p&gt;
&lt;h2 id=&#34;使用运行时的百分比进行流量分割&#34;&gt;使用运行时的百分比进行流量分割&lt;/h2&gt;
&lt;p&gt;使用运行时对象的百分比很适合于金丝雀发布或渐进式交付的场景。在这种情况下，我们想把流量从一个上游集群逐渐转移到另一个。&lt;/p&gt;
&lt;p&gt;实现这一目标的方法是提供一个&lt;code&gt;runtime_fraction&lt;/code&gt;配置。让我们用一个例子来解释使用运行时百分比的流量分割是如何进行的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;runtime_fraction&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;default_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;numerator&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;denominator&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HUNDRED&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述配置声明了两个版本的 hello 服务：&lt;code&gt;hello_v1&lt;/code&gt; 和 &lt;code&gt;hello_v2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在第一个匹配中，我们通过指定分子（&lt;code&gt;90&lt;/code&gt;）和分母（&lt;code&gt;HUNDRED&lt;/code&gt;）来配置 &lt;code&gt;runtime_fraction&lt;/code&gt; 字段。Envoy 使用分子和分母来计算最终的分数值。在这种情况下，最终值是 90%（&lt;code&gt;90/100 = 0.9 = 90%&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;Envoy 在 &lt;code&gt;[0，分母]&lt;/code&gt; 范围内生成一个随机数（例如，在我们的案例中是 [0，100]）。如果随机数小于分子值，路由器就会匹配该路由，并将流量发送到我们案例中的集群 &lt;code&gt;hello_v1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果随机数大于分子值，Envoy 继续评估其余的匹配条件。由于我们有第二条路由的精确前缀匹配，所以它是匹配的，Envoy 会将流量发送到集群 &lt;code&gt;hello_v2&lt;/code&gt;。一旦我们把分子值设为 0，所有随机数会大于分子值。因此，所有流量都会流向第二条路由。&lt;/p&gt;
&lt;p&gt;我们也可以在运行时键中设置分子值。比如说。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;runtime_fraction&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;default_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;numerator&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;denominator&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HUNDRED&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;runtime_key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;routing.hello_io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;layered_runtime&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;layers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;static_layer&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;static_layer&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;routing.hello_io&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，我们指定了一个名为 &lt;code&gt;routing.hello_io的&lt;/code&gt;运行时键。我们可以在配置中的分层运行时字段下设置该键的值——这也可以从文件或通过运行时发现服务（RTDS）动态读取和更新。为了简单起见，我们在配置文件中直接设置。&lt;/p&gt;
&lt;p&gt;当 Envoy 这次进行匹配时，它将看到提供了&lt;code&gt;runtime_key&lt;/code&gt;，并将使用该值而不是分子值。有了运行时键，我们就不必在配置中硬编码这个值了，我们可以让 Envoy 从一个单独的文件或 RTDS 中读取它。&lt;/p&gt;
&lt;p&gt;当你有两个集群时，使用运行时百分比的方法效果很好。但是，当你想把流量分到两个以上的集群，或者你正在运行 A/B 测试或多变量测试方案时，它就会变得复杂。&lt;/p&gt;
&lt;h2 id=&#34;使用加权集群进行流量分割&#34;&gt;使用加权集群进行流量分割&lt;/h2&gt;
&lt;p&gt;当你在两个或多个版本的服务之间分割流量时，加权集群的方法是理想的。在这种方法中，我们为多个上游集群分配了不同的权重。而带运行时百分比的方法使用了许多路由，我们只需要为加权集群提供一条路由。&lt;/p&gt;
&lt;p&gt;我们将在下一个模块中进一步讨论上游集群。为了解释用加权集群进行的流量分割，我们可以把上游集群看成是流量可以被发送到的终端的集合。&lt;/p&gt;
&lt;p&gt;我们在路由内指定多个加权集群（&lt;code&gt;weighted_clusters&lt;/code&gt;），而不是设置一个集群（&lt;code&gt;cluster）&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;继续前面的例子，我们可以这样重写配置，以代替使用加权集群。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;weighted_clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在加权的集群下，我们也可以设置 &lt;code&gt;runtime_key_prefix&lt;/code&gt;，它将从运行时密钥配置中读取权重。注意，如果运行时密钥配置不在那里，Envoy 会使用每个集群旁边的权重。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;weighted_clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;runtime_key_prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;routing.hello_io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;layered_runtime&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;layers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;static_layer&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;static_layer&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;routing.hello_io.hello_v1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;routing.hello_io.hello_v2&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;权重代表 Envoy 发送给上游集群的流量的百分比。所有权重的总和必须是 100。然而，使用 &lt;code&gt;total_weight&lt;/code&gt; 字段，我们可以控制所有权重之和必须等于的值。例如，下面的片段将 &lt;code&gt;total_weight&lt;/code&gt; 设置为 15。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;weighted_clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;runtime_key_prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;routing.hello_io&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;total_weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_v3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;weight&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了动态地控制权重，我们可以设置 &lt;code&gt;runtime_key_prefix&lt;/code&gt;。路由器使用运行时密钥前缀值来构建与每个集群相关的运行时密钥。如果我们提供了运行时密钥前缀，路由器将检查 &lt;code&gt;runtime_key_prefix + &amp;quot;.&amp;quot; + cluster_name&lt;/code&gt; 的值，其中 &lt;code&gt;cluster_name&lt;/code&gt; 表示集群数组中的条目（例如 &lt;code&gt;hello_v1&lt;/code&gt;、&lt;code&gt;hello_v2&lt;/code&gt;）。如果 Envoy 没有找到运行时密钥，它将使用配置中指定的值作为默认值。&lt;/p&gt;
&lt;h1 id=&#34;25-header-操作&#34;&gt;2.5 Header 操作&lt;/h1&gt;
&lt;p&gt;HCM 支持在加权集群、路由、虚拟主机和 / 或全局配置层面操纵请求和响应头。&lt;/p&gt;
&lt;p&gt;注意，我们不能直接从配置中修改所有的 Header，使用 Wasm 扩展的情况除外。然后，我们可以修改 &lt;code&gt;:authority &lt;/code&gt; header，例如下面的情况。&lt;/p&gt;
&lt;p&gt;不可变的头是伪头（前缀为&lt;code&gt;:&lt;/code&gt;，如&lt;code&gt;:scheme&lt;/code&gt;）和&lt;code&gt;host&lt;/code&gt;头。此外，诸如 &lt;code&gt;:path &lt;/code&gt;和 &lt;code&gt;:authority&lt;/code&gt; 这样的头信息可以通过 &lt;code&gt;prefix_rewrite&lt;/code&gt;、&lt;code&gt;regex_rewrite&lt;/code&gt; 和  &lt;code&gt;host_rewrite&lt;/code&gt; 配置来间接修改。&lt;/p&gt;
&lt;p&gt;Envoy 按照以下顺序对请求 / 响应应用这些头信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加权的集群级头信息&lt;/li&gt;
&lt;li&gt;路由级 Header&lt;/li&gt;
&lt;li&gt;虚拟主机级 Header&lt;/li&gt;
&lt;li&gt;全局级 Header&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个顺序意味着 Envoy 可能会用更高层次（路由、虚拟主机或全局）配置的头来覆盖加权集群层次上设置的 Header。&lt;/p&gt;
&lt;p&gt;在每一级，我们可以设置以下字段来添加 / 删除请求 / 响应头。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response_headers_to_add&lt;/code&gt;：要添加到响应中的 Header 信息数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response_headers_to_remove&lt;/code&gt;：要从响应中移除的 Header 信息数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request_headers_to_add&lt;/code&gt;：要添加到请求中的 Header 信息数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request_headers_to_remove&lt;/code&gt;：要从请求中删除的 Header 信息数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了硬编码标头值之外，我们还可以使用变量来为标头添加动态值。变量名称以百分数符号（%）为分隔符。支持的变量名称包括 &lt;code&gt;%DOWNSTREAM_REMOTE_ADDRESS%&lt;/code&gt;、&lt;code&gt;%UPSTREAM_REMOTE_ADDRESS%&lt;/code&gt;、&lt;code&gt;%START_TIME%&lt;/code&gt;、&lt;code&gt;%RESPONSE_FLAGS%&lt;/code&gt; 和更多。你可以在&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers&#34;&gt;这里&lt;/a&gt;找到完整的变量列表。&lt;/p&gt;
&lt;p&gt;让我们看一个例子，它显示了如何在不同级别的请求 / 响应中添加 / 删除头信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;response_headers_to_add&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;header_1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果为真（默认），它会将该值附加到现有值上。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 否则它将替换现有的值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;append&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;response_headers_to_remove&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;header_we_dont_need&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_vhost&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;request_headers_to_add&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;v_host_header&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;from_v_host&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;response_headers_to_add&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;route_header&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;%DOWNSTREAM_REMOTE_ADDRESS%&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hello_api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;response_headers_to_add&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;api_route_header&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;api-value&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;header_1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;this_will_be_overwritten&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;标准-header&#34;&gt;标准 Header&lt;/h2&gt;
&lt;p&gt;Envoy 在收到请求（解码）和向上游集群发送请求（编码）时，会操作一组头信息。&lt;/p&gt;
&lt;p&gt;当使用裸露的 Envoy 配置将流量路由到单个集群时，在编码过程中会设置以下头信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;:authority&#39;, &#39;localhost:10000&#39;
&#39;:path&#39;, &#39;/&#39;
&#39;:method&#39;, &#39;GET&#39;
&#39;:scheme&#39;, &#39;http&#39;
&#39;user-agent&#39;, &#39;curl/7.64.0&#39;
&#39;accept&#39;, &#39;*/*&#39;
&#39;x-forwarded-proto&#39;, &#39;http&#39;
&#39;x-request-id&#39;, &#39;14f0ac76-128d-4954-ad76-823c3544197e&#39;
&#39;x-envoy-expected-rq-timeout-ms&#39;, &#39;15000&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在编码（响应）时，会发送一组不同的头信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;:status&#39;, &#39;200&#39;
&#39;x-powered-by&#39;, &#39;Express&#39;
&#39;content-type&#39;, &#39;text/html; charset=utf-8&#39;
&#39;content-length&#39;, &#39;563&#39;
&#39;etag&#39;, &#39;W/&amp;quot;233-b+4UpNDbOtHFiEpLMsDEDK7iTeI&amp;quot;&#39;
&#39;date&#39;, &#39;Fri, 16 Jul 2021 21:59:52 GMT&#39;
&#39;x-envoy-upstream-service-time&#39;, &#39;2&#39;
&#39;server&#39;, &#39;envoy&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下表解释了 Envoy 在解码或编码过程中设置的不同头信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Header&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:scheme&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置并提供给过滤器，并转发到上游。(对于 HTTP/1，&lt;code&gt;:scheme&lt;/code&gt; 头是由绝对 URL 或 &lt;code&gt;x-forwaded-proto&lt;/code&gt; 头值设置的) 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;user-agent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通常由客户端设置，但在启用 &lt;code&gt;add_user_agent &lt;/code&gt;时可以修改（仅当 Header 尚未设置时）。该值由 &lt;code&gt;--service-cluster&lt;/code&gt;命令行选项决定。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-forwarded-proto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标准头，用于识别客户端用于连接到代理的协议。该值为 &lt;code&gt;http&lt;/code&gt; 或 &lt;code&gt;https&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-request-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Envoy 用来唯一地识别一个请求，也用于访问记录和跟踪。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-expected-rq-timeout-ms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定路由器期望请求完成的时间，单位是毫秒。这是从 &lt;code&gt;x-envoy-upstream-rq-timeout-ms&lt;/code&gt; 头值中读取的（假设设置了 &lt;code&gt;respect_expected_rq_timeout&lt;/code&gt;）或从路由超时设置中读取（默认为 15 秒）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-upstream-service-time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;端点处理请求所花费的时间，以毫秒为单位，以及 Envoy 和上游主机之间的网络延迟。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置为 &lt;code&gt;server_name&lt;/code&gt; 字段中指定的值（默认为 &lt;code&gt;envoy&lt;/code&gt;）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;根据不同的场景，Envoy 会设置或消费一系列其他头信息。当我们在课程的其余部分讨论这些场景和功能时，我们会引出不同的头信息。&lt;/p&gt;
&lt;h2 id=&#34;header-清理&#34;&gt;Header 清理&lt;/h2&gt;
&lt;p&gt;Header 清理是一个出于安全原因添加、删除或修改请求 Header 的过程。有一些头信息，Envoy 有可能会进行清理。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标题&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-decorator-operation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;覆盖由追踪机制产生的任何本地定义的跨度名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-downstream-service-cluster&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含调用者的服务集群（对于外部请求则删除）。由 &lt;code&gt;-service-cluster&lt;/code&gt; 命令行选项决定，要求 &lt;code&gt;user_agent&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-downstream-service-node&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;和前面的头一样，数值由 &lt;code&gt;--service--node&lt;/code&gt;选项决定。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-expected-rq-timeout-ms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定路由器期望请求完成的时间，单位是毫秒。这是从 &lt;code&gt;x-envoy-upstream-rq-timeout-ms&lt;/code&gt; 头值中读取的（假设设置了 &lt;code&gt;respect_expected_rq_timeout&lt;/code&gt;）或从路由超时设置中读取（默认为 15 秒）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-external-address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;受信任的客户端地址（关于如何确定，详见下面的 XFF）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-force-trace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;强制收集的追踪。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-internal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果请求是内部的，则设置为 &amp;ldquo;true&amp;rdquo;（关于如何确定的细节，见下面的 XFF）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-ip-tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果外部地址在 IP 标签中被定义，由 HTTP IP 标签过滤器设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-max-retries&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果配置了重试策略，重试的最大次数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-retry-grpc-on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对特定 gRPC 状态代码的失败请求进行重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-retry-on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定重试策略。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-upstream-alt-stat-name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Emist 上游响应代码 / 时间统计到一个双统计树。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-upstream-rq-per-try-timeout-ms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置路由请求的每次尝试超时。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-upstream-rq-timeout-alt-response&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果存在，在请求超时的情况下设置一个 204 响应代码（而不是 504）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-envoy-upstream-rq-timeout-ms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;覆盖路由配置超时。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-forwarded-client-certif&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示一个请求流经的所有客户端 / 代理中的部分证书信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-forwarded-for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示 IP 地址请求通过了。更多细节见下面的 XFF。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-forwarded-proto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置来源协议（&lt;code&gt;http&lt;/code&gt; 或 &lt;code&gt;https）&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x-request-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Envoy 用来唯一地识别一个请求。也用于访问日志和追踪。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;是否对某个特定的头进行清理，取决于请求来自哪里。Envoy 通过查看 &lt;code&gt;x-forwarded-for&lt;/code&gt; 头（XFF）和 &lt;code&gt;internal_address_config&lt;/code&gt; 设置来确定请求是外部还是内部。&lt;/p&gt;
&lt;h2 id=&#34;xff&#34;&gt;XFF&lt;/h2&gt;
&lt;p&gt;XFF 或 &lt;code&gt;x-forwaded-for&lt;/code&gt; 头表示请求在从客户端到服务器的途中所经过的 IP 地址。下游和上游服务之间的代理在代理请求之前将最近的客户的 IP 地址附加到 XFF 列表中。&lt;/p&gt;
&lt;p&gt;Envoy 不会自动将 IP 地址附加到 XFF 中。只有当 &lt;code&gt;use_remote_address&lt;/code&gt;（默认为 false）被设置为 true，并且 &lt;code&gt;skip_xff_append&lt;/code&gt; 被设置为 false 时，Envoy 才会追加该地址。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;use_remote_address&lt;/code&gt; 被设置为 true 时，HCM 在确定来源是内部还是外部以及修改头信息时，会使用客户端连接的真实远程地址。这个值控制 Envoy 如何确定&lt;strong&gt;可信的客户端地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可信的客户端地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可信的客户端地址是已知的第一个准确的源 IP 地址。向 Envoy 代理发出请求的下游节点的源 IP 地址被认为是正确的。&lt;/p&gt;
&lt;p&gt;请注意，完整的 XFF 有时不能被信任，因为恶意的代理可以伪造它。然而，如果一个受信任的代理将最后一个地址放在 XFF 中，那么它就可以被信任。例如，如果我们看一下请求路径 &lt;code&gt;IP1 -&amp;gt; IP2 -&amp;gt; IP3 -&amp;gt; Envoy&lt;/code&gt;，&lt;code&gt;IP3&lt;/code&gt; 是 Envoy 会认为准确的节点。&lt;/p&gt;
&lt;p&gt;Envoy 支持通过 &lt;code&gt;original_ip_detection_extensions&lt;/code&gt; 字段设置的扩展，以帮助确定原始 IP 地址。目前，有两个扩展：&lt;code&gt;custom_header&lt;/code&gt; 和 &lt;code&gt;xff&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通过自定义头的扩展，我们可以提供一个包含原始下游远程地址的头名称。此外，我们还可以告诉 HCM 将检测到的地址视为可信地址。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;xff&lt;/code&gt; 扩展，我们可以指定从 &lt;code&gt;x-forwarded-for&lt;/code&gt; 头的右侧开始的额外代理跳数来信任。如果我们将这个值设置为并 &lt;code&gt;1&lt;/code&gt; 使用与上面相同的例子，受信任的地址将是 &lt;code&gt;IP2&lt;/code&gt; 和 &lt;code&gt;IP3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Envoy 使用可信的客户端地址来确定请求是内部还是外部。如果我们把 &lt;code&gt;use_remote_address&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt;，那么如果请求不包含 XFF，并且直接下游节点与 Envoy 的连接有一个内部源地址，那么就认为是内部请求。Envoy 使用 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc1918&#34;&gt;RFC1918&lt;/a&gt; 或 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4193&#34;&gt;RFC4193&lt;/a&gt; 来确定内部源地址。&lt;/p&gt;
&lt;p&gt;如果我们把 &lt;code&gt;use_remote_address&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt;（默认值），只有当 XFF 包含上述两个 RFC 定义的单一内部源地址时，请求才是内部的。&lt;/p&gt;
&lt;p&gt;让我们看一个简单的例子，把 &lt;code&gt;use_remote_address&lt;/code&gt; 设为 &lt;code&gt;true&lt;/code&gt;，&lt;code&gt;skip_xff_append&lt;/code&gt; 设为 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.network.http_connection_manager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;typed_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;use_remote_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;skip_xff_append&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们从同一台机器向代理发送一个请求（即内部请求），发送到上游的头信息将是这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;:authority&#39;, &#39;localhost:10000&#39;
&#39;:path&#39;, &#39;/&#39;
&#39;:method&#39;, &#39;GET&#39;
&#39;:scheme&#39;, &#39;http&#39;
&#39;user-agent&#39;, &#39;curl/7.64.0&#39;
&#39;accept&#39;, &#39;*/*&#39;
&#39;x-forwarded-for&#39;, &#39;10.128.0.17&#39;
&#39;x-forwarded-proto&#39;, &#39;http&#39;
&#39;x-envoy-internal&#39;, &#39;true&#39;
&#39;x-request-id&#39;, &#39;74513723-9bbd-4959-965a-861e2162555b&#39;
&#39;x-envoy-expected-rq-timeout-ms&#39;, &#39;15000&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这些 Header 中的大部分与我们在标准 Header 例子中看到的相同。然而，增加了两个头——&lt;code&gt;x-forwarded-for&lt;/code&gt; 和 &lt;code&gt;x-envoy-internal&lt;/code&gt;。&lt;code&gt;x-forwarded-for&lt;/code&gt; 将包含内部 IP 地址，而 &lt;code&gt;x-envoy-internal&lt;/code&gt; 头将被设置，因为我们用 XFF 来确定地址。我们不是通过解析 &lt;code&gt;x-forwarded-for&lt;/code&gt; 头来确定请求是否是内部的，而是检查 &lt;code&gt;x-envoy-internal&lt;/code&gt; 头的存在，以快速确定请求是内部还是外部的。&lt;/p&gt;
&lt;p&gt;如果我们从该网络之外发送一个请求，以下头信息会被发送到上游。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;:authority&#39;, &#39;35.224.50.133:10000&#39;
&#39;:path&#39;, &#39;/&#39;
&#39;:method&#39;, &#39;GET&#39;
&#39;:scheme&#39;, &#39;http&#39;
&#39;user-agent&#39;, &#39;curl/7.64.1&#39;
&#39;accept&#39;, &#39;*/*&#39;
&#39;x-forwarded-for&#39;, &#39;50.35.69.235&#39;
&#39;x-forwarded-proto&#39;, &#39;http&#39;
&#39;x-envoy-external-address&#39;, &#39;50.35.69.235&#39;
&#39;x-request-id&#39;, &#39;dc93fd48-1233-4220-9146-eac52435cdf2&#39;
&#39;x-envoy-expected-rq-timeout-ms&#39;, &#39;15000&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意&lt;code&gt;:authority&lt;/code&gt; 的值是一个实际的 IP 地址，而不只是 &lt;code&gt;localhost&lt;/code&gt;。同样地，&lt;code&gt;x-forwarded-for&lt;/code&gt; 头包含了被调用的 IP 地址。没有 &lt;code&gt;x-envoy-internal&lt;/code&gt; 头，因为这个请求是外部的。然而，我们确实得到了一个新的头，叫做 &lt;code&gt;x-envoy-external-address&lt;/code&gt;。Envoy 只为外部请求设置这个头。这个头可以在内部服务之间转发，并用于基于起源客户端 IP 地址的分析。&lt;/p&gt;
&lt;h1 id=&#34;26-修改响应&#34;&gt;2.6 修改响应&lt;/h1&gt;
&lt;p&gt;HCM 支持修改和定制由 Envoy 返回的响应。请注意，这对上游返回的响应不起作用。&lt;/p&gt;
&lt;p&gt;本地回复是由 Envoy 生成的响应。本地回复的工作原理是定义一组&lt;strong&gt;映射器（mapper）&lt;/strong&gt;，允许过滤和改变响应。例如，如果没有定义任何路由或上游集群，Envoy 会发送一个本地 HTTP 404。&lt;/p&gt;
&lt;p&gt;每个映射器必须定义一个过滤器，将请求属性与指定值进行比较（例如，比较状态代码是否等于 403）。我们可以选择从&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/accesslog/v3/accesslog.proto#envoy-v3-api-msg-config-accesslog-v3-accesslogfilter&#34;&gt;多个过滤器&lt;/a&gt;来匹配状态代码、持续时间、Header、响应标志等。&lt;/p&gt;
&lt;p&gt;除了过滤器字段，映射器还有新的状态代码（&lt;code&gt;status_code&lt;/code&gt;）、正文（&lt;code&gt;body&lt;/code&gt; 和 &lt;code&gt;body_format_override&lt;/code&gt;）和 Header（&lt;code&gt;headers_to_add&lt;/code&gt;）字段。例如，我们可以有一个匹配请求状态代码 403 的过滤器，然后将状态代码改为 500，更新正文，或添加 Header。&lt;/p&gt;
&lt;p&gt;下面是一个将 HTTP 503 响应改写为 HTTP 401 的例子。注意，这指的是 Envoy 返回的状态代码。例如，如果上游不存在，Envoy 将返回一个 503。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.network.http_connection_manager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;typed_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;local_reply_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;mappers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filter&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;status_code_filter&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;comparison&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;op&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;EQ&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;default_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;503&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;runtime_key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;some_key&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;headers_to_add&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;unavailable&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;append&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;status_code&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;401&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;body&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;inline_string&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Not allowed&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意 &lt;code&gt;runtime_key&lt;/code&gt; 字段是必须的。如果 Envoy 找不到运行时密钥，它就会返回到 &lt;code&gt;default_value&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;27-生成请求-id&#34;&gt;2.7 生成请求 ID&lt;/h1&gt;
&lt;p&gt;唯一的请求 ID 对于通过多个服务追踪请求、可视化请求流和精确指出延迟来源至关重要。&lt;/p&gt;
&lt;p&gt;我们可以通过 &lt;code&gt;request_id_extension&lt;/code&gt; 字段配置请求 ID 的生成方式。如果我们不提供任何配置，Envoy 会使用默认的扩展，称为 &lt;code&gt;UuidRequestIdConfig&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;默认扩展会生成一个唯一的标识符（&lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)&#34;&gt;UUID4&lt;/a&gt;）并填充到 &lt;code&gt;x-request-id &lt;/code&gt;HTTP 头中。Envoy 使用 UUID 的第 14 个位点来确定跟踪的情况。&lt;/p&gt;
&lt;p&gt;如果第 14 个比特位（nibble）被设置为 &lt;code&gt;9&lt;/code&gt;，则应该进行追踪采样。如果设置为 &lt;code&gt;a&lt;/code&gt;，应该是由于服务器端的覆盖（&lt;code&gt;a&lt;/code&gt;）而强制追踪，如果设置为 &lt;code&gt;b&lt;/code&gt;，应该是由客户端的请求 ID 加入而强制追踪。&lt;/p&gt;
&lt;p&gt;之所以选择第 14 个位点，是因为它在设计上被固定为 &lt;code&gt;4&lt;/code&gt;。因此，&lt;code&gt;4&lt;/code&gt; 表示一个默认的 UUID 没有跟踪状态，例如 &lt;code&gt;7b674932-635d-4ceb-b907-12674f8c7267&lt;/code&gt;（说明：第 14 比特位实际为第 13 个数字）。&lt;/p&gt;
&lt;p&gt;我们在 &lt;code&gt;UuidRequestIdconfig&lt;/code&gt; 中的两个配置选项是 &lt;code&gt;pack_trace_reason&lt;/code&gt; 和 &lt;code&gt;use_request_id_for_trace_sampling&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;..&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;route_config。&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;local_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;request_id_extension。&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;typed_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type.googleapis.com/envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;pack_trace_reason&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;use_request_id_for_trace_sampling&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;http_filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.http.router&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pack_trace_reaseon&lt;/code&gt; 是一个布尔值，控制实现是否改变 UUID 以包含上述的跟踪采样决定。默认值是 true。&lt;code&gt;use_request_id_for_trace_sampling&lt;/code&gt; 设置是否使用 &lt;code&gt;x-request-id&lt;/code&gt; 进行采样。默认值也是 true。&lt;/p&gt;
&lt;h1 id=&#34;28-超时&#34;&gt;2.8 超时&lt;/h1&gt;
&lt;p&gt;Envoy 支持许多可配置的超时，这取决于你使用代理的场景。&lt;/p&gt;
&lt;p&gt;我们将在 HCM 部分看一下不同的可配置超时。请注意，其他过滤器和组件也有各自的超时时间，我们在此不做介绍。&lt;/p&gt;
&lt;p&gt;在配置的较高层次上设置的一些超时 —— 例如在 HCM 层次，可以在较低层次上覆盖，例如 HTTP 路由层次。&lt;/p&gt;
&lt;p&gt;最著名的超时可能是请求超时。请求超时（&lt;code&gt;request_timeout&lt;/code&gt;）指定了 Envoy 等待接收整个请求的时间（例如 &lt;code&gt;120s&lt;/code&gt;）。当请求被启动时，该计时器被激活。当最后一个请求字节被发送到上游时，或者当响应被启动时，定时器将被停用。默认情况下，如果没有提供或设置为 0，则超时被禁用。&lt;/p&gt;
&lt;p&gt;类似的超时称为 &lt;code&gt;idle_timeout，&lt;/code&gt;表示如果没有活动流，下游或上游连接何时被终止。默认的空闲超时被设置为 1 小时。空闲超时可以在 HCM 配置的 &lt;code&gt;common_http_protocol_options&lt;/code&gt; 中设置，如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.network.http_connection_manager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;typed_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;stat_prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ingress_http&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;common_http_protocol_options&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 设置空闲超时为 10 分钟&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;idle_timeout&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;600s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了配置上游连接的空闲超时，我们可以使用相同的字段 &lt;code&gt;common_http_protocol_options&lt;/code&gt;，但在集群部分。&lt;/p&gt;
&lt;p&gt;还有一个与 Header 有关的超时，叫做 &lt;code&gt;request_headers_timeout&lt;/code&gt;。这个超时规定了 Envoy 等待接收请求头信息的时间（例如 &lt;code&gt;5s&lt;/code&gt;）。该计时器在收到头信息的第一个字节时被激活。当收到头信息的最后一个字节时，该时间就会被停用。默认情况下，如果没有提供或设置为 0，则超时被禁用。&lt;/p&gt;
&lt;p&gt;其他一些超时也可以设置，比如 &lt;code&gt;stream_idle_timeout&lt;/code&gt;、&lt;code&gt;drain_timeout&lt;/code&gt; 和 &lt;code&gt;delayed_close_timeout&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下来就是路由超时。如前所述，路由层面的超时可以覆盖 HCM 的超时和一些额外的超时。&lt;/p&gt;
&lt;p&gt;路由 &lt;code&gt;timeout&lt;/code&gt; 是指 Envoy 等待上游做出完整响应的时间。一旦收到整个下游请求，该计时器就开始计时。超时的默认值是 15 秒；但是，它与永不结束的响应（即流媒体）不兼容。在这种情况下，需要禁用超时，而应该使用 &lt;code&gt;stream_idle_timeout&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;idle_timeout&lt;/code&gt; 字段来覆盖 HCM 层面上的 &lt;code&gt;stream_idle_timeout&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们还可以提到 &lt;code&gt;per_try_timeout&lt;/code&gt; 设置。这个超时是与重试有关的，它为每次尝试指定一个超时。通常情况下，个别尝试应该使用比 &lt;code&gt;timeout &lt;/code&gt;域设置的值更短的超时。&lt;/p&gt;
&lt;h1 id=&#34;29-重试&#34;&gt;2.9 重试&lt;/h1&gt;
&lt;p&gt;我们可以在虚拟主机和路由层面定义重试策略。在虚拟主机级别设置的重试策略将适用于该虚拟主机的所有路由。如果在路由级别上定义了重试策略，它将优先于虚拟主机策略，并被单独处理——即路由级别的重试策略不会继承虚拟主机级别的重试策略的值。即使 Envoy 将重试策略独立处理，配置也是一样的。&lt;/p&gt;
&lt;p&gt;除了在配置中设置重试策略外，我们还可以通过请求头（即 &lt;code&gt;x-envoy-retry-on&lt;/code&gt;  头）进行配置。&lt;/p&gt;
&lt;p&gt;在 Envoy 配置中，我们可以配置以下内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最大重试次数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Envoy 将重试请求，重试次数最多为配置的最大值。指数退避算法是用于确定重试间隔的默认算法。另一种确定重试间隔的方法是通过 Header（例如 &lt;code&gt;x-envoy-upstream-rq-per-try-timeout-ms&lt;/code&gt;）。所有重试也包含在整个请求超时中，即 &lt;code&gt;request_timeout&lt;/code&gt; 配置设置。默认情况下，Envoy 将重试次数设置为一次。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;重试条件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以根据不同的条件重试请求。例如，我们只能重试 5xx 响应代码，网关失败，4xx 响应代码，等等。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;重试预算&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重试预算规定了与活动请求数有关的并发请求的限制。这可以帮助防止过大的重试流量。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;主机选择重试插件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重试期间的主机选择通常遵循与原始请求相同的过程。使用重试插件，我们可以改变这种行为，指定一个主机或优先级谓词，拒绝一个特定的主机，并导致重新尝试选择主机。&lt;/p&gt;
&lt;p&gt;让我们看看几个关于如何定义重试策略的配置例子。我们使用 httpbin 并匹配返回 500 响应代码的 &lt;code&gt;/status/500&lt;/code&gt; 路径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;5xx_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;path&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/status/&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;retry_policy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;retry_on&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;5xx&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;num_retries&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;retry_policy&lt;/code&gt; 字段中，我们将重试条件（&lt;code&gt;retry_on&lt;/code&gt;）设置为 &lt;code&gt;500&lt;/code&gt; ，这意味着我们只想在上游返回 HTTP 500 的情况下重试（将会如此）。Envoy 将重试该请求五次。这可以通过 &lt;code&gt;num_retries&lt;/code&gt; 字段进行配置。&lt;/p&gt;
&lt;p&gt;如果我们运行 Envoy 并发送一个请求，该请求将失败（HTTP 500），并将创建以下日志条目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2021-07-26T18:43:29.515Z] &amp;quot;GET /status/500 HTTP/1.1&amp;quot; 500 URX 0 0 269 269 &amp;quot;-&amp;quot; &amp;quot;curl/7.64.0&amp;quot; &amp;quot;1ae9ffe2-21f2-43f7-ab80-79be4a95d6d4&amp;quot; &amp;quot;localhost:10000&amp;quot; &amp;quot;127.0.0.1:5000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意到 &lt;code&gt;500URX&lt;/code&gt; 部分告诉我们，上游响应为 500，&lt;code&gt;URX&lt;/code&gt; 响应标志意味着 Envoy 拒绝了该请求，因为达到了上游重试限制。&lt;/p&gt;
&lt;p&gt;重试条件可以设置为一个或多个值，用逗号分隔，如下表所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;重试条件（&lt;code&gt;retry_on）&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;5xx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在 &lt;code&gt;5xx&lt;/code&gt; 响应代码或上游不响应时重试（包括 &lt;code&gt;connect-failure&lt;/code&gt; 和 &lt;code&gt;refused-stream）&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gatewayerror&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对 &lt;code&gt;502&lt;/code&gt;、 &lt;code&gt;503&lt;/code&gt;  或响应 &lt;code&gt;504&lt;/code&gt;  代码进行重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果上游根本没有回应，则重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;connect-failure&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果由于与上游服务器的连接失败（例如，连接超时）而导致请求失败，则重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Envoy-ratelimited&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果存在 &lt;code&gt;x-envoy-ratelimited&lt;/code&gt; 头，则重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;retriable-4xx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果上游响应的是可收回的 &lt;code&gt;4xx&lt;/code&gt; 响应代码（目前只有 HTTP &lt;code&gt;409&lt;/code&gt;），则重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;refused-stream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果上游以 &lt;code&gt;REFUSED_STREAM&lt;/code&gt; 错误代码重置流，则重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;retriable-status-codes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果上游响应的任何响应代码与 &lt;code&gt;x-envoy-retriable-status-codes&lt;/code&gt; 头中定义的代码相匹配（例如，以逗号分隔的整数列表，例如 &lt;code&gt;&amp;quot;502,409&amp;quot;&lt;/code&gt;），则重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;retriable-header&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果上游响应包括任何在 &lt;code&gt;x-envoy-retriable-header-names&lt;/code&gt; 头中匹配的头信息，则重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除了控制 Envoy 重试请求的响应外，我们还可以配置重试时的主机选择逻辑。我们可以指定 Envoy 在选择重试的主机时使用的 &lt;code&gt;retry_host_predicate。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以跟踪之前尝试过的主机（&lt;code&gt;envoy.retry_host_predicates.previous_host&lt;/code&gt;），如果它们已经被尝试过，就拒绝它们。或者，我们可以使用 &lt;code&gt;envoy.retry_host_predicates.canary_hosts &lt;/code&gt; 拒绝任何标记为 canary 的主机（例如，任何标记为 &lt;code&gt;canary: true 的&lt;/code&gt;主机）。&lt;/p&gt;
&lt;p&gt;例如，这里是如何配置 &lt;code&gt;previous_hosts&lt;/code&gt; 插件，以拒绝任何以前尝试过的主机，并重试最多 5 次的主机选择。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;5xx_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;path&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/status/&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;retry_policy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;retry_host_predicate&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.retry_host_predicates.previous_hosts&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;host_selection_retry_max_attempts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在集群中定义了多个端点，我们会看到每次重试都会发送到不同的主机上。&lt;/p&gt;
&lt;h2 id=&#34;请求对冲&#34;&gt;请求对冲&lt;/h2&gt;
&lt;p&gt;请求对冲背后的想法是同时向不同的主机发送多个请求，并使用首先响应的上游的结果。请注意，我们通常为幂等的请求配置这个功能，在这种情况下，多次进行相同的调用具有相同的效果。&lt;/p&gt;
&lt;p&gt;我们可以通过指定一个对冲策略来配置请求的对冲。目前，Envoy 只在响应请求超时的情况下进行对冲。因此，当一个初始请求超时时，会发出一个重试请求，而不取消原来超时的请求。Envoy 将根据重试策略向下游返回第一个良好的响应。&lt;/p&gt;
&lt;p&gt;可以通过设置 &lt;code&gt;hedge_on_per_try_timeout&lt;/code&gt; 字段为 &lt;code&gt;true&lt;/code&gt; 来配置对冲。就像重试策略一样，它可以在虚拟主机或路由级别上启用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;5xx_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;hedge_policy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;hedge_on_per_try_timeout&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;210-请求镜像&#34;&gt;2.10 请求镜像&lt;/h1&gt;
&lt;p&gt;使用路由级别的请求镜像策略（&lt;code&gt;request_mirroring_policies&lt;/code&gt;），我们可以配置 Envoy 将流量从一个集群影射到另一个集群。&lt;/p&gt;
&lt;p&gt;流量镜像或请求镜像是指当传入的请求以一个集群为目标时，将其复制并发送给第二个集群。镜像的请求是 &amp;ldquo;发射并遗忘&amp;rdquo; 的，这意味着 Envoy 在发送主集群的响应之前不会等待影子集群的响应。&lt;/p&gt;
&lt;p&gt;请求镜像模式不会影响发送到主集群的流量，而且因为 Envoy 会收集影子集群的所有统计数据，所以这是一种有用的测试技术。&lt;/p&gt;
&lt;p&gt;除了 &amp;ldquo;发送并遗忘&amp;rdquo; 之外，还要确保你所镜像的请求是空闲的。否则，镜像请求会扰乱你的服务与之对话的后端。&lt;/p&gt;
&lt;p&gt;影子请求中的 &lt;code&gt;authority/host&lt;/code&gt; 头信息将被添加 &lt;code&gt;-shadow&lt;/code&gt;字符串。&lt;/p&gt;
&lt;p&gt;为了配置镜像策略，我们在要镜像流量的路由上使用 &lt;code&gt;request_mirror_policies &lt;/code&gt;字段。我们可以指定一个或多个镜像策略，以及我们想要镜像的流量的部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;request_mirror_policies&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mirror_httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;runtime_fraction&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;default_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;numerator&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述配置将 100% 地接收发送到集群 &lt;code&gt;httpbin&lt;/code&gt; 的传入请求，并将其镜像到&lt;code&gt;mirror_httpbin&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;211-速率限制&#34;&gt;2.11 速率限制&lt;/h1&gt;
&lt;p&gt;速率限制是一种限制传入请求的策略。它规定了一个主机或客户端在一个特定的时间范围内发送多少次请求。一旦达到限制，例如每秒 100 个请求，我们就说发送请求的客户端受到速率限制。任何速率受限的请求都会被拒绝，并且永远不会到达上游服务。稍后，我们还将讨论可以使用的断路器，以及速率限制如何限制上游的负载并防止级联故障。&lt;/p&gt;
&lt;p&gt;Envoy 支持全局（分布式）和本地（非分布式）的速率限制。&lt;/p&gt;
&lt;p&gt;全局和本地速率限制的区别在于，我们要用全局速率限制来控制对一组在多个 Envoy 实例之间&lt;strong&gt;共享的&lt;/strong&gt;上游的访问。例如，我们想对一个叫做多个 Envoy 代理的数据库的访问进行速率限制。另一方面，本地速率限制适用于每一个 Envoy 实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gzc88zs763j31lw0u0764.jpg&#34; alt=&#34;全局和局部速率限制&#34;&gt;&lt;/p&gt;
&lt;p&gt;本地和全球速率限制可以一起使用，Envoy 分两个阶段应用它们。首先，应用本地速率限制，然后是全局速率限制。&lt;/p&gt;
&lt;p&gt;我们将在接下来的章节中深入研究全局和本地速率限制，并解释这两种情况如何工作。&lt;/p&gt;
&lt;h1 id=&#34;212-全局速率限制&#34;&gt;2.12 全局速率限制&lt;/h1&gt;
&lt;p&gt;当许多主机向少数上游服务器发送请求，且平均延迟较低时，全局或分布式速率限制很有用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9ktvfffyj31ha0u0dhn.jpg&#34; alt=&#34;许多主机上少许上游服务器发送请求&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于服务器不能快速处理这些请求，请求就会变得滞后。在这种情况下，众多的下游主机可以压倒少数的上游主机。全局速率限制器有助于防止级联故障。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9ktuyp50j31ha0u0wga.jpg&#34; alt=&#34;速率限制&#34;&gt;&lt;/p&gt;
&lt;p&gt;Envoy 与任何实现定义的 RPC/IDL 协议的外部速率限制服务集成。该服务的参考实现使用 Go、gRPC 和 Redis 作为其后端，可参考&lt;a href=&#34;https://github.com/envoyproxy/ratelimit&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Envoy 调用外部速率限制服务（例如，在 Redis 中存储统计信息并跟踪请求），以得到该请求是否应该被速率限制的响应。&lt;/p&gt;
&lt;p&gt;使用外部速率限制服务，我们可以将限制应用于一组服务，或者，如果我们谈论的是服务网格，则应用于网格中的所有服务。我们可以控制进入网格的请求数量，作为一个整体。&lt;/p&gt;
&lt;p&gt;为了控制单个服务层面的请求率，我们可以使用本地速率限制器。本地速率限制器允许我们对每个服务有单独的速率限制。本地和全局速率限制通常是一起使用的。&lt;/p&gt;
&lt;h2 id=&#34;配置全局速率限制&#34;&gt;配置全局速率限制&lt;/h2&gt;
&lt;p&gt;在配置全局速率限制时，我们必须设置两个部分——客户端（Envoy）和服务器端（速率限制服务）。&lt;/p&gt;
&lt;p&gt;我们可以在 Envoy 侧将速率限制服务配置为&lt;strong&gt;网络级速率限制过滤器&lt;/strong&gt;或 &lt;strong&gt;HTTP 级速率限制过滤器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当在网络层面上使用速率限制过滤器时，Envoy 对我们配置了过滤器的监听器的每个新连接调用速率限制服务。同样，使用 HTTP 级别的速率限制过滤器，Envoy 对安装了过滤器的监听器上的每个新请求调用速率限制服务，&lt;strong&gt;并且&lt;/strong&gt;路由表指定应调用全局速率限制服务。所有到目标上游集群的请求以及从发起集群到目标集群的请求都可以被限制速率。&lt;/p&gt;
&lt;p&gt;在配置速率限制服务之前，我们需要解释&lt;strong&gt;动作&lt;/strong&gt;、&lt;strong&gt;描述符&lt;/strong&gt;（键 / 值对）和&lt;strong&gt;描述符列表&lt;/strong&gt;的概念。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9ktuq5l9j32i40u0tbn.jpg&#34; alt=&#34;速率限制概念&#34;&gt;&lt;/p&gt;
&lt;p&gt;在路由或虚拟主机层面的 Envoy 配置中，我们定义了一组&lt;strong&gt;动作&lt;/strong&gt;。每个动作都包含一个速率限制动作的列表。让我们考虑下面的例子，在虚拟主机级别上定义速率限制。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;rate_limits&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header_value_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;get_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;method&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;prefix_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GET&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header_value_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;path&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;path&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;prefix_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header_value_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;method&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;prefix_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;POST&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header_value_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;get_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;method&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;prefix_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GET&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的片段定义了三个独立的动作，其中包含速率限制动作。Envoy 将尝试将请求与速率限制动作相匹配，并生成描述符发送到速率限制服务。如果 Envoy 不能将任何一个速率限制动作与请求相匹配，则不会创建描述符 ——即所有速率限制动作都必须相匹配。&lt;/p&gt;
&lt;p&gt;例如，如果我们收到一个到 &lt;code&gt;/api&lt;/code&gt; 的 GET 请求，第一个动作与两个速率限制动作相匹配；因此会创建一个如下描述符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(&amp;quot;header_match&amp;quot;: &amp;quot;get_request&amp;quot;), (&amp;quot;header_match&amp;quot;: &amp;quot;path&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个动作是不会匹配的。然而，最后一个也会匹配。因此，Envoy 将向速率限制服务发送以下描述符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(&amp;quot;header_match&amp;quot;: &amp;quot;get_request&amp;quot;), (&amp;quot;header_match&amp;quot;: &amp;quot;path&amp;quot;)
(&amp;quot;header_match&amp;quot;: &amp;quot;get_request&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们来看看另一个满足以下要求的客户端配置的例子。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 /users 的 POST 请求被限制在每分钟 10 个请求。&lt;/li&gt;
&lt;li&gt;对 /users 的请求被限制在每分钟 20 个请求。&lt;/li&gt;
&lt;li&gt;带有 &lt;code&gt;dev: true&lt;/code&gt; 头的 /api 请求被限制在每秒 10 个请求的速率。&lt;/li&gt;
&lt;li&gt;向 /api 发出的带有 &lt;code&gt;dev: false&lt;/code&gt; 头的请求被限制在每秒 5 个请求。&lt;/li&gt;
&lt;li&gt;对 /api 的任何其他请求都没有速率限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，这次我们是在路由层面上定义速率限制。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;some_cluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rate_limits&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;generic_key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;users&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header_value_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:method&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;exact_match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;POST&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;generic_key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;users&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;some_cluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rate_limits&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;actions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;generic_key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;descriptor_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;request_headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;header_name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dev&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;descriptor_key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dev_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;http_filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.filters.http.ratelimit&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;typed_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;domain&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;some_domain&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;enable_x_ratelimit_headers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;DRAFT_VERSION_03&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rate_limit_service&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;transport_api_version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;V3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;grpc_service&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;envoy_grpc&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;cluster_name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rate-limit-cluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述配置包含每条路由的 &lt;code&gt;rate_limits&lt;/code&gt; 配置和 &lt;code&gt;envoy. filters.http.ratelimit&lt;/code&gt; 过滤器配置。过滤器的配置指向速率限制服务的上游集群。我们还设置了域名（&lt;code&gt;domain&lt;/code&gt;）和 &lt;code&gt;enabled_x_ratelimit_headers &lt;/code&gt;字段，指定我们要使用 &lt;code&gt;x-ratelimit &lt;/code&gt; 头。我们可以按任意的域名来隔离一组速率限制配置。&lt;/p&gt;
&lt;p&gt;如果我们看一下路由中的速率限制配置，注意到我们是如何拆分动作以匹配我们想要设置的不同速率限制的。例如，我们有一个带有 &lt;code&gt;api&lt;/code&gt; 通用密钥和请求头的动作。然而，在同一个配置中，我们也有一个只设置了通用密钥的动作。这使得我们可以根据这些动作配置不同的速率限制。&lt;/p&gt;
&lt;p&gt;让我们把动作翻译成描述符。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /users --&amp;gt; (&amp;quot;generic_key&amp;quot;: &amp;quot;users&amp;quot;)

POST /users --&amp;gt; (&amp;quot;generic_key&amp;quot;: &amp;quot;users&amp;quot;), (&amp;quot;header_match&amp;quot;: &amp;quot;post_request&amp;quot;)

GET /api 
dev: some_header_value --&amp;gt; (&amp;quot;generic_key&amp;quot;: &amp;quot;api&amp;quot;), (&amp;quot;dev_request&amp;quot;: &amp;quot;some_header_value&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;header_match&lt;/code&gt; 和 &lt;code&gt;request_headers&lt;/code&gt; 之间的区别是，对于后者，我们可以根据特定的头信息值来创建速率限制（例如，&lt;code&gt;dev: true&lt;/code&gt; 或 &lt;code&gt;dev: something&lt;/code&gt;，因为头信息的值成为描述符的一部分）。&lt;/p&gt;
&lt;p&gt;在速率限制服务方面，我们需要开发一个配置，根据 Envoy 发送的描述符来指定速率限制。&lt;/p&gt;
&lt;p&gt;例如，如果我们向 &lt;code&gt;/users&lt;/code&gt; 发送一个 GET 请求，Envoy 会向速率限制服务发送以下描述符。&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;users&amp;quot;)&lt;/code&gt;。然而，如果我们发送一个 POST 请求，描述符列表看起来像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;users&amp;quot;), (&amp;quot;header_match&amp;quot;: &amp;quot;post_request&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;速率限制服务配置是分层次的，允许匹配嵌套描述符。让我们看看上述描述符的速率限制服务配置会是什么样子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;domain&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;some_domain&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;descriptors&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;generic_key&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;users&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;rate_limit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MINUTE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;requests_per_unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;descriptors&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;header_match&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rate_limit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MINUTE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;requests_per_unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;generic_key&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;api&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;descriptors&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dev_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rate_limit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SECOND&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;requests_per_unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dev_request&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rate_limit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SECOND&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;requests_per_unit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们之前在 Envoy 方面的配置中提到了 &lt;code&gt;domain&lt;/code&gt; 值。现在我们可以看看如何使用域名。我们可以在整个代理机群中使用相同的描述符名称，但要用域名来分隔它们。&lt;/p&gt;
&lt;p&gt;让我们看看速率限制服务上的匹配对不同请求是如何工作的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;收到的请求&lt;/th&gt;
&lt;th&gt;生成的描述符&lt;/th&gt;
&lt;th&gt;速率限制&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /users&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;users&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;20 req/min&lt;/code&gt; key &lt;code&gt;users&lt;/code&gt; 与配置中的第一层相匹配。由于配置中的第二层（&lt;code&gt;header_match&lt;/code&gt;）没有包括在描述符中，所以使用了 &lt;code&gt;user&lt;/code&gt; 键的速率限制。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;POST /users&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;users&amp;quot;), (&amp;quot;header_match&amp;quot;: &amp;quot;post_request&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10 req/min&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;发送的描述符和 &lt;code&gt;header_match&lt;/code&gt; 一样匹配&lt;code&gt;用户&lt;/code&gt;，所以使用 &lt;code&gt;header_match描述符&lt;/code&gt;下的速率限制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /api&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;api&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无速率限制&lt;/td&gt;
&lt;td&gt;我们只有 &lt;code&gt;api描述符&lt;/code&gt;的第一级匹配。然而，并没有配置速率限制。为了执行速率限制，我们需要第二级描述符，这些描述符只有在传入的请求中存在 Header&lt;code&gt;dev&lt;/code&gt; 时才会被设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /api&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;dev: true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;api&amp;quot;), (&amp;quot;dev_request&amp;quot;: &amp;quot;true&amp;quot;)&lt;/code&gt; &lt;code&gt;10 req/second&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列表中的第二个描述符与配置中的第二层相匹配（即我们匹配 &lt;code&gt;api&lt;/code&gt;，然后也匹配 &lt;code&gt;dev_request：true&lt;/code&gt;）。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /api&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;dev: false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;api&amp;quot;), (&amp;quot;dev_request&amp;quot;: &amp;quot;false&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5req/second&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列表中的第二个描述符与配置中的第二层相匹配（即我们匹配 &lt;code&gt;api&lt;/code&gt;，然后也匹配 &lt;code&gt;dev_request：true&lt;/code&gt;）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GET /api&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;dev: hello&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(&amp;quot;generic_key&amp;quot;: &amp;quot;api&amp;quot;), (&amp;quot;dev_request&amp;quot;: &amp;quot;hello&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无速率限制&lt;/td&gt;
&lt;td&gt;列表中的第二个描述符与配置中的任何二级描述符都不匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除了我们在上面的例子中使用的动作外，下表显示了我们可以用来创建描述符的其他行为。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;行为名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;source_cluster&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;源集群的速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;destination_cluster&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;目的地集群的速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;request_headers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对请求头的速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remote_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;远程地址的速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;generic_key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对一个通用键的速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;header_value_match&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对请求头的存在进行速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;metadata&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元数据的速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下图总结了这些操作与描述符和速率限制服务上的实际速率限制配置的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gz9ktvzbvyj30s60eqjsl.jpg&#34; alt=&#34;行为、描述符和配置的关系&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;213-本地速率限制&#34;&gt;2.13 本地速率限制&lt;/h1&gt;
&lt;p&gt;本地速率限制过滤器对过滤器链处理的传入连接应用一个&lt;strong&gt;令牌桶&lt;/strong&gt;速率限制。&lt;/p&gt;
&lt;p&gt;令牌桶算法的基础是令牌在桶中的类比。桶里的令牌以一个固定的速度被重新填满。每次收到一个请求或连接时，我们都会检查桶里是否还有令牌。如果有，就从桶中取出一个令牌，然后处理该请求。如果没有剩余的令牌，该请求就会被放弃（即速率限制）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image10.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“3.2847222222222223in”}&lt;/p&gt;
&lt;p&gt;本地速率限制可以在监听器层面或虚拟主机或路由层面进行全局配置，就像全局速率限制一样。我们还可以在同一配置中结合全局和本地速率限制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;token_bucket&lt;/code&gt; 指定了过滤器处理的请求所使用的配置。它包括桶可以容纳的最大数量（&lt;code&gt;max_tokens&lt;/code&gt;），在每个填充间隔（&lt;code&gt;tokens_per_refill&lt;/code&gt;）中增加的令牌数量，以及填充内部（&lt;code&gt;fill_interval&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;下面是一个最多可以容纳 5000 个令牌的桶的配置实例。每隔 30 秒，100 个 tokens 被添加到桶中。这个桶的容量永远不会超过 5000 个 tokens。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;token_bucket:
  max_tokens: 5000
  tokens_per_fill: 100
  fill_interval:30s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了控制令牌桶是在所有工作者之间共享（即每个 Envoy 进程）还是按连接使用，我们可以设置 &lt;code&gt;local_rate_limit_per_downstream_connection&lt;/code&gt; 字段。默认值是 &lt;code&gt;false&lt;/code&gt;，这意味着速率限制被应用于每个 Envoy 进程。&lt;/p&gt;
&lt;p&gt;控制是否启用或强制执行某一部分请求的速率限制的两个设置被称为 &lt;code&gt;filter_enabled &lt;/code&gt;和 &lt;code&gt;filter_enforced&lt;/code&gt;。这两个值在默认情况下都设置为 0%。&lt;/p&gt;
&lt;p&gt;速率限制可以被启用，但不一定对一部分请求强制执行。例如，我们可以对 50% 的请求启用速率限制。然后，在这 50% 的请求中，我们可以强制执行速率限制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image11.jpeg&#34; alt=&#34;img&#34;&gt;{width=“4.847222222222222in” height=“4.222222222222222in”}&lt;/p&gt;
&lt;p&gt;以下配置对所有传入的请求启用并执行速率限制。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;token_bucket:
  max_tokens: 5000
  tokens_per_fill: 100
  fill_interval:30s
filter_enabled:
  default_value:
    numerator: 100
    分母。HUNDRED
filter_enforced:
  default_value:
    分子。 100
    分母。百分之百
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们还可以为限制速率的请求添加请求和响应头信息。我们可以在 &lt;code&gt;request_headers_to_add_when_not_enforced&lt;/code&gt; 字段中提供一个头信息列表，Envoy 将为每个转发到上游的限速请求添加一个请求头信息。请注意，这只会在过滤器启用但未强制执行时发生。&lt;/p&gt;
&lt;p&gt;对于响应头信息，我们可以使用 &lt;code&gt;response_headers_to_add &lt;/code&gt;字段。我们可以提供一个 Header 的列表，这些 Header 将被添加到已被限制速率的请求的响应中。这只有在过滤器被启用或完全强制执行时才会发生。&lt;/p&gt;
&lt;p&gt;如果我们在前面的例子的基础上，这里有一个例子，说明如何在所有速率有限的请求中添加特定的响应头。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;token_bucket:
  max_tokens: 5000
  tokens_per_fill: 100
  fill_interval:30s
filter_enabled:
  default_value:
    numerator: 100
    分母。HUNDRED
filter_enforced:
  default_value:
    分子。 100
    分母。百分之百
response_headers_to_add:
  - append: false
    header:
      key: x-local-rate-limit
      value: &#39;true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以配置本地速率限制器，使所有虚拟主机和路由共享相同的令牌桶。为了在全局范围内启用本地速率限制过滤器（不要与全局速率限制过滤器混淆），我们可以在 &lt;code&gt;http_filters&lt;/code&gt; 列表中为其提供配置。&lt;/p&gt;
&lt;p&gt;比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
http_filters:
- name: envoy.filters.http.local_ratelimit
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.local_ratelimit.v3.LocalRateLimit
    stat_prefix: http_local_rate_limiter
    token_bucket:
      max_tokens: 10000
    ...
- name: envoy.filters.http.router
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们想启用每个路由的本地速率限制，我们仍然需要将过滤器添加到 &lt;code&gt;http_filters&lt;/code&gt; 列表中，而不需要任何配置。然后，在路由配置中，我们可以使用 &lt;code&gt;typed_per_filter_config&lt;/code&gt; 并指定本地速率限制的过滤器配置。&lt;/p&gt;
&lt;p&gt;比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
route_config:
  name: my_route
  virtual_hosts。
  - name: my_service
    域名。[&amp;quot;*&amp;quot;]
    路线。
    - 匹配。
        前缀。/
      路线。
        cluster: some_cluster
      typed_per_filter_config:
        envoy.filters.http.local_ratelimit:
          &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.local_ratelimit.v3.LocalRateLimit
          token_bucket:
              max_tokens: 10000
              tokens_per_fill: 1000
              fill_interval: 1s
            filter_enabled:
              default_value:
                分子。100
                分母。HUNDRED
            filter_enforced:
              default_value:
                分子。100
                分母。HUNDRED
http_filters:
- name: envoy.filters.http.local_ratelimit
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.local_ratelimit.v3.LocalRateLimit
    stat_prefix: http_local_rate_limiter
- name: envoy.filters.http.router
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述配置在 &lt;code&gt;http_filter&lt;/code&gt; 列表中加载了本地速率限制过滤器。我们在路由配置中使用 &lt;code&gt;typed_per_filter_config来配置&lt;/code&gt;它，并以 &lt;code&gt;envoy.filters.http.local_ratelimit的&lt;/code&gt;名字来引用这个过滤器。&lt;/p&gt;
&lt;h2 id=&#34;使用描述符进行局部速率限制&#34;&gt;使用描述符进行局部速率限制&lt;/h2&gt;
&lt;p&gt;就像我们在做全局速率限制时使用描述符一样，我们也可以把它们用于本地每条路由的速率限制。我们需要配置两个部分：路由上的操作和本地速率限制过滤器配置中的描述符列表。&lt;/p&gt;
&lt;p&gt;我们可以用为全局速率限制定义动作的方式为局部速率限制定义动作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
route_config:
  name: my_route
  virtual_hosts。
  - name: my_service
    域名。[&amp;quot;*&amp;quot;]
    路线。
    - 匹配。
        前缀。/
      路线。
        cluster: some_cluster
        rate_limits:
        - 行动。
          - header_value_match:
              descriptor_value: post_request
              headers:
              - name: &amp;quot;:method&amp;quot;
                exact_match:POST
          - header_value_match:
              描述符_值: get_request
              头信息。
              - name: &amp;quot;:method&amp;quot;
                精确匹配。GET
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二部分是编写配置以匹配生成的描述符，并提供令牌桶信息。这在&lt;code&gt;描述符&lt;/code&gt;字段下的速率限制过滤器配置中得到完成。&lt;/p&gt;
&lt;p&gt;比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typed_per_filter_config:
  envoy.filters.http.local_ratelimit:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.local_ratelimit.v3.LocalRateLimit
    stat_prefix: some_stat_prefix
    token_bucket:
      max_tokens: 1000
      tokens_per_fill: 1000
      fill_interval: 60s
    filter_enabled:
    ...
    filter_enforced:
    ...
    描述符。
    - 条目。
      - key: header_match
        值：post_request
      token_bucket:
        max_tokens: 20
        tokens_per_fill: 5
        fill_interval:30s
    - 条目。
      - key: header_match
        value: get_request
      token_bucket:
        max_tokens: 50
        tokens_per_fill: 5
        fill_interval: 20s
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于所有的 POST 请求（即&lt;code&gt;（&amp;quot;header_match&amp;quot;: &amp;quot;post_request&amp;quot;）&lt;/code&gt;），桶被设置为 20 个令牌，它每 30 秒重新填充 5 个令牌。对于所有的 GET 请求，该桶最多可以容纳 50 个令牌，每 20 秒重新填充 5 个令牌。&lt;/p&gt;
&lt;h1 id=&#34;214-速率限制的统计&#34;&gt;2.14 速率限制的统计&lt;/h1&gt;
&lt;p&gt;无论是使用全局还是局部的速率限制，Envoy 都会发出下表中描述的指标。我们可以在配置过滤器时使用 &lt;code&gt;stat_prefix&lt;/code&gt; 字段来设置统计信息的前缀。&lt;/p&gt;
&lt;p&gt;当使用本地速率限制器时，每个度量名称的前缀是 &lt;code&gt;&amp;lt;stat_prefix&amp;gt;.http_local_rate_limit.&amp;lt;metric_name&amp;gt;&lt;/code&gt;，当使用全局速率限制器时，前缀是 &lt;code&gt;cluster.&amp;lt;route_target_cluster&amp;gt;.ratelimit.&amp;lt;metric_name&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;速率限制器 公制名称 描述 当地 &lt;code&gt;启用&lt;/code&gt; 速率限制器被调用的请求总数 本地 / 全球 &lt;code&gt;好的&lt;/code&gt; 来自令牌桶的低于限制的响应总数 当地 &lt;code&gt;速率有限&lt;/code&gt; 没有可用令牌的答复总数（但不一定强制执行） 当地 &lt;code&gt;强制执行&lt;/code&gt; 有速率限制的请求总数（例如，返回 HTTP 429）。 全球 &lt;code&gt;超限&lt;/code&gt; 速率限制服务的超限答复总数 全球 &lt;code&gt;错误&lt;/code&gt; 与速率限制服务联系的错误总数 全球 &lt;code&gt;允许的失败模式&lt;/code&gt; 属于错误但由于 &lt;code&gt;failure_mode_deny &lt;/code&gt;设置而被允许的请求总数&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;30-群组&#34;&gt;3.0 群组&lt;/h1&gt;
&lt;p&gt;在这个模块中，我们将学习集群以及如何管理它们。在 Envoy 的集群配置部分，我们可以配置一些功能，如负载均衡、健康检查、连接池、离群检测等。&lt;/p&gt;
&lt;p&gt;在本模块结束时，你将了解集群和端点是如何工作的，以及如何配置负载均衡策略、异常值检测和断路。&lt;/p&gt;
&lt;h1 id=&#34;31-服务发现&#34;&gt;3.1 服务发现&lt;/h1&gt;
&lt;p&gt;集群可以在配置文件中静态配置，也可以通过集群发现服务（CDS）API 动态配置。每个集群是一个端点的集合，Envoy 需要解析这些端点来发送流量。&lt;/p&gt;
&lt;p&gt;解决端点的过程被称为&lt;strong&gt;服务发现&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;什么是端点&#34;&gt;什么是端点？&lt;/h2&gt;
&lt;p&gt;集群是一个识别特定主机的端点的集合。每个端点都有以下属性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址 (&lt;strong&gt;&lt;code&gt;地址&lt;/code&gt;&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该地址代表上游主机地址。地址的形式取决于集群的类型。对于 STATIC 或 EDS 集群类型，地址应该是一个 IP，而对于 LOGICAL 或 STRICT DNS 集群类型，地址应该是一个通过 DNS 解析的主机名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主机名 (&lt;strong&gt;&lt;code&gt;hostname&lt;/code&gt;&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个与端点相关的主机名。注意，主机名不用于路由或解析地址。它与端点相关联，可用于任何需要主机名的功能，如自动主机重写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;健康检查配置（&lt;strong&gt;&lt;code&gt;health_check_config&lt;/code&gt;&lt;/strong&gt;）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可选的健康检查配置用于健康检查器联系健康检查主机。该配置包含主机名和可以联系到主机以执行健康检查的端口。注意，这个配置只适用于启用了主动健康检查的上游集群。&lt;/p&gt;
&lt;h2 id=&#34;服务发现类型&#34;&gt;服务发现类型&lt;/h2&gt;
&lt;p&gt;有五种支持的服务发现类型 &amp;ndash; 让我们更详细地看看它们。&lt;/p&gt;
&lt;h3 id=&#34;静态-static&#34;&gt;静态 (&lt;code&gt;STATIC&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;静态服务发现类型是最简单的。在配置中，我们为集群中的每个主机指定一个已解决的网络名称。比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    类型。STATIC
    load_assignment:
      cluster_name: my_service_name
      端点。
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，如果我们不提供类型，它默认为 &lt;code&gt;STATIC&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;严格的-dnsstrict_dns&#34;&gt;严格的 DNS（&lt;code&gt;STRICT_DNS）&lt;/code&gt;。&lt;/h3&gt;
&lt;p&gt;通过严格的 DNS，Envoy 不断地、异步地解析集群中定义的 DNS 端点。如果 DNS 查询返回多个 IP 地址，Envoy 假定它们是集群的一部分，并在它们之间进行负载均衡。同样，如果 DNS 查询返回 0 个主机，Envoy 就认为集群没有任何主机。&lt;/p&gt;
&lt;p&gt;关于健康检查的说明 &amp;ndash; 如果多个 DNS 名称解析到同一个 IP 地址，则不共享健康检查。这可能会给上游主机造成不必要的负担，因为 Envoy 会对同一个 IP 地址进行多次健康检查（跨越不同的 DNS 名称）。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;respect_dns_ttl &lt;/code&gt;字段被启用时，我们可以使用 &lt;code&gt;dns_refresh_rate &lt;/code&gt;控制 DNS 名称的连续解析。如果不指定，DNS 刷新率默认为 5000ms。另一个设置（&lt;code&gt;dns_failure_refresh_rate&lt;/code&gt;）控制故障时的刷新频率。如果没有提供，Envoy 使用 &lt;code&gt;dns_refresh_rate&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面是一个 STRICT_DNS 服务发现类型的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    类型。STRICT_DNS
    load_assignment:
      cluster_name: my_service_name
      端点。
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                地址: my-service
                port_value: 8080
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;逻辑-dnslogical_dns&#34;&gt;逻辑 DNS（&lt;code&gt;LOGICAL_DNS）&lt;/code&gt;。&lt;/h3&gt;
&lt;p&gt;逻辑 DNS 服务发现与严格 DNS 类似，它使用异步解析机制。然而，它只使用需要启动新连接时返回的第一个 IP 地址。&lt;/p&gt;
&lt;p&gt;因此，一个逻辑&lt;strong&gt;连接池&lt;/strong&gt;可能包含与各种不同上游主机的物理连接。这些连接永远不会耗尽，即使在 DNS 解析返回零主机的情况下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是连接池？**集群中的每个端点将有一个或多个连接池。例如，根据所支持的上游协议，每个协议可能有一个连接池分配。Envoy 中的每个工作线程也为每个集群维护其连接池。例如，如果 Envoy 有两个线程和一个同时支持 HTTP/1 和 HTTP/2 的集群，将至少有四个连接池。连接池的方式是基于底层线程协议的。对于 HTTP/1.1，连接池根据需要获取端点的连接（最多到断路限制）。当请求变得可用时，它们就被绑定到连接上。 当使用 HTTP/2 时，连接池在一个**连接&lt;/strong&gt;上复用多个请求，最多到 &lt;code&gt;max_concurrent_streams&lt;/code&gt; 和 &lt;code&gt;max_requests_per_connections&lt;/code&gt; 指定的限制。HTTP/2 连接池建立尽可能多的连接，以满足请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;逻辑 DNS 的一个典型用例是用于大规模网络服务。通常使用轮回 DNS，它们在每次查询时返回多个 IP 地址的不同结果。如果我们使用严格的 DNS 解析，Envoy 会认为集群端点在每次内部解析时都会改变，并会耗尽连接池。使用逻辑 DNS，连接将保持活力，直到它们被循环。&lt;/p&gt;
&lt;p&gt;与严格的 DNS 一样，逻辑 DNS 也使用 &lt;code&gt;respect_dns_ttl &lt;/code&gt;和 &lt;code&gt;dns_refresh_rate &lt;/code&gt;字段来配置 DNS 刷新率。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    类型。LOGICAL_DNS
    load_assignment:
      cluster_name: my_service_name
      端点。
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                地址: my-service
                port_value: 8080
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;端点发现服务eds&#34;&gt;端点发现服务（&lt;code&gt;EDS）&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Envoy 可以使用端点发现服务来获取集群的端点。通常情况下，这是首选的服务发现机制。Envoy 获得每个上游主机的显式知识（即不需要通过 DNS 解析的负载均衡器进行路由）。每个端点都可以携带额外的属性，可以告知 Envoy 负载均衡的权重和金丝雀状态区，等等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    类型。EDS
    eds_cluster_config:
      eds_config:
        ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在 [动态配置和 xDS] 一章中更详细地解释动态配置。&lt;/p&gt;
&lt;h3 id=&#34;原始目的地original_dst&#34;&gt;原始目的地（&lt;code&gt;ORIGINAL_DST）&lt;/code&gt;。&lt;/h3&gt;
&lt;p&gt;当与 Envoy 的连接通过 iptables REDIRECT 或 TPROXY 目标或与代理协议的连接时，我们使用原来的目标集群类型。&lt;/p&gt;
&lt;p&gt;在这种情况下，请求被转发到重定向元数据（例如，使用 &lt;code&gt;x-envoy-original-dst-host&lt;/code&gt; 头）地址的上游主机，而无需任何配置或上游主机发现。&lt;/p&gt;
&lt;p&gt;当上游主机的连接闲置时间超过 &lt;code&gt;cleanup_interval&lt;/code&gt; 字段中指定的时间（默认为 5000 毫秒）时，这些连接会被汇集起来并被刷新。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;集群。
  - name: original_dst_cluster
    类型。ORIGINAL_DST
    lb_policy。original_dst_lb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ORIGINAL_DST 集群类型可以使用的唯一负载均衡策略是 ORIGINAL_DST_LB 策略。&lt;/p&gt;
&lt;p&gt;除了上述服务发现机制外，Envoy 还支持自定义集群发现机制。我们可以使用 &lt;code&gt;cluster_type&lt;/code&gt; 字段配置自定义的发现机制。&lt;/p&gt;
&lt;p&gt;Envoy 支持两种类型的健康检查，主动和被动。我们可以同时使用这两种类型的健康检查。在主动健康检查中，Envoy 定期向端点发送请求以检查其状态。使用被动健康检查，Envoy 监测端点如何响应连接。它使 Envoy 甚至在主动健康检查将其标记为不健康之前就能检测到一个不健康的端点。Envoy 的被动健康检查是通过离群检测实现的。&lt;/p&gt;
&lt;h1 id=&#34;32-主动健康检查&#34;&gt;3.2 主动健康检查&lt;/h1&gt;
&lt;p&gt;Envoy 支持端点上不同的主动健康检查方法。HTTP、TCP、gRPC 和 Redis 健康检查。健康检查方法可以为每个集群单独配置。我们可以通过集群配置中的 &lt;code&gt;health_checks&lt;/code&gt; 字段来配置健康检查。&lt;/p&gt;
&lt;p&gt;无论选择哪种健康检查方法，都需要定义几个常见的配置设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时&lt;/strong&gt;（&lt;code&gt;timeout&lt;/code&gt;）表示分配给等待健康检查响应的时间。如果在这个字段中指定的时间值内没有达到响应，健康检查尝试将被视为失败。&lt;strong&gt;间隔&lt;/strong&gt;指定健康检查之间的时间节奏。例如，5 秒的间隔将每 5 秒触发一次健康检查。&lt;/p&gt;
&lt;p&gt;其他两个必要的设置可用于确定一个特定的端点何时被认为是健康或不健康的。&lt;code&gt;healthy_threshold&lt;/code&gt; 指定在一个端点被标记为健康之前所需的 &amp;ldquo;健康&amp;rdquo; 健康检查（例如，HTTP 200 响应）的数量。&lt;code&gt;unhealthy_threshold&lt;/code&gt; 的作用与此相同，但是对于 &amp;quot; 不健康 &amp;quot; 的健康检查，它指定了在一个端点被标记为不健康之前所需的不健康健康检查的数量。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 健康检查&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Envoy 向端点发送一个 HTTP 请求。如果端点回应的是 HTTP 200，Envoy 认为它是健康的。200 响应是默认的响应，被认为是健康响应。使用 &lt;code&gt;expected_statuses&lt;/code&gt; 字段，我们可以通过提供一个被认为是健康的 HTTP 状态的范围来进行自定义。&lt;/p&gt;
&lt;p&gt;如果端点以 HTTP 503 响应，&lt;code&gt;unhealthy_threshold&lt;/code&gt; 被忽略，并且端点立即被认为是不健康的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    health_checks:
      - timeout:1s
        间隔：0.25s
        unhealthy_threshold: 5
        healthy_threshold: 2
        http_health_check:
          路径。&amp;quot;/health&amp;quot;
          expected_statuses:
            - start: 200
              结束。 299
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如，上面的片段定义了一个 HTTP 健康检查，Envoy 将向集群中的端点发送一个 &lt;code&gt;/health&lt;/code&gt; 路径的 HTTP 请求。Envoy 每隔 0.25s（&lt;code&gt;间隔&lt;/code&gt;）发送一次请求，在超时前等待 1s（&lt;code&gt;超时&lt;/code&gt;）。要被认为是健康的，端点必须以 200 和 299 之间的状态（&lt;code&gt;expected_statuses&lt;/code&gt;）响应两次（&lt;code&gt;healthy_threshold&lt;/code&gt;）。端点需要以任何其他状态代码响应五次（&lt;code&gt;unhealthy_threshold&lt;/code&gt;）才能被认为是不健康的。此外，如果端点以 HTTP 503 响应，它将立即被视为不健康（&lt;code&gt;unhealthy_threshold&lt;/code&gt; 设置被忽略）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TCP 健康检查&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们指定一个 Hex 编码的有效载荷（例如：&lt;code&gt;68656C6C6F&lt;/code&gt;），并将其发送给终端。如果我们设置了一个空的有效载荷，Envoy 将进行仅连接的健康检查，它只尝试连接到端点，如果连接成功就认为是成功的。&lt;/p&gt;
&lt;p&gt;除了被发送的有效载荷外，我们还需要指定响应。Envoy 将对响应进行模糊匹配，如果响应与请求匹配，则认为该端点是健康的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    health_checks:
      - timeout:1s
        间隔：0.25s
        unhealthy_threshold: 1
        healthy_threshold: 1
        tcp_health_check:
          send:
            text:&amp;quot;68656C6C6F&amp;quot;
          接收。
            - text:&amp;quot;68656C6C6F&amp;quot;
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;gRPC 健康检查&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本健康检查遵循 grpc.health.v1.Health 健康检查协议。查看 GRPC health checking protocol document 以了解更多关于其工作方式的信息。&lt;/p&gt;
&lt;p&gt;我们可以设置的两个可选的配置值是&lt;code&gt;服务名称&lt;/code&gt;和&lt;code&gt;权限&lt;/code&gt;。服务名称是设置在 grpc.health.v1.Health 的 HealthCheckRequest 的&lt;code&gt;服务&lt;/code&gt;字段中的值。授权是&lt;code&gt;:authority头&lt;/code&gt;的值。如果它是空的，Envoy 会使用集群的名称。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    health_checks:
      - timeout:1s
        间隔：0.25s
        unhealthy_threshold: 1
        healthy_threshold: 1
        grpc_health_check:{}
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;Redis 健康检查&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redis 健康检查向端点发送一个 Redis PING 命令，并期待一个 PONG 响应。如果上游的 Redis 端点回应的不是 PONG，就会立即导致健康检查失败。我们也可以指定一个&lt;code&gt;键&lt;/code&gt;，Envoy 会执行 &lt;code&gt;EXIST &amp;lt;键&amp;gt;&lt;/code&gt; 命令，而不是 PING 命令。如果 Redis 的返回值是 0（即密钥不存在），那么该端点就是健康的。任何其他响应都被视为失败。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    health_checks:
      - timeout:1s
        间隔：0.25s
        unhealthy_threshold: 1
        healthy_threshold: 1
        redis_health_check:
          key: &amp;quot;维护&amp;quot;
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的例子检查键 &amp;ldquo;维护&amp;rdquo;（如 &lt;code&gt;EXIST维护&lt;/code&gt;），如果键不存在，健康检查就通过。&lt;/p&gt;
&lt;h2 id=&#34;http-健康检查过滤器&#34;&gt;HTTP 健康检查过滤器&lt;/h2&gt;
&lt;p&gt;HTTP 健康检查过滤器可以用来限制产生的健康检查流量。过滤器可以在不同的操作模式下运行，控制流量是否被传递给本地服务（即不传递或传递）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非穿透式模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当以非直通模式运行时，健康检查请求永远不会被发送到本地服务。Envoy 会以 HTTP 200 或 HTTP 503 进行响应，这取决于服务器当前的耗尽状态。&lt;/p&gt;
&lt;p&gt;非直通模式的一个变种是，如果上游集群中至少有指定比例的端点可用，则返回 HTTP 200。端点的百分比可以用 &lt;code&gt;cluster_min_healthy_percentages&lt;/code&gt; 字段来配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  pass_through_mode: false
  cluster_min_healthy_percentages:
    值: 15
...
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;透过模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在直通模式下，Envoy 将每个健康检查请求传递给本地服务。该服务可以用 HTTP 200 或 HTTP 503 来响应。&lt;/p&gt;
&lt;p&gt;通行模式的另一个设置是使用缓存。Envoy 将健康检查请求传递给服务，并将结果缓存一段时间（&lt;code&gt;cache_time&lt;/code&gt;）。任何后续的健康检查请求将使用缓存起来的值。一旦缓存失效，下一个健康检查请求会再次传递给服务。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  pass_through_mode: true
  cache_time: 5m
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的片段启用了直通模式，缓存在 5 分钟内到期。&lt;/p&gt;
&lt;h1 id=&#34;33-离群点检测&#34;&gt;3.3 离群点检测&lt;/h1&gt;
&lt;p&gt;第二种类型的健康检查被称为&lt;strong&gt;被动健康检查&lt;/strong&gt;。被称为&lt;strong&gt;离群点检测的&lt;/strong&gt;过程是一种被动的健康检查形式。说它 &amp;ldquo;被动&amp;rdquo; 是因为 Envoy 没有 &amp;quot; 主动 &amp;quot; 发送任何请求来确定端点的健康状况。相反，Envoy 观察不同端点的性能，以确定它们是否健康。如果端点被认为是不健康的，它们就会被移除或从健康负载均衡池中弹出。&lt;/p&gt;
&lt;p&gt;端点的性能是通过连续失败、时间成功率、延迟等来确定的。&lt;/p&gt;
&lt;p&gt;为了使离群值检测发挥作用，我们需要过滤器来报告错误、超时和重置。目前，有四个过滤器支持离群检测。HTTP 路由器、TCP 代理、Redis 代理和 Thrift 代理。&lt;/p&gt;
&lt;p&gt;检测到的错误根据起源点分为两类。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;来自外部的错误&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些错误是针对交易的，发生在上游服务器上，是对收到的请求的回应。这些错误是在 Envoy 成功连接到上游主机后产生的。例如，端点响应的是 HTTP 500。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地产生的错误&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Envoy 产生这些错误是为了应对中断或阻止与上游主机通信的事件，例如超时、TCP 重置、无法连接到指定端口等。&lt;/p&gt;
&lt;p&gt;这些错误也取决于过滤器的类型。例如，HTTP 路由器过滤器可以检测两种错误。相反，TCP 代理过滤器不理解 TCP 层以上的任何协议，只报告本地产生的错误。&lt;/p&gt;
&lt;p&gt;在配置中，我们可以指定是否可以区分本地和外部产生的错误（使用 &lt;code&gt;split_external_local_origin_errors&lt;/code&gt; 字段）。这允许我们通过单独的计数器跟踪错误，并配置离群点检测，对本地产生的错误做出反应，而忽略外部产生的错误，反之亦然。默认模式是错误不被分割（即 &lt;code&gt;split_external_local_origin_errors&lt;/code&gt; 为 false）。&lt;/p&gt;
&lt;h2 id=&#34;端点射出&#34;&gt;端点射出&lt;/h2&gt;
&lt;p&gt;当一个端点被确定为异常点时，Envoy 将检查它是否需要从健康负载均衡池中弹出。如果没有端点被弹出，Envoy 会立即弹出离群（不健康的）端点。否则，它会检查 &lt;code&gt;max_ejection_percent&lt;/code&gt; 设置，确保被弹出的端点数量低于配置的阈值。如果超过 &lt;code&gt;max_ejection_percent&lt;/code&gt; 的主机已经被弹出，该端点就不会被弹出了。&lt;/p&gt;
&lt;p&gt;每个端点被弹出的时间是预先确定的。我们可以使用 &lt;code&gt;base_ejection_time&lt;/code&gt; 值来配置弹出时间。这个值要乘以端点连续被弹出的次数。如果端点继续失败，他们会被弹出的时间越来越长。这里的第二个设置叫做 &lt;code&gt;max_ejection_time &lt;/code&gt;。它控制端点被弹出的最长时间 &amp;ndash; 也就是说，端点被弹出的最长时间在 &lt;code&gt;max_ejection_time&lt;/code&gt; 值中被指定。&lt;/p&gt;
&lt;p&gt;Envoy 在&lt;code&gt;间隔&lt;/code&gt;字段中指定的间隔时间内检查每个端点的健康状况。每检查一次端点是否健康，弹出的倍数就会被递减。剔除时间过后，端点会自动返回到健康的负载均衡池中。&lt;/p&gt;
&lt;p&gt;现在我们了解了离群点检测和端点弹出的基本知识，让我们看看不同的离群点检测方法。&lt;/p&gt;
&lt;h2 id=&#34;检测类型&#34;&gt;检测类型&lt;/h2&gt;
&lt;p&gt;Envoy 支持以下五种异常值检测类型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连续的 5xx&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种检测类型考虑到了所有产生的错误。Envoy 内部将非 HTTP 过滤器产生的任何错误映射为 HTTP 5xx 代码。&lt;/p&gt;
&lt;p&gt;当错误类型被分割时，该检测类型只计算外部产生的错误，忽略本地产生的错误。如果端点是一个 HTTP 服务器，只考虑 5xx 类型的错误。&lt;/p&gt;
&lt;p&gt;如果一个端点返回一定数量的 5xx 错误，该端点会被弹出。&lt;code&gt;consecutive_5xx&lt;/code&gt; 值控制连续 5xx 错误的数量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    outlier_detection:
      间隔。5s
      base_ejection_time: 15s
      最大弹射时间: 50s
      最大弹射率。 30
      连续_5xx。 10
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述离群检测将弹出一个失败的端点，一旦它失败 10 次。失败的端点会被弹出 15 秒（&lt;code&gt;base_ejection_time&lt;/code&gt;）。在多次弹出的情况下，单个端点被弹出的最长时间是 50 秒（&lt;code&gt;max_ejection_time&lt;/code&gt;）。在一个失败的端点被弹出之前，Envoy 会检查是否有超过 30% 的端点已经被弹出（&lt;code&gt;max_ejection_percent&lt;/code&gt;），并决定是否弹出这个失败的端点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连续的网关故障&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;连续网关故障类型与连续 5xx 类型类似。它考虑 5xx 错误的一个子集，称为 &amp;ldquo;网关错误&amp;rdquo;（如 502、503 或 504 状态代码）和本地源故障，如超时、TCP 复位等。&lt;/p&gt;
&lt;p&gt;这种检测类型考虑了分裂模式下的网关错误，并且只由 HTTP 过滤器支持。连续错误的数量可通过 &lt;code&gt;contriable_gateway_failure&lt;/code&gt; 字段进行配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    outlier_detection:
      间隔。5s
      base_ejection_time: 15s
      最大弹射时间: 50s
      最大弹射率。 30
      连续_网关_失败。 10
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;连续的局部起源失败&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种类型只在分割模式下启用（&lt;code&gt;split_external_local_origin_errors&lt;/code&gt; 为 true），它只考虑本地产生的错误。连续失败的数量可以通过 &lt;code&gt;contriable_local_origin_failure&lt;/code&gt; 字段进行配置。如果没有提供，它默认为 5。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  集群。
  - name: my_cluster_name
    outlier_detection:
      间隔。5s
      base_ejection_time: 15s
      最大弹射时间: 50s
      最大弹射率。 30
      连续_本地_源头_失败。 10
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;成功率&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;成功率异常点检测汇总了集群中每个端点的成功率数据。基于成功率，它将在给定的时间间隔内弹出端点。在默认模式下，所有的错误都被考虑，而在分割模式下，外部和本地产生的错误被分别处理。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;success_rate_request_volume&lt;/code&gt; 值，我们可以设置最小请求量。如果请求量小于该字段中指定的请求量，将不计算该主机的成功率。同样地，我们可以使用 &lt;code&gt;success_rate_minimum_hosts&lt;/code&gt; 来设置具有最小要求的请求量的端点数量。如果具有最小要求的请求量的端点数量少于 &lt;code&gt;success_rate_minimum_hosts&lt;/code&gt; 中设置的值，Envoy 将不会进行离群检测。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;成功率_stdev_因子用于&lt;/code&gt;确定弹出阈值。弹射阈值是平均成功率和该系数与平均成功率标准差的乘积之间的差。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;平均值 - (stdev * success_rate_stdev_factor)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个系数被除以一千，得到一个双数。也就是说，如果想要的系数是 1.9，那么运行时间值应该是 1900。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;失败率&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;失败率异常点检测与成功率类似。不同的是，它不依赖于整个集群的平均成功率。相反，它将该值与用户在 &lt;code&gt;failure_percentage_threshold &lt;/code&gt;字段中配置的阈值进行比较。如果某个主机的故障率大于或等于这个值，该主机就会被弹出。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;failure_percentage_minimum_hosts&lt;/code&gt; 和 &lt;code&gt;failure_percentage_request_volume&lt;/code&gt; 配置最小主机和请求量。&lt;/p&gt;
&lt;h1 id=&#34;34-断路器&#34;&gt;3.4 断路器&lt;/h1&gt;
&lt;p&gt;断路是一种重要的模式，可以帮助服务的恢复性。断路模式通过控制和管理对故障服务的访问来防止额外的故障。它允许我们快速失败，并尽快向下游施加背压。&lt;/p&gt;
&lt;p&gt;让我们看一个定义断路的片段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  集群。
  - name: my_cluster_name
  ...
    circuit_breakers:
      thresholds:
        - 优先级。DEFAULT
          max_connections:1000
        - 优先级：高
          max_requests: 2000
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以为每条路由的优先级分别配置断路器的阈值。例如，较高优先级的路由应该有比默认优先级更高的阈值。如果超过了任何阈值，断路器就会跳闸，下游主机就会收到 HTTP 503 响应。&lt;/p&gt;
&lt;p&gt;我们可以用多种选项来配置断路器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最大连接数（&lt;code&gt;max_connections&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;指定 Envoy 与集群中所有端点的最大连接数。如果超过这个数字，断路器会跳闸，并增加集群的&lt;code&gt;上游_cx_overflow&lt;/code&gt; 指标。默认值是 1024。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最大的未决请求（&lt;code&gt;max_pending_requests）&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;指定在等待就绪的连接池连接时被排队的最大请求数。当超过该阈值时，Envoy 会增加集群的 &lt;code&gt;upstream_rq_pending_overflow&lt;/code&gt; 统计。默认值是 1024。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最大请求（&lt;code&gt;max_requests&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;指定 Envoy 向集群中所有端点发出的最大并行请求数。默认值是 1024。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最大重试（&lt;code&gt;max_retries）&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;指定 Envoy 允许给集群中所有终端的最大并行重试次数。默认值是 3，如果这个断路器溢出，&lt;code&gt;上游_rq_retry_overflow&lt;/code&gt; 计数器就会递增。&lt;/p&gt;
&lt;p&gt;作为选择，我们可以将断路器与重试预算（&lt;code&gt;retry_budget&lt;/code&gt;）相结合。通过指定重试预算，我们可以将并发重试限制在活动请求的数量上。&lt;/p&gt;
&lt;h1 id=&#34;35-负载均衡&#34;&gt;3.5 负载均衡&lt;/h1&gt;
&lt;p&gt;负载均衡是一种在单个上游集群的多个端点之间分配流量的方式。在众多端点之间分配流量的原因是为了最好地利用可用资源。&lt;/p&gt;
&lt;p&gt;为了实现资源的最有效利用，Envoy 提供了不同的负载均衡策略，可以分为两组：&lt;strong&gt;全局负载均衡&lt;/strong&gt;和&lt;strong&gt;分布式负载均衡&lt;/strong&gt;。不同的是，在全局负载均衡中，我们使用单一的控制平面来决定端点之间的流量分配。Envoy 决定负载如何分配（例如，使用主动健康检查、分区感知路由、负载均衡策略）。&lt;/p&gt;
&lt;p&gt;在多个端点之间分配负载的技术之一被称为&lt;strong&gt;一致散列&lt;/strong&gt;。服务器使用请求的一部分来创建一个哈希值来选择一个端点。在模数散列中，散列值被认为是一个巨大的数字。为了得到发送请求的端点索引，我们将散列值与可用端点的数量相乘（&lt;code&gt;index=hash % endpointCount&lt;/code&gt;）。如果端点的数量是稳定的，这种方法效果很好。然而，如果端点被添加或删除（即它们不健康，我们扩大或缩小它们的规模，等等），大多数请求将在一个与以前不同的端点上结束。&lt;/p&gt;
&lt;p&gt;一致性散列是一种方法，每个端点根据某些属性被分配多个有价值的值。然后，每个请求被分配到具有最接近哈希值的端点。这种方法的价值在于，当我们添加或删除端点时，大多数请求最终会被分配到与之前相同的端点。拥有这种 &amp;ldquo;粘性&amp;rdquo; 是有帮助的，因为它不会干扰端点持有的任何缓存。&lt;/p&gt;
&lt;h2 id=&#34;负载均衡政策&#34;&gt;负载均衡政策&lt;/h2&gt;
&lt;p&gt;Envoy 使用其中一个负载均衡策略来选择一个端点来发送流量。负载均衡策略是可配置的，可以为每个上游集群分别指定。请注意，负载均衡只在健康的端点上执行。如果没有定义主动或被动的健康检查，则假定所有端点都是健康的。&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;lb_policy&lt;/code&gt; 字段和其他针对所选策略的字段来配置负载均衡策略。&lt;/p&gt;
&lt;h3 id=&#34;加权轮回制默认&#34;&gt;加权轮回制（默认）&lt;/h3&gt;
&lt;p&gt;加权轮回（&lt;code&gt;ROUND_ROBIN&lt;/code&gt;）以轮回顺序选择端点。如果端点是加权的，那么就会使用加权的轮回时间表。这个策略给我们提供了一个可预测的请求在所有端点的分布。权重较高的端点将在轮转中出现得更频繁，以实现有效的加权。&lt;/p&gt;
&lt;h3 id=&#34;加权的最小请求&#34;&gt;加权的最小请求&lt;/h3&gt;
&lt;p&gt;加权最小请求（&lt;code&gt;LEAST_REQUEST&lt;/code&gt;）算法取决于分配给端点的权重。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果所有的端点权重相等&lt;/strong&gt;，算法会随机选择 N 个可用的端点（&lt;code&gt;choice_count&lt;/code&gt;），并挑选出活动请求最少的一个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果端点的权重不相等&lt;/strong&gt;，该算法就会转入一种模式，即使用加权的循环时间表，其中的权重是根据选择时端点的请求负荷动态调整。&lt;/p&gt;
&lt;p&gt;以下公式用于动态计算权重。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;weight = load_balancing_weight / (active_requests + 1)^active_request_bias
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;active_request_bias&lt;/code&gt; 是可配置的（默认为 1.0）。主动请求偏差越大，主动请求就越积极地降低有效权重。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;active_request_bias&lt;/code&gt; 被设置为 0，那么算法的行为就像轮回一样，在挑选时忽略了活动请求数。&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;least_request_lb_config&lt;/code&gt; 字段来设置加权最小请求的可选配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  lb_policy:最短请求时间（LEAST_REQUEST
  least_request_lb_config:
    choice_count:5
    active_request_bias: 0.5
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;环状散列&#34;&gt;环状散列&lt;/h3&gt;
&lt;p&gt;环形散列（或模数散列）算法（&lt;code&gt;RING_HASH&lt;/code&gt;）实现了对端点的一致散列。每个端点地址（默认设置）都被散列并映射到一个环上。Envoy 通过散列一些请求属性，并在环上顺时针找到最近的对应端点，将请求路由到一个端点。散列键默认为端点地址；然而，它可以使用 &lt;code&gt;hash_key&lt;/code&gt; 字段改变为任何其他属性。&lt;/p&gt;
&lt;p&gt;我们可以通过指定最小（&lt;code&gt;minimum_ring_size&lt;/code&gt;）和最大（&lt;code&gt;maximum_ring_size&lt;/code&gt;）的环形哈希算法，并使用统计量（&lt;code&gt;min_hashes_per_host&lt;/code&gt; 和 &lt;code&gt;max_hashes_per_host&lt;/code&gt;）来确保良好的分布。环的大小越大，请求的分布就越能反映出所需的权重。最小环大小默认为 1024 个条目（限制在 8M 个条目），而最大环大小默认为 8M（限制在 8M）。&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;ring_hash_lb_config&lt;/code&gt; 字段设置环形哈希的可选配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  lb_policy。戒指_HASH
  ring_hash_lb_config:
    最小环数: 2000
    最大环数: 10000
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;磁悬浮&#34;&gt;磁悬浮&lt;/h3&gt;
&lt;p&gt;与环形散列算法一样，磁悬浮（&lt;code&gt;MAGLEV&lt;/code&gt;）算法也实现了对端点的一致散列。该算法产生一个查找表，允许在一个恒定的时间内找到一个项目。磁悬浮的设计是为了比环形哈希算法的查找速度更快，并且使用更少的内存。你可以在文章中阅读更多关于它的内容 Maglev: A Fast and Reliable Software Network Load Balancer.&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;maglev_lb_config&lt;/code&gt; 字段来设置磁悬浮算法的可选配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
  lb_policy:磁悬浮
  maglev_lb_config:
    table_size: 69997
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认的表大小是 65537，但它可以被设置为任何素数，只要它不大于 5000011。&lt;/p&gt;
&lt;h3 id=&#34;原定目的地&#34;&gt;原定目的地&lt;/h3&gt;
&lt;p&gt;原始目的地是一个特殊用途的负载均衡器，只能与原始目的地集群一起使用。我们在谈到原始目的地集群类型时已经提到了原始目的地负载均衡器。&lt;/p&gt;
&lt;h3 id=&#34;随机&#34;&gt;随机&lt;/h3&gt;
&lt;p&gt;顾名思义，随机（&lt;code&gt;RANDOM&lt;/code&gt;）算法会挑选一个可用的随机端点。如果你没有配置主动健康检查策略，随机算法的表现比轮回算法更好。&lt;/p&gt;
&lt;h1 id=&#34;40-动态配置概述&#34;&gt;4.0 动态配置概述&lt;/h1&gt;
&lt;p&gt;在本模块中，我们将学习如何使用动态配置来配置 Envoy 代理。到现在为止，我们一直在使用静态配置。本模块将教我们如何在运行时从文件系统或通过网络使用发现服务为单个资源提供配置。&lt;/p&gt;
&lt;p&gt;在本模块结束时，你将了解静态和动态配置之间的区别。&lt;/p&gt;
&lt;h1 id=&#34;41-动态配置&#34;&gt;4.1 动态配置&lt;/h1&gt;
&lt;p&gt;Envoy 的强大功能之一是支持动态配置。到现在为止，我们一直在使用静态配置。我们使用 &lt;code&gt;static_resources&lt;/code&gt; 字段将监听器、集群、路由和其他资源指定为静态资源。&lt;/p&gt;
&lt;p&gt;当使用动态配置时，我们不需要重新启动 Envoy 进程就可以生效。相反，Envoy 通过从磁盘或网络上的文件读取配置，动态地重新加载配置。动态配置使用所谓的&lt;strong&gt;发现服务 API&lt;/strong&gt;，指向配置的特定部分。这些 API 也被统称为 &lt;strong&gt;xDS&lt;/strong&gt;。当使用 xDS 时，Envoy 调用外部基于 gRPC/REST 的配置供应商，这些供应商实现了发现服务 API 来检索配置。&lt;/p&gt;
&lt;p&gt;外部基于 gRPC/REST 的配置提供者也被称为&lt;strong&gt;控制平面&lt;/strong&gt;。当使用磁盘上的文件时，我们不需要控制平面。Envoy 提供了控制平面的 Golang 实现，但是 Java 和其他控制平面的实现也被使用。&lt;/p&gt;
&lt;p&gt;Envoy 内部有多个发现服务 API。所有这些在下表中都有描述。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;发现服务名称 描述 监听器发现服务（LDS） 使用 LDS，Envoy 可以在运行时发现监听器，包括所有的过滤器堆栈、HTTP 过滤器和对 RDS 的引用。 扩展配置发现服务（ECDS） 使用 ECDS，Envoy 可以独立于监听器获取扩展配置（例如，HTTP 过滤器配置）。 路由发现服务（RDS） 使用 RDS，Envoy 可以在运行时发现 HTTP 连接管理器过滤器的整个路由配置。与 EDS 和 CDS 相结合，我们可以实现复杂的路由拓扑结构。 虚拟主机发现服务（VHDS） 使用 VHDS 允许 Envoy 从路由配置中单独请求虚拟主机。当路由配置中有大量的虚拟主机时，就可以使用这个功能。 范围广泛的路由发现服务（SRDS） 使用 SRDS，我们可以把路由表分解成多个部分。当我们有大的路由表时，就可以使用这个 API。 集群发现服务（CDS） 使用 CDS，Envoy 可以发现上游集群。Envoy 将通过排空和重新连接所有现有的连接池来优雅地添加、更新或删除集群。Envoy 在初始化时不必知道所有的集群，因为我们可以在以后使用 CDS 配置它们。 端点发现服务（EDS） 使用 EDS，Envoy 可以发现上游集群的成员。 秘密发现服务（SDS） 使用 SDS，Envoy 可以为其监听器发现秘密（证书和私钥，TLS 会话票密钥），并为对等的证书验证逻辑进行配置。 运行时发现服务（RTDS） 使用 RTDS，Envoy 可以动态地发现运行时层。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;聚合发现服务（ADS）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表中的发现服务是独立的，有不同的 gRPC/REST 服务名称。使用聚合发现服务（ADS），我们可以使用一个单一的 gRPC 服务，在一个 gRPC 流中支持所有的资源类型（监听器、路由、集群&amp;hellip;）。ADS 还能确保不同资源的更新顺序正确。请注意，ADS 只支持 gRPC。如果没有 ADS，我们就需要协调其他 gRPC 流来实现正确的更新顺序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Delta gRPC xDS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每次我们发送资源更新时，我们必须包括所有的资源。例如，每次 RDS 更新必须包含每条路由。如果我们不包括一个路由，Envoy 会认为该路由已被删除。这样做更新会导致很高的带宽和计算成本，特别是当有大量的资源在网络上被发送时。Envoy 支持 xDS 的 delta 变体，我们可以只包括我们想添加 / 删除 / 更新的资源，以改善这种情况。&lt;/p&gt;
&lt;h1 id=&#34;42-来自文件系统的动态配置&#34;&gt;4.2 来自文件系统的动态配置&lt;/h1&gt;
&lt;p&gt;动态提供配置的一种方式是通过指向文件系统上的文件。为了使动态配置发挥作用，我们需要在&lt;code&gt;节点&lt;/code&gt;字段下提供信息。如果我们可能有多个 Envoy 代理指向相同的配置文件，那么节点字段是用来识别一个特定的 Envoy 实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image12.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“3.2847222222222223in”}&lt;/p&gt;
&lt;p&gt;为了指向动态资源，我们可以使用 &lt;code&gt;dynamic_resources&lt;/code&gt; 字段来告诉 Envoy 在哪里可以找到特定资源的动态配置。比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;节点。
  cluster: my-cluster
  id: some-id

dynamic_resources:
  lds_config:
    path:/etc/envoy/lds.yaml
  cds_config:
    路径。/etc/envoy/cds.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的片段是一个有效的 Envoy 配置。如果我们把 LDS 和 CDS 作为静态资源来提供，它们的单独配置将非常相似。唯一不同的是，我们必须指定资源类型和版本信息。下面是 CDS 配置的一个片段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version_info:&amp;quot;0&amp;quot;
资源。
- &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.config.cluster.v3.Cluster
  name: instance_1
  connect_timeout:5s
  load_assignment:
    cluster_name: instance_1
    endpoints:
    - lb_endpoints:
      - endpoint:
          address:
            socket_address:
              address: 127.0.0.1
              port_value: 3030
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们想使用 EDS 为集群提供端点，我们可以这样写上面的配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version_info:&amp;quot;0&amp;quot;
资源。
- &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.config.cluster.v3.Cluster
  name: instance_1
  类型。EDS
  eds_cluster_config:
    eds_config:
      path:/etc/envoy/eds.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外，注意我们已经把集群的类型设置为 &lt;code&gt;EDS&lt;/code&gt;。EDS 的配置会是这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version_info:&amp;quot;0&amp;quot;
资源。
- &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment
  cluster_name: instance_1
  endpoints:
  - lb_endpoints:
    - endpoint:
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 3030
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当任何一个文件被更新时，Envoy 会自动重新加载配置。如果配置无效，Envoy 会输出错误，但会保持现有（工作）配置的运行。&lt;/p&gt;
&lt;h1 id=&#34;43-来自控制平面的动态配置&#34;&gt;4.3 来自控制平面的动态配置&lt;/h1&gt;
&lt;p&gt;使用控制平面来更新 Envoy 比使用文件系统的配置更复杂。我们必须创建我们的控制平面，实现发现服务接口。有一个 xDS 服务器实现的简单例子 here. 这个例子显示了如何实现不同的发现服务，并运行 Envoy 连接的 gRPC 服务器的实例来检索配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image13.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“3.714583333333333in”}&lt;/p&gt;
&lt;p&gt;Envoy 方面的动态配置与文件系统的配置类似。这一次，不同的是，我们提供了实现发现服务的 gRPC 服务器的位置。我们通过静态资源指定一个集群来做到这一点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
dynamic_resources:
  lds_config:
    resource_api_version:V3
    api_config_source:
      api_type:GRPC
      transport_api_version:V3
      grpc_services:
        - envoy_grpc:
            cluster_name: xds_cluster
  cds_config:
    resource_api_version:V3
    api_config_source:
      api_type:GRPC
      transport_api_version:V3
      grpc_services:
        - envoy_grpc:
            cluster_name: xds_cluster

static_resources:
  Clusters:
  - 名称: xds_cluster
    类型。STATIC
    load_assignment。
      cluster_name: xds_cluster
      端点。
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                地址。127.0.0.1
                port_value: 9090
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;控制平面不需要在 Envoy 概念上操作。它可以抽象出配置。它也可以使用图形用户界面或不同的 YAML、XML 或任何其他配置文件来收集用户的输入。重要的部分是，无论高级别配置是如何进入控制平面的，它都需要被翻译成 Envoy xDS API。&lt;/p&gt;
&lt;p&gt;例如，Istio 是 Envoy 代理机群的控制平面，可以通过各种自定义资源定义（VirtualService、Gateway、DestinationRule&amp;hellip;）进行配置。除了高层配置外，在 Istio 中，Kubernetes 环境和集群内运行的服务也被用来作为生成 Envoy 配置的输入。高层配置和环境中发现的服务可以一起作为控制平面的输入。控制平面可以接受这些输入，将其转化为 Envoy 可读的配置，并通过 gRPC 将其发送给 Envoy 实例。&lt;/p&gt;
&lt;h1 id=&#34;50-监听器子系统&#34;&gt;5.0 监听器子系统&lt;/h1&gt;
&lt;p&gt;在监听器子系统模块中，我们将学习 Envoy 代理的监听器子系统。我们将介绍过滤器、过滤器链匹配、以及不同的监听器过滤器。&lt;/p&gt;
&lt;p&gt;在本模块结束时，你将了解监听器子系统的不同部分，并知道过滤器和过滤器链匹配是如何工作的。&lt;/p&gt;
&lt;h1 id=&#34;51-监听器过滤器&#34;&gt;5.1 监听器过滤器&lt;/h1&gt;
&lt;p&gt;正如在介绍章节中提到的，&lt;strong&gt;监听器子系统&lt;/strong&gt;处理&lt;strong&gt;下游&lt;/strong&gt;或传入的请求处理。监听器子系统负责传入的请求和对客户端的响应路径。除了定义 Envoy 对传入请求进行 &amp;quot; 监听 &amp;quot; 的地址和端口外，我们还可以选择对每个监听器进行监听&lt;strong&gt;过滤器的&lt;/strong&gt;配置。&lt;/p&gt;
&lt;p&gt;我们不要把监听器过滤器和我们前面讨论的网络过滤器链和 L3/L4 过滤器混淆起来。Envoy 在处理网络级过滤器之前先处理监听器过滤器，如下图所示。&lt;/p&gt;
&lt;p&gt;请注意，在没有任何监听器过滤器的情况下操作 Envoy 并不是不典型的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image14.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“4.134027777777778in”}&lt;/p&gt;
&lt;p&gt;Envoy 会在网络级过滤器之前处理监听器过滤器。我们可以在监听器过滤器中操作连接元数据，通常是为了影响后来的过滤器或集群如何处理连接。&lt;/p&gt;
&lt;p&gt;监听器过滤器对新接受的套接字进行操作，并可以停止或随后继续执行进一步的过滤器。监听器过滤器的顺序很重要，因为 Envoy 在监听器接受套接字后，在创建连接前，会按顺序处理这些过滤器。&lt;/p&gt;
&lt;p&gt;我们可以使用监听器过滤器的结果来进行过滤器匹配，并选择一个合适的网络过滤器链。例如，我们可以使用 HTTP 检查器监听器过滤器来确定 HTTP 协议（HTTP/1.1 或 HTTP/2）。基于这个结果，我们就可以选择并运行不同的网络过滤器链。&lt;/p&gt;
&lt;h1 id=&#34;52-滤波链匹配&#34;&gt;5.2 滤波链匹配&lt;/h1&gt;
&lt;p&gt;过滤链匹配允许我们指定为监听器选择特定过滤链的标准。&lt;/p&gt;
&lt;p&gt;我们可以在配置中定义多个过滤链，然后根据目标端口、服务器名称、协议和其他属性来选择和执行它们。例如，我们可以检查哪个主机名正在连接，然后选择不同的过滤链。如果主机名 &lt;code&gt;hello.com&lt;/code&gt; 连接，我们可以选择一个过滤链来呈现该特定主机名的证书。&lt;/p&gt;
&lt;p&gt;在 Envoy 开始过滤器匹配之前，它需要有一些由监听器过滤器从接收的数据包中提取的数据。之后，Envoy 要选择一个特定的过滤器链，必须满足所有的匹配条件。例如，如果我们对主机名和端口进行匹配，这两个值都需要匹配，Envoy 才能选择该过滤链。&lt;/p&gt;
&lt;p&gt;财产匹配顺序如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目的地端口（当使用 &lt;code&gt;use_original_dst&lt;/code&gt; 时）。&lt;/li&gt;
&lt;li&gt;目的地 IP 地址&lt;/li&gt;
&lt;li&gt;服务器名称（TLS 协议的 SNI）。&lt;/li&gt;
&lt;li&gt;运输协议&lt;/li&gt;
&lt;li&gt;应用协议（TLS 协议的 ALPN）。&lt;/li&gt;
&lt;li&gt;直接连接的源 IP 地址（这只在我们使用覆盖源地址的过滤器时与源 IP 地址不同，例如，代理协议监听器过滤器）&lt;/li&gt;
&lt;li&gt;来源类型（例如，任何、本地或外部网络）&lt;/li&gt;
&lt;li&gt;源 IP 地址&lt;/li&gt;
&lt;li&gt;来源端口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体标准，如服务器名称 / SNI 或 IP 地址，也允许使用范围或通配符。如果在多个过滤器链中使用通配符标准，最具体的值将被匹配。&lt;/p&gt;
&lt;p&gt;例如，对于 &lt;code&gt;www.hello.com，&lt;/code&gt;从最具体到最不具体的匹配顺序是这样的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;www.hello.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.hello.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任何没有服务器名称标准的过滤链&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个例子，说明我们如何使用不同的属性配置过滤链匹配。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter_chains:
- filter_chain_match:
    server_names:
      - &amp;quot;*.hello.com&amp;quot;
  过滤器。
    ...
- filter_chain_match:
    source_prefix_ranges:
      - address_prefix: 192.0.0.1
        prefix_len: 32
  过滤器。
    ...
- filter_chain_match:
    transport_protocol: tls
  过滤器。
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们假设一个 TLS 请求从 IP 地址进来，并且 &lt;code&gt;192.0.0.1&lt;/code&gt;SNI 设置为 &lt;code&gt;v1.hello.com&lt;/code&gt;。记住这个顺序，第一个满足所有条件的过滤器链匹配是服务器名称匹配（&lt;code&gt;v1.hello.com&lt;/code&gt;）。因此，Envoy 会执行该匹配下的过滤器。&lt;/p&gt;
&lt;p&gt;但是，如果请求是从 IP&lt;code&gt;192.0.0.1&lt;/code&gt; 进来的，那就不是 TLS，而且 SNI 也不符合 &lt;code&gt;*.hello.com&lt;/code&gt; 的要求。Envoy 将执行第二个过滤链 &amp;ndash; 与特定 IP 地址相匹配的那个。&lt;/p&gt;
&lt;h1 id=&#34;53-http-检查器监听器过滤器&#34;&gt;5.3 HTTP 检查器监听器过滤器&lt;/h1&gt;
&lt;p&gt;的 HTTP inspector listener filter&lt;code&gt;(envoy.filters.listener.http_inspector&lt;/code&gt;）允许我们检测应用协议是否是 HTTP。如果协议不是 HTTP，监听器过滤器将通过该数据包。&lt;/p&gt;
&lt;p&gt;如果应用协议被确定为 HTTP，它也会检测相应的 HTTP 协议（如 HTTP/1.x 或 HTTP/2）。&lt;/p&gt;
&lt;p&gt;我们可以使用过滤器链匹配中的 &lt;code&gt;application_protocols&lt;/code&gt; 字段来检查 HTTP 检查过滤器的结果。&lt;/p&gt;
&lt;p&gt;让我们考虑下面的片段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
    listener_filters:
    - name: envoy.filters.listener.http_inspector
      typed_config:
        &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.listener.http_inspector.v3.HttpInspector
    filter_chains:
    - filter_chain_match:
        application_protocols:[&amp;quot;h2&amp;quot;]
      过滤器。
      - name: my_http2_filter
        ... 
    - filter_chain_match:
        application_protocols:[&amp;quot;http/1.1&amp;quot;]
      过滤器。
      - name: my_http1_filter
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在 &lt;code&gt;listener_filters&lt;/code&gt; 字段下添加了 &lt;code&gt;http_inspector&lt;/code&gt; 过滤器来检查连接并确定应用协议。如果 HTTP 协议是 HTTP/2（&lt;code&gt;h2c&lt;/code&gt;），Envoy 会匹配第一个网络过滤器链（以 &lt;code&gt;my_http2_filter&lt;/code&gt; 开始）。&lt;/p&gt;
&lt;p&gt;另外，如果下游的 HTTP 协议是 HTTP/1.1（&lt;code&gt;http/1.1）&lt;/code&gt;，Envoy 会匹配第二个过滤器链，并从名为 &lt;code&gt;my_http1_filter&lt;/code&gt; 的过滤器开始运行过滤器链。&lt;/p&gt;
&lt;h1 id=&#34;54-原始目的地监听器过滤器&#34;&gt;5.4 原始目的地监听器过滤器&lt;/h1&gt;
&lt;p&gt;该 Original destination 过滤器（&lt;code&gt;envoy.filters.listener.original_dst&lt;/code&gt;）会读取 &lt;code&gt;SO_ORIGINAL_DST&lt;/code&gt; 套接字选项。当一个连接被 iptables &lt;code&gt;REDIRECT&lt;/code&gt; 或 &lt;code&gt;TPROXY&lt;/code&gt; 目标（如果&lt;code&gt;透明&lt;/code&gt;选项被设置）重定向时，这个选项被设置。该过滤器可用于与 &lt;code&gt;ORIGINAL_DST&lt;/code&gt; 类型的集群连接。&lt;/p&gt;
&lt;p&gt;当使用 &lt;code&gt;ORIGINAL_DST&lt;/code&gt; 集群类型时，请求会被转发到由重定向元数据寻址的上游主机，而不做任何主机发现。因此，在集群中定义任何端点都是没有意义的，因为端点是从原始数据包中提取的，并不是由负载均衡器选择。&lt;/p&gt;
&lt;p&gt;我们可以将 Envoy 作为一个通用代理，使用这种集群类型将所有请求转发到原始目的地。&lt;/p&gt;
&lt;p&gt;要使用 &lt;code&gt;ORIGINAL_DST&lt;/code&gt; 集群，流量需要通过 iptables &lt;code&gt;REDIRECT&lt;/code&gt; 或 &lt;code&gt;TPROXY&lt;/code&gt; 目标到达 Envoy。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
listener_filters:
- name: envoy.filters.listener.original_dst
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.listener.original_dst.v3.OriginalDst
...
集群。
  - name: original_dst_cluster
    connect_timeout:5s
    类型。ORIGNAL_DST
    lb_policy:cluster_provided
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;55-原始源监听器过滤器&#34;&gt;5.5 原始源监听器过滤器&lt;/h1&gt;
&lt;p&gt;的 original source filter&lt;code&gt;(envoy.filters.listener.original_src&lt;/code&gt;）在 Envoy 的上游（接收 Envoy 请求的主机）一侧复制了连接的下游（连接到 Envoy 的主机）的远程地址。&lt;/p&gt;
&lt;p&gt;例如，如果我们用 &lt;code&gt;10.0.0.1&lt;/code&gt; ，Envoy 连接到上游，源 IP&lt;code&gt;10.0.0.1&lt;/code&gt; 是 。这个地址是由代理协议过滤器决定的（接下来解释），或者它可以来自于可信的 HTTP 头。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: envoy.filters.listener.original_src
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.listener.original_src.v3.OriginalSrc
    标记。 100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该过滤器还允许我们在上游连接的套接字上设置 &lt;code&gt;SO_MARK&lt;/code&gt; 选项。&lt;code&gt;SO_MARK&lt;/code&gt; 选项用于标记通过套接字发送的每个数据包，并允许我们做基于标记的路由（我们可以在以后匹配标记）。&lt;/p&gt;
&lt;p&gt;上面的片段将该标记设置为 100。使用这个标记，我们可以确保非本地地址在绑定到原始源地址时可以通过 Envoy 代理路由回来。&lt;/p&gt;
&lt;h1 id=&#34;56-代理协议监听器过滤器&#34;&gt;5.6 代理协议监听器过滤器&lt;/h1&gt;
&lt;p&gt;该 Proxy protocol 监听器过滤器（&lt;code&gt;envoy.filters.listener.proxy_protocol&lt;/code&gt;）增加了对 HAProxy proxy protocol.&lt;/p&gt;
&lt;p&gt;代理人使用他们的 IP 堆栈连接到远程服务器，并丢失初始连接的源和目的地信息。PROXY 协议允许我们在不丢失客户端信息的情况下连锁代理。该协议定义了一种在主 TCP 流之前通过 TCP 通信连接的元数据的方式。元数据包括源 IP 地址。&lt;/p&gt;
&lt;p&gt;使用这个过滤器，Envoy 可以从 PROXY 协议中获取元数据，并将其传播到 &lt;code&gt;x-forwarded-for&lt;/code&gt; 头中，例如。&lt;/p&gt;
&lt;h1 id=&#34;57-tls-检查器监听器过滤器&#34;&gt;5.7 TLS 检查器监听器过滤器&lt;/h1&gt;
&lt;p&gt;监听器过滤器让我们可以检测到传输是 TLS 还是明文。 TLS inspector 监听器过滤器允许我们检测传输是 TLS 还是明文。如果传输是 TLS，它会检测服务器名称指示（SNI）和 / 或客户端的应用层协议协商（ALPN）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是 SNI？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SNI 或服务器名称指示是对 TLS 协议的扩展，它告诉我们在 TLS 握手过程的开始，哪个主机名正在连接。我们可以使用 SNI 在同一个 IP 地址和端口上提供多个 HTTPS 服务（使用不同的证书）。如果客户端以主机名 &amp;ldquo;hello.com&amp;rdquo; 进行连接，服务器可以出示该主机名的证书。同样地，如果客户以 &amp;ldquo;example.com&amp;rdquo; 连接，服务器就会提供该证书。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是 ALPN？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ALPN 或应用层协议协商是对 TLS 协议的扩展，它允许应用层协商应该在安全连接上执行哪种协议，而无需进行额外的往返。使用 ALPN，我们可以确定客户是否在说 HTTP/1.1 或 HTTP/2。&lt;/p&gt;
&lt;p&gt;我们可以使用 SNI 和 ALPN 值来匹配过滤器链，使用 &lt;code&gt;server_names&lt;/code&gt;（对于 SNI）和 / 或 &lt;code&gt;application_protocols&lt;/code&gt;（对于 ALPN）字段。&lt;/p&gt;
&lt;p&gt;下面的片段显示了我们如何使用 &lt;code&gt;application_protocols&lt;/code&gt; 和 &lt;code&gt;server_names&lt;/code&gt; 来执行不同的过滤链。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
    listener_filters:
      - name: &amp;quot;envoy.filters.listener.tls_inspector&amp;quot;
        typed_config:
          &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.listener.tls_inspector.v3.TlsInspector
    filter_chains:
    - filter_chain_match:
        application_protocols:[&amp;quot;h2c&amp;quot;]
      过滤器。
      - name: some_filter
        ... 
    - filter_chain_match:
        server_names:&amp;quot;something.hello.com&amp;quot;
      transport_socket:
      ...
      过滤器。
      - name: another_filter
...
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;60-日志&#34;&gt;6.0 日志&lt;/h1&gt;
&lt;p&gt;在日志模块中，我们将学习 Envoy 中不同类型的日志和方法。&lt;/p&gt;
&lt;p&gt;无论是作为流量网关还是作为服务网格中的 Sidecar，Envoy 都处于独特的地位，可以揭示你的网络中正在发生的事情。了解的一个常见途径是日志记录，无论是分析、审计还是故障排除。日志记录也有一个数量问题，有可能会泄露秘密。&lt;/p&gt;
&lt;p&gt;在本模块结束时，你将了解 Envoy 中存在哪些日志选项，包括如何对日志进行结构化和过滤，以及它们可以被写到哪里。&lt;/p&gt;
&lt;h1 id=&#34;61-访问记录&#34;&gt;6.1 访问记录&lt;/h1&gt;
&lt;h2 id=&#34;什么是访问记录&#34;&gt;什么是访问记录？&lt;/h2&gt;
&lt;p&gt;每当你打开浏览器访问谷歌或其他网站时，另一边的服务器就会收集你的访问信息。具体来说，它在收集和储存你从服务器上请求的网页数据。在大多数情况下，这些数据包括来源（即主机信息）、你请求网页的日期和时间、请求属性（方法、路径、Header、正文等）、服务器返回的状态、请求的大小等等。所有这些数据通常被存储在称为&lt;strong&gt;访问日志的&lt;/strong&gt;文本文件中。&lt;/p&gt;
&lt;p&gt;通常，来自网络服务器或代理机构的访问日志条目遵循标准化的通用日志格式。不同的代理机构和服务器可以使用自己的默认访问日志格式。Envoy 有其默认的日志格式。我们可以自定义默认格式，并配置它，使其以与其他服务器（如 Apache 或 NGINX）相同的格式写出日志。有了相同的访问日志格式，我们就可以把不同的服务器放在一起使用，用一个工具把数据记录和分析结合起来。&lt;/p&gt;
&lt;p&gt;本模块将解释访问日志在 Envoy 中是如何工作的，以及如何配置和定制它。&lt;/p&gt;
&lt;h2 id=&#34;捕获和读取访问日志&#34;&gt;捕获和读取访问日志&lt;/h2&gt;
&lt;p&gt;我们可以配置捕获任何向 Envoy 代理发出的访问请求，并将其写入所谓的访问日志。让我们看看几个访问日志条目的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2021-11-01T20:37:45.204Z] &amp;quot;GET / HTTP/1.1&amp;quot; 200 - 0 3 0 - &amp;quot;-&amp;quot; &amp;quot;curl/7.64.0&amp;quot; &amp;quot;9c08a41b-805f-42c0-bb17-40ec50a3377a&amp;quot; &amp;quot;localhost:10000&amp;quot; &amp;quot;-&amp;quot;
[2021-11-01T21:08:18.274Z] &amp;quot;POST /hello HTTP/1.1&amp;quot; 200 - 0 3 0 - &amp;quot;-&amp;quot; &amp;quot;curl/7.64.0&amp;quot; &amp;quot;6a593d31-c9ac-453a-80e9-ab805d07ae20&amp;quot; &amp;quot;localhost:10000&amp;quot; &amp;quot;-&amp;quot;
[2021-11-01T21:09:42.717Z] &amp;quot;GET /test HTTP/1.1&amp;quot; 404 NR 0 0 0 - &amp;quot;-&amp;quot; &amp;quot;curl/7.64.0&amp;quot; &amp;quot;1acc3559-50eb-463c-ae21-686fe34abbe8&amp;quot; &amp;quot;localhost:10000&amp;quot; &amp;quot;-&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出包含三个不同的日志条目，并遵循相同的默认日志格式。默认的日志格式看起来像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[%start_time%] &amp;quot;%req(:method)%req(x-envoy-original-path?:path)%%protocol%&amp;quot;
%response_code% %response_flags% %bytes_received% %bytes_sent% %duration% %。
%resp(x-envoy-upstream-service-time)% &amp;quot;%req(x-forwarded-for)%&amp;quot; &amp;quot;%req(user-agent)%&amp;quot;
&amp;quot;%req(x-request-id)%&amp;quot; &amp;quot;%req(:authority)%&amp;quot; &amp;quot;%upstream_host%&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;诸如%RESPONSE_FLAGS%&lt;/code&gt;、&lt;code&gt;%REQ(:METHOD)%&lt;/code&gt; 等值被称为&lt;strong&gt;命令操作符&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;指挥员&#34;&gt;指挥员&lt;/h3&gt;
&lt;p&gt;命令操作者提取相关数据并插入到 TCP 和 HTTP 的日志条目中。如果这些值没有设置或不可用（例如，TCP 中的 RESPONSE_CODE），日志将包含字符 &lt;code&gt;-&lt;/code&gt;（或 JSON 日志的 &lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;每个命令操作符都以字符 &lt;code&gt;%&lt;/code&gt; 开始和结束，例如，&lt;code&gt;%START_TIME%&lt;/code&gt;。如果命令操作符接受任何参数，那么我们可以在括号内提供这些参数。例如，如果我们想使用 &lt;code&gt;START_TIME&lt;/code&gt; 命令操作符只记录日、月、年，那么我们可以通过在括号中指定这些值来进行配置。&lt;code&gt;%START_TIME(%d-%m-%Y)%&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;让我们来看看不同的命令操作符。我们试图根据它们的共同属性将它们归入单独的表格。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 启用时间（START_TIME 请求开始时间，包括毫秒。 &lt;code&gt;%START_TIME(%Y/%m/%dT%H:%M:%S%z ^%)%&lt;/code&gt; 协议 协议（HTTP/1.1、HTTP/2 或 HTTP/3）。 &lt;code&gt;％PROTOCOL％&lt;/code&gt; 响应_CODE HTTP 响应代码。响应代码被设置为如果 &lt;code&gt;0&lt;/code&gt; 下游客户端断开连接。 &lt;code&gt;%回复_代码%&lt;/code&gt; 响应_代码_细节 关于 HTTP 响应的额外信息（例如，谁设置的以及为什么）。 &lt;code&gt;响应_代码_细节%。&lt;/code&gt; 连接终止的细节 提供关于 Envoy 因 L4 原因终止连接的额外信息。 &lt;code&gt;%connection_termination_details%。&lt;/code&gt; ROUTE_NAME 航线的名称。 &lt;code&gt;%ROUTE_NAME%&lt;/code&gt; 连接点_ID 下游连接的一个标识符。它可以用来交叉引用多个日志汇中的 TCP 访问日志，或交叉引用同一连接的基于计时器的报告。该标识符在一个执行过程中很可能是唯一的，但在多个实例或重新启动之间可能会重复。 &lt;code&gt;%connection_id%&lt;/code&gt; 呼叫中心： 呼叫中心： 呼叫中心： 呼叫中心：GRPC_STATUS gRPC 状态代码，包括文本信息和一个数字。 &lt;code&gt;%GRPC_STATUS%&lt;/code&gt; 帐号：HOSTNAME 系统主机名。 &lt;code&gt;%HOSTNAME%&lt;/code&gt; 本地_回复_正文 被 Envoy 拒绝的请求的正文。 &lt;code&gt;%local_reply_body%&lt;/code&gt; 过滤链名称 下游连接的网络过滤链名称。 &lt;code&gt;%filter_chain_name%&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;尺寸&#34;&gt;尺寸&lt;/h4&gt;
&lt;p&gt;该组包含所有代表大小的命令操作符 &amp;ndash; 从请求和响应头字节到接收和发送的字节。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 request_header_bytes 请求头的未压缩字节。 &lt;code&gt;%request_header_bytes%&lt;/code&gt; 响应_headers_bytes 响应 Header 的未压缩字节数。 &lt;code&gt;%response_headers_bytes％。&lt;/code&gt; 响应_trailers_bytes 响应拖车的未压缩字节。 &lt;code&gt;%响应_trailers_bytes%。&lt;/code&gt; BYTES_SENT 为 HTTP 发送的正文字节和为 TCP 发送的连接上的下游字节。 &lt;code&gt;%BYTES_SENT%&lt;/code&gt; BYTES_RECEIVED 收到的正文字节数。 &lt;code&gt;%bytes_received%&lt;/code&gt; 上游_wire_bytes_sent 由 HTTP 流向上游发送的总字节数。 &lt;code&gt;%upstream_wire_bytes_sent％。&lt;/code&gt; 上游_wire_bytes_received 从上游 HTTP 流收到的字节总数。 &lt;code&gt;%upstream_wire_bytes_received％。&lt;/code&gt; 上游_头条_bytes_sent 由 HTTP 流向上游发送的头字节的数量。 &lt;code&gt;%upstream_header_bytes_sent％。&lt;/code&gt; 上游_头条_bytes_received HTTP 流从上游收到的头字节的数量。 &lt;code&gt;%upstream_header_bytes_received%&lt;/code&gt; 下游_wire_bytes_sent HTTP 流向下游发送的总字节数。 &lt;code&gt;%downstream_wire_bytes_sent%&lt;/code&gt; 下游_wire_bytes_received HTTP 流从下游收到的字节总数。 &lt;code&gt;%downstream_wire_bytes_received%&lt;/code&gt; 下游_头条_bytes_sent 由 HTTP 流向下游发送的头字节的数量。 &lt;code&gt;%downstream_header_bytes_sent%的数据。&lt;/code&gt; 下游_头条_bytes_received HTTP 流从下游收到的头字节的数量。 &lt;code&gt;%downstream_header_bytes_received%&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;寿命&#34;&gt;寿命&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 持续时间 从开始时间到最后一个字节输出，请求的总持续时间（以毫秒为单位）。 &lt;code&gt;%DURATION%&lt;/code&gt; 请求时间 从开始时间到收到下游请求的最后一个字节，请求的总持续时间（以毫秒计）。 &lt;code&gt;%request_duration%&lt;/code&gt; request_tx_duration 从开始时间到上游发送的最后一个字节，请求的总持续时间（以毫秒计）。 &lt;code&gt;%request_tx_duration％。&lt;/code&gt; 响应时间 从开始时间到从上游主机读取的第一个字节，请求的总持续时间（以毫秒计）。 &lt;code&gt;响应的时间百分比&lt;/code&gt; 响应_tx_duration 从上游主机读取的第一个字节到下游发送的最后一个字节，请求的总时间（以毫秒为单位）。 &lt;code&gt;%响应_tx_duration%。&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;回应标志&#34;&gt;回应标志&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RESPONSE_FLAGS&lt;/code&gt; 命令操作符包含关于响应或连接的额外细节。下面的列表显示了 HTTP 和 TCP 连接的响应标志的值和它们的含义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 和 TCP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UH: 除了 503 响应代码外，在一个上游集群中没有健康的上游主机。&lt;/li&gt;
&lt;li&gt;UF: 除了 503 响应代码外，还有上游连接失败。&lt;/li&gt;
&lt;li&gt;UO: 上游溢出（断路），此外还有 503 响应代码。&lt;/li&gt;
&lt;li&gt;NR: 除了 404 响应代码外，没有为给定的请求配置路由，或者没有匹配的下游连接的过滤器链。&lt;/li&gt;
&lt;li&gt;URX：请求被拒绝是因为达到了上游重试限制（HTTP）或最大连接尝试（TCP）。&lt;/li&gt;
&lt;li&gt;NC：未找到上游集群。&lt;/li&gt;
&lt;li&gt;DT: 当一个请求或连接超过 &lt;code&gt;max_connection_duration&lt;/code&gt; 或 &lt;code&gt;max_downstream_connection_duration&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;仅限 HTTP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DC: 下游连接终止。&lt;/li&gt;
&lt;li&gt;LH：除了 503 响应代码，本地服务的健康检查请求失败。&lt;/li&gt;
&lt;li&gt;UT。除 504 响应代码外的上行请求超时。&lt;/li&gt;
&lt;li&gt;LR：除了 503 响应代码外，连接本地重置。&lt;/li&gt;
&lt;li&gt;UR：除 503 响应代码外的上游远程复位。&lt;/li&gt;
&lt;li&gt;统一通信。除 503 响应代码外的上游连接终止。&lt;/li&gt;
&lt;li&gt;DI：请求处理被延迟了一段通过故障注入指定的时间。&lt;/li&gt;
&lt;li&gt;FI: 该请求被中止，并有一个通过故障注入指定的响应代码。&lt;/li&gt;
&lt;li&gt;RL。除了 429 响应代码外，该请求还被 HTTP 速率限制过滤器在本地进行了速率限制。&lt;/li&gt;
&lt;li&gt;UAEX：该请求被外部授权服务拒绝。&lt;/li&gt;
&lt;li&gt;RLSE：请求被拒绝，因为速率限制服务中存在错误。&lt;/li&gt;
&lt;li&gt;IH：该请求被拒绝，因为除了 400 响应代码外，它还为一个严格检查的头设置了一个无效的值。&lt;/li&gt;
&lt;li&gt;SI：除 408 响应代码外，流空闲超时。&lt;/li&gt;
&lt;li&gt;DPE: 下游请求有一个 HTTP 协议错误。&lt;/li&gt;
&lt;li&gt;UPE: 上游响应有一个 HTTP 协议错误。&lt;/li&gt;
&lt;li&gt;UMSDR: 上游请求达到最大流时长。&lt;/li&gt;
&lt;li&gt;OM：过载管理器终止了该请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;上游信息&#34;&gt;上游信息&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 UPSTREAM_HOST 上游主机 URL 或 TCP 连接的 &lt;code&gt;tcp://ip:端口&lt;/code&gt;。 &lt;code&gt;%upstream_host%&lt;/code&gt; 上游_集群 上游主机所属的上游集群。如果运行时特性 &lt;code&gt;envoy.reloadable_features.use_observable_cluster_name &lt;/code&gt;被启用，那么如果提供了 &lt;code&gt;alt_stat_name 就&lt;/code&gt;会被使用。 &lt;code&gt;%upstream_cluster%&lt;/code&gt; 上游_本地_地址 上游连接的本地地址。如果是一个 IP 地址，那么它包括地址和端口。 &lt;code&gt;%upstream_local_address％。&lt;/code&gt; 上游_运输_故障_原因 如果由于传输套接字导致连接失败，则提供来自传输套接字的失败原因。 &lt;code&gt;%upstream_transport_failure_reason%（上游传输失败）。&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;下游信息&#34;&gt;下游信息&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 下游_远端_地址 下游连接的远程地址。如果是一个 IP 地址，那么它包括地址和端口。 &lt;code&gt;%下游_远端_地址％。&lt;/code&gt; 下游_远程地址_无端口 下游连接的远程地址。如果是一个 IP 地址，那么它只包括地址。 &lt;code&gt;%downstream_remote_address_without_port%（无端口）。&lt;/code&gt; 下游_直接_远程_地址 下游连接的直接远程地址。如果是一个 IP 地址，那么它包括地址和端口。 &lt;code&gt;%downstream_direct_remote_address%（下游直接地址）。&lt;/code&gt; 下游_直接远程地址_没有端口的地址 下游连接的直接远程地址。如果是一个 IP 地址，那么它只包括地址。 &lt;code&gt;%downstream_direct_remote_address_without_port%(顺流而下)&lt;/code&gt; 下游_本地_地址 下游连接的本地地址。如果它是一个 IP 地址，那么它包括地址和端口。如果原始连接是由 iptables REDIRECT 重定向的，那么这个值代表由原始目标过滤器恢复的原始目标地址。如果由 iptables TPROXY 重定向，并且监听器的透明选项被设置为 &amp;ldquo;true&amp;rdquo;，那么这个值代表原始目标地址和端口。 &lt;code&gt;%downstream_local_address％。&lt;/code&gt; 下游_本地地址_不含端口 &lt;code&gt;与DOWNSTREAM_LOCAL_ADDRESS&lt;/code&gt; 相同，如果该地址是一个 IP 地址，则不包括端口。 &lt;code&gt;%downstream_local_address_without_port%（不含端口）。&lt;/code&gt; 下游_本地_端口 与 &lt;code&gt;DOWNSTREAM_LOCAL_ADDRESS_WITHOUT_PORT&lt;/code&gt; 类似，但只提取 &lt;code&gt;DOWNSTREAM_LOCAL_ADDRESS&lt;/code&gt; 的端口部分。 &lt;code&gt;%downstream_local_port%&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;车头和拖车&#34;&gt;车头和拖车&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;REQ&lt;/code&gt;、&lt;code&gt;RESP&lt;/code&gt; 和 &lt;code&gt;TRAILER&lt;/code&gt; 命令操作符允许我们提取请求、响应和拖车头信息，并将其纳入日志。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 REQ (X?Y):Z HTTP 请求头，其中 X 是主要的 HTTP 头，Y 是备选的 HTTP 头，Z 是一个可选的参数，表示最长为 Z 个字符的字符串截断。如果头信息 X 的值没有被设置，那么将使用请求头信息 Y。如果任何一个头都不存在，&lt;code&gt;-&lt;/code&gt; 将出现在日志中。 &lt;code&gt;%REQ(HELLO?BYE):5%&lt;/code&gt; 包括头信息 &lt;code&gt;hello&lt;/code&gt; 的值。如果没有设置，则使用头条 &lt;code&gt;bye&lt;/code&gt; 的值。它将值截断为 5 个字符。 RESP (X?Y):Z 与 REQ 相同，但取自 HTTP 响应头。 &lt;code&gt;%RESP(HELLO?BYE):5%&lt;/code&gt; 包括头信息 &lt;code&gt;hello&lt;/code&gt; 的值。如果没有设置，则使用头条 &lt;code&gt;bye&lt;/code&gt; 的值。它将值截断为 5 个字符。 TRAILER (X?Y):Z 与 REQ 相同，但取自 HTTP 响应跟踪器 &lt;code&gt;%TRAILER(HELLO?BYE):5%&lt;/code&gt; 包括头信息 &lt;code&gt;hello&lt;/code&gt; 的值。如果没有设置，则使用头条 &lt;code&gt;bye&lt;/code&gt; 的值。它将该值截断为 5 个字符。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;元数据&#34;&gt;元数据&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 dynamic_metadata (namespace:key*):z 动态元数据信息，其中 NAMESPACE 是设置元数据时使用的过滤器。KEY 是命名空间中的一个可选的查找键，可以选择指定用&lt;code&gt;:&lt;/code&gt; 分隔的嵌套键。Z 是一个可选的参数，表示字符串截断，长度不超过 Z 个字符。 例如，&lt;code&gt;my_filter。{&amp;quot;my_key&amp;quot;:&amp;quot;hello&amp;quot;, &amp;quot;json_object&amp;quot;:{&amp;quot;some_key&amp;quot;:&amp;quot;foo&amp;quot;}}&lt;/code&gt; 元数据可以用 &lt;code&gt;%DYNAMIC_METADATA(my_filter)%&lt;/code&gt; 进行记录。要记录一个特定的键，我们可以写 &lt;code&gt;%DYNAMIC_METADATA(my_filter:my_key)%&lt;/code&gt;。 cluster_metadata (namespace:key*):z 上游集群元数据信息，其中 NAMESPACE 是设置元数据时使用的过滤器命名空间，KEY 是命名空间中一个可选的查找键，可选择指定由&lt;code&gt;:&lt;/code&gt; 分隔的嵌套键。Z 是一个可选的参数，表示字符串截断，长度不超过 Z 个字符。 见 &lt;code&gt;DYNAMIC_METADATA&lt;/code&gt; 的例子。 filter_state (key:f):z 过滤器状态信息，其中的 KEY 是需要查询过滤器状态对象的。如果可能的话，序列化的 proto 将被记录为一个 JSON 字符串。如果序列化的 proto 是未知的，那么它将被记录为一个 protobuf 调试字符串。F 是一个可选的参数，表示 FilterState 使用哪种方法进行序列化。如果设置了 &lt;code&gt;PLAIN&lt;/code&gt;，那么过滤器状态对象将被序列化为一个非结构化的字符串。如果设置了 &lt;code&gt;TYPED&lt;/code&gt; 或者没有提供 F，那么过滤器状态对象将被序列化为一个 JSON 字符串。Z 是一个可选的参数，表示字符串的截断，长度不超过 Z 个字符。 &lt;code&gt;%FILTER_STATE(my_key:PLAIN):10%&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;tls&#34;&gt;TLS&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;指挥员 描述 例子 请求的服务器名称 在 SSL 连接套接字上为服务器名称指示（SNI）设置的字符串值。 &lt;code&gt;%要求的服务器名称%。&lt;/code&gt; 下游_local_uri_san 用于建立下游 TLS 连接的本地证书的 SAN 中存在的 URI。 &lt;code&gt;%downstream_local_uri_san%。&lt;/code&gt; 下游_peer_uri_san 用于建立下游 TLS 连接的同行证书 SAN 中存在的 URI。 &lt;code&gt;%downstream_peer_uri_san%。&lt;/code&gt; 下游_本地_主题 用于建立下游 TLS 连接的本地证书中存在的主题。 &lt;code&gt;%下游_本地_主题%。&lt;/code&gt; 下游_同行_主题 用于建立下游 TLS 连接的同伴证书中的主题。 &lt;code&gt;%下游_同行_主题%。&lt;/code&gt; 下游_同行_发行商 用于建立下游 TLS 连接的同行证书中存在的签发者。 &lt;code&gt;%下游_同行_发行商%&lt;/code&gt; downstream_tls_session_id 已建立的下游 TLS 连接的会话 ID。 &lt;code&gt;%downstream_tls_session_id%。&lt;/code&gt; 下游_tls_cipher 用于建立下游 TLS 连接的密码集的 OpenSSL 名称。 &lt;code&gt;%downstream_tls_cipher％。&lt;/code&gt; 下游_tls_version 用于建立下游 TLS 连接的 TLS 版本（&lt;code&gt;TLSv1.2&lt;/code&gt; 或 &lt;code&gt;TLSv1.3）。&lt;/code&gt; &lt;code&gt;%downstream_tls_version%&lt;/code&gt; 下游_同行_指纹_256 用于建立下游 TLS 连接的客户证书的十六进制编码的 SHA256 指纹。 &lt;code&gt;%downstream_peer_fingerprint_256%&lt;/code&gt; 下游_同行_指纹_1 用于建立下游 TLS 连接的客户证书的十六进制编码的 SHA1 指纹。 &lt;code&gt;%downstream_peer_fingerprint_1%&lt;/code&gt; 下游_peer_serial 用于建立下游 TLS 连接的客户证书的序列号。 &lt;code&gt;%downstream_peer_serial%&lt;/code&gt; 下游_同行_证书 用于建立下游 TLS 连接的 URL - 安全编码的 PEM 格式的客户证书。 &lt;code&gt;%downstream_peer_cert％。&lt;/code&gt; 下游_peer_cert_v_start 用于建立下游 TLS 连接的客户证书的有效期开始日期。 &lt;code&gt;%downstream_peer_cert_v_start%&lt;/code&gt;。可以像 &lt;code&gt;START_TIME&lt;/code&gt; 一样定制 下游_peer_cert_v_end 用于建立下游 TLS 连接的客户证书的有效期结束日期。 &lt;code&gt;%downstream_peer_cert_v_end%&lt;/code&gt;。可以像 &lt;code&gt;START_TIME&lt;/code&gt; 一样定制&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;62-配置访问记录器&#34;&gt;6.2 配置访问记录器&lt;/h1&gt;
&lt;p&gt;我们可以在 HTTP 或 TCP 过滤器级别和监听器级别上配置访问日志器。我们还可以配置多个具有不同日志格式和日志汇的访问日志。&lt;strong&gt;日志&lt;/strong&gt;汇是一个抽象的术语，指的是日志写入的位置，例如，写入控制台（stdout、stderr）、文件或网络服务。&lt;/p&gt;
&lt;p&gt;我们要配置多个访问日志的情况是，我们想在控制台（标准输出）中看到高级信息，并将完整的请求细节写入磁盘上的文件。用于配置访问记录器的字段被称为 &lt;code&gt;access_log&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;让我们看看在 HTTP 连接管理器（HCM）层面上启用访问日志到标准输出（&lt;code&gt;StdoutAccessLog&lt;/code&gt;）的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 过滤器。
  - name: envoy.filters.network.http_connection_manager
    typed_config:
      &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.network.http_connection_manager.v3.HttpConnectionManager
      stat_prefix: ingress_http
      access_log:
      - name: envoy.access_loggers.stdout
        typed_config:
          &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Envoy 的目标是拥有可移植和可扩展的配置：类型化的配置。这样做的一个副作用是配置的名字很冗长。例如，为了启用访问日志，我们找到 HTTP 配置类型的名称，然后找到对应于控制台的类型（&lt;code&gt;StdoutAccessLog&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;StdoutAccessLog&lt;/code&gt; 配置将日志条目写到标准输出（控制台）。其他支持的访问日志汇有以下几种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件 (&lt;code&gt;FileAccessLog&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;gRPC（&lt;code&gt;HttpGrpcAccessLogConfig&lt;/code&gt; 和 &lt;code&gt;TcpGrpcAccessLogConfig&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;标准错误（&lt;code&gt;StderrAccessLog）&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;废物 (&lt;code&gt;WasmAccessLog&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;开放式遥测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件访问日志允许我们将日志条目写到我们在配置中指定的文件中。比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 过滤器。
  - name: envoy.filters.network.http_connection_manager
    typed_config:
      &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.network.http_connection_manager.v3.HttpConnectionManager
      stat_prefix: ingress_http
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.access_loggers.file.3.FileAccessLog
          路径: ./envoy-access-logs.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意名称（&lt;code&gt;envoy.access_loggers.file&lt;/code&gt;）和类型（&lt;code&gt;file.v3.FileAccessLog&lt;/code&gt;）的变化。此外，我们还提供了我们希望 Envoy 存储访问日志的路径。&lt;/p&gt;
&lt;p&gt;gRPC 访问日志汇将日志发送到 HTTP 或 TCP gRPC 日志服务。为了使用 gRPC 日志汇，我们必须建立一个 gRPC 服务器，其端点要实现 MetricsService，特别是 &lt;code&gt;StreamMetrics&lt;/code&gt; 函数。然后，Envoy 可以连接到 gRPC 服务器并将日志发送给它。&lt;/p&gt;
&lt;p&gt;早些时候，我们提到了默认的访问日志格式，它是由不同的命令操作符组成的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[%start_time%] &amp;quot;%req(:method)%req(x-envoy-original-path?:path)%%protocol%&amp;quot;
%response_code% %response_flags% %bytes_received% %bytes_sent% %duration% %。
%resp(x-envoy-upstream-service-time)% &amp;quot;%req(x-forwarded-for)%&amp;quot; &amp;quot;%req(user-agent)%&amp;quot;
&amp;quot;%req(x-request-id)%&amp;quot; &amp;quot;%req(:authority)%&amp;quot; &amp;quot;%upstream_host%&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;日志条目的格式是可配置的，可以使用 &lt;code&gt;log_format&lt;/code&gt; 字段进行修改。使用 &lt;code&gt;log_format&lt;/code&gt;，我们可以配置日志条目包括哪些值，并指定我们是否需要纯文本或 JSON 格式的日志。&lt;/p&gt;
&lt;p&gt;比方说，我们只想记录开始时间、响应代码和用户代理。我们会这样配置它。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 过滤器。
  - name: envoy.filters.network.http_connection_manager
    typed_config:
      &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.network.http_connection_manager.v3.HttpConnectionManager
      stat_prefix: ingress_http
      access_log:
      - name: envoy.access_loggers.stdout
        typed_config:
          &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          log_format:
            text_format_source:
              inline_string:&amp;quot;%start_time% %response_code% %req（user-agent）%&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个使用上述格式的日志条目样本看起来是这样的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2021-11-01T21:32:27.170Z 404 curl/7.64.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，如果我们希望日志是 JSON 等结构化格式，我们也可以不提供文本格式，而是设置 JSON 格式字符串。&lt;/p&gt;
&lt;p&gt;为了使用 JSON 格式，我们必须提供一个格式字典，而不是像纯文本格式那样提供一个单一的字符串。&lt;/p&gt;
&lt;p&gt;下面是一个使用相同的日志格式的例子，但用 JSON 写日志条目来代替。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 过滤器。
  - name: envoy.filters.network.http_connection_manager
    typed_config:
      &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.network.http_connection_manager.v3.HttpConnectionManager
      stat_prefix: ingress_http
      access_log:
      - name: envoy.access_loggers.stdout
        typed_config:
          &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          log_format:
            json_format:
              start_time:&amp;quot;%START_TIME%&amp;quot;
              response_code:&amp;quot;%response_code%&amp;quot;
              user_agent:&amp;quot;%req(user-agent)%&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述片段将产生以下日志条目。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;user_agent&amp;quot;:&amp;quot;curl/7.64.0&amp;quot;,&amp;quot;response_code&amp;quot;:404,&amp;quot;start_time&amp;quot;:&amp;quot;2021-11-01T21:37:59.979Z&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;某些命令操作符，如 &lt;code&gt;FILTER_STATE&lt;/code&gt; 或 &lt;code&gt;DYNAMIC_METADATA&lt;/code&gt;，可能产生嵌套的 JSON 日志条目。&lt;/p&gt;
&lt;p&gt;日志格式也可以使用通过 &lt;code&gt;formatters&lt;/code&gt; 字段指定的 formatter 插件。当前版本中有两个已知的格式化插件：元数据（&lt;code&gt;envoy.formatter.metadata&lt;/code&gt;）和无查询请求（&lt;code&gt;envoy.formatter.req_without_query&lt;/code&gt;）扩展。&lt;/p&gt;
&lt;p&gt;元数据格式化扩展实现了 METADATA 命令操作符，允许我们输出不同类型的元数据（DYNAMIC、CLUSTER 或 ROUTE）。&lt;/p&gt;
&lt;p&gt;同样，&lt;code&gt;req_without_query&lt;/code&gt; 格式化允许我们使用 &lt;code&gt;REQ_WITHOUT_QUERY&lt;/code&gt; 命令操作符，其工作方式与 &lt;code&gt;REQ&lt;/code&gt; 命令操作符相同，但会删除查询字符串。该命令操作符用于避免将任何敏感信息记录到访问日志中。&lt;/p&gt;
&lt;p&gt;下面是一个如何提供格式化器以及如何在 &lt;code&gt;inline_string&lt;/code&gt; 中使用它的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 过滤器。
  - name: envoy.filters.network.http_connection_manager
    typed_config:
      &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.network.http_connection_manager.v3.HttpConnectionManager
      stat_prefix: ingress_http
      access_log:
      - name: envoy.access_loggers.stdout
        typed_config:
          &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          log_format:
            text_format_source:
              inline_string:&amp;quot;[%start_time%] %req(:method)%req_without_query(x-envoy-original-path?:path)%protocol%&amp;quot;
            formatters:
            - name: envoy.formatter.req_without_query
              typed_config:
                &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.formatter.req_without_query.v3.ReqWithoutQuery
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述配置中的这个请求 &lt;code&gt;curl localhost:10000/?hello=1234&lt;/code&gt; 会产生一个不包括查询参数（&lt;code&gt;hello=1234&lt;/code&gt;）的日志条目。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2021-11-01t21:48:55.941z] get / http/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;63-访问日志过滤&#34;&gt;6.3 访问日志过滤&lt;/h1&gt;
&lt;p&gt;Envoy 中访问日志的另一个特点是可以指定过滤器，决定是否需要写入访问日志。例如，我们可以有一个访问日志过滤器，只记录 500 状态代码，只记录超过 5 秒的请求，等等。下表显示了支持的访问日志过滤器。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;访问日志过滤器名称 描述 &lt;code&gt;status_code_filter&lt;/code&gt; 对状态代码值进行过滤。 &lt;code&gt;持续时间_过滤器&lt;/code&gt; 对总的请求持续时间进行过滤，单位为毫秒。 &lt;code&gt;不是健康检查过滤器&lt;/code&gt; 对非健康检查请求的过滤。 &lt;code&gt;可追踪的过滤器&lt;/code&gt; 对可追踪的请求进行过滤。 &lt;code&gt;运行时间_过滤器&lt;/code&gt; 对请求进行随机抽样的过滤器。 &lt;code&gt;and_filter&lt;/code&gt; 对过滤器列表中每个过滤器的结果进行逻辑 &amp;ldquo;和&amp;rdquo; 运算。过滤器是按顺序进行评估的。 &lt;code&gt;or_filter&lt;/code&gt; 对过滤器列表中每个过滤器的结果进行逻辑 &amp;ldquo;或&amp;rdquo; 运算。过滤器是按顺序进行评估的。 &lt;code&gt;header_filter&lt;/code&gt; 根据请求头的存在或值来过滤请求。 &lt;code&gt;响应_flag_filter&lt;/code&gt; 过滤那些收到设置了 Envoy 响应标志的响应的请求。 &lt;code&gt;状况过滤器（grpc_status_filter&lt;/code&gt; 根据响应状态过滤 gRPC 请求。 &lt;code&gt;延长线_过滤器&lt;/code&gt; 使用一个在运行时静态注册的扩展过滤器。 &lt;code&gt;metadata_filter&lt;/code&gt; 基于匹配的动态元数据的过滤器。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;每个过滤器都有不同的属性，我们可以选择设置。这里有一个片段，显示了如何使用状态代码、标题和一个&lt;em&gt;和&lt;/em&gt;过滤器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
access_log:
- name: envoy.access_loggers.stdout
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
  过滤器。
    and_filter:
      filters:
        header_filter:
          header:
            name: &amp;quot;:method&amp;quot;
            string_match:
              准确。&amp;quot;GET&amp;quot;
        status_code_filter:
          比较。
            op:GE
            值。
              default_value:400
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的片段为所有响应代码大于或等于 400 的 GET 请求写了一条日志条目到标准输出。&lt;/p&gt;
&lt;h1 id=&#34;64-envoy-组件日志&#34;&gt;6.4 Envoy 组件日志&lt;/h1&gt;
&lt;p&gt;到目前为止，我们已经谈到了向 Envoy 发送请求时产生的日志。然而，Envoy 也会在启动时和执行过程中产生日志。&lt;/p&gt;
&lt;p&gt;我们可以在每次运行 Envoy 时看到 Envoy 组件的日志。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
[2021-11-03 17:22:43.361][1678][info][main] [source/server/server.cc:368] 初始化历时0（基础id=0，热重启版本=11.104）。
[2021-11-03 17:22:43.361][1678][info][main] [source/server/server.cc:370] 静态链接扩展。
[2021-11-03 17:22:43.361][1678][info][main] [source/server/server.cc:372] envoy. filters.network: envoy.client_ssl_auth, envoy.echo, envoy.ext_authz, envoy. filters.network.client_ssl_auth
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;组件日志的默认格式字符串是 &lt;code&gt;[%Y-%m-%d %T.%e][%t][%l][%n] [%g:%#] %v&lt;/code&gt;。格式字符串的第一部分代表日期和时间，然后是线程 ID（&lt;code&gt;%t&lt;/code&gt;）、消息的日志级别（&lt;code&gt;%l&lt;/code&gt;）、记录器名称（&lt;code&gt;%n&lt;/code&gt;）、源文件的相对路径和行号（&lt;code&gt;%g:%#&lt;/code&gt;），以及实际的日志消息（&lt;code&gt;%v&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;在启动 Envoy 时，我们可以使用 &lt;code&gt;--log-format&lt;/code&gt; 命令行选项来定制格式。例如，如果我们想记录时间记录器名称、源函数名称和日志信息，那么我们可以这样写格式字符串。&lt;code&gt;[%T.%e][%n][%！] %v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;然后，在启动 Envoy 时，我们可以设置格式字符串，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func-e run -c someconfig.yaml --log-format &#39;[%T.%e][%n][%!] %v&#39; 。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们使用格式字符串，日志条目看起来像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[17:43:15.963][main][initialize] 响应拖车地图。160字节：grpc-message,grpc-status
[17:43:15.965][main][createRuntime] runtime:{}
[17:43:15.965][main][initialize] 没有给出管理员地址，所以没有启动管理员HTTP服务器。
[17:43:15.966][config][initializeTracers] 载入跟踪配置
[17:43:15.966][config][initialize]加载0个静态秘密（s）。
[17:43:15.966][config][initialize]加载0个集群(s)。
[17:43:15.966][config][initialize]加载1个监听器(s)
[17:43:15.969][config][initializeStatsConfig] 载入统计配置
[17:43:15.969][runtime][onRtdsReady] RTDS已经完成初始化。
[17:43:15.969][上游][maybeFinishInitialize] cm init：所有集群已初始化
[17:43:15.969][main][onRuntimeReady] 没有配置允许活动连接数的限制。通过运行时键overload.global_downstream_max_connections设置一个限制。
[17:43:15.970][main][operator()] 所有集群都已初始化。初始化初始管理器
[17:43:15.970][config][startWorkers]所有依赖关系已初始化。
[17:43:15.971][main][run] 启动主调度循环。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Envoy 具有多个日志记录器，对于每个日志记录器（例如 &lt;code&gt;main&lt;/code&gt;、&lt;code&gt;config&lt;/code&gt;、&lt;code&gt;http...&lt;/code&gt;），我们可以控制日志记录级别（&lt;code&gt;info&lt;/code&gt;、&lt;code&gt;debug&lt;/code&gt;、&lt;code&gt;trace&lt;/code&gt;）。如果我们启用 Envoy 管理界面并向 &lt;code&gt;/logging&lt;/code&gt; 路径发送请求，就可以查看所有活动的日志记录器的名称。另一种查看所有可用日志的方法是通过 source code.&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;/logging终端&lt;/code&gt;的默认输出的样子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;活跃的记录者。
  admin: info
  alternate_protocols_cache: info
  aws: info
  assert: info
  backtrace: info
  cache_filter: info
  client: info
  config: info
  connection：信息
  conn_handler：信息
  解压：信息
  dns：信息
  dubbo：信息
  envoy_bug：信息
  ext_authz: info
  rocketmq：信息
  file: 信息
  filter: info
  forward_proxy：信息
  grpc：信息
  hc：信息
  health_checker：信息
  http：info
  http2: info
  hystrix：信息
  init: info
  io：信息
  jwt：信息
  kafka：信息
  key_value_store: info
  lua: info
  main：信息
  匹配器：信息
  杂项：信息
  mongo：信息
  quic：信息
  quic_stream：信息
  pool：信息
  rbac：信息
  redis：信息
  router：信息
  runtime：信息
  stats: 信息
  secret：信息
  tap：信息
  测试：信息
  thrift: 信息
  追踪：信息
  upstream: info
  udp：信息
  wasm: 信息
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，每个日志记录器的默认日志级别都被设置为 &lt;code&gt;info&lt;/code&gt;。其他的日志级别有以下几种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;痕迹&lt;/li&gt;
&lt;li&gt;调试&lt;/li&gt;
&lt;li&gt;信息&lt;/li&gt;
&lt;li&gt;警告 / 警告&lt;/li&gt;
&lt;li&gt;错误&lt;/li&gt;
&lt;li&gt;关键&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了配置日志级别，我们可以使用 &lt;code&gt;--log-level&lt;/code&gt; 选项或 &lt;code&gt;--component-log-level&lt;/code&gt; 来分别控制每个组件的日志级别。组件的日志级别可以用 &lt;code&gt;log_name:log_level的&lt;/code&gt;格式来写。如果我们要为多个组件设置日志级别，那么就用逗号来分隔它们。例如：&lt;code&gt;上游：关键，秘密：错误，路由器：跟踪&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如，要将&lt;code&gt;主&lt;/code&gt;日志级别设置为&lt;code&gt;跟踪&lt;/code&gt;，&lt;code&gt;配置&lt;/code&gt;日志级别设置为&lt;code&gt;错误&lt;/code&gt;，并关闭所有其他日志记录器，我们可以键入以下内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func-e run -c someconfig.yaml --log-level off --component-log-level main:trace, config:error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认情况下，所有 Envoy 应用程序的日志都写到标准错误（stderr）。要改变这一点，我们可以使用 &lt;code&gt;--log-path&lt;/code&gt; 选项提供一个输出文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func-e run -c someconfig.yaml --log-path app-logs.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在其中一个实验室中，我们还将展示如何配置 Envoy，以便将应用日志写入谷歌云操作套件（以前称为 Stackdriver）。&lt;/p&gt;
&lt;h1 id=&#34;70-管理界面&#34;&gt;7.0 管理界面&lt;/h1&gt;
&lt;p&gt;在管理界面模块中，我们将学习 Envoy 所暴露的管理界面，以及我们可以用来检索配置和统计的不同端点，以及执行其他管理任务。&lt;/p&gt;
&lt;p&gt;在本模块结束时，你将了解如何启用管理界面以及我们可以通过它执行的不同任务。&lt;/p&gt;
&lt;h1 id=&#34;71-启用管理界面&#34;&gt;7.1 启用管理界面&lt;/h1&gt;
&lt;p&gt;在整个课程中，我们已经多次提到了管理界面。Envoy 暴露了一个管理界面，允许我们修改 Envoy，并获得一个视图和查询指标和配置。&lt;/p&gt;
&lt;p&gt;管理界面由一个具有多个端点的 REST API 和一个简单的用户界面组成，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image15.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“12.463194444444444in”}&lt;/p&gt;
&lt;p&gt;管理界面必须使用&lt;code&gt;管理&lt;/code&gt;字段明确启用。比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;管理员。
  地址。
    socket_address:
      地址。 127.0.0.1
      port_value: 9901
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在启用管理界面时要小心。任何有权限进入管理界面的人都可以进行破坏性的操作，比如关闭服务器（&lt;code&gt;/quitquit&lt;/code&gt; 端点）。我们还可能让他们访问私人信息（指标、集群名称、证书信息等）。目前（Envoy 1.20 版本），管理端点是不安全的，也没有办法配置认证或 TLS。有一个工作项目正在进行中，它将限制只有受信任的 IP 和客户端证书才能访问，以确保传输安全。&lt;/p&gt;
&lt;p&gt;在这项工作完成之前，应该只允许通过安全网络访问管理界面，而且只允许从连接到该安全网络的主机访问。我们可以选择只允许通过&lt;code&gt;本地主机&lt;/code&gt;访问管理界面，如上面的配置中所示。另外，如果你决定允许从远程主机访问，那么请确保你也设置了防火墙规则。&lt;/p&gt;
&lt;p&gt;在接下来的课程中，我们将更详细地了解管理界面的不同功能。&lt;/p&gt;
&lt;h1 id=&#34;72-配置转储&#34;&gt;7.2 配置转储&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;/config_dump&lt;/code&gt; 端点是一种快速的方法，可以将当前加载的 Envoy 配置显示为 JSON 序列化的 proto 消息。&lt;/p&gt;
&lt;p&gt;Envoy 输出以下组件的配置，并按照下面的顺序排列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自举&lt;/li&gt;
&lt;li&gt;集群&lt;/li&gt;
&lt;li&gt;端点&lt;/li&gt;
&lt;li&gt;监听器&lt;/li&gt;
&lt;li&gt;范围内的路线&lt;/li&gt;
&lt;li&gt;航线&lt;/li&gt;
&lt;li&gt;秘密&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;包括-eds-配置&#34;&gt;包括 EDS 配置&lt;/h3&gt;
&lt;p&gt;为了输出端点发现服务（EDS）的配置，我们可以在查询中加入 &amp;ldquo;&lt;code&gt;include_eds &amp;quot;&lt;/code&gt; 参数。&lt;/p&gt;
&lt;h3 id=&#34;筛选输出&#34;&gt;筛选输出&lt;/h3&gt;
&lt;p&gt;同样，我们可以通过提供我们想要包括的资源和一个掩码来过滤输出，以返回一个字段的子集。&lt;/p&gt;
&lt;p&gt;例如，为了只输出静态集群配置，我们可以在资源查询参数中使用 &lt;code&gt;static_clusters&lt;/code&gt; 字段，从 &lt;code&gt;ClustersConfigDump&lt;/code&gt; proto 在&lt;code&gt;资源&lt;/code&gt;查询参数中使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9901/config_dump? resource=static_clusters
{
&amp;quot;configs&amp;quot;:[
  {
   &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.admin.v3.ClustersConfigDump.StaticCluster&amp;quot; 。
   &amp;quot;集群&amp;quot;。{
    &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.config.cluster.v3.Cluster&amp;quot;。
    &amp;quot;name&amp;quot;:&amp;quot;instance_1&amp;quot;。
  },
  ...
  {
   &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.admin.v3.ClustersConfigDump.StaticCluster&amp;quot;。
   &amp;quot;集群&amp;quot;。{
    &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.config.cluster.v3.Cluster&amp;quot;。
    &amp;quot;name&amp;quot;:&amp;quot;instance_2&amp;quot;,
...
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;使用掩码参数&#34;&gt;使用&lt;code&gt;掩码&lt;/code&gt;参数&lt;/h4&gt;
&lt;p&gt;为了进一步缩小输出范围，我们可以在&lt;code&gt;掩码&lt;/code&gt;参数中指定该字段。例如，只显示每个集群的 &lt;code&gt;connect_timeout&lt;/code&gt; 值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9901/config_dump? resource=static_clusters&amp;amp;mask=cluster.connect_timeout
{
&amp;quot;configs&amp;quot;:[
  {
   &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.admin.v3.ClustersConfigDump.StaticCluster&amp;quot;。
   &amp;quot;集群&amp;quot;。{
    &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.config.cluster.v3.Cluster&amp;quot;。
    &amp;quot;connect_timeout&amp;quot;:&amp;quot;5s&amp;quot;
   }
  },
  {
   &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.admin.v3.ClustersConfigDump.StaticCluster&amp;quot;。
   &amp;quot;集群&amp;quot;。{
    &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.config.cluster.v3.Cluster&amp;quot;。
    &amp;quot;connect_timeout&amp;quot;:&amp;quot;5s&amp;quot;
   }
  },
  {
   &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.admin.v3.ClustersConfigDump.StaticCluster&amp;quot;。
   &amp;quot;集群&amp;quot;。{
    &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.config.cluster.v3.Cluster&amp;quot;。
    &amp;quot;connect_timeout&amp;quot;:&amp;quot;1s&amp;quot;
   }
  }
]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;使用正则表达式&#34;&gt;使用正则表达式&lt;/h4&gt;
&lt;p&gt;另一个过滤选项是指定一个正则表达式来匹配加载的配置的名称。例如，要输出所有名称字段与正则表达式&lt;code&gt;.*listener.*相&lt;/code&gt;匹配的监听器，我们可以写如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9901/config_dump? resource=static_clusters&amp;amp;name_regex=.*listener.*

{
&amp;quot;configs&amp;quot;:[
  {
   &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.admin.3.ListenersConfigDump.StaticListener&amp;quot;。
   &amp;quot;listener&amp;quot;:{
    &amp;quot;@type&amp;quot;:&amp;quot;type.googleapis.com/envoy.config.listener.v3.Listener&amp;quot;,
    &amp;quot;name&amp;quot;:&amp;quot;listener_0&amp;quot;,
    &amp;quot;地址&amp;quot;:{
     &amp;quot;socket_address&amp;quot;:{
      &amp;quot;地址&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,
      &amp;quot;port_value&amp;quot;: 10000
     }
    },
    &amp;quot;filter_chains&amp;quot;:[
     {}
    ]
   },
   &amp;quot;last_updated&amp;quot;:&amp;quot;2021-11-15T20:06:51.208Z&amp;quot;
  }
]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，&lt;code&gt;/init_dump&lt;/code&gt; 端点列出了各种 Envoy 组件的未就绪目标的当前信息。和配置转储一样，我们可以使用 &lt;code&gt;mask&lt;/code&gt; 查询参数来过滤特定字段。&lt;/p&gt;
&lt;h2 id=&#34;证书&#34;&gt;证书&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/certs&lt;/code&gt; 输出所有加载的 TLS 证书。数据包括证书文件名、序列号、主题候补名称和到期前天数。结果是 JSON 格式的，它遵循了 &lt;code&gt;admin.v3.Certificates&lt;/code&gt; proto.&lt;/p&gt;
&lt;h1 id=&#34;73-统计数据&#34;&gt;7.3 统计数据&lt;/h1&gt;
&lt;p&gt;管理界面的统计输出的主要端点是通过 &lt;code&gt;/stats&lt;/code&gt; 端点访问的。这个输入通常是用来调试的。我们可以通过向 &lt;code&gt;/stats&lt;/code&gt; 端点发送请求或从管理界面访问同一路径来访问该端点。&lt;/p&gt;
&lt;p&gt;该端点支持使用&lt;code&gt;过滤器&lt;/code&gt;查询参数和正则表达式来过滤返回的统计资料。&lt;/p&gt;
&lt;p&gt;另一个过滤输出的维度是使用 &lt;code&gt;usedonly&lt;/code&gt; 查询参数。当使用时，它将只输出 Envoy 更新过的统计数据。例如，至少增加过一次的计数器，至少改变过一次的仪表，以及至少增加过一次的直方图。&lt;/p&gt;
&lt;p&gt;默认情况下，统计信息是以 StatsD 格式写入的。每条统计信息都写在单独的一行中，统计信息的名称（例如，&lt;code&gt;cluster_manager.active_clusters&lt;/code&gt;）后面是统计信息的值（例如，&lt;code&gt;15&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
cluster_manager.active_clusters。15
cluster_manager.cluster_added: 3
cluster_manager.cluster_modified:4
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;format&lt;/code&gt; 查询参数控制输出格式。设置为 &lt;code&gt;json&lt;/code&gt; 将以 JSON 格式输出统计信息。如果我们想以编程方式访问和解析统计信息，通常会使用这种格式。&lt;/p&gt;
&lt;p&gt;第二种格式是 Prometheus 格式（例如， &lt;code&gt;format=prometheus&lt;/code&gt;）。这个选项以 Prometheus 格式格式化状态，可以用来与 Prometheus 服务器集成。另外，我们也可以使用 &lt;code&gt;/stats/prometheus&lt;/code&gt; 端点来获得同样的输出。&lt;/p&gt;
&lt;h2 id=&#34;记忆&#34;&gt;记忆&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/memory&lt;/code&gt; 端点将输出当前内存分配和堆的使用情况，单位为字节。它是 &lt;code&gt;/stats&lt;/code&gt; 端点打印出来的信息的一个子集。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9901/memory
{
&amp;quot;已分配&amp;quot;。&amp;quot;5845672&amp;quot;,
&amp;quot;heap_size&amp;quot;:&amp;quot;10485760&amp;quot;,
&amp;quot;pageheap_unmapped&amp;quot;:&amp;quot;0&amp;quot;,
&amp;quot;pageheap_free&amp;quot;:&amp;quot;3186688&amp;quot;,
&amp;quot;total_thread_cache&amp;quot;:&amp;quot;80064&amp;quot;,
&amp;quot;total_physical_bytes&amp;quot;:&amp;quot;12699350&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;重置计数器&#34;&gt;重置计数器&lt;/h2&gt;
&lt;p&gt;向 &lt;code&gt;/reset_counters &lt;/code&gt;发送一个 POST 请求，将所有计数器重置为零。注意，这不会重置或放弃任何发送到 statsd 的数据。它只影响到 &lt;code&gt;/stats &lt;/code&gt;端点的输出。在调试过程中可以使用 &lt;code&gt;/stats &lt;/code&gt;端点和 &lt;code&gt;/reset_counters &lt;/code&gt;端点。&lt;/p&gt;
&lt;h2 id=&#34;服务器信息和状态&#34;&gt;服务器信息和状态&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/server_info&lt;/code&gt; 端点输出运行中的 Envoy 服务器的信息。这包括版本、状态、配置路径、日志级别信息、正常运行时间、节点信息等。&lt;/p&gt;
&lt;p&gt;该 admin.v3.ServerInfoproto 解释了由端点返回的不同字段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/ready&lt;/code&gt; 端点返回一个字符串和一个错误代码，反映 Envoy 的状态。如果 Envoy 是活的，并准备好接受连接，那么它返回 HTTP 200 和字符串 &lt;code&gt;LIVE&lt;/code&gt;。否则，输出将是一个 HTTP 503。这个端点可以作为准备就绪检查。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/runtime&lt;/code&gt; 端点以 JSON 格式输出所有运行时值。输出包括活动的运行时覆盖层列表和每个键的层值堆栈。这些值也可以通过向 &lt;code&gt;/runtime_modify&lt;/code&gt; 端点发送 POST 请求并指定键 / 值对来修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，&lt;code&gt;POST /runtime_modify?my_key_1=somevalue&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;/hot_restart_version &lt;/code&gt;端点，加上 &lt;code&gt;--hot-restart-version &lt;/code&gt;标志，可以用来确定新的二进制文件和运行中的二进制文件是否热重启兼容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热重启&lt;/strong&gt;是指 Envoy 能够 &amp;ldquo;热&amp;rdquo; 或 &amp;quot; 实时 &amp;quot; 重启自己。这意味着 Envoy 可以完全重新加载自己（和配置）而不放弃任何现有的连接。&lt;/p&gt;
&lt;h2 id=&#34;hystrix-事件流&#34;&gt;Hystrix 事件流&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/hystrix_event_stream&lt;/code&gt; 端点的目的是作为流源用于 Hystrix dashboard. 向该端点发送请求将触发来自 Envoy 的统计流，其格式是 Hystrix 仪表盘所期望的。&lt;/p&gt;
&lt;p&gt;注意，我们必须在引导配置中配置 Hystrix 统计同步，以使端点工作。&lt;/p&gt;
&lt;p&gt;比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stats_sinks: 
  - name: envoy.stat_sinks.hystrix
    typed_config:
      &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.config.metrics.v3.HystrixSink
      num_buckets: 10
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;争论&#34;&gt;争论&lt;/h2&gt;
&lt;p&gt;如果启用了互斥追踪功能，&lt;code&gt;/contention&lt;/code&gt; 端点会转储当前 Envoy 互斥内容的统计信息。&lt;/p&gt;
&lt;h2 id=&#34;cpu-和堆分析器&#34;&gt;CPU 和堆分析器&lt;/h2&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;/cpuprofiler&lt;/code&gt; 和 &lt;code&gt;/heapprofiler&lt;/code&gt; 端点来启用或禁用 CPU / 堆分析器。注意，这需要用 gperftools 编译 Envoy。Envoy 的 GitHub 资源库有 documentation 关于如何做到这一点。&lt;/p&gt;
&lt;h1 id=&#34;74-记录&#34;&gt;7.4 记录&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;/logging&lt;/code&gt; 端点启用或禁用特定组件或所有记录器的不同记录级别。&lt;/p&gt;
&lt;p&gt;要列出所有的记录器，我们可以向 &lt;code&gt;/logging&lt;/code&gt; 端点发送一个 POST 请求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -X POST localhost:9901/logging
活动的记录器。
  admin: info
  alternate_protocols_cache: info
  aws: info
  assert: info
  backtrace: info
  cache_filter: info
  client: info
  config: info
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出将包含记录仪的名称和每个记录仪的记录级别。要改变所有活动日志记录器的记录级别，我们可以使用&lt;code&gt;级别&lt;/code&gt;参数。例如，我们可以运行下面的程序，将所有日志记录器的日志记录级别改为&lt;code&gt;调试&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -X POST localhost:9901/logging?level=debug
活动的记录器。
  admin: debug
  alternate_protocols_cache: debug
  aws：debug
  assert: debug
  回溯：调试
  cache_filter: debug
  客户端: 调试
  配置：调试
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要改变某个日志记录器的级别，我们可以用日志记录器的名称替换&lt;code&gt;级别&lt;/code&gt;查询参数名称。例如，要将&lt;code&gt;管理员&lt;/code&gt;日志记录器级别改为&lt;code&gt;警告&lt;/code&gt;，我们可以运行以下程序。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -X POST localhost:9901/logging?admin=warning
活动的记录器。
  admin: warning
  alternate_protocols_cache: info
  aws: info
  assert: info
  backtrace: info
  cache_filter: info
  client: info
  config: info
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了触发所有访问日志的重新开放，我们可以向 &lt;code&gt;/reopen_logs&lt;/code&gt; 端点发送一个 POST 请求。&lt;/p&gt;
&lt;h1 id=&#34;75-集群&#34;&gt;7.5 集群&lt;/h1&gt;
&lt;p&gt;集群端点（&lt;code&gt;/clusters&lt;/code&gt;）将显示配置的集群列表，并包括以下信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个主机的统计数据&lt;/li&gt;
&lt;li&gt;每个主机的健康状态&lt;/li&gt;
&lt;li&gt;断路器设置&lt;/li&gt;
&lt;li&gt;每个主机的重量和位置信息&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的主机指的是每个被发现的属于上游集群的主机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的片段显示了信息的模样（注意，输出是经过修剪的）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;cluster_statuses&amp;quot;。[
  {
   &amp;quot;name&amp;quot;:&amp;quot;api_google_com&amp;quot;,
   &amp;quot;host_statuses&amp;quot;:[
    {
     &amp;quot;地址&amp;quot;。{
      &amp;quot;socket_address&amp;quot;:{
       &amp;quot;地址&amp;quot;:&amp;quot;10.0.0.1&amp;quot;,
       &amp;quot;port_value&amp;quot;: 8080
      }
     },
     &amp;quot;统计资料&amp;quot;:[
      {
       &amp;quot;值&amp;quot;:&amp;quot;23&amp;quot;,
       &amp;quot;name&amp;quot;:&amp;quot;cx_total&amp;quot;
      },
      {
       &amp;quot;name&amp;quot;:&amp;quot;rq_error&amp;quot;
      },
      {
       &amp;quot;值&amp;quot;:&amp;quot;51&amp;quot;,
       &amp;quot;名称&amp;quot;:&amp;quot;rq_success&amp;quot;
      },
      ...
     ],
     &amp;quot;health_status&amp;quot;:{
      &amp;quot;eds_health_status&amp;quot;:&amp;quot;健康&amp;quot;
     },
     &amp;quot;体重&amp;quot;:1,
     &amp;quot;地区&amp;quot;:{}
    }
   ],
   &amp;quot;circuit_breakers&amp;quot;:{
    &amp;quot;阈值&amp;quot;:[
     {
      &amp;quot;max_connections&amp;quot;:1024,
      &amp;quot;max_pending_requests&amp;quot;:1024,
      &amp;quot;max_requests&amp;quot;:1024,
      &amp;quot;max_retries&amp;quot;: 3
     },
     {
      &amp;quot;优先级&amp;quot;:&amp;quot;高&amp;quot;。
      &amp;quot;max_connections&amp;quot;:1024,
      &amp;quot;max_pending_requests&amp;quot;:1024,
      &amp;quot;max_requests&amp;quot;:1024,
      &amp;quot;max_retries&amp;quot;: 3
     }
    ]
   },
   &amp;quot;observability_name&amp;quot;:&amp;quot;api_google_com&amp;quot;
  },
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;为了获得 JSON 输出，我们可以在发出请求或在浏览器中打开 URL 时附加 &lt;code&gt;?format=json。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;主机统计&#34;&gt;主机统计&lt;/h2&gt;
&lt;p&gt;输出包括每个主机的统计数据，如下表所解释。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;公制名称 描述 &lt;code&gt;cx_total&lt;/code&gt; 连接总数 &lt;code&gt;cx_active&lt;/code&gt; 有效连接总数 &lt;code&gt;cx_connect_fail&lt;/code&gt; 连接失败总数 &lt;code&gt;rq_total&lt;/code&gt; 请求总数 &lt;code&gt;rq_timeout&lt;/code&gt; 过时的请求总数 &lt;code&gt;胜利&lt;/code&gt; 有非 5xx 响应的请求总数 &lt;code&gt;rq_error&lt;/code&gt; 有 5xx 响应的请求总数 &lt;code&gt;rq_active&lt;/code&gt; 有效请求总数&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;宿主健康状况&#34;&gt;宿主健康状况&lt;/h2&gt;
&lt;p&gt;主机的健康状况在 &lt;code&gt;health_status&lt;/code&gt; 字段下被报告。健康状态中的值取决于健康检查是否被启用。假设启用了主动和被动（断路器）健康检查，该表显示了可能包含在 &lt;code&gt;health_status&lt;/code&gt; 字段中的布尔字段。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;领域名称 描述 &lt;code&gt;失败的主动健康检查&lt;/code&gt; 真，如果该主机目前未能通过主动健康检查。 &lt;code&gt;失败的检查&lt;/code&gt; 是的，如果该宿主目前被认为是一个异类，并已被弹出。 &lt;code&gt;failed_active_degraded_check &lt;/code&gt;- 如果主机目前通过主动健康检查被标记为降级，则为真。
&lt;code&gt;pending_dynamic_removal &lt;/code&gt;- 如果主机已经从服务发现中移除，但由于主动健康检查而正在稳定，则为真。
&lt;code&gt;待定_活动_hc&lt;/code&gt; 真，如果该主机尚未被健康检查。 &lt;code&gt;被排除在外的_通过即时的_hc_fail&lt;/code&gt; 真，如果该主机应被排除在恐慌、溢出等计算之外，因为它被明确地通过协议信号从轮换中取出，并且不打算被路由到。 &lt;code&gt;active_hc_timeout&lt;/code&gt; 真，如果主机由于超时而导致活动 HC 失败。 &lt;code&gt;健康状况&lt;/code&gt; 默认情况下，设置为&lt;code&gt;健康&lt;/code&gt;（如果不使用 EDS）。否则，它也可以被设置为&lt;code&gt;不健康&lt;/code&gt;或&lt;code&gt;退化&lt;/code&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;请注意，表中的字段只有在设置为真时才会被报告。例如，如果主机是健康的，那么健康状态将看起来像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Health_status&amp;quot;:{
    &amp;quot;eds_health_status&amp;quot;:&amp;quot;健康&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果配置了主动健康检查，而主机是失败的，那么状态将看起来像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Health_status&amp;quot;:{
    &amp;quot; failed_active_health_check&amp;quot;: true,
    &amp;quot;eds_health_status&amp;quot;:&amp;quot;健康&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;76-倾听者和倾听者的消耗&#34;&gt;7.6 倾听者和倾听者的消耗&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;/listeners&lt;/code&gt; 端点列出了所有配置的监听器。这包括名称以及每个监听器的地址和监听的端口。&lt;/p&gt;
&lt;p&gt;比如说。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9901/listeners
http_8080::0.0.0.0:8080
http_hello_world_9090::0.0.0.0:9090
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于 JSON 输出，我们可以在 URL 上附加 &lt;code&gt;?format=json。&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9901/listeners?format=json
{
&amp;quot;listener_statuses&amp;quot;:[
  {
   &amp;quot;name&amp;quot;:&amp;quot;http_8080&amp;quot;,
   &amp;quot;local_address&amp;quot;:{
    &amp;quot;socket_address&amp;quot;:{
     &amp;quot;地址&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,
     &amp;quot;port_value&amp;quot;: 8080
    }
   }
  },
  {
   &amp;quot;name&amp;quot;:&amp;quot;http_hello_world_9090&amp;quot;,
   &amp;quot;local_address&amp;quot;:{
    &amp;quot;socket_address&amp;quot;:{
     &amp;quot;地址&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,
     &amp;quot;port_value&amp;quot;: 9090
    }
   }
  }
]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;监听器排水&#34;&gt;监听器排水&lt;/h2&gt;
&lt;p&gt;发生排水的一个典型场景是在热重启排水期间。它涉及到在 Envoy 进程关闭之前，通过指示监听器停止接受传入的请求来减少开放连接的数量。&lt;/p&gt;
&lt;p&gt;默认情况下，如果我们关闭 Envoy，所有的连接都会立即关闭。要进行优雅的关闭（即不关闭现有的连接），我们可以使用 &lt;code&gt;/drain_listeners&lt;/code&gt; 端点，并加入一个可选的&lt;code&gt;优雅&lt;/code&gt;查询参数。&lt;/p&gt;
&lt;p&gt;Envoy 根据通过 &lt;code&gt;--drain-time-s&lt;/code&gt; 和 &lt;code&gt;--drain-strategy&lt;/code&gt; 指定的配置来排空连接。&lt;/p&gt;
&lt;p&gt;如果没有提供，耗尽时间默认为 10 分钟（600 秒）。该值指定了 Envoy 将耗尽连接的时间 &amp;ndash; 即在关闭它们之前等待。&lt;/p&gt;
&lt;p&gt;耗尽策略参数决定了耗尽序列中的行为（例如，在热重启期间），连接是通过发送 &amp;ldquo;Connection:CLOSE&amp;rdquo;（HTTP/1.1）或 GOAWAY 帧（HTTP/2）。&lt;/p&gt;
&lt;p&gt;有两种支持的策略：渐进（默认）和立即。当使用渐进策略时，随着排泄时间的推移，鼓励排泄的请求的百分比增加到 100%。即时策略将使所有的请求在排水序列开始后立即排水。&lt;/p&gt;
&lt;p&gt;排水是按监听器进行的。然而，它必须在网络过滤器层面得到支持。目前支持优雅排水的过滤器是 Redis、Mongo 和 HTTP 连接管理器。&lt;/p&gt;
&lt;p&gt;端点的另一个选项是使用 &lt;code&gt;inboundonly&lt;/code&gt; 查询参数（例如，&lt;code&gt;/drain_listeners?inboundonly&lt;/code&gt;）耗尽所有入站监听器的能力。这使用监听器上的 &lt;code&gt;traffic_direction&lt;/code&gt; 字段来确定流量方向。&lt;/p&gt;
&lt;h1 id=&#34;77-分接式过滤器&#34;&gt;7.7 分接式过滤器&lt;/h1&gt;
&lt;p&gt;分接过滤器的目的是根据一些匹配的属性来记录 HTTP 流量。有两种方法来配置分接过滤器。(1) 使用 Envoy 配置里面的 &lt;code&gt;static_config&lt;/code&gt; 字段，或者 (2) 使用 &lt;code&gt;admin_config&lt;/code&gt; 字段并指定配置 ID。不同的是，我们在静态配置中一次性提供所有东西 &amp;ndash; 匹配配置和输出配置。当使用管理配置时，我们只提供配置 ID，然后在运行时使用 &lt;code&gt;/tap&lt;/code&gt; 管理端点来配置过滤器。&lt;/p&gt;
&lt;p&gt;正如我们所提到的，过滤器的配置被分成两部分：&lt;strong&gt;匹配配置&lt;/strong&gt;和&lt;strong&gt;输出配置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们可以用匹配配置指定匹配谓词，告诉分接过滤器要分接哪些请求并写入配置的输出。&lt;/p&gt;
&lt;p&gt;例如，下面的片段显示了如何使用 &lt;code&gt;any_match&lt;/code&gt; 来匹配所有的请求，无论其属性如何。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;common_config:
  static_config:
    匹配。
      any_match: true
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们也有一个选项，可以在请求和响应头、拖车和正文上进行匹配。&lt;/p&gt;
&lt;h2 id=&#34;标题--拖车匹配&#34;&gt;标题 / 拖车匹配&lt;/h2&gt;
&lt;p&gt;头部 / 拖车匹配器使用 &lt;code&gt;HttpHeadersMatch &lt;/code&gt;proto，在这里我们指定一个头数组来匹配。例如，这个片段匹配任何请求头 &lt;code&gt;my-header&lt;/code&gt; 被精确设置为 &lt;code&gt;hello的&lt;/code&gt;请求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;common_config:
  static_config:
    匹配。
      http_request_headers_match。
        headers:
          name: &amp;quot;my-header&amp;quot;
          string_match:
            exact:&amp;quot;你好&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;请注意，在 &lt;code&gt;string_match&lt;/code&gt; 中，我们可以使用其他匹配器（例如&lt;code&gt;前缀&lt;/code&gt;、&lt;code&gt;后缀&lt;/code&gt;、&lt;code&gt;safe_regex&lt;/code&gt;），正如前面解释的那样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;身体匹配&#34;&gt;身体匹配&lt;/h2&gt;
&lt;p&gt;通用请求和响应体匹配使用 &lt;code&gt;HttpGenericBodyMatch&lt;/code&gt; 来指定字符串或二进制匹配。顾名思义，字符串匹配（&lt;code&gt;string_match&lt;/code&gt;）是在 HTTP 正文中寻找一个字符串，而二进制匹配（&lt;code&gt;binary_match&lt;/code&gt;）是在 HTTP 正文中寻找一串字节的位置。&lt;/p&gt;
&lt;p&gt;例如，如果响应体包含字符串 &lt;code&gt;hello，则&lt;/code&gt;下面的片段可以匹配。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;common_config:
  static_config:
    匹配。
      http_response_generic_body_match。
        模式。
          string_match:&amp;quot;hello&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;匹配谓词&#34;&gt;匹配谓词&lt;/h2&gt;
&lt;p&gt;我们可以用 &lt;code&gt;or_match&lt;/code&gt;、&lt;code&gt;and_match&lt;/code&gt; 和 &lt;code&gt;not_match&lt;/code&gt; 等匹配谓词来组合多个标题、预告片和正文匹配器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;or_match&lt;/code&gt; 和 &lt;code&gt;and_match&lt;/code&gt; 使用 &lt;code&gt;MatchSet&lt;/code&gt; 原语，描述逻辑 OR 或逻辑 AND。我们在匹配集内的&lt;code&gt;规则&lt;/code&gt;字段中指定构成一个集合的规则列表。&lt;/p&gt;
&lt;p&gt;下面的例子显示了如何使用 &lt;code&gt;and_match&lt;/code&gt; 来确保响应体包含 &lt;code&gt;hello这个&lt;/code&gt;词，以及请求头 &lt;code&gt;my-header&lt;/code&gt; 被设置为 &lt;code&gt;hello&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;common_config:
  static_config:
    匹配。
      and_match:
        规则。
         - http_response_generic_body_match。
            模式。
              - string_match:&amp;quot;hello&amp;quot;
          - http_request_headers_match:
              headers:
                name: &amp;quot;my-header&amp;quot;
                string_match:
                  准确。&amp;quot;你好&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们想实现逻辑 OR，那么我们可以用 &lt;code&gt;or_match字段&lt;/code&gt;替换 &lt;code&gt;and_match&lt;/code&gt; 字段。字段内的配置将保持不变，因为两个字段都使用 &lt;code&gt;MatchSet &lt;/code&gt;proto。&lt;/p&gt;
&lt;p&gt;让我们使用与之前相同的例子来说明 &lt;code&gt;not_match&lt;/code&gt; 是如何工作的。假设我们想过滤所有没有设置头信息 &lt;code&gt;my-header: hello的&lt;/code&gt;请求，以及响应体不包括 &lt;code&gt;hello这个&lt;/code&gt;字符串的请求。&lt;/p&gt;
&lt;p&gt;下面是我们如何写这个配置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;common_config:
  static_config:
    匹配。
      not_match:
        and_match:
          规则。
          - http_response_generic_body_match。
              模式。
                - string_match:&amp;quot;hello&amp;quot;
            - http_request_headers_match:
                headers:
                  name: &amp;quot;my-header&amp;quot;
                  string_match:
                    准确。&amp;quot;你好&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;not_match &lt;/code&gt;字段和父&lt;code&gt;匹配&lt;/code&gt;字段一样使用 &lt;code&gt;MatchPredicate &lt;/code&gt;原语。匹配字段是一个递归结构，它允许我们创建复杂的嵌套匹配配置。&lt;/p&gt;
&lt;p&gt;这里要提到的最后一个字段是 &lt;code&gt;any_match&lt;/code&gt;。这是一个布尔字段，当设置为 &lt;code&gt;&amp;quot;真 &amp;quot;&lt;/code&gt; 时，将总是匹配。&lt;/p&gt;
&lt;h2 id=&#34;输出配置&#34;&gt;输出配置&lt;/h2&gt;
&lt;p&gt;一旦请求被挖掘出来，我们需要告诉过滤器将输出写入哪里。目前，我们可以配置一个单一的输出汇。&lt;/p&gt;
&lt;p&gt;下面是一个输出配置样本的样子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
output_config:
  汇。
    - 格式。json_body_as_string
      file_per_tap:
        path_prefix: tap
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;file_per_tap&lt;/code&gt;，我们指定要为每个被窃听的数据流输出一个文件。&lt;code&gt;path_prefix&lt;/code&gt; 指定了输出文件的前缀。文件用以下格式命名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;path_prefix&amp;gt;_&amp;lt;id&amp;gt;.&amp;lt;pb | json&amp;gt;。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;id&lt;/code&gt; 代表一个标识符，使我们能够区分流实例的记录跟踪。文件扩展名（&lt;code&gt;pb&lt;/code&gt; 或 &lt;code&gt;json&lt;/code&gt;）取决于格式选择。&lt;/p&gt;
&lt;p&gt;捕获输出的第二个选项是使用 &lt;code&gt;streaming_admin&lt;/code&gt; 字段。这指定了 &lt;code&gt;/tap&lt;/code&gt; 管理端点将流式传输被捕获的输出。请注意，要使用 &lt;code&gt;/tap&lt;/code&gt; 管理员端点进行输出，还必须使用 &lt;code&gt;admin_config&lt;/code&gt; 字段配置分接过滤器。如果我们静态地配置了分接过滤器，我们就不会使用 &lt;code&gt;/tap&lt;/code&gt; 端点来获取输出。&lt;/p&gt;
&lt;h3 id=&#34;格式选择&#34;&gt;格式选择&lt;/h3&gt;
&lt;p&gt;我们有多种输出格式的选项，指定消息的书写方式。让我们看看不同的格式，从默认格式开始，&lt;code&gt;JSON_BODY_AS_BYTES&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JSON_BODY_AS_BYTES&lt;/code&gt; 输出格式将消息输出为 JSON，任何响应的主体数据将在 &lt;code&gt;as_bytes&lt;/code&gt; 字段中，其中包含 base64 编码的字符串。&lt;/p&gt;
&lt;p&gt;例如，下面是攻丝输出的情况。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;http_buffered_trace&amp;quot;。{
  &amp;quot;request&amp;quot;:{
   &amp;quot;headers&amp;quot;:[
    {
     &amp;quot;key&amp;quot;:&amp;quot;:authority&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;localhost:10000&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;:path&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;/&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;:方法&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;GET&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;:方案&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;http&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;user-agent&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;curl/7.64.0&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;接受&amp;quot;。
     &amp;quot;值&amp;quot;:&amp;quot;*/*&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;my-header&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;你好&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;x-forwarded-proto&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;http&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;x-request-id&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;67e3e8ac-429a-42fb-945b-ec25927fdcc1&amp;quot;
    }
   ],
   &amp;quot;跟踪器&amp;quot;。[]
  },
  &amp;quot;响应&amp;quot;。{
   &amp;quot;头信息&amp;quot;。[
    {
     &amp;quot;key&amp;quot;:&amp;quot;:status&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;200&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;content-length&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;5&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;内容类型&amp;quot;。
     &amp;quot;值&amp;quot;:&amp;quot;text/plain&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;date&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;Mon, 29 Nov 2021 19:31:43 GMT&amp;quot;
    },
    {
     &amp;quot;key&amp;quot;:&amp;quot;server&amp;quot;,
     &amp;quot;值&amp;quot;:&amp;quot;envoy&amp;quot;
    }
   ],
   &amp;quot;body&amp;quot;:{
    &amp;quot;truncated&amp;quot;: false,
    &amp;quot;as_bytes&amp;quot;:&amp;quot;aGVsbG8=&amp;quot;
   },
   &amp;quot;拖车&amp;quot;:[]
  }
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意&lt;code&gt;正文&lt;/code&gt;中的 &lt;code&gt;as_bytes&lt;/code&gt; 字段。该值是主体数据的 base64 编码表示（本例中为 &lt;code&gt;hello&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;第二种输出格式是 &lt;code&gt;JSON_BODY_AS_STRING&lt;/code&gt;。与之前的格式不同的是，在 &lt;code&gt;JSON_BODY_AS_STRING中&lt;/code&gt;，主体数据是以字符串的形式写在 &lt;code&gt;as_string&lt;/code&gt; 字段中。当我们知道主体是人类可读的，并且不需要对数据进行 base64 编码时，这种格式很有用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
   &amp;quot;身体&amp;quot;。{
    &amp;quot;truncated&amp;quot;: false,
    &amp;quot;as_string&amp;quot;:&amp;quot;你好&amp;quot;
   },
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他三种格式类型是 &lt;code&gt;PROTO_BINARY&lt;/code&gt;、&lt;code&gt;PROTO_BINARY_LENGTH_DELIMITED&lt;/code&gt; 和 &lt;code&gt;PROTO_TEXT&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PROTO_BINARY&lt;/code&gt; 格式以二进制 proto 格式写入输出。这种格式不是自限性的，这意味着如果水槽写了多个没有任何长度信息的二进制消息，那么数据流将没有用处。如果我们在每个文件中写一个消息，那么输出格式将更容易解析。&lt;/p&gt;
&lt;p&gt;我们也可以使用 &lt;code&gt;PROTO_BINARY_LENGTH_DELIMITED&lt;/code&gt; 格式，其中消息被写成序列元组。每个元组是消息长度（编码为 32 位 protobuf varint 类型），后面是二进制消息。&lt;/p&gt;
&lt;p&gt;最后，我们还可以使用 &lt;code&gt;PROTO_TEXT&lt;/code&gt; 格式，在这种格式下，输出结果以下面的 protobuf 格式写入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http_buffered_trace {
  请求 {
    headers {
      key: &amp;quot;:authority&amp;quot;
      值。&amp;quot;localhost:10000&amp;quot;
    }
    headers {
      key: &amp;quot;:path&amp;quot;
      值。&amp;quot;/&amp;quot;
    }
    headers {
      key: &amp;quot;:method&amp;quot;
      值。&amp;quot;GET&amp;quot;
    }
    headers {
      key: &amp;quot;:scheme&amp;quot;
      值。&amp;quot;http&amp;quot;
    }
    headers {
      key: &amp;quot;user-agent&amp;quot;
      值。&amp;quot;curl/7.64.0&amp;quot;
    }
    headers {
      key: &amp;quot;接受&amp;quot;
      值。&amp;quot;*/*&amp;quot;
    }
    headers {
      key: &amp;quot;debug&amp;quot;
      值。&amp;quot;true&amp;quot;
    }
    headers {
      key: &amp;quot;x-forwarded-proto&amp;quot;
      值。&amp;quot;http&amp;quot;
    }
    headers {
      key: &amp;quot;x-request-id&amp;quot;
      值。&amp;quot;af6e0879-e057-4efc-83e4-846ff4d46efe&amp;quot;
    }
  }
  响应 {
    headers {
      key: &amp;quot;:status&amp;quot;
      值。&amp;quot;500&amp;quot;
    }
    headers {
      key: &amp;quot;content-length&amp;quot;
      值。&amp;quot;5&amp;quot;
    }
    headers {
      key: &amp;quot;content-type&amp;quot;
      值。&amp;quot;text/plain&amp;quot;
    }
    headers {
      key: &amp;quot;date&amp;quot;
      值。&amp;quot;Mon, 29 Nov 2021 22:32:40 GMT&amp;quot;
    }
    headers {
      key: &amp;quot;server&amp;quot;
      值。&amp;quot;envoy&amp;quot;
    }
    body {
      as_bytes:&amp;quot;你好&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;静态配置分接过滤器&#34;&gt;静态配置分接过滤器&lt;/h2&gt;
&lt;p&gt;我们把匹配的配置和输出配置（使用 &lt;code&gt;file_per_tap&lt;/code&gt; 字段）结合起来，静态地配置分接过滤器。&lt;/p&gt;
&lt;p&gt;下面是一个通过静态配置来配置分接过滤器的片段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: envoy.filters.http.tap
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.tap.v3.Tap
    common_config:
      static_config:
        match_config:
          any_match: true
        output_config:
          sinks:
            - 格式。json_body_as_string
              file_per_tap:
                path_prefx: my-tap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述配置将匹配所有的请求，并将输出写入带有 &lt;code&gt;my-tap&lt;/code&gt; 前缀的文件名中。&lt;/p&gt;
&lt;h2 id=&#34;使用-tap-端点配置分接过滤器&#34;&gt;使用 &lt;code&gt;/tap&lt;/code&gt; 端点配置分接过滤器&lt;/h2&gt;
&lt;p&gt;为了使用 &lt;code&gt;/tap&lt;/code&gt; 端点，我们必须在分接过滤器配置中指定 &lt;code&gt;admin_config&lt;/code&gt; 和 &lt;code&gt;config_id&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: envoy.filters.http.tap
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.tap.v3.Tap
    common_config:
      admin_config:
        config_id: my_tap_config_id
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一旦指定，我们就可以向 &lt;code&gt;/tap&lt;/code&gt; 端点发送 POST 请求以配置分接过滤器。例如，下面是配置 &lt;code&gt;my_tap_config_id&lt;/code&gt; 名称所引用的分接过滤器的 POST 正文。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config_id: my_tap_config_id
tap_config:
  match_config:
    any_match: true
  output_config:
    sinks:
      - streaming_admin:{}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们指定匹配配置的格式等同于我们为静态提供的配置所设置的格式。&lt;/p&gt;
&lt;p&gt;使用管理配置和 &lt;code&gt;/tap&lt;/code&gt; 端点的明显优势是，我们可以在运行时更新匹配配置，而且不需要重新启动 Envoy 代理。&lt;/p&gt;
&lt;h1 id=&#34;78-健康检查&#34;&gt;7.8 健康检查&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;/healthcheck/fail&lt;/code&gt; 可用于失败的入站健康检查。端点 &lt;code&gt;/healthcheck/ok用于&lt;/code&gt;恢复失败端点的效果。&lt;/p&gt;
&lt;p&gt;这两个端点都需要使用 HTTP 健康检查过滤器。我们可能会在关闭服务器前或进行完全重启时使用它来耗尽服务器。当调用失败的健康检查选项时，所有的健康检查都将失败，无论其配置如何。&lt;/p&gt;
&lt;h1 id=&#34;80-扩展-envoy&#34;&gt;8.0 扩展 Envoy&lt;/h1&gt;
&lt;p&gt;在本模块中，我们将了解扩展 Envoy 的不同方法。&lt;/p&gt;
&lt;p&gt;我们将更详细地介绍使用 Lua 和 Wasm 过滤器来扩展 Envoy 的功能。&lt;/p&gt;
&lt;p&gt;在本模块结束时，你将了解扩展 Envoy 的不同方法以及如何使用 Lua 和 Wasm 过滤器。&lt;/p&gt;
&lt;h1 id=&#34;81-可扩展性概述&#34;&gt;8.1 可扩展性概述&lt;/h1&gt;
&lt;p&gt;扩展 Envoy 的一种方式是实现不同的过滤器，处理或增强请求。这些过滤器可以生成统计数据，翻译协议，修改请求，等等。&lt;/p&gt;
&lt;p&gt;过滤器的一个例子是 HTTP 过滤器，比如外部的 authz 过滤器和其他内置于 Envoy 二进制的过滤器。&lt;/p&gt;
&lt;p&gt;此外，我们还可以编写我们的过滤器，让 Envoy 动态地加载和运行。我们可以通过正确的顺序声明来决定我们要在过滤器链中的哪个位置运行过滤器。&lt;/p&gt;
&lt;p&gt;我们有几个选择来扩展 Envoy。默认情况下，Envoy 过滤器是用 C++ 编写的。但是，我们可以用 Lua 脚本编写，或者使用 WebAssembly（WASM）来开发其他编程语言的 Envoy 过滤器。&lt;/p&gt;
&lt;p&gt;请注意，与 C++ 过滤器相比，Lua 和 Wasm 过滤器的 API 是有限的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地 C++ API&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个选择是编写本地 C++ 过滤器，然后将其与 Envoy 打包。这就需要我们重新编译 Envoy，并维护我们的版本。如果我们试图解决复杂或高性能的用例，采取这种方式是有意义的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lua 过滤器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二个选择是使用 Lua 脚本。在 Envoy 中有一个 HTTP 过滤器，允许我们定义一个 Lua 脚本，无论是内联还是外部文件，并在请求和响应流程中执行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;瓦斯姆过滤器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后一个选项是基于 Wasm 的过滤器。我们用这个选项把过滤器写成一个单独的 Wasm 模块，Envoy 在运行时动态加载它。&lt;/p&gt;
&lt;p&gt;在接下来的模块中，我们将学习更多关于 Lua 和 Wasm 过滤器的知识。&lt;/p&gt;
&lt;h1 id=&#34;82-lua-过滤器&#34;&gt;8.2 Lua 过滤器&lt;/h1&gt;
&lt;p&gt;Envoy 具有一个内置的 HTTP Lua 过滤器，允许在请求和响应流中运行 Lua 脚本。Lua 是一种可嵌入的脚本语言，主要在嵌入式系统和游戏中流行。Envoy 使用 LuaJIT (Lua 的即时编译器）作为运行时间。LuaJIT 支持的最高 Lua 脚本版本是 5.1，其中一些功能来自 5.2。&lt;/p&gt;
&lt;p&gt;在运行时，Envoy 为每个工作线程创建一个 Lua 环境。正因为如此，没有真正意义上的全局数据。任何在加载时创建和填充的全局数据都可以从每个独立的工作线程中看到。&lt;/p&gt;
&lt;p&gt;Lua 脚本是以同步风格的 coroutines 运行的，即使它们可能执行复杂的异步任务。这使得它更容易编写。Envoy 通过一组 API 执行所有的网络 / 异步处理。当一个异步任务被调用时，Envoy 会暂停脚本的执行，一旦异步操作完成就会恢复。&lt;/p&gt;
&lt;p&gt;我们不应该从脚本中执行任何阻塞性操作，因为这会影响 Envoys 的性能。我们应该只使用 Envoy 的 API 来进行所有的 IO 操作。&lt;/p&gt;
&lt;p&gt;我们可以使用 Lua 脚本修改和 / 或检查请求和响应头、正文和预告片。我们还可以对上游主机进行出站异步 HTTP 调用，或者执行直接响应，跳过任何进一步的过滤器迭代。例如，在 Lua 脚本中，我们可以进行上游的 HTTP 调用并直接响应，而不继续执行其他过滤器。&lt;/p&gt;
&lt;h2 id=&#34;如何配置-lua-过滤器&#34;&gt;如何配置 Lua 过滤器&lt;/h2&gt;
&lt;p&gt;Lua 脚本可以使用 &lt;code&gt;inline_code&lt;/code&gt; 字段进行内联定义，或者使用过滤器上的 &lt;code&gt;source_codes&lt;/code&gt; 字段引用本地文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;名称： envoy.filters.http.lua
typed_config:
  &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.lua.v3.Lua
  inline_code:|
    -- 在请求路径上调用。
    函数 envoy_on_request(request_handle)
      -- 做一些事情。
    结束
    -- 在响应路径上被调用。
    function envoy_on_response(response_handle)
      -- 做一些事情。
    结束
  source_codes:
    myscript.lua:
      文件名。/scripts/myscript.lua
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Envoy 将上述脚本视为全局脚本，对每一个 HTTP 请求都会执行它。在每个脚本中可以定义两个全局函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;函数 envoy_on_request(request_handle)
结束
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;函数 envoy_on_response(response_handle)
结束
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;envoy_on_request&lt;/code&gt; 函数在请求路径上被调用，而 &lt;code&gt;envoy_on_response&lt;/code&gt; 脚本则在响应路径上被调用。每个函数都接收一个句柄，该句柄有不同的定义方法。脚本可以包含响应或请求函数，也可以包含两者。&lt;/p&gt;
&lt;p&gt;我们也有一个选项，可以在虚拟主机、路由或加权集群级别上按路由禁用或改写脚本。&lt;/p&gt;
&lt;p&gt;使用 typed_&lt;code&gt;per_filter_config&lt;/code&gt; 字段来禁用或引用主机、路由或加权集群层面上的现有 Lua 脚本。例如，下面是如何使用 &lt;code&gt;typed_per_filter_config来&lt;/code&gt;引用一个现有的脚本（例如：&lt;code&gt;some-script.lua&lt;/code&gt;）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typed_per_filter_config:
  envoy.filters.http.lua。
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.lua.v3.LuaPerRoute
    name: some-script.lua
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样地，我们可以这样定义 &lt;code&gt;source_code&lt;/code&gt; 和 &lt;code&gt;inline_string&lt;/code&gt; 字段，而不是指定 &lt;code&gt;name&lt;/code&gt; 字段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typed_per_filter_config:
  envoy.filters.http.lua。
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions. filters.http.lua.v3.LuaPerRoute
    source_code:
      inline_string:|
        函数 envoy_on_response(response_handle)
          -- 在响应时做一些事情。
        结束
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;流处理-api&#34;&gt;流处理 API&lt;/h2&gt;
&lt;p&gt;我们在前面提到，&lt;code&gt;request_handle&lt;/code&gt; 和 &lt;code&gt;response_handle&lt;/code&gt; 流句柄会被传递给全局 request 和 response 函数。&lt;/p&gt;
&lt;p&gt;在流句柄上可用的方法包括 &lt;code&gt;Header&lt;/code&gt;、&lt;code&gt;正文&lt;/code&gt;、&lt;code&gt;元数据&lt;/code&gt;、各种日志方法（如 &lt;code&gt;logTrace&lt;/code&gt;、&lt;code&gt;logInfo&lt;/code&gt;、&lt;code&gt;logDebug...&lt;/code&gt;）、&lt;code&gt;httpCall&lt;/code&gt;、&lt;code&gt;连接&lt;/code&gt;等等。你可以在 &amp;ldquo;流处理&amp;rdquo; 中找到完整的方法列表。 Lua filter source code.&lt;/p&gt;
&lt;p&gt;除了流对象外，API 还支持以下对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header object (由 &lt;code&gt;headers()&lt;/code&gt; 方法返回)&lt;/li&gt;
&lt;li&gt;缓冲区对象（由 &lt;code&gt;body()&lt;/code&gt; 方法返回）。&lt;/li&gt;
&lt;li&gt;Dynamic metadata object (由 &lt;code&gt;metadata()&lt;/code&gt; 方法返回)&lt;/li&gt;
&lt;li&gt;Stream info object (由 &lt;code&gt;streamInfo()&lt;/code&gt; 方法返回)&lt;/li&gt;
&lt;li&gt;连接对象（通过 &lt;code&gt;connection()&lt;/code&gt; 方法返回）。&lt;/li&gt;
&lt;li&gt;SSL connection info object (由连接对象的 &lt;code&gt;ssl()&lt;/code&gt; 方法返回)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们将看到如何使用 Lua 实验室中的一些对象和方法。&lt;/p&gt;
&lt;h2 id=&#34;83-webassembly-wasm&#34;&gt;8.3 WebAssembly (Wasm)&lt;/h2&gt;
&lt;p&gt;Wasm 是一种可执行代码的可移植二进制格式，依赖于一个开放的标准。它允许开发人员用他们喜欢的编程语言编写，然后将代码编译成 &lt;strong&gt;Wasm 模块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image16.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“1.95in”}&lt;/p&gt;
&lt;p&gt;Wasm 模块与主机环境隔离，并在一个称为&lt;strong&gt;虚拟机（VM）的&lt;/strong&gt;内存安全沙盒中执行。Wasm 模块使用一个 API 与主机环境进行通信。&lt;/p&gt;
&lt;p&gt;Wasm 的主要目标是在网页上实现高性能应用。例如，假设我们要用 Javascript 构建一个网页应用程序。我们可以用 Go（或其他语言）写一些，并将其编译成一个二进制文件，即 Wasm 模块。然后，我们可以在与 Javascript 网页应用程序相同的沙盒中运行已编译的 Wasm 模块。&lt;/p&gt;
&lt;p&gt;最初，Wasm 被设计为在网络浏览器中运行。然而，我们可以将虚拟机嵌入到其他主机应用程序中，并执行它们。这就是 Envoy 的作用！&lt;/p&gt;
&lt;p&gt;Envoy 嵌入了 V8 虚拟机的一个子集。V8 是一个用 C++ 编写的高性能 JavaScript 和 WebAssembly 引擎，它被用于 Chrome 和 Node.js 等。&lt;/p&gt;
&lt;p&gt;我们在本课程的前面提到，Envoy 使用多线程模式运行。这意味着有一个主线程，负责处理配置更新和执行全局任务。&lt;/p&gt;
&lt;p&gt;除了主线程之外，还有负责代理单个 HTTP 请求和 TCP 连接的工作线程。这些工作线程被设计为相互独立。例如，处理一个 HTTP 请求的工人线程不会受到其他处理其他请求的工人线程的影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image17.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“4.101388888888889in”}&lt;/p&gt;
&lt;p&gt;每个线程拥有它的资源副本，包括 Wasm 虚拟机。这样做的原因是为了避免任何昂贵的跨线程同步，即更高的内存使用率。&lt;/p&gt;
&lt;p&gt;Envoy 在运行时将每个独特的 Wasm 模块（所有 *.wasm 文件）加载到一个独特的 Wasm VM。由于 Wasm VM 不是线程安全的（即，多个线程必须同步访问一个 Wasm VM），Envoy 为每个将执行扩展的线程创建一个单独的 Wasm VM 副本。因此，每个线程可能同时有多个 Wasm VM 在使用。&lt;/p&gt;
&lt;h2 id=&#34;催产剂---wasm&#34;&gt;催产剂 - Wasm&lt;/h2&gt;
&lt;p&gt;我们将使用的 SDK 允许我们编写 Wasm 扩展，这些扩展是 HTTP 过滤器，网络过滤器，或称为 &lt;strong&gt;Wasm 服务&lt;/strong&gt;的专用扩展类型。这些扩展在 Wasm 虚拟机内的工作线程（HTTP 过滤器，网络过滤器）或主线程（Wasm 服务）上执行。正如我们提到的，这些线程是独立的，它们本质上不知道其他线程上发生的请求处理。&lt;/p&gt;
&lt;p&gt;HTTP 过滤器是处理 HTTP 协议的，它对 HTTP 头、主体等进行操作。同样，网络过滤器处理 TCP 协议，对数据帧和连接进行操作。我们也可以说，这两种插件类型是无状态的。&lt;/p&gt;
&lt;p&gt;Envoy 还支持有状态的场景。例如，你可以编写一个扩展，将请求数据、日志或指标等统计信息在多个请求之间进行汇总 &amp;ndash; 这基本上意味着跨越了许多工作线程。对于这种情况，我们会使用 Wasm 服务类型。Wasm 服务类型运行在一个单子虚拟机上；这个虚拟机只有一个实例，它运行在 Envoy 主线程上。你可以用它来汇总无状态过滤器的指标或日志。&lt;/p&gt;
&lt;p&gt;下图显示了 Wasm 服务扩展是如何在主线程上执行的，而不是 HTTP 或网络过滤器，后者是在工作线程上执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image18.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“3.3097222222222222in”}&lt;/p&gt;
&lt;p&gt;事实上，Wasm 服务扩展是在主线程上执行的，并不影响请求延迟。另一方面，网络或 HTTP 过滤器会影响延迟。&lt;/p&gt;
&lt;p&gt;图中显示了在主线程上运行的 Wasm 服务扩展，它使用消息队列 API 订阅队列并接收由运行在工作线程上的 HTTP 过滤器或网络过滤器发送的消息。然后，Wasm 服务扩展可以聚合从工作线程上收到的数据。&lt;/p&gt;
&lt;p&gt;Wasm 服务扩展并不是持久化数据的唯一方法。你也可以呼出 HTTP 或 gRPC APIs。此外，我们可以使用定时器 API 在请求之外执行行动。&lt;/p&gt;
&lt;p&gt;我们提到的 API、消息队列、定时器和共享数据都是由一个叫做 Proxy-Wasm.&lt;/p&gt;
&lt;p&gt;Proxy-Wasm 是一个代理无关的 ABI（应用二进制接口）标准，它规定了代理（我们的主机）和 Wasm 模块如何互动。这些互动是以函数和回调的形式实现的。&lt;/p&gt;
&lt;p&gt;Proxy-Wasm 中的 API 与代理无关，这意味着它们可以与 Envoy 代理以及任何其他代理（例如：Envoy）一起工作。MOSN，例如）实现 Proxy-Wasm 标准。这使得你的 Wasm 过滤器可以在不同的代理之间移植，而且它们并不局限于 Envoy。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image19.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“3.3493055555555555in”}&lt;/p&gt;
&lt;p&gt;当请求进入 Envoy 时，它们会经过不同的过滤器链，被过滤器处理，在链中的某个点，请求数据会流经本地 Proxy-Wasm 扩展。&lt;/p&gt;
&lt;p&gt;这个扩展使用 Proxy-Wasm 接口与运行在虚拟机内的扩展对话。 一旦过滤器处理了数据，该链就会继续，或停止，这取决于从扩展返回的结果。&lt;/p&gt;
&lt;p&gt;基于 Proxy-Wasm 规范，我们可以使用一些特定语言的 SDK 实现来编写扩展。&lt;/p&gt;
&lt;p&gt;在其中一个实验中，我们将使用 Go SDK for Proxy-Wasm 来编写 Go 中的 Proxy-Wasm 插件。&lt;/p&gt;
&lt;p&gt;TinyGo 是一个用于嵌入式系统和 WebAssembly 的编译器。它不支持使用所有的标准 Go 包。例如，不支持一些标准包，如 &lt;code&gt;net&lt;/code&gt; 和其他。&lt;/p&gt;
&lt;p&gt;你还可以选择使用汇编脚本、C++、Rust 或 Zig。&lt;/p&gt;
&lt;h2 id=&#34;配置-wasm-扩展&#34;&gt;配置 Wasm 扩展&lt;/h2&gt;
&lt;p&gt;Envoy 中的通用 Wasm 扩展配置看起来像这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 名称： envoy. filters.http.wasm
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/udpa.type.v1.TypedStruct
    type_url: type.googleapis.com/envoy.extensions. filters.http.wasm.v3.Wasm
    值。
      config:
        vm_config:
          vm_id:&amp;quot;my_vm&amp;quot;
          runtime:&amp;quot;envoy.wasm.runtime.v8&amp;quot;
          配置。
            &amp;quot;@type&amp;quot;: type.googleapis.com/google.protobuf.StringValue
            值：&#39;{&amp;quot;插件-配置&amp;quot;。&amp;quot;some-value&amp;quot;}&#39;
          代码。
            本地。
              文件名： &amp;quot;my-plugin.wasm&amp;quot;
        配置。
          &amp;quot;@类型&amp;quot;： type.googleapis.com/google.protobuf.StringValue
          值：&#39;{&amp;quot;vm-wide-config&amp;quot;:&amp;quot;some-value&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;vm_config&lt;/code&gt; 字段用于指定 Wasm 虚拟机、运行时间，以及我们要执行的&lt;code&gt;.wasm&lt;/code&gt; 扩展的实际指针。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vm_id&lt;/code&gt; 字段在虚拟机之间进行通信时使用。然后这个 ID 可以用来通过共享数据 API 和队列在虚拟机之间共享数据。请注意，要在多个插件中重用虚拟机，你必须使用相同的 &lt;code&gt;vm_id&lt;/code&gt;、运行时间、配置和代码。&lt;/p&gt;
&lt;p&gt;下一个项目是&lt;code&gt;运行时间&lt;/code&gt;。这通常被设置为 &lt;code&gt;envoy.wasm.runtime.v8&lt;/code&gt;。例如，如果我们用 Envoy 编译 Wasm 扩展，我们会在这里使用 &lt;code&gt;null&lt;/code&gt; 运行时。其他选项是 Wasm micro runtime、Wasm VM 或 Wasmtime；&amp;ndash; 不过，这些在官方 Envoy 构建中都没有启用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vm_config&lt;/code&gt; 字段下的配置是用来配置虚拟机本身的。除了虚拟机 ID 和运行时间外，另一个重要的部分是&lt;code&gt;代码&lt;/code&gt;字段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;代码&lt;/code&gt;字段是我们引用编译后的 Wasm 扩展的地方。这可以是一个指向本地文件的指针（例如，&lt;code&gt;/etc/envoy/my-plugin.wasm&lt;/code&gt;）或一个远程位置（例如，&lt;code&gt;https://wasm.example.com/my-plugin.wasm&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;配置文件，一个在 &lt;code&gt;vm_config&lt;/code&gt; 下，另一个在 &lt;code&gt;config&lt;/code&gt; 层，用于为虚拟机和插件提供配置。然后当虚拟机或插件启动时，可以从 Wasm 扩展代码中读取这些值。&lt;/p&gt;
&lt;p&gt;要运行一个 Wasm 服务插件，我们必须在 &lt;code&gt;bootstrap_extensions&lt;/code&gt; 字段中定义配置，并将&lt;code&gt;单子&lt;/code&gt;布尔字段的值设置为真。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bootstrap_extensions。
- name: envoy.bootstrap.wasm
  typed_config:
    &amp;quot;@type&amp;quot;: type.googleapis.com/envoy.extensions.wasm.3.WasmService
    singleton: true
    配置。
      vm_config:{ ...}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;开发-wasm-扩展---proxy-wasm-go-sdk-api&#34;&gt;开发 Wasm 扩展 - Proxy-Wasm Go SDK API&lt;/h2&gt;
&lt;p&gt;在开发 Wasm 扩展时，我们将学习上下文、hostcall API 和入口点。&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;p&gt;上下文是 Proxy-Wasm SDK 中的一个接口集合，并与我们前面解释的概念相匹配。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Users/jimmy/Workspace/github/rootsongjc/rootsongjc-hugo/content/zh/blog/envoy/media/image20.jpeg&#34; alt=&#34;img&#34;&gt;{width=“5.833333333333333in” height=“2.722916666666667in”}&lt;/p&gt;
&lt;p&gt;例如，每个虚拟机中都有一个 &lt;code&gt;VMContext&lt;/code&gt;，可以有一个或多个 &lt;code&gt;PluginContexts&lt;/code&gt;。这意味着我们可以在同一个虚拟机上下文中运行不同的插件（即使用同一个 &lt;code&gt;vm_id&lt;/code&gt; 时）。每个 &lt;code&gt;PluginContext对应&lt;/code&gt;于一个插件实例。那就是 &lt;code&gt;TcpContext&lt;/code&gt;（TCP 网络过滤器）或 &lt;code&gt;HttpContext&lt;/code&gt;（HTTP 过滤器）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VMContext&lt;/code&gt; 接口定义了两个函数：&lt;code&gt;OnVMStart&lt;/code&gt; 函数和 &lt;code&gt;NewPluginContext&lt;/code&gt; 函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type VMContext 接口 {
  OnVMStart(vmConfigurationSize int) OnVMStartStatus
  NewPluginContext(contextID uint32) PluginContext
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;顾名思义，&lt;code&gt;OnVMStart&lt;/code&gt; 在虚拟机创建后被调用。在这个函数中，我们可以使用 &lt;code&gt;GetVMConfiguration &lt;/code&gt;hostcall 检索可选的虚拟机配置。这个函数的目的是执行任何虚拟机范围的初始化。&lt;/p&gt;
&lt;p&gt;作为开发者，我们需要实现 &lt;code&gt;NewPluginContext&lt;/code&gt; 函数，在该函数中我们创建一个 &lt;code&gt;PluginContext&lt;/code&gt; 的实例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PluginContext&lt;/code&gt; 接口定义了与 &lt;code&gt;VMContext类似的&lt;/code&gt;功能。下面是这个接口。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type PluginContext 接口 {
  OnPluginStart(pluginConfigurationSize int) OnPluginStartStatus
  OnPluginDone() bool

  OnQueueReady(queueID uint32)
  控件(OnTick)

  NewTcpContext(contextID uint32) TcpContext
  NewHttpContext(contextID uint32) HttpContext
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;OnPluginStart&lt;/code&gt; 函数与我们前面提到的 &lt;code&gt;OnVMStart&lt;/code&gt; 函数相类似。它在插件被创建时被调用。在这个函数中，我们也可以使用 &lt;code&gt;GetPluginConfiguration &lt;/code&gt;API 来检索插件的特定配置。我们还必须实现 &lt;code&gt;NewTcpContext&lt;/code&gt; 或 &lt;code&gt;NewHttpContext&lt;/code&gt;，在代理中响应 HTTP/TCP 流时被调用。这个上下文还包含一些其他的函数，用于设置队列（&lt;code&gt;OnQueueReady&lt;/code&gt;）或在流处理的同时做异步任务（&lt;code&gt;OnTick&lt;/code&gt;）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中的 &lt;code&gt;context.go&lt;/code&gt; 文件，以获得最新的接口定义。 Proxy Wasm Go SDK Github repository 获取最新的接口定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主机呼叫-api&#34;&gt;主机呼叫 API&lt;/h3&gt;
&lt;p&gt;实现的 hostcall API here，为我们提供了与 Wasm 插件的 Envoy 代理互动的方法。&lt;/p&gt;
&lt;p&gt;hostcall API 定义了读取配置的方法；设置共享队列并执行队列操作；调度 HTTP 调用，从请求和响应流中检索 Header、拖车和正文并操作这些值；配置指标；以及更多。&lt;/p&gt;
&lt;h3 id=&#34;入境点&#34;&gt;入境点&lt;/h3&gt;
&lt;p&gt;插件的入口点是 &lt;code&gt;main&lt;/code&gt; 函数。Envoy 创建了虚拟机，在它试图创建 &lt;code&gt;VMContext&lt;/code&gt; 之前，它调用了 &lt;code&gt;main&lt;/code&gt; 函数。在典型的实现中，我们把 &lt;code&gt;SetVMContext&lt;/code&gt; 方法称为 &lt;code&gt;main&lt;/code&gt; 函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func main() {
  proxywasm.SetVMContext(&amp;amp;myVMContext{})
}

type myVMContext struct { ....}

var _ types.VMContext = &amp;amp;myVMContext{}.
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>服务网格 2021 年终盘点：实用当先，生态为本</title>
      <link>https://jimmysong.io/blog/service-mesh-2021/</link>
      <pubDate>Tue, 11 Jan 2022 17:16:50 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/service-mesh-2021/</guid>
      <description>
        
        
        &lt;p&gt;随着服务网格架构理念的深入人心，它的适用场景也慢慢为众人所了解，社区中也不乏争论，甚至是质疑的声音。笔者以在云原生和服务网格社区中多年的观察，将从亲历者的角度总结服务网格在 2021 年的进展。因为当前在国内 Istio 几乎是服务网格的代名词，本文也将主要从 Istio 的技术和生态层面来解读服务网格在 2021 年的发展。&lt;/p&gt;
&lt;h2 id=&#34;服务网格云原生的核心技术之一&#34;&gt;服务网格：云原生的核心技术之一&lt;/h2&gt;
&lt;p&gt;作为 &lt;a href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md&#34;&gt;CNCF 定义的云原生&lt;/a&gt;关键技术之一，服务网格发展至今已经有五个年头了，其发展经历了以下几个时期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索阶段：2017 年-2018 年&lt;/li&gt;
&lt;li&gt;早期采用者阶段：2019 年-2020 年&lt;/li&gt;
&lt;li&gt;大规模落地及生态发展阶段：2021 年至今&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果根据&lt;a href=&#34;https://thinkinsights.net/strategy/crossing-the-chasm/&#34;&gt;“跨越鸿沟”理论&lt;/a&gt;，服务网格已经跨越了“鸿沟”，处于“早期大众”和“晚期大众”阶段之间。根据&lt;a href=&#34;https://cloudnative.to/sig-istio/big-talk/overview.html&#34;&gt;《Istio 大咖说》&lt;/a&gt;观众中的反馈来看，用户已不再盲从于新技术，开始辩证的考虑&lt;a href=&#34;https://cloudnative.to/sig-istio/begin/before-you-begin.html&#34;&gt;是否真的需要引入服务网格&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gyc468pf0sj318g0p0tax.jpg&#34; alt=&#34;跨越鸿沟理论&#34;&gt;&lt;/p&gt;
&lt;p&gt;云原生的发展方兴未艾，虽然不断有新的技术和产品出现，但作为整个云原生技术栈的一部分，服务网格在过去一年里不断夯实了它作为“云原生网络基础设施”的定位。下图展示了云原生技术栈模型，其中每一层有一些代表性的技术来定义标准。作为新时代的中间件，服务网格与其他云原生技术交相辉映，如 Dapr（分布式应用程序运行时）定义云原生中间件的能力模型，OAM 定义云原生应用程序模型等，而服务网格定义的是云原生七层网络模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gyc4698fi8j30w40u0adk.jpg&#34; alt=&#34;云原生技术栈&#34;&gt;&lt;/p&gt;
&lt;p&gt;图：云原生技术栈&lt;/p&gt;
&lt;h2 id=&#34;社区焦点&#34;&gt;社区焦点&lt;/h2&gt;
&lt;p&gt;过去一年中，社区的焦点主要集中在以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：服务网格在大规模应用场景下的性能问题；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议扩展&lt;/strong&gt;：让服务网格支持任意七层网络协议；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署模式&lt;/strong&gt;：Proxyless vs Node 模式 vs Sidecar 模式；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引入 eBPF&lt;/strong&gt;：将服务网格的部分能力下沉到内核层；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性能优化&#34;&gt;性能优化&lt;/h3&gt;
&lt;p&gt;Istio 设计之初的目标就是通过“原协议转发”的方式服务于服务间流量，让服务网格尽可能对应用程序“透明”，从而使用了 &lt;a href=&#34;https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;IPtables 劫持流量&lt;/a&gt;，根据&lt;a href=&#34;https://istio.io/latest/zh/blog/2019/performance-best-practices/&#34;&gt;社区提供的测试结果&lt;/a&gt;，对于在 16 个连接上具有 1000 RPS 的网格，Istio 1.2 仅增加了 3 毫秒的基准延迟。但是，因为 IPtables conntrack 模块所固有的问题，随着网格规模的扩大，Istio 的性能问题开始显现。关于 Istio sidecar 的资源占用及网络延迟的性能优化，社区给出了以下解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sidecar 配置：通过手动或在控制平面增加一个 Operator 的方式来配置服务的依赖项，可以减少向 Sidecar 中下发的服务配置数量，从而降低数据平面的资源占用；为了更加自动和智能地配置 Sidecar，开源项目 &lt;a href=&#34;https://cloudnative.to/blog/smart-istio-management-plane-slime/&#34;&gt;Slime&lt;/a&gt; 及 &lt;a href=&#34;https://github.com/aeraki-framework/aeraki&#34;&gt;Aeraki&lt;/a&gt; 都给出了各自的配置懒加载方案；&lt;/li&gt;
&lt;li&gt;引入 eBPF：eBPF 可以作为优化服务网格性能的一种可行性方案，有基于 Cilium 的初创公司甚至激进的提出&lt;a href=&#34;https://cloudnative.to/blog/ebpf-solve-service-mesh-sidecar/&#34;&gt;使用 eBPF/Cilium 完全替换 Sidecar 代理&lt;/a&gt;的策略，但事实上 Envoy 代理/xDS 协议已经成为服务网格实现的实际代理，且很好的支持七层协议。eBPF 可用来改善网络性能，但复杂的协议协商、解析和用户扩展在用户侧依然很难实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协议扩展&#34;&gt;协议扩展&lt;/h3&gt;
&lt;p&gt;如何扩展 Istio 一直以来就是一个老大难的问题。Istio 的可扩展包含两方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议层面：让 Istio 支持所有七层协议&lt;/li&gt;
&lt;li&gt;生态层面：让 Istio 可以运行更多的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 使用的是 Envoy 作为数据平面，扩展 Istio 本质上就是对 Envoy 功能的扩展。Istio 官方目前给出的方案是使用 WebAssembly，并在&lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34;&gt; Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&lt;/a&gt;，Istio 的扩展机制使用 &lt;a href=&#34;https://github.com/proxy-wasm/spec&#34;&gt;Proxy-Wasm 应用二进制接口（ABI）&lt;/a&gt;规范，提供了一套代理无关的流媒体 API 和实用功能，可以用任何有合适 SDK 的语言来实现。截至目前，Proxy-Wasm 的 SDK 有 AssemblyScript（类似 TypeScript）、C++、Rust、Zig 和 Go（使用 TinyGo WebAssembly 系统接口）。&lt;/p&gt;
&lt;p&gt;目前 WebAssembly 扩展应用还比较少，很多企业选择自定义 CRD，基于 Istio 构建服务网格管理平面。另外，让 Istio 支持异构环境，适用于一切工作负载，如虚拟机、容器，这个对于终端用户来说也有很强的需求，因为这可以让用户很方便的从传统负载迁移应用到服务网格中。最后是多集群、多网格的混合云流量管理，这个属于比较高阶的需求了。&lt;/p&gt;
&lt;h3 id=&#34;部署模式&#34;&gt;部署模式&lt;/h3&gt;
&lt;p&gt;在服务网格概念兴起之初就有 Per-node 和 Sidecar 模式之争，他们的代表分别是 Linkerd 和 Istio。后来 eBPF 提出将服务网格下沉的内核，从而演化出了更多的服务网格部署模式，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gyc469mwgnj30u00vnadn.jpg&#34; alt=&#34;服务网格的部署模式&#34;&gt;&lt;/p&gt;
&lt;p&gt;图：服务网格的部署模式&lt;/p&gt;
&lt;p&gt;下表中详细对比了这四种部署方式，它们各有优劣，具体选择哪种根据实际情况而定。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;内存开销&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;故障域&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;运维&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sidecar 代理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;因为为每个 pod 都注入一个代理，所以开销最大。&lt;/td&gt;
&lt;td&gt;由于 sidecar 必须与工作负载一起部署，工作负载有可能绕过 sidecar。&lt;/td&gt;
&lt;td&gt;Pod 级别隔离，如果有代理出现故障，只影响到 Pod 中的工作负载。&lt;/td&gt;
&lt;td&gt;可以单独升级某个工作负载的 sidecar 而不影响其他工作负载。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;节点共享代理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;每个节点上只有一个代理，为该节点上的所有工作负载所共享，开销小。&lt;/td&gt;
&lt;td&gt;对加密内容和私钥的管理存在安全隐患。&lt;/td&gt;
&lt;td&gt;节点级别隔离，如果共享代理升级时出现版本冲突、配置冲突或扩展不兼容等问题，则可能会影响该节点上的所有工作负载。&lt;/td&gt;
&lt;td&gt;不需要考虑注入 Sidecar 的问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Account/节点共享代理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;服务账户/身份下的所有工作负载都使用共享代理，开销小。&lt;/td&gt;
&lt;td&gt;工作负载和代理之间的连接的认证及安全性无法保障。&lt;/td&gt;
&lt;td&gt;节点和服务账号之间级别隔离，故障同“节点共享代理”。&lt;/td&gt;
&lt;td&gt;同“节点共享代理”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;带有微代理的共享远程代理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;因为为每个 pod 都注入一个微代理，开销比较大。&lt;/td&gt;
&lt;td&gt;微代理专门处理 mTLS，不负责 L7 路由，可以保障安全性。&lt;/td&gt;
&lt;td&gt;当需要应用7层策略时，工作负载实例的流量会被重定向到L7代理上，若不需要，则可以直接绕过。该L7代理可以采用共享节点代理、每个服务账户代理，或者远程代理的方式运行。&lt;/td&gt;
&lt;td&gt;同“Sidecar 代理”。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表：服务网格的部署模式&lt;/p&gt;
&lt;h3 id=&#34;生态发展&#34;&gt;生态发展&lt;/h3&gt;
&lt;p&gt;2021 年，Istio 社区也是精彩纷呈，举办了系列的活动，还发布了系列教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 月，首个 Istio 发行版，&lt;a href=&#34;https://istio.tetratelabs.io/&#34;&gt; Tetrate Istio Distro（TID）&lt;/a&gt; 发布；&lt;/li&gt;
&lt;li&gt;2 月，第一届 &lt;a href=&#34;https://events.istio.io/istiocon-2021/&#34;&gt;IstioCon&lt;/a&gt; 在线上举办，2000 多人参与了会议；&lt;/li&gt;
&lt;li&gt;3 月，首个免费的线上 &lt;a href=&#34;https://academy.tetrate.io/courses/istio-fundamentals-zh&#34;&gt;Istio 基础教程&lt;/a&gt;发布；&lt;/li&gt;
&lt;li&gt;5 月，首个 &lt;a href=&#34;https://academy.tetrate.io/courses/certified-istio-administrator&#34;&gt;Istio 管理员认证考试（CIAT）&lt;/a&gt;发布；&lt;/li&gt;
&lt;li&gt;5 月，ServiceMeshCon Europe 在线上举办；&lt;/li&gt;
&lt;li&gt;7 月，&lt;a href=&#34;https://istio.io/latest/zh/blog/2021/istiomeetups-china/&#34;&gt;Istio Meetup China&lt;/a&gt; 在北京举办，100 多人现场参加；&lt;/li&gt;
&lt;li&gt;10 月，ServiceMeshCon North America 在洛杉矶举办；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外还有众多与 Istio 服务网格相关的项目开源，如下表所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;项目名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;开源时间&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;主导公司&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Star 数量&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;与 Istio 的关系&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;Envoy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2016年 9 月&lt;/td&gt;
&lt;td&gt;网络代理&lt;/td&gt;
&lt;td&gt;云原生高性能边缘/中间服务代理&lt;/td&gt;
&lt;td&gt;Lyft&lt;/td&gt;
&lt;td&gt;18700&lt;/td&gt;
&lt;td&gt;默认的数据平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/istio/istio/&#34;&gt;Istio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017 年 5 月&lt;/td&gt;
&lt;td&gt;服务网格&lt;/td&gt;
&lt;td&gt;连接、保护、控制和观察服务。&lt;/td&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;29100&lt;/td&gt;
&lt;td&gt;控制平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/linkerd/linkerd2&#34;&gt;Linkerd2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017 年 12 月&lt;/td&gt;
&lt;td&gt;服务网格&lt;/td&gt;
&lt;td&gt;适用于 Kubernetes 的轻量级服务网格。&lt;/td&gt;
&lt;td&gt;Buoyant&lt;/td&gt;
&lt;td&gt;7900&lt;/td&gt;
&lt;td&gt;服务网格的另一种实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/emissary-ingress/emissary&#34;&gt;Emissary Gateway&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2018 年 2 月&lt;/td&gt;
&lt;td&gt;网关&lt;/td&gt;
&lt;td&gt;用于微服务的 Kubernetes 原生 API 网关，基于 Envoy 构建&lt;/td&gt;
&lt;td&gt;Ambassador&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;td&gt;可连接 Istio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/apache/apisix&#34;&gt;APISIX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2019 年 6 月&lt;/td&gt;
&lt;td&gt;网关&lt;/td&gt;
&lt;td&gt;云原生 API 网关&lt;/td&gt;
&lt;td&gt;API7&lt;/td&gt;
&lt;td&gt;8100&lt;/td&gt;
&lt;td&gt;可作为 Istio 的数据平面运行也可以单独作为网关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;MOSN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2019 年 12 月&lt;/td&gt;
&lt;td&gt;代理&lt;/td&gt;
&lt;td&gt;云原生边缘网关及代理&lt;/td&gt;
&lt;td&gt;蚂蚁&lt;/td&gt;
&lt;td&gt;3500&lt;/td&gt;
&lt;td&gt;可作为 Istio 数据平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/slime-io/slime&#34;&gt;Slime&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 1月&lt;/td&gt;
&lt;td&gt;扩展&lt;/td&gt;
&lt;td&gt;基于 Istio 的智能服务网格管理器&lt;/td&gt;
&lt;td&gt;网易&lt;/td&gt;
&lt;td&gt;236&lt;/td&gt;
&lt;td&gt;为 Istio 增加一个管理平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/tetratelabs/getmesh&#34;&gt;Tetrate Istio Distro&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 2 月&lt;/td&gt;
&lt;td&gt;工具&lt;/td&gt;
&lt;td&gt;Istio 集成和命令行管理工具&lt;/td&gt;
&lt;td&gt;Tetrate&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;td&gt;第一个 Istio 开源发行版和多版本管理工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/aeraki-framework/aeraki&#34;&gt;Aeraki&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 3 月&lt;/td&gt;
&lt;td&gt;扩展&lt;/td&gt;
&lt;td&gt;管理 Istio 的任何七层负载&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;330&lt;/td&gt;
&lt;td&gt;扩展多协议支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/mosn/layotto/&#34;&gt;Layotto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 6 月&lt;/td&gt;
&lt;td&gt;运行时&lt;/td&gt;
&lt;td&gt;云原生应用运行时&lt;/td&gt;
&lt;td&gt;蚂蚁&lt;/td&gt;
&lt;td&gt;393&lt;/td&gt;
&lt;td&gt;可以作为 Istio 的数据平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/hango-io/hango-gateway&#34;&gt;Hango Gateway&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 8 月&lt;/td&gt;
&lt;td&gt;网关&lt;/td&gt;
&lt;td&gt;基于 Envoy 和 Istio 构建的 API 网关&lt;/td&gt;
&lt;td&gt;网易&lt;/td&gt;
&lt;td&gt;253&lt;/td&gt;
&lt;td&gt;可与 Istio 集成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：数据统计截止到 2022 年 1 月 6 日。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;回望 2021 年，我们可以看出用户对服务网格的追求更趋实用，作为云原生网络的基础设施，其地位得到进一步夯实，更重要的是服务网格生态渐起。展望 2022 年，有两个值得关注的技术是 eBPF 和 WebAssembly。我们有理由相信，更多的服务网格实践优秀案例出现，在生态和标准化上更进一步。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/ebpf-solve-service-mesh-sidecar/&#34;&gt;告别 Sidecar——使用 eBPF 解锁内核级服务网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/smart-istio-management-plane-slime/&#34;&gt;网易开源 Istio 扩展项目 Slime 简介——基于 Istio 的智能服务网格管理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34;&gt;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/grpc-proxyless-service-mesh/&#34;&gt;基于 GRPC 和 Istio 的无 Sidecar 代理的服务网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/how-ebpf-streamlines-the-service-mesh/&#34;&gt;eBPF 如何简化服务网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/sig-istio/begin/before-you-begin.html&#34;&gt;使用 Isito 前的考虑要素&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>跨越鸿沟：理解鸿沟理论</title>
      <link>https://jimmysong.io/blog/crossing-the-chasm/</link>
      <pubDate>Sun, 09 Jan 2022 10:43:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/crossing-the-chasm/</guid>
      <description>
        
        
        &lt;p&gt;最近为某网站撰写服务网格技术的 2021 年总结，笔者关注该领域也有 4 年时间了，再结合自己最近这几年对云原生行业发展的观察，越发觉得《跨越鸿沟》（Crossing the chasm）这本书中所写的新技术的推广生命周期一一应验了。虽然该理论由 Jeffery Moore 于 1991 年提出，距今已有 30 年时间，但该理论至今依然奏效，另外该理论也在 &lt;a href=&#34;https://www.cncf.io/projects/&#34;&gt;CNCF 项目&lt;/a&gt;的成熟度划分中得到应用，还有人指出过&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34;&gt;云原生技术需要跨越的鸿沟&lt;/a&gt;。本文将为读者分享一些关于” 鸿沟理论 “有关的一些知识，希望能够引发大家对于新技术推广的一些思考。&lt;/p&gt;
&lt;h2 id=&#34;什么是鸿沟理论&#34;&gt;什么是鸿沟理论？&lt;/h2&gt;
&lt;p&gt;鸿沟理论指的就是高科技产品在市场营销过程中遭遇的最大障碍：高科技企业的早期市场和主流市场之间存在着一条巨大的鸿沟，能否顺利跨越鸿沟并进入主流市场，成功赢得实用主义者的支持，就决定了一项高科技产品的成败。实际上每项新技术都会经历鸿沟。关键在予采取适当的策略令高科技企业成功地 “跨越鸿沟”，摩尔在这本书中就告诉了人们一些欠经考验的制胜秘诀。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;基于经典的钟形曲线分布，“跨越鸿沟 &amp;quot; 是一个将新技术的采用随时间推移而可视化的概念：从一小撮早期采用者开始，经过大规模的中端市场，最终进入最抗拒变化的消费者手中。&lt;/p&gt;
&lt;p&gt;1962 年，社会学家 &lt;a href=&#34;https://en.wikipedia.org/wiki/Everett_Rogers&#34;&gt;Everett Rogers&lt;/a&gt; 出版了 &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffusion_of_innovations&#34;&gt;Diffusion of Innovasions&lt;/a&gt;（创新扩散） 一书。在这本书中，他根据消费者的购买行为，将他们分为不同的群体。他以 500 多项扩散研究的结果为基础进行分类。今天，这个模型被称为 “技术采用生命周期”。这个模型全面地描述了新技术产品或创新的采用或接受情况。在《跨越鸿沟》一书中，杰弗里・摩尔根据扩散生命周期中的客户群体，阐述了成功锁定主流消费者的营销技巧。&lt;/p&gt;
&lt;h2 id=&#34;客户群体&#34;&gt;客户群体&lt;/h2&gt;
&lt;p&gt;基于人口学和心理学特征，客户群保护以下五种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者&lt;/li&gt;
&lt;li&gt;早期采用者&lt;/li&gt;
&lt;li&gt;早期大众&lt;/li&gt;
&lt;li&gt;后期大众&lt;/li&gt;
&lt;li&gt;落后者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;crossing-the-chasm.jpg&#34; alt=&#34;跨越鸿沟&#34;&gt;&lt;/p&gt;
&lt;p&gt;图：”鸿沟理论“客户分布情况&lt;/p&gt;
&lt;h2 id=&#34;分布情况&#34;&gt;分布情况&lt;/h2&gt;
&lt;p&gt;正如可以观察到的，技术采用的生命周期有一个钟形曲线。各个分界线大约相当于标准差的落点。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者约占总人口的 2.5%&lt;/li&gt;
&lt;li&gt;早期采用者约占 13.5%&lt;/li&gt;
&lt;li&gt;早期大众和后期大众均为 34%&lt;/li&gt;
&lt;li&gt;落后者占剩余的 16%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个群体都代表着一个独特的心理特征，即心理和人口特征的组合。因此，针对这些群体的营销需要与其他群体完全不同的策略。营销人员通过更好地了解这些群体之间的差异，可以通过正确的营销技术更好地锁定所有这些消费者。&lt;/p&gt;
&lt;h3 id=&#34;创新者&#34;&gt;创新者&lt;/h3&gt;
&lt;p&gt;创新者是技术爱好者。这是第一个有可能投资于你产品的消费者群体。创新者积极地追求新的产品和技术。有时，他们甚至在公司启动正式的营销计划之前就开始寻求创新。这是因为技术在他们的生活或业务中占据了核心利益。对于这个客户群体来说，产品功能组合的完整性或性能是次要的。&lt;/p&gt;
&lt;p&gt;不幸的是，在任何特定的细分市场中，都没有很多创新者（大约 2.5%）。通常情况下，他们不愿意为新产品付出很多。尽管如此，赢得他们是很重要的，因为他们的认可为市场上的其他消费者提供了必要的保证。此外，技术爱好者可以作为一个测试小组，在面向主流市场之前进行必要的修改。&lt;/p&gt;
&lt;h3 id=&#34;早期采用者&#34;&gt;早期采用者&lt;/h3&gt;
&lt;p&gt;和创新者一样，早期采用者也是有远见的人，他们在新产品的生命周期的早期就接受了新产品的概念。然而，与创新者不同，他们不是技术专家。相反，他们是有远见的人，不只是在寻找一种改进，而且是一种革命性的突破。因此，他们愿意承担高风险，尝试新事物。他们是对价格最不敏感的客户群体，对产品的功能设置和性能要求很高。&lt;/p&gt;
&lt;p&gt;早期采用者在做出购买决定时不依赖成熟的参考资料。相反，他们更愿意依靠自己的直觉和眼光。此外，他们愿意作为其他采用者群体的参考。由于有远见的人善于提醒其他人群，他们是最重要的争取对象。&lt;/p&gt;
&lt;h3 id=&#34;早期大众&#34;&gt;早期大众&lt;/h3&gt;
&lt;p&gt;这个客户群由实用主义者组成。前两个采用者群体属于早期市场。然而，为了获得真正的成功，一个公司必须从早期大众开始，赢得主流市场。这些实用主义者与早期采用者有一些相同的能力，能够与技术产生联系。然而，他们受到强烈的实用意识的驱动。他们知道，很多发明最终会成为过眼云烟。因此，在自己投资之前，他们更期望等待，看看其他客户对该技术的使用情况如何。他们希望在进行大量投资之前看到成熟的参考资料。因为这部分人很多（大约 34%），对于任何努力争取大量利润和增长的企业来说，赢得这些人的支持是最基本的。&lt;/p&gt;
&lt;h3 id=&#34;后期大众&#34;&gt;后期大众&lt;/h3&gt;
&lt;p&gt;这个群体主要由保守派组成。后期大众作为一个群体与早期大众一样大（占总人口的 34%）。他们与早期大众有着同样的担忧。此外，他们对传统的信仰远远多于对进步的信仰。早期大众的顾客如果决定购买新技术产品，他们对自己处理该产品的能力感到满意。相比之下，“后期大众 &amp;quot; 的成员则不然。因此，这些保守派更愿意等到某样东西已经成为一种惯例时才购买。&lt;/p&gt;
&lt;h3 id=&#34;落后者&#34;&gt;落后者&lt;/h3&gt;
&lt;p&gt;这个群体是由怀疑论者组成的。这一部分人占总数的 16%。这些人根本不希望与新技术有任何关系。他们唯一一次购买技术产品是当它被深埋在另一个产品中时。这些持怀疑态度的人强烈认为，颠覆性的创新很少能实现他们的承诺。他们总是担心意外的后果。从市场发展的角度来看，落后者通常被认为是不值得追求的。然而，他们对产品功能设置和性能的批评为技术公司提供了宝贵的反馈。&lt;/p&gt;
&lt;h2 id=&#34;鸿沟&#34;&gt;鸿沟&lt;/h2&gt;
&lt;p&gt;在技术采用生命周期中，你可以看到早期采用者和早期大众群体之间的差距。这个差距代表了技术必须跨越的鸿沟。它标志着将左边的群体作为右边的客户群的参考基础而产生的可信度差距。&lt;strong&gt;鸿沟的存在是因为消费者信任属于他们自己的采用者群体的人的推荐。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，这给技术公司带来了一个具有挑战性的困境。&lt;/p&gt;
&lt;p&gt;如果他们还没有从你这里买过东西，你怎么能利用首选参考群体的人呢？&lt;/p&gt;
&lt;p&gt;换句话说，将一个群体的客户作为其他群体的参考是无效的。因此，鸿沟就是这样产生的！&lt;/p&gt;
&lt;p&gt;由于从早期采用者到早期大众的飞跃意味着从早期市场到主流市场的过渡，跨越鸿沟对于新推出的产品 / 技术真正实现市场成功是最重要的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;根据摩尔的说法，成功跨越鸿沟可以通过首先瞄准早期大众中一个非常具体的利基市场来实现。组织试图跨越鸿沟的唯一目标应该是在主流市场上获得一个桥头堡，以创造一个可供参考的实用主义客户群。在这里，细分就是一切：将你所有的营销资源集中在一个特定的细分市场上，并确保你在这个特定的细分市场上成为领导者，然后再去做下一个细分市场。这就是所谓的 “大鱼小池 &amp;quot; 的方法。营销漏斗或 AIDA 模型是一个很好的营销框架，它可以帮助为潜在客户挑选正确的营销技术。此外，确保你的产品提供一个完整的解决方案，并且服务水平高（即整个产品解决方案）。实用主义者对你的产品的用户体验将最终决定他们是否也会激起他们的同行。一旦你在早期大众的不同部分建立了强大的口碑，你就成功地跨越了鸿沟。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;你觉得服务网格目前处于鸿沟理论的哪个阶段呢？你又是何种受众？&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/a305fa93580b&#34;&gt;《Crossing the Chasm》丨 NOTES - jianshu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34;&gt;灵雀云 CTO 陈恺：从 “鸿沟理论” 看云原生，哪些技术能够跨越鸿沟？ - infoq.cn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>网易开源 Istio 扩展项目 Slime 简介——基于 Istio 的智能服务网格管理器</title>
      <link>https://jimmysong.io/blog/slime-intro/</link>
      <pubDate>Wed, 24 Nov 2021 14:43:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/slime-intro/</guid>
      <description>
        
        
        &lt;p&gt;最近我在研究 Istio 生态中的开源项目，&lt;a href=&#34;https://github.com/slime-io/slime/&#34;&gt;Slime&lt;/a&gt; 这个项目开源与 2021 年初，是由网易数帆微服务团队开源的一款基于 Istio 的智能网格管理器。Slime 基于 Kubernetes Operator 实现，可作为 Istio 的 CRD 管理器，无须对 Istio 做任何定制化改造，就可以定义动态的服务治理策略，从而达到自动便捷使用 Istio 和 Envoy 高阶功能的目的。&lt;/p&gt;
&lt;h2 id=&#34;slime-试图解决的问题&#34;&gt;Slime 试图解决的问题&lt;/h2&gt;
&lt;p&gt;Slime 项目的诞生主要为了解决以下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网格内所有服务配置全量下到所有 Sidecar Proxy，导致其消耗大量资源使得应用性能变差的问题&lt;/li&gt;
&lt;li&gt;如何在 Istio 中实现高阶扩展的问题：比如扩展 HTTP 插件；根据服务的资源使用率做到自适应限流&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Slime 解决以上问题的答案是构建 Istio 的控制平面，具体做法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建可拔插控制器&lt;/li&gt;
&lt;li&gt;数据平面监控&lt;/li&gt;
&lt;li&gt;CRD 转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以上方式 Slime 可以实现&lt;strong&gt;配置懒加载&lt;/strong&gt;和&lt;strong&gt;插件管理器&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;slime-架构&#34;&gt;Slime 架构&lt;/h2&gt;
&lt;p&gt;Slime 内部分为三大模块，其架构图如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;slime-internal-arch.jpg&#34; alt=&#34;Slime 内部架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;Slime 内部三大组件为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;slime-boot&lt;/code&gt;：在 Kubernetes 上部署 Slime 模块的 operator。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slime-controller&lt;/code&gt;：Slime 的核心组件，监听 Slime CRD 并将其转换为Istio CRD。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slime-metric&lt;/code&gt;：用于获取服务 metrics 信息的组件，&lt;code&gt;slime-controller&lt;/code&gt; 会根据其获取的信息动态调整服务治理规则。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前 Slime 内置了三个控制器子模块：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;配置懒加载（按需加载）&lt;/strong&gt;：用户无须手动配置 &lt;code&gt;SidecarScope&lt;/code&gt;，Istio 可以按需加载服务配置和服务发现信息；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP 插件管理&lt;/strong&gt;：使用新的 CRD——&lt;code&gt;pluginmanager/envoyplugin&lt;/code&gt; 包装了可读性，摒弃了可维护性较差的 &lt;code&gt;envoyfilter&lt;/code&gt;，使得插件扩展更为便捷；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自适应限流&lt;/strong&gt;：结合监控信息自动调整限流策略；&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是 SidecarScope？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SidecarScope 是在 Istio 1.1 版本中引入的，它并不是一个直接面向用户的配置项，而是 Sidecar 资源的包装器，具体来说就是 &lt;a href=&#34;../config/networking/sidecar.md&#34;&gt;Sidecar 资源&lt;/a&gt;中的 &lt;code&gt;egress&lt;/code&gt; 选项。通过该配置可以减少 Istio 向 Sidecar 下发的数据量，例如只向某个命名空间中的某些服务下发某些 hosts 的访问配置，从而提高应用提高性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用-slime-作为-istio-的控制平面&#34;&gt;使用 Slime 作为 Istio 的控制平面&lt;/h2&gt;
&lt;p&gt;为了解决这些问题，Slime 在 Istio 之上构建了更高层次的抽象，相当于为 Istio 构建了一层管理平面，其工作流程图如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;slime-flow-chart.jpg&#34; alt=&#34;Slime 工作流程图&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slime Operator 根据管理员的配置在 Kubernetes 中完成 Slime 组件的初始化；&lt;/li&gt;
&lt;li&gt;开发者创建符合 Slime CRD 规范的配置并应用到 Kubernetes 集群中；&lt;/li&gt;
&lt;li&gt;Slime 查询 Prometheus 中保存的相关服务的监控数据，结合 Slime CRD 中自适应部分的配置，将 Slime CRD 转换为 Istio CRD，同时将其推送到 Global Proxy 中；&lt;/li&gt;
&lt;li&gt;Istio 监听 Istio CRD 的创建；&lt;/li&gt;
&lt;li&gt;Istio 将 Sidecar Proxy 的配置信息推送到数据平面相应的 Sidecar Proxy 中；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上只是一个对 Slime 工作流程的一个笼统的介绍，更多详细信息请参考 &lt;a href=&#34;https://github.com/slime-io/slime/&#34;&gt;Slime GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置懒加载&#34;&gt;配置懒加载&lt;/h2&gt;
&lt;p&gt;为了解决数据平面中 Sidecar Proxy 资源消耗过大及网络延迟问题，Slime 使用了配置懒加载（按需加载 Sidecar 配置）的方案。该方案的核心思想是向每个 Sidecar Proxy 中只下发其所 Pod 中服务所需的配置，而不是将网格中的所有服务信息全量下发。所以 Slime 需要获取每个服务的调用关系这样才能得到其所需的 Sidecar Proxy 配置。&lt;/p&gt;
&lt;p&gt;Slime 实现 Sidecar Proxy 配置懒加载的方法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让数据平面中的所有服务的首次调用都通过一个 Global Proxy，该 Proxy 可以记录所有服务的调用和依赖信息，根据该依赖信息更新 Istio 中 Sidecar 资源的配置；&lt;/li&gt;
&lt;li&gt;当某个服务的调用链被 VirtualService 中的路由信息重新定义时， Global Proxy 原有记录就失效了，需要一个新的数据结构来维护该服务的调用关系。Slime 创建了名为 &lt;code&gt;ServiceFence&lt;/code&gt;  的 CRD 来维护服务调用关系以解决服务信息缺失问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-global-proxy-初始化服务调用拓扑&#34;&gt;使用 Global Proxy 初始化服务调用拓扑&lt;/h3&gt;
&lt;p&gt;Slime 在数据平面中部署 Global Proxy（也叫做 Global Sidecar，但其与应用的 Pod 不是一对一的关系，笔者更倾向于称其为 Global Proxy），该代理同样使用 Envoy 构建，在每个需要启动配置懒加载的命名空间中部署一个或在整个网格中只部署一个，所有缺失服务发现信息的调用（你也可以手动配置服务调用关系），都会被兜底路由劫持到 Global Proxy，经过其首次转发后，Slime 便可感知到被调用方的信息，然后根据其对应服务的 VirtualService，找到服务名和真实后端的映射关系，将两者的都加入 SidecarScope，以后该服务的调用就不再需要经过 Global Proxy 了。&lt;/p&gt;
&lt;h3 id=&#34;使用-servicefence-维护服务调用拓扑&#34;&gt;使用 ServiceFence 维护服务调用拓扑&lt;/h3&gt;
&lt;p&gt;在使用 Global Proxy 初始化服务调用拓扑后，一旦服务调用链有变动的话怎么办？对此 Slime 创建了 ServiceFence 的 CRD。使用 ServiceFence 可以维护服务名和后端服务的映射关系。Slime 根据其对应服务的 VirtualService，找到 Kubernetes 服务名和真实后端（host）的映射关系，将两者的都加入 Sidecar 的配置中。ServiceFence 管理生成的 SidecarScope 的生命周期，自动清理长时间不用的调用关系，从而避免上述问题。&lt;/p&gt;
&lt;h3 id=&#34;如何开启配置懒加载&#34;&gt;如何开启配置懒加载&lt;/h3&gt;
&lt;p&gt;配置懒加载功能对于终端用户是透明的，只需要 Kubernetes  Service 上打上 &lt;code&gt;istio.dependency.servicefence/status:&amp;quot;true&amp;quot;&lt;/code&gt; 的标签，表明该服务需要开启配置懒加载，剩下的事情交给 Slime Operator 来完成即可。&lt;/p&gt;
&lt;h2 id=&#34;http-插件管理&#34;&gt;HTTP 插件管理&lt;/h2&gt;
&lt;p&gt;Istio 中的插件扩展只能通过 EnvoyFilter 来实现，因为它是 xDS 层面的配置，管理和维护这样的配置需要耗费大量的精力，也极容易出错。因此，Slime 在 EnvoyFilter 的基础上做了一层面向插件的抽象。&lt;/p&gt;
&lt;p&gt;Slime 共有两个 CRD 用于 HTTP 插件管理，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PluginManager&lt;/strong&gt;：配置为哪些负载开启哪些插件，插件的配置顺序即为执行顺序；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EnvoyPlugin&lt;/strong&gt;：EnvoyPlugin 不关心每个插件的具体配置，具体配置会被放在 EnvoyFilter 资源的 &lt;code&gt;patch.typed_config&lt;/code&gt; 结构中透传），EnvoyPlugin 的核心思想是将插件配置在需要的维度中做聚合，从而限定插件的生鲜范围。这样做一方面更加贴合插件使用者的习惯，另一方面也降低了上层配置的冗余，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Slime 中插件管理的详细使用方式请见 &lt;a href=&#34;https://github.com/slime-io/slime/blob/master/doc/zh/plugin_manager.md&#34;&gt;Slime GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;自适应限流&#34;&gt;自适应限流&lt;/h2&gt;
&lt;p&gt;Envoy 内置的限流组件功能单一，只能以实例维度配置限流值，无法做到根据应用负载的自适应限流。Slime 通过与 Prometheus metric server 对接，实时的获取监控情况，来动态配置限流值。&lt;/p&gt;
&lt;p&gt;Slime 自适应限流的流程图如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;slime-smart-limiter.jpg&#34; alt=&#34;Slime 的自适应限流流程图&#34;&gt;&lt;/p&gt;
&lt;p&gt;Slime 的自适应限流的流程分为两部分，一部分为 SmartLimiter 到 EnvoyFilter 的转换，另一部分为获取监控数据。目前 Slime 支持从 Kubernetes Metric Server 获取服务的CPU、内存、副本数等数据。Slime 还对外提供了一套监控数据接口（Metric Discovery Server），通过 MDS，可以将自定义的监控指标同步给限流组件。&lt;/p&gt;
&lt;p&gt;Slime 创建的 CRD &lt;code&gt;SmartLimiter&lt;/code&gt; 用于配置自适应限流。其的配置是接近自然语义，例如希望在 CPU 超过 80% 时触发服务 A 的访问限制，限额为 30QPS，对应的SmartLimiter 定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;microservice.netease.com/v1alpha1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SmartLimiter&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;descriptors&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;action&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;fill_interval&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;seconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;quota&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;30/{pod}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 30为该服务的额度，将其均分给每个 pod，加入有 3 个 pod，则每个 pod 的限流为 10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;condition&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{cpu}&amp;gt;0.8&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 根据监控项{cpu}的值自动填充该模板&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;Slime 开源于 2021 年初，本文发稿时该项目仍处于初级阶段，本文大量参考了杨笛航在云原生社区中的分享 &lt;a href=&#34;https://cloudnative.to/blog/netease-slime/&#34;&gt;Slime：让 Istio 服务网格变得更加高效与智能&lt;/a&gt; 及 Slime 的 &lt;a href=&#34;https://github.com/slime-io/slime&#34;&gt;GitHub&lt;/a&gt;。感兴趣的读者可以关注下这个项目的 GitHub，进一步了解它。&lt;/p&gt;
&lt;p&gt;另外欢迎关注服务网格和 Istio 的朋友加入&lt;a href=&#34;https://cloudnative.to/sig-istio/&#34;&gt;云原生社区 Istio SIG&lt;/a&gt;，一起参与讨论和交流。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/netease-slime/&#34;&gt;Slime：让 Istio 服务网格变得更加高效与智能 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/slime-io/slime/blob/master/README_ZH.md&#34;&gt;Slime GitHub 文档 - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/sidecar/&#34;&gt;Sidecar - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>服务网格现状之我见</title>
      <link>https://jimmysong.io/blog/service-mesh-insight/</link>
      <pubDate>Tue, 23 Nov 2021 16:43:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/service-mesh-insight/</guid>
      <description>
        
        
        &lt;p&gt;本文根据 2021 年 11 月 22 日晚我应极客邦邀请在「极客时间训练营」的直播分享《云原生漫谈：聊聊 Service Mesh 的现状》整理而成。&lt;/p&gt;
&lt;p&gt;本来极客时间是想邀请我分享云原生的，但我觉得那个范围太大，在一次分享中只能泛泛而谈，无法聚焦到一个具体的点，因此我想还是先聚焦在服务网格这一个专题上吧。云原生社区最近倒是在做一个&lt;a href=&#34;https://mp.weixin.qq.com/s/FWUkc1HJobhZgb26pG73Cg&#34;&gt;云原生系列的分享&lt;/a&gt;，大家可以关注下。&lt;/p&gt;
&lt;p&gt;这是我今天分享的大纲：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一探讨下服务网格跟云原生的关系&lt;/li&gt;
&lt;li&gt;第二是给大家陈述下我观察到的目前社区里关于服务网格有哪些争论&lt;/li&gt;
&lt;li&gt;第三是给大家介绍几个服务网格的相关的开源项目&lt;/li&gt;
&lt;li&gt;最后是畅想下服务网格未来的发展&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;服务网格与云原生的关系&#34;&gt;服务网格与云原生的关系&lt;/h2&gt;
&lt;p&gt;首先我们将探讨下服务网格与云原生的关系。&lt;/p&gt;
&lt;h3 id=&#34;服务网格容器编排大战后的产物&#34;&gt;服务网格——容器编排大战后的产物&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp7oq2980j313w0eqq56.jpg&#34; alt=&#34;Docker Swarm vs Kubernetes vs Mesos&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你关注云原生领域足够早的话，应该还会对 2015 到 2017 年间的容器编排大战记忆犹新。关于服务网格的起源已经无需多言。2017 年 Kubernetes 获得了容器大战的胜利，微服务的理念已经深入人心，容器化的趋势可谓势不可挡。Kubernetes 架构趋向成熟，慢慢变得无聊，以 Linkerd、Istio 为代表的服务网格技术进入了 CNCF 定义的云原生关键技术视野中。&lt;/p&gt;
&lt;p&gt;服务网格将微服务中的通用的功能给下沉到了基础设施层，让开发者可以更加专注于业务逻辑，从而加快服务交付，这与整个云原生的理念的一致的。你不需要再在应用中集成笨重的 SDK，为不同语言开发和维护 SDK，应用部署完后，使用服务网格进行 Day 2 操作即可。&lt;/p&gt;
&lt;p&gt;Kubernetes 设计之初就是按照云原生的理念设计的，云原生中有个重要概念就是微服务的架构设计，当将单体应用拆分微服务后， 随着服务数量的增多，如何微服务进行管理以保证服务的 SLA 呢？为了从架构层面上解决这个问题，解放程序员的创造性，避免繁琐的服务发现、监控、分布式追踪等事务，服务网格应运而生。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp7qas2vtj30v70u0whb.jpg&#34; alt=&#34;微服务关注点&#34;&gt;&lt;/p&gt;
&lt;p&gt;来源：&lt;em&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2016/12/09/spring-cloud-for-microservices-compared-to-kubernetes&#34;&gt;https://developers.redhat.com/blog/2016/12/09/spring-cloud-for-microservices-compared-to-kubernetes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;服务网格被誉为下一代微服务，从右面这幅图里我们可以看到微服务的一些关注点，这些关注点很多与 Kubernetes 的功能是重合的，既然这些作为平台级的功能 Kubernetes 已经提供了，为什么还要使用服务网格呢？其实 Kubernetes 关注的还是应用的生命周期，它管理的对象是资源和部署，对于服务的管控力度很小。而服务网格正好弥补了这个缺陷。服务网格可以连接、控制、观察和保护微服务。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-vs-xds-vs-istio&#34;&gt;Kubernetes vs xDS vs Istio&lt;/h3&gt;
&lt;p&gt;这幅图展示的是 Kubernetes 和 Istio 的分层架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gxdhnnh4lxj31820p0gps.jpg&#34; alt=&#34;Kubernetes vs Service mesh&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看到 kube-proxy 的设置是全局的，无法对每个服务进行细粒度的控制，Kubernetes 可以做的只有拓扑感知路由、将流量就近路由，为 Pod 设置进出站的网络策略。&lt;/p&gt;
&lt;p&gt;而服务网格通过 sidecar proxy 的方式将 Kubernetes 中的流量控制从服务层中抽离出来，为每个 Pod 中注入代理，并通过一个控制平面来操控这些分布式代理。这样可以实现更大的弹性。&lt;/p&gt;
&lt;p&gt;Kube-proxy 实现了一个 Kubernetes 服务的多个 pod 实例之间的流量负载均衡，但如何对这些服务之间的流量进行精细化控制–比如将流量按百分比划分给不同的应用版本（这些应用版本都是同一个服务的一部分，但在不同的部署上），或者做金丝雀发布（灰度发布）和蓝绿发布？&lt;/p&gt;
&lt;p&gt;Kubernetes 社区给出了一个使用 Deployment 做金丝雀发布的方法，本质上是通过修改 pod 的标签来给部署的服务分配不同的 pod。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-arch.jpg&#34; alt=&#34;Envoy 架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前在中国最流行的服务网格开源实现是 Istio，也有很多公司对 Istio 进行了二次开发，比如蚂蚁、网易、腾讯等，其实 Istio 是在 Envoy 的基础上开发的，从它开源的第一天起就默认使用了 Envoy 作为它的分布式代理。Envoy 开创性的创造了 xDS 协议，用于分布式网关配置，大大简化了大规模分布式网络的配置。2019 年蚂蚁开源的 MOSN 同样支持了 xDS。Envoy 还是 CNCF 中最早毕业的项目之一，经过大规模的生产应用考验。可以说 Istio 的诞生已经有了很好的基础。&lt;/p&gt;
&lt;p&gt;下表是 Kubernetes、xDS、Istio 三者之间的资源抽象对比。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;xDS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Istio 服务网格&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Endpoint&lt;/td&gt;
&lt;td&gt;Endpoint&lt;/td&gt;
&lt;td&gt;WorkloadEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Route&lt;/td&gt;
&lt;td&gt;VirtualService&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kube-proxy&lt;/td&gt;
&lt;td&gt;Route&lt;/td&gt;
&lt;td&gt;DestinationRule&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kube-proxy&lt;/td&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td&gt;EnvoyFilter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ingress&lt;/td&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td&gt;Gateway&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Cluster&lt;/td&gt;
&lt;td&gt;ServiceEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;kube-proxy 组件、xDS 和 Istio 对流量管理的抽象后，现在我们仅从流量管理的角度来看看这三个组件 / 协议的比较。请注意，三者并不完全等同。Kubernetes 更加注重的是应用层面的流量管理，xDS 是更加抽象的协议层面的配置下发，而 Istio 是服务层面的配置。&lt;/p&gt;
&lt;h3 id=&#34;服务网格云原生网络基础设施&#34;&gt;服务网格——云原生网络基础设施&lt;/h3&gt;
&lt;p&gt;在列举过以上 Kubernetes 和服务网格的对比后，我们可以看出服务网格在云原生应用架构中的地位。那就是构建一个云原生网络基础设施，具体来说就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量管理：控制服务间的流量和API调用流，使调用更可靠，增强不同环境下的网络鲁棒性。&lt;/li&gt;
&lt;li&gt;可观测性：了解服务之间的依赖关系和它们之间的性质和流量，提供快速识别定位问题的能力。&lt;/li&gt;
&lt;li&gt;策略实施：通过配置网格而不是以改变代码的方式来控制服务之间的访问策略。&lt;/li&gt;
&lt;li&gt;服务识别与安全：提供在网格里的服务可识别性和安全性保护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;社区里关于-istio-和服务网格的争论&#34;&gt;社区里关于 Istio 和服务网格的争论&lt;/h2&gt;
&lt;p&gt;然而构建基础设施，可谓牵一发而动全身。理想很丰满，现实很骨感。关于服务网格和 Istio，在社区中也不乏争论。我们来看看有这些争论主要有哪些。&lt;/p&gt;
&lt;p&gt;这里列举了我在社区中观察到的关于 Istio 和服务网格最常见的几个问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有人在生产使用 Istio 吗？&lt;/li&gt;
&lt;li&gt;为 pod 注入 sidecar 后带来的大量资源消耗，影响应用性能？&lt;/li&gt;
&lt;li&gt;Istio 支持的协议有限，不易扩展？&lt;/li&gt;
&lt;li&gt;Istio 太过复杂，老的服务迁移成本太高，业界经验太少，学习曲线陡峭？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个问题，也是很多人刚加入社区和了解这门技术的时候，问的第一个问题，那是有人在生产使用 Istio 吗？&lt;/p&gt;
&lt;p&gt;随着对 Istio 研究的深入，很多人就会抛出第二个问题，为 pod 注入 sidecar 后带来的大量资源消耗，会影响应用性能吗？&lt;/p&gt;
&lt;p&gt;如果能问到第三个问题，说明对 Istio 有比较强的需求了，大多是使用了自定义的 RPC，对 Istio 的协议扩展有需求。
最后一个问题是抱怨 Istio 的概念太过复杂，也没有一个清晰的迁移路径可以使用，学习曲线太过陡峭。&lt;/p&gt;
&lt;p&gt;下面我将一一回答这些问题。&lt;/p&gt;
&lt;h3 id=&#34;istio-架构稳定生产可用生态渐起&#34;&gt;Istio 架构稳定，生产可用，生态渐起&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp7wvt1g8j32yo0nk78g.jpg&#34; alt=&#34;Istio 发布时间表&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先我们来看下 Istio 的发布时间表，1.12 版本在上周刚刚发布，这里列举了从它开源到 1.8 版本发布的时间表。2018 年可以说是服务网格爆发之年，Tetrate 也在这一年成立。自1.5 版本起 Istio 正式确立了当前的架构。Istio 社区也也举办了丰富多彩的活动，2021 年 3 月首届 IstioCon 召开，7 月 Istio Meetup China 在北京举行，2022 年 1 月，Service Mesh Summit 2022 也将在上海举行。&lt;/p&gt;
&lt;p&gt;Istio 有着庞大的社区以及&lt;a href=&#34;https://istio.io/latest/about/case-studies/&#34;&gt;供应商和用户群体&lt;/a&gt;。目前主流公有云全都支持了 Istio 服务网格，如阿里云、华为云、腾讯云、网易云等，Istio 的官网上也列举了几十个社区用户，云原生社区 Istio SIG 还陆续举办了八场 &lt;a href=&#34;https://cloudnative.to/sig-istio/big-talk/overview.html&#34;&gt;Istio 大咖说&lt;/a&gt;，百度、腾讯、网易、小红书、小电科技都来分享过他们的 Istio 实践。&lt;/p&gt;
&lt;p&gt;还有很多企业基于 Istio 做了二次开发或者适配或者为其开发插件，可以说是 Istio 架构已稳定，生产可用，生态正在萌芽中。&lt;/p&gt;
&lt;h3 id=&#34;服务网格对应用性能的影响&#34;&gt;服务网格对应用性能的影响&lt;/h3&gt;
&lt;p&gt;服务网格为了做到对应用程序透明，默认采用了 iptables 流量劫持的方式，当服务数量大的时候会有大量的 iptables 规则，影响网络性能，你可以使用 &lt;a href=&#34;https://cloudnative.to/blog/how-ebpf-streamlines-the-service-mesh/&#34;&gt;eBPF&lt;/a&gt; 这样的技术来提高应用性能，但是该技术对操作系统内核的版本要求比较高，很少有企业能够达到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp81fy0vqj31lq0nq41q.jpg&#34; alt=&#34;Istio 中的智能 DNS 代理&#34;&gt;&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&#34;https://cloudnative.to/blog/istio-dns-proxy/&#34;&gt;https://cloudnative.to/blog/istio-dns-proxy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有一种方式，也是&lt;a href=&#34;https://cloudnative.to/sig-istio/big-talk/ep08.html&#34;&gt;小红书使用的方式&lt;/a&gt;，那就是利用 Istio 1.8 中引入的智能 DNS 代理功能。首先使用 ServiceEntry 定义服务，让所有服务属于一个 VIP 范围，再利用 Istio 的智能 DNS 代理功能，让sidecar只拦截 VIP 网段的流量，这样可以减少 iptables 规则，从而提高性能。如果想深入了解这个做法的细节，大家可以去浏览 &lt;a href=&#34;https://www.bilibili.com/video/BV12b4y187ae/&#34;&gt;Istio 大咖说第八期的分享视频&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Istio 在初期是将整个网格内的所有服务的路由信息全量下发到所有的 proxy sidecar 中，会导致 sidecar 占用大量资源，后来 Istio 引入了 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/sidecar/&#34;&gt;Sidecar 资源&lt;/a&gt;来精细化控制需要下发的代理配置范围，另外还有企业自己开发了配置懒加载功能，例如腾讯云开源的 &lt;a href=&#34;https://github.com/aeraki-framework/aeraki&#34;&gt;Aeraki&lt;/a&gt;、网易开源的 &lt;a href=&#34;https://github.com/slime-io/slime&#34;&gt;Slime&lt;/a&gt; 都可以实现配置懒加载。我们会在 Istio 开源生态中介绍这两个开源项目。&lt;/p&gt;
&lt;p&gt;最后是一个涉及到 Sidecar proxy 运维的问题，如何在保证流量不断的情况下，升级所有 Envoy 代理，这个阿里开源的 &lt;a href=&#34;https://github.com/openkruise/kruise&#34;&gt;OpenKruise&lt;/a&gt; 中的 &lt;a href=&#34;https://xie.infoq.cn/article/23ae6d3f0d0260b4797a708a0&#34;&gt;SidecarSet&lt;/a&gt; 资源已经给出了解决方案。&lt;/p&gt;
&lt;p&gt;另外 Sidecar 的引入带来的资源消耗以及网络延迟也是在合理的范围内，大家可以参考 Istio 官方博客上的 &lt;a href=&#34;https://istio.io/latest/zh/blog/2019/performance-best-practices/&#34;&gt;Service Mesh 基准性能测试&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;扩展-istio-服务网格&#34;&gt;扩展 Istio 服务网格&lt;/h3&gt;
&lt;p&gt;下一个问题是关于扩展 Istio 服务网格的。目前官方社区给出的方案是使用 WebAssembly，目前这种扩展方式在国内用的还比较少，而且性能也堪忧。我观察到的大部分解决方案都是自定义 CRD，基于 Istio 构建服务网格管理平面。&lt;/p&gt;
&lt;p&gt;另外，让 Istio 支持异构环境，适用于一切工作负载，如虚拟机、容器，这个对于终端用户来说也有很强的需求，因为这可以让用户很方便的从传统负载迁移应用到服务网格中。最后是多集群、多网格的混合云流量管理，这个属于比较高阶的需求了。&lt;/p&gt;
&lt;h3 id=&#34;陡峭的学习曲线&#34;&gt;陡峭的学习曲线&lt;/h3&gt;
&lt;p&gt;以下列举的是 Istio 学习资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/&#34;&gt;Istio 官网中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://events.istio.io/istiocon-2021/&#34;&gt;IstioCon 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Istio Meetup China&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tetratelabs/istio-weekly&#34;&gt;Istio 大咖说/Istio Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/sig-istio/&#34;&gt;云原生社区 Istio SIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://academy.tetrate.io/courses/istio-fundamentals-zh&#34;&gt;Istio 基础教程（中文）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://academy.tetrate.io/courses/certified-istio-administrator&#34;&gt;Certified Istio Administrator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 开源至今已有 4 年时间，2018 年时我和敖小剑一起创建了 ServiceMesher 社区，当时组织过 9 次 Service Mesh Meetup，同其他服务网格爱好者一起翻译了 Istio 的官方文档。我还在今年初参与了 IstioCon 2021 的筹办及首届 Istio Meetup China。可以说是亲眼目睹了国内服务网格技术的应用和发展，在这期间也写过和翻译过大量的文章，加入 Tetrate 后，我还参与发布了 Istio 基础教程，免费提供给大家学习。同时 Tetrate 也推出了认证 Istio 管理员考试，用于培养更多行业人才。&lt;/p&gt;
&lt;p&gt;云原生社区组织了 Istio SIG，还推出了 Istio 大咖说直播栏目，为大家分享 Istio 服务网格实践经验。&lt;/p&gt;
&lt;p&gt;下图是 &lt;a href=&#34;https://academy.tetrate.io/courses/istio-fundamentals-zh&#34;&gt;Istio 基础教程&lt;/a&gt;的首页截图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp8rr51ikj31ah0u043i.jpg&#34; alt=&#34;Istio 基础教程（Tetrate 出品）&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你是刚开始接触服务网格和 Istio，可以先从 Istio 基础教程开始学起。这个线上系列课程是图文并茂的中文课程，可以免费参加。&lt;/p&gt;
&lt;p&gt;好了，我们再来了解下服务网格的社区项目。&lt;/p&gt;
&lt;h2 id=&#34;istio-开源生态&#34;&gt;Istio 开源生态&lt;/h2&gt;
&lt;p&gt;下表中罗列的是基于 Istio 的开源项目。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;项目名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;开源时间&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;主导公司&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Star 数量&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;与 Istio 的关系&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;Envoy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2016年 9 月&lt;/td&gt;
&lt;td&gt;网络代理&lt;/td&gt;
&lt;td&gt;云原生高性能边缘/中间服务代理&lt;/td&gt;
&lt;td&gt;Lyft&lt;/td&gt;
&lt;td&gt;18300&lt;/td&gt;
&lt;td&gt;默认的数据平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/istio/istio/&#34;&gt;Istio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2017 年 5 月&lt;/td&gt;
&lt;td&gt;服务网格&lt;/td&gt;
&lt;td&gt;连接、保护、控制和观察服务。&lt;/td&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;28400&lt;/td&gt;
&lt;td&gt;控制平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/emissary-ingress/emissary&#34;&gt;Emissary Gateway&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2018 年 2 月&lt;/td&gt;
&lt;td&gt;网关&lt;/td&gt;
&lt;td&gt;用于微服务的 Kubernetes 原生 API 网关，基于 Envoy 构建&lt;/td&gt;
&lt;td&gt;Ambassador&lt;/td&gt;
&lt;td&gt;3500&lt;/td&gt;
&lt;td&gt;可连接 Istio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/apache/apisix&#34;&gt;APISIX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2019 年 6 月&lt;/td&gt;
&lt;td&gt;网关&lt;/td&gt;
&lt;td&gt;云原生 API 网关&lt;/td&gt;
&lt;td&gt;API7&lt;/td&gt;
&lt;td&gt;7400&lt;/td&gt;
&lt;td&gt;可作为 Istio 的数据平面运行也可以单独作为网关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;MOSN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2019 年 12 月&lt;/td&gt;
&lt;td&gt;代理&lt;/td&gt;
&lt;td&gt;云原生边缘网关及代理&lt;/td&gt;
&lt;td&gt;蚂蚁&lt;/td&gt;
&lt;td&gt;3400&lt;/td&gt;
&lt;td&gt;可作为 Istio 数据平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/slime-io/slime&#34;&gt;Slime&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 1月&lt;/td&gt;
&lt;td&gt;扩展&lt;/td&gt;
&lt;td&gt;基于 Istio 的智能服务网格管理器&lt;/td&gt;
&lt;td&gt;网易&lt;/td&gt;
&lt;td&gt;204&lt;/td&gt;
&lt;td&gt;为 Istio 增加一个管理平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/tetratelabs/getmesh&#34;&gt;GetMesh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 2 月&lt;/td&gt;
&lt;td&gt;工具&lt;/td&gt;
&lt;td&gt;Istio 集成和命令行管理工具&lt;/td&gt;
&lt;td&gt;Tetrate&lt;/td&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;td&gt;实用工具，可用于 Istio 多版本管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/aeraki-framework/aeraki&#34;&gt;Aeraki&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 3 月&lt;/td&gt;
&lt;td&gt;扩展&lt;/td&gt;
&lt;td&gt;管理 Istio 的任何七层负载&lt;/td&gt;
&lt;td&gt;腾讯&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;扩展多协议支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/mosn/layotto/&#34;&gt;Layotto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 6 月&lt;/td&gt;
&lt;td&gt;运行时&lt;/td&gt;
&lt;td&gt;云原生应用运行时&lt;/td&gt;
&lt;td&gt;蚂蚁&lt;/td&gt;
&lt;td&gt;325&lt;/td&gt;
&lt;td&gt;可以作为 Istio 的数据平面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/hango-io/hango-gateway&#34;&gt;Hango Gateway&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021 年 8 月&lt;/td&gt;
&lt;td&gt;网关&lt;/td&gt;
&lt;td&gt;基于 Envoy 和 Istio 构建的 API 网关&lt;/td&gt;
&lt;td&gt;网易&lt;/td&gt;
&lt;td&gt;187&lt;/td&gt;
&lt;td&gt;可与 Istio 集成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从 2017 年 5 月 Istio 开源至今也有 4 年多了，虽然该项目在 GitHub 上已经有很高的关注度，并发布了 10 几个版本，但其开源生态还在萌芽期。这张表列举了 Istio 生态中的开源项目，统计截止到 2021 年 11 月 11 日，表格按照开源时间排序。这些项目在 Istio 服务网格之上增强了网关、扩展和实用工具等。我将挑选其中 2 个来着重分享下。&lt;/p&gt;
&lt;h3 id=&#34;slime基于-istio-的智能服务网格管理器&#34;&gt;Slime：基于 Istio 的智能服务网格管理器&lt;/h3&gt;
&lt;p&gt;Slime 是由网易数帆微服务团队开源的一款基于 Istio 的智能网格管理器。Slime 基于 Kubernetes Operator 实现，可作为 Istio 的 CRD 管理器，无缝对接 Istio，无须做任何定制化改造，定义动态的服务治理策略，从而达到自动便捷使用 Istio 和 Envoy 高阶功能的目的。&lt;/p&gt;
&lt;p&gt;Slime 试图解决以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Istio 中如何实现高阶扩展的问题，比如扩展 HTTP 插件，限流功能比较单薄，无法根据服务的资源使用率做到自适应限流&lt;/li&gt;
&lt;li&gt;解决 Sidecar 配置全量下发消耗大量资源导致应用性能变差的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slime 解决以上问题的答案是构建 Istio 的管理平面，其核心思路是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建可拔插控制器&lt;/li&gt;
&lt;li&gt;数据平面监控&lt;/li&gt;
&lt;li&gt;CRD 转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图是 Istio 作为 Istio 管理平面的流程图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp8td6cowj31i90u0aei.jpg&#34; alt=&#34;Slime 如何作为 Istio 的控制平面&#34;&gt;&lt;/p&gt;
&lt;p&gt;Slime 管理 Istio 的具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slime Operator 根据管理员的配置在 Kubernetes 中完成 Slime 组件的初始化；&lt;/li&gt;
&lt;li&gt;开发者创建符合 Slime CRD 规范的配置并应用到 Kubernetes 集群中；&lt;/li&gt;
&lt;li&gt;Slime 查询 Prometheus 中保存的相关服务的监控数据，结合 Slime CRD 中自适应部分的配置，将 Slime CRD 转换为 Istio CRD，同时将其推送到 Global Proxy 中；&lt;/li&gt;
&lt;li&gt;Istio 监听 Istio CRD 的创建；&lt;/li&gt;
&lt;li&gt;Istio 将 Sidecar Proxy 的配置信息推送到数据平面相应的 Sidecar Proxy 中；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示的 Slime 的内部架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp8uzsj2wj31ac0oktb4.jpg&#34; alt=&#34;Slime 内部架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;作为 Istio 的管理平面，可以将 Slime 的核心看做是 Istio 的一个 Operator。&lt;/p&gt;
&lt;p&gt;Slime 内部分为三大组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;slime-boot&lt;/strong&gt;：在 Kubernetes 上部署 Slime 模块的 operator。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slime-controller&lt;/strong&gt;：Slime 的核心组件，监听 Slime CRD 并将其转换为Istio CRD。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slime-metric&lt;/strong&gt;：用于获取服务 metrics 信息的组件，slime-controller 会根据其获取的信息动态调整服务治理规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图展示的是 Slime 自适应限流的架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp8xghoh2j311k0u0dim.jpg&#34; alt=&#34;Slime 自适应限流架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;Envoy 内置的限流组件功能单一，只能以实例维度配置限流值，无法做到根据应用负载的自适应限流。Slime 通过与 Prometheus metric server 对接，实时的获取监控情况，来动态配置限流值。&lt;/p&gt;
&lt;p&gt;Slime 的自适应限流的流程分为两部分，一部分为 SmartLimiter 到 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/envoy-filter/&#34;&gt;EnvoyFilter&lt;/a&gt; 的转换，另一部分为获取监控数据。目前 Slime 支持从 Kubernetes Metric Server 获取服务的CPU、内存、副本数等数据。Slime 还对外提供了一套监控数据接口（Metric Discovery Server），通过 MDS，可以将自定义的监控指标同步给限流组件。&lt;/p&gt;
&lt;p&gt;Slime 创建的 CRD SmartLimiter 用于配置自适应限流。其的配置是接近自然语义，例如希望在 CPU 超过 80% 时触发服务 A 的访问限制，限额为 30QPS，对应的 SmartLimiter 定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;microservice.netease.com/v1alpha1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SmartLimiter&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;descriptors&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;action&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;fill_interval&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;seconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;quota&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;30/{pod}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 30 为该服务的额度，将其均分给每个 pod，加入有 3 个 pod，则每个 pod 的限流为 10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;condition&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{cpu}&amp;gt;0.8&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 根据监控项{cpu}的值自动填充该模板&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;aeraki在-istio-中管理任何七层协议&#34;&gt;Aeraki：在 Istio 中管理任何七层协议&lt;/h3&gt;
&lt;p&gt;Aeraki 是腾讯云在 2021 年 3 月开源的一个服务网格领域的项目。Aeraki 提供了一个端到端的云原生服务网格协议扩展解决方案，以一种非侵入的方式为 Istio 提供了强大的第三方协议扩展能力，支持在 Istio 中对 Dubbo、Thrift、Redis，以及对私有协议进行流量管理。Aeraki 的架构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp8ytw57sj31f40u0785.png&#34; alt=&#34;Aeraki 架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&#34;https://istio.io/latest/blog/2021/aeraki/&#34;&gt;https://istio.io/latest/blog/2021/aeraki/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 Aeraki 架构图中可以看到，Aeraki 协议扩展解决方案包含了两个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aeraki：Aeraki 作为一个 Istio 增强组件运行在控制面，通过自定义 CRD 向运维提供了用户友好的流量规则配置。Aeraki 将这些流量规则配置翻译为 Envoy 配置，通过 Istio 下发到数据面的 sidecar 代理上。Aeraki 还作为一个 RDS 服务器为数据面的 MetaProtocol Proxy 提供动态路由。Aeraki 提供的 RDS 和 Envoy 的 RDS 有所不同，Envoy RDS 主要为 HTTP 协议提供动态路由，而 Aeraki RDS 旨在为所有基于 MetaProtocol 框架开发的七层协议提供动态路由能力。&lt;/li&gt;
&lt;li&gt;MetaProtocol Proxy：基于 Envoy 实现的一个通用七层协议代理。依托 Envoy 成熟的基础库，MetaProtocol Proxy 是在 Envoy 代码基础上的扩展。它为七层协议统一实现了服务发现、负载均衡、RDS 动态路由、流量镜像、故障注入、本地/全局限流等基础能力，大大降低了在 Envoy 上开发第三方协议的难度，只需要实现编解码的接口，就可以基于 MetaProtocol 快速开发一个第三方协议插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有使用 MetaProtocol Proxy，要让 Envoy 识别一个七层协议，则需要编写一个完整的 TCP filter，这个 filter 需要实现路由、限流、遥测等能力，需要投入大量的人力。对于大部分的七层协议来说，需要的流量管理能力是类似的，因此没有必要在每个七层协议的 filter 实现中重复这部分工作。Aeraki 项目采用了一个 MetaProtocol Proxy 来统一实现这些能力，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metaprotocol-proxy.png&#34; alt=&#34;MetaProtocol Proxy 架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;基于 MetaProtocol Proxy，只需要实现编解码接口部分的代码就可以编写一个新的七层协议 Envoy Filter。除此之外，无需添加一行代码，Aeraki 就可以在控制面提供该七层协议的配置下发和 RDS 动态路由配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metaprotocol-proxy-codec.png&#34; alt=&#34;采用 MetaProtocol 编写 Envoy Filter 的对比&#34;&gt;&lt;/p&gt;
&lt;p&gt;Aeraki + MetaProtocol 套件降低了在 Istio 中管理第三方协议的难度，将 Istio 扩展成为一个支持所有协议的全栈服务网格。目前 Aeraki 项目已经基于 MetaProtocol 实现了 Dubbo 和 Thrift 协议。相对 Envoy 自带的 Dubbo 和 Thrift Filter，基于 MetaProtocol 的 Dubbo 和 Thrift 实现功能更为强大，提供了 RDS 动态路由，可以在不中断存量链接的情况下对流量进行高级的路由管理，并且提供了非常灵活的 Metadata 路由机制，理论上可以采用协议数据包中携带的任意字段进行路由。QQ 音乐和央视频 APP 等业务也正在基于 Aeraki 和 MetaProtocol 进行开发，以将一些私有协议纳入到服务网格中进行管理。&lt;/p&gt;
&lt;p&gt;除此之外，&lt;a href=&#34;https://github.com/aeraki-framework&#34;&gt;Aeraki Framework&lt;/a&gt; 中还提供了 xDS 配置下发优化的 lazyXDS 插件、Consul、etcd、Zookeeper 等各种第三方服务注册表对接适配，Istio 运维实战电子书等工具，旨在解决 Istio 在落地中遇到的各种实际问题，加速服务网格的成熟和产品化。&lt;/p&gt;
&lt;h2 id=&#34;服务网格的未来发展&#34;&gt;服务网格的未来发展&lt;/h2&gt;
&lt;p&gt;最后我想讲一下对于服务网格未来发展的一些看法。&lt;/p&gt;
&lt;h3 id=&#34;让-istio-适用于一切环境和一切工作负载&#34;&gt;让 Istio 适用于一切环境和一切工作负载&lt;/h3&gt;
&lt;p&gt;我们看到了网易、腾讯主要是通过构建 Operator 来扩展 Istio，然而这种扩展对于多集群管理来说并不够用。我们知道我们目前的基础设施很多是在向云原生化或者是容器化转型，那么就存在一个容器、虚拟机等共存的环境。这就是异构环境，这些不同环境的流量如何统一管理呢？其实使用 Istio 是可以做到的。同样是要在 Istio 之上构建一个管理平面，并增加一个抽象层，增加适用于集群管理的 CRD，比如集群流量配置、集群策略配置等。另外还要在每个集群中部署一个 Gateway，统一连接到一个边缘代理，让所有的集群互联。这也是 Tetrate Service Bridge 的产品理念。&lt;/p&gt;
&lt;p&gt;下图展示的 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34;&gt;Tetrate Service Bridge&lt;/a&gt; 架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tsb.png&#34; alt=&#34;image-20211123181346493&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;api-网关与服务网格的融合&#34;&gt;API 网关与服务网格的融合&lt;/h3&gt;
&lt;p&gt;下图展示了使用 Istio Gateway、Kubernetes Ingress、API Gateway 及 NodePort/LB 暴露 Istio mesh 中服务的四种方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gwp935mcd0j31200u0n10.jpg&#34; alt=&#34;访问 Istio 网格中服务的几种方式&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中阴影表示的是 Istio mesh，mesh 中的的流量属于集群内部（东西向）流量，而客户端访问 Kubernetes 集群内服务的流量属于外部（南北向）流量。不过因为 Ingress、Gateway 也是部署在 Kubernetes 集群内的，这些节点访问集群内其他服务的流量就难以归属了。&lt;/p&gt;
&lt;p&gt;在 Istio mesh 中你可以使用多种 Kubernetes Ingress Controller 来充当入口网关，当然你还可以直接使用 Istio 内置的 Istio 网关，对于策略控制、流量管理和用量监控可以直接通过 Istio 网关来完成，这样做的好处是通过 Istio 的控制平面来直接管理网关，而不需要再借助其他工具。但是对于 API 声明周期管理、复杂的计费、协议转换和认证等功能，传统的 API 网关可能更适合你。所以，你可以根据自己的需求来选择，也可以组合使用。&lt;/p&gt;
&lt;p&gt;下表中列出了 Istio Mesh 中暴露服务的四种方式。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;方式&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;控制器&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NodePort/LoadBalancer&lt;/td&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes Ingress&lt;/td&gt;
&lt;td&gt;Ingress Controller&lt;/td&gt;
&lt;td&gt;负载均衡、TLS、虚拟主机、流量路由&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Istio Gateway&lt;/td&gt;
&lt;td&gt;Istio&lt;/td&gt;
&lt;td&gt;负载均衡、TLS、虚拟主机、高级流量路由、其他 Istio 的高级功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;API 网关&lt;/td&gt;
&lt;td&gt;API Gateway&lt;/td&gt;
&lt;td&gt;负载均衡、TLS、虚拟主机、流量路由、API 生命周期管理、权限认证、数据聚合、账单和速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;目前有些传统的反向代理也在向 Service Mesh 方向发展，如 Nginx 构建了 Nginx Service Mesh，Traefik 构建了 Traefik Mesh。还有的 API 网关产品也向 Service Mesh 方向挺进，比如 Kong 发展出了 Kuma。在未来，我们会看到更多 API 网关、反向代理和服务网格的融合产品出现。&lt;/p&gt;
&lt;h3 id=&#34;你是否真的需要服务网格&#34;&gt;你是否真的需要服务网格？&lt;/h3&gt;
&lt;p&gt;在使用服务网格前，请考虑以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的团队多少人里投入服务网格开发？使用 Kubernetes、Istio 的经验？&lt;/li&gt;
&lt;li&gt;你有多少微服务？这些微服务使用什么语言？&lt;/li&gt;
&lt;li&gt;你的服务都运行在哪些平台上？&lt;/li&gt;
&lt;li&gt;你的应用已经容器化并使用 Kubernetes 管理了吗？&lt;/li&gt;
&lt;li&gt;你的服务有多少是部署在虚拟机、有多少是部署到 Kubernetes 集群上，比例如何？&lt;/li&gt;
&lt;li&gt;你的团队有制定转移到云原生架构的计划吗？&lt;/li&gt;
&lt;li&gt;你想使用 Istio 的什么功能？Istio 的稳定性是否能够满足你的需求？&lt;/li&gt;
&lt;li&gt;你是否可以忍受 Istio 带来的性能损耗？&lt;/li&gt;
&lt;li&gt;你选择自建或者采购？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;最后总结一下今天的分享：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从容器编排争霸到服务网格，我们可以看到云原生乃至整个云计算就是标准之争。&lt;/li&gt;
&lt;li&gt;服务网格的目标是成为云原生的网络基础设施，任重而道远。&lt;/li&gt;
&lt;li&gt;服务网格只是云原生庞大技术栈中的一环，不要一叶障目，技术的发展是永无止境的。&lt;/li&gt;
&lt;li&gt;Istio 架构已经稳定，生产可用，生态正处于萌芽中。&lt;/li&gt;
&lt;li&gt;对于终端用户来说适合自己的才是最好的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本人才疏学浅，因为时间的原因，很多内容没有深入展开和探讨，最后欢迎大家加入&lt;a href=&#34;https://cloudnative.to/sig-istio/&#34;&gt;云原生社区 Istio SIG&lt;/a&gt; 一起交流学习 Istio 和服务网格技术。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何理解 Istio Ingress， 它与 API Gateway 有什么区别？</title>
      <link>https://jimmysong.io/blog/istio-servicemesh-api-gateway/</link>
      <pubDate>Fri, 06 Aug 2021 10:22:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/istio-servicemesh-api-gateway/</guid>
      <description>
        
        
        &lt;p&gt;API 网关作为客户端访问后端的入口，已经存在很长时间了，它主要是用来管理”南北向“的流量；近几年服务网格开始流行，它主要是管理系统内部，即“东西向”流量，而像 Istio 这样的服务网格还内置了网关，从而将系统内外部的流量纳入了统一管控。这经常给初次接触 Istio 的人带来困惑——服务网格与 API 网关之间是什么关系？是不是使用了 Istio 就可以替代了 API 网关？Istio 的 API 网关是如何运作的？有哪些方式暴露 Istio mesh 中的服务？这篇文章给为你解答。&lt;/p&gt;
&lt;h2 id=&#34;主要观点&#34;&gt;主要观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;服务网格诞生的初衷是为了解决分布式应用的内部流量的管理问题，而在此之前 API 网关已存在很久了。&lt;/li&gt;
&lt;li&gt;虽然 Istio 中内置了Gateway，但是你仍可以使用自定义的 Ingress Controller 来代理外部流量。&lt;/li&gt;
&lt;li&gt;API 网关和服务网格正朝着融合的方向发展。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何暴露-istio-mesh-中的服务&#34;&gt;如何暴露 Istio mesh 中的服务？&lt;/h2&gt;
&lt;p&gt;下图展示了使用 Istio Gateway、Kubernetes Ingress、API Gateway 及 NodePort/LB 暴露 Istio mesh 中服务的四种方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;api-gateway-istio-service-mesh.jpg&#34; alt=&#34;暴露 Kubernetes 中服务的几种方式&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中阴影表示的是 Istio mesh，mesh 中的的流量属于集群内部（东西向）流量，而客户端访问 Kubernetes 集群内服务的流量属于外部（南北向）流量。不过因为 Ingress、Gateway 也是部署在 Kubernetes 集群内的，这些节点访问集群内其他服务的流量就难以归属了。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方式&lt;/th&gt;
&lt;th&gt;控制器&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NodePort/LoadBalancer&lt;/td&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes Ingress&lt;/td&gt;
&lt;td&gt;Ingress Controller&lt;/td&gt;
&lt;td&gt;负载均衡、TLS、虚拟主机、流量路由&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Istio Gateway&lt;/td&gt;
&lt;td&gt;Istio&lt;/td&gt;
&lt;td&gt;负载均衡、TLS、虚拟主机、高级流量路由、其他 Istio 的高级功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;API 网关&lt;/td&gt;
&lt;td&gt;API Gateway&lt;/td&gt;
&lt;td&gt;负载均衡、TLS、虚拟主机、流量路由、API 生命周期管理、权限认证、数据聚合、账单和速率限制&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;由于 NodePort/LoadBalancer 是 Kubernetes 内置的基本的暴露服务的方式，本文就不讨论这种方式了。下文将对其他三种方式分别作出说明。&lt;/p&gt;
&lt;h2 id=&#34;使用-kubernetes-ingress-暴露服务&#34;&gt;使用 Kubernetes Ingress 暴露服务&lt;/h2&gt;
&lt;p&gt;我们都知道 Kubernetes 集群的客户端是无法直接访问 Pod 的 IP 地址的，因为 Pod 是处于 Kubernetes 内置的一个网络平面中。我们可以将 Kubernetes 内的服务使用 NodePort 或者 LoadBlancer 的方式暴露到集群以外。同时为了支持虚拟主机、隐藏和节省 IP 地址，可以使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;Ingress&lt;/a&gt; 来暴露 Kubernetes 中的服务。Kubernetes Ingress 原理如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kubernetes-ingress.jpg&#34; alt=&#34;使用 Kubernetes Ingress 暴露服务&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单的说，Ingress 就是从 Kubernetes 集群外访问集群的入口，将用户的 URL 请求转发到不同的服务上。Ingress 相当于 Nginx、Apache 等负载均衡方向代理服务器，其中还包括规则定义，即 URL 的路由信息，路由信息得的刷新由 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-controllers&#34;&gt;Ingress controller&lt;/a&gt;来提供。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;networking.k8s.io/v1beta1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ingress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;annotations&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;kubernetes.io/ingress.class&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ingress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;rules&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;host&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin.example.com&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;paths&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;path&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/status/*&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;backend&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;serviceName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;servicePort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的例子中的 &lt;code&gt;kubernetes.io/ingress.class: istio&lt;/code&gt; 注解表明该 Ingress 使用的 Istio Ingress Controller。&lt;/p&gt;
&lt;h2 id=&#34;使用-istio-gateway-暴露服务&#34;&gt;使用 Istio Gateway 暴露服务&lt;/h2&gt;
&lt;p&gt;我们都知道 Istio 是继承 Kubernetes 之后发展出来的一个流行的服务网格实现，它实现了 Kubernetes 没有的一些功能，请参考&lt;a href=&#34;https://jimmysong.io/blog/what-is-istio-and-why-does-kubernetes-need-it/&#34;&gt;什么是 Istio？为什么 Kubernetes 需要 Istio？&lt;/a&gt;简要来说，正是因为 Istio 补足了 Kubernetes 对于云原生应用的流量管理、可观察性和安全方面的短板，使得流量管理变得对应用程序透明，使这部分功能从应用程序中转移到了平台层，成为了云原生基础设施。&lt;/p&gt;
&lt;p&gt;Istio 0.8 以前版本中使用 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;Ingress&lt;/a&gt; 来作为流量入口，其中使用 Envoy 作为 Ingress Controller。在 Istio 0.8 及以后的版本中，Istio 创建了 Gateway 对象。Gateway 和 VirtualService 用于表示 Istio Ingress 的配置模型，Istio Ingress 的缺省实现则采用了和 sidecar 相同的 Envoy 代理。通过该方式，Istio 控制面用一致的配置模型同时控制了入口网关和内部的 sidecar 代理。这些配置包括路由规则，策略检查、遥测收集以及其他服务管控功能。&lt;/p&gt;
&lt;p&gt;Istio Gateway 的功能与 Kubernetes Ingress 类似，它负责进出集群的南北流量。Istio Gateway 描述了一个负载均衡器，用于承载进出服务网格边缘的连接。该规范描述了一组开放端口和这些端口所使用的协议，以及用于负载均衡的 SNI 配置等。&lt;/p&gt;
&lt;p&gt;Istio Gateway 资源本身只能配置L4到L6的功能，例如暴露的端口、TLS 设置等；但 Gateway 可与 VirtualService 绑定，在VirtualService 中可以配置七层路由规则，例如按比例和版本的流量路由，故障注入，HTTP 重定向，HTTP 重写等所有Mesh内部支持的路由规则。&lt;/p&gt;
&lt;p&gt;下面是一个 Gateway 与 VirtualService 绑定的示例。拥有 &lt;code&gt;istio: ingressgateway&lt;/code&gt; 标签的 pod 将作为 Ingress Gateway 并路由对 &lt;code&gt;httpbin.example.com&lt;/code&gt; 虚拟主机的 80 端口的 HTTP 访问，这相当于给 Kubernetes 敞开了一个外部访问的入口。这与使用 Kubernetes Ingress 最大的区别就是，需要我们手动将VirtualService与Gateway 绑定，并指定 Gateway 所在的 pod。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;networking.istio.io/v1alpha3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Gateway&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin-gateway&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selector&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;istio&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ingressgateway&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;servers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;port&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;number&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;http&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;protocol&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;HTTP&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;httpbin.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面这个 VirtualService 通过 &lt;code&gt;gateways&lt;/code&gt; 与上面的网关绑定在了一起，以接受来自该网关的流量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;networking.istio.io/v1alpha3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;VirtualService&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;httpbin.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;gateways&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin-gateway&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;uri&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/status&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;destination&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;number&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;host&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;httpbin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-api-网关暴露服务&#34;&gt;使用 API 网关暴露服务&lt;/h2&gt;
&lt;p&gt;API 网关是位于客户端和后端服务之间的 API 管理工具，一种将客户端接口与后端实现分离的方式，在微服务中得到了广泛的应用。当客户端发出请求时，API 网关会将其分解为多个请求，然后将它们路由到正确的位置，生成响应，并跟踪所有内容。&lt;/p&gt;
&lt;p&gt;API Gateway 是微服务架构体系中的一类型特殊服务，它是所有微服务的入口，它的职责是执行路由请求、协议转换、聚合数据、认证、限流、熔断等。大多数企业 API 都是通过 API 网关部署的。API 网关通常会处理跨 API 服务系统的常见任务，例如用户身份验证、速率限制和统计信息。&lt;/p&gt;
&lt;p&gt;在网格中可以有一个或多个 API Gateway。API 网关的职责有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求路由和版本控制&lt;/li&gt;
&lt;li&gt;方便单体应用到微服务的过渡&lt;/li&gt;
&lt;li&gt;权限认证&lt;/li&gt;
&lt;li&gt;数据聚合：监控和计费&lt;/li&gt;
&lt;li&gt;协议转换&lt;/li&gt;
&lt;li&gt;消息和缓存&lt;/li&gt;
&lt;li&gt;安全和报警&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上很多基本功能比如路由和权限认证通过 Istio Gateway 也可以实现，只是在功能的丰富度和扩展性方面有些成熟的 API Gateway 可能更占优势，不过在 Istio mesh 中再引入 API Gateway 也可能带来一些弊端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入了 API Gateway，需要考虑 API Gateway 本身的部署、运维、负载均衡等场景，增加了后端服务的复杂度&lt;/li&gt;
&lt;li&gt;API Gateway 中承载了大量的接口适配，导致难以维护&lt;/li&gt;
&lt;li&gt;对于部分场景，增加了一跳可能导致性能的降低&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在 Istio mesh 中你可以使用多种 Kubernetes Ingress Controller 来充当入口网关，当然你还可以直接使用 Istio 内置的 Istio 网关，对于策略控制、流量管理和用量监控可以直接通过 Istio 网关来完成，这样做的好处是通过 Istio 的控制平面来直接管理网关，而不需要再借助其他工具。但是对于 API 声明周期管理、复杂的计费、协议转换和认证等功能，传统的 API 网关可能更适合你。所以，你可以根据自己的需求来选择，也可以组合使用。&lt;/p&gt;
&lt;p&gt;目前有些传统的反向代理也在向 Service Mesh 方向发展，如 Nginx 构建了 &lt;a href=&#34;https://www.nginx.com/products/nginx-service-mesh/&#34;&gt;Nginx Service Mesh&lt;/a&gt;，Traefik 构建了 &lt;a href=&#34;https://traefik.io/traefik-mesh/&#34;&gt;Traefik Mesh&lt;/a&gt;。还有的 API 网关产品也向 Service Mesh 方向挺进，比如 Kong 发展出了 &lt;a href=&#34;https://kuma.io&#34;&gt;Kuma&lt;/a&gt;。在未来，我们会看到更多 API 网关、反向代理和服务网格的融合产品出现。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/evolving-kubernetes-networking-with-the-gateway-api/&#34;&gt;利用 Gateway API 发展 Kubernetes 网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/how-to-pick-gateway-for-service-mesh/&#34;&gt;如何为服务网格选择入口网关？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/service-mesh-and-api-gateway/&#34;&gt;Service Mesh 和 API Gateway 关系深度探讨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/using-traefik-ingress-controller-with-istio-service-mesh/&#34;&gt;在 Istio 服务网格中使用 Traefik Ingress Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>新疆北疆房车自驾之旅</title>
      <link>https://jimmysong.io/blog/xinjiang-trip/</link>
      <pubDate>Sat, 31 Jul 2021 12:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/xinjiang-trip/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;xinjiang-hasake.jpg&#34; alt=&#34;在琼库什台村与哈萨克族村民在一起&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摄于新疆维吾尔自治区伊犁哈萨克自治州特克斯县琼库什台村，晓辉和我与哈萨克族村民在一起&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我欲乘风破浪，踏遍黄沙海洋&lt;/p&gt;
&lt;p&gt;与其误会一场，也要不负勇往&lt;/p&gt;
&lt;p&gt;——Jam，《七月上》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天是七月的最后的一天，从今天起我的博客将开通&lt;a href=&#34;https://jimmysong.io/categories/%E6%97%85%E8%A1%8C&#34;&gt;旅行&lt;/a&gt;专栏。距离我从新疆回到北京也快一个星期了，这篇博客用来记录我与&lt;a href=&#34;https://atbug.com/&#34;&gt;张晓辉（Addo Zhang&lt;/a&gt; 在新疆的七日之旅。&lt;/p&gt;
&lt;h2 id=&#34;行程安排&#34;&gt;行程安排&lt;/h2&gt;
&lt;p&gt;因为晓辉最近处于工作变动空档期，而我又远程工作，今年元旦以来都没有到远游（上一次是元旦到云南大理、丽江），因此我们商议了为其七天的新疆北疆房车自驾之旅。&lt;/p&gt;
&lt;p&gt;我们将分别从北京和广州前往乌鲁木齐汇合然后提车出发，车是出发前就在网上预约好的，现场办手续，进行了 2 个小时的使用培训，然后就上路了。因为晓辉是老司机，而山路崎岖，房车又过于笨重，对于我这个新手难以驾驭，我就作为副驾，同时也会在路上工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;path.gif&#34; alt=&#34;行程路线图&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们基本是按照出发前预定的路线走的，整个旅程最精彩的部分应该是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赛里木湖牧民家的烧烤晚餐&lt;/li&gt;
&lt;li&gt;琼库什台原生态草原&lt;/li&gt;
&lt;li&gt;独库公路&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;寄蜉蝣于天地，渺沧海之一粟。&lt;/p&gt;
&lt;p&gt;——苏轼，《前赤壁赋》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;夜宿在赛里木湖北门附近的牧民家旁边，夜晚可以看到璀璨的星空。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;stars.jpg&#34; alt=&#34;赛里木湖的星空&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果说有个地方我想再重走一遍的话，我会选择伊犁哈萨克自治州，如果一定要确定一个具体的村庄的话，那我会选择琼库什台。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;qiongkushitai.jpg&#34; alt=&#34;琼库什台&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们在草原上工作，到哈萨克族老乡家吃饭一起庆祝古尔邦节，教小朋友玩无人机，一起骑马、打篮球，不亦乐乎。大美新疆，我一定会再来的！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生处处知何似，恰似飞鸿踏雪泥。&lt;/p&gt;
&lt;p&gt;——苏轼，《和子由渑池怀旧》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在琼库什台草原上骑马，这也是我第一次骑马，骑着骑着，马自己就跑起来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;horse.jpg&#34; alt=&#34;琼库什台骑马&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;视频&#34;&gt;视频&lt;/h2&gt;
&lt;p&gt;下面是我为本次旅程所剪辑的&lt;a href=&#34;https://www.bilibili.com/video/BV1Ab4y1z7TW/&#34;&gt;视频&lt;/a&gt;，希望大家一键三连（点赞、投币、转发）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;bilibili.jpg&#34; alt=&#34;Bilibili 点播&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;贴士&#34;&gt;贴士&lt;/h2&gt;
&lt;p&gt;对于去气候适宜或稳定的地域的短途旅行，建议租普通的 SUV 即可，如果想睡在野外可以搭帐篷，没必要租房车，因为在房车体积较大，大部分人没有驾驶过房车的经验，开起来会比较吃力，而且房车对于路况要求也比较高，很多沟沟坎坎、野路就没办法通过了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>服务网格之旅——使用 Kubernetes 和 Istio Service Mesh 构建混合云</title>
      <link>https://jimmysong.io/blog/multicluster-management-with-kubernetes-and-istio/</link>
      <pubDate>Mon, 12 Jul 2021 22:22:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/multicluster-management-with-kubernetes-and-istio/</guid>
      <description>
        
        
        &lt;p&gt;这篇文章将带你了解使用 Kubernetes 和 Istio Service Mesh 构建多集群及混合云的过程和需要考虑的问题。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h2&gt;
&lt;p&gt;使用 Kubernetes 可以快速部署一个分布式环境，实现了云的互操作性，统一了云上的控制平面。并提供了 Service、Ingress 和 &lt;a href=&#34;https://kubernetes.io/blog/2021/04/22/evolving-kubernetes-networking-with-the-gateway-api/&#34;&gt;Gateway&lt;/a&gt; 等资源对象来处理应用程序的流量。如下图所示，Kubernetes 中默认使用 Service 做服务注册和发现，服务之间可以使用服务名称来访问。Kubernetes API Server 与集群内的每个节点上的 &lt;code&gt;kube-proxy&lt;/code&gt; 组件通信，为节点创建 iptables 规则，并将请求转发到其他 pod 上。&lt;/p&gt;
&lt;p&gt;假定现在客户端要访问 Kubernetes 中的服务，首先请求会发送到 Ingress/Gateway 上，然后根据 Ingress/Gateway 里的路由配置转发到后端服务上（图中是服务 A），接着服务 A 对服务 B 请求的流量转发轮询到服务 B 的实例上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gsgg6a11l1j31lu0u042s.jpg&#34; alt=&#34;Kubernetes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-多集群管理&#34;&gt;Kubernetes 多集群管理&lt;/h2&gt;
&lt;p&gt;多集群管理最常见的使用场景包括服务流量负载均衡、隔离开发和生产环境、解耦数据处理和数据存储、跨云备份和灾难恢复、灵活分配计算资源、跨区域服务的低延迟访问以及避免厂商锁定等。一个企业内部往往有多个 Kubernetes 集群，由 MultiCluster SIG 开发的 KubeFed 实现 Kubernetes 集群联邦可以实现多集群管理的功能，这使得所有 Kubernetes 集群都通过同一个接口来管理。&lt;/p&gt;
&lt;p&gt;在使用集群联邦时需要解决以下几个通用问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置需要联邦哪些集群&lt;/li&gt;
&lt;li&gt;需要在集群中传播的 API 资源&lt;/li&gt;
&lt;li&gt;配置 API 资源如何分配到不同的集群&lt;/li&gt;
&lt;li&gt;对集群中 DNS 记录注册以实现跨集群的服务发现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是 KubeSphere 的多集群架构，也是最常用的一种 Kubernetes 多集群管理架构，其中 Host Cluster 作为控制平面，有两个成员集群，分别是 West 和 East。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gsgg7a2ojvj31aa0u0491.jpg&#34; alt=&#34;Multicluster&#34;&gt;&lt;/p&gt;
&lt;p&gt;Host 集群需要能够访问 Member 集群的 API Server，Member 集群之间的网络连通性没有要求。管理集群 Host Cluster 独立于其所管理的成员集群，Member Cluster 并不知道 Host Cluster 存在，这样做的好处是当控制平面发生故障时不会影响到成员集群，已经部署的负载仍然可以正常运行，不会受到影响。&lt;/p&gt;
&lt;p&gt;Host 集群同时承担着 API 入口的作用，由 Host Cluster 将对 Member 集群的资源请求转发到 Member 集群，这样做的目的是方便聚合，而且也利于做统一的权限认证。我们看到在 Host Cluster 中有联邦控制平面，其中的 Push Reconciler 会将联邦集群中身份、角色及角色绑定传播到所有成员集群中。&lt;/p&gt;
&lt;h2 id=&#34;istio&#34;&gt;Istio&lt;/h2&gt;
&lt;p&gt;当我们在 Kubernetes 中运行着多语言、多版本的微服务，并需要更细粒度的金丝雀发布和统一的安全策略管理，实现服务间的可观察性时，可以考虑使用 Istio 服务网格。Istio 通过向应用程序 Pod 中注入 sidecar proxy，缺省使用 IPTables 透明得拦截进出应用程序的所有流量，从而实现了应用层到集群中其他启用服务网格的服务的智能应用感知负载均衡，并绕过了初级的 kube-proxy 负载均衡。Istio 控制平面与 Kubernetes API Server 通信可以获取集群中所有注册的服务信息。&lt;/p&gt;
&lt;p&gt;下图展示了 Istio 的基本原理，其中所有节点属于同一个 Kubernetes 集群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gsgg6sdrk2j32v60u0qbb.jpg&#34; alt=&#34;Istio Service Mesh&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可能最终会有至少几个Kubernetes集群，每个集群都承载着微服务。Istio 的多集群部署根据网络隔离、主备情况存在多种&lt;a href=&#34;https://istio.io/latest/docs/setup/install/multicluster/&#34;&gt;部署模式&lt;/a&gt;，可以使用 Istio Operator 部署时通过声明来指定。集群中的这些微服务之间的通信可以通过服务网格来加强。在集群内部，Istio提供通用的通信模式，以提高弹性、安全性和可观察性。&lt;/p&gt;
&lt;p&gt;以上都是关于 Kubernetes 上的应用负载管理，但是对于虚拟机上遗留应用，如何在同一个平面中管理？如何管理多集群中的流量划分、网关和安全性呢？&lt;/p&gt;
&lt;h2 id=&#34;管理平面&#34;&gt;管理平面&lt;/h2&gt;
&lt;p&gt;在 Istio 之上再增加一层抽象，将网关、流量和安全分组管理，并将它们应用到不同的集群和命名空间上。下图展示的是 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34;&gt;Tetrate Service Bridge&lt;/a&gt; 的多租户模型，利用 NGAC 来管理用户的访问权限，同时也有利于构建零信任网络。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gsgg8ndcajj31il0u00z9.jpg&#34; alt=&#34;Management Plane&#34;&gt;&lt;/p&gt;
&lt;p&gt;Istio 提供了工作负载识别，并由强大的 mTLS 加密保护。这种零信任模型比基于源 IP 等拓扑信息来信任工作负载更好。在 Istio 之上构建一个多集群管理的通用控制平面，然后再增加一个管理平面来管理多集群，提供多租户、管理配置、可观察性等功能。&lt;/p&gt;
&lt;p&gt;下图展示的是 Tetrate Service Bridge 的架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gsgg951mknj314g0u0dnf.jpg&#34; alt=&#34;Tetrate Service Bridge&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;使用 Kubernetes 实现了异构集群的互操作性，Istio 将容器化负载和虚拟机负载纳入到一个同一个控制平面内，统一管理集群内的流量、安全和可观察性。但是，随着集群数量、网络环境和用户权限的越发复杂，人们还需要在 Istio 的控制平面至上再构建一层管理平面来进行混合云管理。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何调试 Kubernetes 中的微服务 ——proxy、sidecar 还是 service mesh？</title>
      <link>https://jimmysong.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/</link>
      <pubDate>Mon, 05 Jul 2021 22:22:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/how-to-debug-microservices-in-kubernetes-with-proxy-sidecar-or-service-mesh/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 可以说是目前为止用来运行微服务的最佳载体，但是在调试 Kubernetes 环境中的微服务时的体验可能就没那么友好了。本文将带你了解如何调试 Kubernetes 中的微服务，介绍常用的工具，以及 Istio 的引入为微服务的调试带来的变革。&lt;/p&gt;
&lt;h2 id=&#34;调试微服务与传统单体应用有巨大的不同&#34;&gt;调试微服务与传统单体应用有巨大的不同&lt;/h2&gt;
&lt;p&gt;微服务的调试是一直长期困扰软件开发人员的问题，这在传统的单体应用中不存在，因为开发者可以利用 IDE 中的调试器，为应用程序增加断点、修改环境变量，单步执行等，这些都为软件调试提供了巨大帮助。随着 Kubernetes 的流行，微服务的调试就成了一个棘手的问题，其中相比传统单体应用的调试多了以下问题：&lt;/p&gt;
&lt;h3 id=&#34;多依赖&#34;&gt;多依赖&lt;/h3&gt;
&lt;p&gt;一个微服务往往依赖多个其他微服务，在调试某个微服务时，如何部署其他依赖服务以快速搭建一套最新的 stagging 环境？&lt;/p&gt;
&lt;h3 id=&#34;从本地机器访问&#34;&gt;从本地机器访问&lt;/h3&gt;
&lt;p&gt;微服务在开发者的本地电脑上运行时，通常无法直接访问到 Kubernetes 集群中的服务，如何像调试本地服务一样调试部署在 Kubernetes 集群中的微服务？&lt;/p&gt;
&lt;h3 id=&#34;开发效率低下&#34;&gt;开发效率低下&lt;/h3&gt;
&lt;p&gt;通常情况下，代码从更新到构建成镜像再推送到集群中需要一个漫长的过程，如何加快开发速度？&lt;/p&gt;
&lt;p&gt;我们一起来看下哪些工具能够解决以上问题。&lt;/p&gt;
&lt;h2 id=&#34;工具&#34;&gt;工具&lt;/h2&gt;
&lt;p&gt;调试 Kubernetes 中的微服务的主要解决方案有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxy：在 Kubernetes 集群和本地调试终端中部署一个代理，通过构建一个 VPN，使得本地应用可以直接访问到 Kubernetes 中的服务；&lt;/li&gt;
&lt;li&gt;Sidecar：替换原来应用容器的镜像为开发镜像，可以在这个容器中中对该服务进行调试，同时在要调试的微服务 pod 中注入一个 sidecar 作为辅助工具来同步代码；&lt;/li&gt;
&lt;li&gt;服务网格：要想了解应用的整体情况，就需要在所有微服务中注入 sidecar，这样你就可以获得一个监控全局状态的仪表板；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是实现以上解决方案的三个典型的开源项目，它们分别从不同的角度可以帮助你调试微服务。&lt;/p&gt;
&lt;h3 id=&#34;proxy-模式telepresence&#34;&gt;Proxy 模式：Telepresence&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.telepresence.io/&#34;&gt;Telesprence&lt;/a&gt; 本质上是一个本地代理，该代理将 Kubernetes 集群中的数据卷、环境变量、网络都代理到了本地。下图展示的是 Teleprence 的主要使用场景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;telepresence.jpg&#34; alt=&#34;Proxy 模式：Telepresence&#34;&gt;&lt;/p&gt;
&lt;p&gt;用户需要在本地自主地执行 &lt;code&gt;telepresence&lt;/code&gt; 命令，它会自动将代理部署到 Kubernetes 中，有了该代理之后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地的服务就可以完整的访问到 Kubernetes 集群中的其他服务、环境变量、Secret、ConfigMap 等；&lt;/li&gt;
&lt;li&gt;集群中的服务还能直接访问到本地暴露出来的端点；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是这种方式仍然不够连贯，还需要用户在本地调试时运行多次命令，而且在某些网络环境下可能无法与 Kubernetes 集群建立 VPN 连接。&lt;/p&gt;
&lt;h3 id=&#34;sidecar-模式nocalhost&#34;&gt;Sidecar 模式：Nocalhost&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nocalhost.dev/&#34;&gt;Nocalhost&lt;/a&gt; 是一个基于 Kubernetes 的云端开发环境。要想使用它，你只需要在你的 IDE——VS Code 中安装一个插件即可扩展 Kubernetes，并缩短开发反馈周期。通过为不同的用户创建不同的 namespace，并使用 ServiceAccount 绑定到不同用户角身上时，就可以实现开发环境隔离。同时，Nocalhost 还提供了 Web 控制台和 API，方便管理员来管理不同的开发环境。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sidecar-nocalhost.jpg&#34; alt=&#34;Sidecar 模式：Nocalhost&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;测试&#34;&gt;测试&lt;/h4&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://nocalhost.dev/getting-started.html&#34;&gt;Nocalhost 文档&lt;/a&gt;，我们在 macOS 上安装 Nocalhost，并使用 Minikube 来演示如何调试。&lt;/p&gt;
&lt;p&gt;执行下面的命令安装 Nocalhost 客户端并查看 &lt;code&gt;nhctl&lt;/code&gt; 命令行工具的版本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install nocalhost/repo/nocalhost

nhctl version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们假设你机的 &lt;code&gt;kubeconfig&lt;/code&gt; 文件位于 &lt;code&gt;~/.kube/config&lt;/code&gt;（若不在此位置需要在下面的命令中使用 &lt;code&gt;--kubeconfig&lt;/code&gt; 手动指定） 并拥有 Kubernetes 集群的 admin 角色，执行下面的命令使用 Helm3 在 Kubernetes 上安装 Nocalhost 服务端。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nhctl init demo -n nocalhost 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行下面的命令启动 Minikube 隧道并查看 Nocalhost web 端地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;minikube tunnel
kubectl get service nocalhost-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中访问 &lt;code&gt;http://&amp;lt;EXTERNAL-IP&amp;gt;&lt;/code&gt; 即可，用户名/密码为：&lt;code&gt;admin@admin.com/123456&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要想在 VS Code 中使用，你还想需要创建一个 ServiceAccount 并绑定 admin 角色，然后将该 ServiceAccount 作为 Kubeconfig 文件导出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create serviceaccount my-service-account
kubectl create rolebinding admin --clusterrole&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;admin --serviceaccount&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default:my-service-account
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只要你有一个 Kubernetes 集群，并有集群的 admin 权限，就可以参考 Nocalhost 的文档快速开始试用。在 VS Code 中使用 Nocalhost 插件时需要先为插件中配置 Kubernetes 集群。选择你刚导出的 Kubeconfig 文件或者直接复制文件中的内容粘贴到配置里。然后选择你需要测试的服务，并选择对应的 Dev Container，VS Code 会自动打开一个新的代码窗口。&lt;/p&gt;
&lt;p&gt;下面是以 Istio 官方提供的 &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34;&gt;bookinfo 示例&lt;/a&gt;为例，你可以在本地 IDE 中打开克隆下来的代码，然后点击代码文件旁边的锤子即可进入开发模式。选择对应的 DevContainer，nocalhost 会自动向 pod 中注入一个开发容器 sidecar，并在终端中自动进入该容器，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nocalhost-vs-code.jpg&#34; alt=&#34;Nocalhost VS code 界面&#34;&gt;&lt;/p&gt;
&lt;p&gt;在开发模式中，本地修改代码，无需重新构建镜像，远端开发环境实时生效，这样可以极大的加快开发速度。同时，Nocalhost 还提供了服务端，可用于开发环境和用户权限进行管理，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nocalhost-web-admin.jpg&#34; alt=&#34;Nocalhost web 端&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;service-mesh-模式istio&#34;&gt;Service Mesh 模式：Istio&lt;/h3&gt;
&lt;p&gt;以上使用 proxy 和 sidecar 的方式，一次只能对一个服务进行调试，如果想要掌握服务的全局状况，比如获取的服务的指标，以及通过分布式追踪了解服务的依赖和调用流程，对服务的性能进行调试。这些&lt;a href=&#34;https://istio.io/latest/zh/docs/concepts/observability/&#34;&gt;可观察性&lt;/a&gt;的功能，需要为所有服务统一注入 sidecar 来实现。&lt;/p&gt;
&lt;p&gt;而且，当你的服务正处于从虚拟机迁移到 Kubernetes 的过程中时，使用 Istio 可以将虚拟机与 Kubernetes 纳入一个网络平面中（如下图所示），方便开发者调试和做渐进式的迁移。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;istio-service-mesh.jpg&#34; alt=&#34;Serivce Mesh 模式：Istio&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然要获得这些好处也不是一点“代价”也不没有的，引入 Istio 后，你的 Kubernetes  service 需要遵守 Istio 的&lt;a href=&#34;https://istio.io/latest/zh/docs/ops/deployment/requirements/&#34;&gt;命名规范&lt;/a&gt;，学习使用 &lt;a href=&#34;https://istio.io/latest/docs/ops/diagnostic-tools/istioctl-analyze/&#34;&gt;Istioctl&lt;/a&gt; 命令行和日志的方式来调试微服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;istioctl analyze&lt;/code&gt; 命令来调试集群中的微服务部署情况，可以使用 YAML 文件来检查某个命名空间或整个集群中的资源部署情况。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;istioctl proxy-config secret&lt;/code&gt;  来调试 service mesh 中的 pod 的 secret 被正确的加载并有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 的配置信息在大型的集群部署中传播将会耗时更长并且可能有几秒钟的延迟时间，sidecar 的引入会给服务间调用带来一定延迟。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在应用微服务化和从虚拟机迁移到 Kubernetes 的过程中，开发者需要很多观念和习惯上的转变。通过 proxy 在本地跟 Kubernetes 间构建 VPN，可以方便开发者像调试本地服务一样调试 Kubernetes 中的服务。通过向 pod 中注入 sidecar，可以实现实时调试，加快开发进度。最后，Istio service mesh 真正实现了全局的可观察性，你还可以使用像 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34;&gt;Tetrate Service Bridge&lt;/a&gt; 这样的工具来管理异构平台，帮助你渐渐地从单体应用过度到微服务。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zoom &#43; OBS &#43; B 站直播配置手册</title>
      <link>https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/</link>
      <pubDate>Tue, 25 May 2021 22:22:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/</guid>
      <description>
        
        
        &lt;p&gt;今晚我第一次使用 Zoom + OBS 和马若飞在 B 站上进行了&lt;a href=&#34;https://space.bilibili.com/1698576814&#34;&gt;《Istio 大咖说》&lt;/a&gt;栏目的第一期分享——「Istio 开源四周年回顾与展望」。考虑到很多社区、主播、调音台会有在 B 站或其他平台上直播的需求，特别将我的个人经验分享给大家，欢迎大家补充，我会不断优化直播体验。&lt;/p&gt;
&lt;p&gt;下图是我直播时桌面的情况，使用的设备有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Pro，这个自不必说&lt;/li&gt;
&lt;li&gt;USB 麦克风博雅 BY-500，作为音频输入麦克风&lt;/li&gt;
&lt;li&gt;海康威视外接摄像头，用作第二机位&lt;/li&gt;
&lt;li&gt;iPad，作为直播监视器，同时回答观众的弹幕&lt;/li&gt;
&lt;li&gt;环形补光灯，直播通常是在晚上，光线太暗需要补光&lt;/li&gt;
&lt;li&gt;AirPods Pro，用于监听声音的，不作为音频输入&lt;/li&gt;
&lt;li&gt;静音蓝牙键盘，防止键盘敲击声音影响直播的声音体验&lt;/li&gt;
&lt;li&gt;iPhone，用于和直播讲师私下沟通，这样不会被直播出去&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上这些不是全部都需要的，只要你有一台电脑和一个耳机就可以直播。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;desktop.jpg&#34; alt=&#34;我的桌面&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面是直播时的桌面（请忽略我杂乱的被各种设备占满空间的桌面），下面是我的配置参考。&lt;/p&gt;
&lt;h2 id=&#34;硬件准备&#34;&gt;硬件准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电脑：macOS、Windows 都可以，我是用的是Macbook Pro 2016 年产，配置如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0t9gubjj30wk0jiwl1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外接麦克风：切勿直接使用电脑机身上自带的麦克风，那样会收录电脑风扇的声音，我使用的是博雅 BY-500（400 多块钱） 麦克风，电容式麦克风，指向性比较好，基本没有噪音。&lt;/li&gt;
&lt;li&gt;摄像头：保证电脑上的摄像头可用，因为会议的时候需要开摄像头，或者用外接摄像头也可以。&lt;/li&gt;
&lt;li&gt;网络：确保网速至少 100MB/s 的宽带，因为推流还是比较占用带宽的，而且还需要同时查看直播效果，对下行带宽也有要求。&lt;/li&gt;
&lt;li&gt;另一台可联网设备：用来监控直播效果，可以是手机、iPad 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件准备&#34;&gt;软件准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Zoom：需要 Pro 版，这样才可以举行超过 45 分钟的线上会议，否则会在超时后打断再重新加入，需要准备好账号，中国大陆用户貌似不能再注册？如果没有 zoom，换成其他任何一个会议软件都可以，比如腾讯会议。&lt;/li&gt;
&lt;li&gt;OBS：用来做推流，到&lt;a href=&#34;https://obsproject.com/&#34;&gt;官网&lt;/a&gt;下载最新的版本。&lt;/li&gt;
&lt;li&gt;音频插件 Sunflower：&lt;a href=&#34;https://github.com/mattingalls/Soundflower/releases&#34;&gt;点击跳转到下载页面&lt;/a&gt;，如果安装时遇到系统权限问题，请在命令行中执行 &lt;code&gt;sudo spctl --master-disable&lt;/code&gt; 并在电脑的 &lt;code&gt;系统首选项&lt;/code&gt; 的 &lt;code&gt;安全与隐私&lt;/code&gt; 中批准来自任意途径的软件安装，如果看到有详情页面，点击进去批准软件发行商。&lt;/li&gt;
&lt;li&gt;Bilibili：需要一个 B 站账号，并开通直播间，经过实名认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;obs-配置&#34;&gt;OBS 配置&lt;/h2&gt;
&lt;p&gt;下面是在 Macbook 中安装的 OBS 配置截图。&lt;/p&gt;
&lt;p&gt;需要注意的是输出、音频和视频的配置。请参考图中的配置，尤其注意编码控制、比特率的配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0t9tppnj312t0u0gpv.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0tbb4g8j313m0u0jv1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意分辨率的配置，同时调整电脑屏幕的分辨率为 1440x900，&lt;strong&gt;不要使用太大的分辨率，否则可能导致直播画面黑屏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0tarnvoj31is0p276g.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0tbrclhj31140pkjxy.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;音频配置&#34;&gt;音频配置&lt;/h2&gt;
&lt;p&gt;安装 sunflower 后，在 Midi 设备中创建一个多输出设备，如图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0ta93jfj31060q0n28.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择 Sunflower（2ch）和你想要用来监听系统声音的设备，我是用的是 AirPods，你也可以选择其他耳机，总之不要让麦克风录到这个系统输出的即可。&lt;/p&gt;
&lt;p&gt;还要在 OBS 的麦克风配置里增加下新创建的这个输出设备，这样直播的时候就可以收录你的系统，也就是你的耳机听到的声音了，比如在视频会议中，所有人讲话的声音都会被直播出去。&lt;/p&gt;
&lt;h3 id=&#34;使用独立音频硬件&#34;&gt;使用独立音频硬件&lt;/h3&gt;
&lt;p&gt;如果安装 sunflower 有问题的话，你也可以购买一款独立的音频设备，要知道一台电脑是可以安装多块声卡的，这些声卡可以通过 USB 接口转接，而且价格都很便宜（只要几十块钱），一旦有了多个声卡，你就可以为不同的音频源选择不同的输出，而且可以对它们的音量进行单独单独控制。例如下面这款 USB 外置声卡（非利益相关），即插即用，不需要安装任何软件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ugreen.jpg&#34; alt=&#34;USB 外置声卡&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多路推流多渠道同步直播&#34;&gt;多路推流（多渠道同步直播）&lt;/h2&gt;
&lt;p&gt;因为我们在直播时往往有多个渠道，比如多个 B 站直播间、微信视频号等，如何使用 OBS 同步推流到多个渠道呢？可以使用 &lt;a href=&#34;https://github.com/sorayuki/obs-multi-rtmp&#34;&gt;sorayuki/obs-multi-rtmp&lt;/a&gt; 插件（支持 Windows 和 macOS），注意需要将 OBS 升级到最新版本（至少 27.0.1 版本）。安装完插件，重启 OBS 后就可以看到一个窗口新建多路推流，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gu39v42dlkj60ia0hl0tj02.jpg&#34; alt=&#34;OBS 新建多路推流&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果没有看到该窗口，请点击【视图】-【停靠部件】-【多路推流】即可显示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gu39u3zpknj60f3096gmh02.jpg&#34; alt=&#34;OBS 多路推流选项&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;直播效果&#34;&gt;直播效果&lt;/h2&gt;
&lt;p&gt;下面是当晚直播的 zoom 录制的视频直出，已上传到 &lt;a href=&#34;https://www.bilibili.com/video/BV1jK4y1R7Tk&#34;&gt;B 站&lt;/a&gt;，大家可以感受下画面的清晰度还有声音效果，我还是比较满意的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;bilibili.jpg&#34; alt=&#34;Bilibili&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中只有几个小插曲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为我是用的是 AirPods 蓝牙耳机，戴上耳机的时候我无法确定它要连那个设备（我有两个 iPhone、1 个 iPad、1 个 MacBook 都有可能被脸上）活动开始的时候总是连不上 MacBook，一气之下把其他的苹果设备的蓝牙全关掉，只留下 MacBook 的蓝牙开启，这样可以保证连上 MacBook&lt;/li&gt;
&lt;li&gt;说话的时候忘记了把麦克风静音了&lt;/li&gt;
&lt;li&gt;直播大概进行了 1 个小时的时候，zoom 突然断开了 10 几秒钟后又自动重连，总体来说 zoom 会议还是比较稳定的，1 个小时左右的会议应该不会断连&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;直播开始前的检查&#34;&gt;直播开始前的检查&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电脑屏幕分辨率调整为 1440 x 900&lt;/li&gt;
&lt;li&gt;关闭与直播无关的 APP，减少系统资源占用&lt;/li&gt;
&lt;li&gt;电脑设置为勿扰模式&lt;/li&gt;
&lt;li&gt;使用外接麦克风，切勿直接使用电脑内置的麦克风，会收录风扇及键盘杂音，影响音质&lt;/li&gt;
&lt;li&gt;使用外接耳机，如 AirPods&lt;/li&gt;
&lt;li&gt;音频输出调整为多设备输出，其中包括 Sunflower（2ch）和耳机&lt;/li&gt;
&lt;li&gt;Zoom 会议开始前记得点击录像&lt;/li&gt;
&lt;li&gt;会议开始后检查 B 站直播间，确保声音和画质没有问题&lt;/li&gt;
&lt;li&gt;OBS 推流的时候不用录像，因为 zoom 已经在录了&lt;/li&gt;
&lt;li&gt;直播完成后检查 zoom 生成的视频文件并备份&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最后&#34;&gt;最后&lt;/h2&gt;
&lt;p&gt;直播是除了在线下面对面交流以外，可以跟社区及开源爱好者交流最直接最友好的方式，我会时常发起，感谢大家的关注我主持的直播间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://live.bilibili.com/22230973&#34;&gt;云原生社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://live.bilibili.com/23095515&#34;&gt;Istio Service Mesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关注上面的 B 站账号，获取直播推送提醒。关于 B 站直播，如果你有任何问题或者建议请在下面留言。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 开源四周年回顾与展望</title>
      <link>https://jimmysong.io/blog/istio-4-year-birthday/</link>
      <pubDate>Mon, 24 May 2021 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/istio-4-year-birthday/</guid>
      <description>
        
        
        &lt;p&gt;Istio 是由 &lt;a href=&#34;https://tetrate.io/&#34;&gt;Tetrate&lt;/a&gt; 创始人 Varun Talwar 和谷歌首席工程师 Louis Ryan 命名并在 2017 年 5 月 24 日开源。今天是 Istio 开源四周年，让我们一起来回顾一下 Istio 四年来的发展并展望一下它的未来。&lt;/p&gt;
&lt;h2 id=&#34;istio-的开源历史&#34;&gt;Istio 的开源历史&lt;/h2&gt;
&lt;p&gt;2017 年是 Kubernetes 结束容器编排之战的一年，Google 为了巩固在云原生领域的优势，并弥补 Kubernetes 在服务间流量管理方面的劣势，趁势开源了 Istio。下面是截止目前 Istio 历史上最重要的几次版本发布。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;日期&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2017-05-24&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;正式开源，该版本发布时仅一个命令行工具。确立了功能范围和 sidecar 部署模式，确立的 Envoy 作为默认 sidecar proxy 的地位。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017-10-10&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;支持多运行时环境，如虚拟机。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018-06-01&lt;/td&gt;
&lt;td&gt;0.8&lt;/td&gt;
&lt;td&gt;API 重构。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018-07-31&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;生产就绪，此后 Istio 团队被大规模重组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019-03-19&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;企业就绪，支持多 Kubernetes 集群，性能优化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020-03-03&lt;/td&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td&gt;回归单体架构，支持 WebAssembly 扩展，使得 Istio 的生态更加强大。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020-11-18&lt;/td&gt;
&lt;td&gt;1.8&lt;/td&gt;
&lt;td&gt;正式放弃 Mixer，进一步完善对虚拟机的支持。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Istio 开源后经过了一年时间的发展，在 1.0 发布的前两个月发布了 0.8 版本，这是对 API 的一次大规模重构。而在 2018 年 7 月底发布 1.0 时， Istio 达到了生产可用的临界点，此后 Google 对 Istio 团队进行了大规模重组，多家以 Istio 为基础的 Service Mesh &lt;a href=&#34;https://istio.io/latest/about/ecosystem/#providers&#34;&gt;创业公司&lt;/a&gt;诞生，可以说 2018 年是服务网格行业诞生的元年。&lt;/p&gt;
&lt;p&gt;2019年 3 月 Istio 1.1 发布，而这距离 1.0 发布已经过去了近 9 个月，这已经远远超出一个开源项目的平均发布周期。我们知道迭代和进化速度是基础软件的核心竞争力，此后 Istio 开始以每个季度一个版本的固定&lt;a href=&#34;https://istio.io/v1.7/about/release-cadence/&#34;&gt;发布节奏&lt;/a&gt;，并在 2019 年成为了 &lt;a href=&#34;https://octoverse.github.com/#fastest-growing-oss-projects-by-contributors&#34;&gt;GitHub 增长最快的十大项目中排名第 4 名&lt;/a&gt;！&lt;/p&gt;
&lt;h2 id=&#34;istio-社区&#34;&gt;Istio 社区&lt;/h2&gt;
&lt;p&gt;Istio 开源四年来，已经在 GitHub 上收获了 2.7 万颗星，获得了大量的&lt;a href=&#34;https://istio.io/latest/about/case-studies/&#34;&gt;社区用户&lt;/a&gt;。下图是 &lt;a href=&#34;https://github.com/istio/istio&#34;&gt;Istio&lt;/a&gt; 的 GitHub star 数增长情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqtm7n2hm1j31me0n2tag.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2020 年 Istio 的项目管理开始走向成熟，治理方式也到了进化的阶段。2020 年，Istio 社区进行了第一次&lt;a href=&#34;https://istio.io/latest/blog/2020/steering-election-results/&#34;&gt;管委会选举&lt;/a&gt;，还把商标转让给了 &lt;a href=&#34;https://istio.io/latest/blog/2020/open-usage/&#34;&gt;Open Usage Commons&lt;/a&gt;。首届 &lt;a href=&#34;https://events.istio.io/istiocon-2021/&#34;&gt;IstioCon&lt;/a&gt; 在 2021 年 2 月份成功举办，几千人参加了线上会议。在中国也有大量的 Istio 社区用户，2021 年也会有线下面对面的 Istio 社区 meetup 在中国举办。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gquicfqg14j31lw0smwl2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据 CNCF 2020 年调查，46% 的组织在生产中使用服务网格或计划在未来 12 个月内使用。Istio 是在生产中使用的最多的网格。&lt;/p&gt;
&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;
&lt;p&gt;经过 4 年的发展，围绕 Istio 不仅形成了庞大的用户群，还诞生了多家 Istio 供应商，你可以在最近改版的 &lt;a href=&#34;https://istio.io&#34;&gt;Istio 的官网首页&lt;/a&gt;中看到。在最近几个版本中，Istio 已经将发展中心转移到了提升 Day 2 Operation 体验上来了。我们还希望看到更多的 Istio 的采纳路径建议、案例研究、学习资料、培训及认证（例如来自 Tetrate 的业界的第一个 &lt;a href=&#34;https://academy.tetrate.io/courses/certified-istio-administrator&#34;&gt;Istio 管理员认证&lt;/a&gt;），这些都将有利于 Istio 的推广和采用。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>什么是 Istio？为什么 Kubernetes 需要 Istio？</title>
      <link>https://jimmysong.io/blog/what-is-istio-and-why-does-kubernetes-need-it/</link>
      <pubDate>Wed, 28 Apr 2021 09:06:14 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/what-is-istio-and-why-does-kubernetes-need-it/</guid>
      <description>
        
        
        &lt;p&gt;Istio 是当前&lt;a href=&#34;https://www.cncf.io/blog/2020/03/04/2019-cncf-survey-results-are-here-deployments-are-growing-in-size-and-speed-as-cloud-native-adoption-becomes-mainstream/&#34;&gt;最流行的服务网格实现&lt;/a&gt;，它是在 Kubernetes 的基础上开发的，它跟 Kubernetes 在云原生应用的生态中拥有着不同的定位。本文不是直接为你介绍 Istio 具有哪些功能，而是先向你介绍 Istio 诞生的历史条件，然后带你从 Kubernetes 与 Istio 的分工开始，了解什么是 Istio。&lt;/p&gt;
&lt;p&gt;要想解释什么是 Istio，还得先了解 Istio 是在什么样的情况下出现的——即为什么会有 Istio？&lt;/p&gt;
&lt;p&gt;容器作为云原生应用的交付物，既解决了环境一致性的问题，又可以更细粒度的限制应用资源，但是随着微服务和 DevOps 的流行，容器作为微服务的载体得以广泛应用。2014 年，Google 开源了 Kubernetes，随后几年得到迅猛发展，在 2017 年奠定了容器编排调度标准的地位。Kubernetes 作为一种容器编排调度工具，解决了分布式应用程序的部署和调度问题。因为一台单机的资源有限，而互联网应用可能因为用户规模的急速扩张，或用户属性的不同在不同时间段会出现流量洪峰，因此对计算资源的弹性要求比较高。而一台单机显然无法满足一个如何规模庞大的应用，反之，对于一个规模很小的应用也没必要占用整台主机，那将导致巨大的浪费。&lt;/p&gt;
&lt;p&gt;简而言之，Kubernetes 定义服务的最终状态，并使系统自动地达到和维持在该状态。那么在应用部署完成后，如何管理服务上的流量呢？下面我们将看下 Kubernetes 中如何做服务管理，及在 Istio 中的变化。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中如何做服务管理&#34;&gt;Kubernetes 中如何做服务管理？&lt;/h2&gt;
&lt;p&gt;下图展示的是 Kubernetes 中的服务模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;service-model.jpg&#34; alt=&#34;Kubernetes 服务模型&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上图中我们可以看出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个服务的的不同示例可能被调度到不同的节点上；&lt;/li&gt;
&lt;li&gt;Kubernetes 通过 Service 对象将一个服务的多个实例组合在了一起，统一对外服务；&lt;/li&gt;
&lt;li&gt;Kubernetes 在每个 node 中安装了 &lt;code&gt;kube-proxy&lt;/code&gt;  组件来转发流量，它拥有的简单的负载均衡功能；&lt;/li&gt;
&lt;li&gt;Kubernetes 集群外部流量可以通过 Ingress 进入集群中（Kubernetes 还有其他几种暴露服务的方式，如 NodePort、LoadBalancer 等）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 是用于资源集约管理的工具。但在为应用分配好资源后，如何保证应用的健壮性、冗余性，如何实现更细粒度的流量划分（不是根据服务中实例个数来实现），如何保障服务的安全性，如何进行多集群管理等，这些问题 Kubernetes 都不能很好地解决。&lt;/p&gt;
&lt;p&gt;服务具有多个版本，需要迭代和上线，在新版发布的时候需要切分流量，实现金丝雀发布；同时我们应该假定服务是不可靠的，可能因为各种原因导致请求失败，需要面向失败来编程，如何监控应用程序的指标，了解每个请求的耗时和状态？Istio 的发起这们就想到了在每个 pod 中注入一个代理，将代理的配置通过一个控制平面集中分发，然后将从 pod 中应用容器发起的每个请求都劫持到 sidecar 代理中，然后转发，这样不就可以完美的解决以上问题了吗？Kubernetes 优秀的架构和可扩展性，例如 CRD，pod 内的部署模式，可以完美的解决大量 sidecar 的注入和管理问题，使得 Istio 的实现成为可能。&lt;/p&gt;
&lt;h2 id=&#34;istio-的基本原理&#34;&gt;Istio 的基本原理&lt;/h2&gt;
&lt;p&gt;下图是 Istio 中的服务模型，它既可以支持 Kubernetes 中的工作负载，又可以支持虚拟机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;istio.jpg&#34; alt=&#34;Istio&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Istiod 作为控制平面，将配置下发给所有的 sidecar proxy 和 gateway（为了美观，图中没有画 Istiod 及 sidecar 之间的连接）&lt;/li&gt;
&lt;li&gt;Istio 不再使用 &lt;code&gt;kube-proxy&lt;/code&gt; 组件做流量转发，而是依托在每个 pod 中注入的 sidecar proxy，所有的 proxy 组成了 Istio 的数据平面；&lt;/li&gt;
&lt;li&gt;应用程序管理员可以和管理 Kubernetes 中的工作负载一样，通过声明式 API 操作 Istio mesh 中流量的行为；&lt;/li&gt;
&lt;li&gt;Ingress 被 Gateway 资源所替代，Gateway 是一种特殊的 proxy，实际上也是复用的 Sidecar proxy；&lt;/li&gt;
&lt;li&gt;可以在虚拟机中安装 sidecar proxy，将虚拟机引入的 Istio mesh 中；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上在 Istio 之前，人们可以使用 SpringCloud、Netflix OSS 等，通过在应用程序中集成 SDK，编程的方式来管理应用程序中的流量。但是这通常会有编程语言限制，而且在 SDK 升级的时候，需要修改代码并重新上线应用，会增大人力负担。Istio 使得流量管理变得对应用程序透明，使这部分功能从应用程序中转移到了平台层，成为了云原生基础设施。&lt;/p&gt;
&lt;p&gt;正是因为 Istio 补足了 Kubernetes 对于云原生应用的流量管理、可观察性和安全方面的短板，在 2017 年由 Google、IBM 和 Lyft 共同发起的这个服务网格开源项目，并在三年来取得了长足的发展。关于 Istio 核心功能的介绍可以参考 &lt;a href=&#34;https://istio.io/latest/docs/concepts/what-is-istio/&#34;&gt;Istio 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service Mesh 相当于云原生时代的 TCP/IP，解决应用程序网络通信、安全及可见性问题；&lt;/li&gt;
&lt;li&gt;Istio 是目前最流行的 service mesh 实现，依托于 Kubernetes，但也可以扩展到虚拟机负载；&lt;/li&gt;
&lt;li&gt;Istio 的核心由控制平面和数据平面组成，Envoy 是默认的数据平面代理；&lt;/li&gt;
&lt;li&gt;Istio 作为云原生基础设施的网络层，对应用透明。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>为什么在使用了 Kubernetes 后你可能还需要 Istio？</title>
      <link>https://jimmysong.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/</link>
      <pubDate>Wed, 07 Apr 2021 08:27:17 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;如果你听说过服务网格，并尝试过 &lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt;，你可能有以下问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么 Istio 要在 Kubernetes 上运行？&lt;/li&gt;
&lt;li&gt;Kubernetes 和服务网格在云原生应用架构中分别扮演什么角色？&lt;/li&gt;
&lt;li&gt;Istio 扩展了 Kubernetes 的哪些方面？它解决了哪些问题？&lt;/li&gt;
&lt;li&gt;Kubernetes、Envoy 和 Istio 之间是什么关系？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文将带大家了解 Kubernetes 和 Istio 的内部工作原理。此外，我会介绍 Kubernetes 中的负载均衡方法，并解释为什么有了 Kubernetes 后还需要 Istio。&lt;/p&gt;
&lt;p&gt;Kubernetes 本质上是通过声明式配置来实现应用生命周期管理，而服务网格本质上是提供应用间的流量、安全管理和可观察性。如果你已经使用 Kubernetes 搭建了一个稳定的应用平台，那么如何设置服务间调用的负载均衡和流量控制？是否有这样一个通用的工具或者说平台（非 SDK），可以实现？这就需要用到服务网格了。&lt;/p&gt;
&lt;p&gt;Envoy 引入了 xDS 协议，这个协议得到了各种开源软件的支持，比如 Istio、&lt;a href=&#34;https://mosn.io/&#34;&gt;MOSN&lt;/a&gt; 等。Envoy 将 xDS 贡献给服务网格或云原生基础设施。Envoy 本质上是一个现代版的代理，可以通过 API 进行配置，在此基础上衍生出许多不同的使用场景–比如 API Gateway、服务网格中的 sidecar 代理和边缘代理。&lt;/p&gt;
&lt;p&gt;本文包含以下内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kube-proxy 的作用描述。&lt;/li&gt;
&lt;li&gt;Kubernetes 在微服务管理方面的局限性。&lt;/li&gt;
&lt;li&gt;Istio 服务网格的功能介绍。&lt;/li&gt;
&lt;li&gt;Kubernetes、Envoy 和 Istio 服务网格中一些概念的比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-vs-service-mesh&#34;&gt;Kubernetes vs Service Mesh&lt;/h2&gt;
&lt;p&gt;下图显示了 Kubernetes 中的服务访问关系和服务网格（每个 pod 模型一个 sidecar）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008eGmZEly1gpb7knfo4dj31hk0redrz.jpg&#34; alt=&#34;Kubernetes vs Service Mesh&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;流量转发&#34;&gt;流量转发&lt;/h3&gt;
&lt;p&gt;Kubernetes 集群中的每个节点都部署了一个 kube-proxy 组件，该组件与 Kubernetes API Server 进行通信，获取集群中的服务信息，然后设置 iptables 规则，将服务请求直接发送到对应的 Endpoint（属于同一组服务的 pod）。&lt;/p&gt;
&lt;h3 id=&#34;服务发现&#34;&gt;服务发现&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;008eGmZEly1gpb7knwb79j30kq0fcjs9.jpg&#34; alt=&#34;Service Discovery&#34;&gt;&lt;/p&gt;
&lt;p&gt;Istio 可以跟踪 Kubernetes 中的服务注册，也可以在控制平面中通过平台适配器与其他服务发现系统对接；然后生成数据平面的配置（使用 CRD，这些配置存储在 etcd 中），数据平面的透明代理。数据平面的透明代理以 sidecar 容器的形式部署在每个应用服务的 pod 中，这些代理都需要请求控制平面同步代理配置。代理之所以 “透明”，是因为应用容器完全不知道代理的存在。过程中的 kube-proxy 组件也需要拦截流量，只不过 kube-proxy 拦截的是进出 Kubernetes 节点的流量–而 sidecar 代理拦截的是进出 pod 的流量。&lt;/p&gt;
&lt;h3 id=&#34;服务网格的劣势&#34;&gt;服务网格的劣势&lt;/h3&gt;
&lt;p&gt;由于 Kubernetes 的每个节点上都运行着很多 pod，所以在每个 pod 中放入原有的 kube-proxy 路由转发功能，会增加响应延迟–由于 sidecar 拦截流量时跳数更多，消耗更多的资源。为了对流量进行精细化管理，将增加一系列新的抽象功能。这将进一步增加用户的学习成本，但随着技术的普及，这种情况会慢慢得到缓解。&lt;/p&gt;
&lt;h3 id=&#34;服务网格的优势&#34;&gt;服务网格的优势&lt;/h3&gt;
&lt;p&gt;kube-proxy 的设置是全局的，无法对每个服务进行细粒度的控制，而 service mesh 通过 sidecar proxy 的方式将 Kubernetes 中的流量控制从服务层中抽离出来–可以实现更大的弹性。&lt;/p&gt;
&lt;h3 id=&#34;kube-proxy-的不足之处&#34;&gt;Kube-proxy 的不足之处&lt;/h3&gt;
&lt;p&gt;首先，如果转发的 pod 不能正常服务，它不会自动尝试其他 pod。每个 pod 都有一个健康检查机制，当一个 pod 出现健康问题时，kubelet 会重启 pod，kube-proxy 会删除相应的转发规则。另外，节点 Port 类型的服务不能添加 TLS 或更复杂的消息路由机制。&lt;/p&gt;
&lt;p&gt;Kube-proxy 实现了一个 Kubernetes 服务的多个 pod 实例之间的流量负载均衡，但如何对这些服务之间的流量进行精细化控制–比如将流量按百分比划分给不同的应用版本（这些应用版本都是同一个服务的一部分，但在不同的部署上），或者做金丝雀发布（灰度发布）和蓝绿发布？&lt;/p&gt;
&lt;p&gt;Kubernetes 社区给出了一个使用 Deployment 做&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments&#34;&gt;金丝雀发布&lt;/a&gt;的方法，本质上是通过修改 pod 的标签来给部署的服务分配不同的 pod。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-ingress-vs-istio-gateway&#34;&gt;Kubernetes Ingress vs Istio Gateway&lt;/h3&gt;
&lt;p&gt;如上所述，kube-proxy 只能在 Kubernetes 集群内路由流量。Kubernetes 集群的 pod 位于 CNI 创建的网络中。Ingress 是在 Kubernetes 中创建的资源对象，用于集群外部的通信。它由位于 Kubernetes 边缘节点上的入口控制器驱动，负责管理南北向流量。Ingress 必须与各种 Ingress 控制器对接，比如 &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx&#34;&gt;nginx ingress 控制器&lt;/a&gt;和 &lt;a href=&#34;https://traefik.io/&#34;&gt;traefik&lt;/a&gt;。Ingress 只适用于 HTTP 流量，使用简单。它只能通过匹配有限的字段来路由流量——如服务、端口、HTTP 路径等。这使得它无法对 TCP 流量进行路由，如 MySQL、Redis 和各种 RPC。这就是为什么你会看到人们在 ingress 资源注释中写 Nginx 配置语言的原因（注：使用 Nginx Ingress Controller 可以通过 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/&#34;&gt;配置 ConfigMap 和 Service 的方式&lt;/a&gt;来变通支持 TCP 和 UDP  流量转发）。直接路由南北流量的唯一通行方法是使用服务的 LoadBalancer 或 NodePort，前者需要云厂商支持，后者需要额外的端口管理。&lt;/p&gt;
&lt;p&gt;Istio Gateway 的功能与 Kubernetes Ingress 类似，它负责进出集群的南北流量。Istio Gateway 描述了一个负载均衡器，用于承载进出服务网格边缘的连接。该规范描述了一组开放端口和这些端口所使用的协议，以及用于负载均衡的 SNI 配置等。Gateway 是一个 CRD 扩展，它也重用了 sidecar 代理的功能；详细配置请参见 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/gateway/&#34;&gt;Istio 网站&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;envoy&#34;&gt;Envoy&lt;/h2&gt;
&lt;p&gt;Envoy 是 Istio 中默认的 sidecar 代理。Istio 基于 Enovy 的 xDS 协议扩展了其控制平面。在讨论 Envoy 的 xDS 协议之前，我们需要先熟悉 Envoy 的基本术语。下面是 Envoy 的架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-arch.jpg&#34; alt=&#34;Envoy 架构图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;基础概念&#34;&gt;基础概念&lt;/h3&gt;
&lt;p&gt;以下是 Enovy 中你应该知道的基本术语。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下游。下游主机连接到 Envoy，发送请求，并接收响应，即发送请求的主机。&lt;/li&gt;
&lt;li&gt;上游：上游主机。上游主机接收来自 Envoy 的连接和请求，并返回响应；即接收请求的主机。&lt;/li&gt;
&lt;li&gt;Listener：监听器。监听器是一个命名的网络地址（如端口、UNIX 域套接字等）；下游客户端可以连接到这些监听器。Envoy 将一个或多个监听器暴露给下游主机进行连接。&lt;/li&gt;
&lt;li&gt;集群。集群是一组逻辑上相同的上游主机，Envoy 连接到它们。Envoy 通过服务发现来发现集群的成员。可以选择通过主动的健康检查来确定集群成员的健康状态。Envoy 通过负载均衡策略来决定集群中哪个成员的请求路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Envoy 中可以设置多个监听器，每个监听器可以设置一个过滤链（过滤链表），而且过滤链是可扩展的，这样我们可以更方便地操纵流量的行为–比如设置加密、私有 RPC 等。&lt;/p&gt;
&lt;p&gt;xDS 协议是由 Envoy 提出的，是 Istio 中默认的 sidecar 代理，但只要实现了 xDS 协议，理论上也可以作为 Istio 中的 sidecar 代理 —— 比如蚂蚁集团开源的 &lt;a href=&#34;https://mosn.io&#34;&gt;MOSN&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cdn.thenewstack.io/media/2021/03/b800bf17-image3.png&#34;&gt;&lt;img src=&#34;008eGmZEly1gpb7kk7wk4j31060lqgqx.jpg&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Istio 是一个功能非常丰富的服务网格，包括以下功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量管理。这是 Istio 最基本的功能。&lt;/li&gt;
&lt;li&gt;策略控制。实现访问控制系统、遥测采集、配额管理、计费等功能。&lt;/li&gt;
&lt;li&gt;可观察性。在 sidecar 代理中实现。&lt;/li&gt;
&lt;li&gt;安全认证。由 Citadel 组件进行密钥和证书管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;istio-中的流量管理&#34;&gt;Istio 中的流量管理&lt;/h2&gt;
&lt;p&gt;Istio 中定义了以下 CRD 来帮助用户进行流量管理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网关。网关描述了一个运行在网络边缘的负载均衡器，用于接收传入或传出的 HTTP/TCP 连接。&lt;/li&gt;
&lt;li&gt;虚拟服务（VirtualService）。VirtualService 实际上是将 Kubernetes 服务连接到 Istio 网关。它还可以执行额外的操作，例如定义一组流量路由规则，以便在主机寻址时应用。&lt;/li&gt;
&lt;li&gt;DestinationRule。DestinationRule 定义的策略决定了流量被路由后的访问策略。简单来说，它定义了流量的路由方式。其中，这些策略可以定义为负载均衡配置、连接池大小和外部检测（用于识别和驱逐负载均衡池中不健康的主机）配置。&lt;/li&gt;
&lt;li&gt;EnvoyFilter。EnvoyFilter 对象描述了代理服务的过滤器，可以自定义 Istio Pilot 生成的代理配置。这种配置一般很少被主用户使用。&lt;/li&gt;
&lt;li&gt;ServiceEntry。默认情况下，Istio 服务 Mesh 中的服务无法发现 Mesh 之外的服务。ServiceEntry 可以在 Istio 内部的服务注册表中添加额外的条目，从而允许 Mesh 中自动发现的服务访问并路由到这些手动添加的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-vs-xds-vs-istio&#34;&gt;Kubernetes vs xDS vs Istio&lt;/h2&gt;
&lt;p&gt;在回顾了 Kubernetes 的 kube-proxy 组件、xDS 和 Istio 对流量管理的抽象后，现在我们仅从流量管理的角度来看看这三个组件 / 协议的比较（注意，三者并不完全等同）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;xDS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Istio service mesh&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Endpoint&lt;/td&gt;
&lt;td&gt;Endpoint&lt;/td&gt;
&lt;td&gt;WorkloadEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Route&lt;/td&gt;
&lt;td&gt;VirtualService&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kube-proxy&lt;/td&gt;
&lt;td&gt;Route&lt;/td&gt;
&lt;td&gt;DestinationRule&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kube-proxy&lt;/td&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td&gt;EnvoyFilter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ingress&lt;/td&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td&gt;Gateway&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Cluster&lt;/td&gt;
&lt;td&gt;ServiceEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;核心观点&#34;&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 的本质是应用生命周期管理，具体来说就是部署和管理（伸缩、自动恢复、发布）。&lt;/li&gt;
&lt;li&gt;Kubernetes 为微服务提供了一个可扩展、高弹性的部署和管理平台。&lt;/li&gt;
&lt;li&gt;服务网格是基于透明代理，通过 sidecar 代理拦截服务之间的流量，然后通过控制平面配置管理它们的行为。&lt;/li&gt;
&lt;li&gt;服务网格将流量管理与 Kubernetes 解耦，不需要 kube-proxy 组件来支持服务网格内的流量；通过提供更接近微服务应用层的抽象来管理服务间的流量、安全性和可观察性。&lt;/li&gt;
&lt;li&gt;xDS 是服务网格的协议标准之一。&lt;/li&gt;
&lt;li&gt;服务网格是 Kubernetes 中服务的一个更高层次的抽象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;如果说 Kubernetes 管理的对象是一个 pod，那么服务网格管理的对象就是一个服务，所以用 Kubernetes 管理微服务，然后应用服务网格就可以了。如果你连服务都不想管理，那就用 &lt;a href=&#34;https://knative.dev/&#34;&gt;Knative&lt;/a&gt; 这样的无服务器平台，不过这是后话。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>什么是 Day-2 Operation？</title>
      <link>https://jimmysong.io/blog/what-is-day-2-operation/</link>
      <pubDate>Sat, 20 Mar 2021 21:56:04 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/what-is-day-2-operation/</guid>
      <description>
        
        
        &lt;p&gt;在 IstioCon 2021 上，Istio 社区确定了 2021 年的社区的工作重点是 Day-2 Operation，很多人问我这个词是什么意思。我查了下中文互联网上，没有对这个词的解释，我在网上找到了一些解释，我发现大部分文章的源头都指向了这篇 &lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34;&gt;Defining Day-2 Operations&lt;/a&gt;。因此，在此我将问翻译一下，同时再加上一些我自己的见解。&lt;/p&gt;
&lt;h2 id=&#34;定义-day-2-operation&#34;&gt;定义 Day-2 Operation&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 是系统为组织产生结果的地方。因此，要不断寻求 Day-2 Opeation 的改进，以实现效益最大化。&lt;/p&gt;
&lt;p&gt;Day-2 Operation 不一定是指第2天的行动。一旦 &amp;ldquo;某物 &amp;ldquo;进入行动，&amp;ldquo;Day-2 Operation &amp;ldquo;是指在这个 &amp;ldquo;某物 &amp;ldquo;没有被杀死或被 &amp;ldquo;其他东西 &amp;ldquo;取代之前的剩余时间段。如下图中展示的软件的生命周期中，从软件被安装之后到被卸载之前的那段时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008eGmZEly1gorlqmukkij31im0kote7.jpg&#34; alt=&#34;Day-2 Operation&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们审视一个业务流程、应用程序或IT基础设施生命中的各个阶段时，有些人喜欢把它们描绘成一个循环过程。我相信这是因为人们倾向于使用 &amp;ldquo;应用程序的生命周期 &amp;ldquo;这个词，并以某种方式陷于相信图中必须循环回到起点。各个阶段通常是在时间上向前推进的，而不是把你带回起点。&lt;/p&gt;
&lt;p&gt;假定 &amp;ldquo;X &amp;ldquo;称为一个组织或实体所需要的东西，可能是一个业务流程，一个应用程序，或者是一些IT基础设施。从技术上讲，每当有人设想X的时候，总会有一个起点——我们称它为 &amp;ldquo;零日&amp;rdquo;（这是高中物理的管理，时间的起点通常是T0）。 Day-Zero可能不是一天：它是提出并记录一套完整的X需求所需的时间段，这些活动可能包括高层设计、记录并向某人推销利益、撰写商业案例、寻求资金等。&lt;/p&gt;
&lt;p&gt;这个过程的下一步是构建和部署。Day-1包括所有活动，从详细（或底层）设计开始，到构建、测试、提出任何所需的流程和人员，以支持X，使组织受益。在许多情况下，这里可能还涉及一些采购活动。一旦它被安装、设置、配置和批准（&amp;ldquo;好的开始&amp;rdquo;），X就被认为是 &amp;ldquo;上线 &amp;ldquo;或 &amp;ldquo;开放业务&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;从这一点开始，直到X退役、死亡或被替换，我们有Day-2操作。这包括保持X运行的一系列活动，照看和支持X，使其以最佳状态运行，确保X的运行和交付结果符合最初的意图和期望。监控利用率、确保可用性和成本优化是在通常的内务管理活动基础上增加的，以保持X以 &amp;ldquo;最佳 &amp;ldquo;的方式运行。&lt;/p&gt;
&lt;p&gt;随着我们周围世界的要求发生变化，组织要决定对X的调整或升级，这些都是必然需要的，是被称为整个大修还是仅仅是升级。如果是整体大修，我们可以假设X已经退役并被新的系统Y所取代。如果新的X只是比以前的X有了更大的改进，那么Day-2 Operation将继续进行，并包含了所有的活动，以逐步改进X。&lt;/p&gt;
&lt;p&gt;一个简短的补充说明：&amp;ldquo;不可变系统 &amp;ldquo;的概念，即人们倾向于通过不允许变化但总是部署新系统来提高可用性，这与上述概念并不冲突。管理不可变系统的过程成为Day-2 Operation的一部分。&lt;/p&gt;
&lt;p&gt;对于大多数企业来说，Day-2 Operation是重复性的。但这是系统为组织产生结果的地方。因此，在Day-2 Operation中不断寻求改进，一个能带来最大效益的改进应该是很自然的。&lt;/p&gt;
&lt;h2 id=&#34;评论&#34;&gt;评论&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 目前在中文中暂无统一翻译，我暂且将其翻译为“Day-2 运营”，这样可能会看起来更像是个敏捷词汇，跟“精益运营”比较像。这个命名方式可能来自物理（T0，T1，T2，这样来划分时间段），也可能是来自军事术语。&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age&lt;/a&gt; 这篇文章中对云时代的软件生命周期 Day0、Day1、Day2 做了比较完整的解释。&lt;/p&gt;
&lt;p&gt;在IT领域，Day0、Day1、Day2 指的是软件生命周期的不同阶段。在军事术语中，Day0 是训练的第一天，新兵进入成长阶段。在软件开发中，它代表着设计阶段，在这个阶段，项目需求被指定，解决方案的架构被决定。&lt;/p&gt;
&lt;p&gt;Day1 涉及开发和部署在 Day0 阶段设计的软件。在这个阶段，我们不仅要创建应用程序本身，还要创建它的基础设施、网络、外部服务，并实现这一切的初始配置。&lt;/p&gt;
&lt;p&gt;Day2 是产品发货或提供给客户的时间。在这里，大部分精力都集中在维护、监控和优化系统上。分析系统的行为并做出正确的反应是至关重要的，因为由此产生的反馈循环会一直应用到应用程序的寿命结束。在云时代这三个阶段跟云之前有很大的不同。&lt;/p&gt;
&lt;p&gt;软件准备好后，就开始上线，客户开始使用。Day2 从这里开始，介绍包括软件维护和客户支持在内的内容。软件本身要不断发展，以适应不断变化的需求和客户的要求。在 Day2，主要关注的是建立一个反馈循环。我们监控应用的运行情况，收集用户的反馈意见，并将其发送给开发团队，开发团队将在产品中实现并发布新版本。军事术语 Observe-Orient-Decid-Act 恰好能体现这一阶段的工作内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察：从监控系统中获取信息（资源使用和指标、应用性能监控）。&lt;/li&gt;
&lt;li&gt;定位：对问题进行根本原因分析。&lt;/li&gt;
&lt;li&gt;决定：找到解决出现的问题的方法。&lt;/li&gt;
&lt;li&gt;行动：实施解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如同在作战过程中，这个循环不断重复，正如下图中展示的那样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008eGmZEly1gormccennnj31gi0u0nae.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;监控程序是基于服务水平协议（SLA）中定义的要求。SLA基于服务水平目标（SLO），它代表了我们的服务水平指标（SLI）的状态。自动化和监控是解决第2天责任的关键。&lt;/p&gt;
&lt;p&gt;有几类工具可以帮助完成 Day2的工作。应用性能监控（APM）类组软件，帮助IT管理员监控应用性能，从而提供高质量的用户体验。在这里我们可以说出Datadog、Dynatrace、SignalFX或Nutanix Xi Epoch。还有一些自动化和编排工具，如Ansible或Kubernetes，它们有助于管理应用环境。这些工具的应用与Day1 的工作相重叠。最后，JIRA 或 GItHub 系统处理客户服务，使用户能够报告与他们正在运行的应用程序有关的问题。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34;&gt;Defining Day-2 Operations - ozone.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/solutions/day-2-ops/&#34;&gt;What is &amp;ldquo;Day-2&amp;rdquo; - about.gitlab.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age - codilime.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>为什么应该选择使用 NGAC 作为权限控制模型</title>
      <link>https://jimmysong.io/blog/why-you-should-choose-ngac-as-your-access-control-model/</link>
      <pubDate>Sat, 20 Feb 2021 14:12:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/why-you-should-choose-ngac-as-your-access-control-model/</guid>
      <description>
        
        
        &lt;p&gt;本文为我跟 Ignasi Barrera 共同创作，本文英文版首发于 &lt;a href=&#34;https://thenewstack.io/why-you-should-choose-ngac-as-your-access-control-model/&#34;&gt;TheNewStack&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;不同的公司或软件供应商已经设计了无数种方法来控制用户对功能或资源的访问，如酌情访问控制（DAC）、强制访问控制（MAC）、基于角色的访问控制（RBAC）和基于属性的访问控制（ABAC）。从本质上讲，无论何种类型的访问控制模型，都可以抽象出三个基本要素：用户、系统 / 应用和策略。&lt;/p&gt;
&lt;p&gt;在本文中，我们将介绍 ABAC、RBAC 以及一种新的访问控制模型 —— 下一代访问控制（NGAC），并比较三者之间的异同，以及为什么你应该考虑 NGAC。&lt;/p&gt;
&lt;h2 id=&#34;什么是-rbac&#34;&gt;什么是 RBAC？&lt;/h2&gt;
&lt;p&gt;RBAC，即基于角色的访问控制，采用的方法是根据用户在组织中的角色授予（或拒绝）对资源的访问。每个角色都被分配了一系列的权限和限制，这很好，因为你不需要跟踪每个系统用户和他们的属性。你只需要更新相应的角色，将角色分配给用户，或者删除分配。但这可能很难管理和扩展。使用 RBAC 静态角色模型的企业经历了角色爆炸：大公司可能有数万个相似但不同的角色或用户，他们的角色会随着时间的推移而改变，因此很难跟踪角色或审计不需要的权限。RBAC 具有固定的访问权限，没有规定短暂的权限，也没有考虑位置、时间或设备等属性。使用 RBAC 的企业很难满足复杂的访问控制要求，以满足其他组织需求的监管要求。&lt;/p&gt;
&lt;h3 id=&#34;rbac-示例&#34;&gt;RBAC 示例&lt;/h3&gt;
&lt;p&gt;下面是 Kubernetes 中 &lt;code&gt;default&lt;/code&gt; 命名空间中的一个 Role，可以用来授予 pod 的读取权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;rbac.authorization.k8s.io/v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Role&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pod-reader&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;rules&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;apiGroups&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;verbs&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;什么是-abac&#34;&gt;什么是 ABAC？&lt;/h2&gt;
&lt;p&gt;ABAC 是 “基于属性的访问控制 “的缩写。从高层次上讲，&lt;a href=&#34;https://www.nist.gov/publications/guide-attribute-based-access-control-abac-definition-and-considerations-1&#34;&gt;NIST&lt;/a&gt; 将 ABAC 定义为一种访问控制方法，“在这种方法中，根据分配的主体属性、环境条件以及用这些属性和条件指定的一组策略，批准或拒绝主体对对象进行操作的请求。” ABAC 是一个细粒度的模型，因为你可以给用户分配任何属性，但同时它也成为一种负担，很难管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在定义权限的时候，用户和对象之间的关系无法可视化。&lt;/li&gt;
&lt;li&gt;如果规则设计的有点复杂或者混乱，对于管理员来说，维护和跟踪会很麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当有大量的权限需要处理时，会造成性能问题。&lt;/p&gt;
&lt;h3 id=&#34;abac-示例&#34;&gt;ABAC 示例&lt;/h3&gt;
&lt;p&gt;Kubernetes 最初使用 ABAC 作为访问控制，并通过 JSON 行配置，例如：&lt;/p&gt;
&lt;p&gt;Alice 可以只读取命名空间 &lt;code&gt;foo&lt;/code&gt; 中的 pod。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;abac.authorization.kubernetes.io/v1beta1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Policy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;readonly&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;什么是-ngac&#34;&gt;什么是 NGAC？&lt;/h2&gt;
&lt;p&gt;NGAC，即下一代访问控制，采用将访问决定数据建模为图形的方法。NGAC 可以实现系统化、策略一致的访问控制方法，以高精细度授予或拒绝用户管理能力。NGAC 由 &lt;a href=&#34;https://www.nist.gov/&#34;&gt;NIST&lt;/a&gt;（美国国家标准与技术研究所）开发，目前用于 &lt;a href=&#34;https://www.tetrate.io/blog/introducing-tetrate-q/&#34;&gt;Tetrate Q&lt;/a&gt; 和 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34;&gt;Tetrate Service Bridge&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;有几种类型的实体；它们代表了您要保护的资源、它们之间的关系以及与系统互动的行为者。这些实体是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;用户属性，如组织单位&lt;/li&gt;
&lt;li&gt;对象属性，如文件夹&lt;/li&gt;
&lt;li&gt;策略类，如文件系统访问、位置和时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NIST 的 David Ferraiolo 和 &lt;a href=&#34;https://www.tetrate.io/&#34;&gt;Tetrate&lt;/a&gt; 的 Ignasi Barrera 在旧金山举行的 2019 年服务网格日（Service Mesh Day 2019）上发表了关于下一代访问控制的 &lt;a href=&#34;https://www.tetrate.io/blog/unpacking-next-generation-access-control-ngac-and-tetrate-q/&#34;&gt;演讲&lt;/a&gt;，分享了 NGAC 的工作原理。&lt;/p&gt;
&lt;p&gt;NGAC 是基于这样一个假设：你可以用一个图来表示你要保护的系统，这个图代表了你要保护的资源和你的组织结构，这个图对你有意义，并且符合你的组织语义。在这个对你的组织非常特殊的模型之上，你可以叠加策略。在资源模型和用户模型之间，定义了权限。这样 NGAC 提供了一种优雅的方式来表示你要保护的资源，系统中的不同角色，以及如何用权限把这两个世界联系在一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008eGmZEly1gnu26nral2j30ke0ay0ue.jpg&#34; alt=&#34;NGAC 模型中的 DAG&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片来自于 &lt;a href=&#34;https://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=922390&#34;&gt;Linear Time Algorithms to Restrict Insider Access using Multi-Policy Access Control Systems&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ngac-示例&#34;&gt;NGAC 示例&lt;/h3&gt;
&lt;p&gt;下面的例子展示了一个简单的 NGAC 图，其中有一个代表组织结构的用户 DAG，一个代表文件系统中的文件和文件夹的对象 DAG，一个文件的分类，以及两个不同的策略 —— 文件系统和范围，可以结合起来做出访问决策。两个 DAG 之间的关联边定义了行为者对目标资源的权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008eGmZEly1gnu27wttcnj30lx0f7my9.jpg&#34; alt=&#34;NGAC 示例图&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这张图中，我们可以看到 &lt;code&gt;/hr-docs&lt;/code&gt; 文件夹中的两个文件 &lt;code&gt;resume&lt;/code&gt; 和 &lt;code&gt;contract&lt;/code&gt; 的表示，每个文件都链接到一个类别（&lt;code&gt;public&lt;/code&gt;/&lt;code&gt;confidential&lt;/code&gt;）。还有两个策略类，&lt;code&gt;File System&lt;/code&gt; 和 &lt;code&gt;Scope&lt;/code&gt;，图中的对象被连接在这里 —— 需要满足这些条件才能获得对每个文件的访问权。&lt;/p&gt;
&lt;p&gt;在例子中，用户 Allice 对两个文件都有读写访问权限，因为有一个路径将 Allice 链接到每个文件，而且路径授予了两个策略类的权限。但是，用户 Bob 只有对 &lt;code&gt;resume&lt;/code&gt; 文件的访问权，因为虽然存在一个从 Bob 到 &lt;code&gt;contract&lt;/code&gt; 文件的路径，该路径满足 &lt;code&gt;File System&lt;/code&gt; 策略类的 “读 &amp;quot; 权限，但没有授予 &lt;code&gt;Scope&lt;/code&gt; 策略类权限的路径。所以，Bob 对 &lt;code&gt;contract&lt;/code&gt; 文件的访问被拒绝。&lt;/p&gt;
&lt;h2 id=&#34;为什么选择-ngac&#34;&gt;为什么选择 NGAC？&lt;/h2&gt;
&lt;p&gt;在 ABAC 的情况下，需要跟踪所有对象的属性，这造成了可管理性的负担。RBAC 减少了负担，因为我们提取了所有角色的访问信息，但是这种模式存在角色爆炸的问题，也会变得不可管理。有了 NGAC，我们在图中就有了我们所需要的一切 —— 以一种紧凑、集中的方式。&lt;/p&gt;
&lt;p&gt;当访问决策很复杂时，ABAC 的处理时间会成倍上升。RBAC 在规模上变得特别难以管理，而 NGAC 则可以线性扩展。&lt;/p&gt;
&lt;p&gt;NGAC 真正出彩的地方在于灵活性。它可以被配置为允许或不允许访问，不仅基于对象属性，而且基于其他条件 —— 时间、位置、月相等。&lt;/p&gt;
&lt;p&gt;NGAC 的其他关键优势包括能够一致地设置策略（以满足合规性要求）和设置历时性策略的能力。例如，NGAC 可以在中断期间授予开发人员一次性的资源访问权，而不会留下不必要的权限，以免日后导致安全漏洞。NGAC 可以在一个访问决策中评估和组合多个策略，同时保持其线性时间的复杂度。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;下表从几个方面对 ABAC、RBAC 和 NGAC 进行了比较。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限模型&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ABAC&lt;/td&gt;
&lt;td&gt;灵活&lt;/td&gt;
&lt;td&gt;性能和审计问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBAC&lt;/td&gt;
&lt;td&gt;简单&lt;/td&gt;
&lt;td&gt;角色爆炸、固定的访问权限、合规需求挑战&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NGAC&lt;/td&gt;
&lt;td&gt;细粒度、利于审计、灵活、组合权限策略&lt;/td&gt;
&lt;td&gt;复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总而言之：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RBAC 比较简单，性能好，但在规模上会受到影响。&lt;/li&gt;
&lt;li&gt;ABAC 很灵活，但性能和可审计性是个问题。&lt;/li&gt;
&lt;li&gt;NGAC 通过使用一种新颖、优雅的革命性方法来修复这些差距：在用户提供的现有世界表示之上叠加访问策略。你也可以对 RBAC 和 ABAC 策略进行建模。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/specialpublications/NIST.SP.800-162.pdf&#34;&gt;Guide to Attribute-Based Access Control (ABAC) Definition and Considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6953980/&#34;&gt;Deploying ABAC policies using RBAC Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.comparitech.com/net-admin/rbac-vs-abac/&#34;&gt;RBAC vs. ABAC: What’s the Difference?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/role-explosion-unintended-consequence-rbac-oren-ohayon-harel/&#34;&gt;Role Explosion: The Unintended Consequence of RBAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nist.gov/publications/exploring-next-generation-access-control-methodologies&#34;&gt;Exploring the Next Generation of Access Control Methodologies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>“寒武纪大爆发” 之后的云原生，2021 年走向何处？</title>
      <link>https://jimmysong.io/blog/cloud-native-2021/</link>
      <pubDate>Thu, 28 Jan 2021 08:34:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-native-2021/</guid>
      <description>
        
        
        &lt;p&gt;很荣幸收到 CSDN 的邀请，接受” 云原生人物志 “专栏采访，其实我从 2017 年起就已经在撰写 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/appendix/kubernetes-and-cloud-native-summary-in-2017-and-outlook-for-2018.html&#34;&gt;Kubernetes 和云原生年度总结和新年展望&lt;/a&gt;，今天在此聊抒己见，欢迎大家讨论和指正。&lt;/p&gt;
&lt;h2 id=&#34;云原生在演进&#34;&gt;云原生在演进&lt;/h2&gt;
&lt;p&gt;云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。Kubernetes 开启了云原生 1.0 的序幕，服务网格 Istio 的出现，引领了后 Kubernetes 时代的微服务，serverless 的再次兴起，使得&lt;strong&gt;云原生从基础设施层不断向应用架构层挺进&lt;/strong&gt;，我们正处于一个云原生 2.0 的新时代。&lt;/p&gt;
&lt;h2 id=&#34;业界动向&#34;&gt;业界动向&lt;/h2&gt;
&lt;p&gt;最近国内的一些云厂商，如阿里云、腾讯云、华为云陆续发布了各自的云原生相关的架构和实践白皮书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2020 年 7，中国信通院发布了《云原生产业白皮书（2020）》。&lt;/li&gt;
&lt;li&gt;2020 年 12 月 20 日，在腾讯 2020 Techo Park 开发者大会上，腾讯云正式发布了《云原生最佳实践路线图》，同时发布的还有一份 3 万多字的《腾讯云原生路线图手册》。&lt;/li&gt;
&lt;li&gt;2020 年 12 月 23 日，阿里云原生实战峰会上发布了《云原生架构白皮书》。&lt;/li&gt;
&lt;li&gt;2020 年 12 月 30 日，华为云在深圳的 TechWave 云原生 2.0 技术峰会上联合 Forrester 发布了《云原生白皮书：拥抱云原生优先战略》。&lt;/li&gt;
&lt;li&gt;2021 年初，阿里巴巴达摩院发布 2021 十大科技趋势，其中将 “云原生重塑 IT 技术体系” 作为 2021 年技术预测之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;云原生项目的-寒武纪大爆发&#34;&gt;云原生项目的 “寒武纪大爆发”&lt;/h2&gt;
&lt;p&gt;云原生已历经” 寒武纪大爆发 “，标志是从 2018 年 Kubernetes 毕业 后走向深耕路线。云原生领域的开源项目层出不穷，令人眼花缭乱，见我收集的 Awesome Cloud Native。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008eGmZEly1gn37vq5g81j30q906dmyk.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2020 年 CNCF 共接纳了 35 个项目加入基金会，并且有多个项目毕业或晋级，CNCF 托管的项目总数达到了 80 多个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008eGmZEly1gn37weeu5lj30q90ivalh.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片来自 CNCF 年度报告 2020&lt;/p&gt;
&lt;h2 id=&#34;云原生之争实际上是标准之争&#34;&gt;云原生之争实际上是标准之争&lt;/h2&gt;
&lt;p&gt;PC 端操作系统 Windows 占据上风，移动端是 iOS 和 Android，服务器端是 Linux，而云计算商用分布式操作系统呢？答案是 Kubernetes。&lt;/p&gt;
&lt;p&gt;2020 年 Kubernete 宣布将&lt;a href=&#34;https://blog.csdn.net/csdnnews/article/details/110520682&#34;&gt;在 v1.20 版本之后弃用 Docker&lt;/a&gt;，实际上 Docker 本来就不是 Kubernetes 中默认和唯一的的容器运行时了，实际上只要是支持 CRI（Container Runtime Interface）或 OCI（Open Container Initiative）标准的容器运行时都可以在 Kubernetes 中运行。如下图所示，容器，英文是 container，也是集装箱的意思，其实集装箱不止一种型号，根据运送的货物的不同特性可以制定了多种集装箱类型。而这个容器类型是标准只能是由 Kubernetes 来定，否则只能是削足适履。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008eGmZEly1gn37vqbb2lj30q90enwpl.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 统一了云上的资源对象制定和调度的标准，只要在其标准之上开发 CRD 和 Operator 即可。但是这也仅限于单个应用的管理，如何管理复杂的多集群和混合云环境，如何管理应用间流量，如何如何保证调用链的安全？以 Istio 为代表的服务网格就是为了解决这个问题。&lt;/p&gt;
&lt;h2 id=&#34;云原生趋势云上应用管理&#34;&gt;云原生趋势：云上应用管理&lt;/h2&gt;
&lt;p&gt;Kubernetes 奠定了云原生基础设施的基础，随着而来的监控、存储、AI、大数据等技术的迁移，从单个应用层面来说已经日趋成熟，而在&lt;strong&gt;使用云原生架构尤其是对云上应用的管理&lt;/strong&gt;，而在异构环境、多集群、混合云等已成为常态的情况下，&lt;strong&gt;如何对云上的应用进行管理，成为棘手的事情&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Kubernetes 以其开创新的声明式 API 和调节器模式，奠定了云原生的基础。我们看到 Google 的项目 Anthos，Azure 的 Arc，AWS 最近开源的 EKS-D，它们都是着重在混合云管理，让云无处不在。另外，服务网格（Service Mesh）经过两年的推广和发酵，将会看到越来越多的应用。&lt;/p&gt;
&lt;h2 id=&#34;云原生与开源社区&#34;&gt;云原生与开源社区&lt;/h2&gt;
&lt;p&gt;目前&lt;strong&gt;企业云原生化转型最缺乏的东西 —— 套路和组合拳&lt;/strong&gt;。对于基础软件，企业往往会选择开源项目并根据自身需求进行改造，而云原生的开源项目又有很多，企业不是没有选择，而是选择太多，以致于无从下手。就像下面教你如何画猫头鹰的示例。我们可以将企业的云原生化的愿景想象成是这只猫头鹰，这些开源项目就像步骤一中圆，你可能想当然的认为只要用了 Kubernetes 就是云原生了，这就像画了两个圆，而剩余部分没有人教你如何完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008eGmZEly1gn37vqshfnj30q90hh44y.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;开源社区的核心是面向开发者，就是向开发者灌输如何来画好这只 “猫头鹰” 的。开源不意味着免费和做慈善，使用开源也是有代价的。&lt;strong&gt;开源社区存在的意义是平衡开发者、终端用户及供应商之间的共同利益&lt;/strong&gt;，而一个中立的开源社区有利于发挥开源的生态优势。&lt;/p&gt;
&lt;p&gt;近年来随着云原生大热，在美国诞生了大量该领域的初创公司，他们基于 AWS、谷歌云、Azure 等提供各种云原生的解决方案，从每次 KubeCon 的赞助商规模上就可以窥知一二。国内该领域的公司目前还不多，而云原生终端用户社区的公司规模上依然跟国外的公司数量有不小的差距。&lt;/p&gt;
&lt;p&gt;云原生社区就是在这样的背景下于 2020 年初由我发起，开始筹备并在 5 月 12 号正式成立，致力于推广云原生技术，构建开发者生态。云原生社区采取 SIG（特别兴趣小组）和 WG（工作组）的组织形式，基于开源项目和不同的专业领域构建研讨组，与厂商合作定期举办线下 meetup，并邀请社区的专家们定期在 B 站的云原生学院进行直播。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;开源应该关注的是终端用户和开发者生态，用 Apache Way 来说就是 “社区大于代码”，没有社区的项目是难以长久的。因此我们可以看到国内一些云厂商开源项目之后也会积极投入运营，举行各种各样的活动。我们看到在云原生的推广过程中，CNCF 起到的相当大的作用，2020 年国内也有类似的基金会成立，我们希望看到更多中立的基金会和社区的成立，更多的厂商参与其中，为终端用户提供更佳的解决方案。&lt;/p&gt;
&lt;p&gt;最后感谢 CSDN 宋慧编辑和 「CSDN 云计算」的邀请。&lt;/p&gt;
&lt;p&gt;往期报道见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/csdnnews/article/details/112293560&#34;&gt;梁胜：做开源项目的贡献者没有意义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/FL63Zv9Zou86950w/article/details/110433443&#34;&gt;华为云 CTO 张宇昕：云原生已经进入深水区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/csdnnews/article/details/110508201&#34;&gt;APISIX 温铭：开源的本质是要拿开发者的杠杆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;个人介绍&#34;&gt;个人介绍&lt;/h2&gt;
&lt;p&gt;在我的职业生涯里先后从事过 Java 开发、大数据运维、DevOps、开源管理等工作，个人爱好是研究并推广开源技术及理念，摄影和旅行。目前在企业级服务网格初创公司 Tetrate 担任 Developer Advocate，同时作为中立的云原生终端用户社区 —— 云原生社区（Cloud Native Community）的负责人。&lt;/p&gt;
&lt;p&gt;我的整个职业生涯都是与开源息息相关的，渊源可以追溯到大学时期。大学时我就开始使用 Linux 系统（Ubuntu）学习，刚进入职场的时候面向的也是 Hadoop 的开源生态及各种开源中间件，2015 起开始接触 Docker，2016 年开始进入云原生领域，2017 年开始写 Kubernetes 领域的第一本开源中文电子书《&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook&#34;&gt;Kubernetes Handbook——Kubernetes 中文指南 / 云原生应用架构实践手册&lt;/a&gt;》，本书直到如今仍在更新，2018 年在蚂蚁集团做开源管理及服务网格社区 ServiceMesher，2020 年加入基于 Istio、Envoy 和 Apache SkyWalking 等开源项目而构建企业级服务网格的初创公司 Tetrate。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 EKS-D 和 Istio 保证混合云环境一致性</title>
      <link>https://jimmysong.io/blog/eks-eksd-istio-hybrid-cloud/</link>
      <pubDate>Mon, 28 Dec 2020 14:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/eks-eksd-istio-hybrid-cloud/</guid>
      <description>
        
        
        &lt;p&gt;AWS 在 2020 年12 月举行的 re:Invent 大会上发布了 &lt;a href=&#34;https://distro.eks.amazonaws.com/&#34;&gt;EKS-D&lt;/a&gt;，此举旨在联合合作伙伴，开源 AWS 维护大规模 EKS 集群的经验，帮助用户实现混合云场景下 Kubernetes 的一致性的体验。本文将为你解析 EKS-D 的战略意义，说明它是如何与 Istio 共同保证混合云环境一致性的。&lt;/p&gt;
&lt;h2 id=&#34;什么是-eks-d&#34;&gt;什么是 EKS-D？&lt;/h2&gt;
&lt;p&gt;EKS-D 是 Amazon EKS 的一个发行版，可以运行在企业内部、云端或自己的系统上。EKS-D 保持与 Kubernetes 新版本同期发布。在不久的将来，将以 EKS Anywhere（EKS-A）为名，提供 EKS-D 的支持、打包产品和安装方法。&lt;/p&gt;
&lt;p&gt;下图展示了 AWS、EKS-D、 Kubernetes 及用户之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gm3oyi69h3j31af0u0ju1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;EKS-D 对于 AWS、合作伙伴及用户来说具有不同的意义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS：增加 AWS 的市场拥有率&lt;/li&gt;
&lt;li&gt;合作伙伴：整合 AWS 的渠道和客户资源以触达更多用户&lt;/li&gt;
&lt;li&gt;用户：保证了异构环境下的 Kubernetes 的一致性，简化运维&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如今企业要考虑选择哪个云供应商要考虑很多因素，同时，还有很多企业的 IT 难以跨入云，而是继续依赖究竟考验的传统 IT 架构以开展业务。&lt;/p&gt;
&lt;p&gt;在上云的时候客户希望在企业内部和云端获得一致的体验，以便进行迁移或实现混合云设置。不是所有应用都适合跨云迁移，为了合规、数据安全等种种原因，多集群、混合云的使用场景将很普遍。&lt;/p&gt;
&lt;h2 id=&#34;为什么使用多集群和混合云&#34;&gt;为什么使用多集群和混合云&lt;/h2&gt;
&lt;p&gt;我们在很多情况下或使用多集群、混合云等部署方式，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了避免厂商锁定，便于应用跨集群迁移；&lt;/li&gt;
&lt;li&gt;为了实现应用的高可用；&lt;/li&gt;
&lt;li&gt;当一个集群的规模过大造成性能瓶颈时；&lt;/li&gt;
&lt;li&gt;为了合规和数据安全；&lt;/li&gt;
&lt;li&gt;为了就近部署，降低网络延迟，提高用户体验；&lt;/li&gt;
&lt;li&gt;为了进行一些测试；&lt;/li&gt;
&lt;li&gt;突发业务，需要集群扩容；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上情况经常发生，对集群的管理造成了挑战。Kubernetes 统一了容器编排的标准，随着其进一步普及，更有望成为云原生应用的底层 API。但是对于如何管理多集群和混合云环境中的 Kubernetes 集群，又为我们带来了新的挑战。&lt;/p&gt;
&lt;h2 id=&#34;使用-istio-service-mesh-管理混合云&#34;&gt;使用 Istio service mesh 管理混合云&lt;/h2&gt;
&lt;p&gt;Istio 服务网格作为云原生应用的网络基础设施层，可以同时管理 Kubernetes 及非容器负载，如&lt;a href=&#34;https://thenewstack.io/how-to-integrate-virtual-machines-into-istio-service-mesh/&#34;&gt;虚拟机&lt;/a&gt;。Istio 可以在&lt;a href=&#34;https://istio.io/latest/docs/setup/platform-setup/&#34;&gt;多种平台&lt;/a&gt;中部署，又支持多种&lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/deployment-models/&#34;&gt;部署模式&lt;/a&gt;，兼具管理多集群和混合云的功能.在部署时需要充分考虑 Region、Zone 的分布、网络隔离、多租户、控制平面的高可用等因素。&lt;/p&gt;
&lt;p&gt;假如我们同时使用 EKS 和部署在私有数据中心中的 EKS-D，那么如何将两个集群使用一个统一的控制平面管理起来呢？如下图所示，cluster1 和 cluster2 分别表示部署在 EKS 和 EKS-D 的 Kubernetes 集群，这两个集群的网络是隔离的，现因为上文所说的适合使用混合云某个场景，现在为了将它们纳入同一个服务网格使用一个控制平面来管理，我们采用了 &lt;a href=&#34;https://istio.io/latest/docs/setup/install/multicluster/primary-remote_multi-network/&#34;&gt;Primary-Remote 多网络&lt;/a&gt;的部署模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gm3oyiyq4fj315m0u0wi2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图中黑色箭头表示控制平面内获取服务和端点配置的请求；&lt;/li&gt;
&lt;li&gt;图中蓝色箭头表示服务 A 访问服务 B 的路由；&lt;/li&gt;
&lt;li&gt;图中绿色箭头表示服务 A/B 向控制平面获取服务端点的路由；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用该模式部署 Istio 时，需要保证控制平面对 Kubernetes 的 API Server 的连接性，具体的安装过程请参考 &lt;a href=&#34;https://istio.io/latest/docs/setup/install/multicluster/primary-remote_multi-network/&#34;&gt;Istio 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;EKS-D 保证了在混合云环境下 Kubernetes 集群的一致性，降低了集群的运维成本。Istio 固有的多集群感知能力，进一步从服务层面增强了用户体验的一致性，帮助我们将多集群中的服务纳入统一的控制平面管理。EKS-D 发布的时有众多的合作伙伴的响应，其中 Tetrate 作为 Istio service mesh 的解决方案供应商提供了 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34;&gt;Tetrate Service Bridge（TSB）&lt;/a&gt;在 EKS 和 EKS-D 上实现了跨工作负载的统一应用连接和安全性。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 对虚拟机支持史话</title>
      <link>https://jimmysong.io/blog/istio-vm-odysssey/</link>
      <pubDate>Fri, 25 Dec 2020 14:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/istio-vm-odysssey/</guid>
      <description>
        
        
        &lt;p&gt;本文将为你介绍 Istio 历史上对虚拟机负载的支持情况，尤其是 Istio 1.8 中引入的智能 DNS 代理及 &lt;code&gt;WorkloadGroup&lt;/code&gt; 使得虚拟机与容器在资源抽象层面可以等同视之。我将为你展现一幅 Istio 支持虚拟机的波澜壮阔的奥德赛。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在我&lt;a href=&#34;https://thenewstack.io/how-to-integrate-virtual-machines-into-istio-service-mesh/&#34;&gt;之前的博客&lt;/a&gt;中谈到 Istio 1.7 如何支持虚拟机，但那时虚拟机仍然无法无缝的集成到 Istio 中，因为还需要做很多手动的操作。现在，Istio 1.8 新增了 WorkloadGroup 及&lt;a href=&#34;https://istio.io/latest/blog/2020/dns-proxy/&#34;&gt;智能 DNS 代理&lt;/a&gt;，这使得如虚拟机这样的非 Kubernetes 工作负载可以在 Istio 中成为像 Pod 一样的一等公民。&lt;/p&gt;
&lt;p&gt;不论有没有为虚拟机安装 sidecar，虚拟机通常情况下无法直接访问 Kubernetes 集群中的 DNS 服务器以解析 Kubernetes  服务的 Cluster IP 的（虽然你也许可以通过一些黑客的手段做到），这是在 Istio 中集成虚拟的最后一块短板，终于在 Istio 1.8 中完成了突破。&lt;/p&gt;
&lt;h2 id=&#34;为什么要支持虚拟机&#34;&gt;为什么要支持虚拟机？&lt;/h2&gt;
&lt;p&gt;在我们将应用在迁移到云原生架构，不断容器化的过程中，将经历三个阶段，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gm0d6t775lj31s80k8go8.jpg&#34; alt=&#34;云原生应用的三个阶段&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阶段一：应用全部部署在虚拟机上&lt;/li&gt;
&lt;li&gt;阶段二：应用既部署在虚拟机上也部署在容器里，正在从虚拟机向容器中迁移，并使用 Kubernetes 管理容器&lt;/li&gt;
&lt;li&gt;阶段三：所有的应用优先部署在容器里，使用 Kubernetes 管理容器，使用 Istio 管理应用间的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上图仅是对以上三个阶段的最简化描述，实际上还会有多混合云、多机房、多集群等情况，且阶段三只是个理想化的阶段，容器和虚拟机将是长期共存的，但是容器化趋势不变。&lt;/p&gt;
&lt;p&gt;在阶段二中，人们通常会将新业务和少量应用率先实现容器化，并部署到 Kubernetes 中，在应用尚未完全实现容器化的时候，处于过度状态时会遇到很多问题，如何让应用与部署在虚拟机中的服务交互？虚拟机如何访问容器中的服务？在服务迁移的过程中如何保证稳定无缝？是否可以将容器和虚拟机纳入一个统一的控制平面来管理？Istio 从开源初期就考虑并着手解决这一问题。&lt;/p&gt;
&lt;h2 id=&#34;istio-支持虚拟机的历史&#34;&gt;Istio 支持虚拟机的历史&lt;/h2&gt;
&lt;p&gt;Istio 对于虚拟机的支持是个漫长的过程，堪称是一部奥德赛。&lt;/p&gt;
&lt;h3 id=&#34;istio-mesh-扩张&#34;&gt;Istio mesh 扩张&lt;/h3&gt;
&lt;p&gt;Istio 从 0.2 版本开始通过 &lt;a href=&#34;https://istio.io/v0.2/docs/setup/kubernetes/mesh-expansion.html&#34;&gt;Istio Mesh Expansion&lt;/a&gt; 将虚拟机加入的 Mesh 中，但是需要满足以下前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机必须可以通过 IP 地址直接访问到应用的 Pod，这就要求容器与 VM 之间通过 VPC 或者 VPN 建立扁平网络，虚拟机不需要访问 Cluster IP，直接对服务的 Endpoint 端点访问即可。&lt;/li&gt;
&lt;li&gt;虚拟机必须可以访问到 Istio 的控制平面服务（Pilot、Mixer、CA，现在已正整合为 Istiod），可以通过在 Istio Mesh 中部署负载均衡器将控制平面端点暴露给虚拟机。&lt;/li&gt;
&lt;li&gt;（可选）虚拟机可以访问到 Mesh 内部的（部署在 Kubernetes 中）的 DNS server。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集成虚拟机的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为 Istio 控制平面服务及 Kubernetes 集群的 DNS 服务创建 Internal 负载均衡器；&lt;/li&gt;
&lt;li&gt;生成 Istio Service CIDR、Service Account token、安全证书、Istio 控制平面服务的 IP（通过 Internal 负载均衡器暴露出来的 IP）的配置文件并发送给虚拟机；&lt;/li&gt;
&lt;li&gt;（可选）在虚拟机中安装、配置并启动 Istio 的组件、dnsmaq（用于DNS 发现），此时虚拟机可以使用   FQDN 访问 mesh 中的服务了，这一步是为了保证虚拟机可以正确解析出 mesh 中服务的 Cluster IP；&lt;/li&gt;
&lt;li&gt;若要在虚拟机中运行服务，需要配置 sidecar，新增需要拦截的 inbound 端口，然后重启 istio，还需要运行 istioctl 为服务注册&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示的从集成虚拟机到在 mesh 中访问虚拟机中服务的详细流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gm0d6rogojj30u00yhdil.jpg&#34; alt=&#34;图一：从集成虚拟机到在 mesh 中访问虚拟机中服务的详细流程&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS 被虚拟机中部署的 &lt;code&gt;dnsmasq&lt;/code&gt; 劫持，这使得它可以正确的获取 Istio 服务、Kubernetes 内置 DNS 的端点 IP；&lt;/li&gt;
&lt;li&gt;访问 Kubernetes 的内置 DNS 服务（该服务已通过 Internal 负载均衡器暴露到集群外，可以直接访问）；&lt;/li&gt;
&lt;li&gt;返回 &lt;code&gt;productpage.bookinfo.svc.cluster.local&lt;/code&gt; 被解析出来的 Cluster IP，注意该 IP 地址无法直接访问，但是如果无法被 DNS 解析的话将导致 VM 对该服务的请求失败；&lt;/li&gt;
&lt;li&gt;虚拟机对 mesh 中服务的访问被 sidecar proxy 劫持；&lt;/li&gt;
&lt;li&gt;因为 proxy 已连接 Istio 控制平面，可通过 xDS 查询到该服务的端点，因此流量将被转发到其中的一个端点。关于这一步的详细过程请参考 &lt;a href=&#34;https://www.servicemesher.com/istio-handbook/concepts/sidecar-traffic-route.html&#34;&gt;Istio Handbook 中的 sidecar 流量路由机制分析 一节&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;要想在 mesh 中访问 VM 中的服务，需要使用 &lt;code&gt;istioctl register&lt;/code&gt; 命令手动将 VM 中的服务添加到 mesh 中，这本质上是将 VM 中的服务，注册到 Kubernetes 中的 service 和 endpoint；&lt;/li&gt;
&lt;li&gt;mesh 中的服务可以使用 VM 注册的服务名称（FQDN，例如 &lt;code&gt;mysql.vm.svc.cluster.local&lt;/code&gt;）来访问；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上 Istio 对虚拟机支持的方式一直延续到 Istio 1.0，在 Istio 1.1 的时候引入了新的 API &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/service-entry/&#34;&gt;ServiceEntry&lt;/a&gt;，使用它可以在 Istio 的内部服务注册表中添加额外的条目，这样 mesh 中的服务就可以访问/路由到这些手动指定的服务了，不再需要运行 &lt;code&gt;istioctl register&lt;/code&gt; 命令，而且该命令在 Istio 1.9 中将被废弃。&lt;/p&gt;
&lt;p&gt;Istio 1.5 中增加了 &lt;code&gt;istioctl experimental add-to-mesh&lt;/code&gt; 命令，可以将虚拟机中的服务添加到 mesh 中，其功能与 &lt;code&gt;istioctl register&lt;/code&gt; 一样。&lt;/p&gt;
&lt;h3 id=&#34;新增资源抽象&#34;&gt;新增资源抽象&lt;/h3&gt;
&lt;p&gt;Istio 从 &lt;a href=&#34;https://istio.io/latest/news/releases/1.6.x/announcing-1.6/&#34;&gt;1.6 版本&lt;/a&gt;开始在&lt;a href=&#34;https://istio.io/latest/news/releases/1.6.x/announcing-1.6/change-notes/&#34;&gt;流量管理&lt;/a&gt;中引入了新的资源类型 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/workload-entry/&#34;&gt;WorkloadEntry&lt;/a&gt;，用以将虚拟机进行抽象，使得虚拟机在加入 mesh 后可以作为与 Kubernetes 中的 Pod 等同的负载，具备流量管理、安全管理、可视化等能力。通过 &lt;code&gt;WorkloadEntry&lt;/code&gt; 可以简化虚拟机的网格化配置过程。&lt;code&gt;WorkloadEntry&lt;/code&gt; 对象可以根据服务条目中指定的标签选择器选择多个工作负载条目和 Kubernetes pod。&lt;/p&gt;
&lt;p&gt;Istio 1.8 中增加了 &lt;a href=&#34;http://istio.io/latest/docs/reference/config/networking/workload-group/&#34;&gt;&lt;code&gt;WorkloadGroup&lt;/code&gt;&lt;/a&gt; 的资源对象，它提供了一个规范，可以同时包括虚拟机和 Kubernetes 工作负载，旨在模仿现有的用于 Kubernetes 工作负载的 sidecar 注入和部署规范模型来引导 Istio 代理。&lt;/p&gt;
&lt;p&gt;下面是虚拟机与 Kubernetes 中负载的资源抽象层级对比。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对比项&lt;/th&gt;
&lt;th&gt;Kubernetes&lt;/th&gt;
&lt;th&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;基础调度单位&lt;/td&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;WorkloadEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编排组合&lt;/td&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;WorkloadGroup&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务注册与发现&lt;/td&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;ServiceEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从上面的图表中我们可以看到，对于虚拟机工作负载是可以与 Kubernetes 中的负载一一对对应的。&lt;/p&gt;
&lt;p&gt;此时看似一切都比较完美了，但是直接将 Kubernetes 集群中的 DNS server 暴露出来会带来很大的&lt;a href=&#34;https://blog.aquasec.com/dns-spoofing-kubernetes-clusters&#34;&gt;安全风险&lt;/a&gt;，因此我们一般手动将虚拟机需要访问的服务的域名和 Cluster IP 对写到本机的 &lt;code&gt;/etc/hosts&lt;/code&gt; 中，但是对于一个节点数量庞大的分布式集群来说，这种做法又有些不现实。&lt;/p&gt;
&lt;p&gt;通过配置虚拟机本地 &lt;code&gt;/etc/hosts&lt;/code&gt; 访问 mesh 内服务的流程，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gm0d6qx2o0j30sq0v440v.jpg&#34; alt=&#34;图二：通过配置虚拟机本地 /etc/hosts 访问 mesh 内服务的流程&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将虚拟机中的服务注册到 mesh 中；&lt;/li&gt;
&lt;li&gt;将要访问的服务的域名、Cluster IP 对手动写入虚拟机本地的 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件中；&lt;/li&gt;
&lt;li&gt;虚拟机获得访问服务的 Cluster IP；&lt;/li&gt;
&lt;li&gt;流量被 sidecar proxy 拦截并解析出要访问的服务的端点地址；&lt;/li&gt;
&lt;li&gt;访问服务的指定端点；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Kubernetes 中我们一般使用 Service 对象来实现服务的注册和发现，每个服务都有一个独立的 DNS 名称，应用程序可以使用服务名称来互相调用。我们可以使用 ServiceEntry 将虚拟机中的服务注册到 Istio 的服务注册表中，但是在 Kubernetes 集群中的 DNS server 无法对 mesh 外部暴露的情况下，虚拟机无法访问 Kubernetes 集群中的 DNS 服务以获取服务的 Cluster IP，从而导致虚拟机访问 mesh 中的服务失败。如果能在虚拟机中增加一个 sidecar 可以透明地拦截 DNS 请求，可获取 mesh 内所有服务的 ClusterIP，类似于图一中的 &lt;code&gt;dnsmasq&lt;/code&gt; 的角色，这样不就可以解决问题了吗？&lt;/p&gt;
&lt;h3 id=&#34;智能-dns-代理&#34;&gt;智能 DNS 代理&lt;/h3&gt;
&lt;p&gt;Istio 1.8 中引入了&lt;a href=&#34;https://cloudnative.to/blog/istio-dns-proxy/&#34;&gt;智能 DNS 代理&lt;/a&gt;，虚拟机访问 mesh 内服务无需再配置 &lt;code&gt;/ect/hosts&lt;/code&gt;，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gm0d6sgfpxj30oi0rsjt5.jpg&#34; alt=&#34;图三：引入了智能 DNS 代理后虚拟机访问 mesh 内服务的流程&#34;&gt;&lt;/p&gt;
&lt;p&gt;DNS proxy 是用 Go 编写的 Istio sidecar 代理。Sidecar 上的 Istio agent 将附带一个由 Istiod 动态编程的缓存 DNS 代理。来自应用程序的 DNS 查询会被 pod 或 VM 中的 Istio 代理透明地拦截和服务，该代理会智能地响应 DNS 查询请求，可以实现虚拟机到服务网格的无缝多集群访问。&lt;/p&gt;
&lt;p&gt;至此，Istio 1.8 中引入的 WordloadGroup 及智能 DNS 代理，补足了 Istio 对虚拟机支持的最后一块短板，使得部署在虚拟机中的遗留应用可以跟 Kubernetes 中的 Pod 一样完全等同看待。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在这部 Istio 支持虚拟机的奥德赛中，我们可以看到：从最初的将 mesh 中的 DNS server 暴露给外部，在虚拟机中安装配置 &lt;code&gt;dnsmasq&lt;/code&gt;，到最后的使用智能 DNS 代理，并使用 &lt;code&gt;WorkloadEntry&lt;/code&gt;、&lt;code&gt;WorkloadGroup&lt;/code&gt; 和 &lt;code&gt;ServiceEntry&lt;/code&gt; 等资源抽象，逐步实现了虚拟机和 pod 的统一管理。本文仅仅是针对单集群的情况，在实际的生产中使用还远远不够，我们还需要处理安全、多集群、多租户等诸多问题，欢迎关注 Tetrate 的旗舰产品 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34;&gt;Tetrate Service Bridge&lt;/a&gt; 了解更多关于 Istio 应用在生产上的最佳实践。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 1.8——用户至上的选择</title>
      <link>https://jimmysong.io/blog/istio-18-release/</link>
      <pubDate>Fri, 20 Nov 2020 08:34:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/istio-18-release/</guid>
      <description>
        
        
        &lt;p&gt;今天 &lt;a href=&#34;https://istio.io/latest/news/releases/1.8.x/announcing-1.8/&#34;&gt;Istio 1.8&lt;/a&gt; 发布了，这是 Istio 在 2020 年发布的最后一个版本，按照 Istio 社区在&lt;a href=&#34;https://istio.io/latest/blog/2020/tradewinds-2020/&#34;&gt;今年初设定的目标&lt;/a&gt;继续推进，该版本主要有以下更新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持使用 Helm 3 进行安装和升级&lt;/li&gt;
&lt;li&gt;正式移除了 Mixer&lt;/li&gt;
&lt;li&gt;新增了 Istio DNS proxy，透明地拦截应用程序的 DNS 查询，实现智能应答&lt;/li&gt;
&lt;li&gt;新增了 &lt;code&gt;WorkloadGroup&lt;/code&gt; 以简化对虚拟机的引入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;WorkloadGroup &lt;/code&gt;是一个新的 API 对象，旨在与虚拟机等非 Kubernetes 工作负载一起使用，模仿现有的用于 Kubernetes 工作负载的 sidecar 注入和部署规范模型来引导 Istio 代理。&lt;/p&gt;
&lt;h2 id=&#34;安装与升级&#34;&gt;安装与升级&lt;/h2&gt;
&lt;p&gt;Istio 从 1.5 版本开始弃用了 Helm，使用 &lt;code&gt;istioctl manifest&lt;/code&gt; 方式安装，后来又改成了 &lt;code&gt;istioctl install&lt;/code&gt;，现在又重新回归了 Helm，Helm 作为 Kubernetes 环境下最常用的应用安装管理组件，此次回归也是倾听用户声音，优化安装体验的的反应吧，不过 Istio Operator 依然将是 Istio 安装的最终形式，从 1.8 版本开始 Istio 支持使用 &lt;a href=&#34;https://istio.io/latest/docs/setup/install/helm/&#34;&gt;Helm&lt;/a&gt; 进行 in-place 升级和 canary 升级。&lt;/p&gt;
&lt;h2 id=&#34;增强-istio-的易用性&#34;&gt;增强 Istio 的易用性&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;istioctl&lt;/code&gt; 命令行工具新的了 bug reporting 功能（&lt;code&gt;istioctl bug-report&lt;/code&gt;），可以用来收集调试信息和获取集群状态。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/blog/2020/addon-rework/&#34;&gt;安装 add-on&lt;/a&gt; 的方式变了，在 1.7 中已经不推荐使用 istioctl 来安装，在 1.8 中直接被移除了，这样有利于解决 add-on 落后于上游及难以维护的问题。&lt;/p&gt;
&lt;p&gt;正式移除了 Mixer，推荐使用 &lt;a href=&#34;https://istio.io/latest/blog/2020/wasm-announce/&#34;&gt;WebAssembly&lt;/a&gt; 通过扩展 Envoy 的方式来扩展 Istio，也推荐大家使用 &lt;a href=&#34;https://www.getenvoy.io/reference/getenvoy_extension_toolkit_reference/&#34;&gt;GetEnvoy Toolkit&lt;/a&gt; 来进行 Envoy 的扩展开发。&lt;/p&gt;
&lt;h2 id=&#34;对虚拟机的支持&#34;&gt;对虚拟机的支持&lt;/h2&gt;
&lt;p&gt;在我&lt;a href=&#34;https://thenewstack.io/how-to-integrate-virtual-machines-into-istio-service-mesh/&#34;&gt;之前的博客&lt;/a&gt;中谈到 Istio 1.7 如何支持虚拟机，在 Istio 1.8 中新增了&lt;a href=&#34;https://istio.io/latest/blog/2020/dns-proxy/&#34;&gt;智能 DNS 代理&lt;/a&gt;，它是由 Go 编写的 Istio sidecar 代理，sidecar 上的 Istio agent 将附带一个由 Istiod 动态编程的缓存 DNS 代理。来自应用程序的 DNS 查询会被 pod 或 VM 中的 Istio 代理透明地拦截和服务，该代理会智能地响应 DNS 查询请求，可以实现虚拟机到服务网格的无缝多集群访问。&lt;/p&gt;
&lt;p&gt;新增了 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/workload-group/&#34;&gt;WorkloadGroup&lt;/a&gt; ，它描述了工作负载实例的集合。提供了一个规范，工作负载实例可以用来引导它们的代理，包括元数据和身份。它只打算与虚拟机等非 Kubernetes 工作负载一起使用，旨在模仿现有的用于 Kubernetes 工作负载的sidecar注入和部署规范模型来引导 Istio 代理。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://tetrate.io&#34;&gt;Tetrate&lt;/a&gt;，我们在客户的多集群部署中广泛使用这种机制，以使 sidecar 能够为暴露在网格中所有集群的入口网关的主机解析 DNS，并通过 mTLS 访问。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总而言之，Istio 团队履行了&lt;a href=&#34;https://istio.io/latest/blog/2020/tradewinds-2020/&#34;&gt;年初的承诺&lt;/a&gt;，自 2018 年发布 1.1 版本发布起，保持了固定的发布节奏，每 3 个月发布一个版本，在性能、用户体验上持续优化，以满足 brownfiled 应用与 greenfield 应用在 Istio 上的无缝体验。我们期待 Istio 在 2021 年可以给我们带来更多惊喜。&lt;/p&gt;
&lt;p&gt;最后，感谢&lt;a href=&#34;https://github.com/malphi&#34;&gt;马若飞&lt;/a&gt;对本文的审阅。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何在 Istio Service Mesh 中集成虚拟机？</title>
      <link>https://jimmysong.io/blog/how-to-integrate-virtual-machines-into-istio-service-mesh/</link>
      <pubDate>Mon, 02 Nov 2020 16:43:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/how-to-integrate-virtual-machines-into-istio-service-mesh/</guid>
      <description>
        
        
        &lt;p&gt;Istio 是目前最流行的服务网格，用于连接、保护、控制和观察服务。当其 2017 年开源时，Kubernetes 已赢得容器编排之战，Istio 为了满足组织转向微服务的需求。虽然 Istio 声称支持异构环境，如 Nomad、Consul、Eureka、Cloud Foundry、Mesos 等，但实际上，它一直与 Kubernetes 合作得最好–它的服务发现就是基于 Kubernetes。&lt;/p&gt;
&lt;p&gt;Istio 在发展初期就因为一些问题而饱受诟病，比如组件数量多、安装和维护复杂、调试困难、由于引入了太多的新概念和对象（多达 50 个 CRD）而导致学习曲线陡峭，以及 Mixer 组件对性能的影响。但这些问题正在被 Istio 团队逐渐克服。从 2020 年初发布的&lt;a href=&#34;https://istio.io/latest/zh/blog/2020/tradewinds-2020/&#34;&gt;路线图&lt;/a&gt;中可以看出，Istio 已经取得了长足的进步。&lt;/p&gt;
&lt;p&gt;将基于虚拟机的工作负载更好地集成到服务网格中，是 Istio 团队今年的一大重点。Tetrate 还通过其产品 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34;&gt;Tetrate Service Bridge&lt;/a&gt; 提供了无缝的多云连接、安全性和可观察性，包括针对虚拟机的。本文将带您了解为什么 Istio 需要与虚拟机整合，以及如何整合。&lt;/p&gt;
&lt;h2 id=&#34;istio-为什么要支持虚拟机&#34;&gt;Istio 为什么要支持虚拟机？&lt;/h2&gt;
&lt;p&gt;虽然现在容器和 Kubernetes 已经被广泛使用，但仍然有很多部署在虚拟机上的服务和 Kubernetes 集群之外的 API 需要由 Istio mesh 来管理。如何将棕地环境与绿地环境统一管理，这是一个巨大的挑战。&lt;/p&gt;
&lt;h2 id=&#34;将虚拟机引入到网格中需要具备什么条件&#34;&gt;将虚拟机引入到网格中需要具备什么条件？&lt;/h2&gt;
&lt;p&gt;在介绍如何集成虚拟机之前，我先介绍一下将虚拟机添加到 Mesh 中需要什么条件。在支持虚拟机流量时，Istio 必须知道几件事：哪些虚拟机的服务要添加到 Mesh 中，以及如何访问虚拟机。每个虚拟机还需要一个身份，以便与服务网格的其他部分安全地通信。这些需求可以和 Kubernetes CRD 一起工作，也可以和 Consul 这样的完整的服务注册表一起工作。而基于服务账户的身份引导机制，为没有平台身份的虚拟机分配工作负载身份。对于有平台身份的虚拟机（如 EC2、GCP、Azure 等），Istio 正在进行这方面的工作，将平台身份与 Kubernetes 身份进行交换，方便设置 mTLS 通信。&lt;/p&gt;
&lt;h2 id=&#34;istio-如何支持虚拟机&#34;&gt;Istio 如何支持虚拟机？&lt;/h2&gt;
&lt;p&gt;Istio 对虚拟机的支持始于其服务注册表机制。Istio mesh 中的服务和实例信息来自 Istio 的服务注册表，到目前为止，Istio 的服务注册表只关注或跟踪 pod。在新的版本中，Istio 现在有资源类型来跟踪和观察虚拟机。网格内的 sidecar 无法观察和控制网格外服务的流量，因为它们没有任何信息。&lt;/p&gt;
&lt;p&gt;Istio 社区和 &lt;a href=&#34;https://www.tetrate.io/&#34;&gt;Tetrate&lt;/a&gt; 在 Istio 对虚拟机的支持上做了&lt;a href=&#34;https://www.tetrate.io/blog/istio-bringing-vms-into-the-mesh-with-cynthia-coan/&#34;&gt;很多工作&lt;/a&gt;。1.6 版本中增加了 WorkloadEntry，它允许你像描述 Kubernetes 中运行的主机一样描述虚拟机。在 1.7 版本中，该版本开始增加了通过令牌将虚拟机自动引导到 service mesh 中的基础，Istio 做了大量的工作。Istio 1.8 将首次推出另一个名为 WorkloadGroup 的抽象，它类似于 Kubernetes Deployment 对象 —— 但适用于虚拟机。&lt;/p&gt;
&lt;p&gt;下图显示了 Istio 如何在网格中对服务进行建模。最主要的信息来源来自于 Kubernetes 这样的平台服务注册表，或者 Consul 这样的系统。此外，ServiceEntry 作为用户定义的服务注册表，对虚拟机上的服务或组织外部的服务进行建模。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/0081Kckwly1gkc4ldbqzhj30p30ehwf5.jpg&#34; alt=&#34;Istio 中的服务注册发现模型&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么不直接使用 ServiceEntry 引入虚拟机中的服务，却还要大费周折在虚拟机中安装 Istio？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 ServiceEntry，你可以让网格内部的服务发现和访问外部服务；此外，还可以管理这些外部服务的流量。结合 VirtualService，你还可以为相应的外部服务配置访问规则，比如请求超时、故障注入等，从而实现对指定外部服务的控制访问。 即便如此，它也只能控制客户端的流量，而不能控制引入的外部服务对其他服务的访问。也就是说，它不能控制作为调用发起者的服务的行为。在虚拟机中部署 sidecar，通过工作负载选择器引入虚拟机工作负载，可以像 Kubernetes 中的 pod 一样，对虚拟机进行无差别管理。&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;在下面这个 demo 中我们将使在 GKE 中部署 Istio 并运行 bookinfo 示例，其中 ratings 服务的后端使用的是部署在虚拟机上的 MySQL，该示例可以在 &lt;a href=&#34;https://istio.io/latest/docs/examples/virtual-machines/bookinfo/&#34;&gt;Istio 官方文档&lt;/a&gt;中找到，我作出了部分改动，最终的流量路由如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/0081Kckwly1gkc4lch5epj318g0avwfx.jpg&#34; alt=&#34;Bookinfo 示例中的流量示意图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装流程&#34;&gt;安装流程&lt;/h3&gt;
&lt;p&gt;下面是示例的安装步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 Google Cloud 中部署 Kubernetes 集群，Kubernetes 版本是 1.16.13；&lt;/li&gt;
&lt;li&gt;在 GKE 中安装 Istio 1.7.1；&lt;/li&gt;
&lt;li&gt;在 Google Cloud 中启动一台虚拟机并配置 Istio，将其加入到 Istio Mesh 中，这一步需要很多手动操作，生成证书、创建 token、配置 hosts 等；&lt;/li&gt;
&lt;li&gt;在 Istio Mesh 中部署 bookinfo 示例；&lt;/li&gt;
&lt;li&gt;在虚拟机中安装 MySQL；&lt;/li&gt;
&lt;li&gt;为虚拟机设置 VPC 防火箱规则；&lt;/li&gt;
&lt;li&gt;将虚拟机中的 MySQL 服务作为 ServiceEntry 引入到 Mesh 中并作为 rating 服务的后端；&lt;/li&gt;
&lt;li&gt;修改 MySQL 表中的数据，验证 bookinfo 中的 rating 相应的行为符合预期；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;未来方向&#34;&gt;未来方向&lt;/h2&gt;
&lt;p&gt;从 &lt;a href=&#34;https://istio.io/latest/docs/examples/virtual-machines/bookinfo/&#34;&gt;bookinfo&lt;/a&gt; 的演示中可以看出，在这个过程中涉及到的人工工作太多，很容易出错。在未来，Istio 会改进虚拟机测试的可操作性，根据平台身份自动引导，改进 DNS 支持和 istioctl 调试等。大家可以关注 &lt;a href=&#34;https://github.com/istio/community/blob/master/WORKING-GROUPS.md&#34;&gt;Istio 环境工作组&lt;/a&gt;，了解更多关于虚拟机支持的细节。&lt;/p&gt;
&lt;h2 id=&#34;参考阅读&#34;&gt;参考阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/setup/install/virtual-machine/&#34;&gt;Virtual Machine Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/examples/virtual-machines/single-network/&#34;&gt;Virtual Machines in Single-Network Meshes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tetrate.io/blog/istio-bringing-vms-into-the-mesh-with-cynthia-coan/&#34;&gt;Istio: Bringing VMs into the Mesh (with Cynthia Coan)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tetrate.io/blog/bridging-traditional-and-modern-workloads/&#34;&gt;Bridging Traditional and Modern Workloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>云原生初学者入门必读</title>
      <link>https://jimmysong.io/blog/must-read-for-cloud-native-beginner/</link>
      <pubDate>Sun, 18 Oct 2020 14:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/must-read-for-cloud-native-beginner/</guid>
      <description>
        
        
        &lt;h2 id=&#34;为什么写这篇文章&#34;&gt;为什么写这篇文章&lt;/h2&gt;
&lt;p&gt;看到这个标题后，大家可能会问“都已经 2020 年了，Kubernetes 开源有 6 年时间了，为什么还要写一篇 Kubernetes 入门的文章？”我想说的是，Kubernetes 还远远没有达到我们想象的那么普及。众多的开发者，平时忙于各自的业务开发，学习新技术的时间有限；还有大量的学生群体，可能还仅仅停留在“知道有这门技术”的阶段，远远没有入门。这篇文章将助于各位有志于从事云原生领域工作或需要了解该领域背景的人群快速入门 Kubernetes 和云原生。&lt;/p&gt;
&lt;p&gt;因为云原生的知识体系过于庞杂，本文主要讲解容器、Kubernetes 及服务网格的入门概念，关于云原生的更多细节将在后续文章中推出。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 一词来自希腊语，意思是“飞行员”或“舵手”。这个名字很贴切，Kubernetes 可以帮助你在波涛汹涌的容器海洋中航行。&lt;/p&gt;
&lt;p&gt;Kubernetes 是做什么的？什么是 Docker？什么是容器编排？Kubernetes 是如何工作和扩展的？你可能还有很多其他的问题，本文将一一为你解答。&lt;/p&gt;
&lt;p&gt;这篇文章适合初学者，尤其是那些工作忙碌，没有办法抽出太多时间来了解 Kubernetes 和云原生的开发者们，希望本文可以帮助你进入 Kubernetes 的世界。&lt;/p&gt;
&lt;p&gt;简而言之，Kubernetes 提供了一个平台或工具来帮助你快速协调或扩展容器化应用，特别是在 &lt;a href=&#34;https://docker.com/&#34;&gt;Docker&lt;/a&gt; 容器。让我们深入了解一下这些概念。&lt;/p&gt;
&lt;h2 id=&#34;容器和容器化&#34;&gt;容器和容器化&lt;/h2&gt;
&lt;p&gt;那么什么是容器呢？&lt;/p&gt;
&lt;p&gt;要讨论容器化首先要谈到虚拟机 (VM)，顾名思义，虚拟机就是可以远程连接的虚拟服务器，比如 AWS 的 EC2 或阿里云的 ECS。&lt;/p&gt;
&lt;p&gt;接下来，假如你要在虚拟机上运行一个网络应用——包括一个 MySQL 数据库、一个 Vue 前端和一些 Java 库，在 Ubuntu 操作系统 (OS) 上运行。你不用熟悉其中的每一个技术——你只要记住，一个应用程序由各种组件、服务和库组成，它们运行在操作系统上。&lt;/p&gt;
&lt;p&gt;现在，将应用程序打包成一个虚拟机镜像，这个镜像中包括了 Ubuntu 操作系统。这使得虚拟机变得非常笨重——通常有几个 G 的大小。&lt;/p&gt;
&lt;p&gt;虚拟机镜像包含了整个操作系统及所有的库，对应用程序来说，这个镜像过于臃肿，其中大部分组件并没有被应用程序直接调用。如果你需要重新创建、备份或扩展这个应用程序，就需要复制整个环境（虚拟机镜像），在新环境中启动应用通常需要几十秒甚至几分钟时间。如果你想单独升级应用中的某个组件，比如说 Vue 应用，就需要重建整个虚拟机镜像。另外，如果你的两个应用依赖同一个底层镜像，升级底层镜像会同时影响这两个应用，而有时候，你只需要升级其中一个应用的依赖而已。这就是所谓的“依赖陷阱”。&lt;/p&gt;
&lt;p&gt;解决这个问题的办法就是容器。容器是继虚拟机之后更高层次的抽象，在这层抽象中，整个应用程序的每个组件被单独打包成一个个独立的单元，这个单元就是所谓的容器。通过这种方式，可以将代码和应用服务从底层架构中分离出来，实现了完全的可移植性（在任何操作系统或环境上运行应用的能力）。所以在上面的例子中，Ubuntu 操作系统就是一个单元（容器）。MySQL 数据库是另一个容器，Vue 环境和随之而来的库也是一个容器。&lt;/p&gt;
&lt;p&gt;但是，MySQL 数据库是如何自己“运行”的？数据库本身肯定也要在操作系统上运行吧？没错！&lt;/p&gt;
&lt;p&gt;更高层次的容器，比如 MySQL 容器，实际上会包含必要的库来与底层的操作系统容器通信和集成。所以你可以把容器看成是整个应用堆栈中的一层，每层都依赖于下层的单元。而这就类似于船舶或港口中集装箱的堆叠方式，每个容器的稳定性都依赖于下面的容器的支持。所以应用容器的核心是一个受控的执行环境。它们允许你从头开始定义整个环境，从操作系统开始，到你要使用的各个版本的库，再到你要添加的代码版本。&lt;/p&gt;
&lt;p&gt;与容器相关的一个重要概念是&lt;strong&gt;微服务&lt;/strong&gt;。将应用程序的各个组件拆分并打包成独立的服务，这样每个组件都可以很容易地被替换、升级、调试。上面的例子中，我们会为 Vue 前端创建一个微服务，为 MySQL 数据库创建另一个微服务，为 Java 中间件部分创建另一个微服务，以此类推。很明显，微服务与容器化是相辅相成的。&lt;/p&gt;
&lt;h2 id=&#34;从-docker-开始&#34;&gt;从 Docker 开始&lt;/h2&gt;
&lt;p&gt;现在你已经对容器有一定了解了吧？Docker 是最常用的容器化工具，也是最流行的容器运行时。&lt;/p&gt;
&lt;p&gt;Docker 开源于 2013 年。用于打包和创建容器，管理基于容器的应用。所有 Linux 发行版、Windows 和 macOS 都支持 Docker。&lt;/p&gt;
&lt;p&gt;还有其他的容器化工具，如 &lt;a href=&#34;https://coreos.com/rkt/&#34;&gt;CoreOS rkt&lt;/a&gt;、&lt;a href=&#34;http://mesos.apache.org/documentation/latest/mesos-containerizer/&#34;&gt;Mesos Containerizer&lt;/a&gt; 和 &lt;a href=&#34;https://linuxcontainers.org/&#34;&gt;LXC&lt;/a&gt;。但是目前，绝大多数的容器化应用都是在 Docker 上运行的。&lt;/p&gt;
&lt;h2 id=&#34;再到-kubernetes&#34;&gt;再到 Kubernetes&lt;/h2&gt;
&lt;p&gt;首先，简单介绍一下历史。Kubernetes 是 Google 基于其内部容器调度平台 Borg 的经验开发的。2014 年开源，并作为 CNCF（云原生计算基金会）的核心发起项目。&lt;/p&gt;
&lt;p&gt;那么 Kubernetes 又跟容器是什么关系呢？让我们再回到上面的例子。假设我们的应用爆火，每天的注册用户越来越多。&lt;/p&gt;
&lt;p&gt;现在，我们需要增加后端资源，使浏览我们网站的用户在浏览页面时加载时间不会过长或者超时。最简单的方式就是增加容器的数量，然后使用负载均衡器将传入的负载（以用户请求的形式）分配给容器。&lt;/p&gt;
&lt;p&gt;这样做虽然行之有效，但也只能在用户规模有限的情况下使用。当用户请求达到几十万或几百万时，这种方法也是不可扩展的。你需要管理几十个也许是几百个负载均衡器，这本身就是另一个令人头疼的问题。如果我们想对网站或应用进行任何升级，也会遇到问题，因为负载均衡不会考虑到应用升级的问题。我们需要单独配置每个负载均衡器，然后升级该均衡器所服务的容器。想象一下，当你有 20 个负载均衡器和每周 5 或 6 个小的更新时，你将不得不进行大量的手工劳动。&lt;/p&gt;
&lt;p&gt;我们需要的是一种可以一次性将变更传递给所有受控容器的方法，同时也需要一种可以轻松地调度可用容器的方法，这个过程还必须要是自动化的，这正是 Kubernetes 所做的事情。&lt;/p&gt;
&lt;p&gt;接下来，我们将探讨 Kubernetes 究竟是如何工作的，它的各种组件和服务，以及更多关于如何使用 Kubernetes 来编排、管理和监控容器化环境。为了简单起见，假设我们使用的是 Docker 容器，尽管如前所述，Kubernetes 除了支持 Docker 之外，还支持其他几种容器平台。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-架构和组件&#34;&gt;Kubernetes 架构和组件&lt;/h2&gt;
&lt;p&gt;首先，最重要的是你需要认识到 Kubernetes 利用了“期望状态”原则。就是说，你定义了组件的期望状态，而 Kubernetes 要将它们始终调整到这个状态。&lt;/p&gt;
&lt;p&gt;例如，你想让你的 Web 服务器始终运行在 4 个容器中，以达到负载均衡的目的，你的数据库复制到 3 个不同的容器中，以达到冗余的目的。这就是你想要的状态。如果这 7 个容器中的任何一个出现故障，Kubernetes 引擎会检测到这一点，并自动创建出一个新的容器，以确保维持所需的状态。&lt;/p&gt;
&lt;p&gt;现在我们来定义一些 Kubernetes 的重要组件。&lt;/p&gt;
&lt;p&gt;当你第一次设置 Kubernetes 时，你会创建一个集群。所有其他组件都是集群的一部分。你也可以创建多个虚拟集群，称为命名空间 (namespace)，它们是同一个物理集群的一部分。这与你可以在同一物理服务器上创建多个虚拟机的方式非常相似。如果你不需要，也没有明确定义的命名空间，那么你的集群将在始终存在的默认命名空间中创建。&lt;/p&gt;
&lt;p&gt;Kubernetes 运行在节点 (node) 上，节点是集群中的单个机器。如果你有自己的硬件，节点可能对应于物理机器，但更可能对应于在云中运行的虚拟机。节点是部署你的应用或服务的地方，是 Kubernetes 工作的地方。有 2 种类型的节点——master 节点和 worker 节点，所以说 Kubernetes 是主从结构的。&lt;/p&gt;
&lt;p&gt;主节点是一个控制其他所有节点的特殊节点。一方面，它和集群中的任何其他节点一样，这意味着它只是另一台机器或虚拟机。另一方面，它运行着控制集群其他部分的软件。它向集群中的所有其他节点发送消息，将工作分配给它们，工作节点向主节点上的 API Server 汇报。&lt;/p&gt;
&lt;p&gt;Master 节点本身也包含一个名为 API Server 的组件。这个 API 是节点与控制平面通信的唯一端点。API Server 至关重要，因为这是 worker 节点和 master 节点就 pod、deployment 和所有其他 Kubernetes API 对象的状态进行通信的点。&lt;/p&gt;
&lt;p&gt;Woker 节点是 Kubernetes 中真正干活的节点。当你在应用中部署容器或 pod（稍后定义）时，其实是在将它们部署到 worker 节点上运行。Worker 节点托管和运行一个或多个容器的资源。&lt;/p&gt;
&lt;p&gt;Kubernetes 中的逻辑而非物理的工作单位称为 pod。一个 pod 类似于 Docker 中的容器。记得我们在前面讲到，容器可以让你创建独立、隔离的工作单元，可以独立运行。但是要创建复杂的应用程序，比如 Web 服务器，你经常需要结合多个容器，然后在一个 pod 中一起运行和管理。这就是 pod 的设计目的——一个 pod 允许你把多个容器，并指定它们如何组合在一起来创建应用程序。而这也进一步明确了 Docker 和 Kubernetes 之间的关系——一个 Kubernetes pod 通常包含一个或多个 Docker 容器，所有的容器都作为一个单元来管理。&lt;/p&gt;
&lt;p&gt;Kubernetes 中的 service 是一组逻辑上的 pod。把一个 service 看成是一个 pod 的逻辑分组，它提供了一个单一的 IP 地址和 DNS 名称，你可以通过它访问服务内的所有 pod。有了服务，就可以非常容易地设置和管理负载均衡，当你需要扩展 Kubernetes pod 时，这对你有很大的帮助，我们很快就会看到。&lt;/p&gt;
&lt;p&gt;ReplicationController 或 ReplicaSet 是 Kubernetes 的另一个关键功能。它是负责实际管理 pod 生命周期的组件——当收到指令时或 pod 离线或意外停止时启动 pod，也会在收到指示时杀死 pod，也许是因为用户负载减少。所以换句话说，ReplicationController 有助于实现我们所期望的指定运行的 pod 数量的状态。&lt;/p&gt;
&lt;h2 id=&#34;什么是-kubectl&#34;&gt;什么是 Kubectl？&lt;/h2&gt;
&lt;p&gt;kubectl 是一个命令行工具，用于与 Kubernetes 集群和其中的 pod 通信。使用它你可以查看集群的状态，列出集群中的所有 pod，进入 pod 中执行命令等。你还可以使用 YAML 文件定义资源对象，然后使用 kubectl 将其应用到集群中。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中的自动扩展&#34;&gt;Kubernetes 中的自动扩展&lt;/h2&gt;
&lt;p&gt;请记住，我们使用 Kubernetes 而不是直接使用 Docker 的原因之一，是因为 Kubernetes 能够自动扩展应用实例的数量以满足工作负载的需求。&lt;/p&gt;
&lt;p&gt;自动缩放是通过集群设置来实现的，当服务需求增加时，增加节点数量，当需求减少时，则减少节点数量。但也要记住，节点是 “物理” 结构——我们把“物理”放在引号里，因为要记住，很多时候，它们实际上是虚拟机。&lt;/p&gt;
&lt;p&gt;无论如何，节点是物理机器的事实意味着我们的云平台必须允许 Kubernetes 引擎创建新机器。各种云提供商对 Kubernetes 支持基本都满足这一点。&lt;/p&gt;
&lt;p&gt;我们再继续说一些概念，这次是和网络有关的。&lt;/p&gt;
&lt;h2 id=&#34;什么是-kubernetes-ingress-和-egress&#34;&gt;什么是 kubernetes Ingress 和 Egress？&lt;/h2&gt;
&lt;p&gt;外部用户或应用程序与 Kubernetes pod 交互，就像 pod 是一个真正的服务器一样。我们需要设置安全规则允许哪些流量可以进入和离开“服务器”，就像我们为托管应用程序的服务器定义安全规则一样。&lt;/p&gt;
&lt;p&gt;进入 Kubernetes pod 的流量称为 Ingress，而从 pod 到集群外的出站流量称为 egress。我们创建入口策略和出口策略的目的是限制不需要的流量进入和流出服务。而这些策略也是定义 pod 使用的端口来接受传入和传输传出数据 / 流量的地方。&lt;/p&gt;
&lt;h2 id=&#34;什么是-ingress-controller&#34;&gt;什么是 Ingress Controller？&lt;/h2&gt;
&lt;p&gt;但是在定义入口和出口策略之前，你必须首先启动被称为 Ingress Controller（入口控制器）的组件；这个在集群中默认不启动。有不同类型的入口控制器，Kubernetes 项目默认只支持 Google Cloud 和开箱即用的 Nginx 入口控制器。通常云供应商都会提供自己的入口控制器。&lt;/p&gt;
&lt;h2 id=&#34;什么是-replica-和-replicaset&#34;&gt;什么是 Replica 和 ReplicaSet？&lt;/h2&gt;
&lt;p&gt;为了保证应用程序的弹性，需要在不同节点上创建多个 pod 的副本。这些被称为 Replica。假设你所需的状态策略是“让名为 webserver-1 的 pod 始终维持在 3 个副本”，这意味着 ReplicationController 或 ReplicaSet 将监控活动副本的数量，如果其中有任何一个 replica 因任何原因不可用（例如节点的故障），那么 Deployment Controller 将自动创建一个新的系统（定义如下）。&lt;/p&gt;
&lt;p&gt;所需状态是在 deployment 中定义的。 Master 节点的中有一个子系统叫做 Deployment Controller，负责实际执行并使当前状态不断趋向于所需状态。&lt;/p&gt;
&lt;p&gt;因此，举例来说，如果你目前有 2 个 pod 的副本，而你所希望的状态应该有 3 个，那么 Replication Controller 或 ReplicaSet 会自动检测到这个要求，并指示 Deployment Controller 根据预定义的设置部署一个新的 pod。&lt;/p&gt;
&lt;h2 id=&#34;什么是服务网格&#34;&gt;什么是服务网格？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jimmysong.io/blog/what-is-a-service-mesh/&#34;&gt;服务网格 (Service Mesh)&lt;/a&gt; 用于管理服务之间的网络流量，是云原生的网络基础设施层，也是 &lt;a href=&#34;https://jimmysong.io/blog/post-kubernetes-era/&#34;&gt;Kubernetes 次世代的云原生应用&lt;/a&gt; 的重要组成部分。&lt;/p&gt;
&lt;p&gt;服务网格利用容器之间的网络设置来控制或改变应用程序中不同组件之间的交互。下面，我们用一个例子来说明。假设你想测试 Nginx 的新版本，检查它是否与你的 Web 应用兼容。你用新的 Nginx 版本创建了一个新的容器 (Container2)，并从当前容器 (Container1) 中复制了当前的 Nginx webserver 配置。但你不想影响组成 web 应用的其他微服务（假设每个容器对应一个单独的微服务）——就是 MySQL 数据库、Node.js 前端、负载均衡器等。&lt;/p&gt;
&lt;p&gt;所以使用服务网格，你可以立即只把 webserver 微服务改成 Container2（新 Nginx 版本的那个）进行测试。如果确定它不能工作，比如因为它导致网站出现一些兼容性问题，那么你就调用服务网格来快速切换回原来的 Container1。而这一切都不需要对其他容器进行任何配置变更——这些变更对其他容器是完全透明的。&lt;/p&gt;
&lt;p&gt;如果没有服务网格，对容器来说这项工作将十分繁琐，因为这涉及到逐一更改所有其他容器上的配置，将它们所包含的服务从 Container1 指向 Container2，然后在测试失败后，将它们全部改回来。&lt;/p&gt;
&lt;p&gt;在前面这部分 Kubernetes 指南中，我们介绍了一些与 Kubernetes 网络相关的概念。Kubernetes 中的网络可能很棘手，很难理解，如果你刚刚开始，你可能需要一些实践来理解这里。关于服务网格的更多内容请参考 &lt;a href=&#34;https://www.servicemesher.com/istio-handbook&#34;&gt;Istio Handbook——Istio 服务网格进阶实战&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在下一部分中，我们将展开更多关于 Kubernetes 的话题：如何开始学习 Kubernetes，如何在本地安装和测试 Kubernetes，以及 Kubernetes 的一些优秀的监控工具。&lt;/p&gt;
&lt;h2 id=&#34;如何学习-kubernetes&#34;&gt;如何学习 Kubernetes？&lt;/h2&gt;
&lt;p&gt;自学 Kubernetes 知识基本上有三种不同的途径，我们在这里只提供了一个指导大纲。&lt;/p&gt;
&lt;h3 id=&#34;一从零开始学习和安装-kubernetes&#34;&gt;一、从零开始学习和安装 Kubernetes&lt;/h3&gt;
&lt;p&gt;要想真正掌握 Kubernetes，最好的办法莫过于自己从头开始安装 Kubernetes。不过要注意的是，从零开始安装 Kubernetes 并不是一件容易的事情。安装 Kubernetes 并不是简单的“下载文件 -&amp;gt; 点击安装”式的操作，Kubernetes 由多个组件组成，这些组件必须单独安装和配置。而在此之前，你也需要相当的技术储备来做安装前的准备，比如熟悉 Linux 操作系统。如果你决定使用这种方式学习的话，推荐你阅读 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook&#34;&gt;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&lt;/a&gt;。此外，请记住，尽管 Kubernetes 作为一个开源解决方案在技术上是免费的，但它确实有一些隐藏的成本，只不过对初学者来说可能并不明显。&lt;/p&gt;
&lt;h3 id=&#34;二kubernetes-自托管解决方案&#34;&gt;二、Kubernetes 自托管解决方案&lt;/h3&gt;
&lt;p&gt;这些解决方案样是一些工具和实用程序，大大简化了在本地计算机上安装和配置小型 Kubernetes 集群的任务。它们是学习 Kubernetes 的好方法，同时对于新手来说也不会太难，又足够小巧可以到安装在个人电脑上。最流行的自托管 Kubernetes 工具和环境是 &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;Minikube&lt;/a&gt;、&lt;a href=&#34;https://github.com/ubuntu/microk8s&#34;&gt;MicroK8s&lt;/a&gt;、&lt;a href=&#34;https://docs.docker.com/docker-for-windows/kubernetes/&#34;&gt;Docker Desktop&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/kubernetes-sigs/kind&#34;&gt;Kind&lt;/a&gt;。这些解决方案往往有一些限制，例如，Minikube 只允许创建一个节点。尽管有这些缺点，但这些工具还是非常值得推荐，因为它们将易学性和成本效益结合起来，对于刚开始使用 Kubernetes 的初学者来说，是一个很好的选择。&lt;/p&gt;
&lt;h3 id=&#34;三云托管的解决方案&#34;&gt;三、云托管的解决方案&lt;/h3&gt;
&lt;p&gt;如今各大云供应商都提供了定制化的 Kubernetes 解决方案来。你也可以通过线上教学平台如 &lt;a href=&#34;https://katacoda.com/&#34;&gt;Katacoda&lt;/a&gt; 上的免费课程来学习 Kubernetes，它们都是云托管的，你不需要自己安装，只不过你需要云供应商的集群需要付费。&lt;/p&gt;
&lt;h2 id=&#34;本地测试和调试-kubernetes&#34;&gt;本地测试和调试 Kubernetes&lt;/h2&gt;
&lt;p&gt;作为本地安装 Kubernetes 的一部分，你很可能还需要一些测试和调试能力，以确保一切都在顺利运行，特别是定义入口和出口策略等棘手的任务。此外，还有 Kubernetes 附加组件的生态系统，你可能想使用这些组件来扩展 Kubernetes 集群的功能。添加所有这些都需要进行更多的测试，以确保它们能与你的 Kubernetes 集群完美的集成。&lt;/p&gt;
&lt;p&gt;用于在本地开发和调试 Kubernetes 服务的工具有：&lt;a href=&#34;https://github.com/microsoft/mindaro&#34;&gt;Microsoft Bridge to Kubernetes&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/telepresenceio/telepresence&#34;&gt;telepresence&lt;/a&gt;。这些工具可以让你在本地运行单个服务，同时将该服务连接到远程 Kubernetes 集群。这样你就可以让自己的本地机器作为 Kubernetes 集群中的一部分来运行——这对于在本地而不是在生产集群上开发服务非常有用。&lt;/p&gt;
&lt;p&gt;Kubernetes 项目也了解到了 Kubernetes 安装对端到端 (E2E) 测试的需求。为此，项目核心团队一直在确保在最近的版本中更恰当地支持 E2E 测试。这包括诸如允许测试重用和纳入更多附加组件和驱动程序的测试等。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-监控工具&#34;&gt;Kubernetes 监控工具&lt;/h2&gt;
&lt;p&gt;Kubernetes 提供了应用程序在集群的每个层次上的资源使用情况的详细信息——容器、pod、服务。这些详细信息使你能够评估应用程序的性能，确定哪些瓶颈可以解决以提高整体性能。&lt;/p&gt;
&lt;p&gt;毕竟，监控可以帮助你了解应用和集群运行情况的详细信息，这对于学习 Kubernetes 是十分有帮助的。&lt;/p&gt;
&lt;p&gt;Kubernetes 包含两个内置度量收集工具用于监控：&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/&#34;&gt;资源管道和全度量管道&lt;/a&gt;。资源管道是一个较低级和较有限的工具，主要集中在与各种控制器相关的指标上。全指标管道，顾名思义，从几乎所有集群组件中获取并显示更丰富的指标。&lt;/p&gt;
&lt;p&gt;还有一些第三方工具可以安装并集成到 Kubernetes 集群中。对于 Kubernetes 来说，最普遍使用的两个工具是 Prometheus 和 Grafana。&lt;/p&gt;
&lt;h3 id=&#34;prometheus-监控&#34;&gt;Prometheus 监控&lt;/h3&gt;
&lt;p&gt;Prometheus 是一个功能丰富的开源监控和警报工具。Prometheus 包含一个内部数据存储用来收集指标，如生成的时间序列数据。Prometheus 还拥有众多插件，允许它将数据暴露给各种外部解决方案，并从其他数据源导入数据，包括所有主要公有云监控解决方案。&lt;/p&gt;
&lt;h3 id=&#34;grafana-仪表盘&#34;&gt;Grafana 仪表盘&lt;/h3&gt;
&lt;p&gt;Grafana 是一个优秀的仪表盘、分析和数据可视化工具。它没有 Prometheus 的全功能数据收集能力，但 Prometheus 又没有 Grafana 的数据呈现界面。事实上，他们最好是结合在一起使用——Prometheus 负责数据收集和汇总，Grafana 负责数据展示。它们共同创造了一个强大的组合，涵盖了数据收集、基本警报和可视化。&lt;/p&gt;
&lt;h3 id=&#34;高级警报&#34;&gt;高级警报&lt;/h3&gt;
&lt;p&gt;对于高级警报，你可以添加 &lt;a href=&#34;https://www.nagios.org/&#34;&gt;Nagios&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/prometheus/alertmanager&#34;&gt;Prometheus Alertmanager&lt;/a&gt; 等工具。这些警报工具通常有大量的集成。你可以为自定义值班团队，然后定义你想要监控的参数，例如“当任何 pod 不可用时”或“当任何节点无法访问时”、“当容量达到 90%”等，然后通过电子邮件、短信、手机应用提醒、电话呼叫等方式向值班人员发送自定义通知。你还可以创建升级策略，比如，如果一个被定义为“危急”的警报在 10 分钟内没有值班人员确认，那么就将警报升级（发送警报）到该人员的经理。&lt;/p&gt;
&lt;p&gt;现在，你应该已经对 Docker 和 Kubernetes 有了大体的认识。了解了 Kubernetes 的作用，知道它是如何进行容器化应用部署和管理的。&lt;/p&gt;
&lt;p&gt;调试和监控技术不仅仅是运维需要，你也可以把它当作学习方式。有什么比边做边学更好呢？&lt;/p&gt;
&lt;p&gt;请记住，如果你的应用规模太小，而且预计用户需求不会有太大变化或重大波动（比如一个只在公司内部使用的应用），那么 Kubernetes 对你来说可能没有必要，这种情况下，直接使用 Docker 就足够了。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;云原生领域的开源项目众多（见 &lt;a href=&#34;https://jimmysong.io/awesome-cloud-native&#34;&gt;Awesome Cloud Native/云原生开源项目大全&lt;/a&gt;），其中有大量的优秀项目可供我们学习。此外，Kubernetes 开源已经多年时间，网上有大量的学习资料，业界出版过很多&lt;a href=&#34;https://jimmysong.io/cloud-native/note/books/&#34;&gt;书籍&lt;/a&gt;，建议大家通过阅读&lt;a href=&#34;https://kubernetes.io&#34;&gt;官方文档&lt;/a&gt;和实践来学习，也可以参考我编写的&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook&#34;&gt;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;推荐大家加入我发起创办的&lt;a href=&#34;https://cloudnative.to&#34;&gt;云原生社区&lt;/a&gt;，这是一个立足中国，放眼世界的云原生终端用户社区，致力于云原生技术的传播和应用。云原生社区主办的&lt;a href=&#34;https://github.com/cloudnativeto/academy&#34;&gt;云原生学院&lt;/a&gt;定期邀请云原生和开源领域的大咖在 B 站上进行直播分享，成员自发组织了多个 SIG（特别兴趣小组）进行讨论学习。欢迎加入我们，共同学习和交流云原生技术。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>新的开始——告别蚂蚁，加入 Tetrate</title>
      <link>https://jimmysong.io/blog/moving-on-from-ant-group/</link>
      <pubDate>Mon, 31 Aug 2020 08:27:17 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/moving-on-from-ant-group/</guid>
      <description>
        
        
        &lt;p&gt;今天是我加入蚂蚁的第 914 天，也是在&lt;a href=&#34;https://www.antgroup.com/&#34;&gt;蚂蚁&lt;/a&gt;的最后一天，明天就是 9 月 1 日了，这一天通常都是学校开学的日子，在阿里巴巴大家都以”同学”相称，明天我将加入 &lt;a href=&#34;https://tetrate.io&#34;&gt;Tetrate&lt;/a&gt;，这也算开始我的新学期吧！&lt;/p&gt;
&lt;h2 id=&#34;蚂蚁阿里巴巴与云原生社区&#34;&gt;蚂蚁/阿里巴巴与云原生社区&lt;/h2&gt;
&lt;p&gt;迄今为止，蚂蚁/阿里巴巴集团对我的职业生涯产生了深远影响，尤其是它的企业文化和价值观，阿里巴巴招聘的理念的“寻找同路人”，在创建云原生社区的过程，不也是寻找同路人的过程吗？&lt;a href=&#34;https://cloudnative.to&#34;&gt;云原生社区&lt;/a&gt;就像一个小型社会，我不求它有多大的社会价值，只求它可以对个人、对企业、对社会带来微小而美好的改变。我不断得思考作为个人、员工。尤其是社区的发起人，我的使命到底是什么？我在公司中应该担当什么样的角色？这个社区要走向何方？我在摸索中前进，但是因为有你们的支持，使我更加坚定，致力于云原生技术在中国的普及和应用，以外我一个人可能走得更快，但现在与社区在一起，我们将走得更远！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;20190624.jpg&#34; alt=&#34;2019 年 6 月 24 日，上海，KubeCon China 2019&#34;&gt;
&lt;em&gt;2019 年 6 月 24 日，上海，KubeCon China 2019&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;加入-tetrate&#34;&gt;加入 Tetrate&lt;/h2&gt;
&lt;p&gt;在过去的两年里，我一直在着力推广 Istio 和 Service Mesh 技术，在蚂蚁集团的资助下，我创办了 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;ServiceMesher 社区&lt;/a&gt;，将 Service Mesh 技术带到了中国，接下来我希望将中国实践带到世界。当然还有今年疫情期间成立的&lt;a href=&#34;https://cloudnative.to&#34;&gt;云原生社区&lt;/a&gt;，向开发者和大众普及云原生知识和应用。&lt;/p&gt;
&lt;p&gt;作为 Developer Advocate，最重要的一点是不要停止学习，同时要善于倾听和总结。在过去的两年里，我看到无数人对 Service Mesh 表现出浓厚的兴趣，但因对新技术的风险了解的不足及知识匮乏而无从下手。我十分兴奋加入这家专注于 Service Mesh 的初创公司 &lt;a href=&#34;https://tetrate.io&#34;&gt;Tetrate&lt;/a&gt;，这是一家全球化远程办公的初创公司，公司的产品围绕开源 &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https://envoyproxy.io&#34;&gt;Envoy&lt;/a&gt; 和 &lt;a href=&#34;https://skywalking.apache.org/&#34;&gt;Apache SkyWalking&lt;/a&gt; 等开源项目构建，致力于打造云原生的网络基础设施。这里有这些开源项目的多位 Maintainer，如 &lt;a href=&#34;https://twitter.com/wusheng1108&#34;&gt;吴晟&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/ZackButcher&#34;&gt;Zack Butcher&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/zlizan&#34;&gt;周礼赞&lt;/a&gt; 等，我相信跟他们一起，可以帮助大家快速、有效的了解和应用 Service Mesh，跨向云原生。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;今年年初在筹备云原生社区的时候，我就确定了未来三年内的工作方向——云原生、开源和社区。在追求梦想的道路上充满荆棘，不仅需要勇气和毅力，还需要你们做我坚强的后盾，我一定披荆斩棘，一往无前。开源是世界的，要想让世界更理解我们，我们必须更加主动地融入这个世界。希望中国开源的明天会更好，希望 Service Mesh 技术在中国更好的落地，希望云原生能够普惠大众，希望大家都可以找到自己的使命。&lt;/p&gt;
&lt;p&gt;Tetrate 目前也在&lt;a href=&#34;https://jimmysong.io/job/tetrate&#34;&gt;招聘&lt;/a&gt;中，欢迎投递简历。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes 次世代的云原生应用</title>
      <link>https://jimmysong.io/blog/post-kubernetes-era/</link>
      <pubDate>Mon, 01 Jun 2020 18:13:19 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/post-kubernetes-era/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 自开源至今已经走过六个年头了，&lt;a href=&#34;https://cloudnative.to/blog/cloud-native-era/&#34;&gt;云原生时代&lt;/a&gt;也已到来，我关注云原生领域也四年有余了，最近开始思考云原生的未来走向，特此撰写本文作为&lt;a href=&#34;https://jimmysong.io/guide-to-cloud-native-app&#34;&gt;《云原生应用白皮书》&lt;/a&gt;的开篇，更多关于云原生应用的介绍请转到白皮书中浏览。&lt;/p&gt;
&lt;h2 id=&#34;重点&#34;&gt;重点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云原生基础设施已渡过了野蛮生长期，正朝着统一应用标准方向迈进。&lt;/li&gt;
&lt;li&gt;Kubernetes 的原语无法完整描述云原生应用体系，且在资源的配置上开发与运维功能耦合严重。&lt;/li&gt;
&lt;li&gt;Operator 在扩展了 Kubernetes 生态的同时导致云原生应用碎片化，亟需一个统一的应用定义标准。&lt;/li&gt;
&lt;li&gt;OAM 的本质是将云原生应用定义中的研发、运维关注点分离，资源对象进行进一步抽象，化繁为简，包罗万象。&lt;/li&gt;
&lt;li&gt;“Kubernetes 次世代”是指在 Kubernetes 成为基础设施层标准之后，云原生生态的关注点正在向应用层过度，近两年来火热的 Service Mesh 正是该过程中的一次有力探索，而基于 Kubernetes 的云原生&lt;strong&gt;应用&lt;/strong&gt;架构的时代即将到来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 已成为云原生应用的既定运行平台，本文以 Kubernetes 为默认平台展开，包括云原生应用的分层模型。&lt;/p&gt;
&lt;h2 id=&#34;云原生的不同发展阶段&#34;&gt;云原生的不同发展阶段&lt;/h2&gt;
&lt;p&gt;Kubernetes 从开源至今已经走过快&lt;a href=&#34;https://jimmysong.io/cloud-native/memo/open-source/&#34;&gt;六个年头&lt;/a&gt;（2014 年 6 月开源）了，可以说是 Kubernetes 的诞生开启了整个云原生的时代。我粗略的将云原生的发展划分为以下几个时期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cloud-native-stages.png&#34; alt=&#34;云原生的发展阶段&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一阶段：孵化期（2014 年）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2014 年，Google 开源 Kubernetes，在此之前的 2013 年，Docker 开源，DevOps、微服务已变得十分流行，云原生的概念已经初出茅庐。在开源了 Kubernetes 之后，Google 联合其他厂商发起成立了 CNCF，并将 Kubernetes 作为初创项目捐献给了 CNCF。CNCF 作为云原生的背后推手，开始推广 Kubernetes。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二阶段：高速发展期（2015 年 - 2016 年）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这几年间，Kubernetes 保持着高速发展，并于 2017 年打败了 Docker Swarm、Mesos，确立了容器编排工具领导者的地位。CRD 和 Operator 模式的诞生，大大增强了 Kubernetes 的扩展性，促进了周边生态的繁荣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三阶段：野蛮生长期（2017 年 - 2018 年）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2016 年之后的云原生基本都默认运行在 Kubernetes 平台上，2017、2018 年 Google 主导的 Istio、Knative 相继开源，这些开源项目都大量利用了 Kubernetes 的 Operator 进行了扩展，Istio 刚发布时就有 50 多个 CRD 定义。Istio 号称是&lt;a href=&#34;https://jimmysong.io/blog/service-mesh-the-microservices-in-post-kubernetes-era/&#34;&gt;后 Kubernetes 时代的微服务&lt;/a&gt;，它的出现第一次使得云原生以服务（应用）为中心。Knative 是 Google 在基于 Kubernetes 之上开源的 Serverless 领域的一次尝试。2018 年 Kubernetes 正式从 CNCF &lt;a href=&#34;https://www.cncf.io/blog/2018/03/06/kubernetes-first-cncf-project-graduate/&#34;&gt;毕业&lt;/a&gt;，Prometheus、Envoy 也陆续从 CNCF 毕业。CNCF 也与 2018 年修改了 charter，对云原生进行了重定义，从原来的三要素：”应用容器化；面向微服务架构；应用支持容器的编排调度“，修改为”云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API“。这一年，我曾写过两篇 Kubernetes 及云原生发展的年终总结和展望，见 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/appendix/kubernetes-and-cloud-native-summary-in-2017-and-outlook-for-2018.html&#34;&gt;2017 年&lt;/a&gt;和 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/appendix/kubernetes-and-cloud-native-summary-in-2018-and-outlook-for-2019.html&#34;&gt;2018 年&lt;/a&gt;的预测和总结。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四阶段：普及推广期（2019 年至今）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经过几年的发展，Kubernetes 已经得到的大规模的应用，云原生的概念开始深入人心，Kubernetes 号称是云原生的操作系统，基于 Operator 模式的生态大放异彩。整合 Kubernetes 和云基础设施，研发和运维关注点分离。Kubernetes 到 Service Mesh（后 Kubernetes 时代的微服务），基于 Kubernetes 的 Serverless 都在快速发展，OAM 诞生，旨在定义云原生应用标准。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-开辟了云原生时代&#34;&gt;Kubernetes 开辟了云原生时代&lt;/h2&gt;
&lt;p&gt;Kubernetes 开源之初就继承了 Google 内部调度系统 Borg 的经验，屏蔽掉了底层物理机、虚拟机之间的差异，经过几年时间的发展成为了容器编排标准，进而统一了 PaaS 平台的基础设施层。&lt;/p&gt;
&lt;p&gt;下图是Kubernetes 原生内置的可以应用到一个 Pod 上的所有控制器、资源对象等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kubernetes-concepts.png&#34; alt=&#34;Kubernetes 概念&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片来自图书 &lt;a href=&#34;https://www.redhat.com/cms/managed-files/cm-oreilly-kubernetes-patterns-ebook-f19824-201910-en.pdf&#34;&gt;Kubernetes Patterns（O’Reilly）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 作为云原生基础设施设计之初遵循了以下原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础设施即代码（声明式 API）&lt;/li&gt;
&lt;li&gt;不可变基础设施&lt;/li&gt;
&lt;li&gt;幂等性&lt;/li&gt;
&lt;li&gt;调节器模式（Operator 的原理）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中声明式 API 可谓开创了云原生时代的基调，而调节器模式是 Kubernetes 区别于其他&lt;a href=&#34;https://jimmysong.io/cloud-native-infra/evolution-of-cloud-native-developments.html&#34;&gt;云部署形式&lt;/a&gt;的主要区别之一，这也为后来的 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/54633203&#34;&gt;Operator 框架的诞生&lt;/a&gt;打下了基础。&lt;/p&gt;
&lt;h3 id=&#34;声明式-api&#34;&gt;声明式 API&lt;/h3&gt;
&lt;p&gt;根据声明式 API 可以做应用编排，定义组件间的依赖，通常使用人类易读的 YAML 文件来表示。但是，YAML 文件声明的字段真的就是最终的状态吗？有没有可能动态改变？&lt;/p&gt;
&lt;p&gt;我们在创建 &lt;code&gt;Deployment&lt;/code&gt; 时会指定 Pod 的副本数，但是其实际副本数并不一定是一成不变的。假如集群中还有定义 HPA，那么 Pod 的副本数就可能随着一些外界因素（比如内存、CPU 使用率或者自定义 metric）而改变，而且如果集群中还有运行自定义的控制器话，那么也有可能修改应用的实例数量。在有多个控制器同时控制某个资源对象时，如何确保控制器之间不会发生冲突，资源对象的状态可预期？可以使用&lt;a href=&#34;https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/#monitoring-admission-webhooks&#34;&gt;动态准入控制&lt;/a&gt;来达到这一点。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-原生应用&#34;&gt;Kubernetes 原生应用&lt;/h3&gt;
&lt;p&gt;我们都知道要想运行一个应用至少需要以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用的业务逻辑（代码）、运行时（可运行的二进制文件、字节码或脚本）。&lt;/li&gt;
&lt;li&gt;应用的配置注入（配置文件、环境变量等），身份、路由、服务暴露等满足应用的安全性和可访问性。&lt;/li&gt;
&lt;li&gt;应用的生命周期管理（各种 Controller 登场）。&lt;/li&gt;
&lt;li&gt;可观察性、可运维、网络和资源及环境依赖、隔离性等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图展示了基于 Kubernetes 原语及 PaaS 平台资源的 Kubernetes 原生应用的组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kubernetes-native-application-motion.gif&#34; alt=&#34;Kubernetes 原生应用&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们都知道 Kubernetes 提供了大量的&lt;a href=&#34;https://kubernetes.io/docs/concepts/&#34;&gt;原语&lt;/a&gt;，用户可以基于这些原语来编排服务，管理应用的生命周期。上图展示的是基于 Kubernetes 原生应用可以使用的 Kubernetes 原语、扩展及平台层资源，从内向外的对象跟应用程序（业务逻辑）的关联度依次降低，到最外层基本只剩下平台资源依赖，已经与 Kubernetes 几乎没有关系了。该图里仅展示了部分资源和对象（包含阿里巴巴开源的 &lt;a href=&#34;https://github.com/openkruise/kruise&#34;&gt;OpenKruise&lt;/a&gt;、Istio），实际上 &lt;a href=&#34;https://operatorhub.io/&#34;&gt;Operator&lt;/a&gt; 资源之丰富，也是 Kubernetes 生态如此繁荣的原因之一。&lt;/p&gt;
&lt;p&gt;Kubernetes 本身的原语、资源对象、配置、常用的 CRD 扩展有几十、上百个之多。开发者需要了解这些复杂的概念吗？我只是想部署一个应用而已！不用所对于应用开发者，即使对于基础实施开发和运维人员也需要很陡峭的学习曲线才能完全掌握它。&lt;/p&gt;
&lt;p&gt;我将 Kubernetes 原生应用所需要的定义和资源进行了分层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心层&lt;/strong&gt;：应用逻辑、服务定义、生命周期控制；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离与服务访问层&lt;/strong&gt;：资源限制与隔离、配置、身份、路由规则等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度层&lt;/strong&gt;：各种调度控制器，这也是 Kubernetes 原生应用的主要扩展层；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源层&lt;/strong&gt;：提供网络、存储和其他平台资源；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而这些不同的层，完全可以将其职责分配给相应的人员，比如核心层是由应用程序开发者负责，将其职责分离，可以很大程度上降低开发和运维的复杂度。&lt;/p&gt;
&lt;p&gt;云原生应用落实到 Kubernetes 平台之上，仅仅利用 Kubernetes 的对象原语已很难描述一个复杂的应用程序，所以诞生了各种各样的 Operator，但这也仅仅解决了单个应用的定义，对于应用的打包封装则无能为力。&lt;/p&gt;
&lt;p&gt;同一个资源对象又有多种实现方式，比如 Ingress 就有 &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1DnsHtdHbxjvHmxvlu7VhzWcWgLAn_Mc5L1WlhLDA__k/edit#gid=0&#34;&gt;10 多种实现&lt;/a&gt;，PV 就更不用说，对于对于开发者究竟如何选择，平台如何管理，这都是让人很头疼的问题。而且有时候平台所提供的扩展能力还可能会有冲突，这些能力有的可能互不相干，有的可能会有正交，有的可能完全重合。且应用本身与运维特性之间存在太多耦合，不便于复用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;resources-motion.gif&#34; alt=&#34;资源交集动画&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中不同颜色的方框代表不同的资源类别，红线框代表不能为一个资源同时应用该配置，否则会出现冲突，不同的颜色上面是一个动画，展示的是部分资源组合。图中仅包含了部分 Kubernetes 中的原语和 Istio 中的资源对象组合及自定义扩展，实际上用户可以根据应用的自身特点，基于 Kubernetes 原语和 CRD 创建出千变万化的组合。&lt;/p&gt;
&lt;p&gt;为了管理这些应用诞生出了众多的 &lt;a href=&#34;https://github.com/operator-framework/awesome-operators&#34;&gt;Operator&lt;/a&gt;。Kubernetes 1.7 版本以来就引入了&lt;a href=&#34;https://kubernetes.io/docs/concepts/api-extension/custom-resources/&#34;&gt;自定义控制器&lt;/a&gt;的概念，该功能可以让开发人员扩展添加新功能，更新现有的功能，并且可以自动执行一些管理任务，这些自定义的控制器就像 Kubernetes 原生的组件一样，Operator 直接使用 Kubernetes API进行开发，也就是说它们可以根据这些控制器内部编写的自定义规则来监控集群、更改 Pods/Services、对正在运行的应用进行扩缩容。&lt;/p&gt;
&lt;p&gt;Operator 的本质是一种调节器模式（Reconciler Pattern）的应用，跟 Kubernetes 本身的实现模式是一样的，用于管理云原生应用，协调应用的实际状态达到预期状态。&lt;/p&gt;
&lt;p&gt;调节器模式的四个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的输入和输出都使用数据结构。&lt;/li&gt;
&lt;li&gt;确保数据结构是不可变的。&lt;/li&gt;
&lt;li&gt;保持资源映射简单。&lt;/li&gt;
&lt;li&gt;使实际状态符合预期状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;云原生应用走向碎片化&#34;&gt;云原生应用走向碎片化&lt;/h2&gt;
&lt;p&gt;利用声明式 API 及调节器模式，理论上可以在 Kubernetes 上部署任何可声明应用，但是在 Operator 出现之前，管理 Kubernetes 上的有状态应用一直是一个难题，随着 Operator 模式的确立，该难题已得以解决，并促进了 Kubernetes 生态的进一步发展。随着该生态的繁荣，有一种碎片化的特征正在显现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生应用碎片化的体现&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operator 模式将运维人员的反应式经验转化成基于 &lt;code&gt;Reconcile&lt;/code&gt; 模式的代码，统一了有状态应用的管理模式，极大得扩展了 Kubernetes 应用生态。&lt;/li&gt;
&lt;li&gt;开发者在引用 Operator 所提供的能力时没有统一的视图，加大了基础设施运维与开发者之间的沟通成本。&lt;/li&gt;
&lt;li&gt;Operator 总体上治理松散，没有统一的管控机制，在同时应用时可能导致互相冲突或无法预期的结果发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;有状态应用管理难题&#34;&gt;有状态应用管理难题&lt;/h3&gt;
&lt;p&gt;Kubernetes 对于无状态应用的管理很出色，但是对于有状态应用就不是那么回事了。虽然 StatefulSet 可以帮助管理有状态应用，但是这还远远不够，有状态应用往往有复杂的依赖。声明式的 API 里往往要加载着大量的配置和启动脚本，才能实现一个复杂应用的 Kubernetes 化。&lt;/p&gt;
&lt;p&gt;例如在 2017 年初，Operator Framework 出现之前，需要使用大量的 &lt;code&gt;ConfigMap&lt;/code&gt;、复杂的启动脚本才能&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/guide/migrating-hadoop-yarn-to-kubernetes.html&#34;&gt;在 Kubernetes 上定义 Hadoop YARN&lt;/a&gt; 和&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/usecases/running-spark-with-kubernetes-native-scheduler.html&#34;&gt;运行 Spark&lt;/a&gt;。虽然 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/&#34;&gt;&lt;code&gt;StatefulSet&lt;/code&gt;&lt;/a&gt; 号称可以解决有状态应用的部署问题，但是它主要是保证了 Pod 的在启动、伸缩时的顺序和使 Pod 具有稳定的标识。但是很多分布式应用来说并不仅依靠启动顺序就可以保证其状态，根据其在分布式应用中的角色不同（master/worker）而需要有大量的自定义配置，在没有 Operator 之前这些配置通常是通过一些自定义脚本来实现，这些脚本可能存在于应用镜像中，也可以通过 &lt;code&gt;ConfigMap&lt;/code&gt; 挂在到容器运行时，但无论如何这些脚本都可能因为散落在各处，这些脚本还是面向过程的，跟在 Kubernetes 诞生之前的运维方式毫无二致，这极其不便于版本控制和运维管理。&lt;/p&gt;
&lt;h3 id=&#34;operator-统一了-kubernetes-应用运维框架&#34;&gt;Operator 统一了 Kubernetes 应用运维框架&lt;/h3&gt;
&lt;p&gt;Operator 大大增强了 Kubernetes 的可扩展性，丰富了以 Kubernetes 为基础的云原生生态，许多原先不是为 Kubernetes 而构建的应用纷纷通过&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54633203&#34;&gt;构建自己的 Operator&lt;/a&gt; 迁移到 Kubernetes 上。还有一些直接基于 Kubernetes 构建的 Service Mesh、Serverless 框架，它们应用 Operator 模式（如 &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https://knative.dev&#34;&gt;Knative&lt;/a&gt;），试图成为云原生应用的基础设施层，补齐 Kubernetes 在服务治理、无服务架构等方面的短板，随着大量的 CRD、Operator 控制器的出现，而 Kubernetes 却无法以应用的视角来管理这些能力及其背后零散的 CRD，这使得云原生应用碎片化。&lt;/p&gt;
&lt;p&gt;Operator 百花齐放，在没有一个大一统的视图之前，各个控制器之间存在着这样的关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;独立&lt;/strong&gt;：互不干涉，比如 Controller 与服务发现之间就不存在冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可组合&lt;/strong&gt;：例如 &lt;code&gt;Service&lt;/code&gt;、&lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;DestinationRule&lt;/code&gt; 同属一类资源（可访问性与路由），就是可组合的（后两者是 Istio 中的 CRD，用于流量管理）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有冲突&lt;/strong&gt;：例如图中的 &lt;code&gt;CronHorizontalPodAutoscaler&lt;/code&gt;（CRD）、&lt;code&gt;HorizontalPodAutoscaler&lt;/code&gt;（Kubernetes 内置），同时使用可能导致无法意料的情况发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正是以为这样复杂的关系，导致其无法做到开箱即用，还需要基础设施团队基于云原生社区和生态自己构建出来的，比如&lt;a href=&#34;https://jimmysong.io/awesome-cloud-native/#application-delivery&#34;&gt;应用交付领域&lt;/a&gt;的系列开源项目。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用管理工具-helm&#34;&gt;云原生应用管理工具 Helm&lt;/h2&gt;
&lt;p&gt;Kubernetes 之上有很多能力缺失，比如应用构建、发布、管理和运维等，Helm 的出现主要补偿了应用打包和版本管理的缺陷。其中云原生应用的配置包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序启动时加载的配置文件；&lt;/li&gt;
&lt;li&gt;应用程序的运维配置，如资源申请限额；&lt;/li&gt;
&lt;li&gt;应用程序的服务发现配置；&lt;/li&gt;
&lt;li&gt;应用程序的工作负载、发布策略、依赖等；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些配置可以存在于 &lt;code&gt;ConfigMap&lt;/code&gt;、&lt;code&gt;Deployment&lt;/code&gt;、&lt;code&gt;Service&lt;/code&gt;、&lt;code&gt;Ingress&lt;/code&gt; 等 Kubernetes 的多个资源文件中，如何保证应用程序的复用性？应用程序之间有依赖该如何解决？这是时候你可能自然的想到了 Helm。&lt;/p&gt;
&lt;p&gt;云原生应用打包和发布管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Helm 通过 chart 模板，提高了应用程序的复用性并解决了部分依赖问题；&lt;/li&gt;
&lt;li&gt;Chart 仓库提供了云原生应用程序的统一管控视图；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt; 概念的引入，使得云原生应用版本化管理进一步加强；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Helm 主要关注的是 &lt;a href=&#34;https://12factor.net/zh_cn/&#34;&gt;12 因素应用&lt;/a&gt;法则&lt;a href=&#34;https://12factor.net/zh_cn/build-release-run&#34;&gt;构建、发布、运行&lt;/a&gt;这一原则中的”发布”这一环节。下图是 Helm v3 的架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;helm-chart.png&#34; alt=&#34;Helm3 架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;Helm 可以安装本地或者远程的 chart，当 chart 安装到 Kubernetes 中后就会创建一个 release，每次更新该 chart 的配置并执行 &lt;code&gt;helm upgrade&lt;/code&gt;， release 的版本数就会加 1，开发者可以升级 chart 或回滚到历史版本。&lt;/p&gt;
&lt;h3 id=&#34;打包配置和发布&#34;&gt;打包、配置和发布&lt;/h3&gt;
&lt;p&gt;Helm 和 chart 的主要作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序封装&lt;/li&gt;
&lt;li&gt;版本管理&lt;/li&gt;
&lt;li&gt;依赖检查&lt;/li&gt;
&lt;li&gt;便于应用程序分发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Helm 采用 &lt;a href=&#34;https://helm.sh/docs/topics/charts/&#34;&gt;Chart&lt;/a&gt; 的格式来标准化描述应用，可以将目录打包成版本化的压缩包进行部署理论上一个 Chart 是可以嵌套若干个 Chart 并定义依赖关系，组织形式非常灵活。Helm chart 用于打包 Kubernetes 原生应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用配置参数，在 Chart 中由 &lt;code&gt;values.yaml&lt;/code&gt; 和命令行参数组成。Chart 采用 Go Template 的特性和 &lt;code&gt;values.yaml&lt;/code&gt; 对部署的模板文件进行参数渲染，也可以通过 &lt;code&gt;helm&lt;/code&gt; 命令 &lt;code&gt;--set key=value&lt;/code&gt; 的方式进行参数赋值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Release 代表 Chart 在集群中的运行实例，Helm 围绕 Release 对应用提供了强大的生命周期管理能力，包括 Release 的查询、安装、更新、删除、回滚等。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用&#34;&gt;云原生应用&lt;/h2&gt;
&lt;p&gt;以上关注的点都是基于 Kubernetes 原语的实现，虽然基于 Kubernetes 构建的 PaaS 平台部分屏蔽了底层基础设施的差异，但是仍有很多云服务是无法通过 Kubernetes 创建，或者需要提前创建供 Kubernetes 原生应用使用的，这些应用通常不运行在 Kubernetes 集群中。因此创建和管理一个云原生应用程序需要考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行时：ECS、Docker、KataContainer、gVisor 等；&lt;/li&gt;
&lt;li&gt;资源隔离性：多租户、VPC、Namespace、防火墙；&lt;/li&gt;
&lt;li&gt;资源调度：各种类型的 controller；&lt;/li&gt;
&lt;li&gt;网络可达性：Service、Ingress、Egress、Gateway、VirtualService、DestinationRule、LoadBalancer、ServiceEntry 等；&lt;/li&gt;
&lt;li&gt;可观测性：日志、分布式追踪、指标；&lt;/li&gt;
&lt;li&gt;安全性：SecurityPolicy、NetworkPolicy、AuthorizationPolicy；&lt;/li&gt;
&lt;li&gt;平台资源申请：数据库、存储等；&lt;/li&gt;
&lt;li&gt;运行与隔离：ECS、Docker、KataContainer 等；&lt;/li&gt;
&lt;li&gt;资源分配和调度：各种控制器；&lt;/li&gt;
&lt;li&gt;环境隔离：Namespace、多租户、VPC、防火墙、LimitRange、Resources；&lt;/li&gt;
&lt;li&gt;可访问性：Service、Ingress、Egress、Gateway、LoadBalancer、VirtualService、DestinationRule、ServiceEntry；&lt;/li&gt;
&lt;li&gt;状态管理：Operator；&lt;/li&gt;
&lt;li&gt;可观察性：日志、监控、指标；&lt;/li&gt;
&lt;li&gt;安全性：SecurityPolicy、ServiceAccount；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;云原生应用分层模型&#34;&gt;云原生应用分层模型&lt;/h3&gt;
&lt;p&gt;那么究竟如何来给云原生应用分层，化繁就简？近几年来，基于 Kubernetes 的应用呈爆炸式发展，光是在&lt;a href=&#34;https://jimmysong.io/awesome-cloud-native/#application-delivery&#34;&gt;应用交付领域&lt;/a&gt;的开源项目就达几十个之多。下图展示我根据这些项目的特性而绘制的 App Delivery Landscape。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cloud-native-app.png&#34; alt=&#34;云原生应用的分层模型&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用定义和包装&lt;/strong&gt;：云原生应用的最上层，直接定义云原生应用的组成形式，解决云原生应用之间的依赖关系，并封装成发布包，如 Helm、CNAB，还有云原生变成语言 Pulumi 和 Ballerina，基于 API 的方式来编排云原生应用；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载定义&lt;/strong&gt;：基于 Kubernetes Operator，大多是 Serverless 负载，既负责了负载的定义又负责了生命周期管理。&lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; 是比较特殊的存在，它不仅管理服务间的流量，还负责安全性、可观察性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用发布和上线&lt;/strong&gt;：关注应用的构建和发布、GitOps、发布策略等，这也是云原生应用全景中最丰富的部分之一；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 原语&lt;/strong&gt;：Kubernetes 本身提供的原语，Operator 基于此构建；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上为我个人分类的云原生应用全景模型，仅限于 Kubernetes 之上的应用，对于其他非 Kubernetes 应用非本文的考虑范围。另外，CNCF SIG App Delivery 中也给出的云原生应用的分层模型，其模型将非 Kubernetes 应用场景也纳入了考虑，详见：&lt;a href=&#34;https://docs.google.com/document/d/1gMhRz4vEwiHa3uD8DqFKHGTSxrVJNgkLG2WZWvi9lXo/edit#heading=h.h9so53gv5zen&#34;&gt;The Dictionary of Cloud-Native App Delivery&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Platform/Kuberntes，Kubernetes 仅仅是屏蔽了平台的一些差异，但是对于最上层的应用来说，没有涉及，用户需要自己来基于各种开源组件来搭积木。&lt;/p&gt;
&lt;h3 id=&#34;oam开放应用模型&#34;&gt;OAM（开放应用模型）&lt;/h3&gt;
&lt;p&gt;那么以上这么多应用有哪些共性，能不能再进一步抽象呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有应用是都以容器作为运行时环境（ContainerizedWorkload），这是 OAM 中的核心 Workload 类型；&lt;/li&gt;
&lt;li&gt;在应用发布和上线方面，有些是属于应用的运维特征，需要根据实际需求组合和变更，这些是持续变动的部分；&lt;/li&gt;
&lt;li&gt;要实现某些复杂的应用管控，需要使用到多个 CRD 的组合，比如 Istio 中的让流量根据百分比切分到不同的而服务，就需要部署 Istio Operator，并声明 &lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;DestinationRule&lt;/code&gt;，二者同时使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 的 Runtime 的正常流程应该是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用开发者创建自己的 &lt;code&gt;Component&lt;/code&gt;，在 &lt;code&gt;Component&lt;/code&gt; 中描述要应用相关的信息，如应用名称、镜像配置、环境变量等，应用到 Kubernetes cluster 中；&lt;/li&gt;
&lt;li&gt;运维创建各种运维策略，如发布策略、网络策略等等，发布时由 AppConfig 对象关联要发布的 &lt;code&gt;Component&lt;/code&gt; 和本次的运维策略，apply 到集群中，集群的 OAM operator watch 到一次 &lt;code&gt;ApplicationConfiguration&lt;/code&gt;的下发，生成 &lt;code&gt;Component&lt;/code&gt; 对应的 &lt;code&gt;Workload&lt;/code&gt; 和 &lt;code&gt;Trait&lt;/code&gt;，&lt;code&gt;Trait&lt;/code&gt; controller 将本次的 &lt;code&gt;Trait&lt;/code&gt; 策略应用到本次要管理的 &lt;code&gt;Workload&lt;/code&gt; 当中，最终到达终态，完成一次发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OAM 是对 Kubernetes 友好的，一样采用声明式 API 的理念开发。如果你已经编写了现成的 CRD Operator，可以平滑的接入到 OAM 体系中。OAM 以应用为中心，高度可扩展，扩展点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workload：扩展各种运行时类型，不仅限于容器运行时，还可以定义更多其他运行时，比如 Serverless 负载、虚拟机、数据库、网络等；例如，Pod、无服务器函数、数据存储、消息队列或任何其他类型的工作负载，这些都是应用程序开发人员需要设计一个完整的应用程序所需要的，可以直接引用 Kubernetes 的 CRD；&lt;/li&gt;
&lt;li&gt;Trait：各种运维规则，比如扩缩容、流量控制、安全性；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生态&#34;&gt;生态&lt;/h3&gt;
&lt;p&gt;以前 CNCF 的主要关注群体大多是基础设施领域的技术人员，但是自 2019 年 9 月，&lt;a href=&#34;https://www.infoq.cn/article/Cdw7ISlEqKilGyN9V3Pj&#34;&gt;CNCF 宣布成立 SIG App Delivery&lt;/a&gt; 后，CNCF 正在将应用开发者和运维人员更紧密的联系在一起。&lt;a href=&#34;https://github.com/cncf/sig-app-delivery&#34;&gt;应用交付 SIG&lt;/a&gt; 的使命是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在与开发、分发、部署、管理和运行安全的云原生应用相关的领域进行合作，目标是以云原生方式交付应用。&lt;/li&gt;
&lt;li&gt;发展信息资源，包括指南、教程和白皮书，让社区了解最佳实践和应用交付的价值。&lt;/li&gt;
&lt;li&gt;识别合适的项目和现状的差距，定期向 TOC 更新，并以结构化的方式向 TOC 提出行动建议。这包括帮助 TOC 评估和对潜在的新项目进行尽职调查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前 OAM 定义的云原生应用模型已有以下项目支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://crossplane.io/&#34;&gt;Crossplane&lt;/a&gt;：这是一个开源的 Kubernetes 扩展组件，适用于主流公有云平台，使用 &lt;code&gt;kubectl&lt;/code&gt; 配置和管理基础架构、服务和应用。对于 OAM 的支持详见&lt;a href=&#34;https://crossplane.io/docs/v0.11/getting-started/run-applications.html&#34;&gt;运行应用程序&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://googlecontainertools.github.io/kpt/&#34;&gt;KPT&lt;/a&gt;：Kpt（发音为 &amp;ldquo;keep&amp;rdquo;）是一个在资源配置之上构建声明性工作流的开源工具。它的 git + YAML 架构意味着它只需与现有的工具、框架和平台一起工作。Kpt 包括了获取、显示、自定义、更新、验证和应用 Kubernetes 配置的解决方案。对 OAM 的支持详见 &lt;a href=&#34;https://googlecontainertools.github.io/kpt/guides/ecosystem/oam/&#34;&gt;使用 kpt 来管理由开放应用模型（OAM）定义的自定义 Kubernetes 应用程序&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用交付领域相关的开源项目还有很多，详见 &lt;a href=&#34;https://jimmysong.io/awesome-cloud-native/#application-delivery&#34;&gt;Awesome Cloud Native&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;基于 Kubernetes 的云原生生态发展至今已有 6 年时间，当前已步入了普及推广阶段。可以说谁云原生应用定义的制高点，就可以掌握云原生的未来。从前我们是新技术浪潮的追随者，现在我们抓住时代的基于，参与标准制定、引领云原生的浪潮！欢迎加入 &lt;a href=&#34;https://oam.dev/&#34;&gt;OAM 社区&lt;/a&gt;，一起参与进来，把国人参与指定的标准推向世界。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/technologies/containers/blogs/kubernetes-helm-3/&#34;&gt;Do you know what’s in Helm 3? - developer.ibm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/cms/managed-files/cm-oreilly-kubernetes-patterns-ebook-f19824-201910-en.pdf&#34;&gt;O’Reilly: Kubernetes patterns for designing cloud-native apps - redhat.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1gMhRz4vEwiHa3uD8DqFKHGTSxrVJNgkLG2WZWvi9lXo/edit#heading=h.h9so53gv5zen&#34;&gt;The Dictionary of Cloud-Native App Delivery - docs.google.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/Cdw7ISlEqKilGyN9V3Pj&#34;&gt;CNCF 宣布成立应用交付领域小组，正式开启云原生应用时代 - infoq.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/c7A8lOdAKkW25GoqmwOgWg&#34;&gt;OAM v1alpha2 新版发布：平衡标准与可扩展性，灵活接入 CRD operator - mp.weixin.qq.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54633203&#34;&gt;Kubernetes API 与 Operator，不为人知的开发者战争 - zhuanlan.zhihu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/cloud-native-era/&#34;&gt;云原生时代——投资人视角下的云原生趋势思考 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 中的 Sidecar 注入及透明流量劫持过程详解</title>
      <link>https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/</link>
      <pubDate>Mon, 27 Apr 2020 21:08:59 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/</guid>
      <description>
        
        
        &lt;p&gt;本文基于 Istio 1.11 版本，将为大家介绍以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是 sidecar 模式和它的优势在哪里。&lt;/li&gt;
&lt;li&gt;Istio 中是如何做 sidecar 注入的？&lt;/li&gt;
&lt;li&gt;Sidecar proxy 是如何做透明流量劫持的？&lt;/li&gt;
&lt;li&gt;流量是如何路由到 upstream 的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在此之前我曾写过基于 Istio 1.1 版本的&lt;a href=&#34;https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持&lt;/a&gt;，Istio 1.11 与 Istio 1.1 中的 sidecar 注入和流量劫持环节最大的变化是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iptables 改用命令行工具，不再使用 shell 脚本。&lt;/li&gt;
&lt;li&gt;sidecar inbound 和 outbound 分别指定了端口，而之前是使用同一个端口（15001）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sidecar-模式&#34;&gt;Sidecar 模式&lt;/h2&gt;
&lt;p&gt;将应用程序的功能划分为单独的进程运行在同一个最小调度单元中（例如 Kubernetes 中的 Pod）可以被视为 &lt;strong&gt;sidecar 模式&lt;/strong&gt;。如下图所示，sidecar 模式允许您在应用程序旁边添加更多功能，而无需额外第三方组件配置或修改应用程序代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sidecar-pattern.jpg&#34; alt=&#34;Sidecar 模式示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;就像连接了 Sidecar 的三轮摩托车一样，在软件架构中， Sidecar 连接到父应用并且为其添加扩展或者增强功能。Sidecar 应用与主应用程序松散耦合。它可以屏蔽不同编程语言的差异，统一实现微服务的可观察性、监控、日志记录、配置、断路器等功能。&lt;/p&gt;
&lt;h3 id=&#34;使用-sidecar-模式的优势&#34;&gt;使用 Sidecar 模式的优势&lt;/h3&gt;
&lt;p&gt;使用 sidecar 模式部署服务网格时，无需在节点上运行代理，但是集群中将运行多个相同的 sidecar 副本。在 sidecar 部署方式中，每个应用的容器旁都会部署一个伴生容器（如 Envoy 或 MOSN），这个容器称之为 sidecar 容器。Sidecar 接管进出应用容器的所有流量。在 Kubernetes 的 Pod 中，在原有的应用容器旁边注入一个 Sidecar 容器，两个容器共享存储、网络等资源，可以广义的将这个包含了 sidecar 容器的 Pod 理解为一台主机，两个容器共享主机资源。&lt;/p&gt;
&lt;p&gt;因其独特的部署结构，使得 sidecar 模式具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将与应用业务逻辑无关的功能抽象到共同基础设施，降低了微服务代码的复杂度。&lt;/li&gt;
&lt;li&gt;因为不再需要编写相同的第三方组件配置文件和代码，所以能够降低微服务架构中的代码重复度。&lt;/li&gt;
&lt;li&gt;Sidecar 可独立升级，降低应用程序代码和底层平台的耦合度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;istio-中的-sidecar-注入&#34;&gt;Istio 中的 sidecar 注入&lt;/h2&gt;
&lt;p&gt;Istio 中提供了以下两种 sidecar 注入方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;istioctl&lt;/code&gt; 手动注入。&lt;/li&gt;
&lt;li&gt;基于 Kubernetes 的 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/&#34;&gt;突变 webhook 入驻控制器（mutating webhook addmission controller&lt;/a&gt; 的自动 sidecar 注入方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不论是手动注入还是自动注入，sidecar 的注入过程都需要遵循如下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubernetes 需要了解待注入的 sidecar 所连接的 Istio 集群及其配置；&lt;/li&gt;
&lt;li&gt;Kubernetes 需要了解待注入的 sidecar 容器本身的配置，如镜像地址、启动参数等；&lt;/li&gt;
&lt;li&gt;Kubernetes 根据 sidecar 注入模板和以上配置填充 sidecar 的配置参数，将以上配置注入到应用容器的一侧；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用下面的命令可以手动注入 sidecar。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istioctl kube-inject -f &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;YAML_FILE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kuebectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令会使用 Istio 内置的 sidecar 配置来注入，下面使用 Istio详细配置请参考 &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/#manual-sidecar-injection&#34;&gt;Istio 官网&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注入完成后您将看到 Istio 为原有 pod template 注入了 &lt;code&gt;initContainer&lt;/code&gt; 及 sidecar proxy相关的配置。&lt;/p&gt;
&lt;h3 id=&#34;init-容器&#34;&gt;Init 容器&lt;/h3&gt;
&lt;p&gt;Init 容器是一种专用容器，它在应用程序容器启动之前运行，用来包含一些应用镜像中不存在的实用工具或安装脚本。&lt;/p&gt;
&lt;p&gt;一个 Pod 中可以指定多个 Init 容器，如果指定了多个，那么 Init 容器将会按顺序依次运行。只有当前面的 Init 容器必须运行成功后，才可以运行下一个 Init 容器。当所有的 Init 容器运行完成后，Kubernetes 才初始化 Pod 和运行应用容器。&lt;/p&gt;
&lt;p&gt;Init 容器使用 Linux Namespace，所以相对应用程序容器来说具有不同的文件系统视图。因此，它们能够具有访问 Secret 的权限，而应用程序容器则不能。&lt;/p&gt;
&lt;p&gt;在 Pod 启动过程中，Init 容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。如果由于运行时或失败退出，将导致容器启动失败，它会根据 Pod 的 &lt;code&gt;restartPolicy&lt;/code&gt; 指定的策略进行重试。然而，如果 Pod 的 &lt;code&gt;restartPolicy&lt;/code&gt; 设置为 Always，Init 容器失败时会使用 &lt;code&gt;RestartPolicy&lt;/code&gt; 策略。&lt;/p&gt;
&lt;p&gt;在所有的 Init 容器没有成功之前，Pod 将不会变成 &lt;code&gt;Ready&lt;/code&gt; 状态。Init 容器的端口将不会在 Service中进行聚集。 正在初始化中的 Pod 处于 &lt;code&gt;Pending&lt;/code&gt; 状态，但应该会将 &lt;code&gt;Initializing&lt;/code&gt; 状态设置为 true。Init 容器运行完成以后就会自动终止。&lt;/p&gt;
&lt;p&gt;关于 Init 容器的详细信息请参考 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/init-containers.html&#34;&gt;Init 容器 - Kubernetes 中文指南/云原生应用架构实践手册&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-注入示例分析&#34;&gt;Sidecar 注入示例分析&lt;/h2&gt;
&lt;p&gt;以 Istio 官方提供的 &lt;code&gt;bookinfo&lt;/code&gt; 中 &lt;code&gt;productpage&lt;/code&gt; 的 YAML 为例，关于 &lt;code&gt;bookinfo&lt;/code&gt; 应用的详细 YAML 配置请参考 &lt;a href=&#34;https://github.com/istio/istio/blob/master/samples/bookinfo/platform/kube/bookinfo.yaml&#34;&gt;bookinfo.yaml&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下文将从以下几个方面讲解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sidecar 容器的注入&lt;/li&gt;
&lt;li&gt;iptables 规则的创建&lt;/li&gt;
&lt;li&gt;路由的详细过程&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;apps/v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage-v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selector&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;matchLabels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;template&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;serviceAccountName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;bookinfo-productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;containers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;docker.io/istio/examples-bookinfo-productpage-v1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.15&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;containerPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;volumeMounts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tmp&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;mountPath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/tmp&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tmp&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;emptyDir&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再查看下 &lt;code&gt;productpage&lt;/code&gt; 容器的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; python:3.7.4-slim&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; requirements.txt ./&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; pip install --no-cache-dir -r requirements.txt&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; test-requirements.txt ./&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; pip install --no-cache-dir -r test-requirements.txt&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; productpage.py /opt/microservices/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; tests/unit/* /opt/microservices/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; templates /opt/microservices/templates&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; static /opt/microservices/static&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; requirements.txt /opt/microservices/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ARG&lt;/span&gt; flood_factor&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; FLOOD_FACTOR &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;flood_factor&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 9080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /opt/microservices&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; python -m unittest discover&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;productpage.py&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到 &lt;code&gt;Dockerfile&lt;/code&gt; 中没有配置 &lt;code&gt;ENTRYPOINT&lt;/code&gt;，所以 &lt;code&gt;CMD&lt;/code&gt; 的配置 &lt;code&gt;python productpage.py 9080&lt;/code&gt; 将作为默认的 &lt;code&gt;ENTRYPOINT&lt;/code&gt;，记住这一点，再看下注入 sidecar 之后的配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们只截取其中与 &lt;code&gt;productpage&lt;/code&gt; 相关的 &lt;code&gt;Deployment&lt;/code&gt; 配置中的部分 YAML 配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;containers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;docker.io/istio/examples-bookinfo-productpage-v1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.15&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 应用镜像&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;containerPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;args&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;proxy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sidecar&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--domain&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;$(POD_NAMESPACE).svc.cluster.local&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--configPath&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/etc/istio/proxy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--binaryPath&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/usr/local/bin/envoy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--serviceCluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage.$(POD_NAMESPACE)&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--drainDuration&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;45s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--parentShutdownDuration&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1m0s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--discoveryAddress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istiod.istio-system.svc&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15012&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--zipkinAddress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;zipkin.istio-system&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9411&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--proxyLogLevel=warning&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--proxyComponentLogLevel=misc&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;error&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--connectTimeout&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;10s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--proxyAdminPort&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;15000&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--concurrency&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--controlPlaneAuthPolicy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NONE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--dnsRefreshRate&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;300s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--statusPort&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;15020&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--trust-domain=cluster.local&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--controlPlaneBootstrap=&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;docker.io/istio/proxyv2&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# sidecar proxy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-proxy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;containerPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15090&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;http-envoy-prom&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;protocol&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;TCP&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;initContainers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-iptables&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-p&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;15001&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-z&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;15006&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-u&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1337&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-m&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;REDIRECT&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-i&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-x&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-b&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-d&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15090&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15020&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;docker.io/istio/proxyv2&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# init 容器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-init&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Istio 给应用 Pod 注入的配置主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init 容器 &lt;code&gt;istio-init&lt;/code&gt;：用于 pod 中设置 iptables 端口转发&lt;/li&gt;
&lt;li&gt;Sidecar 容器 &lt;code&gt;istio-proxy&lt;/code&gt;：运行 sidecar 代理，如 Envoy 或 MOSN。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来将分别解析下这两个容器。&lt;/p&gt;
&lt;h2 id=&#34;init-容器解析&#34;&gt;Init 容器解析&lt;/h2&gt;
&lt;p&gt;Istio 在 pod 中注入的 Init 容器名为 &lt;code&gt;istio-init&lt;/code&gt;，我们在上面 Istio 注入完成后的 YAML 文件中看到了该容器的启动命令是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-iptables -p &lt;span class=&#34;m&#34;&gt;15001&lt;/span&gt; -z &lt;span class=&#34;m&#34;&gt;15006&lt;/span&gt; -u &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt; -m REDIRECT -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -x &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; -b &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -d 15090,15020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们再检查下该容器的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/pilot/docker/Dockerfile.proxyv2&#34;&gt;Dockerfile&lt;/a&gt; 看看 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 是怎么确定启动时执行的命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 前面的内容省略&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The pilot-agent will bootstrap Envoy.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin/pilot-agent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到 &lt;code&gt;istio-init&lt;/code&gt; 容器的入口是 &lt;code&gt;/usr/local/bin/istio-iptables&lt;/code&gt; 命令行，该命令行工具的代码的位置在 Istio 源码仓库的 &lt;a href=&#34;https://github.com/istio/istio/tree/master/tools/istio-iptables&#34;&gt;tools/istio-iptables&lt;/a&gt; 目录。&lt;/p&gt;
&lt;p&gt;注意：在 Istio 1.1 版本时还是使用 &lt;code&gt;isito-iptables.sh&lt;/code&gt; 命令行来操作 IPtables。&lt;/p&gt;
&lt;h3 id=&#34;init-容器启动入口&#34;&gt;Init 容器启动入口&lt;/h3&gt;
&lt;p&gt;Init 容器的启动入口是 &lt;code&gt;istio-iptables&lt;/code&gt; 命令行，该命令行工具的用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istio-iptables &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;flags&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  -p: 指定重定向所有 TCP 流量的 sidecar 端口（默认为 &lt;span class=&#34;nv&#34;&gt;$ENVOY_PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 15001）
  -m: 指定入站连接重定向到 sidecar 的模式，“REDIRECT” 或 “TPROXY”（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_INBOUND_INTERCEPTION_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  -b: 逗号分隔的入站端口列表，其流量将重定向到 Envoy（可选）。使用通配符 “*” 表示重定向所有端口。为空时表示禁用所有入站重定向（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_INBOUND_PORTS&lt;/span&gt;）
  -d: 指定要从重定向到 sidecar 中排除的入站端口列表（可选），以逗号格式分隔。使用通配符“*” 表示重定向所有入站流量（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_LOCAL_EXCLUDE_PORTS&lt;/span&gt;）
  -o：逗号分隔的出站端口列表，不包括重定向到 Envoy 的端口。
  -i: 指定重定向到 sidecar 的 IP 地址范围（可选），以逗号分隔的 CIDR 格式列表。使用通配符 “*” 表示重定向所有出站流量。空列表将禁用所有出站重定向（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_SERVICE_CIDR&lt;/span&gt;）
  -x: 指定将从重定向中排除的 IP 地址范围，以逗号分隔的 CIDR 格式列表。使用通配符 “*” 表示重定向所有出站流量（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_SERVICE_EXCLUDE_CIDR&lt;/span&gt;）。
  -k：逗号分隔的虚拟接口列表，其入站流量（来自虚拟机的）将被视为出站流量。
  -g：指定不应用重定向的用户的 GID。&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;默认值与 -u param 相同&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  -u：指定不应用重定向的用户的 UID。通常情况下，这是代理容器的 UID（默认值是 1337，即 istio-proxy 的 UID）。
  -z: 所有进入 pod/VM 的 TCP 流量应被重定向到的端口（默认 &lt;span class=&#34;nv&#34;&gt;$INBOUND_CAPTURE_PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 15006）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上传入的参数都会重新组装成 &lt;a href=&#34;https://wangchujiang.com/linux-command/c/iptables.html&#34;&gt;&lt;code&gt;iptables&lt;/code&gt; &lt;/a&gt;规则，关于该命令的详细用法请访问 &lt;a href=&#34;https://github.com/istio/istio/blob/master/tools/istio-iptables/pkg/cmd/root.go&#34;&gt;tools/istio-iptables/pkg/cmd/root.go&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;该容器存在的意义就是让 sidecar 代理可以拦截所有的进出 pod 的流量，15090 端口（Mixer 使用）和 15092 端口（Ingress Gateway）除外的所有入站（inbound）流量重定向到 15006 端口（sidecar），再拦截应用容器的出站（outbound）流量经过 sidecar 处理（通过 15001 端口监听）后再出站。关于 Istio 中端口用途请参考 &lt;a href=&#34;https://istio.io/latest/zh/docs/ops/deployment/requirements/&#34;&gt;Istio 官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这条启动命令的作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将应用容器的所有流量都转发到 sidecar 的 15006 端口。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;istio-proxy&lt;/code&gt; 用户身份运行， UID 为 1337，即 sidecar 所处的用户空间，这也是 &lt;code&gt;istio-proxy&lt;/code&gt; 容器默认使用的用户，见 YAML 配置中的 &lt;code&gt;runAsUser&lt;/code&gt; 字段。&lt;/li&gt;
&lt;li&gt;使用默认的 &lt;code&gt;REDIRECT&lt;/code&gt; 模式来重定向流量。&lt;/li&gt;
&lt;li&gt;将所有出站流量都重定向到 sidecar 代理（通过 15001 端口）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 Init 容器初始化完毕后就会自动终止，因为我们无法登陆到容器中查看 iptables 信息，但是 Init 容器初始化结果会保留到应用容器和 sidecar 容器中。&lt;/p&gt;
&lt;h2 id=&#34;iptables-注入解析&#34;&gt;iptables 注入解析&lt;/h2&gt;
&lt;p&gt;为了查看 iptables 配置，我们需要登陆到 sidecar 容器中使用 root 用户来查看，因为 &lt;code&gt;kubectl&lt;/code&gt; 无法使用特权模式来远程操作 docker 容器，所以我们需要登陆到 &lt;code&gt;productpage&lt;/code&gt; pod 所在的主机上使用 &lt;code&gt;docker&lt;/code&gt; 命令登陆容器中查看。&lt;/p&gt;
&lt;p&gt;如果您使用 minikube 部署的 Kubernetes，可以直接登录到 minikube 的虚拟机中并切换为 root 用户。查看 iptables 配置，列出 NAT（网络地址转换）表的所有规则，因为在 Init 容器启动的时候选择给 &lt;code&gt;istio-iptables&lt;/code&gt; 传递的参数中指定将入站流量重定向到 sidecar 的模式为 &lt;code&gt;REDIRECT&lt;/code&gt;，因此在 iptables 中将只有 NAT 表的规格配置，如果选择 &lt;code&gt;TPROXY&lt;/code&gt; 还会有 &lt;code&gt;mangle&lt;/code&gt; 表配置。&lt;code&gt;iptables&lt;/code&gt; 命令的详细用法请参考 &lt;a href=&#34;https://wangchujiang.com/linux-command/c/iptables.html&#34;&gt;iptables&lt;/a&gt; 命令。&lt;/p&gt;
&lt;p&gt;我们仅查看与 &lt;code&gt;productpage&lt;/code&gt; 有关的 iptables 规则如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 进入 minikube 并切换为 root 用户，minikube 默认用户为 docker&lt;/span&gt;
$ minikube ssh
$ sudo -i

&lt;span class=&#34;c1&#34;&gt;# 查看 productpage pod 的 istio-proxy 容器中的进程&lt;/span&gt;
$ docker top &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;docker ps&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-proxy_productpage&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;cut -d &lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; -f1&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
&lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;10576&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;10517&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;                   08:09               ?                   00:00:07            /usr/local/bin/pilot-agent proxy sidecar --domain default.svc.cluster.local --configPath /etc/istio/proxy --binaryPath /usr/local/bin/envoy --serviceCluster productpage.default --drainDuration 45s --parentShutdownDuration 1m0s --discoveryAddress istiod.istio-system.svc:15012 --zipkinAddress zipkin.istio-system:9411 --proxyLogLevel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;warning --proxyComponentLogLevel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;misc:error --connectTimeout 10s --proxyAdminPort &lt;span class=&#34;m&#34;&gt;15000&lt;/span&gt; --concurrency &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --controlPlaneAuthPolicy NONE --dnsRefreshRate 300s --statusPort &lt;span class=&#34;m&#34;&gt;15020&lt;/span&gt; --trust-domain&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster.local --controlPlaneBootstrap&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;10660&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;10576&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;                   08:09               ?                   00:00:33            /usr/local/bin/envoy -c /etc/istio/proxy/envoy-rev0.json --restart-epoch &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; --drain-time-s &lt;span class=&#34;m&#34;&gt;45&lt;/span&gt; --parent-shutdown-time-s &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; --service-cluster productpage.default --service-node sidecar~172.17.0.16~productpage-v1-7f44c4d57c-ksf9b.default~default.svc.cluster.local --max-obj-name-len &lt;span class=&#34;m&#34;&gt;189&lt;/span&gt; --local-address-ip-version v4 --log-format &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Epoch 0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;%Y-%m-%d %T.%e&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;%t&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;%l&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;%n&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; %v -l warning --component-log-level misc:error --concurrency &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 进入 nsenter 进入 sidecar 容器的命名空间（以上任何一个都可以）&lt;/span&gt;
$ nsenter -n --target &lt;span class=&#34;m&#34;&gt;10660&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在该进程的命名空间下查看其 iptables 规则链。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看 NAT 表中规则配置的详细信息。&lt;/span&gt;
$ iptables -t nat -L -v
&lt;span class=&#34;c1&#34;&gt;# PREROUTING 链：用于目标地址转换（DNAT），将所有入站 TCP 流量跳转到 ISTIO_INBOUND 链上。&lt;/span&gt;
Chain PREROUTING &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;2701&lt;/span&gt; packets, 162K bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
 &lt;span class=&#34;m&#34;&gt;2701&lt;/span&gt;  162K ISTIO_INBOUND  tcp  --  any    any     anywhere             anywhere

&lt;span class=&#34;c1&#34;&gt;# INPUT 链：处理输入数据包，非 TCP 流量将继续 OUTPUT 链。&lt;/span&gt;
Chain INPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;2701&lt;/span&gt; packets, 162K bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

&lt;span class=&#34;c1&#34;&gt;# OUTPUT 链：将所有出站数据包跳转到 ISTIO_OUTPUT 链上。&lt;/span&gt;
Chain OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;79&lt;/span&gt; packets, &lt;span class=&#34;m&#34;&gt;6761&lt;/span&gt; bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
   &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;900&lt;/span&gt; ISTIO_OUTPUT  tcp  --  any    any     anywhere             anywhere

&lt;span class=&#34;c1&#34;&gt;# POSTROUTING 链：所有数据包流出网卡时都要先进入POSTROUTING 链，内核根据数据包目的地判断是否需要转发出去，我们看到此处未做任何处理。&lt;/span&gt;
Chain POSTROUTING &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;79&lt;/span&gt; packets, &lt;span class=&#34;m&#34;&gt;6761&lt;/span&gt; bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

&lt;span class=&#34;c1&#34;&gt;# ISTIO_INBOUND 链：将所有入站流量重定向到 ISTIO_IN_REDIRECT 链上，目的地为 15090（mixer 使用）和 15020（Ingress gateway 使用，用于 Pilot 健康检查）端口的流量除外，发送到以上两个端口的流量将返回 iptables 规则链的调用点，即 PREROUTING 链的后继 POSTROUTING。&lt;/span&gt;
Chain ISTIO_INBOUND &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:ssh
    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt; RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15090
 &lt;span class=&#34;m&#34;&gt;2699&lt;/span&gt;  162K RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15020
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; ISTIO_IN_REDIRECT  tcp  --  any    any     anywhere             anywhere

&lt;span class=&#34;c1&#34;&gt;# ISTIO_IN_REDIRECT 链：将所有的入站流量跳转到本地的 15006 端口，至此成功的拦截了流量到 sidecar 中。&lt;/span&gt;
Chain ISTIO_IN_REDIRECT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports &lt;span class=&#34;m&#34;&gt;15006&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# ISTIO_OUTPUT 链：选择需要重定向到 Envoy（即本地） 的出站流量，所有非 localhost 的流量全部转发到 ISTIO_REDIRECT。为了避免流量在该 Pod 中无限循环，所有到 istio-proxy 用户空间的流量都返回到它的调用点中的下一条规则，本例中即 OUTPUT 链，因为跳出 ISTIO_OUTPUT 规则之后就进入下一条链 POSTROUTING。如果目的地非 localhost 就跳转到 ISTIO_REDIRECT；如果流量是来自 istio-proxy 用户空间的，那么就跳出该链，返回它的调用链继续执行下一条规则（OUTPUT 的下一条规则，无需对流量进行处理）；所有的非 istio-proxy 用户空间的目的地是 localhost 的流量就跳转到 ISTIO_REDIRECT。&lt;/span&gt;
Chain ISTIO_OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     all  --  any    lo      127.0.0.6            anywhere
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner UID match &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     all  --  any    lo      anywhere             anywhere             ! owner UID match &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;900&lt;/span&gt; RETURN     all  --  any    any     anywhere             anywhere             owner UID match &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner GID match &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     all  --  any    lo      anywhere             anywhere             ! owner GID match &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     all  --  any    any     anywhere             anywhere             owner GID match &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     all  --  any    any     anywhere             localhost
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; ISTIO_REDIRECT  all  --  any    any     anywhere             anywhere

&lt;span class=&#34;c1&#34;&gt;# ISTIO_REDIRECT 链：将所有流量重定向到 Sidecar（即本地） 的 15001 端口。&lt;/span&gt;
Chain ISTIO_REDIRECT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports &lt;span class=&#34;m&#34;&gt;15001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图展示的是 &lt;code&gt;productpage&lt;/code&gt; 服务请求访问 &lt;code&gt;http://reviews.default.svc.cluster.local:9080/&lt;/code&gt;，当流量进入 &lt;code&gt;reviews&lt;/code&gt; 服务内部时，&lt;code&gt;reviews&lt;/code&gt; 服务内部的 sidecar proxy 是如何做流量拦截和路由转发的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-sidecar-traffic-interception-zh-20210818.png&#34; alt=&#34;Sidecar 流量劫持示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一步开始时，&lt;code&gt;productpage&lt;/code&gt; Pod 中的 sidecar 已经通过 EDS 选择出了要请求的 &lt;code&gt;reviews&lt;/code&gt; 服务的一个 Pod，知晓了其 IP 地址，发送 TCP 连接请求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reviews&lt;/code&gt; 服务有三个版本，每个版本有一个实例，三个版本中的 sidecar 工作步骤类似，下文只以其中一个 Pod 中的 sidecar 流量转发步骤来说明。&lt;/p&gt;
&lt;h3 id=&#34;理解-iptables&#34;&gt;理解 iptables&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 是 Linux 内核中的防火墙软件 netfilter 的管理工具，位于用户空间，同时也是 netfilter 的一部分。Netfilter 位于内核空间，不仅有网络地址转换的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。&lt;/p&gt;
&lt;p&gt;在了解 Init 容器初始化的 iptables 之前，我们先来了解下 iptables 和规则配置。&lt;/p&gt;
&lt;p&gt;下图展示了 iptables 调用链。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;iptables.jpg&#34; alt=&#34;iptables 调用链&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;iptables-中的表&#34;&gt;iptables 中的表&lt;/h3&gt;
&lt;p&gt;Init 容器中使用的的 iptables 版本是 &lt;code&gt;v1.6.0&lt;/code&gt;，共包含 5 张表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt; 用于配置数据包，&lt;code&gt;raw&lt;/code&gt; 中的数据包不会被系统跟踪。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt; 是用于存放所有与防火墙相关操作的默认表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt; 用于 &lt;a href=&#34;https://en.wikipedia.org/wiki/Network_address_translation&#34;&gt;网络地址转换&lt;/a&gt;（例如：端口转发）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangle&lt;/code&gt; 用于对特定数据包的修改（参考&lt;a href=&#34;https://en.wikipedia.org/wiki/Mangled_packet&#34;&gt;损坏数据包&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security&lt;/code&gt; 用于&lt;a href=&#34;https://wiki.archlinux.org/index.php/Security#Mandatory_access_control&#34;&gt;强制访问控制&lt;/a&gt; 网络规则。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：在本示例中只用到了 &lt;code&gt;nat&lt;/code&gt; 表。&lt;/p&gt;
&lt;p&gt;不同的表中的具有的链类型如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;规则名称&lt;/th&gt;
&lt;th&gt;raw&lt;/th&gt;
&lt;th&gt;filter&lt;/th&gt;
&lt;th&gt;nat&lt;/th&gt;
&lt;th&gt;mangle&lt;/th&gt;
&lt;th&gt;security&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PREROUTING&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INPUT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OUTPUT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSTROUTING&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FORWARD&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;理解-iptables-规则&#34;&gt;理解 iptables 规则&lt;/h3&gt;
&lt;p&gt;查看 &lt;code&gt;istio-proxy&lt;/code&gt; 容器中的默认的 iptables 规则，默认查看的是 filter 表中的规则。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ iptables -L -v
Chain INPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT 350K packets, 63M bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

Chain FORWARD &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; packets, &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

Chain OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT 18M packets, 1916M bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到三个默认的链，分别是 INPUT、FORWARD 和 OUTPUT，每个链中的第一行输出表示链名称（在本例中为INPUT/FORWARD/OUTPUT），后跟默认策略（ACCEPT）。&lt;/p&gt;
&lt;p&gt;下图是 iptables 的建议结构图，流量在经过 INPUT 链之后就进入了上层协议栈，比如&lt;/p&gt;
&lt;p&gt;每条链中都可以添加多条规则，规则是按照顺序从前到后执行的。我们来看下规则的表头定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pkts&lt;/strong&gt;：处理过的匹配的报文数量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bytes&lt;/strong&gt;：累计处理的报文大小（字节数）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;target&lt;/strong&gt;：如果报文与规则匹配，指定目标就会被执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prot&lt;/strong&gt;：协议，例如 &lt;code&gt;tdp&lt;/code&gt;、&lt;code&gt;udp&lt;/code&gt;、&lt;code&gt;icmp&lt;/code&gt; 和 &lt;code&gt;all&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;opt&lt;/strong&gt;：很少使用，这一列用于显示 IP 选项。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;in&lt;/strong&gt;：入站网卡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;out&lt;/strong&gt;：出站网卡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt;：流量的源 IP 地址或子网，后者是 &lt;code&gt;anywhere&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destination&lt;/strong&gt;：流量的目的地 IP 地址或子网，或者是 &lt;code&gt;anywhere&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一列没有表头，显示在最后，表示规则的选项，作为规则的扩展匹配条件，用来补充前面的几列中的配置。&lt;code&gt;prot&lt;/code&gt;、&lt;code&gt;opt&lt;/code&gt;、&lt;code&gt;in&lt;/code&gt;、&lt;code&gt;out&lt;/code&gt;、&lt;code&gt;source&lt;/code&gt; 和 &lt;code&gt;destination&lt;/code&gt; 和显示在 &lt;code&gt;destination&lt;/code&gt; 后面的没有表头的一列扩展条件共同组成匹配规则。当流量匹配这些规则后就会执行 &lt;code&gt;target&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;target 支持的类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;target&lt;/code&gt; 类型包括 ACCEPT&lt;code&gt;、REJECT&lt;/code&gt;、&lt;code&gt;DROP&lt;/code&gt;、&lt;code&gt;LOG&lt;/code&gt; 、&lt;code&gt;SNAT&lt;/code&gt;、&lt;code&gt;MASQUERADE&lt;/code&gt;、&lt;code&gt;DNAT&lt;/code&gt;、&lt;code&gt;REDIRECT&lt;/code&gt;、&lt;code&gt;RETURN&lt;/code&gt; 或者跳转到其他规则等。只要执行到某一条链中只有按照顺序有一条规则匹配后就可以确定报文的去向了，除了 &lt;code&gt;RETURN&lt;/code&gt; 类型，类似编程语言中的 &lt;code&gt;return&lt;/code&gt; 语句，返回到它的调用点，继续执行下一条规则。&lt;code&gt;target&lt;/code&gt; 支持的配置详解请参考 &lt;a href=&#34;http://www.zsythink.net/archives/1199&#34;&gt;iptables 详解（1）：iptables 概念&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;从输出结果中可以看到 Init 容器没有在 iptables 的默认链路中创建任何规则，而是创建了新的链路。&lt;/p&gt;
&lt;h2 id=&#34;流量路由过程详解&#34;&gt;流量路由过程详解&lt;/h2&gt;
&lt;p&gt;流量路由分为 Inbound 和 Outbound 两个过程，下面将根据上文中的示例及 sidecar 的配置为读者详细分析此过程。&lt;/p&gt;
&lt;h3 id=&#34;理解-inbound-handler&#34;&gt;理解 Inbound Handler&lt;/h3&gt;
&lt;p&gt;Inbound handler 的作用是将 iptables 拦截到的 downstream 的流量转交给 localhost，与 Pod 内的应用程序容器建立连接。假设其中一个 Pod 的名字是 &lt;code&gt;reviews-v1-54b8794ddf-jxksn&lt;/code&gt;，运行 &lt;code&gt;istioctl proxy-config listener reviews-v1-54b8794ddf-jxksn&lt;/code&gt; 查看该 Pod 中的具有哪些 Listener。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;na&#34;&gt;ADDRESS            PORT      TYPE&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;172.17.0.15        9080      HTTP &amp;lt;--- 接收所有 Inbound HTTP 流量，该地址即为业务进程的真实监听地址&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;172.17.0.15        15020     TCP &amp;lt;--- Ingress Gateway，Pilot 健康检查&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.109.20.166      15012     TCP &amp;lt;--- Istiod http dns&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.103.34.135      14250     TCP &amp;lt;--+&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.103.34.135      14267     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.103.34.135      14268     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     15020     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     15029     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     15030     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     15031     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     15032     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     15443     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     31400     TCP    | 接收与 0.0.0.0:15001 监听器配对的 Outbound 流量&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.122.175     443       TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.62.18       15443     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.104.62.18       443       TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.106.201.253     16686     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.109.20.166      443       TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.96.0.1          443       TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.96.0.10         53        TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.96.0.10         9153      TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.98.184.149      15011     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.98.184.149      15012     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.98.184.149      443       TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            14250     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15010     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15014     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15090     HTTP   |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            20001     TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            3000      TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            80        TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            8080      TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9080      TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9090      TCP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9411      TCP &amp;lt;--+&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15001     TCP &amp;lt;--- 接收所有经 iptables 拦截的 Outbound 流量并转交给虚拟监听器处理&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15006     TCP &amp;lt;--- 接收所有经 iptables 拦截的 Inbound 流量并转交给虚拟监听器处理&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当来自 &lt;code&gt;productpage&lt;/code&gt; 的流量抵达 &lt;code&gt;reviews&lt;/code&gt; Pod 的时候，downstream 已经明确知道 Pod 的 IP 地址为 &lt;code&gt;172.17.0.16&lt;/code&gt; 所以才会访问该 Pod，所以该请求是 &lt;code&gt;172.17.0.15:9080&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;virtualInbound&lt;/code&gt; Listener&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从该 Pod 的 Listener 列表中可以看到，&lt;code&gt;0.0.0.0:15006/TCP&lt;/code&gt; 的 Listener（其实际名字是 &lt;code&gt;virtualInbound&lt;/code&gt;）监听所有的 Inbound 流量，下面是该 Listener 的详细配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;virtualInbound&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15006&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;省&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;略&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;部&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;分&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;容&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChainMatch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;destinationPort&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefixRanges&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;addressPrefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.17.0.15&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefixLen&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;applicationProtocols&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-peer-exchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-http/1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-http/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-h2&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.filters.network.metadata_exchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-peer-exchange&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.http_connection_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;typedConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;statPrefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound_172.17.0.15_9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;routeConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080|http|reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;virtualHosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|http|9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080|http|reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxGrpcTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;decorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;reviews.default.svc.cluster.local:9080/*&amp;#34;&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;validateClusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;省&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;略&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;部&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;分&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;内&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;容&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inbound handler 的流量被 &lt;code&gt;virtualInbound&lt;/code&gt; Listener 转移到 &lt;code&gt;172.17.0.15_9080&lt;/code&gt; Listener，我们在查看下该 Listener 配置。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;istioctl pc listener reviews-v1-54b8794ddf-jxksn --address 172.17.0.15 --port 9080 -o json&lt;/code&gt; 查看。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.17.0.15_9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.17.0.15&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9080&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChainMatch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;applicationProtocols&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-peer-exchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-http/1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-http/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-h2&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.http_connection_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt; 
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;routeConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080|http|reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;virtualHosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|http|9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
                                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080|http|reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxGrpcTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;
                                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;decorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;reviews.default.svc.cluster.local:9080/*&amp;#34;&lt;/span&gt;
                                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChainMatch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;transportProtocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tls&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsContext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看其中的 &lt;code&gt;filterChains.filters&lt;/code&gt; 中的 &lt;code&gt;envoy.http_connection_manager&lt;/code&gt; 配置部分，该配置表示流量将转交给Cluster&lt;code&gt;inbound|9080|http|reviews.default.svc.cluster.local&lt;/code&gt; 处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.servicemesher.com/istio-handbook/GLOSSARY.html#cluster&#34;&gt;Cluster&lt;/a&gt; &lt;code&gt;inbound|9080|http|reviews.default.svc.cluster.local&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;istioctl proxy-config cluster reviews-v1-54b8794ddf-jxksn --fqdn reviews.default.svc.cluster.local --direction inbound -o json&lt;/code&gt; 查看该Cluster的配置如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080|http|reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;STATIC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connectTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;loadAssignment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;clusterName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080|http|reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;endpoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;lbEndpoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;endpoint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9080&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;circuitBreakers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;thresholds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxConnections&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4294967295&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxPendingRequests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4294967295&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxRequests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4294967295&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxRetries&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4294967295&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到该Cluster的 Endpoint 直接对应的就是 localhost，再经过 iptables 转发流量就被应用程序容器消费了。&lt;/p&gt;
&lt;h3 id=&#34;理解-outbound-handler&#34;&gt;理解 Outbound Handler&lt;/h3&gt;
&lt;p&gt;因为 &lt;code&gt;reviews&lt;/code&gt; 会向 &lt;code&gt;ratings&lt;/code&gt; 服务发送 HTTP 请求，请求的地址是：&lt;code&gt;http://ratings.default.svc.cluster.local:9080/&lt;/code&gt;，Outbound handler 的作用是将 iptables 拦截到的本地应用程序发出的流量，经由 sidecar 判断如何路由到 upstream。&lt;/p&gt;
&lt;p&gt;应用程序容器发出的请求为 Outbound 流量，被 iptables 劫持后转移给 Outbound handler 处理，然后经过 &lt;code&gt;virtualOutbound&lt;/code&gt; Listener、&lt;code&gt;0.0.0.0_9080&lt;/code&gt; Listener，然后通过 Route 9080 找到 upstream 的 cluster，进而通过 EDS 找到 Endpoint 执行路由动作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Route &lt;code&gt;ratings.default.svc.cluster.local:9080&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reviews&lt;/code&gt; 会请求 &lt;code&gt;ratings&lt;/code&gt; 服务，运行 &lt;code&gt;istioctl proxy-config routes reviews-v1-54b8794ddf-jxksn --name 9080 -o json&lt;/code&gt; 查看 route 配置，因为 sidecar 会根据 HTTP header 中的 domains 来匹配 VirtualHost，所以下面只列举了 &lt;code&gt;ratings.default.svc.cluster.local:9080&lt;/code&gt; 这一个 VirtualHost。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.98.49.62&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.98.49.62:9080&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;retryPolicy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;retryOn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;connect-failure,refused-stream,unavailable,cancelled,resource-exhausted,retriable-status-codes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;numRetries&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;retryHostPredicate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                              &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.retry_host_predicates.previous_hosts&amp;#34;&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostSelectionRetryMaxAttempts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;retriableStatusCodes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                          &lt;span class=&#34;mi&#34;&gt;503&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxGrpcTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;decorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local:9080/*&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从该 Virtual Host 配置中可以看到将流量路由到Cluster&lt;code&gt;outbound|9080||ratings.default.svc.cluster.local&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Endpoint &lt;code&gt;outbound|9080||ratings.default.svc.cluster.local&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;istioctl proxy-config endpoint reviews-v1-54b8794ddf-jxksn --port 9080 -o json&lt;/code&gt; 查看 Endpoint 配置，我们只选取其中的 &lt;code&gt;outbound|9080||ratings.default.svc.cluster.local&lt;/code&gt;Cluster的结果如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;clusterName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;endpoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;locality&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;lbEndpoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;endpoint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.33.100.2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9080&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterMetadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;istio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes://ratings-v1-8558d4458d-ns6lk.default&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Endpoint 可以是一个或多个，sidecar 将根据一定规则选择适当的 Endpoint 来路由。至此 Review 服务找到了它 upstream 服务 Rating 的 Endpoint。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文使用了 Istio 官方提供的 bookinfo 示例，按图索骥得带领读者了解了 sidecar 注入、iptables 透明流量劫持及 sidecar 中流量路由背后的实现细节。Sidecar 模式和流量透明劫持是 Istio 服务网格的特色和基础功能，理解该功能的背后过程及实现细节，将有助于大家理解 Service Mesh 的原理和 &lt;a href=&#34;https://www.servicemesher.com/istio-handbook/&#34;&gt;Istio Handbook&lt;/a&gt; 后面章节中的内容，因此希望读者可以在自己的环境中从头来试验一遍以加深理解。&lt;/p&gt;
&lt;p&gt;使用 iptables 做流量劫持只是 service mesh 的数据平面中做流量劫持的方式之一，还有更多的流量劫持方案，下面引用自 &lt;a href=&#34;https://mosn.io/docs/concept/traffic-hijack/&#34;&gt;云原生网络代理 MOSN 官网中给出的流量劫持&lt;/a&gt;部分的描述。&lt;/p&gt;
&lt;h3 id=&#34;使用-iptables-做流量劫持时存在的问题&#34;&gt;使用 iptables 做流量劫持时存在的问题&lt;/h3&gt;
&lt;p&gt;目前 Istio 使用 iptables 实现透明劫持，主要存在以下三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要借助于 conntrack 模块实现连接跟踪，在连接数较多的情况下，会造成较大的消耗，同时可能会造成 track 表满的情况，为了避免这个问题，业内有关闭 conntrack 的做法。&lt;/li&gt;
&lt;li&gt;iptables 属于常用模块，全局生效，不能显式的禁止相关联的修改，可管控性比较差。&lt;/li&gt;
&lt;li&gt;iptables 重定向流量本质上是通过 loopback 交换数据，outbond 流量将两次穿越协议栈，在大并发场景下会损失转发性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述几个问题并非在所有场景中都存在，比方说某些场景下，连接数并不多，且 NAT 表未被使用到的情况下，iptables 是一个满足要求的简单方案。为了适配更加广泛的场景，透明劫持需要解决上述三个问题。&lt;/p&gt;
&lt;h3 id=&#34;透明劫持方案优化&#34;&gt;透明劫持方案优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用 tproxy 处理 inbound 流量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tproxy 可以用于 inbound 流量的重定向，且无需改变报文中的目的 IP/端口，不需要执行连接跟踪，不会出现 conntrack 模块创建大量连接的问题。受限于内核版本，tproxy 应用于 outbound 存在一定缺陷。目前 Istio 支持通过 tproxy 处理 inbound 流量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 hook connect 处理 outbound 流量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了适配更多应用场景，outbound 方向通过 hook connect 来实现，实现原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;hook-connect.jpg&#34; alt=&#34;hook-connect 原理示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;无论采用哪种透明劫持方案，均需要解决获取真实目的 IP/端口的问题，使用 iptables 方案通过 getsockopt 方式获取，tproxy 可以直接读取目的地址，通过修改调用接口，hook connect 方案读取方式类似于 tproxy。&lt;/p&gt;
&lt;p&gt;实现透明劫持后，在内核版本满足要求（4.16以上）的前提下，通过 sockmap 可以缩短报文穿越路径，进而改善 outbound 方向的转发性能。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/diagnostic-tools/proxy-cmd/&#34;&gt;Debugging Envoy and Istiod - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/blog/2019/data-plane-setup/&#34;&gt;揭开 Istio Sidecar 注入模型的神秘面纱 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mosn.io/docs/concept/traffic-hijack/&#34;&gt;MOSN 作为 Sidecar 使用时的流量劫持方案 - mosn.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>OAM（开放应用模型）——定义云原生应用标准的野望</title>
      <link>https://jimmysong.io/blog/oam-intro/</link>
      <pubDate>Wed, 22 Apr 2020 14:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/oam-intro/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://oam.dev/&#34;&gt;OAM（Open Application Model）&lt;/a&gt;是阿里巴巴和微软共同开源的云原生应用规范模型，同时开源了基于 OAM 的实现 &lt;a href=&#34;https://github.com/oam-dev/rudr&#34;&gt;Rudr&lt;/a&gt;，自 2019 年 10 月宣布开源以来截止本文发稿已经有快半年时间了。&lt;/p&gt;
&lt;p&gt;当前可能大部分人才刚刚开始了解 OAM，所以这篇文章将从最基础出发，为大家介绍 OAM 的诞生背景和要解决的问题，以及它在云原生生态中的作用。&lt;/p&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;如果你没有兴趣或者时间阅读下面的全文，那么建议阅读下面这些核心观点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OAM 的本质是根据软件设计的“兴趣点分离”原则对负责的 DevOps 流程的高度抽象和封装，这背后还是“&lt;strong&gt;康威定律&lt;/strong&gt;”在起作用。&lt;/li&gt;
&lt;li&gt;OAM 仅定义云原生应用的规范，目前推出的 &lt;a href=&#34;https://github.com/oam-dev/rudr&#34;&gt;Rudr&lt;/a&gt; 可以看做是 OAM 规范的 Kubernetes 解释器（实验实现），将云原生应用定义翻译成 Kubernetes 的资源对象。&lt;/li&gt;
&lt;li&gt;OAM 与 &lt;a href=&#34;https://crossplane.io/&#34;&gt;Crossplane&lt;/a&gt; 将展开合作，就 Kubernetes 式以 API 为中心的应用定义发扬光大，并深度参与 &lt;a href=&#34;https://github.com/cncf/sig-app-delivery&#34;&gt;CNCF SIG App Delivery&lt;/a&gt;，以共同定义云原生应用标准。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;康威定律（Conway’s Law）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B&#34;&gt;康威定律&lt;/a&gt;是马尔文·康威（Melvin Conway）1967年提出的： &amp;ldquo;设计系统的架构受制于产生这些设计的组织的沟通结构。&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;oam-简介&#34;&gt;OAM 简介&lt;/h2&gt;
&lt;p&gt;OAM 全称是 Open Application Model，从名称上来看它所定义的就是一种模型，同时也实现了基于 OAM 的我认为这种模型旨在定义了云原生应用的标准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放（Open）：支持异构的平台、容器运行时、调度系统、云供应商、硬件配置等，总之与底层无关&lt;/li&gt;
&lt;li&gt;应用（Application）：云原生应用&lt;/li&gt;
&lt;li&gt;模型（Model）：定义标准，以使其与底层平台无关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺便说下 CNCF 中的也有几个定义标准的「开源项目」，其中有的项目都已经毕业。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/servicemeshinterface/smi-spec&#34;&gt;SMI（Service Mesh Interface）&lt;/a&gt;：服务网格接口&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudevents/spec&#34;&gt;Cloud Events&lt;/a&gt;：Serverless 中的事件标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/theupdateframework/specification&#34;&gt;TUF&lt;/a&gt;：更新框架标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiffe/spiffe&#34;&gt;SPIFFE&lt;/a&gt;：身份安全标准&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这其中唯独没有应用标准的定义，&lt;a href=&#34;https://github.com/cncf/sig-app-delivery&#34;&gt;CNCF SIG App delivery&lt;/a&gt; 即是要做这个的。当然既然要制定标准，自然要对不同平台和场景的逻辑做出更高级别的抽象（这也意味着你在掌握了底层逻辑的情况下还要学习更多的概念），这样才能屏蔽底层差异。本文将默认底层平台为 Kubernetes。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是从管理大量 CRD 中汲取的经验。&lt;/li&gt;
&lt;li&gt;业务和研发的沟通成本，比如 YAML 配置中很多字段是开发人员不关心的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oam-基本对象&#34;&gt;OAM 基本对象&lt;/h3&gt;
&lt;p&gt;OAM 模型中包含以下基本对象，以本文发稿时的最新 API 版本 &lt;code&gt;core.oam.dev/v1alpha2&lt;/code&gt; 为准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/4.component.md&#34;&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/a&gt;：OAM 中最基础的对象，该配置与基础设施无关，定义负载实例的运维特性。例如一个微服务 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/3.workload.md&#34;&gt;workload&lt;/a&gt; 的定义。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/6.traits.md&#34;&gt;&lt;strong&gt;TraitDefinition&lt;/strong&gt;&lt;/a&gt;：一个组件所需的&lt;strong&gt;运维策略与配置&lt;/strong&gt;，例如环境变量、Ingress、AutoScaler、Volume 等。（注意：该对象在 &lt;code&gt;apiVersion: core.oam.dev/v1alpha1&lt;/code&gt; 中的名称为 &lt;code&gt;Trait&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/5.application_scopes.md&#34;&gt;&lt;strong&gt;ScopeDefinition&lt;/strong&gt;&lt;/a&gt;：多个 Component 的共同边界。可以根据组件的特性或者作用域来划分 Scope，一个 Component 可能同时属于多个 Scope。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/7.application_configuration.md&#34;&gt;&lt;strong&gt;ApplicationConfiguration&lt;/strong&gt;&lt;/a&gt;：将 Component（必须）、Trait（必须）、Scope（非必须）等组合到一起形成一个完整的应用配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oam-api-的演变&#34;&gt;OAM API 的演变&lt;/h3&gt;
&lt;p&gt;因为 OAM 还处在发展早起，API 变化较快，以上四个对象在不同的 API 版本中的 &lt;code&gt;kind&lt;/code&gt; 名称不同，请大家使用时注意区别。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;core.oam.dev/v1alpha1&lt;/th&gt;
&lt;th&gt;core.oam.dev/v1alpha2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Component&lt;/td&gt;
&lt;td&gt;ComponentSchematic&lt;/td&gt;
&lt;td&gt;Component&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trait&lt;/td&gt;
&lt;td&gt;Trait&lt;/td&gt;
&lt;td&gt;TraitDefinition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;ScopeDefinition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Application configuration&lt;/td&gt;
&lt;td&gt;ApplicationConfiguration&lt;/td&gt;
&lt;td&gt;ApplicationConfiguration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总的来说，OAM 模型对象的定义格式与 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/#required-fields&#34;&gt;Kubernetes 对象的类型字段&lt;/a&gt;相似。关于 OAM 的基本概念模型的更多信息请访问 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/2.overview_and_terminology.md&#34;&gt;Overview and Terminology&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;oam-工作原理&#34;&gt;OAM 工作原理&lt;/h3&gt;
&lt;p&gt;下图来自阿里云原生应用平台团队孙健波在 &lt;strong&gt;《OAM:云原生时代的应用模型与 下一代 DevOps 技术》&lt;/strong&gt; 中的分享，OAM 的工作原理如下图所示，OAM Spec 定义了云原生应用的规范（使用一些列 CRD 定义）， Rudr 可以看做是 OAM 规范的解析器，将应用定义翻译为 Kubernetes 中的资源对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;oam-principle.png&#34; alt=&#34;OAM 的原理&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以将上图分为三个层次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;汇编层&lt;/strong&gt;：即人工或者使用工具来根据 OAM 规范定义汇编出一个云原生应用的定义，其中包含了该应用的工作负载和运维能力配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转义层&lt;/strong&gt;：汇编好的文件将打包为 YAML 文件，由 Rudr 或其他 OAM 的实现将其转义为 Kubernetes 或其他云服务（例如 Istio）上可运行的资源对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行层&lt;/strong&gt;：执行经过转义好的云平台上的资源对象并执行资源配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rudr&#34;&gt;Rudr&lt;/h2&gt;
&lt;p&gt;Rudr 是对  &lt;a href=&#34;https://github.com/oam-dev/spec/releases/tag/v1.0.0-alpha.1&#34;&gt;OAM v1alpha1&lt;/a&gt; 在 Kubernetes 环境下的实现，OAM 正在与 &lt;a href=&#34;https://github.com/crossplane/&#34;&gt;Crossplane&lt;/a&gt; 合作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Crossplane&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 Kubernetes 社区开创的以 API 为中心的声明式配置和自动化方法，使基础设施和应用管理标准化。官方网站：&lt;a href=&#34;https://crossplane.io/&#34;&gt;https://crossplane.io/&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;安装-rudr&#34;&gt;安装 Rudr&lt;/h3&gt;
&lt;p&gt;请参考 &lt;a href=&#34;https://github.com/oam-dev/rudr/blob/master/docs/setup/install.md&#34;&gt;Rudr 文档&lt;/a&gt;安装，主要依赖以下组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl&lt;/li&gt;
&lt;li&gt;helm 3&lt;/li&gt;
&lt;li&gt;Kubernetes 1.15+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行下面的命令安装 Rudr 和需要的 trait。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 克隆项目&lt;/span&gt;
git clone https://github.com/oam-dev/rudr.git
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; rudr
&lt;span class=&#34;c1&#34;&gt;# 创建一个名为 oam 的 namespace&lt;/span&gt;
kubectl create namespace oam
&lt;span class=&#34;c1&#34;&gt;# 安装 Rudr&lt;/span&gt;
helm install rudr ./charts/rudr --wait -n oam
&lt;span class=&#34;c1&#34;&gt;# 要使用 ingress trait，推荐安装 Nginx ingress&lt;/span&gt;
helm repo add stable https://kubernetes-charts.storage.googleapis.com/
helm install nginx-ingress stable/nginx-ingress
&lt;span class=&#34;c1&#34;&gt;# 要使用 autoscaler trait，安装 HorizontalPodAutoscaler&lt;/span&gt;
helm repo add kedacore https://kedacore.github.io/charts
helm repo update
helm install keda kedacore/keda -n oam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看当前 oam namespace 下的所有 pod，你会发现已创建了以下 pod。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -n oam
NAME                                              READY   STATUS    RESTARTS   AGE
keda-operator-b6466c989-pn25n                     1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          63m
keda-operator-metrics-apiserver-6cf88c468-k5wd8   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          63m
nginx-ingress-controller-787bd69d8-n6v8c          1/1     Running   &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;         7d
nginx-ingress-default-backend-7c868597f4-vvddn    1/1     Running   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          7d
rudr-c648c9b7b-knj9b                              1/1     Running   &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;          7d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署示例&#34;&gt;部署示例&lt;/h2&gt;
&lt;p&gt;我们使用 OAM 官方提供的教程 &lt;a href=&#34;https://github.com/oam-dev/rudr/blob/master/docs/tutorials/deploy_and_update.md&#34;&gt;Tutorial: Deploy, inspect, and update a Rudr application and its components&lt;/a&gt; 中的 Python &lt;a href=&#34;https://palletsprojects.com/p/flask/&#34;&gt;flask&lt;/a&gt; 示例，该示例基于 OAM v1alpha1 API，最新版 API 的示例可以参考 &lt;a href=&#34;https://github.com/oam-dev/crossplane-oam-sample&#34;&gt;crossplane-oam-sample&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 部署 Component&lt;/span&gt;

kubectl apply -f examples/helloworld-python-component.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时 get pod 会发现并没有创建任何新的 pod，因为 &lt;a href=&#34;https://github.com/oam-dev/rudr/blob/master/examples/helloworld-python-component.yaml&#34;&gt;examples/helloworld-python-component.yaml&lt;/a&gt; 文件中只定义了一个名为 &lt;code&gt;helloworld-python-v1&lt;/code&gt; 的 &lt;code&gt;ComponentSchematic&lt;/code&gt;，但是 &lt;code&gt;ComponentSchematic&lt;/code&gt; 是仅仅是定义了一个组件而已，还无法直接创建 pod 的，还需要创建一个 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 将其与 &lt;code&gt;Trait&lt;/code&gt; 绑定才可以创建应用的 pod。&lt;/p&gt;
&lt;p&gt;关于该示例的详细信息请参考 &lt;a href=&#34;https://github.com/oam-dev/rudr/blob/master/docs/how-to/create_component_from_scratch.md&#34;&gt;Python flask 示例&lt;/a&gt;的创建步骤。&lt;/p&gt;
&lt;h3 id=&#34;创建应用配置&#34;&gt;创建应用配置&lt;/h3&gt;
&lt;p&gt;在部署了 &lt;code&gt;ComponentSchematic&lt;/code&gt; 之后我们还需要创建一个 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 将其与 &lt;code&gt;Trait&lt;/code&gt; 资源绑定才可以创建应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当前已有的 Trait&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在安装 Rudr 时已在 oam namespace 中部署了一些 trait，使用下面的命令查看。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get trait -n oam
NAME             AGE
auto-scaler      7d1h
empty            7d1h
ingress          7d1h
manual-scaler    7d1h
volume-mounter   7d1h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;a href=&#34;https://github.com/oam-dev/rudr/blob/master/examples/first-app-config.yaml&#34;&gt;examples/first-app-config.yaml&lt;/a&gt; 中将 &lt;code&gt;ComponentSchematic&lt;/code&gt; 与 ingress &lt;code&gt;Trait&lt;/code&gt; 联系起来。一个完整的可部署的应用配置 &lt;a href=&#34;https://github.com/oam-dev/rudr/blob/master/examples/first-app-config.yaml&#34;&gt;examples/first-app-config.yaml&lt;/a&gt; 的内容如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;core.oam.dev/v1alpha1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ApplicationConfiguration&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;first-app&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;components&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;componentName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;helloworld-python-v1&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 引用了上文中的 Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;instanceName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;first-app-helloworld-python-v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;parameterValues&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;target&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Rudr&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;port&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;9999&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;traits&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ingress&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Ingress 引用，Rudr 已默认创建&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;properties&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;hostname&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;example.com&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;path&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;servicePort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行下面的命令部署应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f examples/first-app-config.yaml -n oam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若此时查看 oam namespace 下的 pod 将发现有一个新的 pod 创建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -o oam
NAME                                              READY   STATUS    RESTARTS   AGE
first-app-helloworld-python-v1-69945684c7-wfd82   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          16m
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;执行下面的命令可以测试刚安装的应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将 Python flask 应用的 pod 暴露到本机&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;POD_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pods -l &lt;span class=&#34;s2&#34;&gt;&amp;#34;oam.dev/instance-name=first-app-helloworld-python-v1,app.kubernetes.io/name=first-app&amp;#34;&lt;/span&gt; -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
kubectl port-forward &lt;span class=&#34;nv&#34;&gt;$POD_NAME&lt;/span&gt; 9999:9999
Forwarding from 127.0.0.1:9999 -&amp;gt; &lt;span class=&#34;m&#34;&gt;9999&lt;/span&gt;
Forwarding from &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:9999 -&amp;gt; &lt;span class=&#34;m&#34;&gt;9999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中访问 &lt;a href=&#34;http://127.0.0.1:9999&#34;&gt;http://127.0.0.1:9999&lt;/a&gt; 将看到 &lt;code&gt;Hello Rudr!&lt;/code&gt; 的输出，这表示测试成功。&lt;/p&gt;
&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;
&lt;p&gt;从以上描述中可以看出 OAM 对于定义云原生应用标准的野望，其目标不仅限于 Kubernetes 之上的又一上层抽象，而是对于一切云服务，在基于资源对象的基础上，Trait 来控制 Kubernetes 中的一众高层次非可调度的资源对象，如 AutoScaler、Volume、Ingress，Istio 中的流量配置对象 VirtualService、DestinationRule 等，还可容纳更多的云服务，对于 Serverless 时代的去基础设施化的思想不谋而合，OAM 与 Crossplane 的合作及 CNCF SIG App Delivery 的未来可期。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oam.dev&#34;&gt;OAM 官方网站 - oam.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Service Mesh——后 Kubernetes 时代的微服务</title>
      <link>https://jimmysong.io/blog/service-mesh-the-microservices-in-post-kubernetes-era/</link>
      <pubDate>Wed, 01 Apr 2020 11:56:04 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/service-mesh-the-microservices-in-post-kubernetes-era/</guid>
      <description>
        
        
        &lt;p&gt;本文是以前所写内容的重新修订并收录于 ServiceMesher 社区的 &lt;a href=&#34;https://www.servicemesher.com/istio-handbook&#34;&gt;Istio Handbook&lt;/a&gt; 中，其他章节仍在编纂中。&lt;/p&gt;
&lt;p&gt;如果你刚听说 Service Mesh 不久，并试用过 &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; 的话，那么你可能都会有下面几个疑问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么 Istio 要运行在 Kubernetes 上呢？&lt;/li&gt;
&lt;li&gt;Kubernetes 和 Service Mesh 分别在云原生中扮演什么角色？&lt;/li&gt;
&lt;li&gt;Istio 扩展了 Kubernetes 的哪些方面？解决了哪些问题？&lt;/li&gt;
&lt;li&gt;Kubernetes、xDS 协议（&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;Envoy&lt;/a&gt;、&lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;MOSN&lt;/a&gt; 等）与 Istio 之间又是什么关系？&lt;/li&gt;
&lt;li&gt;到底该不该上 Service Mesh？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一节我们将试图带您梳理清楚 Kubernetes、xDS 协议以及 Istio Service Mesh 之间的内在联系。此外，本节还将介绍 Kubernetes 中的负载均衡方式，xDS 协议对于 Service Mesh 的意义以及为什么说及时有了 Kubernetes 还需要 Istio。&lt;/p&gt;
&lt;p&gt;使用 Service Mesh 并不是说与 Kubernetes 决裂，而是水到渠成的事情。Kubernetes 的本质是通过声明式配置对应用进行生命周期管理，而 Service Mesh 的本质是提供应用间的流量和安全性管理以及可观察性。假如你已经使用 Kubernetes 构建了稳定的应用平台，那么如何设置服务间调用的负载均衡和流量控制？&lt;/p&gt;
&lt;p&gt;Envoy 创造的 xDS 协议被众多开源软件所支持，如 &lt;a href=&#34;https://github.com/istio/istio&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https:/github.com/mosn/mosn&#34;&gt;MOSN&lt;/a&gt; 等。Envoy 对于 Service Mesh 或云原生来说最大的贡献就是定义了 xDS，Envoy 本质上是一个 proxy，是可通过 API 配置的现代版 proxy，基于它衍生出来很多不同的使用场景，如 API Gateway、Service Mesh 中的 Sidecar proxy 和边缘代理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本节包含以下内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;说明 kube-proxy 的作用。&lt;/li&gt;
&lt;li&gt;Kubernetes 在微服务管理上的局限性。&lt;/li&gt;
&lt;li&gt;介绍 Istio Service Mesh 的功能。&lt;/li&gt;
&lt;li&gt;介绍 xDS 包含哪些内容。&lt;/li&gt;
&lt;li&gt;比较 Kubernetes、Envoy 和 Istio Service Mesh 中的一些概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重要观点&#34;&gt;重要观点&lt;/h2&gt;
&lt;p&gt;如果你想要提前了解下文的所有内容，那么可以先阅读下面列出的本文中的一些主要观点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 的本质是应用的生命周期管理，具体来说就是部署和管理（扩缩容、自动恢复、发布）。&lt;/li&gt;
&lt;li&gt;Kubernetes 为微服务提供了可扩展、高弹性的部署和管理平台。&lt;/li&gt;
&lt;li&gt;Service Mesh 的基础是透明代理，通过 sidecar proxy 拦截到微服务间流量后再通过控制平面配置管理微服务的行为。&lt;/li&gt;
&lt;li&gt;Service Mesh 将流量管理从 Kubernetes 中解耦，Service Mesh 内部的流量无需 &lt;code&gt;kube-proxy&lt;/code&gt; 组件的支持，通过为更接近微服务应用层的抽象，管理服务间的流量、安全性和可观察性。&lt;/li&gt;
&lt;li&gt;xDS 定义了 Service Mesh 配置的协议标准。&lt;/li&gt;
&lt;li&gt;Service Mesh 是对 Kubernetes 中的 service 更上层的抽象，它的下一步是 serverless。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-vs-service-mesh&#34;&gt;Kubernetes vs Service Mesh&lt;/h2&gt;
&lt;p&gt;下图展示的是 Kubernetes 与 Service Mesh 中的的服务访问关系（每个 pod 一个 sidecar 的模式）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kubernetes-vs-service-mesh.png&#34; alt=&#34;kubernetes 对比 service mesh&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量转发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 集群的每个节点都部署了一个 &lt;code&gt;kube-proxy&lt;/code&gt; 组件，该组件会与 Kubernetes API Server 通信，获取集群中的 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/service.html&#34;&gt;service&lt;/a&gt; 信息，然后设置 iptables 规则，直接将对某个 service 的请求发送到对应的 Endpoint（属于同一组 service 的 pod）上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务发现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;istio-service-registry.png&#34; alt=&#34;Service Mesh 中的服务注册&#34;&gt;&lt;/p&gt;
&lt;p&gt;Istio 可以沿用 Kubernetes 中的 service 做服务注册，还可以通过控制平面的平台适配器对接其他服务发现系统，然后生成数据平面的配置（使用 CRD 声明，保存在 etcd 中），数据平面的&lt;strong&gt;透明代理&lt;/strong&gt;（transparent proxy）以 sidecar 容器的形式部署在每个应用服务的 pod 中，这些 proxy 都需要请求控制平面来同步代理配置。之所以说是透明代理，是因为应用程序容器完全无感知代理的存在，该过程 kube-proxy 组件一样需要拦截流量，只不过 &lt;code&gt;kube-proxy&lt;/code&gt; 拦截的是进出 Kubernetes 节点的流量，而 sidecar proxy 拦截的是进出该 Pod 的流量，详见&lt;a href=&#34;https://jimmysong.io/blog/envoy-sidecar-routing-of-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy Sidecar 代理的路由转发&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service Mesh 的劣势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为 Kubernetes 每个节点上都会运行众多的 Pod，将原先 &lt;code&gt;kube-proxy&lt;/code&gt; 方式的路由转发功能置于每个 pod 中，因为有 sidecar 拦截流量会多一次跳转时，增加响应延迟，同时大量的配置分发、配置同步，可能会影响应用性能。为了细粒度地进行流量管理，必将添加一系列新的抽象，从而会进一步增加用户的学习成本，但随着技术的普及，这样的情况会慢慢地得到缓解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service Mesh 的优势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-proxy&lt;/code&gt; 的设置都是全局生效的，无法对每个服务做细粒度的控制，而 Service Mesh 通过 sidecar proxy 的方式将 Kubernetes 中对流量的控制从 service 一层抽离出来，可以做更多的扩展。&lt;/p&gt;
&lt;h2 id=&#34;kube-proxy-组件&#34;&gt;kube-proxy 组件&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 集群中，每个 Node 运行一个 &lt;code&gt;kube-proxy&lt;/code&gt; 进程。&lt;code&gt;kube-proxy&lt;/code&gt; 负责为 &lt;code&gt;Service&lt;/code&gt; 实现了一种 VIP（虚拟 IP）的形式。 在 Kubernetes v1.0 版本，代理完全在 userspace 实现。Kubernetes v1.1 版本新增了 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/service.html#iptables-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F&#34;&gt;iptables 代理模式&lt;/a&gt;，但并不是默认的运行模式。从 Kubernetes v1.2 起，默认使用 iptables 代理。在 Kubernetes v1.8.0-beta.0 中，添加了 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/service.html#ipvs-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F&#34;&gt;ipvs 代理模式&lt;/a&gt;。关于 kube-proxy 组件的更多介绍请参考 &lt;a href=&#34;https://cizixs.com/2017/03/30/kubernetes-introduction-service-and-kube-proxy/&#34;&gt;kubernetes 简介：service 和 kube-proxy 原理&lt;/a&gt; 和 &lt;a href=&#34;https://jishu.io/kubernetes/ipvs-loadbalancer-for-kubernetes/&#34;&gt;使用 IPVS 实现 Kubernetes 入口流量负载均衡&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;kube-proxy-的缺陷&#34;&gt;kube-proxy 的缺陷&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://cizixs.com/2017/03/30/kubernetes-introduction-service-and-kube-proxy/&#34;&gt;kube-proxy 的不足之处&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;首先，如果转发的 pod 不能正常提供服务，它不会自动尝试另一个 pod，每个 pod 都有一个健康检查的机制，当有 pod 健康状况有问题时，kubelet 会重启对应的 pod，kube-proxy 会删除对应的转发规则。另外，&lt;code&gt;nodePort&lt;/code&gt; 类型的服务也无法添加 TLS 或者更复杂的报文路由机制。&lt;/p&gt;
&lt;p&gt;Kube-proxy 实现了流量在 Kubernetes service 多个 pod 实例间的负载均衡，但是如何对这些 service 间的流量做细粒度的控制，比如按照百分比划分流量到不同的应用版本（这些应用都属于同一个 service，但位于不同的 deployment 上），做金丝雀发布（灰度发布）和蓝绿发布？Kubernetes 社区给出了 &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments&#34;&gt;使用 Deployment 做金丝雀发布的方法&lt;/a&gt;，该方法本质上就是通过修改 pod 的 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/label.html&#34;&gt;label&lt;/a&gt; 来将不同的 pod 划归到 Deployment 的 Service 上。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-ingress-vs-istio-gateway&#34;&gt;Kubernetes Ingress vs Istio Gateway&lt;/h2&gt;
&lt;p&gt;上文说到 &lt;code&gt;kube-proxy&lt;/code&gt; 只能路由 Kubernetes 集群内部的流量，而我们知道 Kubernetes 集群的 Pod 位于 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/cni.html&#34;&gt;CNI&lt;/a&gt; 创建的网络中，集群外部是无法直接与其通信的，因此 Kubernetes 中创建了 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/ingress.html&#34;&gt;ingress&lt;/a&gt; 这个资源对象，它由位于 Kubernetes &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/practice/edge-node-configuration.html&#34;&gt;边缘节点&lt;/a&gt;（这样的节点可以是很多个也可以是一组）的 Ingress controller 驱动，负责管理&lt;strong&gt;南北向流量&lt;/strong&gt;，Ingress 必须对接各种 Ingress Controller 才能使用，比如 &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx&#34;&gt;nginx ingress controller&lt;/a&gt;、&lt;a href=&#34;https://traefik.io/&#34;&gt;traefik&lt;/a&gt;。Ingress 只适用于 HTTP 流量，使用方式也很简单，只能对 service、port、HTTP 路径等有限字段匹配来路由流量，这导致它无法路由如 MySQL、Redis 和各种私有 RPC 等 TCP 流量。要想直接路由南北向的流量，只能使用 Service 的 LoadBalancer 或 NodePort，前者需要云厂商支持，后者需要进行额外的端口管理。有些 Ingress controller 支持暴露 TCP 和 UDP 服务，但是只能使用 Service 来暴露，Ingress 本身是不支持的，例如 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/&#34;&gt;nginx ingress controller&lt;/a&gt;，服务暴露的端口是通过创建 ConfigMap 的方式来配置的。&lt;/p&gt;
&lt;p&gt;Istio Gateway 的功能与 Kubernetes Ingress 类似，都是负责集群的南北向流量。Istio &lt;code&gt;Gateway&lt;/code&gt; 描述的负载均衡器用于承载进出网格边缘的连接。该规范中描述了一系列开放端口和这些端口所使用的协议、负载均衡的 SNI 配置等内容。Gateway 是一种 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/crd.html&#34;&gt;CRD 扩展&lt;/a&gt;，它同时复用了 sidecar proxy 的能力，详细配置请参考 &lt;a href=&#34;https://istio.io/docs/reference/config/networking/gateway/&#34;&gt;Istio 官网&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;xds-协议&#34;&gt;xDS 协议&lt;/h2&gt;
&lt;p&gt;下面这张图大家在了解 Service Mesh 的时候可能都看到过，每个方块代表一个服务的实例，例如 Kubernetes 中的一个 Pod（其中包含了 sidecar proxy），xDS 协议控制了 Istio Service Mesh 中所有流量的具体行为，即将下图中的方块链接到了一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;service-mesh-schematic-diagram.png&#34; alt=&#34;Service Mesh 示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;xDS 协议是由 &lt;a href=&#34;https://envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt; 提出的，在 Envoy v2 版本 API 中最原始的 xDS 协议指的是 CDS（Cluster Discovery Service）、EDS（Endpoint Discovery service）、LDS（Listener Discovery Service） 和 RDS（Route Discovery Service），后来在 v3 版本中又发展出了 Scoped Route Discovery Service（SRDS）、Virtual Host Discovery Service （VHDS）、Secret Discovery Service（SDS）、Runtime Discovery Service（RTDS）等，详见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34;&gt;xDS REST and gRPC protocol&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面我们以各有两个实例的 service，来看下 xDS 协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;xds-protocol.png&#34; alt=&#34;xDS 协议&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中的箭头不是流量进入 Proxy 后的路径或路由，也不是实际顺序，而是想象的一种 xDS 接口处理顺序，其实 xDS 之间也是有交叉引用的。&lt;/p&gt;
&lt;p&gt;支持 xDS 协议的代理通过查询文件或管理服务器来动态发现资源。概括地讲，对应的发现服务及其相应的 API 被称作 &lt;em&gt;xDS&lt;/em&gt;。Envoy 通过 &lt;strong&gt;订阅（subscription）&lt;/strong&gt; 的方式来获取资源，订阅方式有以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件订阅&lt;/strong&gt;：监控指定路径下的文件，发现动态资源的最简单方式就是将其保存于文件，并将路径配置在 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/config_source.proto#core-configsource&#34;&gt;ConfigSource&lt;/a&gt; 中的 &lt;code&gt;path&lt;/code&gt; 参数中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC 流式订阅&lt;/strong&gt;：每个 xDS API 可以单独配置 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/config_source.proto#core-apiconfigsource&#34;&gt;&lt;code&gt;ApiConfigSource&lt;/code&gt;&lt;/a&gt;，指向对应的上游管理服务器的集群地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轮询 REST-JSON 轮询订阅&lt;/strong&gt;：单个 xDS API 可对 REST 端点进行的同步（长）轮询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的 xDS 订阅方式详情请参考 &lt;a href=&#34;https://jimmysong.io/istio-handbook/concepts/envoy-xds-protocol.html&#34;&gt;xDS 协议解析&lt;/a&gt;。Istio 使用 gRPC 流式订阅的方式配置所有的数据平面的 sidecar proxy。&lt;/p&gt;
&lt;h3 id=&#34;xds-协议要点&#34;&gt;xDS 协议要点&lt;/h3&gt;
&lt;p&gt;最后总结下关于 xDS 协议的要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDS、EDS、LDS、RDS 是最基础的 xDS 协议，它们可以分别独立更新。&lt;/li&gt;
&lt;li&gt;所有的发现服务（Discovery Service）可以连接不同的 Management Server，也就是说管理 xDS 的服务器可以是多个。&lt;/li&gt;
&lt;li&gt;Envoy 在原始 xDS 协议的基础上进行了一些列扩充，增加了 SDS（秘钥发现服务）、ADS（聚合发现服务）、HDS（健康发现服务）、MS（Metric 服务）、RLS（速率限制服务）等 API。&lt;/li&gt;
&lt;li&gt;为了保证数据一致性，若直接使用 xDS 原始 API 的话，需要保证这样的顺序更新：CDS &amp;ndash;&amp;gt; EDS &amp;ndash;&amp;gt; LDS &amp;ndash;&amp;gt; RDS，这是遵循电子工程中的&lt;strong&gt;先合后断&lt;/strong&gt;（Make-Before-Break）原则，即在断开原来的连接之前先建立好新的连接，应用在路由里就是为了防止设置了新的路由规则的时候却无法发现上游集群而导致流量被丢弃的情况，类似于电路里的断路。&lt;/li&gt;
&lt;li&gt;CDS 设置 Service Mesh 中有哪些服务。&lt;/li&gt;
&lt;li&gt;EDS 设置哪些实例（Endpoint）属于这些服务（Cluster）。&lt;/li&gt;
&lt;li&gt;LDS 设置实例上监听的端口以配置路由。&lt;/li&gt;
&lt;li&gt;RDS 最终服务间的路由关系，应该保证最后更新 RDS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;envoy&#34;&gt;Envoy&lt;/h2&gt;
&lt;p&gt;Envoy 是 Istio Service Mesh 中默认的 Sidecar，Istio 在 Enovy 的基础上按照 Envoy 的 xDS 协议扩展了其控制平面，在讲到 Envoy xDS 协议之前我们还需要先熟悉下 Envoy 的基本术语。下面列举了 Envoy 里的基本术语及其数据结构解析，关于 Envoy 的详细介绍请参考 &lt;a href=&#34;http://cloudnative.to/envoy/&#34;&gt;Envoy 官方文档&lt;/a&gt;，至于 Envoy 在 Service Mesh（不仅限于 Istio） 中是如何作为转发代理工作的请参考网易云刘超的这篇&lt;a href=&#34;https://www.cnblogs.com/163yun/p/8962278.html&#34;&gt;深入解读 Service Mesh 背后的技术细节 &lt;/a&gt;以及&lt;a href=&#34;https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持&lt;/a&gt;，本文引用其中的一些观点，详细内容不再赘述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-arch.png&#34; alt=&#34;Envoy proxy 架构图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;基本术语&#34;&gt;基本术语&lt;/h3&gt;
&lt;p&gt;下面是您应该了解的 Enovy 里的基本术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Downstream（下游）&lt;/strong&gt;：下游主机连接到 Envoy，发送请求并接收响应，即发送请求的主机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upstream（上游）&lt;/strong&gt;：上游主机接收来自 Envoy 的连接和请求，并返回响应，即接受请求的主机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listener（监听器）&lt;/strong&gt;：监听器是命名网地址（例如，端口、unix domain socket 等)，下游客户端可以连接这些监听器。Envoy 暴露一个或者多个监听器给下游主机连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cluster（集群）&lt;/strong&gt;：集群是指 Envoy 连接的一组逻辑相同的上游主机。Envoy 通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/service_discovery.html#arch-overview-service-discovery&#34;&gt;服务发现&lt;/a&gt;来发现集群的成员。可以选择通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/health_checking.html#arch-overview-health-checking&#34;&gt;主动健康检查&lt;/a&gt;来确定集群成员的健康状态。Envoy 通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/load_balancing.html#arch-overview-load-balancing&#34;&gt;负载均衡策略&lt;/a&gt;决定将请求路由到集群的哪个成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Envoy 中可以设置多个 Listener，每个 Listener 中又可以设置 filter chain（过滤器链表），而且过滤器是可扩展的，这样就可以更方便我们操作流量的行为，例如设置加密、私有 RPC 等。&lt;/p&gt;
&lt;p&gt;xDS 协议是由 Envoy 提出的，现在是 Istio 中默认的 sidecar proxy，但只要实现 xDS 协议理论上都是可以作为 Istio 中的 sidecar proxy 的，例如蚂蚁集团开源的 &lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;MOSN&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;istio-service-mesh&#34;&gt;Istio Service Mesh&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;istio-mesh-arch.png&#34; alt=&#34;Istio service mesh 架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;Istio 是一个功能十分丰富的 Service Mesh，它包括如下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量管理：这是 Istio 的最基本的功能。&lt;/li&gt;
&lt;li&gt;策略控制：通过 Mixer 组件和各种适配器来实现，实现访问控制系统、遥测捕获、配额管理和计费等。&lt;/li&gt;
&lt;li&gt;可观测性：在 sidecar proxy 中实现。&lt;/li&gt;
&lt;li&gt;安全认证：Citadel 组件做密钥和证书管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;istio-中的流量管理&#34;&gt;Istio 中的流量管理&lt;/h3&gt;
&lt;p&gt;Istio 中定义了如下的 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/custom-resource.html&#34;&gt;CRD&lt;/a&gt; 来帮助用户进行流量管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gateway&lt;/strong&gt;：&lt;a href=&#34;https://istio.io/docs/reference/config/networking/gateway/&#34;&gt;Gateway&lt;/a&gt; 描述了在网络边缘运行的负载均衡器，用于接收传入或传出的HTTP / TCP连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VirtualService&lt;/strong&gt;：&lt;a href=&#34;https://istio.io/docs/reference/config/networking/virtual-service/&#34;&gt;VirtualService&lt;/a&gt; 实际上将 Kubernetes 服务连接到 Istio Gateway。它还可以执行更多操作，例如定义一组流量路由规则，以便在主机被寻址时应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DestinationRule&lt;/strong&gt;：&lt;a href=&#34;https://istio.io/zh/docs/reference/config/networking/destination-rule/&#34;&gt;&lt;code&gt;DestinationRule&lt;/code&gt;&lt;/a&gt; 所定义的策略，决定了经过路由处理之后的流量的访问策略。简单的说就是定义流量如何路由。这些策略中可以定义负载均衡配置、连接池尺寸以及外部检测（用于在负载均衡池中对不健康主机进行识别和驱逐）配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EnvoyFilter&lt;/strong&gt;：&lt;a href=&#34;https://istio.io/docs/reference/config/networking/envoy-filter/&#34;&gt;&lt;code&gt;EnvoyFilter&lt;/code&gt;&lt;/a&gt; 对象描述了针对代理服务的过滤器，这些过滤器可以定制由 Istio Pilot 生成的代理配置。这个配置初级用户一般很少用到。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ServiceEntry&lt;/strong&gt;：默认情况下 Istio Service Mesh 中的服务是无法发现 Mesh 外的服务的，&lt;a href=&#34;https://istio.io/docs/reference/config/networking/service-entry/&#34;&gt;&lt;code&gt;ServiceEntry&lt;/code&gt;&lt;/a&gt; 能够在 Istio 内部的服务注册表中加入额外的条目，从而让网格中自动发现的服务能够访问和路由到这些手工加入的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-vs-xds-vs-istio&#34;&gt;Kubernetes vs xDS vs Istio&lt;/h2&gt;
&lt;p&gt;在阅读完上文对 Kubernetes 的 &lt;code&gt;kube-proxy&lt;/code&gt; 组件、xDS 和 Istio 中流量管理的抽象概念之后，下面将带您仅就流量管理方面比较下三者对应的组件/协议（注意，三者不可以完全等同）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Kubernetes&lt;/th&gt;
&lt;th&gt;xDS&lt;/th&gt;
&lt;th&gt;Istio Service Mesh&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Endpoint&lt;/td&gt;
&lt;td&gt;Endpoint&lt;/td&gt;
&lt;td&gt;WorkloadEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Route&lt;/td&gt;
&lt;td&gt;VirtualService&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kube-proxy&lt;/td&gt;
&lt;td&gt;Route&lt;/td&gt;
&lt;td&gt;DestinationRule&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kube-proxy&lt;/td&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td&gt;EnvoyFilter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ingress&lt;/td&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td&gt;Gateway&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Cluster&lt;/td&gt;
&lt;td&gt;ServiceEntry&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;如果说 Kubernetes 管理的对象是 Pod，那么 Service Mesh 中管理的对象就是一个个 Service，所以说使用 Kubernetes 管理微服务后再应用 Service Mesh 就是水到渠成了，如果连 Service 你也不想管了，那就用如 &lt;a href=&#34;https://github.com/knative/&#34;&gt;knative&lt;/a&gt; 这样的 serverless 平台，但这就是后话了。&lt;/p&gt;
&lt;p&gt;Envoy/MOSN 的功能也不只是做流量转发，以上概念只不过是 Istio 在 Kubernetes 之上新增一层抽象层中的冰山一角，但因为流量管理是服务网格最基础也是最重要的功能，所以这将成为本书的开始。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/163yun/p/8962278.html&#34;&gt;深入解读 Service Mesh 背后的技术细节 - cnblogs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cizixs.com/2017/03/30/kubernetes-introduction-service-and-kube-proxy/&#34;&gt;kubernetes 简介：service 和 kube-proxy 原理 - cizixs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jishu.io/kubernetes/ipvs-loadbalancer-for-kubernetes/&#34;&gt;使用 IPVS 实现 Kubernetes 入口流量负载均衡 - jishu.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34;&gt;xDS REST and gRPC protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>云原生服务网格 Istio 图书</title>
      <link>https://jimmysong.io/blog/cloud-native-service-mesh-istio-book/</link>
      <pubDate>Sat, 03 Aug 2019 15:24:37 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-native-service-mesh-istio-book/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://item.jd.com/12538407.html&#34;&gt;《云原生服务网格 Istio：原理、实践、架构与源码解析（张超盟、章鑫、徐中虎、徐飞编著）》&lt;/a&gt;是 2019 年国内出版的第四本 Istio 相关图书，前三本分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://item.jd.com/12527008.html&#34;&gt;深入浅出Istio：Service Mesh快速入门与实践，崔秀龙 著&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://item.jd.com/12516473.html&#34;&gt;Service Mesh实战：用Istio软负载实现服务网格，周遥 著&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://item.jd.com/12601120.html&#34;&gt;Istio 入门与实战，毛广献 著&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这四本书刚上市时我都获得了作者的赠书，这本书是由四位华为的同学编写，于 2019 年  7 月第一次印刷，全书共 24 章，606 页，售价 139 元。我是在 KubeCon China 2019 的上海大会现场张超盟亲手赠与我的，张超盟也是 2018 年&lt;a href=&#34;https://www.servicemesher.com/blog/service-mesh-meetup-shenzhen-20180825/&#34;&gt;第三届 Service Mesh Meetup&lt;/a&gt; 的讲师。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g60ml3q3i4j30xc0m8wg2.jpg&#34; alt=&#34;右侧是云原生服务网格 Istio（华为云原生技术丛书）作者之一张超盟&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;本书结构&#34;&gt;本书结构&lt;/h2&gt;
&lt;p&gt;全书共分四个篇章，24 个章节，606 页，每个章节的页数占比统计如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g5nsbm4pkej30u00uj0vw.jpg&#34; alt=&#34;云原生服务网格 Istio：原理、实践、架构与源码解析》图书章节页数占全书百分比-表格&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g60mjr3lirj30v20u0q5g.jpg&#34; alt=&#34;《云原生服务网格 Istio：原理、实践、架构与源码解析》图书章节页数占全书百分比-饼图&#34;&gt;&lt;/p&gt;
&lt;p&gt;从统计结果中可以看出书中第 3 章（非侵入的流量治理）、第 14 章（司令官 Pilot）一共占全书的页数百分比为 24%，几乎占了四分之一的篇幅。&lt;/p&gt;
&lt;p&gt;这本书是目前（2019年08月15日）市面上能买到的最全的一本 Istio 相关的图书了，话说国外还一本 Istio 的书也出来，国内到现在都出了四本了，是不是有种墙外开花墙内香的感觉？&lt;/p&gt;
&lt;p&gt;建议大家结合 &lt;a href=&#34;https://istio.io&#34;&gt;Istio 官方文档&lt;/a&gt;一起来看这本书，Istio 版本更新虽然没有 Kubernetes 那么快，但是在本书发行一个多月后也要发布 1.2 版本了，欢迎大家&lt;a href=&#34;https://www.servicemesher.com&#34;&gt;加入 ServiceMesher 社区&lt;/a&gt;来学习 Istio！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 GitHub Webhook 实现静态网站自动化部署</title>
      <link>https://jimmysong.io/blog/github-webhook-website-auto-deploy/</link>
      <pubDate>Wed, 10 Jul 2019 13:13:15 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/github-webhook-website-auto-deploy/</guid>
      <description>
        
        
        &lt;p&gt;本文介绍如何为 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;ServiceMesher.com&lt;/a&gt; 网站配置自动化部署的详细说明，通过本文你将了解到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何使用 GitHub Webhook 来自动化发布您的网站&lt;/li&gt;
&lt;li&gt;如何配置 Nginx 代理根据 URI 请求转发到本地服务器的指定端口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自动发布脚本&#34;&gt;自动发布脚本&lt;/h2&gt;
&lt;p&gt;使用名为 &lt;code&gt;deploy.sh&lt;/code&gt; 的 Shell 脚本编译 Hugo 生成 HTML 文件，并放到 Nginx 配置的目录下。该脚本位于 &lt;a href=&#34;https://github.com/servicemesher/website&#34;&gt;ServiceMesher 官网 GitHub 仓库&lt;/a&gt;同级目录下，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 网站的代码仓库目录&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;website&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Nginx 中配置的网站的 HTML 根目录&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/home/admin/servicemesher.com&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;
git pull
hugo
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
cp -r &lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;/public/* &lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;依赖安装&#34;&gt;依赖安装&lt;/h2&gt;
&lt;p&gt;该网站部署在阿里云上，操作系统为 CentOS 7.6.1810，并配置好了 &lt;a href=&#34;https://jimmysong.io/posts/free-certificates-with-certbot&#34;&gt;HTTPS&lt;/a&gt;	。&lt;/p&gt;
&lt;p&gt;安装后端服务配置所需的组件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install -y npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 NPM 包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm i -S github-webhook-handler
npm i -g pm2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建-webhook-服务后端&#34;&gt;创建 webhook 服务后端&lt;/h2&gt;
&lt;p&gt;我们使用 NodeJS 创建 webhook 服务后端，后端代码保存在 &lt;code&gt;webhook.js&lt;/code&gt;文件中，调用 &lt;code&gt;deploy.sh&lt;/code&gt; 来发布，因此需要与 &lt;code&gt;deploy.sh&lt;/code&gt; 文件在同一级目录中，监听 &lt;code&gt;http://127.0.0.1:6666/webhook&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;当前的所有文件的结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls -1
deploy.sh
node_modules
package.json
sofastack.tech
webhook.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;webhook.js&lt;/code&gt; 文件内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;spawn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;github-webhook-handler&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 注意将 secret 修改你自己的
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/webhook&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;yourwebhooksecret&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;no such location&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6666&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Error:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;push&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Received a push event for %s to %s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;runCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./deploy.sh&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Deploy OK&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;webhook.js&lt;/code&gt; 所在目录下启动后端服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pm2 start webhook.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看服务状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pm2 status
┌──────────┬────┬─────────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐
│ App name │ id │ version │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │
├──────────┼────┼─────────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤
│ webhook  │ &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  │ 1.0.0   │ fork │ &lt;span class=&#34;m&#34;&gt;30366&lt;/span&gt; │ online │ &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       │ 6h     │ 0%  │ 30.8 MB   │ root │ disabled │
└──────────┴────┴─────────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘
 Use &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;pm2 show &amp;lt;id&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;name&amp;gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; to get more details about an app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;pm2 logs webhook&lt;/code&gt; 可以查看后端服务日志。&lt;/p&gt;
&lt;h2 id=&#34;nginx-配置&#34;&gt;Nginx 配置&lt;/h2&gt;
&lt;p&gt;在 nginx 配置中增加转发设置，将对网站 &lt;code&gt;/webhook&lt;/code&gt; URI 的访问转发到服务器本地的 6666 端口，即 webhook 后端服务商。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# GitHub auto deploy webhook&lt;/span&gt;
        location /webhook &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            proxy_pass http://127.0.0.1:6666&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;github-webhook-配置&#34;&gt;GitHub Webhook 配置&lt;/h2&gt;
&lt;p&gt;在 GitHub 仓库的 &lt;code&gt;Settings&lt;/code&gt; - &lt;code&gt;webhooks&lt;/code&gt; 设置中创建一个新的 webhook。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g4uxl5ioq4j312q0u0ac3.jpg&#34; alt=&#34;GitHub Webhook 配置&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意选择 Content Type 为 &lt;code&gt;application/json&lt;/code&gt;，secret 设置成与 &lt;code&gt;webhook.js&lt;/code&gt; 中的相同。&lt;/p&gt;
&lt;p&gt;配置完成后 GitHub 将自动调用 Webhook 以验证有效性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g4uxnir7ckj316a0ke3zd.jpg&#34; alt=&#34;GitHub 自动触发 Webhook&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果看到 200 响应表示成功调用 Webhook 后端服务，这样每次我们的仓库合并后就会触发网站自动部署。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;为了加强 GitHub 自动化，还有更多 GitHub App 可以使用，推荐：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apps/auto-assign&#34;&gt;auto-assigin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apps/mergify&#34;&gt;mergify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些已经在 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;servicemesher.com&lt;/a&gt; 网站上集成了，感兴趣的读者可以访问 &lt;a href=&#34;https://github.com/servicemesher/website&#34;&gt;ServiceMesher 官网的代码仓库&lt;/a&gt;查看配置。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/index.html&#34;&gt;使用Github的webhooks进行网站自动化部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Certbot 为网站设置永久免费的 HTTPS 证书</title>
      <link>https://jimmysong.io/blog/free-certificates-with-certbot/</link>
      <pubDate>Fri, 05 Jul 2019 21:10:57 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/free-certificates-with-certbot/</guid>
      <description>
        
        
        &lt;p&gt;我的博客从上线第一天起就使用了 HTTPS，用的是 &lt;a href=&#34;https://www.cloudflare.com/zh-cn/&#34;&gt;Cloudflare&lt;/a&gt;，直接在其后台配置即可。如果你是用 nginx、apache、haproxy 等服务器来运行自己的网站，给大家推荐 &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;Certbot&lt;/a&gt;，可以自动化来配置 SSL 证书和定时更新。&lt;/p&gt;
&lt;p&gt;下面记录我自己为 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;servicemesher.com&lt;/a&gt; 网站配置 HTTPS 证书的过程，全程不需要 5 分钟。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;网站的托管环境如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS：CentOS 7.6 阿里云&lt;/li&gt;
&lt;li&gt;网站服务器：Nginx，使用 yum 安装，版本 1.12&lt;/li&gt;
&lt;li&gt;提前配置好 Nginx，确保使用 HTTP 先可以访问到网站&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：请使用 &lt;code&gt;yum&lt;/code&gt; 命令安装 nginx，这样可以确保 nginx 安装在默认的位置，因为 certbot 会检测 &lt;code&gt;/etc/nginx/&lt;/code&gt; 目录下的配置文件。&lt;/p&gt;
&lt;h2 id=&#34;操作步骤&#34;&gt;操作步骤&lt;/h2&gt;
&lt;p&gt;执行下面的步骤可以直接为你的网站配置 HTTPS 证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y install yum-utils
yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
yum install certbot python2-certbot-nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图是在 Certbot 中选择服务器和操作系统的页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g4oqftr4fdj31e20u0gn8.jpg&#34; alt=&#34;CertBot 页面&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行下面的命令，根据提示会自动配置 nginx。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;certbot --nginx
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator nginx, Installer nginx
Starting new HTTPS connection &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: acme-v02.api.letsencrypt.org

Which names would you like to activate HTTPS &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;?
1：servicemesher.com
2: www.servicemsher.com
&lt;span class=&#34;c1&#34;&gt;# 这里直接回车选择所有的域名&lt;/span&gt;
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; all options shown &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Enter &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; to cancel&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
You have an existing certificate that contains a portion of the domains you
requested &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ref: /etc/letsencrypt/renewal/servicemesher.com.conf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

It contains these names: servicemesher.com, www.servicemesher.com

You requested these names &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the new certificate: servicemesher.com,
prow.servicemesher.com, www.servicemesher.com.

Do you want to expand and replace this existing certificate with the new
certificate?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;E&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;xpand/&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;ancel: E
Renewing an existing certificate
Performing the following challenges:
http-01 challenge &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; prow.servicemesher.com
Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; verification...
Cleaning up challenges
Deploying Certificate to VirtualHost /etc/nginx/nginx.conf
Deploying Certificate to VirtualHost /etc/nginx/nginx.conf
Deploying Certificate to VirtualHost /etc/nginx/nginx.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;
new sites, or &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; you&lt;span class=&#34;s1&#34;&gt;&amp;#39;re confident your site works on HTTPS. You can undo this
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;change by editing your web server&amp;#39;&lt;/span&gt;s configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1-2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;enter&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;press &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; to cancel&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;span class=&#34;c1&#34;&gt;# 这里是为了扩展证书支持更多的域名，所有输入 2 回车&lt;/span&gt;
Traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; already redirecting to ssl in /etc/nginx/nginx.conf
Redirecting all traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; to ssl in /etc/nginx/nginx.conf
Traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; already redirecting to ssl in /etc/nginx/nginx.conf

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Your existing certificate has been successfully renewed, and the new certificate
has been installed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后重新加载配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nginx -t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置证书自动更新。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0 0,12 * * * root python -c &amp;#39;import random; import time; time.sleep(random.random() * 3600)&amp;#39; &amp;amp;&amp;amp; certbot renew&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/crontab &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了现在访问你的网站就可以看到 https 头部加了 HTTPS 锁了。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xs18952904/article/details/79262646&#34;&gt;让网站永久拥有HTTPS - 申请免费SSL证书并自动续期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://certbot.eff.org/lets-encrypt/centosrhel7-nginx&#34;&gt;certbot - 免费的 https 证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>开源软件合规实践</title>
      <link>https://jimmysong.io/blog/open-source-compliance-practices/</link>
      <pubDate>Sat, 08 Jun 2019 18:13:19 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/open-source-compliance-practices/</guid>
      <description>
        
        
        &lt;h2 id=&#34;总体概述&#34;&gt;总体概述&lt;/h2&gt;
&lt;p&gt;开源软件合规（Compliance）实践，从狭义上讲就是企业使用开源软件许可证（License）的合规。&lt;em&gt;Recommended Open Source Compliance Practices for the Enterprise&lt;/em&gt; 电子书（共32 页）由 &lt;em&gt;Ibrahim Haddad&lt;/em&gt; 博士撰写，本书从以下几个角度为你的公司的进行开源合规实践以指导：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建开源审查委员会（Open Source Review Committee）&lt;/li&gt;
&lt;li&gt;代码扫描&lt;/li&gt;
&lt;li&gt;软件溯源（Software Sourcing）&lt;/li&gt;
&lt;li&gt;开源法务支持（Open Source Legal Support）&lt;/li&gt;
&lt;li&gt;流程中的合规检查（Compliance Checkpoints）&lt;/li&gt;
&lt;li&gt;开发和部署检查器&lt;/li&gt;
&lt;li&gt;合规事项看板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开源合规审查组&#34;&gt;开源合规审查组&lt;/h3&gt;
&lt;p&gt;企业为了保证自己产品或软件的合规，通常会有一个许可证合规审查组，负责以下几项职责：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遵守开源许可条款&lt;/li&gt;
&lt;li&gt;促进在产品和服务中使用开源&lt;/li&gt;
&lt;li&gt;遵守第三方商业软件的许可条款&lt;/li&gt;
&lt;li&gt;保护您的产品/服务差异化（知识产权/IP）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3unqmzuawj30yy0fmgnv.jpg&#34; alt=&#34;开源促进及合规计划&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;开源合规流程&#34;&gt;开源合规流程&lt;/h3&gt;
&lt;p&gt;图 2 是开源合规流程闭环。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3unru4rl8j31300qkmz8.jpg&#34; alt=&#34;图 2. 开源合规流程闭环&#34;&gt;&lt;/p&gt;
&lt;p&gt;该流程中分为以下三步：确认（Identify）、批准（Approve）和确知（Satisfy）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3unvsqmmrj31zy0fu0w8.jpg&#34; alt=&#34;图 3. 开源合规步骤产出&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;确认identify&#34;&gt;确认（Identify）&lt;/h4&gt;
&lt;p&gt;此初始步骤的目标是监控软件组合中开源来源，无论该组合是作为独立软件包还是嵌入在第三方或公司开发的软件中。此步骤的输出是详细的软件物料清单（Bill of Materials），用于标识所有开源软件包（Package）和代码片段（Snippet）的来源（Origin）、许可证（License）以及由软件组合分析工具所识别的许可冲突。&lt;/p&gt;
&lt;h4 id=&#34;批准approve&#34;&gt;批准（Approve）&lt;/h4&gt;
&lt;p&gt;这一步的目标是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看上一步的输出，了解管理相关源代码的使用、修改和分发的许可证；&lt;/li&gt;
&lt;li&gt;根据其独特的背景（context），确定是否批准使用已识别的开源软件；&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;确知satisfy&#34;&gt;确知（Satisfy）&lt;/h4&gt;
&lt;p&gt;在最后一步中，准备好所有已批准的开源软件（整个组件和片段）的许可证、版权（copyright）和归属声明，并将其交给相关的部门，以包含在产品文档中。同样，已经确知和标记了许可义务的开源软件包，就可以在产品/服务上线时发布了。&lt;/p&gt;
&lt;h3 id=&#34;对企业开源合规实践的建议&#34;&gt;对企业开源合规实践的建议&lt;/h3&gt;
&lt;p&gt;作者提出了企业可以实施的实践建议，以改进和加强其开源合规性计划：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成立开源审查委员会（Open Source Review Board，简称 OSRB）&lt;/li&gt;
&lt;li&gt;建立自动化系统来识别开源软件&lt;/li&gt;
&lt;li&gt;让软件供应商遵守开源许可证&lt;/li&gt;
&lt;li&gt;扩展开源法律支持&lt;/li&gt;
&lt;li&gt;在业务和开发过程中集成开源合规性检查点&lt;/li&gt;
&lt;li&gt;提供各种开源合规性任务的清单（checklist）&lt;/li&gt;
&lt;li&gt;开发和部署支持清单&lt;/li&gt;
&lt;li&gt;建立开源合规活动基准（benchmark）&lt;/li&gt;
&lt;li&gt;参与关键合规性开源合规性计划&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;成立开源审查委员会&#34;&gt;成立开源审查委员会&lt;/h2&gt;
&lt;p&gt;除开源合规官或开源计划办公室的代表外，开源审查委员会（OSRB）由法律和产品/工程团队的代表组成。OSRB的主要职责是审查和批准计划在产品和服务中使用开源软件。&lt;/p&gt;
&lt;p&gt;下面是 OSRB 中每个参与者职责的宏观概述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开源法律顾问（Open Source Legal Counsel）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;审查和批准开源软件的使用、修改和分发。&lt;/li&gt;
&lt;li&gt;提供与开源许可相关的法律指导。&lt;/li&gt;
&lt;li&gt;为创建合规培训做出贡献。&lt;/li&gt;
&lt;li&gt;有助于改进合规计划。&lt;/li&gt;
&lt;li&gt;审查和批准与许可证合规性相关的 Web 门户的内容。&lt;/li&gt;
&lt;li&gt;审核并批准使用的开源软件的义务列表。&lt;/li&gt;
&lt;li&gt;从开源合规性角度签署产品发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;产品/工程代表（Product / Engineering Representative）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在其组织内实施合规性政策（policy）和流程（process）。&lt;/li&gt;
&lt;li&gt;在软件开发过程中集成合规性实践。&lt;/li&gt;
&lt;li&gt;从工程角度为改进合规计划做出贡献。&lt;/li&gt;
&lt;li&gt;遵循技术开源合规指南。&lt;/li&gt;
&lt;li&gt;与 OSRB 成员协作以响应合规性查询。&lt;/li&gt;
&lt;li&gt;进行设计、架构和代码审查。&lt;/li&gt;
&lt;li&gt;准备用于出版物的开源软件包和通知。&lt;/li&gt;
&lt;li&gt;从开源合规性角度签署产品发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;开源计划办公室和合规官的代表（Representative of the Open Source Program Office or Compliance Officer）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推动开源合规活动。&lt;/li&gt;
&lt;li&gt;协调源代码扫描和审核。&lt;/li&gt;
&lt;li&gt;参与工程审查和分发准备评估。&lt;/li&gt;
&lt;li&gt;协调开源软件包和通知的发布。&lt;/li&gt;
&lt;li&gt;为培训工作和改进合规计划做出贡献。&lt;/li&gt;
&lt;li&gt;有助于促进开源软件的自动化和发现。&lt;/li&gt;
&lt;li&gt;从开源合规性角度签署产品发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了 OSRB 的成员之外，实现开源合规是一项跨学科活动，涉及到组织内的各个部门和个人，如图 4 所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3unxxety2j31ik0li0v5.jpg&#34; alt=&#34;图 4. 开源项目办公室组成&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面是对支持团队帮助 OSRB 确保开源合规性的核心职责的描述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建/获取确保合规性所需的新工具&lt;/li&gt;
&lt;li&gt;为合规计划使用的工具和自动化基础设施提供支持和维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;企业发展（Cooperate Development）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求/监督开源合规性尽职调查在合并或收购之前完成&lt;/li&gt;
&lt;li&gt;从外包开发中心接收源代码时确保合规性记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文档（Documentation）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在产品文档中包含开源许可证信息和通知（notice）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;开源执行委员会（Open Source Executive Committee）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;审查并批准在开源许可下发布专有源代码的提议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;软件采购（Software Procurement）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权第三方软件提供商在许可或购买的软件组件中披露开源&lt;/li&gt;
&lt;li&gt;协助引入包含（或不包含）开源软件的第三方软件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源代码审查&#34;&gt;开源代码审查&lt;/h2&gt;
&lt;p&gt;开源合规性工作的核心是识别开源代码及其各自的许可证，以便组织可以满足适用的许可证义务。开源策略和流程指导此核心活动。合规性政策和流程管理开源软件的使用、贡献、审核和发布的各个方面。如果我们采用下图 5 所示的基本流程并对其进行扩展，我们将考虑端到端的合规流程。下图显示了这样一个流程，它具有源自多个源的源代码输入。源代码经过一系列步骤，流程的最终输出包括书面报价、通知列表（版权、归属、许可证），以及为履行许可义务而发布的源代码包。&lt;/p&gt;
&lt;p&gt;图 5 提供了端到端合规流程的详细示例，其中包括软件组件被 OSRB 批准在构建系统中与软件产品集成之前经历的各个步骤。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3unjbh5amj31900fuac7.jpg&#34; alt=&#34;图 5. 端到端开源合规流程示例&#34;&gt;&lt;/p&gt;
&lt;p&gt;图 6 简要描述了每个步骤中发生的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3uzfnj1lzj327i0kuq71.jpg&#34; alt=&#34;图 6. 开源合规代码确认步骤详解&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;开源代码溯源&#34;&gt;开源代码溯源&lt;/h2&gt;
&lt;p&gt;让您的软件提供商参与开源合规中至关重要。软件提供商必须披露其可交付成果中包含的开源代码，并提供包括适用源代码在内的所有通知（notice）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3upmcjnl5j31di0ncdjd.jpg&#34; alt=&#34;图 7. 多源开发模型&#34;&gt;&lt;/p&gt;
&lt;p&gt;图 7 描绘了多源开发模型和传入源代码的各种源组合。在此模型下，产品或软件堆栈可以包含专有软件、第三方商业和第三方开源软件的任意组合。例如，除了第三方专有源代码之外，软件组件 A 可以包括专有源代码，而软件组件 B 除了可以包含来自开源项目的源代码之外还可以包括专有源代码。&lt;/p&gt;
&lt;p&gt;当今的公司处于必须更新其供应链（软件采购）程序以解决获取和使用开源软件的状态。通常会有供应链人员参与将软件从供应商转移到贵公司。他们可以通过两种主要方式支持开源合规性活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求第三方软件提供商披露他们在其可交付成果中使用的任何开源，以及&lt;/li&gt;
&lt;li&gt;协助许可与开源软件包捆绑在一起或与之集成的第三方软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此领域的推荐做法是强制第三方软件提供商披露其产品中使用的所有开源组件，并声明他们计划如何满足适用的开源许可证义务。如果第三方软件包含开源，供应链必须确保在初始入口后满足开源许可证义务——您作为提供开源产品或服务的分销商将承担这些义务和责任。&lt;/p&gt;
&lt;h2 id=&#34;提供便捷的法务支持&#34;&gt;提供便捷的法务支持&lt;/h2&gt;
&lt;p&gt;大多数组织都会创建开源合规性计划并建立核心团队以确保合规性。大多数公司往往会会遇到开源法律支持的瓶颈，因为您公司里可能有成百上千的使用和集成开源代码的开发人员，而很少有法务人员提供所需的法律支持。扩展开源法律支持需要一些&lt;code&gt;开箱即用&lt;/code&gt;的思考，但可以借助以下实用方法实现。&lt;/p&gt;
&lt;h3 id=&#34;许可证手册license-playbooks&#34;&gt;许可证手册（License Playbooks）&lt;/h3&gt;
&lt;p&gt;提供面向软件开发人员的易于阅读和摘要的开源许可证摘要。提供有关这些许可证的易于理解的信息，例如许可证授予、限制、义务、专利影响等。使用开源软件许可证手册可以大量减少发送给法律顾问的基本问题的数量，并为开发人员提供了对常见查询的即时指导、信息和答案。&lt;/p&gt;
&lt;h3 id=&#34;许可证兼容性矩阵license-compatibility-matrix&#34;&gt;许可证兼容性矩阵（License Compatibility Matrix）&lt;/h3&gt;
&lt;p&gt;许可证兼容性是指确定某个许可证是否与另一个许可证兼容。GPL 兼容性是指确定某个许可证是否与 GPL 条款兼容。当合并源自不兼容许可下软件组件的源代码时，开发团队经常会遇到许可兼容性问题。当开发团队将不同许可证下的代码组合在一起时，可以参考许可证兼容性矩阵来验证在单个软件组件中是否存在加入源代码的许可冲突。如果开发团队使用的许可证源不在矩阵中，则可以后续获得法律顾问的建议。&lt;/p&gt;
&lt;h3 id=&#34;许可证分类&#34;&gt;许可证分类&lt;/h3&gt;
&lt;p&gt;为了减少开源法律顾问收到的问题数量并增加许可和合规流程教育，一些公司选择在几个类别下对其产品中最常用的许可进行分类。图11显示了许可证分类系统的一个简单示例，其中大多数使用的开源许可证分为四类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g3ur9rfeqaj310c0gkdip.jpg&#34; alt=&#34;图 8. 开源许可证分类（仅供参考）&#34;&gt;&lt;/p&gt;
&lt;p&gt;上述许可证类别是对许可证进行分类的简单方法，使开发人员在根据这些许可证集成代码时更容易了解操作过程。下面这个例子是开发人员想要使用在以下许可下的开源软件包的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License A - Action：尽管用，没有什么问题&lt;/li&gt;
&lt;li&gt;License E - Action：获得工程经理的批准&lt;/li&gt;
&lt;li&gt;License I - Action：获得法律顾问的批准&lt;/li&gt;
&lt;li&gt;License M - Action：根据政策禁止适用该 License&lt;/li&gt;
&lt;li&gt;其他 - Action：向经理询问行动方案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关此话题的进一步阅读，我们建议阅读**&lt;a href=&#34;https://www2.thelinuxfoundation.org/pub-practical-advice-to-scale-legal&#34;&gt;扩展开源法律支持的实用建议&lt;/a&gt;**。本文探讨了法律顾问在确保开源合规方面的作用，并为法律顾问提供了可以为软件开发团队提供的实用建议。这些实用建议将使软件开发人员能够做出与开源许可相关的日常决策，而无需再去找负责每个问题的法律顾问。&lt;/p&gt;
&lt;h2 id=&#34;开源合规流程中的检查点及发布清单&#34;&gt;开源合规流程中的检查点及发布清单&lt;/h2&gt;
&lt;p&gt;有必要将合规性实践纳入开发流程，以确保开源合规工作的成功。您可以通过多种方式实现这一目标。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;每个内部版本的合规性&lt;/strong&gt;：更新流程管理，以确保在产品开发周期中尽早包含开源合规性活动，以使组织能够满足其发布时间表。遵循此模型，未来版本的增量合规性也变得简单明了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新供应链程序&lt;/strong&gt;：定制供应链的供应商选择程序，以确保在对供应商及其可交付成果进行尽职调查（Due Diligence）时考虑开源合规性要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行验证&lt;/strong&gt;：使用验证步骤确保在发生发行外部版本之前满足所有合规性要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;培训员工&lt;/strong&gt;：为所有员工提供开源合规培训。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;采用 SPDX 报告许可证信息&lt;/strong&gt;：以 SDPX 格式提供许可证信息，以尽量减少任何可能的错误，并标准化报告信息的方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPDX&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://spdx.org/&#34;&gt;SPDX®&lt;/a&gt;（Software Package Data Exchange®）是用于传达软件物料清单信息（包括组件、许可证、版权和安全参考）的开放标准。&lt;/p&gt;
&lt;p&gt;SPDX 通过为公司和社区提供共享格式来共享软件许可、版权和安全参考的重要数据，从而简化和改进合规性，从而减少冗余工作。&lt;/p&gt;
&lt;p&gt;SPDX 规范由 SPDX 工作组开发，该工作组由 Linux 基金会托管。基层工作包括来自 20 多个组织的代表——软件、系统和工具供应商、基金会和系统集成商——都致力于为软件包数据交换格式创建标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;开发和部署清单&#34;&gt;开发和部署清单&lt;/h3&gt;
&lt;p&gt;清单很有用，可确保执行合规性任务的一致性和完整性。强烈建议根据员工职责建立合规里程碑清单和目标清单。&lt;/p&gt;
&lt;p&gt;清单的示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批准将传入代码集成到产品的源代码存储库之前的核对表&lt;/li&gt;
&lt;li&gt;确保履行义务的清单&lt;/li&gt;
&lt;li&gt;开发人员的清单&lt;/li&gt;
&lt;li&gt;工程经理的清单&lt;/li&gt;
&lt;li&gt;合规人员清单&lt;/li&gt;
&lt;li&gt;开源法律人员的清单&lt;/li&gt;
&lt;li&gt;软件采购人员清单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了说明这一点，我们提供了一个示例清单，展示了在组织发布源代码包之前必须检查的各种任务，以履行在交付产品中包含的开源代码的许可义务：&lt;/p&gt;
&lt;p&gt;预发行清单（Pre-Distribution Checklist）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证引入开源软件包的修改是否已记录，并作为更改日志的一部分包含在开源发行说明中。&lt;/li&gt;
&lt;li&gt;确保每个修改后的源代码文件都包含版权声明，免责声明和通用“更改日志”（Changelog）条目的附加条目。&lt;/li&gt;
&lt;li&gt;确认源代码包的所有内容均已由工程团队审核并由 OSRB 确认。&lt;/li&gt;
&lt;li&gt;确保在非公司标准 Linux 计算机上编译开源软件包。此步骤的目标是确保您要发布的开源软件包在通用最终用户系统上进行编译。&lt;/li&gt;
&lt;li&gt;将产品手册更新为：
&lt;ul&gt;
&lt;li&gt;提及该产品包含开源软件。&lt;/li&gt;
&lt;li&gt;包括与产品中包含的不同开源软件相对应的所有许可证的列表。&lt;/li&gt;
&lt;li&gt;提供适当的版权和归属通知。&lt;/li&gt;
&lt;li&gt;通过网页下载或通过产品手册中提供的指定地址通过电子邮件或邮寄方式与贵公司联系，说明如何访问开源软件包的代码（书面提供）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行语言检查（linguistic review）以确保源代码中没有任何不适当的注释。
&lt;ul&gt;
&lt;li&gt;注意：有些公司忘记进行语言检查，当代码发布时，他们会因源代码中留下的不当注释而尴尬。执行语言检查的另一个重要原因是确保源代码和注释不涉及未来的产品代码名称或功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确保现有许可、版权和归属通知不受干扰。
&lt;ul&gt;
&lt;li&gt;验证要分发的源代码是否与产品一起使用的二进制文件对应，源代码构建到与产品一起分发的同一个库中，并且源代码分发中包含适当的指令（除时间/日期戳外派生的二进制文件通常是相同的）。&lt;/li&gt;
&lt;li&gt;验证包是否遵循开源策略中定义的链接关系和交互。&lt;/li&gt;
&lt;li&gt;确保在开源软件包的根文件夹中的 LICENSE 文件中包含许可证文本的副本（如果尚未存在）。&lt;/li&gt;
&lt;li&gt;如果源代码包需要特殊的构建工具或环境设置，则将详细信息包含在 README 文件或类似文件中。
这些清单，特别是在实现自动化并与业务和开发流程集成时，可以提醒您必须完成的所有事项，以确保合规性并减少发生错误的几率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最后&#34;&gt;最后&lt;/h2&gt;
&lt;p&gt;本书中的最后还推广了波 OpenChain 项目，该项目提供了一组自我认证的选项，由该领域的利益相关者创建，用于合规性规范，该规范允许给定的组织进行自我测试并声明其遵守特定的合规级别。您可以访问 &lt;strong&gt;&lt;a href=&#34;https://www.openchainproject.org/conformance&#34;&gt;https://www.openchainproject.org/conformance&lt;/a&gt;&lt;/strong&gt; 了解更多信息。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>TheNewStack 云原生 Devops 报告解读</title>
      <link>https://jimmysong.io/blog/cloud-native-devops-book/</link>
      <pubDate>Sun, 02 Jun 2019 18:13:19 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-native-devops-book/</guid>
      <description>
        
        
        &lt;p&gt;本书的主旨是：如果没有成熟的 DevOps 实践，云原生是玩转不起来的。DevOps 已经不是什么新鲜的话题，但到底什么是 &amp;ldquo;Cloud Native DevOps” 及如何实践 Cloud Native DevOps，这正是本书要探讨的内容。&lt;/p&gt;
&lt;p&gt;DevOps 正在经历一次转型，从自动化构建到声明式基础设施、微服务和 Serverless。大部分人对云原生存在误解，以为&lt;code&gt;云原生&lt;/code&gt;就是&lt;code&gt;运行在云上&lt;/code&gt;，其实云原生更偏向于一种理念，即应用的定义及架构方式，而不是将应用运行在哪里。而云上的 DevOps 与传统的 DevOps 有什么区别，开发者和运维人员在云原生时代如何转型？也许本书会给你答案。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书是由 &lt;a href=&#34;https://thenewstack.com&#34;&gt;TheNewStack&lt;/a&gt; 出品的免费电子书，可以在 &lt;a href=&#34;https://thenewstack.io/ebooks/devops/cloud-native-devops-2019/&#34;&gt;TheNewStack 网站&lt;/a&gt; 上获取本书的电子版，同时推荐 &lt;a href=&#34;https://thenewstack.io/ebooks&#34;&gt;TheNewStack 的电子书系列&lt;/a&gt;，囊括了容器、微服务、Kubernetes、云原生诸多主题，可以作为企业决策的参考读物。&lt;/p&gt;
&lt;p&gt;本书是 TheNewStack 编辑集结 DevOps 领域的专家在各种大会上的发言、演讲，有很多观点引用，并结合了一些调查问卷数据展示了一幅云原生 DevOps 的趋势与全景图，下文中我会找一些代表性的观点和图表来说明。&lt;/p&gt;
&lt;p&gt;下面是本书目录，一共分为三大部分：构建、部署和管理，其中前两个部分还给出了参考书目、示例研究等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;a.jpg&#34; alt=&#34;云原生 DevOps 目录&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;谁适合读这本书&#34;&gt;谁适合读这本书&lt;/h2&gt;
&lt;p&gt;IT 经理、CIO、团队领导者，希望规划自己公司或团队的云原生化 DevOps 的实践路径以面对大规模场景。&lt;/p&gt;
&lt;h2 id=&#34;云原生化的-devops&#34;&gt;云原生化的 DevOps&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;云原生是对业务价值和团队功能的重构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云原生化的 DevOps 在应用的管理上与原始的 DevOps 最大的区别就是——使用 YAML 文件配置的声明式基础设施（Declarative infrastructure）与应用程序的代码本身放在同一个存储库中，这些 &lt;code&gt;代码&lt;/code&gt; 将由开发团队来维护，而运维团队的职能将转变为基础设施的构建者，服务安全性、健壮性、可见性及耐用性的守护者。&lt;/p&gt;
&lt;p&gt;AWS 的 Serverless 布道师 Chris Munns 早已甚至预测到 2025 年非云供应商的运维人员将不复存在，虽然听上去有点危言耸听，但这也是为传统 IT 运维人员的职业生涯敲响的警钟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;b.jpg&#34; alt=&#34;云原生 DevOps 高亮部分&#34;&gt;&lt;/p&gt;
&lt;p&gt;开发接手了原来传统运维的一些职责，如配置和发布，减少了每次发布的成本，而运维的职责向管理整个系统的复杂性转变，例如转变为 SRE（Site Reliability Engineer）。&lt;/p&gt;
&lt;h2 id=&#34;工作流自动化的价值&#34;&gt;工作流自动化的价值&lt;/h2&gt;
&lt;p&gt;DevOps 的原始教义：DevOps 不是一种工具或流程，而是一种重视整个组织的持续沟通、协作、集成和自动化的实践。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;c.jpg&#34; alt=&#34;工作流自动化的五个案例&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据自动化的驱动力及持续时间的长短，将 Workflow Automation 划分为五个类别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务流程自动化&lt;/li&gt;
&lt;li&gt;分布式系统通信&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;编排&lt;/li&gt;
&lt;li&gt;决策自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运维需要做出的转变&#34;&gt;运维需要做出的转变&lt;/h2&gt;
&lt;p&gt;Damon Edwards 提出于运维需要面对的四个灾难（&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%90%AF%E7%A4%BA%E5%BD%95%E4%B8%AD%E7%9A%84%E5%9B%9B%E9%AA%91%E5%A3%AB&#34;&gt;圣经启示录中的四骑士&lt;/a&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Silos（孤岛）&lt;/li&gt;
&lt;li&gt;Ticket queues（无尽的低效的工单）&lt;/li&gt;
&lt;li&gt;Toil（干脏活累活的辛勤）&lt;/li&gt;
&lt;li&gt;Low trust（低信任度）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要向云原生 DevOps 转变就要克服以上几个问题。&lt;/p&gt;
&lt;h2 id=&#34;devops-领域的扩展&#34;&gt;DevOps 领域的扩展&lt;/h2&gt;
&lt;p&gt;本书第三章中提到 DevOps 的领域扩展到 Security 和 Networking。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了维持合规的编程语言&lt;/li&gt;
&lt;li&gt;容器镜像扫描&lt;/li&gt;
&lt;li&gt;基于策略的网络安全&lt;/li&gt;
&lt;li&gt;金丝雀测试&lt;/li&gt;
&lt;li&gt;运行时的威胁检测&lt;/li&gt;
&lt;li&gt;日志分析&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>开源社区贡献者协议CLA介绍</title>
      <link>https://jimmysong.io/blog/open-source-cla/</link>
      <pubDate>Sat, 20 Apr 2019 15:16:09 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/open-source-cla/</guid>
      <description>
        
        
        &lt;p&gt;很多从事开源人可能会注意到有些开源项目要求贡献者在提交 PR 前首先签署 CLA，只有签署了 CLA 之后 PR 才可以合并。&lt;/p&gt;
&lt;h3 id=&#34;开源贡献协议简介&#34;&gt;开源贡献协议简介&lt;/h3&gt;
&lt;p&gt;下面列举了开源贡献协议的一些简介：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源贡献协议有 CLA（Contributor License Agreement）和 &lt;a href=&#34;https://developercertificate.org/&#34;&gt;DCO&lt;/a&gt;（Developer Certificate of Origin）两种；&lt;/li&gt;
&lt;li&gt;DCO 由 Linux Foundation 提出，是固定的简短条文（只有4条），旨在让贡献者保证遵守开源 license；&lt;/li&gt;
&lt;li&gt;CLA 是对开源 license 的法律性质补充，由法务制定；&lt;/li&gt;
&lt;li&gt;CLA 可以自定义，不论是个人还是企业级签署的时候都需要提供详细的信息，如姓名、公司、邮箱、地址、电话等；&lt;/li&gt;
&lt;li&gt;下表中对比了 CLA 和 DCO 的特性，推荐大型跨公司开源项目使用 CLA，利用项目更加正规和长久发展；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开源社区的贡献者协议一般分为两种 CLA 和 DCO，这两种协议各有优缺点如下。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;CLA&lt;/th&gt;
&lt;th&gt;DCO&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;社区属性&lt;/td&gt;
&lt;td&gt;弱&lt;/td&gt;
&lt;td&gt;强&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;签署方式&lt;/td&gt;
&lt;td&gt;一次性&lt;/td&gt;
&lt;td&gt;每次提交时在 commit 信息里追加 &lt;code&gt;Signed-off-by: email&lt;/code&gt; 信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;法律责任&lt;/td&gt;
&lt;td&gt;明确法律义务&lt;/td&gt;
&lt;td&gt;无声明，用来限制提交者遵守开源 license&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否可自定义&lt;/td&gt;
&lt;td&gt;公司或组织可自行定义&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用案例&lt;/td&gt;
&lt;td&gt;Google、Pivotal、CNCF、阿里巴巴、Apache SkyWalking&lt;/td&gt;
&lt;td&gt;GitLab、Chef、Harbor、TiKV&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;公司属性&lt;/td&gt;
&lt;td&gt;强，可以签署公司级别的 CLA&lt;/td&gt;
&lt;td&gt;弱&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;什么是-cla&#34;&gt;什么是 CLA&lt;/h3&gt;
&lt;p&gt;CLA 是 Contributor License Agreement 的缩写，CLA 可以看做是对开源软件本身采用的开源协议的补充。一般分为公司级和个人级别的 CLA，所谓公司级即某公司代表签署 CLA 后即可代表该公司所有员工都签署了该 CLA，而个人级别 CLA 只代表个人认可该 CLA。&lt;/p&gt;
&lt;h4 id=&#34;cla-包含哪些内容&#34;&gt;CLA 包含哪些内容？&lt;/h4&gt;
&lt;p&gt;因为 CLA 是每个公司或组织自定义的，在细节上可能稍有不同，不过总体都包含以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于签署该 CLA 的主体和贡献的定义；&lt;/li&gt;
&lt;li&gt;授予著作权给拥有该软件知识产权的公司或组织；&lt;/li&gt;
&lt;li&gt;专利许可的授予；&lt;/li&gt;
&lt;li&gt;签署者保证依法有权授予上述许可；&lt;/li&gt;
&lt;li&gt;签署者确保所有的贡献内容均为原创作品；&lt;/li&gt;
&lt;li&gt;签署者为贡献内容支持的免责描述；&lt;/li&gt;
&lt;li&gt;说明贡献者提交非原创作品应该采用的方式；&lt;/li&gt;
&lt;li&gt;保证在获悉任何方面不准确的事实或情况之时通知签约方；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于主体在中国的企业，还加入了一些本地化的内容，如 &lt;a href=&#34;https://github.com/aliyun/cla&#34;&gt;Alibaba Open Source Individual CLA&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因为 CLA 分别为个人级和公司级，所以对于不同名义签署时需要提供不同的信息。签署个人级 CLA 的时候需要提供个人信息（姓名、地址、邮箱、电话等），签署公司级 CLA 还需要提供公司信息（名称、地址、联系电话、邮箱、传真等）；&lt;/p&gt;
&lt;h3 id=&#34;什么是-dco&#34;&gt;什么是 DCO&lt;/h3&gt;
&lt;p&gt;DCO 是 Developer Certificate of Origin 的缩写，由 Linux Foundation 于 2004 年制定。DCO 最大的优点是可以减轻开发者贡献的阻碍，不用阅读冗长的 CLA 法律条文，只需要在提交的时候签署邮件地址即可。Chef 和 GitLab 已分别于 2016 年和 2017 年从 CLA 迁移到 DCO。&lt;/p&gt;
&lt;p&gt;如 CNCF 的 Sandbox 项目 &lt;a href=&#34;https://github.com/goharbor/harbor&#34;&gt;harbor&lt;/a&gt; 就是使用的 DCO。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developercertificate.org/&#34;&gt;DCO&lt;/a&gt; 目前是 1.1 版本，内容很简单，开源项目的贡献者只需要保证以下四点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该贡献全部或部分由我创建，我有权根据文件中指明的开源许可提交；要么&lt;/li&gt;
&lt;li&gt;该贡献是基于以前的工作，这些工作属于适当的开源许可，无论这些工作全部还是部分由我完成，我有权根据相同的开源许可证（除非我被允许根据不同的许可证提交）提交修改后的工作；要么&lt;/li&gt;
&lt;li&gt;该贡献由1、2、或 3 证明的其他人直接提供给我，而我没有对其进行修改。&lt;/li&gt;
&lt;li&gt;我理解并同意该项目和贡献是公开的，并且该贡献的记录（包括我随之提交的所有个人信息，包括我的签字）将无限期保留，并且可以与本项目或涉及的开源许可证保持一致或者重新分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cla-vs-dco&#34;&gt;CLA vs DCO&lt;/h3&gt;
&lt;p&gt;Kubernetes 社区中有过讨论将 Kubernetes 贡献者从 CLA 迁移到 DCO，最后TOC 成员 Tim Hockin觉得签署 CLA 对于贡献者只需要痛苦一次，每次提交都签署DCO是持续的痛苦，因此最后还是坚持使用CLA。参考&lt;a href=&#34;https://github.com/kubernetes/community/issues/2649&#34;&gt;Move from CLA to DCO #2649&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2018年 CNCF 对其托管的项目的 Maintainer 做了调研，从反馈来看，Maintainer 对 DCO 是存在痛点的，并希望 CNCF 投入更多的 PR 和市场力量来对抗具有全职 PR/marketing 的初创公司。&lt;/p&gt;
&lt;p&gt;如果为了更注重个人贡献者，考虑社区属性，可以使用 DCO，这样对于开源项目的管理者来说就不用指定复杂的 CLA 了，但是对于大型项目由众多合作方的项目，建议使用 CLA。&lt;/p&gt;
&lt;h3 id=&#34;阿里巴巴-cla&#34;&gt;阿里巴巴 CLA&lt;/h3&gt;
&lt;p&gt;阿里巴巴只提供个人级别的 CLA 签署：&lt;a href=&#34;https://cla-assistant.io/alibaba/weex&#34;&gt;https://cla-assistant.io/alibaba/weex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CLA 内容见：&lt;a href=&#34;https://github.com/aliyun/cla&#34;&gt;https://github.com/aliyun/cla&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阿里巴巴的 CLA 是参照 &lt;a href=&#34;https://www.apache.org/licenses/icla.pdf&#34;&gt;Apache CLA&lt;/a&gt; 撰写的，最后加上两条补充，协议受中国杭州的法院监管，同时提供双语版本，如中引文版本有冲突以英文版本为准。&lt;/p&gt;
&lt;h3 id=&#34;google-cla&#34;&gt;Google CLA&lt;/h3&gt;
&lt;p&gt;Google 的 CLA 也是仿照 Apache CLA 撰写的，Google 开源的一些列项目如 Istio、TensorFlow、Knative 等都是需要签署 &lt;a href=&#34;https://cla.developers.google.com/clas&#34;&gt;Google CLA&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要贡献者授予Google以及其他软件用户贡献内容的版权以及内容背后的专利权。贡献者不要因为版权和专利权诉讼Google和其他软件用户。&lt;/li&gt;
&lt;li&gt;明确贡献的原创性。不要因为贡献者的不适当抄袭行为，导致Google和其他软件使用者被诉讼。&lt;/li&gt;
&lt;li&gt;签署公司级别 CLA 的人要能代表所在公司的所有贡献者。&lt;/li&gt;
&lt;li&gt;维护贡献者列表的不一定是跟签署该协议的是同一个人，签名者可以指定一个人来管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://docs.google.com/document/d/1FJkYaEZbKwmoEWrsbzDxdI-ytlEg73OsOcMXaF8Z01E/&#34;&gt;解读：Google Software Grant and Corporate Contributor License Agreement&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;pivotal-cla&#34;&gt;Pivotal CLA&lt;/h3&gt;
&lt;p&gt;Pivotal 的 CLA 也是仿照 Apache CLA 撰写的，唯一增加了一点是协议受美国加州法律监管。签署个人级协议的时候需要提供姓名、邮箱、邮寄地址（可选）、国家（可选）、电话（可选），签署公司级别的 CLA 的条款了还增加了一条对于签名者必须有权利代表整个公司，要求的信息也更加详细，包括姓名、邮箱、邮寄地址、国家、电话、公司名称、 GitHub 组织、头衔等。参与贡献 Pivotal 主导的 Spring 社区和 CloudFoundry 里的项目需要签署 &lt;a href=&#34;https://cla.pivotal.io/&#34;&gt;Pivotal CLA&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;建议&#34;&gt;建议&lt;/h3&gt;
&lt;p&gt;如果你的开源项目可能会有公司间合作或者要贡献给基金会，为了防范法律风险，请直接使用 CLA；如果更看重社区内的合作，可以使用 DCO。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.apache.org/licenses/icla.pdf&#34;&gt;Individual Contributor License Agreement (“Agreement”) V2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/community/issues/2649&#34;&gt;Move from CLA to DCO #2649 - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opensource.google.com/docs/cla/policy/&#34;&gt;Alphabet CLA Policy and Rationale - opensource.google.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.apache.org/licenses/cla-corporate.txt&#34;&gt;The Apache Software Foundation Software Grant and Corporate Contributor License Agreement (&amp;ldquo;Agreement&amp;rdquo;) - apache.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aliyun/cla&#34;&gt;Alibaba Open Source Individual CLA - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>如何将一个开源项目加入CNCF？</title>
      <link>https://jimmysong.io/blog/contribute-project-to-cncf/</link>
      <pubDate>Mon, 15 Apr 2019 19:37:02 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/contribute-project-to-cncf/</guid>
      <description>
        
        
        &lt;p&gt;前段时间看了一篇文章&lt;a href=&#34;https://www.infoq.cn/article/l0bCXU3SojYXpz-AhP3v&#34;&gt;为什么中国没有 Apache 基金会这样的组织？&lt;/a&gt;，二叉树视频中采访了&lt;a href=&#34;http://www.kaiyuanshe.cn/&#34;&gt;开源社&lt;/a&gt;的理事长老刘，他的一番话也让我很受启发，在关注和参与 CNCF 基金会这几年来我也有很多收获，有一点就是了解到了一个开源社区（基金会）治理的规则。&lt;/p&gt;
&lt;p&gt;虽然 CNCF 没有 Apache、GNOME、FreeBSD 历史那么悠久，但是它成立的短短几年内就成功的运作了 &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; 这样的超大型开源项目，一定有其可取之处。今天我就来给大家分享下CNCF基金会的开源项目治理规则和组织架构，还有如何将一个开源项目加入到 CNCF。&lt;/p&gt;
&lt;p&gt;CNCF 根据“&lt;a href=&#34;https://www.jianshu.com/p/a305fa93580b&#34;&gt;鸿沟理论&lt;/a&gt;”将其托管的项目分成三个成熟阶段，并设置了项目晋级到更高阶段的标准。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;a href=&#34;https://www.jianshu.com/p/a305fa93580b&#34;&gt;鸿沟理论&lt;/a&gt;”是由Geoffrey A. Moore提出的高科技产品的市场营销理论。新技术要想跨越鸿沟，必须能够实现一些跨越式的发展，&lt;strong&gt;拥有某一些以前不可能实现的功能&lt;/strong&gt;，具有某种内在价值并能够&lt;strong&gt;赢得非技术人员的&lt;/strong&gt;青睐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/cncf-graduation.jpg&#34; alt=&#34;CNCF 项目的成熟度分类&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图片来自 &lt;a href=&#34;https://www.cncf.io/projects/&#34;&gt;https://www.cncf.io/projects/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;开源项目如何加入-cncf&#34;&gt;开源项目如何加入 CNCF&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;开源项目所支持的公司成为 CNCF 会员&lt;/li&gt;
&lt;li&gt;开源项目满足 CNCF 的要求（见后文）&lt;/li&gt;
&lt;li&gt;在 GitHub 上提交&lt;a href=&#34;https://github.com/cncf/toc/issues/113&#34;&gt;proposal&lt;/a&gt;（GitHub Issue）列举项目介绍、现状、目标、license、用户与社区等&lt;/li&gt;
&lt;li&gt;由 Chris Aniszczyk 安排该项目在某个TOC双月会议上介绍给 TOC 成员&lt;/li&gt;
&lt;li&gt;1.TOC 会将开源项目指定到某个 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/cloud-native/cncf-sig.html&#34;&gt;SIG&lt;/a&gt; 中&lt;/li&gt;
&lt;li&gt;项目获得两个TOC成员的赞成可进入&lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/sandbox.md&#34;&gt;sandbox&lt;/a&gt;（也可以直接获得2/3多数TOC 投票进入Incubating状态）&lt;/li&gt;
&lt;li&gt;知识产权转移给 CNCF&lt;/li&gt;
&lt;li&gt;CNCF 安排博客撰写、PR等&lt;/li&gt;
&lt;li&gt;每年一次评审，晋升到 incubating需要2/3的 TOC 成员投票赞成；至少3家用户成功在生产上使用；通过TOC的尽职调查；贡献者数量健康稳定&lt;/li&gt;
&lt;li&gt;Sandbox 中的项目没有时效性质，可能永远都无法进入incubating 状态，被CNCF谨慎宣传&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cncf-开源项目成熟度演进&#34;&gt;CNCF 开源项目成熟度演进&lt;/h3&gt;
&lt;p&gt;CNCF 的开源项目遵循如下图所示的成熟度演进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/cncf-graduation-criteria-v2.jpg&#34; alt=&#34;CNCF项目成熟度级别&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于上图的一些说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加入Sandbox只需要2个TOC成员赞成&lt;/li&gt;
&lt;li&gt;成熟一点的项目可以直接进入incubating阶段，但是 CNCF 会控制不同阶段的项目比例&lt;/li&gt;
&lt;li&gt;晋级到Incubating或Graduated 需要至少2/3的 TOC成员（6名或以上）投票赞成&lt;/li&gt;
&lt;li&gt;每年将评审一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前处于沙箱、孵化中、已毕业项目的数量比例为5：16：13，详见 &lt;a href=&#34;https://cncf.io/projects&#34;&gt;https://cncf.io/projects&lt;/a&gt;。其中沙箱（sandbox）项目因为其处于早期阶段并没有直接在上面的链接页面中列出，而是一个单独的 &lt;a href=&#34;https://www.cncf.io/sandbox-projects/&#34;&gt;Sandbox&lt;/a&gt; 页面，因为 CNCF 为 sandbox 阶段的项目会谨慎背书。&lt;/p&gt;
&lt;h3 id=&#34;纳入cncf开源版图的项目需要符合其对云原生的定义&#34;&gt;纳入CNCF开源版图的项目需要符合其对云原生的定义&lt;/h3&gt;
&lt;p&gt;CNCF 中托管的开源项目要符合云原生定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。&lt;strong&gt;云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/li&gt;
&lt;li&gt;云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;项目运作流程&#34;&gt;项目运作流程&lt;/h3&gt;
&lt;p&gt;下图演示了开源项目加入 CNCF 后的整个运作流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/006tNc79ly1g1yz80ag98j31cs0n2gr7.jpg&#34; alt=&#34;CNCF中的项目运作&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;开源项目如何加入-cncf-1&#34;&gt;开源项目如何加入 CNCF&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;开源项目所支持的公司成为 CNCF 会员&lt;/li&gt;
&lt;li&gt;开源项目满足 CNCF 的要求（见后文）&lt;/li&gt;
&lt;li&gt;在 GitHub 上提交&lt;a href=&#34;https://github.com/cncf/toc/issues/113&#34;&gt;proposal&lt;/a&gt;（GitHub Issue）列举项目介绍、现状、目标、license、用户与社区等&lt;/li&gt;
&lt;li&gt;由 Chris Aniszczyk 安排该项目在某个TOC双月会议上介绍给 TOC 成员&lt;/li&gt;
&lt;li&gt;1.TOC 会将开源项目指定到某个 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/cloud-native/cncf-sig.html&#34;&gt;SIG&lt;/a&gt; 中&lt;/li&gt;
&lt;li&gt;项目获得两个TOC成员的赞成可进入&lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/sandbox.md&#34;&gt;sandbox&lt;/a&gt;（也可以直接获得2/3多数TOC 投票进入Incubating状态）&lt;/li&gt;
&lt;li&gt;知识产权转移给 CNCF&lt;/li&gt;
&lt;li&gt;CNCF 安排博客撰写、PR等&lt;/li&gt;
&lt;li&gt;每年一次评审，晋升到 incubating需要2/3的 TOC 成员投票赞成；至少3家用户成功在生产上使用；通过TOC的尽职调查；贡献者数量健康稳定&lt;/li&gt;
&lt;li&gt;Sandbox 中的项目没有时效性质，可能永远都无法进入incubating 状态，被CNCF谨慎宣传&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;开源项目加入-cncf-的最低要求sandbox&#34;&gt;开源项目加入 CNCF 的最低要求（Sandbox）&lt;/h3&gt;
&lt;p&gt;一个开源项目要想加入 CNCF 必须满足以下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目名称必须在 CNCF 中唯一&lt;/li&gt;
&lt;li&gt;项目描述（用途、价值、起源、历史）&lt;/li&gt;
&lt;li&gt;与 CNCF 章程一致的声明&lt;/li&gt;
&lt;li&gt;来自 TOC 的 sponsor（项目辅导）&lt;/li&gt;
&lt;li&gt;license（默认为 Apache 2）&lt;/li&gt;
&lt;li&gt;源码控制（Github）&lt;/li&gt;
&lt;li&gt;网站（英文）&lt;/li&gt;
&lt;li&gt;外部依赖（包括 license）&lt;/li&gt;
&lt;li&gt;成熟度模型评估（参考 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/cloud-native/cncf-sandbox-criteria.html&#34;&gt;开源项目加入CNCF Sandbox的要求&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;创始 committer（贡献项目的时长）&lt;/li&gt;
&lt;li&gt;基础设施需求（CI/CNCF集群）&lt;/li&gt;
&lt;li&gt;沟通渠道（slack、irc、邮件列表）&lt;/li&gt;
&lt;li&gt;issue 追踪（GitHub）&lt;/li&gt;
&lt;li&gt;发布方法和机制&lt;/li&gt;
&lt;li&gt;社交媒体账号&lt;/li&gt;
&lt;li&gt;社区规模和已有的赞助商&lt;/li&gt;
&lt;li&gt;svg 格式的项目 logo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;由-sandbox-升级到-incubating-的要求&#34;&gt;由 Sandbox 升级到 Incubating 的要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过 TOC 的&lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/due-diligence-guidelines.md&#34;&gt;尽职调查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;至少有 3 个独立的终端用户在在生产上使用该项目：一般在项目的官网列举实际用户&lt;/li&gt;
&lt;li&gt;足够健康数量的贡献者：项目的 GitHub 上有明确的 committer 权限划分、职责说明及成员列表，TOC 将根据项目大小来确认多少committer才算健康&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;展示项目在持续进行、良好的发布节奏、贡献频率十分重要&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;由incubating升级到graduated的要求&#34;&gt;由Incubating升级到Graduated的要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;满足 Sandbox 和 Incubating 的所有要求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;至少有来自两个组织的贡献者&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;明确定义的项目治理及 committer 身份、权限管理&lt;/li&gt;
&lt;li&gt;接受 CNCF 的&lt;a href=&#34;https://github.com/cncf/foundation/blob/master/code-of-conduct.md&#34;&gt;行为准则&lt;/a&gt;，参考&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/en/projects/486&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;获得CII 最佳实践徽章&lt;/li&gt;
&lt;li&gt;在项目主库或项目官网有公开的采用者的 logo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考归档的 Review：&lt;a href=&#34;https://github.com/cncf/toc/tree/master/reviews&#34;&gt;https://github.com/cncf/toc/tree/master/reviews&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/a305fa93580b&#34;&gt;鸿沟理论 - jianshu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/graduation_criteria.adoc&#34;&gt;CNCF Graduation Criteria v1.2 - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/l0bCXU3SojYXpz-AhP3v&#34;&gt;为什么中国没有 Apache 基金会这样的组织？ - infoq.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaiyuanshe.cn/&#34;&gt;开源社首页 - kaiyuanshe.cn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>CNCF年度报告解读（2018年）</title>
      <link>https://jimmysong.io/blog/cncf-annual-report-2018-review/</link>
      <pubDate>Wed, 13 Feb 2019 17:23:01 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cncf-annual-report-2018-review/</guid>
      <description>
        
        
        &lt;p&gt;2019年2月初，CNCF 发布了2018年的年度报告，这是 CNCF 继2017年度报告之后，第二次发布年度报告，2017年度的报告只有区区14页，今年的报告长度增长了一倍达31页。下面我将带大家一起来深度解读下这份2018年的年度报告，一窥 CNCF 过去一年里在推广云原生的道路上取得的进展。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：本文最后附上了2017年和2018年度的报告下载地址。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;cncf-年度报告涵盖的范围&#34;&gt;CNCF 年度报告涵盖的范围&lt;/h2&gt;
&lt;p&gt;在解读 CNCF 的2018年度报告之前，我们先简单回顾下&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2018/03/CNCF-Annual-Report-2017.pdf&#34;&gt;2017年度的报告&lt;/a&gt;，因为2017年度报告是 CNCF 的首份年度报告，这样我们也能更好的了解 CNCF 的来龙去脉。&lt;/p&gt;
&lt;p&gt;2017年度报告已经基本确定了 CNCF 每个年度报告所包含的主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自我定位&lt;/li&gt;
&lt;li&gt;会员参与情况&lt;/li&gt;
&lt;li&gt;终端用户社区&lt;/li&gt;
&lt;li&gt;项目更新&lt;/li&gt;
&lt;li&gt;会议和活动&lt;/li&gt;
&lt;li&gt;社区&lt;/li&gt;
&lt;li&gt;培训和认证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上为 CNCF 主要的市场活动，2017年时其成立的第二年，经过一年时间的筹备，这一年里各种市场活动都已经开始确立并有声有色的开展了起来，包括 KubeCon、成员单位、终端用户都已经发展起来了，以后历年里只是对其不断的发展和完善。&lt;/p&gt;
&lt;p&gt;2018年度报告中又新增了一些主题，这些主题是从2018年开始开展的，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;项目更新与满意度调查&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;给 CNCF 项目的维护者发调查问卷询问满意度&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/about/charter/&#34;&gt;CNCF charter&lt;/a&gt; 的修订（2018年11月）&lt;/li&gt;
&lt;li&gt;项目更新与发布&lt;/li&gt;
&lt;li&gt;项目服务与支援&lt;/li&gt;
&lt;li&gt;专项活动、文档、网站与博客支持&lt;/li&gt;
&lt;li&gt;本地化、IT 支持和培训&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;社区拓展&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;社区奖项&lt;/li&gt;
&lt;li&gt;CNCF Meetup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/people/ambassadors/&#34;&gt;CNCF Ambassador 计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;卡通吉祥物 Phippy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生态系统工具&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devstats.cncf.io/&#34;&gt;devstats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://landscape.cncf.io&#34;&gt;CNCF Landscape&lt;/a&gt; 和路线图&lt;/li&gt;
&lt;li&gt;项目 logo 物料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试一致性项目&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;国际化&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;进入中国&lt;/li&gt;
&lt;li&gt;本地化网站&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详情请大家从本文最后的链接下载报告原文以查看详情。&lt;/p&gt;
&lt;h2 id=&#34;cncf-的定位&#34;&gt;CNCF 的定位&lt;/h2&gt;
&lt;p&gt;CNCF（云原生计算基金会）成立于2015年12月11日，每届年度报告的开篇都会阐明 CNCF 的定位，CNCF 的自我定位在2018年发生了一次变动，这也说明基金会是跟随市场形势而动，其定位不是一成不变的，其中的变化暗含着 CNCF 战略的转变。&lt;/p&gt;
&lt;h3 id=&#34;cncf-的2017年度定位&#34;&gt;CNCF 的2017年度定位&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2018/03/CNCF-Annual-Report-2017.pdf&#34;&gt;2017年度报告&lt;/a&gt;中是这样正式介绍自己的：&lt;/p&gt;
&lt;p&gt;The Cloud Native Computing Foundation (CNCF) is an open source software foundation dedicated to making cloud-native computing universal and sustainable. Cloud-native computing uses an &lt;strong&gt;open source&lt;/strong&gt; software stack to deploy applications as &lt;strong&gt;microservices&lt;/strong&gt;, packaging each part into its own &lt;strong&gt;container&lt;/strong&gt;, and &lt;strong&gt;dynamically orchestrating&lt;/strong&gt; those containers to optimize resource utilization. Cloud-native technologies enable software developers to build great products faster.&lt;/p&gt;
&lt;p&gt;We are a community of open source projects, including Kubernetes, Envoy and Prometheus. Kubernetes and other CNCF projects are some of the highest velocity projects in the history of open source.&lt;/p&gt;
&lt;p&gt;可以看到介绍中的重点技术是：微服务、容器、动态编排。而在2018年 CNCF 对自己进行了重新的定位和包装，增加了新的内容。&lt;/p&gt;
&lt;h3 id=&#34;cncf-的2018年度定位&#34;&gt;CNCF 的2018年度定位&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2019/02/CNCF_Annual_Report_2018_FInal.pdf&#34;&gt;2018年度报告&lt;/a&gt;中 CNCF 对自己的定位是：&lt;/p&gt;
&lt;p&gt;The Cloud Native Computing Foundation (CNCF) is an open source software foundation dedicated to making cloud native computing universal and sustainable. Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. &lt;strong&gt;Containers&lt;/strong&gt;, &lt;strong&gt;service meshes&lt;/strong&gt;, &lt;strong&gt;microservices&lt;/strong&gt;, &lt;strong&gt;immutable infrastructure&lt;/strong&gt;, and &lt;strong&gt;declarative APIs&lt;/strong&gt; exemplify this approach.&lt;/p&gt;
&lt;p&gt;We are a community of open source projects, including Kubernetes, Prometheus, Envoy, and many others. Kubernetes and other CNCF projects are some of the highest velocity projects in the history of open source.&lt;/p&gt;
&lt;p&gt;我们可以看到其表述中更加注重多云环境，主要涉及的技术比2017年多了Service Mesh（服务网格）、不可变基础设施和声明式 API。&lt;/p&gt;
&lt;h2 id=&#34;数读报告&#34;&gt;数读报告&lt;/h2&gt;
&lt;p&gt;CNCF 年度报告的原文主要是汇报了 CNCF 一年来的所展开的活动和进展，下表示根据 CNCF 2017和2018年度报告整理了关键数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Year&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;2016&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;2017&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;2018&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Members&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;td&gt;365&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Contributors&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;18687&lt;/td&gt;
&lt;td&gt;47358&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CNCF Meetup Members&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;53925&lt;/td&gt;
&lt;td&gt;89112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;End User Community Members&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Conference and Events Participants&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;4085&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Certified Kubernetes Partners&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Certified Kubernetes Service Providers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CNCF Ambassador&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Kubernetes Training Partners&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：其中2016年是 CNCF 正式开始工作的第一年，大部分数据因为活动尚未开展而缺失。&lt;/p&gt;
&lt;p&gt;从上表中我们可以看到 CNCF 诞生三年来基金会成员规模、托管项目的贡献者、参加 CNCF 名义的 Meetup 的人数取得较大范围的增长，尤其是2018年，因为基金会成员的爆发式增长（+130%），CNCF 开始给成员分级，会员级别、费用和权益也在 &lt;a href=&#34;https://www.cncf.io/about/join/&#34;&gt;CNCF 官网&lt;/a&gt;上明码标价。&lt;/p&gt;
&lt;p&gt;2018年 CNCF 组织的 KubeCon&amp;amp;CloudNativeCon 开始固定每年在西欧、北美和中国举行，且2018年是首次进入中国；原来的 Certified Kubernetes Partners 也取消了变成了 Certified Kubernetes Service Providers；CNCF 的 &lt;a href=&#34;https://www.cncf.io/people/ambassadors/&#34;&gt;Ambassador&lt;/a&gt; 计划拥有了来自15个国家的65位 Ambassador，在世界各地为云原生布道；CNCF 还首次引入了 Kubernetes Training Partner。&lt;/p&gt;
&lt;p&gt;2018 年 CNCF 又推出了一系列新的认证（CKA 为2017年推出），包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/certification/cka/&#34;&gt;CKA&lt;/a&gt;（Kubernetes 管理员认证）：这是 CNCF 最早制定的一个证书，顾名思义，通过该认证证明用户具有管理 Kubernetes 集群的技能、知识和能力。虽然该证书在2017年即推出，但2018年对考试做了更细致的指导。KCSP 要求企业必须有至少三人通过 CKA。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/certification/ckad/&#34;&gt;CKAD&lt;/a&gt;（Kubernetes 应用开发者认证）：该认证证明用户可以为 Kubernetes 设计、构建、配置和发布云原生应用程序。经过认证的 Kubernetes Application Developer 可以定义应用程序资源并使用核心原语来构建、监控 Kubernetes 中可伸缩应用程序和排除故障。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/certification/kcsp/&#34;&gt;KCSP&lt;/a&gt;（Kubernetes 服务提供商认证）：截止本文发稿时共有74家企业通过该认证。该认证的主体是企业或组织，通过 KCSP 的企业意味着可以为其他组织提供 Kubernetes 支持、咨询、专业服务和培训。通过该认证的中国企业有：灵雀云、阿里云、博云、才云、DaoCloud、EasyStack、易建科技、精灵云、谐云科技、华为、时速云、星号科技、睿云智合、沃趣、元鼎科技、ZTE。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/certification/software-conformance/&#34;&gt;Certified Kubernetes Conformance&lt;/a&gt;（Kubernetes 一致性认证）：通过该认证的 Kubernetes 提供商所提供的服务，意味着其可以保证 Kubernetes API 的可移植性及跨云的互操作性；及时更新到最新的 Kubernetes 版本；是否一致是可以通过&lt;a href=&#34;https://github.com/cncf/k8s-conformance/blob/master/instructions.md&#34;&gt;运行开源脚本&lt;/a&gt;验证的。截止本文发稿通过该认证的中国企业的发行版有：灵雀云（ACE、ACP、AKS）、才云 Compass、华为 FusionStage、酷栈科技 CStack MiaoYun、Daocloud Enterprise、新智认知新氦云、浪潮云、京东 TIG、网易云、七牛云、同方有云、睿云智合 WiseCloud；通过认证的中国企业托管平台有：阿里云、百度云、博云、EasyStack、易建科技、谐云科技、华为云 CCE、腾讯云 TKE、时速云、ZTE TECS。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是 CNCF 提供的主要证书，一般通过 KCSP 的企业都要先通过 Kubernetes 一致性认证，而通过 Kubernetes 一致性认证不一定要同时通过 KCSP，所以我们看到很多通过 Kubernetes 一致性认证的企业就不一定会通过 KCSP，因为 KCSP 的要求更多，至少要成为 CNCF 会员才可以。&lt;/p&gt;
&lt;p&gt;下面将就 CNCF 会员、托管项目的成熟度等级划分、Kubernetes 服务提供商认证和 Kubernetes 提供商认证做详细说明。&lt;/p&gt;
&lt;h2 id=&#34;cncf-会员&#34;&gt;CNCF 会员&lt;/h2&gt;
&lt;p&gt;2018年 CNCF 的会员单位经历了爆发式增长，从170家增长到365家。CNCF 制定了如下的会员等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Silver Member&lt;/li&gt;
&lt;li&gt;Gold Member&lt;/li&gt;
&lt;li&gt;Platinum Member&lt;/li&gt;
&lt;li&gt;Academic/Nonprofit Member&lt;/li&gt;
&lt;li&gt;End User Member&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同等级的会员需要交纳的年费与权益不同，详情请见 &lt;a href=&#34;https://www.cncf.io/about/join/&#34;&gt;https://www.cncf.io/about/join/&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;成为-cncf-会员的好处&#34;&gt;成为 CNCF 会员的好处&lt;/h3&gt;
&lt;p&gt;成为 CNCF 会员包括但不限于如下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将可以参与 CNCF 市场委员会、CNCF Webinar、在 CNCF 和 Kubernetes 官网发表博客、博客被 KubeWeekly 收录、&lt;/li&gt;
&lt;li&gt;获得 KubeCon + CloudNativeCon 的门票折扣和参与大会的市场活动&lt;/li&gt;
&lt;li&gt;对于 Kubernetes 系列认证如 KCSP、入选 TOC 也要求必须成为 CNCF 会员才可以获得&lt;/li&gt;
&lt;li&gt;End User Case Study&lt;/li&gt;
&lt;li&gt;有机会加入 Ambassador 计划&lt;/li&gt;
&lt;li&gt;在社区里具有更多的话语权，例如 CNCF 在全球范围内组织的活动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目成熟度等级&#34;&gt;项目成熟度等级&lt;/h2&gt;
&lt;p&gt;自2015年底 CNCF 创立之初 Kubernetes 成为其首个托管项目以来，截止到2018年底，CNCF 已经托管了&lt;a href=&#34;https://www.cncf.io/projects/&#34;&gt;32个开源项目&lt;/a&gt;，随着越来越多的项目加入到 CNCF，为了更好的管理这些项目，为这些项目划分不同的成熟度等级就成了迫在眉睫的事情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cncf-graduation-criteria-v2.jpg&#34; alt=&#34;CNCF 项目成熟度级别&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据《Crossing the Chasm》一书中的技术采用生命周期理论，CNCF 将其托管的项目划分为三个等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graduated：对应于早期成熟项目。截止到本文发稿时只有 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;、&lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt; 和 &lt;a href=&#34;https://coredns.io/&#34;&gt;https://coredns.io/&lt;/a&gt; 毕业。&lt;/li&gt;
&lt;li&gt;Incubating：对应于早期采用者阶段。截止到本文发稿时有 16 个项目。&lt;/li&gt;
&lt;li&gt;Sandbox：对应于创新者阶段。截止到本文发稿时有 12 个项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看 CNCF 托管的项目列表请访问：https://www.cncf.io/projects/&lt;/p&gt;
&lt;p&gt;CNCF 通过为项目设置成熟度水平是来建议企业应该采用哪些项目。CNCF 中托管的项目通过向 CNCF 的技术监督委员会（TOC）展示其可持续发展性来提高其成熟度：项目的采用率，健康的变化率，有来自多个组织的提交者，采用了 &lt;a href=&#34;https://github.com/cncf/foundation/blob/master/code-of-conduct-languages/zh.md&#34;&gt;CNCF 行为准则&lt;/a&gt;，实现并维护了核心基础设施倡议（Core Infrastructure Initiative）&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/&#34;&gt;最佳实践证书&lt;/a&gt;。详细信息在 &lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/graduation_criteria.adoc&#34;&gt;毕业标准v1.1&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;certified-kubernetes-service-provider&#34;&gt;Certified Kubernetes Service Provider&lt;/h2&gt;
&lt;p&gt;通过 &lt;a href=&#34;https://www.cncf.io/certification/kcsp/&#34;&gt;KCSP&lt;/a&gt; 意味着企业具有为其他企业或组织提供 Kubernetes 支持、咨询、专业服务和培训的资质。 2018年又有46家企业通过了&lt;a href=&#34;https://www.cncf.io/certification/kcsp/&#34;&gt;KCSP&lt;/a&gt;，通过该认证的企业累计达到76家。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何通过 KCSP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要想通过 KCSP 必须满足以下三个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三名或更多工程师通过认证Kubernetes管理员（CKA）考试。&lt;em&gt;（CKAD考试不计入此要求）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;支持企业最终用户的商业模式，包括为客户提供驻场工程师&lt;/li&gt;
&lt;li&gt;成为 CNCF 会员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 KCSP 有如下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企业的 logo 会出现在 &lt;a href=&#34;https://kubernetes.io/partners/&#34;&gt;Kubernetes Partners&lt;/a&gt; 页面&lt;/li&gt;
&lt;li&gt;参加与云原生项目 leader、TOC 成员、CNCF Governing Board 的月度会议&lt;/li&gt;
&lt;li&gt;向终端用户的 leader 寻求帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为有如上这些好处，为了获得 Kubernetes 项目实施的资质，同时保持与基金会至今的交流，Kubernetes 厂商对该认证都趋之若鹜。&lt;/p&gt;
&lt;h2 id=&#34;certified-kubernetes-offering&#34;&gt;Certified Kubernetes offering&lt;/h2&gt;
&lt;p&gt;通过 KCSP 认证只代表企业有为他人实施 Kubernetes 项目的资质，而企业自身可能并不对外提供 Kubernetes 平台或服务，这些企业可能只是系统集成商或 ISV，这时候 CNCF 又推出了 Kubernetes 提供商认证。&lt;/p&gt;
&lt;p&gt;Kubernetes 认证的提供商包括 Kubernetes 发行版、托管平台和安装器，通过认证的工具或平台将允许使用 Kubernetes 认证的 Logo，并保证 Kubernetes 一致性认证。&lt;/p&gt;
&lt;h2 id=&#34;展望-2019&#34;&gt;展望 2019&lt;/h2&gt;
&lt;p&gt;2018年 Kubernetes 成为 CNCF 孵化的首个毕业项目，根据 CNCF 打造的项目成熟度模型，Prometheus、Envoy、CoreDNS 相继毕业，CNCF 的眼光早已不再仅盯着 Kubernetes 了，&lt;a href=&#34;https://landscape.cncf.io&#34;&gt;CNCF Landscape&lt;/a&gt; 几乎包揽了所有云计算相关开源项目。可以说 CNCF 早已超出了 Kubernetes 的范畴，而是旨在一个建立在 Kubernetes 为底层资源调度和应用生命周期管理之上的生态系统，CNCF 中还演进出了如 Service Mesh 和 Serverless 之类的分支。&lt;/p&gt;
&lt;p&gt;从 CNCF 2017和2018年度的变化来看，其中已经去掉了”dynamically orchestrating“的字眼，也就意味着 Kubernetes 在容器编排领域已经胜出，进而强调多云环境，同时 CNCF 推动的 Kubernetes 一致性认证也受到众多云厂商的支持，这也意味着 Kubernetes 将成为多云环境 API 一致性的保证。&lt;/p&gt;
&lt;p&gt;CNCF 在2019年的战略将更聚焦于开发者社区，协助尤其是来自终端用户的开发者成为项目的 contributor 和 maintainer，保证终端用户的意见能够在社区里被正确地传达和并最终成功地采纳云原生。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2018/03/CNCF-Annual-Report-2017.pdf&#34;&gt;CNCF Annual Report 2017 pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2019/02/CNCF_Annual_Report_2018_FInal.pdf&#34;&gt;CNCF Annual Report 2018 pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/projects/&#34;&gt;CNCF  Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://landscape.cncf.io&#34;&gt;CNCF Landscape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/people/ambassadors/&#34;&gt;CNCF Ambassadors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/certification/kcsp/&#34;&gt;Kubernetes Certified Service Providers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>《Service Mesh 实战—基于 Linkerd 和 Kubernetes 的微服务实践》读后感</title>
      <link>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</link>
      <pubDate>Tue, 08 Jan 2019 20:50:44 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</guid>
      <description>
        
        
        &lt;p&gt;最近在回顾 Service Mesh 技术在2018年的发展，想再看看 Linkerd，正好&lt;strong&gt;杨彰显&lt;/strong&gt;的这本《Service Mesh 实战——基于 Linkerd 和 Kubernetes 的微服务实践》上市发售了，&lt;strong&gt;机械工业出版社&lt;/strong&gt;的编辑送了我一本，🙏&lt;strong&gt;杨福川&lt;/strong&gt;编辑，我看了下抽空写了点读后感，我看了下抽空写了点读后感，其实也说不上是读后感，就当是自己的一点感悟吧，就当拿此书借题发挥吧，这个知识爆炸的年代，技术发展如此迅速，可以说是 IT 人员的幸运，也是不幸！有多少写开源软件的书推出一版后能撑过三年的？如果软件红得发紫，持续迭代 N 个版本，例如 Kubernetes，最近两年以每三个月一个版本的速度迭代，之前的书早就跟不上节奏，要么就要不断推出新版，直到软件稳定后不再有大的改动。还有种可能就是软件推广和发展的不理想，无人问津，写这样软件的书就不会有再版了。&lt;/p&gt;
&lt;p&gt;拿到本书后我的第一反应就是看看这本书定稿的时候 Istio 是什么版本，Linkerd 又是什么版本。因为在这一年内两款开源软件都有较大的版本变动，如果书籍定稿的时候基于的软件版本太低，软件架构可能会有较大的变化，影响书中示例和部分章节的时效性。这也是大多技术书籍名短的症结所在，技术发展是在太快，传统的书籍出版流程往往过于繁琐和冗长，等到书籍出版后所介绍的软件都出了好几个版本。例如 Kubernetes 这种的软件，每三个月一个版本，而写一般书从策划到发行少说半年，一般也要一年的时间。&lt;/p&gt;
&lt;h2 id=&#34;关于书籍定稿时的软件版本&#34;&gt;关于书籍定稿时的软件版本&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Istio 0.8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书第一章「Service Mesh 简介」对 Service Mesh 相关开源产品介绍时提到本书定稿时 Istio 是 0.8 版本，而 Istio 在 2018年7月31日发布了 &lt;a href=&#34;https://istio.io/zh/about/notes/1.0/&#34;&gt;1.0 版本&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这本书定稿时，Istio 的最新版本是 0.8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linkerd 1.3.6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书从序言开始一直到第二章结束也没有提及写作时基于的 Linkerd 版本，我在第二章的安装步骤中看到了说明。&lt;/p&gt;
&lt;p&gt;可以看到本书写作时是基于 Linkerd 1.3.6 版本，而 Linkerd 在同年的 9月18日发布了 &lt;a href=&#34;http://www.servicemesher.com/blog/linkerd-2-0-in-general-availability/&#34;&gt;2.0 GA&lt;/a&gt;，这一版本跟 1.x 版本相比有重大变化——它还将项目从集群范围的service mesh转换为可组合的 &lt;em&gt;service sidecar&lt;/em&gt; ，旨在为开发人员和服务所有者提供在云原生环境中成功所需的关键工具。&lt;/p&gt;
&lt;h2 id=&#34;linkerd-vs-envoy&#34;&gt;Linkerd vs Envoy&lt;/h2&gt;
&lt;p&gt;Linkerd 2.0 的 service sidecar 设计使开发人员和服务所有者能够在他们的服务上运行 Linkerd，提供自动可观察性、可靠性和运行时诊断，而无需更改配置或代码。通过提供轻量级的增量路径来获得平台范围的遥测、安全性和可靠性的传统 service mesh 功能，service sidecar 方法还降低了平台所有者和系统架构师的风险。该版本还用 Rust 重写了代理部分，在延迟，吞吐量和资源消耗方面产生了数量级的改进。&lt;/p&gt;
&lt;p&gt;而 Linkerd 1.x 继承自 Twitter 开源的 Finagle 高性能 RPC，所有想要深度学习 Linkerd 1.x 还需要了解 Finagle，这就跟 Istio 将 Envoy 作为默认的数据平面一样，要想深度学习 Istio 必须了解 Envoy。&lt;/p&gt;
&lt;p&gt;二者几乎使用了完全不同的术语，假如你已经了解了 &lt;a href=&#34;http://www.servicemesher.com/envoy/&#34;&gt;Envoy&lt;/a&gt; 想要再切换到 Linkerd 上，那么就要再费很多心力来学习它的概念和原理，例如如下这些术语或配置（Linkerd 中独有的配置）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dtab（委托表）&lt;/strong&gt;：由一系列路由组成，由一系列路由规则组成，以逻辑路径为输入，然后经过路由规则做一系列转换生成具体名字。这是 Linkerd 路由机制的根本，就像 Envoy 中的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34;&gt;xDS 协议&lt;/a&gt;一样，本书的第四章「深入 Linkerd 数据访问流」专门讲解了 dtab 的实现机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dentry（委托表记录）&lt;/strong&gt;：委托表的每条路由规则称为 dentry，如 /consul =&amp;gt; /#/io.l5d.consul/dc1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namer&lt;/strong&gt;：配置 Linkerd 支持的服务发现工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namerd&lt;/strong&gt;：Linkerd 的控制平面，相当于 Istio 中的 Pilot，对接各种服务发现。当然 Linkerd 也可以直接与某个服务发现平台对接如 consul，而不使用 namerd 这个集中路由和配置管理组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interpreter&lt;/strong&gt;：interpreter 决定如何解析服务名字和客户端名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 Linkerd 也是 &lt;a href=&#34;https://www.cncf.io/projects/&#34;&gt;CNCF 中的项目&lt;/a&gt;，但它目前还处于孵化阶段，而 Envoy 的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34;&gt;xDS 协议&lt;/a&gt;已经被众多开源项目所支持，如 &lt;a href=&#34;https://istio.io/zh&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https://github.com/alipay/sofa-mesh&#34;&gt;SOFAMesh&lt;/a&gt;、&lt;a href=&#34;https://github.com/nginxinc/nginmesh&#34;&gt;NginxMesh&lt;/a&gt; 等，且 Envoy 已经从 CNCF 中毕业，以后可能成为 Service Mesh 领域的标准协议，Linkerd 的生存状况堪忧。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书中所有示例都提供了虚拟机的快速上手环境，只要使用 Vagrant 即可创建虚拟机和应用，所以在本书的&lt;a href=&#34;https://github.com/yangzhares/linkerd-in-action&#34;&gt;示例代码&lt;/a&gt;有大量的 Vagrantfile。&lt;/p&gt;
&lt;p&gt;本书第三部分「实战篇」花了大量篇幅（本书一半的页数）来讲解如何使用 Linkerd 和 Kubernetes 来管理微服务，可以参考我2017年8月1日写的这篇&lt;a href=&#34;https://jimmysong.io/posts/linkerd-user-guide/&#34;&gt;微服务管理框架service mesh——Linkerd安装试用笔记&lt;/a&gt;，那时候还是基于 Linkerd 1.1.2，还有 &lt;a href=&#34;https://github.com/linkerd/linkerd-examples/&#34;&gt;Linkerd 官方示例&lt;/a&gt;，这些示例基本都不怎么更新了。&lt;/p&gt;
&lt;p&gt;因为该书定稿时所基于的 Linkerd 版本距离本书发售时的 Linkerd 已经落后一个大版本（最新版本是 &lt;a href=&#34;https://blog.linkerd.io/2018/12/06/announcing-linkerd-2-1/&#34;&gt;Linkerd 2.1&lt;/a&gt;），所以读者一定要注意这一点，老实说我只花了两个夜晚快速过了一下本书，无法对本书内容给出具体评论，所以本书是否是你所需要的就要你自己去思考了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 的数据平面 Envoy Proxy 配置详解</title>
      <link>https://jimmysong.io/blog/envoy-proxy-config-deep-dive/</link>
      <pubDate>Mon, 07 Jan 2019 16:11:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/envoy-proxy-config-deep-dive/</guid>
      <description>
        
        
        &lt;p&gt;Envoy 是 Istio Service Mesh 中默认的 Sidecar，Istio 在 Enovy 的基础上按照 Envoy 的 xDS 协议扩展了其控制平面，在讲到 Envoy xDS 协议之前还需要我们先熟悉下 Envoy 的基本术语。下面列举了 Envoy 里的基本术语及其数据结构解析，关于 Envoy 的详细介绍请参考 &lt;a href=&#34;http://www.servicemesher.com/envoy/&#34;&gt;Envoy 官方文档&lt;/a&gt;，至于 Envoy 在 Service Mesh（不仅限于 Istio） 中是如何作为转发代理工作的请参考网易云刘超的这篇&lt;a href=&#34;https://www.cnblogs.com/163yun/p/8962278.html&#34;&gt;深入解读 Service Mesh 背后的技术细节 &lt;/a&gt;以及&lt;a href=&#34;https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持&lt;/a&gt;，本文引用其中的一些观点，详细内容不再赘述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/U587b3a8535474a2abcbe93fa069341c0A.png&#34; alt=&#34;Envoy proxy 架构图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本术语&#34;&gt;基本术语&lt;/h2&gt;
&lt;p&gt;下面是您应该了解的 Enovy 里的基本术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Downstream（下游）&lt;/strong&gt;：下游主机连接到 Envoy，发送请求并接收响应，即发送请求的主机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Upstream（上游）&lt;/strong&gt;：上游主机接收来自 Envoy 的连接和请求，并返回响应，即接受请求的主机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Listener（监听器）&lt;/strong&gt;：监听器是命名网地址（例如，端口、unix domain socket 等)，下游客户端可以连接这些监听器。Envoy 暴露一个或者多个监听器给下游主机连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cluster（集群）&lt;/strong&gt;：集群是指 Envoy 连接的一组逻辑相同的上游主机。Envoy 通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/service_discovery.html#arch-overview-service-discovery&#34;&gt;服务发现&lt;/a&gt;来发现集群的成员。可以选择通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/health_checking.html#arch-overview-health-checking&#34;&gt;主动健康检查&lt;/a&gt;来确定集群成员的健康状态。Envoy 通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/load_balancing.html#arch-overview-load-balancing&#34;&gt;负载均衡策略&lt;/a&gt;决定将请求路由到集群的哪个成员。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我将在本文的后半部分解释以上术语与 Kubernetes、Istio 中概念之间的联系。&lt;/p&gt;
&lt;h2 id=&#34;关于-xds-的版本&#34;&gt;关于 xDS 的版本&lt;/h2&gt;
&lt;p&gt;有一点需要大家注意，就是 Envoy 的 API 有 v1 和 v2 两个版本，从 Envoy 1.5.0 起 v2 API 就已经生产就绪了，为了能够让用户顺利的向 v2 版本的额 API 过度，Envoy 启动的时候设置了一个 &lt;code&gt;--v2-config-only&lt;/code&gt; 的标志，Enovy 不同版本对 v1/v2 API 的支持详情请参考 &lt;a href=&#34;https://groups.google.com/forum/#!topic/envoy-announce/Lb1QZcSclGQ&#34;&gt;Envoy v1 配置废弃时间表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Envoy 的作者 Matt Klein 在 &lt;a href=&#34;http://www.servicemesher.com/blog/the-universal-data-plane-api/&#34;&gt;Service Mesh 中的通用数据平面 API 设计&lt;/a&gt;这篇文章中说明了 Envoy API v1 的历史及其缺点，还有 v2 的引入。v2 API 是 v1 的演进，而不是革命，它是 v1 功能的超集。&lt;/p&gt;
&lt;p&gt;在 Istio 1.0 及以上版本中使用的是 &lt;strong&gt;Envoy 1.8.0-dev&lt;/strong&gt; 版本，其支持 v2 的 API，同时在 Envoy 作为 Sidecar proxy 启动的使用使用了例如下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ /usr/local/bin/envoy -c /etc/istio/proxy/envoy-rev0.json --restart-epoch &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; --drain-time-s &lt;span class=&#34;m&#34;&gt;45&lt;/span&gt; --parent-shutdown-time-s &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; --service-cluster ratings --service-node sidecar~172.33.14.2~ratings-v1-8558d4458d-ld8x9.default~default.svc.cluster.local --max-obj-name-len &lt;span class=&#34;m&#34;&gt;189&lt;/span&gt; --allow-unknown-fields -l warn --v2-config-only
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面是都 Bookinfo 示例中的 rating pod 中的 sidecar 启动的分析，可以看到其中指定了 &lt;code&gt;--v2-config-only&lt;/code&gt;，表明 Istio 1.0+ 只支持 xDS v2 的 API。&lt;/p&gt;
&lt;h2 id=&#34;istio-sidecar-proxy-配置&#34;&gt;Istio sidecar proxy 配置&lt;/h2&gt;
&lt;p&gt;假如您使用 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt; 部署了 Kubernetes 集群并开启了 &lt;a href=&#34;https://istio.io/zh&#34;&gt;Istio Service Mesh&lt;/a&gt;，再部署 &lt;a href=&#34;https://istio.io/zh/docs/examples/bookinfo/&#34;&gt;bookinfo 示例&lt;/a&gt;，那么在 &lt;code&gt;default&lt;/code&gt; 命名空间下有一个名字类似于 &lt;code&gt;ratings-v1-7c9949d479-dwkr4&lt;/code&gt; 的 Pod，使用下面的命令查看该 Pod 的 Envoy sidecar 的全量配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n default &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; ratings-v1-7c9949d479-dwkr4 -c istio-proxy curl http://localhost:15000/config_dump &amp;gt; dump-rating.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将 Envoy 的运行时配置 dump 出来之后你将看到一个长 6000 余行的配置文件。关于该配置文件的介绍请参考 &lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/overview/v2_overview.html&#34;&gt;Envoy v2 API 概览&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Istio 会在为 Service Mesh 中的每个 Pod 注入 Sidecar 的时候同时为 Envoy 注入 Bootstrap 配置，其余的配置是通过 Pilot 下发的，注意整个数据平面即 Service Mesh 中的 Envoy 的动态配置应该是相同的。您也可以使用上面的命令检查其他 sidecar 的 Envoy 配置是否跟最上面的那个相同。&lt;/p&gt;
&lt;p&gt;使用下面的命令检查 Service Mesh 中的所有有 Sidecar 注入的 Pod 中的 proxy 配置是否同步。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istioctl proxy-status
PROXY                                                 CDS        LDS        EDS               RDS          PILOT                            VERSION
details-v1-876bf485f-sx7df.default                    SYNCED     SYNCED     SYNCED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;100%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;     SYNCED       istio-pilot-5bf6d97f79-6lz4x     1.0.0
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://istio.io/zh/docs/reference/commands/istioctl/&#34;&gt;istioctl&lt;/a&gt; 这个命令行工具就像 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/guide/kubectl-cheatsheet.html&#34;&gt;kubectl&lt;/a&gt; 一样有很多神器的魔法，通过它可以高效的管理 Istio 和 debug。&lt;/p&gt;
&lt;h2 id=&#34;envoy-proxy-配置解析&#34;&gt;Envoy proxy 配置解析&lt;/h2&gt;
&lt;p&gt;Istio envoy sidecar proxy 配置中包含以下四个部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bootstrap&lt;/strong&gt;：Envoy proxy 启动时候加载的静态配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listeners&lt;/strong&gt;：监听器配置，使用 LDS 下发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clusters&lt;/strong&gt;：集群配置，静态配置中包括 xds-grpc 和 zipkin 地址，动态配置使用  CDS 下发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;routes&lt;/strong&gt;：路由配置，静态配置中包括了本地监听的服务的集群信息，其中引用了 cluster，动态配置使用 RDS 下发。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个部分中都包含静态配置与动态配置，其中 bootstrap 配置又是在集群启动的时候通过 sidecar 启动参数注入的，配置文件在 &lt;code&gt;/etc/istio/proxy/envoy-rev0.json&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;由于 bootstrap 中的配置是来自 Envoy 启动时加载的静态文件，主要配置了节点信息、tracing、admin 和统计信息收集等信息，这不是本文的重点，大家可以自行研究。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/bootstrap/v2/bootstrap.proto.html#envoy-api-msg-config-bootstrap-v2-bootstrap&#34;&gt;Bootstrap&lt;/a&gt; 是 Envoy 中配置的根本来源，&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/bootstrap/v2/bootstrap.proto.html#envoy-api-msg-config-bootstrap-v2-bootstrap&#34;&gt;Bootstrap&lt;/a&gt; 消息中有一个关键的概念，就是静态和动态资源的之间的区别。例如 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/lds.proto.html#envoy-api-msg-listener&#34;&gt;Listener&lt;/a&gt; 或 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cds.proto.html#envoy-api-msg-cluster&#34;&gt;Cluster&lt;/a&gt; 这些资源既可以从 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/bootstrap/v2/bootstrap.proto.html#envoy-api-field-config-bootstrap-v2-bootstrap-static-resources&#34;&gt;static_resources&lt;/a&gt; 静态的获得也可以从 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/bootstrap/v2/bootstrap.proto.html#envoy-api-field-config-bootstrap-v2-bootstrap-dynamic-resources&#34;&gt;dynamic_resources&lt;/a&gt; 中配置的 &lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/listeners/lds.html#config-listeners-lds&#34;&gt;LDS&lt;/a&gt; 或 &lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/cluster_manager/cds.html#config-cluster-manager-cds&#34;&gt;CDS&lt;/a&gt; 之类的 xDS 服务获取。&lt;/p&gt;
&lt;h3 id=&#34;listener&#34;&gt;Listener&lt;/h3&gt;
&lt;p&gt;Listener 顾名思义，就是监听器，监听 IP 地址和端口，然后根据策略转发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Listener 的特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个 Envoy 进程中可以有多个 Listener，Envoy 与 Listener 之间是一对多的关系。&lt;/li&gt;
&lt;li&gt;每个 Listener 中可以配置一条 filter 链表（filter_chains），Envoy 会根据 filter 顺序执行过滤。&lt;/li&gt;
&lt;li&gt;Listener 可以监听下游的端口，也可以接收来自其他 listener 的数据，形成链式处理。&lt;/li&gt;
&lt;li&gt;filter 是可扩展的。&lt;/li&gt;
&lt;li&gt;可以静态配置，也可以使用 LDS 动态配置。&lt;/li&gt;
&lt;li&gt;目前只能监听 TCP，UDP 还未支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Listener 的数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Listener 的数据结构如下，除了 &lt;code&gt;name&lt;/code&gt;、&lt;code&gt;address&lt;/code&gt; 和 &lt;code&gt;filter_chains&lt;/code&gt; 为必须配置之外，其他都为可选的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;filter_chains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;use_original_dst&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;per_connection_buffer_limit_bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;drain_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;listener_filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;transparent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;freebind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;socket_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;tcp_fast_open_queue_length&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;bugfix_reverse_write_filter_order&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是关于上述数据结构中的常用配置解析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;：该 listener 的 UUID，唯一限定名，默认60个字符，例如 &lt;code&gt;10.254.74.159_15011&lt;/code&gt;，可以使用命令参数指定长度限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;address&lt;/strong&gt;：监听的逻辑/物理地址和端口号，例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;#34;socket_address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.254.74.159&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;port_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15011&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;filter_chains&lt;/strong&gt;：这是一个列表，Envoy 中内置了一些通用的 filter，每种 filter 都有特定的数据结构，Enovy 会根据该配置顺序执行 filter。Envoy 中内置的 filter 有：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/network_filters/client_ssl_auth_filter#config-network-filters-client-ssl-auth&#34;&gt;envoy.client_ssl_auth&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/network_filters/echo_filter#config-network-filters-echo&#34;&gt;envoy.echo&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/http_conn_man/http_conn_man#config-http-conn-man&#34;&gt;enovy.http_connection_manager&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/network_filters/mongo_proxy_filter#config-network-filters-mongo-proxy&#34;&gt;envoy.mongo_proxy&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/network_filters/rate_limit_filter#config-network-filters-rate-limit&#34;&gt;envoy.rate_limit&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/network_filters/redis_proxy_filter#config-network-filters-redis-proxy&#34;&gt;enovy.redis_proxy&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/network_filters/tcp_proxy_filter#config-network-filters-tcp-proxy&#34;&gt;envoy.tcp_proxy&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/intro/arch_overview/http_filters&#34;&gt;http_filters&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.8.0/configuration/thrift_filters/thrift_filters&#34;&gt;thrift_filters&lt;/a&gt;等。这些 filter 可以单独使用也可以组合使用，还可以自定义扩展，例如使用 Istio 中的 &lt;a href=&#34;https://istio.io/zh/docs/reference/config/istio.networking.v1alpha3/#envoyfilter&#34;&gt;EnvoyFilter 配置&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;use_original_dst&lt;/strong&gt;：这是一个布尔值，如果使用 iptables 重定向连接，则代理接收的端口可能与&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/listener_filters/original_dst_filter.html&#34;&gt;原始目的地址&lt;/a&gt;的端口不一样。当此标志设置为 true 时，Listener 将重定向的连接切换到与原始目的地址关联的 Listener。如果没有与原始目的地址关联的 Listener，则连接由接收它的 Listener 处理。默认为 false。注意：该参数将被废弃，请使用&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/listener_filters/original_dst_filter.html&#34;&gt;原始目的地址&lt;/a&gt;的 Listener filter 替代。该参数的主要用途是：Envoy 通过监听 15001 端口将应用的流量截取后再由其他 Listener 处理而不是直接转发出去，详情见 &lt;a href=&#34;https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/#virtual-listener&#34;&gt;Virtual Listener&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Listener 的详细介绍请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/lds.proto#envoy-api-msg-listener&#34;&gt;Envoy v2 API reference - listener&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;route&#34;&gt;Route&lt;/h3&gt;
&lt;p&gt;我们在这里所说的路由指的是 &lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/http_routing.html&#34;&gt;HTTP 路由&lt;/a&gt;，这也使得 Envoy 可以用来处理网格边缘的流量。HTTP 路由转发是通过路由过滤器实现的。该过滤器的主要职能就是执行&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v1/route_config/route_config#config-http-conn-man-route-table&#34;&gt;路由表&lt;/a&gt;中的指令。除了可以做重定向和转发，路由过滤器还需要处理重试、统计之类的任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 路由的特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前缀和精确路径匹配规则。&lt;/li&gt;
&lt;li&gt;可跨越多个上游集群进行基于&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v1/route_config/route#config-http-conn-man-route-table-route-weighted-clusters&#34;&gt;权重/百分比的路由&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;基于&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/http_routing.html#arch-overview-http-routing-priority&#34;&gt;优先级&lt;/a&gt;的路由。&lt;/li&gt;
&lt;li&gt;基于&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v1/route_config/route#config-http-conn-man-route-table-hash-policy&#34;&gt;哈希&lt;/a&gt;策略的路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Route 的数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;virtual_hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;internal_only_headers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;response_headers_to_add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;response_headers_to_remove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_headers_to_add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_headers_to_remove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;validate_clusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是关于上述数据结构中的常用配置解析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;：该名字跟 &lt;code&gt;envoy.http_connection_manager&lt;/code&gt; filter 中的 &lt;code&gt;http_filters.rds.route_config_name&lt;/code&gt; 一致，在 Istio Service Mesh 中为 Envoy 下发的配置中的 Route 是以监听的端口号作为名字，而同一个名字下面的 &lt;code&gt;virtual_hosts&lt;/code&gt; 可以有多个值（数组形式）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virtual_hosts&lt;/strong&gt;：因为 &lt;strong&gt;VirtualHosts&lt;/strong&gt; 是 Envoy 中引入的一个重要概念，我们在下文将详细说明 &lt;code&gt;virtual_hosts&lt;/code&gt; 的数据结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;validate_clusters&lt;/strong&gt;：这是一个布尔值，用来设置开启使用 cluster manager 来检测路由表引用的 cluster 是否有效。如果是路由表是通过 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#envoy-api-field-config-filter-network-http-connection-manager-v2-httpconnectionmanager-route-config&#34;&gt;route_config&lt;/a&gt; 静态配置的则该值默认设置为 true，如果是使用 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#envoy-api-field-config-filter-network-http-connection-manager-v2-httpconnectionmanager-rds&#34;&gt;rds&lt;/a&gt; 动态配置的话，则该值默认设置为 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Route 的详细介绍请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/rds.proto&#34;&gt;Envoy v2 API reference - HTTP route configuration&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;routevirtualhost&#34;&gt;route.VirtualHost&lt;/h4&gt;
&lt;p&gt;VirtualHost 即上文中 Route 配置中的 &lt;code&gt;virtual_hosts&lt;/code&gt;，VirtualHost 是路由配置中的顶级元素。每个虚拟主机都有一个逻辑名称以及一组根据传入请求的 host header 路由到它的域。这允许单个 Listener 为多个顶级域路径树提供服务。基于域选择了虚拟主机后 Envoy  就会处理路由以查看要路由到哪个上游集群或是否执行重定向。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VirtualHost 的数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是 VirtualHost 的数据结构，除了 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;domains&lt;/code&gt; 是必须配置项外，其他皆为可选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;require_tls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;virtual_clusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;rate_limits&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_headers_to_add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_headers_to_remove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;response_headers_to_add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;response_headers_to_remove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cors&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;per_filter_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;include_request_attempt_count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是关于上述数据结构中的常用配置解析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;：该 VirtualHost 的名字，一般是 FQDN 加端口，如 &lt;code&gt;details.default.svc.cluster.local:9080&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;domains&lt;/strong&gt;：这是个用来匹配 VirtualHost 的域名（host/authority header）列表，也可以使用通配符，但是通配符不能匹配空字符，除了仅使用 &lt;code&gt;*&lt;/code&gt; 作为 domains，注意列表中的值不能重复和存在交集，只要有一条 domain 被匹配上了，就会执行路由。Istio 会为该值配置所有地址解析形式，包括 IP 地址、FQDN 和短域名等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;routes&lt;/strong&gt;：针对入口流量的有序路由列表，第一个匹配上的路由将被执行。我们在下文将详细说明 route 的数据结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个实际的 VirtualHost 的例子，该配置来自 &lt;a href=&#34;https://istio.io/zh/docs/examples/bookinfo/&#34;&gt;Bookinfo 应用&lt;/a&gt;的 details 应用的 Sidecar 服务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.254.4.113&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.254.4.113:9080&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;outbound|9080||details.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_grpc_timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0s&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;decorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local:9080/*&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;per_filter_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;mixer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;forward_attributes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio://default/services/details&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.host&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.namespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;mixer_attributes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.host&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio://default/services/details&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service.namespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;destination.service&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;string_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;details.default.svc.cluster.local&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;disable_check_calls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 route.VirtualHost 的详细介绍请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-msg-route-virtualhost&#34;&gt;Envoy v2 API reference - route.VirtualHost&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;routeroute&#34;&gt;route.Route&lt;/h4&gt;
&lt;p&gt;路由既是如何匹配请求的规范，也是对下一步做什么的指示（例如，redirect、forward、rewrite等）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;route.Route 的数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是是 route.Route 的数据结构，除了 &lt;code&gt;match&lt;/code&gt; 之外其余都是可选的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;redirect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;direct_response&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;decorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;per_filter_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_headers_to_add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_headers_to_remove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;response_headers_to_add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;response_headers_to_remove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是关于上述数据结构中的常用配置解析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;match&lt;/strong&gt;：路由匹配参数。例如 URL prefix（前缀）、path（URL 的完整路径）、regex（规则表达式）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;route&lt;/strong&gt;：这里面配置路由的行为，可以是 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-field-route-route-route&#34;&gt;route&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-field-route-route-redirect&#34;&gt;redirect&lt;/a&gt; 和 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-field-route-route-direct-response&#34;&gt;direct_response&lt;/a&gt;，不过这里面没有专门的一个配置项用来配置以上三种行为，而是根据实际填充的配置项来确定的。例如在此处添加 &lt;code&gt;cluster&lt;/code&gt; 配置则暗示路由动作为”route“，表示将流量路由到该 cluster。详情请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#route-routeaction&#34;&gt;route.RouteAction&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;decorator&lt;/strong&gt;：被匹配的路由的修饰符，表示被匹配的虚拟主机和 URL。该配置里有且只有一个必须配置的项 &lt;code&gt;operation&lt;/code&gt;，例如 &lt;code&gt;details.default.svc.cluster.local:9080/*&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;per_filter_config&lt;/strong&gt;：这是一个 map 类型，&lt;code&gt;per_filter_config&lt;/code&gt; 字段可用于为 filter 提供特定路由的配置。Map 的 key 应与 filleter 名称匹配，例如用于 HTTP buffer filter 的 &lt;code&gt;envoy.buffer&lt;/code&gt;。该字段是特定于 filter 的，详情请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/http_filters#config-http-filters&#34;&gt;HTTP filter&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 route.Route 的详细介绍请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/route/route.proto#envoy-api-msg-route-route&#34;&gt;Envoy v2 API reference - route.Route&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;cluster&#34;&gt;Cluster&lt;/h3&gt;
&lt;p&gt;Cluster 是指 Envoy 连接的一组逻辑相同的上游主机。Envoy 通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/service_discovery.html&#34;&gt;服务发现&lt;/a&gt;来发现 cluster 的成员。可以选择通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/health_checking.html#arch-overview-health-checking&#34;&gt;主动健康检查&lt;/a&gt;来确定集群成员的健康状态。Envoy 通过&lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/load_balancing.html#arch-overview-load-balancing&#34;&gt;负载均衡策略&lt;/a&gt;决定将请求路由到 cluster 的哪个成员。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cluster 的特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一组逻辑上相同的主机构成一个 cluster。&lt;/li&gt;
&lt;li&gt;可以在 cluster 中定义各种负载均衡策略。&lt;/li&gt;
&lt;li&gt;新加入的 cluster 需要一个热身的过程才可以给路由引用，该过程是原子的，即在 cluster 热身之前对于 Envoy 及 Service Mesh 的其余部分来说是不可见的。&lt;/li&gt;
&lt;li&gt;可以通过多种方式来配置 cluster，例如静态类型、严格限定 DNS、逻辑 DNS、EDS 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cluster 的数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cluster 的数据结构如下，除了 &lt;code&gt;name&lt;/code&gt; 字段，其他都是可选的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;alt_stat_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;eds_cluster_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;connect_timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;per_connection_buffer_limit_bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;lb_policy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;load_assignment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;health_checks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_requests_per_connection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;circuit_breakers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;tls_context&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;common_http_protocol_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;http_protocol_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;http2_protocol_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;extension_protocol_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dns_refresh_rate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dns_lookup_family&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dns_resolvers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;outlier_detection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cleanup_interval&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;upstream_bind_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;lb_subset_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ring_hash_lb_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;original_dst_lb_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;least_request_lb_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;common_lb_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;transport_socket&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol_selection&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;upstream_connection_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;close_connections_on_host_health_failure&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;drain_connections_on_host_removal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是关于上述数据结构中的常用配置解析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;：如果你留意到作为 Sidecar 启动的 Envoy 的参数的会注意到 &lt;code&gt;--max-obj-name-len 189&lt;/code&gt;，该选项用来用来指定 cluster 的名字，例如 &lt;code&gt;inbound|9080||ratings.default.svc.cluster.local&lt;/code&gt;。该名字字符串由 &lt;code&gt;|&lt;/code&gt; 分隔成四个部分，分别是 &lt;code&gt;inbound&lt;/code&gt; 或 &lt;code&gt;outbound&lt;/code&gt; 代表入向流量或出向流量、端口号、subcluster 名称、FQDN，其中 subcluster 名称将对应于 Istio &lt;code&gt;DestinationRule&lt;/code&gt; 中配置的 &lt;code&gt;subnet&lt;/code&gt;，如果是按照多版本按比例路由的话，该值可以是版本号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;：即&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/service_discovery#arch-overview-service-discovery-types&#34;&gt;服务发现类型&lt;/a&gt;，支持的参数有 &lt;code&gt;STATIC&lt;/code&gt;（缺省值）、&lt;code&gt;STRICT_DNS&lt;/code&gt;、&lt;code&gt;LOGICAL_DNS&lt;/code&gt;、&lt;code&gt;EDS&lt;/code&gt;、&lt;code&gt;ORIGINAL_DST&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hosts&lt;/strong&gt;：这是个列表，配置负载均衡的 IP 地址和端口，只有使用了  &lt;code&gt;STATIC&lt;/code&gt;、&lt;code&gt;STRICT_DNS&lt;/code&gt;、&lt;code&gt;LOGICAL_DNS&lt;/code&gt; 服务发现类型时才需要配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eds_cluster_config&lt;/strong&gt;：如果使用 &lt;code&gt;EDS&lt;/code&gt; 做服务发现，则需要配置该项目，其中包括的配置有 &lt;code&gt;service_name&lt;/code&gt; 和 &lt;code&gt;ads&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Cluster 的详细介绍请参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cds.proto#cluster&#34;&gt;Envoy v2 API reference - cluster&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/overview/v2_overview.html&#34;&gt;Envoy v2 API 概览 - servicemesher.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/listeners/lds.html&#34;&gt;监听器发现服务（LDS）- servicemesher.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/http_conn_man/rds.html&#34;&gt;路由发现服务（RDS）- servicemesher.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/cluster_manager/cds.html&#34;&gt;集群发现服务（CDS）- servicemesher.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/istio-handbook/concepts/envoy-xds-protocol.html&#34;&gt;xDS 协议解析 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/163yun/p/8962278.html&#34;&gt;深入解读 Service Mesh 背后的技术细节 - cnblogs.com&lt;/a&gt;&lt;a href=&#34;https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>理解 Istio Service Mesh 中 Envoy Sidecar 代理的路由转发</title>
      <link>https://jimmysong.io/blog/envoy-sidecar-routing-of-istio-service-mesh-deep-dive/</link>
      <pubDate>Wed, 26 Dec 2018 18:32:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/envoy-sidecar-routing-of-istio-service-mesh-deep-dive/</guid>
      <description>
        
        
        &lt;p&gt;本文以 Istio 官方的 &lt;a href=&#34;https://preliminary.istio.io/zh/docs/examples/bookinfo&#34;&gt;bookinfo 示例&lt;/a&gt;来讲解在进入 Pod 的流量被 iptables 转交给 Envoy sidecar 后，Envoy 是如何做路由转发的，详述了 Inbound 和 Outbound 处理过程。关于流量拦截的详细分析请参考&lt;a href=&#34;https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是 Istio 官方提供的 bookinfo 的请求流程图，假设 bookinfo 应用的所有服务中没有配置 DestinationRule。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNbRwgy1fvlwjd3302j31bo0ro0x5.jpg&#34; alt=&#34;Bookinfo 示例&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面是 Istio 自身组件与 Bookinfo 示例的连接关系图，我们可以看到所有的 HTTP 连接都在 9080 端口监听。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNbRwly1fyitp0jsghj31o70u0x6p.jpg&#34; alt=&#34;Bookinfo 示例与 Istio 组件连接关系图&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以在 &lt;a href=&#34;https://drive.google.com/open?id=19ed3_tkjf6RgGboxllMdt_Ytd5_cocib&#34;&gt;Google Drive&lt;/a&gt; 上下载原图。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-注入及流量劫持步骤概述&#34;&gt;Sidecar 注入及流量劫持步骤概述&lt;/h2&gt;
&lt;p&gt;下面是从 Sidecar 注入、Pod 启动到 Sidecar proxy 拦截流量及 Envoy 处理路由的步骤概览。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Kubernetes 通过 Admission Controller 自动注入，或者用户使用 &lt;code&gt;istioctl&lt;/code&gt; 命令手动注入 sidecar 容器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 应用 YAML 配置部署应用，此时 Kubernetes API server 接收到的服务创建配置文件中已经包含了 Init 容器及 sidecar proxy。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 在 sidecar proxy 容器和应用容器启动之前，首先运行 Init 容器，Init 容器用于设置 iptables（Istio 中默认的流量拦截方式，还可以使用 BPF、IPVS 等方式） 将进入 pod 的流量劫持到 Envoy sidecar proxy。所有 TCP 流量（Envoy 目前只支持 TCP 流量）将被 sidecar 劫持，其他协议的流量将按原来的目的地请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; 启动 Pod 中的 Envoy sidecar proxy 和应用程序容器。这一步的过程请参考&lt;a href=&#34;https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/#%E9%80%9A%E8%BF%87%E7%AE%A1%E7%90%86%E6%8E%A5%E5%8F%A3%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE&#34;&gt;通过管理接口获取完整配置&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sidecar proxy 与应用容器的启动顺序问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;启动 sidecar proxy 和应用容器，究竟哪个容器先启动呢？正常情况是 Envoy Sidecar 和应用程序容器全部启动完成后再开始接收流量请求。但是我们无法预料哪个容器会先启动，那么容器启动顺序是否会对 Envoy 劫持流量有影响呢？答案是肯定的，不过分为以下两种情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况1：应用容器先启动，而 sidecar proxy 仍未就绪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种情况下，流量被 iptables 转移到 15001 端口，而 Pod 中没有监听该端口，TCP 链接就无法建立，请求失败。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况2：Sidecar 先启动，请求到达而应用程序仍未就绪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种情况下请求也肯定会失败，至于是在哪一步开始失败的，留给读者来思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：如果为 sidecar proxy 和应用程序容器添加&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/guide/configure-liveness-readiness-probes.html&#34;&gt;就绪和存活探针&lt;/a&gt;是否可以解决该问题呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; 不论是进入还是从 Pod 发出的 TCP 请求都会被 iptables 劫持，inbound 流量被劫持后经 Inbound Handler 处理后转交给应用程序容器处理，outbound 流量被 iptables 劫持后转交给 Outbound Handler 处理，并确定转发的 upstream 和 Endpoint。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Sidecar proxy 请求 Pilot 使用 xDS 协议同步 Envoy 配置，其中包括 LDS、EDS、CDS 等，不过为了保证更新的顺序，Envoy 会直接使用 ADS 向 Pilot 请求配置更新。&lt;/p&gt;
&lt;h2 id=&#34;envoy-如何处理路由转发&#34;&gt;Envoy 如何处理路由转发&lt;/h2&gt;
&lt;p&gt;下图展示的是 &lt;code&gt;productpage&lt;/code&gt; 服务请求访问 &lt;code&gt;http://reviews.default.svc.cluster.local:9080/&lt;/code&gt;，当流量进入 &lt;code&gt;reviews&lt;/code&gt; 服务内部时，&lt;code&gt;reviews&lt;/code&gt; 服务内部的 Envoy Sidecar 是如何做流量拦截和路由转发的。可以在 &lt;a href=&#34;https://drive.google.com/file/d/1n-h235tm8DnL_RqxTTA95rgGtrLkBsyr/view?usp=sharing&#34;&gt;Google Drive&lt;/a&gt; 上下载原图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-sidecar-traffic-interception-zh-20210818.png&#34; alt=&#34;Envoy sidecar 流量劫持与路由转发示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一步开始时，&lt;code&gt;productpage&lt;/code&gt; Pod 中的 Envoy sidecar 已经通过 EDS 选择出了要请求的 &lt;code&gt;reviews&lt;/code&gt; 服务的一个 Pod，知晓了其 IP 地址，发送 TCP 连接请求。&lt;/p&gt;
&lt;p&gt;Istio 官网中的 &lt;a href=&#34;https://preliminary.istio.io/zh/help/ops/traffic-management/proxy-cmd/#envoy-%E9%85%8D%E7%BD%AE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90&#34;&gt;Envoy 配置深度解析&lt;/a&gt;中是以发起 HTTP 请求的一方来详述 Envoy 做流量转发的过程，而本文中考虑的是接受 downstream 的流量的一方，它既要接收 downstream 发来的请求，自己还需要请求其他服务，例如 &lt;code&gt;reviews&lt;/code&gt; 服务中的 Pod 还需要请求 &lt;code&gt;ratings&lt;/code&gt; 服务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reviews&lt;/code&gt; 服务有三个版本，每个版本有一个实例，三个版本中的 sidecar 工作步骤类似，下文只以 &lt;code&gt;reviews-v1-cb8655c75-b97zc&lt;/code&gt; 这一个 Pod 中的 Sidecar 流量转发步骤来说明。&lt;/p&gt;
&lt;h2 id=&#34;理解-inbound-handler&#34;&gt;理解 Inbound Handler&lt;/h2&gt;
&lt;p&gt;Inbound handler 的作用是将 iptables 拦截到的 downstream 的流量转交给 localhost，与 Pod 内的应用程序容器建立连接。&lt;/p&gt;
&lt;p&gt;查看下 &lt;code&gt;reviews-v1-cb8655c75-b97zc&lt;/code&gt; pod 中的 Listener。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;istioctl pc listener reviews-v1-cb8655c75-b97zc&lt;/code&gt; 查看该 Pod 中的具有哪些 Listener。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;na&#34;&gt;ADDRESS            PORT      TYPE &lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;172.33.3.3         9080      HTTP &amp;lt;--- 接收所有 Inbound HTTP 流量，该地址即为当前 Pod 的 IP 地址&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.0.1         443       TCP  &amp;lt;--+&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.4.253       80        TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.4.253       8080      TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.109.182     443       TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.22.50       15011     TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.22.50       853       TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.79.114      443       TCP     | &lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.143.179     15011     TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.0.2         53        TCP     | 接收与 0.0.0.0_15001 监听器配对的 Outbound 非 HTTP 流量&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.22.50       443       TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.16.64       42422     TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.127.202     16686     TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.22.50       31400     TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.22.50       8060      TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.169.13      14267     TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.169.13      14268     TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.32.134      8443      TCP     |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;10.254.118.196     443       TCP  &amp;lt;--+&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15004     HTTP &amp;lt;--+&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            8080      HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15010     HTTP    | &lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            8088      HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15031     HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9090      HTTP    | &lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9411      HTTP    | 接收与 0.0.0.0_15001 配对的 Outbound HTTP 流量&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            80        HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15030     HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9080      HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9093      HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            3000      HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            8060      HTTP    |&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            9091      HTTP &amp;lt;--+    &lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;0.0.0.0            15001     TCP  &amp;lt;--- 接收所有经 iptables 拦截的 Inbound 和 Outbound 流量并转交给虚拟监听器处理&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当来自 &lt;code&gt;productpage&lt;/code&gt; 的流量抵达 &lt;code&gt;reviews&lt;/code&gt; Pod 的时候已经，downstream 必须明确知道 Pod 的 IP 地址为 &lt;code&gt;172.33.3.3&lt;/code&gt; 所以才会访问该 Pod，所以该请求是 &lt;code&gt;172.33.3.3:9080&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;virtual&lt;/code&gt; Listener&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从该 Pod 的 Listener 列表中可以看到，0.0.0.0:15001/TCP 的 Listener（其实际名字是 &lt;code&gt;virtual&lt;/code&gt;）监听所有的 Inbound 流量，下面是该 Listener 的详细配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;virtual&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15001&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.tcp_proxy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;BlackHoleCluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;stat_prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;BlackHoleCluster&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;useOriginalDst&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;UseOriginalDst&lt;/strong&gt;：从配置中可以看出 &lt;code&gt;useOriginalDst&lt;/code&gt; 配置指定为 &lt;code&gt;true&lt;/code&gt;，这是一个布尔值，缺省为 false，使用 iptables 重定向连接时，proxy 接收的端口可能与&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/listener_filters/original_dst_filter.html&#34;&gt;原始目的地址&lt;/a&gt;的端口不一样，如此处 proxy 接收的端口为 15001，而原始目的地端口为 9080。当此标志设置为 true 时，Listener 将连接重定向到与原始目的地址关联的 Listener，此处为 &lt;code&gt;172.33.3.3:9080&lt;/code&gt;。如果没有与原始目的地址关联的 Listener，则连接由接收它的 Listener 处理，即该 &lt;code&gt;virtual&lt;/code&gt; Listener，经过 &lt;code&gt;envoy.tcp_proxy&lt;/code&gt; 过滤器处理转发给 &lt;code&gt;BlackHoleCluster&lt;/code&gt;，这个 Cluster 的作用正如它的名字，当 Envoy 找不到匹配的虚拟监听器时，就会将请求发送给它，并返回 404。这个将于下文提到的 Listener 中设置 &lt;code&gt;bindToPort&lt;/code&gt; 相呼应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：该参数将被废弃，请使用&lt;a href=&#34;http://www.servicemesher.com/envoy/configuration/listener_filters/original_dst_filter.html&#34;&gt;原始目的地址&lt;/a&gt;的 Listener filter 替代。该参数的主要用途是：Envoy 通过监听 15001 端口将 iptables 拦截的流量经由其他 Listener 处理而不是直接转发出去，详情见 &lt;a href=&#34;https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/#virtual-listener&#34;&gt;Virtual Listener&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Listener 172.33.3.3_9080&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上文说到进入 Inbound handler 的流量被 &lt;code&gt;virtual&lt;/code&gt; Listener 转移到 &lt;code&gt;172.33.3.3_9080&lt;/code&gt; Listener，我们在查看下该 Listener 配置。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;istioctl pc listener reviews-v1-cb8655c75-b97zc --address 172.33.3.3 --port 9080 -o json&lt;/code&gt; 查看。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.33.3.3_9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.33.3.3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9080&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChainMatch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;transportProtocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;raw_buffer&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.http_connection_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt; 
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;route_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;validate_clusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;virtual_hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|http|9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                            &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
                                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_grpc_timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.000s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.000s&amp;#34;&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;#34;use_remote_address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;deprecatedV1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;bindToPort&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterChainMatch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;transportProtocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tls&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;tlsContext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;bindToPort&lt;/strong&gt;：注意其中有一个 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.6.0/api-v1/listeners/listeners&#34;&gt;&lt;code&gt;bindToPort&lt;/code&gt;&lt;/a&gt; 的配置，其值为 &lt;code&gt;false&lt;/code&gt;，该配置的缺省值为 &lt;code&gt;true&lt;/code&gt;，表示将 Listener 绑定到端口上，此处设置为 &lt;code&gt;false&lt;/code&gt; 则该 Listener 只能处理其他 Listener 转移过来的流量，即上文所说的 &lt;code&gt;virtual&lt;/code&gt; Listener，我们看其中的 filterChains.filters 中的 &lt;code&gt;envoy.http_connection_manager&lt;/code&gt; 配置部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;route_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;validate_clusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;virtual_hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|http|9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                            &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
                                            &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_grpc_timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.000s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.000s&amp;#34;&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该配置表示流量将转交给 Cluster &lt;code&gt;inbound|9080||reviews.default.svc.cluster.local&lt;/code&gt; 处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cluster &lt;code&gt;inbound|9080||reviews.default.svc.cluster.local&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;istioctl pc cluster reviews-v1-cb8655c75-b97zc --fqdn reviews.default.svc.cluster.local --direction inbound -o json&lt;/code&gt; 查看该 Cluster 的配置如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound|9080||reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connectTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.000s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9080&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;circuitBreakers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;thresholds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到该 Cluster 的 Endpoint 直接对应的就是 localhost，再经过 iptables 转发流量就被应用程序容器消费了。&lt;/p&gt;
&lt;h2 id=&#34;理解-outbound-handler&#34;&gt;理解 Outbound Handler&lt;/h2&gt;
&lt;p&gt;因为 &lt;code&gt;reviews&lt;/code&gt; 会向 &lt;code&gt;ratings&lt;/code&gt; 服务发送 HTTP 请求，请求的地址是：&lt;code&gt;http://ratings.default.svc.cluster.local:9080/&lt;/code&gt;，Outbound handler 的作用是将 iptables 拦截到的本地应用程序发出的流量，经由 Envoy 判断如何路由到 upstream。&lt;/p&gt;
&lt;p&gt;应用程序容器发出的请求为 Outbound 流量，被 iptables 劫持后转移给 Envoy  Outbound handler 处理，然后经过 &lt;code&gt;virtual&lt;/code&gt; Listener、&lt;code&gt;0.0.0.0_9080&lt;/code&gt; Listener，然后通过 Route 9080 找到 upstream 的 cluster，进而通过 EDS 找到 Endpoint 执行路由动作。这一部分可以参考 Istio 官网中的 &lt;a href=&#34;https://preliminary.istio.io/zh/help/ops/traffic-management/proxy-cmd/#envoy-%E9%85%8D%E7%BD%AE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90&#34;&gt;Envoy 深度配置解析&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Route 9080&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reviews&lt;/code&gt; 会请求 &lt;code&gt;ratings&lt;/code&gt; 服务，运行 &lt;code&gt;istioctl proxy-config routes reviews-v1-cb8655c75-b97zc --name 9080 -o json&lt;/code&gt; 查看 route 配置，因为 Envoy 会根据 HTTP header 中的 domains 来匹配 VirtualHost，所以下面只列举了 &lt;code&gt;ratings.default.svc.cluster.local:9080&lt;/code&gt; 这一个 VirtualHost。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default:9080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.254.234.130&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.254.234.130:9080&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.000s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;maxGrpcTimeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.000s&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;decorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratings.default.svc.cluster.local:9080/*&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;perFilterConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从该 Virtual Host 配置中可以看到将流量路由到 Cluster &lt;code&gt;outbound|9080||ratings.default.svc.cluster.local&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Endpoint &lt;code&gt;outbound|9080||ratings.default.svc.cluster.local&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Istio 1.1 以前版本不支持使用 &lt;code&gt;istioctl&lt;/code&gt; 命令直接查询 Cluster 的 Endpoint，可以使用查询 Pilot 的 debug 端点的方式折中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; reviews-v1-cb8655c75-b97zc -c istio-proxy curl http://istio-pilot.istio-system.svc.cluster.local:9093/debug/edsz &amp;gt; endpoints.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;endpoints.json&lt;/code&gt; 文件中包含了所有 Cluster 的 Endpoint 信息，我们只选取其中的 &lt;code&gt;outbound|9080||ratings.default.svc.cluster.local&lt;/code&gt; Cluster 的结果如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;clusterName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;endpoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;locality&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;lbEndpoints&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;endpoint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;socketAddress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.33.100.2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;portValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9080&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filterMetadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;istio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes://ratings-v1-8558d4458d-ns6lk.default&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Endpoint 可以是一个或多个，Envoy 将根据一定规则选择适当的 Endpoint 来路由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：Istio 1.1 将支持 &lt;code&gt;istioctl pc endpoint&lt;/code&gt; 命令来查询 Endpoint。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://preliminary.istio.io/zh/help/ops/traffic-management/proxy-cmd/&#34;&gt;调试 Envoy 和 Pilot - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/&#34;&gt;理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/&#34;&gt;Istio流量管理实现机制深度解析 - zhaohuabing.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Istio 中的服务和流量的抽象模型</title>
      <link>https://jimmysong.io/blog/istio-service-and-traffic-model/</link>
      <pubDate>Mon, 17 Dec 2018 21:37:35 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/istio-service-and-traffic-model/</guid>
      <description>
        
        
        &lt;p&gt;本文介绍了 Istio 和 Kubernetes 中的一些服务和流量的抽象模型。虽然 Istio 一开始确定的抽象模型与对接的底层平台无关，但目前来看基本绑定 Kubernetes，本文仅以 Kubernetes 说明。另外在 &lt;a href=&#34;http://www.servicemesher.com&#34;&gt;ServiceMesher 社区&lt;/a&gt;中最近有很多关于 Istio、Envoy、Kubernetes 之中的服务模型关系的讨论，本文作为一个开篇说明，Kubernetes 和 Isito 之间有哪些共有的服务模型，Istio 在 Kubernetes 的服务模型之上又增加了什么。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务具有多个版本。&lt;/strong&gt; 在 CI/CD 过程中，同一个服务可能同时部署在多个环境中，如开发、生产和测试环境等，这些服务版本不一定具有不同的 API，可能只是一些小的更改导致的迭代版本。在 A/B 测试和灰度发布中经常遇到这种情况。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-与-istio-中共有的模型&#34;&gt;Kubernetes 与 Istio 中共有的模型&lt;/h2&gt;
&lt;p&gt;因为 Istio 基本就是绑定在 Kubernetes 上，下面是我们熟知的 Kubernetes 及 Istio 中共有的服务模型。&lt;/p&gt;
&lt;p&gt;Kubernetes 中 iptables 代理模式（另外还有 IPVS 模式）下的 service ，管理员可以在 kube-proxy 中配置简单的负载均衡，对整个 node 生效，无法配置到单个服务的负载均衡和其他微服务的高级功能，例如熔断、限流、追踪等，这些功能只能在应用中实现了，而在 Istio 的概念模型中完全去掉了 &lt;code&gt;kube-proxy&lt;/code&gt;  这个组件，将其分散到每个应用 Pod 中同时部署的 Envoy 中实现。&lt;/p&gt;
&lt;p&gt;下面列举的是 Kubernetes 和 Istio 中共有的模型。&lt;/p&gt;
&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;
&lt;p&gt;这实际上跟 Kubernetes 中的 service 概念是一致的，请参考 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/service.html&#34;&gt;Kubernetes 中的 service&lt;/a&gt;。Istio 推出了比 service 更复杂的模型 &lt;code&gt;VirtualService&lt;/code&gt;，这不单纯是定义一个服务了，而是在服务之上定义了路由规则。&lt;/p&gt;
&lt;p&gt;每个服务都有一个完全限定的域名（FQDN），监听一个或多个端口。服务还可以有与其相关联的单个负载均衡器或虚拟 IP 地址。针对 FQDN 的 DNS 查询将解析为该负载均衡器或者虚拟 IP 的地址。&lt;/p&gt;
&lt;p&gt;例如 Kubernetes 中一个服务为 &lt;code&gt;foo.default.svc.cluster.local&lt;/code&gt; ，虚拟 IP /ClusterIP 是 10.0.1.1，监听的端口是 80 和 8080。&lt;/p&gt;
&lt;h3 id=&#34;endpoint&#34;&gt;Endpoint&lt;/h3&gt;
&lt;p&gt;这里指的是 Kubernetes 中的 endpoint，一个 endpoint 是实现了某服务的具体实例，一个服务可能有一个或者多个 Endpoint，表示为 IP 地址加端口，也可以为 DNS 名称加端口。&lt;/p&gt;
&lt;p&gt;其实到底哪些实例属于同一个 service，还是需要 通过 label 匹配来选择。&lt;/p&gt;
&lt;h3 id=&#34;label&#34;&gt;Label&lt;/h3&gt;
&lt;p&gt;服务的版本、对应的引用名称等是通过 label 来标记的，例如下面 Kubernetes 中一个应用的 YAML 配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;extensions/v1beta1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ratings-v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;template&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ratings&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;containers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ratings&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio/examples-bookinfo-ratings-v1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;containerPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;version: v1&lt;/code&gt; 标记该服务是 v1 版本，&lt;code&gt;version&lt;/code&gt; 是一个约定俗称的标签，建议大家的服务上都带上该标签。&lt;/p&gt;
&lt;p&gt;当然服务的 label 可以设置任意多个，这样的好处是在做路由的时候可以根据标签匹配来做细粒度的流量划分。&lt;/p&gt;
&lt;h2 id=&#34;数据平面-envoy&#34;&gt;数据平面 Envoy&lt;/h2&gt;
&lt;p&gt;Envoy 是 Istio 中默认的 sidecar proxy，负责服务间的流量管控、认证与安全加密、可观察性等。&lt;/p&gt;
&lt;p&gt;下面是 Envoy 的架构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-arch-20190114.png&#34; alt=&#34;Envoy架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;我再给大家介绍 Envoy 中的如下几个重要概念。&lt;/p&gt;
&lt;h3 id=&#34;cluster&#34;&gt;Cluster&lt;/h3&gt;
&lt;p&gt;集群（cluster）是 Envoy 连接到的一组逻辑上相似的上游主机。Envoy 通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/service_discovery#arch-overview-service-discovery&#34;&gt;服务发现&lt;/a&gt;发现集群中的成员。Envoy 可以通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/health_checking#arch-overview-health-checking&#34;&gt;主动运行状况检查&lt;/a&gt;来确定集群成员的健康状况。Envoy 如何将请求路由到集群成员由&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/load_balancing#arch-overview-load-balancing&#34;&gt;负载均衡策略&lt;/a&gt;确定。&lt;/p&gt;
&lt;p&gt;这个与 Kubernetes 中的 Service 概念类似，只不过 Kubernetes 中的服务发现中并不包含健康状况检查，而是通过&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/guide/configure-liveness-readiness-probes.html&#34;&gt;配置 Pod 的 liveness 和 readiness 探针&lt;/a&gt;来实现，服务发现默认也是通过 DNS 来实现。&lt;/p&gt;
&lt;h3 id=&#34;listener&#34;&gt;Listener&lt;/h3&gt;
&lt;p&gt;监听器（listener）是可以由下游客户端连接的命名网络位置（例如，端口、unix域套接字等）。Envoy 公开一个或多个下游主机连接的侦听器。一般是每台主机运行一个 Envoy，使用单进程运行，但是每个进程中可以启动任意数量的 Listener（监听器），目前只监听 TCP，每个监听器都独立配置一定数量的（L3/L4）网络过滤器。Listenter 也可以通过 Listener Discovery Service（&lt;strong&gt;LDS&lt;/strong&gt;）动态获取。&lt;/p&gt;
&lt;h3 id=&#34;listener-filter&#34;&gt;Listener filter&lt;/h3&gt;
&lt;p&gt;Listener 使用 listener filter（监听器过滤器）来操作链接的元数据。它的作用是在不更改 Envoy 的核心功能的情况下添加更多的集成功能。Listener filter 的 API 相对简单，因为这些过滤器最终是在新接受的套接字上运行。在链中可以互相衔接以支持更复杂的场景，例如调用速率限制。Envoy 已经包含了多个监听器过滤器。&lt;/p&gt;
&lt;h2 id=&#34;istio-中增加的流量模型&#34;&gt;Istio 中增加的流量模型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;DestinationRule&lt;/code&gt;、&lt;code&gt;Gateway&lt;/code&gt;、&lt;code&gt;ServiceEntry&lt;/code&gt; 和 &lt;code&gt;EnvoyFilter&lt;/code&gt; 都是 Istio 中为流量管理所创建的 CRD，这些概念其实是做路由配置和流量管理的，而 Kubernetes 中的 service 只是用来做服务发现。Service Mesh 中真正的服务模型应该是 Envoy 的 &lt;a href=&#34;https://cloudnative.to/blog/envoy-xds-protocol/&#34;&gt;xDS 协议&lt;/a&gt;，其中包括了服务的流量治理，服务的端点是通过 EDS 来配置的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;istio-pilot.png&#34; alt=&#34;Istio pilot 架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是 Pilot 设计图，来自&lt;a href=&#34;https://github.com/istio/old_pilot_repo/blob/master/doc/design.md&#34;&gt;Istio Pilot design overview&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;routing&#34;&gt;Routing&lt;/h3&gt;
&lt;p&gt;Kubernetes 中的 service 是没有任何路由属性可以配置的，Istio 在设计之初就通过在同一个 Pod 中，在应用容器旁运行一个 sidecar proxy 来透明得实现细粒度的路由控制。&lt;/p&gt;
&lt;h3 id=&#34;virtualservice&#34;&gt;VirtualService&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;VirtualService&lt;/code&gt; 定义针对指定服务流量的路由规则。每个路由规则都针对特定协议的匹配规则。如果流量符合这些特征，就会根据规则发送到服务注册表中的目标服务（或者目标服务的子集或版本）。对于 A/B 测试和灰度发布等场景，通常需要使用划分 &lt;code&gt;subset&lt;/code&gt;，VirtualService 中根据 destination 中的 subset 配置来选择路由，但是这些 subset 究竟对应哪些服务示例，这就需要 &lt;code&gt;DestionationRule&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;destinationrule&#34;&gt;DestinationRule&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DestinationRule&lt;/code&gt; 所定义的策略，决定了经过路由处理之后的流量的访问策略。这些策略中可以定义负载均衡配置、连接池尺寸以及外部检测（用于在负载均衡池中对不健康主机进行识别和驱逐）配置。&lt;/p&gt;
&lt;h3 id=&#34;gateway&#34;&gt;Gateway&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Gateway&lt;/code&gt; 描述了一个负载均衡器，用于承载网格边缘的进入和发出连接。这一规范中描述了一系列开放端口，以及这些端口所使用的协议、负载均衡的 SNI 配置等内容。&lt;/p&gt;
&lt;p&gt;这个实际上就是定义服务网格的边缘路由。&lt;/p&gt;
&lt;h3 id=&#34;serviceentry&#34;&gt;ServiceEntry&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ServiceEntry&lt;/code&gt; 能够在 Istio 内部的服务注册表中加入额外的条目，从而让网格中自动发现的服务能够访问和路由到这些手工加入的服务。&lt;code&gt;ServiceEntry&lt;/code&gt; 描述了服务的属性（DNS 名称、VIP、端口、协议以及端点）。这类服务可能是网格外的 API，或者是处于网格内部但却不存在于平台的服务注册表中的条目（例如需要和 Kubernetes 服务沟通的一组虚拟机服务）。&lt;/p&gt;
&lt;p&gt;如果没有配置 ServiceEntry 的话，Istio 实际上是无法发现服务网格外部的服务的。&lt;/p&gt;
&lt;h3 id=&#34;envoyfilter&#34;&gt;EnvoyFilter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;EnvoyFilter&lt;/code&gt; 对象描述了针对代理服务的过滤器，这些过滤器可以定制由 Istio Pilot 生成的代理配置。这一功能一定要谨慎使用。错误的配置内容一旦完成传播，可能会令整个服务网格进入瘫痪状态。&lt;/p&gt;
&lt;p&gt;Envoy 中的 listener 可以配置多个 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/listener_filters&#34;&gt;filter&lt;/a&gt;，这也是一种通过 Istio 来扩展 Envoy 的机制。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/service.html&#34;&gt;Kubernetes 中的 service - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istio/old_pilot_repo/blob/master/doc/service-registry.md&#34;&gt;Istio services model - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io&#34;&gt;Istio 文档 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>CentOS7官方Docker发行版现重大Bug可致Kubernetes中的健康检测探针失败并影响容器交互</title>
      <link>https://jimmysong.io/blog/docker-exec-bug-on-centos7/</link>
      <pubDate>Thu, 06 Dec 2018 21:08:02 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/docker-exec-bug-on-centos7/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/openshift/origin/issues/21590&#34;&gt;Cannot ssh into a running pod/container &amp;ndash; rpc error: code = 2 desc = oci runtime error: exec failed: container_linux.go:247: starting container process caused &amp;ldquo;process_linux.go:110: decoding init error from pipe caused &amp;quot;read parent: connection reset by peer&amp;quot;&amp;rdquo; command terminated with exit code 126 #21590&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;bug-影响&#34;&gt;Bug 影响&lt;/h2&gt;
&lt;p&gt;如果你使用的是 CentOS7，需要用到 &lt;code&gt;kubectl exec&lt;/code&gt; 或者为 Pod 配置了&lt;strong&gt;基于命令返回值&lt;/strong&gt;的健康检查（非常用的 HTTP Get 方式）的话，该 Bug 将导致命令返回错误，Pod 无法正常启动，引起大规模故障，而且也无法使用 &lt;code&gt;kubectl exec&lt;/code&gt; 或者 &lt;code&gt;docker exec&lt;/code&gt; 与容器交互。&lt;/p&gt;
&lt;p&gt;例如下面的健康检查配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;livenessProbe&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;exec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/usr/local/bin/sidecar-injector&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;probe&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--probe-path=/health&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--interval=4s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;failureThreshold&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;initialDelaySeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;periodSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;successThreshold&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;timeoutSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;readinessProbe&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;exec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/usr/local/bin/sidecar-injector&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;probe&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--probe-path=/health&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--interval=4s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;failureThreshold&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;initialDelaySeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;periodSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;successThreshold&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;timeoutSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上 YAML 配置摘自 &lt;a href=&#34;https://istio.io/zh&#34;&gt;Istio&lt;/a&gt; 发行版中的 &lt;code&gt;istio-demo.yaml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&#34;bug-成因&#34;&gt;Bug 成因&lt;/h2&gt;
&lt;p&gt;根据 &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1655214&#34;&gt;RedHat 的 Bug 报告&lt;/a&gt;，导致该 Bug 的原因是：&lt;/p&gt;
&lt;p&gt;CentOS7 发行版中的 Docker 使用的 docker-runc 二进制文件使用旧版本的 golang 构建的，这里面一些可能导致  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/FIPS_Mode_-_an_explanation&#34;&gt;FIPS 模式&lt;/a&gt;崩溃的错误。&lt;/p&gt;
&lt;p&gt;至于该 Bug 是如何触发的官方只是说因为某些镜像导致的。&lt;/p&gt;
&lt;h2 id=&#34;发现过程&#34;&gt;发现过程&lt;/h2&gt;
&lt;p&gt;本周 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/appendix/kubernetes-1.13-changelog.html&#34;&gt;Kubernetes 1.13&lt;/a&gt; 发布，想着更新下我的 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt; 使用 Vagrant 和 VirtualBox 在本地搭建分布式 Kubernetes 1.13 集群和 &lt;a href=&#34;https://istio.io/zh&#34;&gt;Istio&lt;/a&gt; Service Mesh 的最新版本 1.0.4， 可是在安装 Istio 的时候发现 Istio 有两个 Pod 启动不起来，&lt;code&gt;istio-sidecar-injector&lt;/code&gt; 和 &lt;code&gt;istio-galley&lt;/code&gt; 这两个 Pod，检查其启动过程，发现它们都是因为 Readiness Probe 和 Liveness Probe 失败导致的。再联想到之前安装较老版本的 Istio 的时候也遇到该问题，见 &lt;a href=&#34;https://github.com/istio/istio/pull/6610&#34;&gt;Increase health probe interval #6610&lt;/a&gt; 通过增加健康检查的时间间隔可以解决该问题，可是经过反复的测试后发现还是不行。然后我想到先去掉健康检查，然后我手动使用 &lt;code&gt;kubectl exec&lt;/code&gt; 来执行健康检查的命令，解决却遇到下面的错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it istio-sidecar-injector-6fc974b6c8-pts4t -- istio-sidecar-injector-b484dfcbb-9x9l9 probe --probe-path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/health --interval&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;4s
Cannot ssh into a running pod/container -- rpc error: &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;desc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; oci runtime error: &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; failed: container_linux.go:247: starting container process caused &lt;span class=&#34;s2&#34;&gt;&amp;#34;process_linux.go:110: decoding init error from pipe caused &amp;#34;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; parent: connection reset by peer&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; terminated with &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; code &lt;span class=&#34;m&#34;&gt;126&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后直接到 Pod 所在的主机使用 &lt;code&gt;docker exec&lt;/code&gt; 命令执行，依然报上面的错误，我就确定这不是 Kubernetes 的问题了。更何况前之前 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt; 屡试不爽，突然出现问题，有点让人摸不着头脑。知道我搜到了这个四天前才有人提出的 &lt;a href=&#34;https://github.com/openshift/origin/issues/21590&#34;&gt;issue&lt;/a&gt;。根据网友反馈，现在 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt; 中已经通过降级 Docker 的方式临时修复了该问题，并支持 Kubernetes 1.13 和  Istio 1.0.4，欢迎试用。&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;p&gt;有两种解决方法，都需要替换 Docker 版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、降级到旧的 RedHat CentOS 官方源中的 Docker 版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 RedHat 官方源中的 Docker 版本降级，这样做的好处是所有的配置无需改动，参考 &lt;a href=&#34;https://github.com/openshift/origin/issues/21590&#34;&gt;https://github.com/openshift/origin/issues/21590&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;查看 Docker 版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rpm -qa &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i docker
docker-common-1.13.1-84.git07f3374.el7.centos.x86_64
docker-client-1.13.1-84.git07f3374.el7.centos.x86_64
docker-1.13.1-84.git07f3374.el7.centos.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;降级 Docker 版本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum downgrade docker-1.13.1-75.git8633870.el7.centos.x86_64 docker-client-1.13.1-75.git8633870.el7.centos.x86_64 docker-common-1.13.1-75.git8633870.el7.centos.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;降级之后再查看 Docker 版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rpm -qa &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i docker
docker-common-1.13.1-75.git8633870.el7.centos.x86_64
docker-1.13.1-75.git8633870.el7.centos.x86_64
docker-client-1.13.1-75.git8633870.el7.centos.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此为临时解决方法，RedHat 也在着手解决该问题，为了可能会提供补丁，见 &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1655214&#34;&gt;&lt;strong&gt;Bug 1655214&lt;/strong&gt;&lt;/a&gt; - docker exec does not work with registry.access.redhat.com/rhel7:7.3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、更新到 Docker-CE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;众所周知，Docker 自1.13版本之后更改了版本的命名方式，也提供了官方的 CentOS 源，替换为 Docker-CE 亦可解决该问题，不过 Docker-CE 的配置可能会与 Docker 1.13 有所不同，所以可能需要修改配置文件。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/guide/configure-liveness-readiness-probes.html&#34;&gt;配置Pod的liveness和readiness探针 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1655214&#34;&gt;Bug 1655214 - docker exec does not work with registry.access.redhat.com/rhel7:7.3 - redhat.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/FIPS_Mode_-_an_explanation&#34;&gt;FIPS Mode - an explanation - mozilla.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>软件定义交付（SDD）宣言</title>
      <link>https://jimmysong.io/blog/software-defined-delivery-manifesto/</link>
      <pubDate>Fri, 30 Nov 2018 19:06:35 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/software-defined-delivery-manifesto/</guid>
      <description>
        
        
        &lt;p&gt;今天给大家分享的是《软件定义交付宣言》，该宣言发出已经有一周多时间了，目前该宣言的官方网站（&lt;a href=&#34;https://sdd-manifesto.org/&#34;&gt;https://sdd-manifesto.org/&lt;/a&gt;）还在联署签名中。&lt;/p&gt;
&lt;p&gt;云原生通过不可变基础设施与声明式配置，作为了软件定义交付的基础，再假以持续交付工具可以极大的提高软件交付效率，本宣言的起草者中包含众多云原生理念的鉴定拥护者如 Kenny Bastani、Matt Stine 等。&lt;/p&gt;
&lt;p&gt;该宣言通过 GitHub 协作草拟（&lt;a href=&#34;https://github.com/sdd-manifesto/manifesto&#34;&gt;https://github.com/sdd-manifesto/manifesto&lt;/a&gt;），仍未达到1.0版本。下面是《软件定义交付宣言》的中文版。&lt;/p&gt;
&lt;h2 id=&#34;软件定义交付宣言&#34;&gt;软件定义交付宣言&lt;/h2&gt;
&lt;p&gt;我们从日常生产和实践中认识到软件塑造了我们的世界。我们认识到代码才是指定精确操作的最佳方式。我们认识到代码仅在被交付时才有用。&lt;/p&gt;
&lt;p&gt;开发的软件被能够被交付出去就软件本身存在的目的。现在是时候将我们的核心技能应用到实际的工作中去了。是时候对交付去做出 &lt;em&gt;设计&lt;/em&gt; 了。我们将区别人类和计算机在交付工作中承担的作用：人类做决策，计算机来完成自动化任务。&lt;/p&gt;
&lt;p&gt;每一次交付工作本质上都是独一无二的。应用程序、组织、部署环境和团队组合千差万别。我们认识到每个团队都需要能够理解这种交付的独特性和对交付做自动化。我们认识到，虽然持续交付对满足业务需求至关重要，但自动执行所有重复任务也非常重要。&lt;/p&gt;
&lt;p&gt;我们使用与加速应用程序开发类似的方式来加速软件交付：使用现代架构和编程语言，通用功能的框架、库和服务。&lt;/p&gt;
&lt;p&gt;交付基础设施现在是可编程的，我们将对其进行编程。&lt;/p&gt;
&lt;h2 id=&#34;软件定义交付是指&#34;&gt;软件定义交付是指&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;核心&lt;/strong&gt;：交付是每个软件团队和组织的基础和战略能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优先&lt;/strong&gt;：交付的代码是生产代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;战略&lt;/strong&gt;：决定团队和组织层面的策略；在代码中实现精确控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不断发展&lt;/strong&gt;：不断改进交付。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工程设计&lt;/strong&gt;：强大，可测试的代码。70年代的脚本语言是不够的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现代软件架构&lt;/strong&gt;：事件驱动和可扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现代编程语言&lt;/strong&gt;：逻辑最好用代码指定，而不是图片或GUI。脚本不好扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于模型&lt;/strong&gt;：由软件领域的模型支持，具有对代码的理解。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可测试&lt;/strong&gt;：在生产之前启用小规模应用以发现错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;协作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从群众中来&lt;/strong&gt;：所有人都可以在代码中表述自己的专业知识，这对大家都有利。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;到软件中去&lt;/strong&gt;：使用最好的工具，但将它们结合起来之后就是独一无二的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在人与软件之间&lt;/strong&gt;：协同自动化可以增强我们的感知和帮助我们做决策。将信息落实到行动，使我们能够体察软件的自动化行为。通过代码来区分团队的共享交付目标集及其实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加速&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过自动化&lt;/strong&gt;：自动执行重复任务，加快了工作速度还可以避免错误发生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过重用&lt;/strong&gt;：在开发人员、团队和组织之间共享通用功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可观察性&lt;/strong&gt;：通常用于观察和排除作为生产系统的交付过程中发生的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跟踪&lt;/strong&gt;：观察系统中的活动并跟踪操作之间的关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试&lt;/strong&gt;：检查和与交付流程交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指标&lt;/strong&gt;：在整个交付流程的活动中获取指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：(姓氏按字母顺序排列）：本宣言由 Kenny Bastani、Marc Holmes、Rod Johnson、Jessica Kerr、Mik Kersten、Russ Miles、Erin Schnabel、Matt Stine 及其他社区成员草拟。&lt;/p&gt;
&lt;p&gt;©2018，上述作者和本声明可以任何形式自由复制，但需全文复制本声明。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>KubeCon&amp;CloudNativeCon China 2018</title>
      <link>https://jimmysong.io/blog/kubecon-cloudnativecon-china-2018/</link>
      <pubDate>Fri, 16 Nov 2018 13:40:38 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/kubecon-cloudnativecon-china-2018/</guid>
      <description>
        
        
        &lt;p&gt;本次大会光面基了，很多 topic 都没来得及听。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kubecon-shanghai-2018-group.jpg&#34; alt=&#34;KubeCon&amp;CloudNativeCon China 上海 2018&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图中由上自下的大合影是：ServiceMesher 社区上海聚首合影；中美日的Kubernetes、Envoy、Istio、Apache Skywalking、ServiceMesher社区在KubeCon上海；Yahoo Japan 与蚂蚁集团团队在上海中心办公室合影。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;活动&#34;&gt;活动&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Meet the Ambassadors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参加了一场 &lt;strong&gt;Meet the Ambassadors&lt;/strong&gt; 采访，第一次参加英文的采访，本来准备的英文回答没用上，现场反而还紧张了。。。工作人员的摄像机又没就位，我还充当了摄影师（本色出演）。一共采访了四位中国的 Ambassador。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jiayao (Julia) Han, Caicloud&lt;/li&gt;
&lt;li&gt;Jia Xuan, China Mobile Research Institute&lt;/li&gt;
&lt;li&gt;Jimmy Song, Ant Group&lt;/li&gt;
&lt;li&gt;Jessie Qian, Alauda&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的名字不约而同的都是 J 字头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service Mesh Roundtable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后参加了一场 Service Mesh Roundtable，参加人员有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jimmy Song, Developer Advocate on Cloud Native at Ant Group&lt;/li&gt;
&lt;li&gt;Yulin Son, Principal Architect at Huawei&lt;/li&gt;
&lt;li&gt;George Miranda, PagerDuty&lt;/li&gt;
&lt;li&gt;Nic Jackson, Developer Advocate at HashiCorp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们就 Service Mesh 的现状，存在的问题后未来进行了广泛的探讨。&lt;/p&gt;
&lt;h2 id=&#34;ppt&#34;&gt;PPT&lt;/h2&gt;
&lt;p&gt;KubeCon China 会议的很多 PPT 在&lt;a href=&#34;https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2018/schedule-chinese/&#34;&gt;大会的官网&lt;/a&gt;上都可以下载，或者通过&lt;a href=&#34;https://pan.baidu.com/s/1oihwETA063WSFyigWsn8Mw&#34;&gt;百度网盘&lt;/a&gt;下载 zip 包，提取码：&lt;strong&gt;5vn0&lt;/strong&gt;。或者通过&lt;a href=&#34;https://github.com/bbotte/cncf-presentations/tree/master/KubeCon%2BCloudNativeCon-2018&#34;&gt;GitHub&lt;/a&gt;下载单个 PPT。&lt;/p&gt;
&lt;h2 id=&#34;飞行&#34;&gt;飞行&lt;/h2&gt;
&lt;p&gt;在会场随便一坐，就能遇到熟人。还有很多我都叫不上名字的人来打招呼，不能一一道谢了，感谢晚餐以及收到的Prometheus飞行袜。&lt;/p&gt;
&lt;p&gt;11月12日晚在上海静安寺上空飞行，航拍的南京西路夜景。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes项目联合创始人Brendan Burns新书Managing Kubernetes介绍及评论</title>
      <link>https://jimmysong.io/blog/the-book-managing-kubernetes-by-brendan-burns/</link>
      <pubDate>Tue, 23 Oct 2018 21:21:07 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/the-book-managing-kubernetes-by-brendan-burns/</guid>
      <description>
        
        
        &lt;p&gt;&lt;em&gt;&lt;code&gt;Managing Kubernetes - Operating Kubernetes Cluster in the Real World&lt;/code&gt;&lt;/em&gt; 《管理 Kubernetes ——运维真实的 Kubernetes 集群》这本书的作者是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Brendan Burns&lt;/strong&gt;：Kubernetes 项目的三位联合创始人之一，现就职于微软 Azure。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Craig Tracey&lt;/strong&gt;：Heptio 公司的工程师，也是本书发行的赞助公司。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书由 &lt;code&gt;O’Reilly&lt;/code&gt; 出版，可以从网上免费获得（例如 &lt;code&gt;Heptio&lt;/code&gt; 和 &lt;code&gt;O’Reilly&lt;/code&gt; 的官网上），并在&lt;a href=&#34;https://www.amazon.com/Managing-Kubernetes-Operating-Clusters-World/dp/149203391X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1540304199&amp;amp;sr=8-1&amp;amp;keywords=managing+kubernetes&#34;&gt;亚马逊&lt;/a&gt;上预售（2018年12月3日正式发售），该书已经由国内某出版社引进，将发行简体中文版。&lt;/p&gt;
&lt;p&gt;英文电子版 PDF 下载，请翻页面底部关注&lt;code&gt;云原生应用架构&lt;/code&gt;公众号并在后台回复&lt;code&gt;管理Kubernetes&lt;/code&gt;即可获得下载地址。&lt;/p&gt;
&lt;p&gt;Kubernetes 项目的另外两位联合创始人目前都就职在 &lt;a href=&#34;https://heptio.com&#34;&gt;Heptio&lt;/a&gt;，该公司于 2018 年 11 月 6 日被 VMWare 收购，详见&lt;a href=&#34;https://mp.weixin.qq.com/s/8_DDCOAk1spYHPB7LsLe5Q&#34;&gt;Kubernetes两位联合创始人创办的Heptio公司被VMWare收购&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;个人评论&#34;&gt;个人评论&lt;/h3&gt;
&lt;p&gt;以下是我个人看法。&lt;/p&gt;
&lt;p&gt;如果你想通过本书看到很多生产上趟坑得实践，那么你会感到很失望。在看这本书的目录的时候我到是看的热血沸腾，但是本书只有寥寥 187 页却包含了如此多的内容，这就注定它不是一本参考书，你也不能指望通过它学到多少运维生产环境 Kubernetes 集群的知识。每一章中的每一节都是一两段总结性的话语，如果你看过 &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes 的官方文档&lt;/a&gt;会觉得这本书写的太简略了，事实确实如此。因此可以将此书作为一个大纲，再结合官方文档和实践学习效果更佳。&lt;/p&gt;
&lt;p&gt;另外对本书感兴趣的同学可以&lt;a href=&#34;https://jimmysong.io/about&#34;&gt;联系我&lt;/a&gt;加入读者交流群。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持</title>
      <link>https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/</link>
      <pubDate>Tue, 11 Sep 2018 10:39:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;以往有很多文章讲解 Istio 是如何做 Sidecar 注入的，但是没有讲解注入之后 Sidecar 工作的细节。本文将带大家详细了解 Istio 是如何将 Envoy 作为 Sidecar 的方式注入到应用程序 Pod 中，及 Sidecar 是如何做劫持流量的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在讲解 Istio 如何将 Envoy 代理注入到应用程序 Pod 中之前，我们需要先了解以下几个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sidecar 模式：容器应用模式之一，Service Mesh 架构的一种实现方式。&lt;/li&gt;
&lt;li&gt;Init 容器：Pod 中的一种专用的容器，在应用程序容器启动之前运行，用来包含一些应用镜像中不存在的实用工具或安装脚本。&lt;/li&gt;
&lt;li&gt;iptables：流量劫持是通过 iptables 转发实现的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看目前 &lt;code&gt;productpage-v1-745ffc55b7-2l2lw&lt;/code&gt; Pod 中运行的容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n default get pod productpage-v1-745ffc55b7-2l2lw -o&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{..spec.containers[*].name}&amp;#39;&lt;/span&gt;
productpage istio-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;productpage&lt;/code&gt; 即应用容器，&lt;code&gt;istio-proxy&lt;/code&gt; 即 Envoy 代理的 sidecar 容器。另外该 Pod 中实际上还运行过一个 Init 容器，因为它执行结束就自动终止了，所以我们看不到该容器的存在。关注 &lt;code&gt;jsonpath&lt;/code&gt; 的用法请参考 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/jsonpath/&#34;&gt;JSONPath Support&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-模式&#34;&gt;Sidecar 模式&lt;/h2&gt;
&lt;p&gt;在了解 Istio 使用 Sidecar 注入之前，需要先说明下什么是 Sidecar 模式。Sidecar 是容器应用模式的一种，也是在 Service Mesh 中发扬光大的一种模式，详见 &lt;a href=&#34;https://www.servicemesher.com/blog/service-mesh-architectures/&#34;&gt;Service Mesh 架构解析&lt;/a&gt;，其中详细描述了&lt;strong&gt;节点代理&lt;/strong&gt;和 &lt;strong&gt;Sidecar&lt;/strong&gt; 模式的 Service Mesh 架构。&lt;/p&gt;
&lt;p&gt;使用 Sidecar 模式部署服务网格时，无需在节点上运行代理（因此您不需要基础结构的协作），但是集群中将运行多个相同的 Sidecar 副本。从另一个角度看：我可以为一组微服务部署到一个服务网格中，你也可以部署一个有特定实现的服务网格。在 Sidecar 部署方式中，你会为每个应用的容器部署一个伴生容器。Sidecar 接管进出应用容器的所有流量。在 Kubernetes 的 Pod 中，在原有的应用容器旁边运行一个 Sidecar 容器，可以理解为两个容器共享存储、网络等资源，可以广义的将这个注入了 Sidecar 容器的 Pod 理解为一台主机，两个容器共享主机资源。&lt;/p&gt;
&lt;p&gt;下图展示的是 Service Mesh 的架构图，其中的位于每个 Pod 中的 proxy  组成了数据平面，而这些 proxy 正是以 sidecar 模式运行的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;istio-sidecar.jpg&#34; alt=&#34;Istio 架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：下文中所指的 Sidecar 都是指的 Envoy 代理容器。&lt;/p&gt;
&lt;h2 id=&#34;init-容器&#34;&gt;Init 容器&lt;/h2&gt;
&lt;p&gt;Init 容器是一种专用容器，它在应用程序容器启动之前运行，用来包含一些应用镜像中不存在的实用工具或安装脚本。&lt;/p&gt;
&lt;p&gt;一个 Pod 中可以指定多个 Init 容器，如果指定了多个，那么 Init 容器将会按顺序依次运行。只有当前面的 Init 容器必须运行成功后，才可以运行下一个 Init 容器。当所有的 Init 容器运行完成后，Kubernetes 才初始化 Pod 和运行应用容器。&lt;/p&gt;
&lt;p&gt;Init 容器使用 Linux Namespace，所以相对应用程序容器来说具有不同的文件系统视图。因此，它们能够具有访问 Secret 的权限，而应用程序容器则不能。&lt;/p&gt;
&lt;p&gt;在 Pod 启动过程中，Init 容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。如果由于运行时或失败退出，将导致容器启动失败，它会根据 Pod 的 &lt;code&gt;restartPolicy&lt;/code&gt; 指定的策略进行重试。然而，如果 Pod 的 &lt;code&gt;restartPolicy&lt;/code&gt; 设置为 Always，Init 容器失败时会使用 &lt;code&gt;RestartPolicy&lt;/code&gt; 策略。&lt;/p&gt;
&lt;p&gt;在所有的 Init 容器没有成功之前，Pod 将不会变成 &lt;code&gt;Ready&lt;/code&gt; 状态。Init 容器的端口将不会在 Service 中进行聚集。 正在初始化中的 Pod 处于 &lt;code&gt;Pending&lt;/code&gt; 状态，但应该会将 &lt;code&gt;Initializing&lt;/code&gt; 状态设置为 true。Init 容器运行完成以后就会自动终止。&lt;/p&gt;
&lt;p&gt;关于 Init 容器的详细信息请参考 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/init-containers.html&#34;&gt;Init 容器 - Kubernetes 中文指南/云原生应用架构实践手册&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-注入示例分析&#34;&gt;Sidecar 注入示例分析&lt;/h2&gt;
&lt;p&gt;我们看下 Istio 官方示例 &lt;code&gt;bookinfo&lt;/code&gt; 中 &lt;code&gt;productpage&lt;/code&gt;  的 YAML 配置，关于 &lt;code&gt;bookinfo&lt;/code&gt; 应用的详细 YAML 配置请参考 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster/blob/master/yaml/istio-bookinfo/bookinfo.yaml&#34;&gt;bookinfo.yaml&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;port&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;http&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selector&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;extensions/v1beta1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage-v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;template&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;containers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio/examples-bookinfo-productpage-v1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;containerPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再查看下 &lt;code&gt;productpage&lt;/code&gt; 容器的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; python:2.7-slim&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; requirements.txt ./&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; pip install --no-cache-dir -r requirements.txt&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; productpage.py /opt/microservices/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; templates /opt/microservices/templates&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; requirements.txt /opt/microservices/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 9080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /opt/microservices&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; python productpage.py &lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到 &lt;code&gt;Dockerfile&lt;/code&gt; 中没有配置 &lt;code&gt;ENTRYPOINT&lt;/code&gt;，所以 &lt;code&gt;CMD&lt;/code&gt; 的配置 &lt;code&gt;python productpage.py 9080&lt;/code&gt;  将作为默认的 &lt;code&gt;ENTRYPOINT&lt;/code&gt;，记住这一点，再看下注入 sidecar 之后的配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istioctl kube-inject -f yaml/istio-bookinfo/bookinfo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们只截取其中与 &lt;code&gt;productpage&lt;/code&gt; 相关的 &lt;code&gt;Service&lt;/code&gt; 和 &lt;code&gt;Deployment&lt;/code&gt; 配置部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;port&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;http&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selector&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;extensions/v1beta1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;creationTimestamp&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage-v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;strategy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;template&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;annotations&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;sidecar.istio.io/status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;version&amp;#34;:&amp;#34;fde14299e2ae804b95be08e0f2d171d466f47983391c00519bbf01392d9ad6bb&amp;#34;,&amp;#34;initContainers&amp;#34;:[&amp;#34;istio-init&amp;#34;],&amp;#34;containers&amp;#34;:[&amp;#34;istio-proxy&amp;#34;],&amp;#34;volumes&amp;#34;:[&amp;#34;istio-envoy&amp;#34;,&amp;#34;istio-certs&amp;#34;],&amp;#34;imagePullSecrets&amp;#34;:null}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;creationTimestamp&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;containers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio/examples-bookinfo-productpage-v1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;containerPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;args&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;proxy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sidecar&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--configPath&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/etc/istio/proxy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--binaryPath&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/usr/local/bin/envoy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--serviceCluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;productpage&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--drainDuration&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;45s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--parentShutdownDuration&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1m0s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--discoveryAddress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-pilot.istio-system&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15007&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--discoveryRefreshDelay&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--zipkinAddress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;zipkin.istio-system&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9411&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--connectTimeout&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;10s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--statsdUdpAddress&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-statsd-prom-bridge.istio-system&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9125&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--proxyAdminPort&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;15000&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--controlPlaneAuthPolicy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NONE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;POD_NAME&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;valueFrom&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;fieldRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;fieldPath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;metadata.name&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;POD_NAMESPACE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;valueFrom&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;fieldRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;fieldPath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;metadata.namespace&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;INSTANCE_IP&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;valueFrom&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;fieldRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;fieldPath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;status.podIP&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ISTIO_META_POD_NAME&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;valueFrom&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;fieldRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;fieldPath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;metadata.name&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ISTIO_META_INTERCEPTION_MODE&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;REDIRECT&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jimmysong/istio-release-proxyv2&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-proxy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;requests&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;cpu&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;10m&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;securityContext&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;privileged&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;readOnlyRootFilesystem&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;runAsUser&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;volumeMounts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mountPath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/etc/istio/proxy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-envoy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mountPath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/etc/certs/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-certs&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;readOnly&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;initContainers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;args&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-p&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;15001&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-u&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1337&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-m&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;REDIRECT&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-i&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-x&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-b&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-d&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;jimmysong/istio-release-proxy_init&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-init&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;securityContext&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;capabilities&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;add&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NET_ADMIN&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;privileged&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;emptyDir&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;medium&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Memory&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-envoy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio-certs&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;secret&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;optional&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;secretName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;istio.default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到 Service 的配置没有变化，所有的变化都在 &lt;code&gt;Deployment&lt;/code&gt; 里，Istio 给应用 Pod 注入的配置主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init 容器 &lt;code&gt;istio-init&lt;/code&gt;：用于给 Sidecar 容器即 Envoy 代理做初始化，设置 iptables 端口转发&lt;/li&gt;
&lt;li&gt;Envoy sidecar 容器 &lt;code&gt;istio-proxy&lt;/code&gt;：运行 Envoy 代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来将分别解析下这两个容器。&lt;/p&gt;
&lt;h3 id=&#34;init-容器解析&#34;&gt;Init 容器解析&lt;/h3&gt;
&lt;p&gt;Istio 在 Pod 中注入的 Init 容器名为 &lt;code&gt;istio-init&lt;/code&gt;，我们在上面 Istio 注入完成后的 YAML 文件中看到了该容器的启动参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;-p &lt;span class=&#34;m&#34;&gt;15001&lt;/span&gt; -u &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt; -m REDIRECT -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -x &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; -b &lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们再检查下该容器的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/pilot/docker/Dockerfile.proxy_init&#34;&gt;Dockerfile&lt;/a&gt; 看看 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 是什么以确定启动时执行的命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:xenial&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    iproute2 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    iptables &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; istio-iptables.sh /usr/local/bin/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin/istio-iptables.sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到 &lt;code&gt;istio-init&lt;/code&gt; 容器的入口是 &lt;code&gt;/usr/local/bin/istio-iptables.sh&lt;/code&gt; 脚本，再按图索骥看看这个脚本里到底写的什么，该脚本的位置在 Istio 源码仓库的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/tools/deb/istio-iptables.sh&#34;&gt;tools/deb/istio-iptables.sh&lt;/a&gt;，一共 300 多行，就不贴在这里了。下面我们就来解析下这个启动脚本。&lt;/p&gt;
&lt;h3 id=&#34;init-容器启动入口&#34;&gt;Init 容器启动入口&lt;/h3&gt;
&lt;p&gt;Init 容器的启动入口是 &lt;code&gt;/usr/local/bin/istio-iptables.sh&lt;/code&gt; 脚本，该脚本的用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istio-iptables.sh -p PORT -u UID -g GID &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-m mode&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-b ports&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-d ports&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-i CIDR&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-x CIDR&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-h&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  -p: 指定重定向所有 TCP 流量的 Envoy 端口（默认为 &lt;span class=&#34;nv&#34;&gt;$ENVOY_PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 15001）
  -u: 指定未应用重定向的用户的 UID。通常，这是代理容器的 UID（默认为 &lt;span class=&#34;nv&#34;&gt;$ENVOY_USER&lt;/span&gt; 的 uid，istio_proxy 的 uid 或 1337）
  -g: 指定未应用重定向的用户的 GID。（与 -u param 相同的默认值）
  -m: 指定入站连接重定向到 Envoy 的模式，“REDIRECT” 或 “TPROXY”（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_INBOUND_INTERCEPTION_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  -b: 逗号分隔的入站端口列表，其流量将重定向到 Envoy（可选）。使用通配符 “*” 表示重定向所有端口。为空时表示禁用所有入站重定向（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_INBOUND_PORTS&lt;/span&gt;）
  -d: 指定要从重定向到 Envoy 中排除（可选）的入站端口列表，以逗号格式分隔。使用通配符“*” 表示重定向所有入站流量（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_LOCAL_EXCLUDE_PORTS&lt;/span&gt;）
  -i: 指定重定向到 Envoy（可选）的 IP 地址范围，以逗号分隔的 CIDR 格式列表。使用通配符 “*” 表示重定向所有出站流量。空列表将禁用所有出站重定向（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_SERVICE_CIDR&lt;/span&gt;）
  -x: 指定将从重定向中排除的 IP 地址范围，以逗号分隔的 CIDR 格式列表。使用通配符 “*” 表示重定向所有出站流量（默认为 &lt;span class=&#34;nv&#34;&gt;$ISTIO_SERVICE_EXCLUDE_CIDR&lt;/span&gt;）。

环境变量位于 &lt;span class=&#34;nv&#34;&gt;$ISTIO_SIDECAR_CONFIG&lt;/span&gt;（默认在：/var/lib/istio/envoy/sidecar.env）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过查看该脚本你将看到，以上传入的参数都会重新组装成 &lt;a href=&#34;https://wangchujiang.com/linux-command/c/iptables.html&#34;&gt;&lt;code&gt;iptables&lt;/code&gt; 命令&lt;/a&gt;的参数。&lt;/p&gt;
&lt;p&gt;再参考 &lt;code&gt;istio-init&lt;/code&gt; 容器的启动参数，完整的启动命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ /usr/local/bin/istio-iptables.sh -p &lt;span class=&#34;m&#34;&gt;15001&lt;/span&gt; -u &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt; -m REDIRECT -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -x &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; -b &lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该容器存在的意义就是让 Envoy 代理可以拦截所有的进出 Pod 的流量，即将入站流量重定向到 Sidecar，再拦截应用容器的出站流量经过 Sidecar 处理后再出站。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这条启动命令的作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将应用容器的所有流量都转发到 Envoy 的 15001 端口。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;istio-proxy&lt;/code&gt; 用户身份运行， UID 为 1337，即 Envoy 所处的用户空间，这也是 &lt;code&gt;istio-proxy&lt;/code&gt; 容器默认使用的用户，见 YAML 配置中的 &lt;code&gt;runAsUser&lt;/code&gt; 字段。&lt;/li&gt;
&lt;li&gt;使用默认的 &lt;code&gt;REDIRECT&lt;/code&gt; 模式来重定向流量。&lt;/li&gt;
&lt;li&gt;将所有出站流量都重定向到 Envoy 代理。&lt;/li&gt;
&lt;li&gt;将所有访问 9080 端口（即应用容器 &lt;code&gt;productpage&lt;/code&gt; 的端口）的流量重定向到 Envoy 代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 Init 容器初始化完毕后就会自动终止，因为我们无法登陆到容器中查看 iptables 信息，但是 Init 容器初始化结果会保留到应用容器和 Sidecar 容器中。&lt;/p&gt;
&lt;h3 id=&#34;istio-proxy-容器解析&#34;&gt;istio-proxy 容器解析&lt;/h3&gt;
&lt;p&gt;为了查看 iptables 配置，我们需要登陆到 Sidecar 容器中使用 root 用户来查看，因为 &lt;code&gt;kubectl&lt;/code&gt; 无法使用特权模式来远程操作 docker 容器，所以我们需要登陆到 &lt;code&gt;productpage&lt;/code&gt; Pod 所在的主机上使用 &lt;code&gt;docker&lt;/code&gt; 命令登陆容器中查看。&lt;/p&gt;
&lt;p&gt;查看 &lt;code&gt;productpage&lt;/code&gt; Pod 所在的主机。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n default get pod -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;productpage -o wide
NAME                              READY     STATUS    RESTARTS   AGE       IP             NODE
productpage-v1-745ffc55b7-2l2lw   2/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1d        172.33.78.10   node3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从输出结果中可以看到该 Pod 运行在 &lt;code&gt;node3&lt;/code&gt; 上，使用 &lt;code&gt;vagrant&lt;/code&gt; 命令登陆到 &lt;code&gt;node3&lt;/code&gt; 主机中并切换为 root 用户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vagrant ssh node3
$ sudo -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 iptables 配置，列出 NAT（网络地址转换）表的所有规则，因为在 Init 容器启动的时候选择给  &lt;code&gt;istio-iptables.sh&lt;/code&gt; 传递的参数中指定将入站流量重定向到 Envoy 的模式为 “REDIRECT”，因此在 iptables 中将只有 NAT 表的规格配置，如果选择 &lt;code&gt;TPROXY&lt;/code&gt; 还会有 &lt;code&gt;mangle&lt;/code&gt; 表配置。&lt;code&gt;iptables&lt;/code&gt; 命令的详细用法请参考 &lt;a href=&#34;https://wangchujiang.com/linux-command/c/iptables.html&#34;&gt;iptables&lt;/a&gt;，规则配置请参考 &lt;a href=&#34;http://www.zsythink.net/archives/1517&#34;&gt;iptables 规则配置&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;理解-iptables&#34;&gt;理解 iptables&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 是 Linux 内核中的防火墙软件 netfilter 的管理工具，位于用户空间，同时也是 netfilter 的一部分。Netfilter 位于内核空间，不仅有网络地址转换的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。&lt;/p&gt;
&lt;p&gt;在了解 Init 容器初始化的 iptables 之前，我们先来了解下 iptables 和规则配置。&lt;/p&gt;
&lt;p&gt;下图展示了 iptables 调用链。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;iptables_packetflow.png&#34; alt=&#34;iptables 调用链&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;iptables-中的表&#34;&gt;iptables 中的表&lt;/h3&gt;
&lt;p&gt;Init 容器中使用的的 iptables 版本是 &lt;code&gt;v1.6.0&lt;/code&gt;，共包含 5 张表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt; 用于配置数据包，&lt;code&gt;raw&lt;/code&gt; 中的数据包不会被系统跟踪。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt; 是用于存放所有与防火墙相关操作的默认表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt; 用于 &lt;a href=&#34;https://en.wikipedia.org/wiki/Network_address_translation&#34;&gt;网络地址转换&lt;/a&gt;（例如：端口转发）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangle&lt;/code&gt; 用于对特定数据包的修改（参考&lt;a href=&#34;https://en.wikipedia.org/wiki/Mangled_packet&#34;&gt;损坏数据包&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security&lt;/code&gt; 用于&lt;a href=&#34;https://wiki.archlinux.org/index.php/Security#Mandatory_access_control&#34;&gt;强制访问控制&lt;/a&gt; 网络规则。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：在本示例中只用到了 &lt;code&gt;nat&lt;/code&gt; 表。&lt;/p&gt;
&lt;p&gt;不同的表中的具有的链类型如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;规则名称&lt;/th&gt;
&lt;th&gt;raw&lt;/th&gt;
&lt;th&gt;filter&lt;/th&gt;
&lt;th&gt;nat&lt;/th&gt;
&lt;th&gt;mangle&lt;/th&gt;
&lt;th&gt;security&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PREROUTING&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INPUT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OUTPUT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSTROUTING&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FORWARD&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下图是 iptables 的调用链顺序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;iptables-chains.jpg&#34; alt=&#34;iptables 调用链顺序&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于 iptables 的详细介绍请参考&lt;a href=&#34;https://www.aliang.org/Linux/iptables.html&#34;&gt;常见 iptables 使用规则场景整理&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;iptables-命令&#34;&gt;iptables 命令&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 命令的主要用途是修改这些表中的规则。&lt;code&gt;iptables&lt;/code&gt; 命令格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ iptables &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-t 表名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 命令选项［链名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;［条件匹配］&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-j 目标动作或跳转］
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Init 容器中的 &lt;code&gt;/istio-iptables.sh&lt;/code&gt; 启动入口脚本就是执行 iptables 初始化的。&lt;/p&gt;
&lt;h3 id=&#34;理解-iptables-规则&#34;&gt;理解 iptables 规则&lt;/h3&gt;
&lt;p&gt;查看 &lt;code&gt;istio-proxy&lt;/code&gt; 容器中的默认的 iptables 规则，默认查看的是 filter 表中的规则。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ iptables -L -v
Chain INPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT 350K packets, 63M bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

Chain FORWARD &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; packets, &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

Chain OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT 18M packets, 1916M bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到三个默认的链，分别是 INPUT、FORWARD 和 OUTPUT，每个链中的第一行输出表示链名称（在本例中为INPUT/FORWARD/OUTPUT），后跟默认策略（ACCEPT）。&lt;/p&gt;
&lt;p&gt;每条链中都可以添加多条规则，规则是按照顺序从前到后执行的。我们来看下规则的表头定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pkts&lt;/strong&gt;：处理过的匹配的报文数量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bytes&lt;/strong&gt;：累计处理的报文大小（字节数）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;target&lt;/strong&gt;：如果报文与规则匹配，指定目标就会被执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prot&lt;/strong&gt;：协议，例如 &lt;code&gt;tdp&lt;/code&gt;、&lt;code&gt;udp&lt;/code&gt;、&lt;code&gt;icmp&lt;/code&gt; 和 &lt;code&gt;all&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;opt&lt;/strong&gt;：很少使用，这一列用于显示 IP 选项。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;in&lt;/strong&gt;：入站网卡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;out&lt;/strong&gt;：出站网卡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt;：流量的源 IP 地址或子网，后者是 &lt;code&gt;anywhere&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destination&lt;/strong&gt;：流量的目的地 IP 地址或子网，或者是 &lt;code&gt;anywhere&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一列没有表头，显示在最后，表示规则的选项，作为规则的扩展匹配条件，用来补充前面的几列中的配置。&lt;code&gt;prot&lt;/code&gt;、&lt;code&gt;opt&lt;/code&gt;、&lt;code&gt;in&lt;/code&gt;、&lt;code&gt;out&lt;/code&gt;、&lt;code&gt;source&lt;/code&gt; 和 &lt;code&gt;destination&lt;/code&gt; 和显示在 &lt;code&gt;destination&lt;/code&gt; 后面的没有表头的一列扩展条件共同组成匹配规则。当流量匹配这些规则后就会执行 &lt;code&gt;target&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关于 iptables 规则请参考&lt;a href=&#34;https://www.aliang.org/Linux/iptables.html&#34;&gt;常见iptables使用规则场景整理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;target 支持的类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;target&lt;/code&gt; 类型包括 ACCEPT&lt;code&gt;、REJECT&lt;/code&gt;、&lt;code&gt;DROP&lt;/code&gt;、&lt;code&gt;LOG&lt;/code&gt; 、&lt;code&gt;SNAT&lt;/code&gt;、&lt;code&gt;MASQUERADE&lt;/code&gt;、&lt;code&gt;DNAT&lt;/code&gt;、&lt;code&gt;REDIRECT&lt;/code&gt;、&lt;code&gt;RETURN&lt;/code&gt; 或者跳转到其他规则等。只要执行到某一条链中只有按照顺序有一条规则匹配后就可以确定报文的去向了，除了 &lt;code&gt;RETURN&lt;/code&gt; 类型，类似编程语言中的 &lt;code&gt;return&lt;/code&gt; 语句，返回到它的调用点，继续执行下一条规则。&lt;code&gt;target&lt;/code&gt; 支持的配置详解请参考 &lt;a href=&#34;http://www.zsythink.net/archives/1199&#34;&gt;iptables 详解（1）：iptables 概念&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;从输出结果中可以看到 Init 容器没有在 iptables 的默认链路中创建任何规则，而是创建了新的链路。&lt;/p&gt;
&lt;h2 id=&#34;查看-iptables-nat-表中注入的规则&#34;&gt;查看 iptables nat 表中注入的规则&lt;/h2&gt;
&lt;p&gt;Init 容器通过向 iptables nat 表中注入转发规则来劫持流量的，下图显示的是 productpage 服务中的 iptables 流量劫持的详细过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-sidecar-traffic-interception-zh-20210818.png&#34; alt=&#34;Envoy sidecar 流量劫持与路由转发示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;Init 容器启动时命令行参数中指定了 &lt;code&gt;REDIRECT&lt;/code&gt; 模式，因此只创建了 NAT 表规则，接下来我们查看下 NAT 表中创建的规则，这是全文中的&lt;strong&gt;重点部分&lt;/strong&gt;，前面讲了那么多都是为它做铺垫的。下面是查看 nat 表中的规则，其中链的名字中包含 &lt;code&gt;ISTIO&lt;/code&gt; 前缀的是由 Init 容器注入的，规则匹配是根据下面显示的顺序来执行的，其中会有多次跳转。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看 NAT 表中规则配置的详细信息&lt;/span&gt;
$ iptables -t nat -L -v
&lt;span class=&#34;c1&#34;&gt;# PREROUTING 链：用于目标地址转换（DNAT），将所有入站 TCP 流量跳转到 ISTIO_INBOUND 链上&lt;/span&gt;
Chain PREROUTING &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; packets, &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt; ISTIO_INBOUND  tcp  --  any    any     anywhere             anywhere

&lt;span class=&#34;c1&#34;&gt;# INPUT 链：处理输入数据包，非 TCP 流量将继续 OUTPUT 链&lt;/span&gt;
Chain INPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; packets, &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt; bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

&lt;span class=&#34;c1&#34;&gt;# OUTPUT 链：将所有出站数据包跳转到 ISTIO_OUTPUT 链上&lt;/span&gt;
Chain OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;41146&lt;/span&gt; packets, 3845K bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
   &lt;span class=&#34;m&#34;&gt;93&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;5580&lt;/span&gt; ISTIO_OUTPUT  tcp  --  any    any     anywhere             anywhere

&lt;span class=&#34;c1&#34;&gt;# POSTROUTING 链：所有数据包流出网卡时都要先进入POSTROUTING 链，内核根据数据包目的地判断是否需要转发出去，我们看到此处未做任何处理&lt;/span&gt;
Chain POSTROUTING &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT &lt;span class=&#34;m&#34;&gt;41199&lt;/span&gt; packets, 3848K bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination

&lt;span class=&#34;c1&#34;&gt;# ISTIO_INBOUND 链：将所有目的地为 9080 端口的入站流量重定向到 ISTIO_IN_REDIRECT 链上&lt;/span&gt;
Chain ISTIO_INBOUND &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt; ISTIO_IN_REDIRECT  tcp  --  any    any     anywhere             anywhere             tcp dpt:9080

&lt;span class=&#34;c1&#34;&gt;# ISTIO_IN_REDIRECT 链：将所有的入站流量跳转到本地的 15001 端口，至此成功的拦截了流量到 Envoy&lt;/span&gt; 
Chain ISTIO_IN_REDIRECT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt; REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports &lt;span class=&#34;m&#34;&gt;15001&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# ISTIO_OUTPUT 链：选择需要重定向到 Envoy（即本地） 的出站流量，所有非 localhost 的流量全部转发到 ISTIO_REDIRECT。为了避免流量在该 Pod 中无限循环，所有到 istio-proxy 用户空间的流量都返回到它的调用点中的下一条规则，本例中即 OUTPUT 链，因为跳出 ISTIO_OUTPUT 规则之后就进入下一条链 POSTROUTING。如果目的地非 localhost 就跳转到 ISTIO_REDIRECT；如果流量是来自 istio-proxy 用户空间的，那么就跳出该链，返回它的调用链继续执行下一条规则（OUPT 的下一条规则，无需对流量进行处理）；所有的非 istio-proxy 用户空间的目的地是 localhost 的流量就跳转到 ISTIO_REDIRECT&lt;/span&gt;
Chain ISTIO_OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; ISTIO_REDIRECT  all  --  any    lo      anywhere            !localhost
   &lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2400&lt;/span&gt; RETURN     all  --  any    any     anywhere             anywhere             owner UID match istio-proxy
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     all  --  any    any     anywhere             anywhere             owner GID match istio-proxy	
    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; RETURN     all  --  any    any     anywhere             localhost
   &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3180&lt;/span&gt; ISTIO_REDIRECT  all  --  any    any     anywhere             anywhere

&lt;span class=&#34;c1&#34;&gt;# ISTIO_REDIRECT 链：将所有流量重定向到 Envoy（即本地） 的 15001 端口&lt;/span&gt;
Chain ISTIO_REDIRECT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 pkts bytes target     prot opt in     out     &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination
   &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3180&lt;/span&gt; REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports &lt;span class=&#34;m&#34;&gt;15001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 显示的链的顺序，即流量规则匹配的顺序。其中要特别注意 &lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; 链中的规则配置。为了避免流量一直在 Pod 中无限循环，所有到 istio-proxy 用户空间的流量都返回到它的调用点中的下一条规则，本例中即 OUTPUT 链，因为跳出 &lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; 规则之后就进入下一条链 &lt;code&gt;POSTROUTING&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; 链规则匹配的详细过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果目的地非 localhost 就跳转到 ISTIO_REDIRECT 链&lt;/li&gt;
&lt;li&gt;所有来自 istio-proxy 用户空间的非 localhost 流量跳转到它的调用点 &lt;code&gt;OUTPUT&lt;/code&gt; 继续执行 &lt;code&gt;OUTPUT&lt;/code&gt; 链的下一条规则，因为 &lt;code&gt;OUTPUT&lt;/code&gt; 链中没有下一条规则了，所以会继续执行 &lt;code&gt;POSTROUTING&lt;/code&gt; 链然后跳出 iptables，直接访问目的地&lt;/li&gt;
&lt;li&gt;如果流量不是来自 istio-proxy 用户空间，又是对 localhost 的访问，那么就跳出 iptables，直接访问目的地&lt;/li&gt;
&lt;li&gt;其它所有情况都跳转到 &lt;code&gt;ISTIO_REDIRECT&lt;/code&gt; 链&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实在最后这条规则前还可以增加 IP 地址过滤，让某些 IP 地址段不通过 Envoy 代理。&lt;/p&gt;
&lt;p&gt;以上 iptables 规则都是 Init 容器启动的时使用 &lt;a href=&#34;https://github.com/istio/istio/blob/master/tools/deb/istio-iptables.sh&#34;&gt;istio-iptables.sh&lt;/a&gt; 脚本生成的，详细过程可以查看该脚本。&lt;/p&gt;
&lt;h2 id=&#34;查看-envoy-运行状态&#34;&gt;查看 Envoy 运行状态&lt;/h2&gt;
&lt;p&gt;首先查看 &lt;code&gt;proxyv2&lt;/code&gt; 镜像的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/pilot/docker/Dockerfile.proxyv2&#34;&gt;Dockerfile&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; istionightly/base_debug&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ARG&lt;/span&gt; proxy_version&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ARG&lt;/span&gt; istio_version&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 安装 Envoy&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; envoy /usr/local/bin/envoy&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用环境变量的方式明文指定 proxy 的版本/功能&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; ISTIO_META_ISTIO_PROXY_VERSION &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用环境变量的方式明文指定 proxy 明确的 sha，用于指定版本的配置和调试&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; ISTIO_META_ISTIO_PROXY_SHA &lt;span class=&#34;nv&#34;&gt;$proxy_version&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 环境变量，指定明确的构建号，用于调试&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; ISTIO_META_ISTIO_VERSION &lt;span class=&#34;nv&#34;&gt;$istio_version&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; pilot-agent /usr/local/bin/pilot-agent&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; envoy_pilot.yaml.tmpl /etc/istio/proxy/envoy_pilot.yaml.tmpl&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; envoy_policy.yaml.tmpl /etc/istio/proxy/envoy_policy.yaml.tmpl&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; envoy_telemetry.yaml.tmpl /etc/istio/proxy/envoy_telemetry.yaml.tmpl&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; istio-iptables.sh /usr/local/bin/istio-iptables.sh&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; envoy_bootstrap_v2.json /var/lib/istio/envoy/envoy_bootstrap_tmpl.json&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; chmod &lt;span class=&#34;m&#34;&gt;755&lt;/span&gt; /usr/local/bin/envoy /usr/local/bin/pilot-agent&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 将 istio-proxy 用户加入 sudo 权限以允许执行 tcpdump 和其他调试命令&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; useradd -m --uid &lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt; istio-proxy &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-proxy ALL=NOPASSWD: ALL&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sudoers &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    chown -R istio-proxy /var/lib/istio&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用 pilot-agent 来启动 Envoy&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/bin/pilot-agent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该容器的启动入口是 &lt;code&gt;pilot-agent&lt;/code&gt; 命令，根据 YAML 配置中传递的参数，详细的启动命令入下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/local/bin/pilot-agent proxy sidecar --configPath /etc/istio/proxy --binaryPath /usr/local/bin/envoy --serviceCluster productpage --drainDuration 45s --parentShutdownDuration 1m0s --discoveryAddress istio-pilot.istio-system:15007 --discoveryRefreshDelay 1s --zipkinAddress zipkin.istio-system:9411 --connectTimeout 10s --statsdUdpAddress istio-statsd-prom-bridge.istio-system:9125 --proxyAdminPort &lt;span class=&#34;m&#34;&gt;15000&lt;/span&gt; --controlPlaneAuthPolicy NONE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主要配置了 Envoy 二进制文件的位置、服务发现地址、服务集群名、监控指标上报地址、Envoy 的管理端口、热重启时间等，详细用法请参考 &lt;a href=&#34;https://istio.io/docs/reference/commands/pilot-agent/&#34;&gt;Istio官方文档 pilot-agent 的用法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pilot-agent&lt;/code&gt; 是容器中 PID 为 1 的启动进程，它启动时又创建了一个 Envoy 进程，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/local/bin/envoy -c /etc/istio/proxy/envoy-rev0.json --restart-epoch &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; --drain-time-s &lt;span class=&#34;m&#34;&gt;45&lt;/span&gt; --parent-shutdown-time-s &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; --service-cluster productpage --service-node sidecar~172.33.78.10~productpage-v1-745ffc55b7-2l2lw.default~default.svc.cluster.local --max-obj-name-len &lt;span class=&#34;m&#34;&gt;189&lt;/span&gt; -l warn --v2-config-only
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们分别解释下以上配置的意义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c /etc/istio/proxy/envoy-rev0.json&lt;/code&gt;：配置文件，支持 &lt;code&gt;.json&lt;/code&gt;、&lt;code&gt;.yaml&lt;/code&gt;、&lt;code&gt;.pb&lt;/code&gt; 和 &lt;code&gt;.pb_text&lt;/code&gt; 格式，&lt;code&gt;pilot-agent&lt;/code&gt; 启动的时候读取了容器的环境变量后创建的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--restart-epoch 0&lt;/code&gt;：Envoy 热重启周期，第一次启动默认为 0，每热重启一次该值加 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--drain-time-s 45&lt;/code&gt;：热重启期间 Envoy 将耗尽连接的时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--parent-shutdown-time-s 60&lt;/code&gt;： Envoy 在热重启时关闭父进程之前等待的时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--service-cluster productpage&lt;/code&gt;：Envoy 运行的本地服务集群的名字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--service-node sidecar~172.33.78.10~productpage-v1-745ffc55b7-2l2lw.default~default.svc.cluster.local&lt;/code&gt;：定义 Envoy 运行的本地服务节点名称，其中包含了该 Pod 的名称、IP、DNS 域等信息，根据容器的环境变量拼出来的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-max-obj-name-len 189&lt;/code&gt;：cluster/route_config/listener 中名称字段的最大长度（以字节为单位）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l warn&lt;/code&gt;：日志级别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--v2-config-only&lt;/code&gt;：只解析 v2 引导配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细配置请参考 &lt;a href=&#34;http://www.servicemesher.com/envoy/operations/cli.html&#34;&gt;Envoy 的命令行选项&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;查看 Envoy 的配置文件 &lt;code&gt;/etc/istio/proxy/envoy-rev0.json&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sidecar~172.33.78.10~productpage-v1-745ffc55b7-2l2lw.default~default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;productpage&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;

    &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;INTERCEPTION_MODE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;REDIRECT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;ISTIO_PROXY_SHA&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-proxy:6166ae7ebac7f630206b2fe4e6767516bf198313&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;ISTIO_PROXY_VERSION&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;ISTIO_VERSION&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;POD_NAME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;productpage-v1-745ffc55b7-2l2lw&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;istio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sidecar&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;stats_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;use_all_default_tags&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;access_log_path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/stdout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;socket_address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;port_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15000&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dynamic_resources&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;lds_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ads&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;cds_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ads&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;ads_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;api_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GRPC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;refresh_delay&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;nanos&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;grpc_services&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;envoy_grpc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xds-grpc&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;static_resources&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;clusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xds-grpc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;STRICT_DNS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;connect_timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;nanos&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;lb_policy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ROUND_ROBIN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;

    &lt;span class=&#34;nt&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;socket_address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;istio-pilot.istio-system&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;port_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15010&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;circuit_breakers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;thresholds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;priority&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_connections&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_pending_requests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_requests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100000&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;priority&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;high&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_connections&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_pending_requests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;max_requests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100000&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;upstream_connection_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;tcp_keepalive&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;keepalive_time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;http2_protocol_options&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zipkin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;STRICT_DNS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connect_timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lb_policy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ROUND_ROBIN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;socket_address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zipkin.istio-system&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;port_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9411&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;

  &lt;span class=&#34;nt&#34;&gt;&amp;#34;tracing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.zipkin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;collector_cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zipkin&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;


  &lt;span class=&#34;nt&#34;&gt;&amp;#34;stats_sinks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.statsd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;socket_address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.254.109.175&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;port_value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9125&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图是使用 Istio 管理的 bookinfo 示例的访问请求路径图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNbRwgy1fvlwjd3302j31bo0ro0x5.jpg&#34; alt=&#34;Istio bookinfo&#34;&gt;&lt;/p&gt;
&lt;p&gt;对照 bookinfo 示例的 productpage 的查看建立的连接。在 &lt;code&gt;productpage-v1-745ffc55b7-2l2lw&lt;/code&gt; Pod 的 &lt;code&gt;istio-proxy&lt;/code&gt; 容器中使用 root 用户查看打开的端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ lsof -i
COMMAND PID        USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy    9u  IPv4  &lt;span class=&#34;m&#34;&gt;73951&lt;/span&gt;      0t0  TCP localhost:15000 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;LISTEN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Envoy admin 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   17u  IPv4  &lt;span class=&#34;m&#34;&gt;74320&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:46862-&amp;gt;istio-pilot.istio-system.svc.cluster.local:15010 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 15010：istio-pilot 的 grcp-xds 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   18u  IPv4  &lt;span class=&#34;m&#34;&gt;73986&lt;/span&gt;      0t0  UDP productpage-v1-745ffc55b7-2l2lw:44332-&amp;gt;istio-statsd-prom-bridge.istio-system.svc.cluster.local:9125 &lt;span class=&#34;c1&#34;&gt;# 给 Promethues 发送 metric 的端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   52u  IPv4  &lt;span class=&#34;m&#34;&gt;74599&lt;/span&gt;      0t0  TCP *:15001 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;LISTEN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Envoy 的监听端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   53u  IPv4  &lt;span class=&#34;m&#34;&gt;74600&lt;/span&gt;      0t0  UDP productpage-v1-745ffc55b7-2l2lw:48011-&amp;gt;istio-statsd-prom-bridge.istio-system.svc.cluster.local:9125 &lt;span class=&#34;c1&#34;&gt;# 给 Promethues 发送 metric 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   54u  IPv4 &lt;span class=&#34;m&#34;&gt;338551&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:15001-&amp;gt;172.17.8.102:52670 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 52670：Ingress gateway 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   55u  IPv4 &lt;span class=&#34;m&#34;&gt;338364&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:44046-&amp;gt;172.33.78.9:9091 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 9091：istio-telemetry 服务的 grpc-mixer 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   56u  IPv4 &lt;span class=&#34;m&#34;&gt;338473&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:47210-&amp;gt;zipkin.istio-system.svc.cluster.local:9411 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 9411: zipkin 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   58u  IPv4 &lt;span class=&#34;m&#34;&gt;338383&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:41564-&amp;gt;172.33.84.8:9080 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 9080：details-v1 的 http 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   59u  IPv4 &lt;span class=&#34;m&#34;&gt;338390&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:54410-&amp;gt;172.33.78.5:9080 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 9080：reivews-v2 的 http 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   60u  IPv4 &lt;span class=&#34;m&#34;&gt;338411&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:35200-&amp;gt;172.33.84.5:9091 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 9091:istio-telemetry 服务的 grpc-mixer 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   62u  IPv4 &lt;span class=&#34;m&#34;&gt;338497&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:34402-&amp;gt;172.33.84.9:9080 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# reviews-v1 的 http 端口&lt;/span&gt;
envoy    &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; istio-proxy   63u  IPv4 &lt;span class=&#34;m&#34;&gt;338525&lt;/span&gt;      0t0  TCP productpage-v1-745ffc55b7-2l2lw:50592-&amp;gt;172.33.71.5:9080 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ESTABLISHED&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# reviews-v3 的 http 端口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从输出级过上可以验证 Sidecar 是如何接管流量和与 istio-pilot 通信，及向 Mixer 做遥测数据汇聚的。感兴趣的读者可以再去看看其他几个服务的 istio-proxy 容器中的 iptables 和端口信息。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/sofamesh-and-mosn-proxy-sidecar-service-mesh-by-ant-financial&#34;&gt;SOFAMesh &amp;amp; SOFA MOSN—基于Istio构建的用于应对大规模流量的Service Mesh解决方案 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/concepts/init-containers.html&#34;&gt;Init 容器 - Kubernetes 中文指南/云原生应用架构实践手册 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/jsonpath/&#34;&gt;JSONPath Support - kubernetes.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangchujiang.com/linux-command/c/iptables.html&#34;&gt;iptables 命令使用说明 - wangchujiang.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules&#34;&gt;How To List and Delete Iptables Firewall Rules - digitalocean.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/fhefh/archive/2011/04/04/2005249.html&#34;&gt;一句一句解说 iptables的详细中文手册 - cnblog.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aliang.org/Linux/iptables.html&#34;&gt;常见iptables使用规则场景整理 - aliang.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>蚂蚁集团开源SOFAMesh</title>
      <link>https://jimmysong.io/blog/sofamesh-and-mosn-proxy-sidecar-service-mesh-by-ant-financial/</link>
      <pubDate>Mon, 16 Jul 2018 17:48:18 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/sofamesh-and-mosn-proxy-sidecar-service-mesh-by-ant-financial/</guid>
      <description>
        
        
        &lt;p&gt;4月，蚂蚁集团自主研发的分布式中间件（Scalable Open Financial Architecture，以下简称 SOFA ）启动开源计划，并开放多个组件，（相关背景请点击链接阅读《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI0Nzc3MTQyMw==&amp;amp;mid=2247484729&amp;amp;idx=1&amp;amp;sn=0d8dbee2739fb0eef3e4ad699661fd13&amp;amp;chksm=e9abbd49dedc345fd5d6898fd1989710f249d6386bf3d52ae1603365a4a1c3696538bc8b9a8f&amp;amp;scene=21#wechat_redirect&#34;&gt;开源 |蚂蚁集团启动分布式中间件开源计划，用于快速构建金融级云原生架构&lt;/a&gt;》、《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI0Nzc3MTQyMw==&amp;amp;mid=2247485026&amp;amp;idx=1&amp;amp;sn=0a367bc67d5fe3a268e3715b17e020ab&amp;amp;chksm=e9abbe12dedc370489102d9307b832457891fdb0530eec5c35c0fb82bc2a3e6dbbc7db8436c4&amp;amp;scene=21#wechat_redirect&#34;&gt;开源 | 蚂蚁集团分布式中间件开源第二弹：丰富微服务架构体系&lt;/a&gt;》），这一系列的动作受到大家的关注和支持，SOFA社区也日益壮大。&lt;/p&gt;
&lt;p&gt;在两轮开源之后，蚂蚁集团自主研发的分布式中间件（Scalable Open Financial Architecture，以下简称 SOFA ）在今天推出了&lt;strong&gt;第三轮的开源产品：SOFAMesh&lt;/strong&gt;。和前两轮开源的历经多年沉淀和打磨的成熟产品不同，本轮的开源主角SOFAMesh，将探索一条和以往产品有所不同的开源道路。下面我们就来看看到底有哪些不同吧！&lt;/p&gt;
&lt;h3 id=&#34;sofamesh的开源探索之路&#34;&gt;SOFAMesh的开源探索之路&lt;/h3&gt;
&lt;p&gt;SOFAMesh尝试在以下几个方面进行自我突破和勇敢探索：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全新的技术领域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Service Mesh是目前技术社区最为炙手可热的新技术方向，有下一代微服务的明显趋势。但是目前Service Mesh技术还处于发展早期，暂时还没有成熟的产品，尤其缺乏大规模的落地实践。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;较早的开源时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在上述背景下，我们选择了将启动不久的Service Mesh产品开源在开发早期，也就是还未成熟之时，就对社区开放，开放源码并寻求社区合作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更加开放的态度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在SOFAMesh上，我们愿意以开源共建的方式来和社区一起推进Service Mesh技术的更好发展和实现落地实践，共同打造一个技术先进，功能丰富，具备良好的性能和稳定性，可以实实在在的生产落地的优秀产品。欢迎国内技术社区的朋友们和我们开展不同层面的交流与合作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;务实的产品路线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SOFAMesh在产品路线上，选择了跟随社区主流，我们选择了目前Service Mesh中最有影响力和前景的Istio。SOFAMesh会在Istio的基础上，提升性能，增加扩展性，并在落地实践上做探索和补充，以弥补目前Istio的不足，同时保持与Istio社区的步骤一致和持续跟进。&lt;/p&gt;
&lt;h3 id=&#34;sofamesh介绍&#34;&gt;SOFAMesh介绍&lt;/h3&gt;
&lt;p&gt;SOFAMesh将在兼容Istio整体架构和协议的基础上，做出部分调整：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用Golang语言开发全新的Sidecar，替代Envoy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为了避免Mixer带来的性能瓶颈，合并Mixer部分功能进入Sidecar&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pilot和Citadel模块进行了大幅的扩展和增强&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们的目标：打造一个更加务实的Istio落地版本！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：以上架构调整的细节以及我们做调整的出发点和原因，请浏览 &lt;a href=&#34;http://www.servicemesher.com/blog/the-way-to-service-mesh-in-ant-financial/&#34;&gt;蚂蚁集团大规模微服务架构下的Service Mesh探索之路&lt;/a&gt; 一文，有非常详尽的解释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;开源内容&#34;&gt;开源内容&lt;/h3&gt;
&lt;p&gt;在本轮开源中，我们将推出SOFAMesh目前正在开发的两大模块：MOSN和SOFAPilot。&lt;/p&gt;
&lt;h4 id=&#34;1mosn&#34;&gt;1.MOSN&lt;/h4&gt;
&lt;p&gt;SOFAMesh中Golang版本的Sidecar，是一个名为MOSN(Modular Observable Smart Netstub)的全新开发的模块，实现Envoy的功能，兼容Envoy的API，可以和Istio集成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mosn-with-service-mesh.png&#34; alt=&#34;mosn&#34;&gt;&lt;/p&gt;
&lt;p&gt;此外，我们会增加对SOFARPC、Dubbo等通讯协议的支持，以便更好的迎合国内用户包括我们自身的实际需求。&lt;/p&gt;
&lt;p&gt;由于Sidecar相对独立，而且我们也预期会有单独使用MOSN的场景，因此MOSN的代码仓库是独立于SOFAMesh的，地址为： &lt;a href=&#34;https://github.com/sofastack/sofa-mosn&#34;&gt;https://github.com/sofastack/sofa-mosn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎大家使用，提供需求、反馈问题、贡献代码或者合作开发。&lt;/p&gt;
&lt;h4 id=&#34;2sofapilot&#34;&gt;2.SOFAPilot&lt;/h4&gt;
&lt;p&gt;我们将大幅扩展和增强Istio中的Pilot模块：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/006tKfTcgy1ft75pq8rplj31kw19sn5q.jpg&#34; alt=&#34;SOFAMesh Pilot architecture&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;增加SOFARegistry的Adapter，提供超大规模服务注册和发现的解决方案&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加数据同步模块，以实现多个服务注册中心之间的数据交换。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加Open Service Registry API，提供标准化的服务注册功能&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MOSN和SOFAPilot配合，将可以提供让传统侵入式框架（如Spring Cloud，Dubbo，SOFA RPC等）和Service Mesh产品可以相互通讯的功能，以便可以平滑的向Service Mesh产品演进和过渡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pilot和后面会陆续开放的Mixer，Citadel等Istio模块&lt;/strong&gt;，会统一存放在同一个从Istio Fork出来的代码仓库中。未来会持续更新Istio最新代码，以保持和Istio的一致。&lt;/p&gt;
&lt;h3 id=&#34;附录&#34;&gt;附录&lt;/h3&gt;
&lt;p&gt;本文中提到的链接地址集合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mosn/mosn&#34;&gt;MOSN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.servicemesher.com/blog/the-way-to-service-mesh-in-ant-financial/&#34;&gt;蚂蚁集团大规模微服务架构下的Service Mesh探索之路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>云原生编程语言Pulumi开源宣言</title>
      <link>https://jimmysong.io/blog/hello-pulumi-from-jeo-duffy/</link>
      <pubDate>Sun, 24 Jun 2018 11:38:30 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/hello-pulumi-from-jeo-duffy/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;2018年6月18日 Joe Duffy在&lt;a href=&#34;http://joeduffyblog.com/2018/06/18/hello-pulumi/&#34;&gt;他的博客&lt;/a&gt;中宣布开源了云原生编程语言&lt;a href=&#34;https://pulumi.io&#34;&gt;Pulumi&lt;/a&gt;。这是继&lt;a href=&#34;https://ballerina.io&#34;&gt;Ballerina&lt;/a&gt;之后我看到的另一款云原生编程语言，他们之间有一些共同的特点，例如都是为了支持多种云环境，基于不可变基础设施和基础设施即代码的理念构建，使云原生应用的集成更加方便，但也有一些不同，Ballerina是直接创建了一个基于JVM的语言，而Pulumi是为不同编程语言构建了SDK。&lt;/p&gt;
&lt;p&gt;下文是对	&lt;a href=&#34;http://joeduffyblog.com/2018/06/18/hello-pulumi/&#34;&gt;Hello, Pulumi!&lt;/a&gt;一文的翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们发布了Pulumi，这是一款开源的云开发平台。有了Pulumi，您可以使用自己最喜欢的编程语言来开发云应用程序，可以直接跨过底层的基础设施即代码直接开发更高效更具生产力的现代容器和serverless应用。一年多前我们发起了Pulumi，我们都为自己在这一年多取得的成绩感到惊讶。这是我们开源的第一步，也是我们做出的一步重大跨越，我们期望与您分享我们的成就。&lt;/p&gt;
&lt;p&gt;Pulumi支持多语言、混合云环境、完全可扩展。初期支持JavaScript、TypeScript、Python和Go语言，支持AWS、Azure、GCP云平台，另外还支持所有兼容Kubernetes的公有云、私有云和混合云。Pulumi实现了一种单一、一致的编程模型，一组编程工具，可管理所有以上环境，丰富的生态系统支持大量可复用的包。使用真实的语言来改变一切。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR 有了Pulumi，38页的手动操作说明将变成了38行代码。25000行YAML配置变成了使用真实编程语言的500行语句。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pulumi的整个运行时、CLI、支持的库都可以在GitHub上免费下载。我们的团队正急切的等待您的反馈。与此同时，我需要告诉您一些关于Pulumi的事情，为什么我们会创造它。&lt;/p&gt;
&lt;h2 id=&#34;为什么创造pulumi&#34;&gt;为什么创造Pulumi？&lt;/h2&gt;
&lt;p&gt;我的背景是100%在开发者工具上。我是.NET的早期工程师，设计了其中的并发和异构部分，领导的分布式操作系统的变成平台，管理微软语言小组，包括开源和使.NET Core跨平台。因为这些背景，进入云领域我有自己的见解。&lt;/p&gt;
&lt;p&gt;我发现的东西显然无法吸引我。&lt;/p&gt;
&lt;p&gt;2016年年末的时候我就开始跟我的朋友也是共同创始人Eric Rudder开始构思Pulumi，那时候容器和serverless已经甚嚣尘上，但是距离落地还为时尚早。云的能力十分惊人，但是至今将使用它还是十分困难。&lt;/p&gt;
&lt;p&gt;对于每一个serverless函数来说，我都要写几十行的JSON或者YAML配置。要链接到一个API端点，我还要学习晦涩的概念，执行一系列复制-粘贴的低级工作。如果我想在本机上运行一个小的集群的话，那么Docker还是很棒的，但是如果要在生产上使用的话，那么就要手动管理etcd集群，配置网络和iptables路由表，还有一系列与我的应用程序本身不相干的事情。不过Kubernetes的出现至少让我可以配置一次下次就可以跨云平台重用，但这还是会分散开发人员的精力。&lt;/p&gt;
&lt;p&gt;我认为我还算一个经验丰富的工程师，已经在软件行业从业20年了，但是当我想要将自己的代码部署到云中的时候，我感觉自己就像是个傻子。真是太令人悲哀了！如果我掌握了这些能力，那么是世界就会出触手可及。我总是在淌这浑水，处理云的复杂性，而我真正想做的是花时间来创造业务价值。&lt;/p&gt;
&lt;p&gt;关于编程的许多方面都经历了类似的转变过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在80年代初，我们使用汇编语言对微处理器进行了编程。最终，编译器技术进步了，我们可以同时处理多种常见的架构。像FORTRAN和C这样的Low-level的编程语言开始兴起。&lt;/li&gt;
&lt;li&gt;在90年代初期，我们直接针对低级别操作系统原语进行编程，无论是POSIX系统调用还是Win32 API，并进行手动内存和资源管理。最终，语言运行时技术和处理器速度提升到了可以使用更高级别语言的状态，如Java。除了动态语言之外，这种趋势已经加速，如JavaScript统治了Web。&lt;/li&gt;
&lt;li&gt;在21世纪初期，我们的编程模型中的共享内存并发性最好是原始的（&lt;a href=&#34;http://joeduffyblog.com/2016/11/30/15-years-of-concurrency/&#34;&gt;我花了很多时间在这个问题上&lt;/a&gt;）。现在，我们简单地假设OS具有高级线程共享、调度和异步IO功能，以及编程到更高级别的API，例如任务和承诺。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我相信云软件也在进行类似的转变。从构建单一应用程序到构建真正的云优先分布式系统，我们正处在一场巨变中。然而，当海啸发生之前，人们几乎不知道它正在发生。&lt;/p&gt;
&lt;p&gt;从上面的角度来看，使用“配置”情况是有道理的。在虚拟机的早期，我们利用现有的应用程序并将它们扔在栅栏上，以便有人添加一点INI或XML粘合剂，让它们在虚拟机内部运行，以实现更灵活的管理。随着我们将这些相同的虚拟机“提升并转移到云中”，这种配置方法一直伴随着我们。这将我们带到了大致正确的边界。&lt;/p&gt;
&lt;p&gt;使用这种相同类型的配置表示基于容器的微服务、serverless和细粒度托管服务之间的关系导致了异常的复杂性。将应用程序转变为分布式系统应该是事后的想法。事实证明，云覆盖了您的架构和设计。表达架构和设计的最好的方式是使用代码，使用真正的编程语言编写抽象，重用和优秀的工具。&lt;/p&gt;
&lt;p&gt;早些时候，Eric和我采访了几十个客户。我们发现，开发人员和DevOps工程师都普遍感到幻灭。我们发现了极端的专业化，即使在同一个团队中，工程师也不会使用同一种语言。最近几周我已经听到了这个消息，我期待有一天会出现NoYAML运动。&lt;/p&gt;
&lt;p&gt;专业化是一件好事，我们希望我们最优秀和最聪明的云计算架构师晋升到DevOps和SRE的高级职位，但团队必须能够在合作时使用相同的语言。因为没有共同的通用语言导致了团队之间的物理隔离，而不是根据策略和环境分工。Pulumi的目标是为人们提供解决这个问题所需的工具。&lt;/p&gt;
&lt;h2 id=&#34;pulumi是什么&#34;&gt;Pulumi是什么？&lt;/h2&gt;
&lt;p&gt;Pulumi是一个支持多语言和混合云开发平台。它可以让您使用真实语言和真实代码创建云计算的各个方面，从基础设施到应用程序本身。只需编写程序并运行它们，Pulumi就能帮你完成出其余部分。&lt;/p&gt;
&lt;p&gt;Pulumi的中心是一个云对象模型，与运行时相结合以了解如何以任何语言编写程序，理解执行它们所需的云资源，然后以强大的方式规划和管理您的云资源。这种云运行时和对象模型本质上是与语言、云中立的，这就是为什么我们能够支持如此多的语言和云平台。更多支持正在路上。&lt;/p&gt;
&lt;p&gt;Pulumi采用了基础设施即代码以及不可变基础设施的概念，并可让您从您最喜欢的语言（而不是YAML或DSL）中获得自动化和可重复性优势。在部署它们之前，您可以对变更进行区分，并且我们会对谁更改了什么以及何时更改进行完善的审计追踪。核心模型因此是陈述性的。&lt;/p&gt;
&lt;p&gt;使用真正的语言可以带来巨大的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;熟悉&lt;/strong&gt;：不需要学习新的定制DSL或基于YAML的模板语言&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象&lt;/strong&gt;：正如我们喜爱的编程语言那样，我们可以用更小的东西来构建更大的东西&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共享和重用&lt;/strong&gt;：利用现有的语言包管理器共享和重用这些抽象，无论是与社区、团队内部共享&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表现力&lt;/strong&gt;：充分利用您的编程语言，包括异步、循环和条件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具&lt;/strong&gt;：通过使用真正的语言，我们可以即时访问IDE、重构、测试、静态分析和编排等等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生产力&lt;/strong&gt;：将以上所有好处加在一起，一起将变得更快，我们也会变得更快乐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当提供原始云资源时，这些好处当然最重要，但是我们在团队中发现，您只能使用抽象。这包括在函数中包装事物以消除样板并创建引入更高级别概念的自定义类，通常将它们打包并重复使用。&lt;/p&gt;
&lt;p&gt;例如，此代码在AWS中创建一个DynamoDB数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@pulumi/aws&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;music&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dynamodb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;music&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;attributes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Album&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Artist&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hashKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Album&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rangeKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Artist&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此代码创建一个基于容器的任务和无服务器功能，由一个存储桶触发：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cloud&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@pulumi/cloud&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ffmpegThumbTask&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;./path_to_dockerfile/&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onPut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;onNewVideo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bucketArgs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bucketArgs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;S3_BUCKET&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;INPUT_VIDEO&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;TIME_OFFSET&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;OUTPUT_FILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.jpg&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更好的是，这些代码可以根据您的需求部署到任何公共或私有云中。&lt;/p&gt;
&lt;p&gt;最后，这个例子创建了一个Redis缓存。我们怎么知道？我们不需要。缓存组件是一个抽象，它封装了我们可以安全忽略的不重要的细节：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;./cache&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;url-cache&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在使用Pulumi之后，你不会再以同样的方式考虑基础设施。你的大脑将不再是一个独立于应用程序的独特“事物”，而是开始将分布式云系统看作是你的程序架构的核心部分，而不是事后的想法。&lt;/p&gt;
&lt;p&gt;由于抽象，我们已经能够提供一些强大的库。该库是提炼和执行最佳实践的绝佳方式。当然，对于我们自己的库来说没有什么特别的，因为它们只是功能、类和代码，我们期待着看到你为自己、你的团队或者社区建立的那些库。&lt;/p&gt;
&lt;p&gt;我们最复杂的库——Pulumi云框架——提供了一些令人兴奋的正在进行的工作的早期预览，展示如何创建跨越云提供商自己对诸如容器、无服务器功能和存储桶等核心概念的抽象。以同样的方式，您可以用Node.js、Python、Java、.NET等语言编写功能强大的应用程序，利用进程、线程和文件系统，无论是在macOS、Linux还是Windows上，这种方法都可以让您创建针对任何云提供商的现代混合云应用程序。像Kubernetes和其他CNCF产品组合这样的技术正在帮助推动这一不可避免的结果，因为它们在整个云基板上实现了对基本计算抽象的民主化和共识。&lt;/p&gt;
&lt;p&gt;Pulumi不是PaaS，尽管它提供类似PaaS的生产力；您的程序总是直接针对您选择的云运行，并且始终可以访问该基础云的全部功能。即使您选择使用更高级别的组件，它也会向下兼容，并且您可以随时直接使用原始资源。它就像任何复杂的现代软件：有时，整个事情必须用C++编写，以便访问底层平台的全部功能，但对于大多数常见情况，70%到100％可以是平台独立代码，而只有不到30%的专业化才能真正需要直接与操作系统交互。&lt;/p&gt;
&lt;p&gt;接下来我还将发布十几篇博客文章来介绍Pulumi所有方面的更多细节。然而，为了保持这篇文章尽量简短，我将首先介绍下Pulumi的一些我最喜欢的方面。&lt;/p&gt;
&lt;h2 id=&#34;我最喜欢的东西&#34;&gt;我最喜欢的东西&lt;/h2&gt;
&lt;p&gt;这很难选择，但这里有一些关于Pulumi我最喜欢的东西：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开源&lt;/strong&gt;。我坚信所有开发人员工具都应该是开源的。当然，Pulumi也是一家公司，但是有充足的机会通过增加便利性以建立商业模式。（可以认为是​​Git与GitHub的关系）我们从以前的工作中受益匪浅，其中包括Docker、Terraform、Kubernetes、TypeScript以及其他许多明确提及的工作。我们期待成为生态系统的一部分。因为我们在开放源代码方面下了很大功夫，所以我很高兴看到社区给我们带来什么，特别是在更高级别的软件包领域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多语言&lt;/strong&gt;。就像使用Java和.NET一样，Pulumi运行时的架构可以支持多种语言，并以目标语言的所有方面（风格、语法、软件包等）的惯用方式来实现。因为我们是开源的，任何人都可以贡献自己的力量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;混合云&lt;/strong&gt;。我们的云对象模型是一个强大的基础，可以支持任何云提供商。这提供了一个统一的编程模型，工具和控制平面，用于在任何地方管理云软件。如果仅仅是为了让一个简单的基于容器的应用程序在生产中运行起来，没有必要学习三种不同的YAML方言和五种不同的CLI。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云对象模型&lt;/strong&gt;。这个底层云对象模型为您的云计算构建方式提供了丰富的视图。所得到的对象使用程序中的依赖关系组成一个DAG，系统可以分析和理解这些依赖关系以提供洞察力，这是我们打算随着时间的推移解锁复杂的静态分析和可视化的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可重复使用的组件&lt;/strong&gt;。由于拥有真正的语言，我们可以构建更高层次的抽象。我最喜欢的例子之一是帮助我们的客户定期从部署中排除1000行YAML，这是我们的AWS基础架构软件包。它采用AWS最佳实践来设置虚拟私有云，并提供专用子网和多可用区域支持，并将其转变为几行代码以配置整个网络：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;awsinfra&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@pulumi/aws-infra&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;awsinfra&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`${prefix}-net`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;numberOfAvailabilityZones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Create&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subnets&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;many&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AZs&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;usePrivateSubnets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inside&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;per&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AZ&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subnets&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;迄今为止，我最喜欢的成功案例是将客户的25,000行AWS CloudFormation YAML文件（其中使用无服务器、容器、基础设施和三个自定义部署管道）使用500行TypeScript和一个Pulumi的持续部署架构来替换。这不仅仅使得公司所有工程师都可以理解的代码变得少得多，这样他们可以将过去需要花费数周时间才能完成的事情现在用一个下午就可以搞定，而且现在可以在任何云或原生的Kubernetes上运行，而不仅是在AWS。管理团队的CloudFormation堆栈，而不是一个工作量过饱和的工程师，整个团队可以更加高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一的容器构建/发布管道&lt;/strong&gt;。尝试将容器投入生产时有个问题让我早就感到很沮丧，就是同步我的应用程序、容器和基础架构管理，因为每个容器都倾向于使用不同的工具。我们的云框架演示了一个集成的工作流程，在这个工作流程中，只需简单地运行Pulumi构建、diff、推送和拉取新的容器镜像，所有这些都经过精心安排，以消除停机时间。&lt;/p&gt;
&lt;p&gt;**Lambda无服务器功能 **。 AWS的取了个好名字：Lambda。在Pulumi中，我现在可以用我最喜欢的语言使用lambda表达式来编写我的无服务器函数，而不需要一行YAML：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@pulumi/aws&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serverless&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@pulumi/aws-serverless&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topic&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aws&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Topic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;topic&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;serverless&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloudwatch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;hourly&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;rate(60 minutes)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sns&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;aws-sdk&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SNS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;publish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;TopicArn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此功能允许您捕获对变量的引用：常量、配置设置或加密，甚至可以引用其他资源，以便与它们进行通信。当你第一次这样做的时候，我保证你会有一个“哇塞”的时刻，将无服务器连接到你写过的每一个事件驱动的代码片段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用API的资源&lt;/strong&gt;。因为我可以捕获对其他云资源的引用，所以我可以在其上创建API以使它们更易于在我的运行时代码中使用。这使得“演员般的”编程模型无需处理配置和服务发现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆栈&lt;/strong&gt;。 Pulumi的核心是“堆栈”的概念。堆栈是您的云计算的独立实例，其资源和配置与所有其他堆栈不同。您可能有一堆用于生产、暂存和测试的堆栈，或者可能是每个单一租户的环境。Pulumi的CLI使得启动和卸载大量堆栈变得轻而易举。这会打开以前可能没有尝试过的工作流，例如每个开发人员都拥有自己的堆栈，将新堆叠起来（并拆除）以测试每个Pull请求，甚至将服务的层拆分成多个链接在一起的堆栈。&lt;/p&gt;
&lt;p&gt;我将在未来的博客文章介绍如何做。现在Pulumi已经公开，期望在接下来的几天和几周内听到更多的消息。我希望这能让您更好地了解整体平台，其方法和独特优势。&lt;/p&gt;
&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么？&lt;/h2&gt;
&lt;p&gt;我们希望通过Pulumi，开发人员和DevOps团队都将体验到云的复兴。构建强大的云软件将更加愉快、更高效、更具协作性。现代云计算软件将从代码孤岛转变为等量的配置胶水，成为优雅的分布式系统。&lt;/p&gt;
&lt;p&gt;这是一个难题。我绝不会说我们已经解决了它。我确实相信Pulumi是我亲身见过并希望最接近我心目中的云开发平台。在这个激动人心的时刻，投注于语言将使我们所有人“站在巨人的肩膀上”，这让我感到乐观；语言总是一个安全的赌注。&lt;/p&gt;
&lt;p&gt;今天很可能是我职业生涯中最激动人心的一天。我想感谢我们的团队和所有帮助过我们的人，放纵我们的疯狂想法并相信我们。&lt;/p&gt;
&lt;p&gt;现在访问&lt;a href=&#34;https://pulumi.io/&#34;&gt;https://pulumi.io&lt;/a&gt;，或者直接运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -fsSL https://get.pulumi.com &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我迫不及待想看看你将使用Pulumi构建的所有令人难以置信的东西。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S 我要感谢我已故的导师，最好的朋友Chris Brumme。虽然Chris没办法和我们一起庆祝这一刻，但我清楚“Chris每一步会做些什么”。Pulumi是夏威夷语，是“扫帚”的意思，尽管这完全是他名字的错误发音，但为了纪念Chirs我还是用了它。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes中的CI/CD</title>
      <link>https://jimmysong.io/blog/ci-cd-in-kubernetes/</link>
      <pubDate>Thu, 14 Jun 2018 20:33:24 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/ci-cd-in-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;众所周知Kubernetes并不提供代码构建、发布和部署，所有的这些工作都是由CI/CD工作流完成的，最近TheNewStack又出了本小册子（117页）介绍了Kubernetes中CI/CD的现状，&lt;a href=&#34;https://thenewstack.io/ebooks/kubernetes/ci-cd-with-kubernetes/&#34;&gt;下载本书的PDF&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本书的作者有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rob Scott：ReactiveOps公司的SRE&lt;/li&gt;
&lt;li&gt;Janakiram MSV：Janakiram &amp;amp; Associates 的首席分析师&lt;/li&gt;
&lt;li&gt;Craig Martin：Kenzan的高级副总裁&lt;/li&gt;
&lt;li&gt;Container Solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本小册子里主要主要介绍了以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DevOps模式&lt;/li&gt;
&lt;li&gt;云原生应用模式&lt;/li&gt;
&lt;li&gt;使用Spinnaker做持续交付&lt;/li&gt;
&lt;li&gt;云原生时代的监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;devops模式&#34;&gt;DevOps模式&lt;/h3&gt;
&lt;p&gt;这一章从一些流行的自动化运维工具讲起，比如Chef、Puppet等，引申出CI/CD流水线，进而引出Docker和DevOps，将容器如何解除开发和运维之间的隔阂，但同时也带来了一些挑战，比如频繁的发布变更如何控制，如何控制容器集群的行为，如何拆分应用到容器之中等。这是一个专门用于容器编排调度的工具呼之欲出，Kubernetes的出现彻底改变了局面，可以说它直接改变了应用的基础架构。&lt;/p&gt;
&lt;p&gt;Kubernetes细化的应用程序的分解粒度，同时将服务发现、配置管理、负载均衡和健康检查等作为基础设施的功能，简化了应用程序的开发。&lt;/p&gt;
&lt;p&gt;而Kubernetes这种声明式配置尤其适合CI/CD流程，况且现在还有如Helm、Draft、Spinnaker、Skaffold等开源工具可以帮助我们发布Kuberentes应用。&lt;/p&gt;
&lt;p&gt;有了基于Kubernetes的CI/CD流程后，又诞生了GitOps（&lt;a href=&#34;http://weave.works&#34;&gt;WeaveWorks&lt;/a&gt; 的博客中有很多相关文章）和SecOps（Security Operation）。&lt;/p&gt;
&lt;h3 id=&#34;云原生应用模式&#34;&gt;云原生应用模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;云原生是通过构建团队、文化和技术，利用自动化和架构来管理系统的复杂性和解放生产力。——Joe Beda，Heptio CTO，联合创始人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一章的重点是给出了云原生应用的10条关键属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用轻量级的容器打包&lt;/li&gt;
&lt;li&gt;使用最合适的语言和框架开发&lt;/li&gt;
&lt;li&gt;以松耦合的微服务方式设计&lt;/li&gt;
&lt;li&gt;以API为中心的交互和协作&lt;/li&gt;
&lt;li&gt;无状态和有状态服务在架构上界限清晰&lt;/li&gt;
&lt;li&gt;不依赖于底层操作系统和服务器&lt;/li&gt;
&lt;li&gt;部署在自服务、弹性的云基础设施上&lt;/li&gt;
&lt;li&gt;通过敏捷的DevOps流程管理&lt;/li&gt;
&lt;li&gt;自动化能力&lt;/li&gt;
&lt;li&gt;通过定义和策略驱动的资源分配&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者然后将应用程序架构中的不同组件映射到云原生的工作负载中。&lt;/p&gt;
&lt;p&gt;这也是DevOps需要关注的部分，如何将云原生的组件映射为Kubernetes的原语（即Kubernetes里的各种资源对象和概念组合）呢？&lt;/p&gt;
&lt;p&gt;总结概括为以下10条：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要直接部署裸的Pod。&lt;/li&gt;
&lt;li&gt;为工作负载选择合适的Controller。&lt;/li&gt;
&lt;li&gt;使用Init容器确保应用程序被正确的初始化。&lt;/li&gt;
&lt;li&gt;在应用程序工作负载启动之前先启动service。&lt;/li&gt;
&lt;li&gt;使用Deployment history来回滚到历史版本。&lt;/li&gt;
&lt;li&gt;使用ConfigMap和Secret来存储配置。&lt;/li&gt;
&lt;li&gt;在Pod里增加Readiness和Liveness探针。&lt;/li&gt;
&lt;li&gt;给Pod这只CPU和内存资源限额。&lt;/li&gt;
&lt;li&gt;定义多个namespace来限制默认service范围的可视性。&lt;/li&gt;
&lt;li&gt;配置HPA来动态扩展无状态工作负载。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用spinnaker进行持续交付&#34;&gt;使用Spinnaker进行持续交付&lt;/h3&gt;
&lt;p&gt;作者首先讲到了Spinnaker的各种特性，比如面向微服务啦，云原生的交付工具啦，可视化的交付和基础设施啦，支持多个region，支持容器和Kubernetes等等，不一而足，感兴趣大家可以自己看下报告或者登陆&lt;a href=&#34;https://www.spinnaker.io&#34;&gt;Spinnaker官网&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;总之作者就是想说Spinnaker很好很强大啦，足以满足您对云原生应用CI/CD的需求。&lt;/p&gt;
&lt;h3 id=&#34;云原生时代的监控&#34;&gt;云原生时代的监控&lt;/h3&gt;
&lt;p&gt;监控是为了实现系统的可观察性，不要以为监控就是简单的出个监控页面，监控其实包括以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志收集&lt;/li&gt;
&lt;li&gt;监控和指标度量&lt;/li&gt;
&lt;li&gt;追踪&lt;/li&gt;
&lt;li&gt;告警和可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要把其中任何一个方面做好都不容易。作者主要讲述的Prometheus和Grafana的开源监控方案。这一章我不详述，感兴趣大家可以查看报告原文。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>云原生编程语言Ballerina介绍</title>
      <link>https://jimmysong.io/blog/introducing-cloud-native-programming-language-ballerina/</link>
      <pubDate>Sat, 12 May 2018 23:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/introducing-cloud-native-programming-language-ballerina/</guid>
      <description>
        
        
        &lt;p&gt;当我第一眼看到 &lt;a href=&#34;https://ballerina.io&#34;&gt;Ballerina&lt;/a&gt; 还真有点惊艳的感觉。Ballerina 这个单词的意思是“芭蕾舞女演员”。我想他们之所以给公司和这们语言起这个名字，可能是希望它成为云原生这个大舞台中，Ballerina 能像一个灵活的芭蕾舞者一样轻松自如吧！&lt;/p&gt;
&lt;p&gt;Ballerina 是一款开源的编译式的强类型语言，该语言本身的代码可以通过 &lt;a href=&#34;https://github.com/ballerina-platform/ballerina-lang&#34;&gt;GitHub&lt;/a&gt; 上获取。我们可以通过 Ballerina 官网上的&lt;a href=&#34;https://ballerina.io/philosophy/&#34;&gt;设计哲学&lt;/a&gt;页面来对这门云原生编程语言一探究竟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006y8mN6ly1g88c8tj7gxj30ws0u0774.jpg&#34; alt=&#34;云原生编程语言 Ballerina&#34;&gt;&lt;/p&gt;
&lt;p&gt;未来的应用程序应该是基于 API 的，而众多 API 之间的通讯和集成就成了关键问题。Ballerina 是一款使用文本和图形语法编译的、事务的、静态和强类型编程语言。Ballerina 包含分布式系统集成到语言的基本概念，并提供类型安全，并发环境下实现的分布式事务，可靠的消息传递，流处理和工作流。&lt;/p&gt;
&lt;h2 id=&#34;为什么创建-ballerina&#34;&gt;为什么创建 Ballerina？&lt;/h2&gt;
&lt;p&gt;与 ESB 集成仍然是瀑布式开发。你必须部署服务器，配置连接器，使用 XML 编程服务逻辑以及使用 XPath 查询和转换数据。这不是开发者友好的。&lt;/p&gt;
&lt;p&gt;带有 Spring 和 Node.js 等框架的编程语言提供了灵活性，但是它没有使适合于序列并行化、并发模型编程的分布式系统结构变得简单。&lt;/p&gt;
&lt;p&gt;ESB、EAI、BPM 和 DSL 需要 XML 和配置来中断迭代开发流程：编辑、构建、运行和测试。这与运行实际应用之间是有一条鸿沟的，而云原生编程语言 Ballerina 的出现就是为了解决这条“集成鸿沟”的。&lt;/p&gt;
&lt;h2 id=&#34;ballerina-设计理念&#34;&gt;Ballerina 设计理念&lt;/h2&gt;
&lt;h3 id=&#34;序列图&#34;&gt;序列图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;006y8mN6ly1g88c8ji2zdj30u00wwdgm.jpg&#34; alt=&#34;云原生编程语言Ballerina的序列图设计理念&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语言灵感&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;序列图反映了设计开发人员记录的互联的系统。Ballerina 的语法和高效的编码模式要求开发人员使用强大的交互最佳实践来编码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列图可视化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ballerina 的语言语义模型旨在定义独立的各方如何通过结构化的交互沟通。接着，每个 Ballerina 程序都可以显示为其流程的序列图。IntelliJ 和 VS Code 的插件中提供了这些可视化。Ballerina Composer 是一款通过序列图创建 Ballerina 服务的工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actor 与 action&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端、worker 和远程系统在 Ballerina 的序列图中以不同的 actor 表示。在代码中，远程端点通过连接器进行连接，连接器提供类型安全操作。在图形上，每个连接器在序列图中表示为一个 actor（即一条垂直线），action 表示为与这些actor 的交互。&lt;/p&gt;
&lt;h3 id=&#34;并发&#34;&gt;并发&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;006y8mN6ly1g88c99h584j30u00ww752.jpg&#34; alt=&#34;云原生编程语言Ballerina的并发理念&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列图和并发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ballerina 的并发模型是并行优先的，因为与远程方的交互总是涉及多个 worker。Worker 之间的交互作为消息传递进行处理，它们之间没有共享状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Worker 语义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ballerina 的执行模型由称为 woker 的轻量级并行执行单元组成。Worker 使用非阻塞策略来确保没有函数锁定正在执行的线程，例如等待响应的 HTTP I/O调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编程模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Worker 和 fork/join 语义抽象了底层非阻塞方法，以启用更简单的并发编程模型。&lt;/p&gt;
&lt;h3 id=&#34;类型系统&#34;&gt;类型系统&lt;/h3&gt;
&lt;p&gt;下面是 Ballerina 中支持的类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anything&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;integer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;floatingPoint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;blob&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toBlob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonNative&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;xml&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xml&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ballerina&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;supports&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XML&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;natively&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;supports&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ballerina&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrayOfArrays&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unionType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// the empty tuple acts as &amp;#34;null&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringOrInt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;this is a union type&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;intOrNull&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inferred&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ballerina&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myRecord&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myObject&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;类型安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ballerina 有一个结构化的类型系统，包括 primitive、recored、object、tuple 和 union 类型。该类型安全模型在赋值时包含了类型推断，并为连接器、逻辑和网络绑定的有效负载提供了大量的编译时完整性检查。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Union 类型和显式 Null&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;各个网络端点通常会根据其输入和逻辑返回具有不同有效负载类型消息或 error。Ballerina 的类型系统采用了基于 union 类型的方法。Union 类型明确地采用了这种语义，不需要开发人员创建不必要的“包装”类型。这种方法也增强了对 null 值的处理。默认情况下，类型不支持 null 值。开发人员必须明确创建 union 类型来处理 null 值。结果是 null 的异常不会发生，并且语言语法和编译器会识别是否需要 null 处理逻辑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异构数据处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ballerina 类型系统内置丰富的对 JSON、XML、流和表格的支持以及对 ProtoBuf 和 gRPC 的直接支持。这样做的结果是可以获得处理网络负载、SQL 编程和流处理的干净可读的代码。数据转换逻辑不受复杂的生成类型、第三方库代码或其他混淆因素的影响——简单明了的可读代码捕捉与异构数据和转换逻辑的交互。&lt;/p&gt;
&lt;h2 id=&#34;ballerina-如何工作&#34;&gt;Ballerina 如何工作？&lt;/h2&gt;
&lt;p&gt;Ballerina 的语法、代码和编译器创建了运行时服务和部署构件，这些工件都是云原生就绪的，您可以选择将其部署在 IaaS、编排系统或 service mesh 中的。开发人员的体验旨在维护流程，包括快速的编辑、构建、调试周期并集成到团队的生命周期工具链中。&lt;/p&gt;
&lt;h3 id=&#34;运行时架构&#34;&gt;运行时架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;006y8mN6ly1g88cazdfcnj30u00wxjsr.jpg&#34; alt=&#34;云原生编程语言ballerina运行时架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ballerina API 网关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;强制执行身份策略并保证性能。通过代码注解（类似于 Spring 中的注解）进行配置和部署。可以运行嵌入式服务、作为管理多个服务的容器代理或者使用 API 管理解决方案（如 WSO2 API Manager）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ballerina service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表示您的 API 和执行逻辑。服务通过不同的协议运行，内部代码结构被编译为支持 OpenAPI 和 Swagger 的API接口。服务与端点进行通信，无论它们是调用客户端还是其他服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ballerina bridge&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许传统代码和服务参与分布式事务中的 Ballerina 服务。Bridge 将您现有服务与本地代理包装起来，通过调用 Ballerina 服务参与和代理分布式事务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;消息代理、事务协调者和身份代理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为参与事务、事件驱动的通信和为认证流程的 Ballerina 服务提供代理基础设施功能。这些组件可以嵌入到单个服务部署中或者进行单独部署和扩展以管理多个服务。&lt;/p&gt;
&lt;h3 id=&#34;部署架构&#34;&gt;部署架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;006y8mN6ly1g88cbr5hquj30u00wxq46.jpg&#34; alt=&#34;云原生编程语言ballerina部署架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IaaS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用代码注解和构建系统，可以打包 Ballerina 服务和其他运行时组件（如 API 网关）以部署到任何云原生环境中。在 IaaS 环境中，Ballerina 服务可以以虚拟机或容器的方式运行，也可以在构建期间将镜像推送到 registry 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编排器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码注解会触发编译器扩展，从而为不同的编排器（如 Kubernetes 或 Cloud Foundry）生成 Ballerina 组件的工件包。供应商或 DevOps 可以添加自定义代码注解以生成特定于环境的部署，例如自定义蓝色部署算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service mesh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ballerina 可以选择断路器和事务流程逻辑委托给像 Istio 或 Envoy 这样的 service mesh（如果有的话）。如果没有 service mesh 的话，Ballerina 服务将嵌入相应的功能。&lt;/p&gt;
&lt;h3 id=&#34;生命周期&#34;&gt;生命周期&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;006y8mN6ly1g88cck2s8xj30u00wtgni.jpg&#34; alt=&#34;云原生编程语言ballerina生命周期架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ballerina 工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用我们的语言服务器可以在 VS Code 和 IntelliJ 中获取自动补全和调试等智能感知。Ballerina 的关键字和语法结构可以用序列图的方式来表示。使用 Ballerina Composer 可以可视化的编辑 Ballerina 代码。另外它也可以做可视化得运行时和开发环境追踪。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ballerina 构建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将服务编译为经过优化的字节码，以便使用内存调优后的 BVM 运行。提供了使用Testerina 的项目结构、依赖管理、包管理和单元测试。构建锁可以轻松地重新创建服务和部署。生成可执行文件（.balx）或库（.balo）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CI/CD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部署代码注解会触发构建扩展，从而为持续集成、持续交付或编排器环境生成工件。将构建工件推送到您的 CI/CD 系统或完全跳过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将端点连接器、自定义注解和代码功能作为可共享软件包组合在一起。可以在全球共享资源库——Ballerina Central 中 pull 或 push 版本化的软件包。&lt;/p&gt;
&lt;h2 id=&#34;ballerina-的语言特性&#34;&gt;Ballerina 的语言特性&lt;/h2&gt;
&lt;p&gt;Ballerina 设计为云优先，内置对现代 Web 协议和数据格式的支持，完全支持图灵完备编程语言，以及对微服务架构的原生支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 构造&lt;/li&gt;
&lt;li&gt;逻辑语言&lt;/li&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;Json 和 XML&lt;/li&gt;
&lt;li&gt;注解&lt;/li&gt;
&lt;li&gt;稳定和强大的类型&lt;/li&gt;
&lt;li&gt;stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ballerina-中集成了哪些内容&#34;&gt;Ballerina 中集成了哪些内容？&lt;/h2&gt;
&lt;p&gt;Ballerina 是一种旨在&lt;strong&gt;集成简化&lt;/strong&gt;的语言。基于顺序图的交互，Ballerina 内置了对通用集成模式和连接器的支持，包括分布式事务、补偿和断路器。凭借对 JSON 和 XML 的一流支持，Ballerina 能够简单有效地构建跨网络终端的强大集成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型安全端点集成&lt;/li&gt;
&lt;li&gt;类型安全连接器&lt;/li&gt;
&lt;li&gt;可靠的消息传递&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;断路器&lt;/li&gt;
&lt;li&gt;注入攻击防护&lt;/li&gt;
&lt;li&gt;Docker 和 Kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Ballerina 中各个功能的示例代码请查阅 &lt;a href=&#34;https://github.com/ballerina-platform/ballerina-examples&#34;&gt;ballerina-example&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ballerina.io&#34;&gt;Ballerina官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/microservices-docker-kubernetes-serverless-service&#34;&gt;Microservices, Docker, Kubernetes, Serverless, Service Mesh, and Beyond&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>在 Kubernetes 中使用 Envoy mesh 教程</title>
      <link>https://jimmysong.io/blog/envoy-mesh-in-kubernetes-tutorial/</link>
      <pubDate>Sat, 28 Apr 2018 20:26:53 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/envoy-mesh-in-kubernetes-tutorial/</guid>
      <description>
        
        
        &lt;p&gt;本文是在 Kubernetes 集群中，使用 Envoy 来做 mesh，来为一个简单的使用 Python 编写的 Flask 应用程序做反向代理和负载均衡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：本教程中的示例来自 &lt;a href=&#34;https://github.com/datawire/envoy-steps&#34;&gt;envoy-steps&lt;/a&gt;，本文中使用的所有的代码和 YAML 配置见 &lt;a href=&#34;https://github.com/rootsongjc/envoy-tutorial&#34;&gt;envoy-tutorial&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/envoy-mesh-in-kubernetes.png&#34; alt=&#34;Envoy Mesh架构图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;前提条件&lt;/h2&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt; 部署 kubernetes 集群，只要启动集群并安装了 CoreDNS 即可，无须安装其他插件。&lt;/p&gt;
&lt;h2 id=&#34;部署应用&#34;&gt;部署应用&lt;/h2&gt;
&lt;p&gt;我们首先将应用部署到 Kubernetes 中。&lt;/p&gt;
&lt;p&gt;部署 postgres 数据库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 usersvc 镜像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker build -t jimmysong/usersvc:step1 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署 usersvc。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f usersvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 uservc 的 ClusterIP 地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get svc usersvc
kubectl get svc usersvc
NAME      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;    AGE
usersvc   ClusterIP   10.254.176.248   &amp;lt;none&amp;gt;        5000/TCP   11m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进到 node1 中访问该服务，因为我们要访问的是 ClusterIP，在我们自己的电脑上是无法直接访问的，所以进到虚拟机中操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vagrant ssh node1
$ curl 10.254.176.248:5000
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc-7cf5bb9d85-9gx7w&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;user health check OK&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;: true,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;resolvedname&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.33.10.7&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尝试添加一个名为 &lt;code&gt;Alice&lt;/code&gt; 的用户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -X PUT -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ &amp;#34;fullname&amp;#34;: &amp;#34;Alice&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;alicerules&amp;#34; }&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    10.254.176.248/user/alice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将会看到类似如下的输出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;fullname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc-7cf5bb9d85-9gx7w&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;resolvedname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.33.10.7&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;EF43B475F65848C6BE708F436305864B&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尝试再添加一个名为 &lt;code&gt;Bob&lt;/code&gt; 的用户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -X PUT -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ &amp;#34;fullname&amp;#34;: &amp;#34;Bob&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;bobrules&amp;#34; }&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    10.254.176.248/user/bob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将会看到类似如下的输出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;fullname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc-7cf5bb9d85-9gx7w&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;resolvedname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.33.10.7&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;6AC944E7D4254D9A811A82C0FDAC3046&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当应用部署完毕后，我们该部署 edge envoy 了。&lt;/p&gt;
&lt;h2 id=&#34;部署-edge-envoy&#34;&gt;部署 edge envoy&lt;/h2&gt;
&lt;p&gt;部署 edge envoy 的方式很简单，执行下面的命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f edge-envoy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在访问 edge envoy 是就可以路由到 &lt;code&gt;usersvc&lt;/code&gt; 上的，当然直接访问 &lt;code&gt;usersvc&lt;/code&gt; 也是可以的。&lt;/p&gt;
&lt;p&gt;我们看下 edge-envoy 的 envoy 配置文件定义。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;listeners&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://0.0.0.0:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http_connection_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;codec_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;stat_prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ingress_http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;route_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;virtual_hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;backend&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;domains&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout_ms&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;decoder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;router&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;access_log_path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://127.0.0.1:8001&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;clusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connect_timeout_ms&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;strict_dns&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;service_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lb_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;round_robin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://usersvc:80&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;客户端访问 &lt;code&gt;edge-envoy&lt;/code&gt; 的 &lt;code&gt;ClusterIP:8000/user/health&lt;/code&gt; 就可以检查节点的健康状况。&lt;/p&gt;
&lt;h2 id=&#34;部署-usersvc2&#34;&gt;部署 usersvc2&lt;/h2&gt;
&lt;p&gt;删除原来的 &lt;code&gt;usersvc&lt;/code&gt;，部署第二版 &lt;code&gt;usersvc2&lt;/code&gt;，它与原来的 &lt;code&gt;usersvc&lt;/code&gt; 唯一不同的地方是在 &lt;code&gt;entrypoint&lt;/code&gt; 中集成了 envoy，查看 &lt;code&gt;Dockerfile&lt;/code&gt; 中指定的 &lt;code&gt;entrypoint.sh&lt;/code&gt; 的内容便可知。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
python /application/service.py &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
/usr/local/bin/envoy -c /application/envoy.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先删除老的 &lt;code&gt;usersvc&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete -f usersvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用下面的命令部署 &lt;code&gt;usersvc2&lt;/code&gt;，它仍然使用 &lt;code&gt;usersvc&lt;/code&gt; 这个 service 名称。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f usersvc2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Envoy 以 out-of-process 的方式运行，对应用进程没有侵入性，也可以使用 sidecar 的方式运行，让 envoy 与 应用容器运行在同一个 pod 中。&lt;/p&gt;
&lt;p&gt;增加 &lt;code&gt;usersvc2&lt;/code&gt; 的实例个数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl scale --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; deployment/usersvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时我们有 3 个 usersvc 实例，现在通过 &lt;code&gt;edge-envoy&lt;/code&gt; 的 &lt;code&gt;ClusterIP:8000/user/health&lt;/code&gt; 检查节点的健康状况时，是不是会轮询的访问到后端的的 &lt;code&gt;usersvc2&lt;/code&gt; 的实例呢？&lt;/p&gt;
&lt;p&gt;我们当初在 &lt;code&gt;edge-node&lt;/code&gt; 的 &lt;code&gt;envoy.json&lt;/code&gt; 中配置过 cluster 的，其中指定了 &lt;code&gt;lb_type&lt;/code&gt; 为 &lt;code&gt;round_robin&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;cluster_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;clusters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;connect_timeout_ms&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;strict_dns&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;service_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;usersvc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lb_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;round_robin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://usersvc:80&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而且该 &lt;code&gt;serivce_name&lt;/code&gt; 也可以被 DNS 正确解析。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@usersvc-55b6857d44-gcg5c:/application# nslookup usersvc
Server:         10.254.0.2
Address:        10.254.0.2#53

Name:   usersvc.envoy-tutorial.svc.cluster.local
Address: 10.254.123.166
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;答案是否定的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然通过 DNS 可以正确的解析出 serivce 的 ClusterIP，但是负载均衡不再通过 kube-proxy 实现，所以不论我们访问多少次 &lt;code&gt;edge-envoy&lt;/code&gt; 永远只能访问到一个固定的后端 &lt;code&gt;usersvc&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;服务发现服务---sds&#34;&gt;服务发现服务 - SDS&lt;/h2&gt;
&lt;p&gt;Kubernetes 中的 DNS 可以发现所有 serivce 的 ClusterIP，但是 DNS 中不包括所有 endpoint 地址，我们需要一个 SDS（服务发现服务）来发现服务的所有的 endpoint，我们将修改 &lt;code&gt;lb_type&lt;/code&gt;，使用 &lt;code&gt;sds&lt;/code&gt; 替代 &lt;code&gt;strict_dns&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;执行下面的命令部署 SDS。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bassh&#34; data-lang=&#34;bassh&#34;&gt;kubectl apply -f usersvc-sds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为在添加了 SDS 之后需要修改 &lt;code&gt;edge-envoy&lt;/code&gt; 中的 &lt;code&gt;envoy.josn&lt;/code&gt; 配置，在 &lt;code&gt;clusters&lt;/code&gt; 字段中增加 &lt;code&gt;sds&lt;/code&gt; 信息，我们将所有的配置都写好了，重新打包成了镜像，我们需要先删除之前部署的 &lt;code&gt;edge-envoy&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete -f edge-envoy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署新的 &lt;code&gt;edge-envoy2&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f edge-envoy2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;连续访问 &lt;code&gt;usersvc&lt;/code&gt; 12 次看看输出结果如何。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://172.17.8.101:30800/user/alice
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 12&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; curl -s &lt;span class=&#34;nv&#34;&gt;$URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;resolvedname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;tr -d &lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;tr -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;tr -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到类似如下的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.71.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.88.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.10.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.71.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.88.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.10.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.71.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.88.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.10.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.71.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.88.2&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;resolvedname:172.33.10.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再查看下 &lt;code&gt;usersvc&lt;/code&gt; 服务的所有 pod 的 IP 地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -l &lt;span class=&#34;nv&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;usersvc -o wide
NAME                       READY     STATUS    RESTARTS   AGE       IP            NODE
usersvc-55b6857d44-mkfpv   1/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          9m        172.33.88.2   node1
usersvc-55b6857d44-q98jg   1/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          9m        172.33.71.2   node2
usersvc-55b6857d44-s2znk   1/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          9m        172.33.10.2   node3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到 round-robin 负载均衡生效了。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datawire.io/envoyproxy/envoy-flask-kubernetes/&#34;&gt;Part 2: Deploying Envoy with a Python Flask webapp and Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/datawire/envoy-steps&#34;&gt;envoy-steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/envoy-tutorial&#34;&gt;envoy-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Envoy 的架构与基本配置解析</title>
      <link>https://jimmysong.io/blog/envoy-archiecture-and-terminology/</link>
      <pubDate>Fri, 27 Apr 2018 17:16:50 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/envoy-archiecture-and-terminology/</guid>
      <description>
        
        
        &lt;p&gt;在了解一门技术之前一开始就要了解其中的基本概念和术语，只有融入了该语境才能理解这门技术。本文将为大家介绍 Envoy 中的基本术语和重点概念。&lt;/p&gt;
&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;
&lt;p&gt;下图是 Envoy proxy 的架构图，显示了 host B 经过 Envoy 访问 host A 的过程。每个 host 上都可能运行多个 service，Envoy 中也可能有多个 Listener，每个 Listener 中可能会有多个 filter 组成了 chain。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-arch.jpg&#34; alt=&#34;Envoy proxy 架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中的基本术语将在下面解释。&lt;/p&gt;
&lt;h2 id=&#34;基本术语&#34;&gt;基本术语&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;：能够进行网络通信的实体（在手机或服务器等上的应用程序）。在 Envoy 中主机是指逻辑网络应用程序。只要每台主机都可以独立寻址，一块物理硬件上就运行多个主机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downstream&lt;/strong&gt;：下游（downstream）主机连接到 Envoy，发送请求并或获得响应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Upstream&lt;/strong&gt;：上游（upstream）主机获取来自 Envoy 的链接请求和响应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cluster&lt;/strong&gt;: 集群（cluster）是 Envoy 连接到的一组逻辑上相似的上游主机。Envoy 通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/service_discovery#arch-overview-service-discovery&#34;&gt;服务发现&lt;/a&gt;发现集群中的成员。Envoy 可以通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/health_checking#arch-overview-health-checking&#34;&gt;主动运行状况检查&lt;/a&gt;来确定集群成员的健康状况。Envoy 如何将请求路由到集群成员由&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/load_balancing#arch-overview-load-balancing&#34;&gt;负载均衡策略&lt;/a&gt;确定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mesh&lt;/strong&gt;：一组互相协调以提供一致网络拓扑的主机。Envoy mesh 是指一组 Envoy 代理，它们构成了由多种不同服务和应用程序平台组成的分布式系统的消息传递基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行时配置&lt;/strong&gt;：与 Envoy 一起部署的带外实时配置系统。可以在无需重启 Envoy 或 更改 Envoy 主配置的情况下，通过更改设置来影响操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Listener&lt;/strong&gt;: 侦听器（listener）是可以由下游客户端连接的命名网络位置（例如，端口、unix域套接字等）。Envoy 公开一个或多个下游主机连接的侦听器。一般是每台主机运行一个 Envoy，使用单进程运行，但是每个进程中可以启动任意数量的 Listener（监听器），目前只监听 TCP，每个监听器都独立配置一定数量的（L3/L4）网络过滤器。Listenter 也可以通过 Listener Discovery Service（&lt;strong&gt;LDS&lt;/strong&gt;）动态获取。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Listener filter&lt;/strong&gt;：Listener 使用 listener filter（监听器过滤器）来操作链接的元数据。它的作用是在不更改 Envoy 的核心功能的情况下添加更多的集成功能。Listener filter 的 API 相对简单，因为这些过滤器最终是在新接受的套接字上运行。在链中可以互相衔接以支持更复杂的场景，例如调用速率限制。Envoy 已经包含了多个监听器过滤器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Http Route Table&lt;/strong&gt;：HTTP 的路由规则，例如请求的域名，Path 符合什么规则，转发给哪个 Cluster。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Health checking&lt;/strong&gt;：健康检查会与SDS服务发现配合使用。但是，即使使用其他服务发现方式，也有相应需要进行主动健康检查的情况。详见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/health_checking&#34;&gt;health checking&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;xds&#34;&gt;xDS&lt;/h2&gt;
&lt;p&gt;xDS 是一个关键概念，它是一类发现服务的统称，其包括如下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDS：Cluster Discovery Service&lt;/li&gt;
&lt;li&gt;EDS：Endpoint Discovery Service&lt;/li&gt;
&lt;li&gt;SDS：Secret Discovery Service&lt;/li&gt;
&lt;li&gt;RDS：Route Discovery Service&lt;/li&gt;
&lt;li&gt;LDS：Listener Discovery Service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正是通过对 xDS 的请求来动态更新 Envoy 配置，另外还有个 ADS（Aggregated Discovery Service）通过聚合的方式解决以上 xDS 的更新顺序问题。&lt;/p&gt;
&lt;h2 id=&#34;envoy-mesh&#34;&gt;Envoy Mesh&lt;/h2&gt;
&lt;p&gt;Envoy Mesh 指的是由 envoy 做负载均衡和代理的 mesh。该 Mesh 中会包含两类 envoy：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edge envoy：即流量进出 mesh 时候的 envoy，相当于 kubernetes 中的 ingress。&lt;/li&gt;
&lt;li&gt;Service envoy：服务 envoy 是跟每个 serivce 实例一起运行的，应用程序无感知的进程外工具，在 kubernetes 中会与应用容器以 sidecar 形式运行在同一个 pod 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Envoy 即可以单独作为 edge envoy，也可以仅做 service envoy 使用，也可以两者同时使用。Mesh 中的所有 envoy 会共享路由信息。&lt;/p&gt;
&lt;h2 id=&#34;envoy-配置&#34;&gt;Envoy 配置&lt;/h2&gt;
&lt;p&gt;Envoy 中的配置包括两大类：listenner 配置和 cluster 配置。&lt;/p&gt;
&lt;h3 id=&#34;listener-配置&#34;&gt;Listener 配置&lt;/h3&gt;
&lt;p&gt;我们知道 Envoy 中可以配置一组 listener 以实现复杂的处理逻辑。Listener 中设置监听的 TCP 端口，还有一组 filter 对这些端口上的数据流进行处理。如下所示，该示例来自&lt;a href=&#34;envoy-front-proxy.md&#34;&gt;使用Envoy 作为前端代理&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;listeners&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;filter_chains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.http_connection_manager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;codec_type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;auto&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;stat_prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ingress_http&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;local_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;backend&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/service/1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/service/2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个 &lt;code&gt;http_connection_manager&lt;/code&gt; 例子，其中必须包含 &lt;code&gt;virtual_hosts&lt;/code&gt; 配置，而 &lt;code&gt;virtual_hosts&lt;/code&gt; 配置中必须包含以下几项配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：服务名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domains&lt;/code&gt;：DNS 域名，必须能跟 &lt;code&gt;virtual_host&lt;/code&gt; 的 URL 匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routes&lt;/code&gt;：路由列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个路由中还可以包含以下配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;：URL 路径前缀&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;/code&gt;：处理该请求的 envoy cluster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout_ms&lt;/code&gt;：当出错时的超时时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上面的例子中，我们还需要定义 &lt;code&gt;service1&lt;/code&gt; cluster 和 &lt;code&gt;service2&lt;/code&gt; cluster。&lt;/p&gt;
&lt;h3 id=&#34;cluster-配置&#34;&gt;Cluster 配置&lt;/h3&gt;
&lt;p&gt;Cluster 是一组逻辑相似的主机配置，定义哪些主机属于一个服务，cluster 的配置中包含了服务发现和负载均衡方式配置。依然是参考&lt;a href=&#34;envoy-front-proxy.md&#34;&gt;使用Envoy 作为前端代理&lt;/a&gt;中的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;connect_timeout&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;25s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;strict_dns&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;lb_policy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;round_robin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;http2_protocol_options&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;connect_timeout&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;25s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;strict_dns&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;lb_policy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;round_robin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;http2_protocol_options&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cluster 的配置中至少包含以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：cluster 名称，就是服务名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;：该 cluster 怎么知道主机是否启动？即服务发现类型，有以下方式：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;：监听 cluster 中的所有主机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strict_dns&lt;/code&gt;：envoy 会监听 DNS，每个匹配的 A 记录都会认定为有效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logical_dns&lt;/code&gt;：envoy 将使用 DNS 来增加主机，如果 DNS 不再返回该主机也不会删除这些主机信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sds&lt;/code&gt;：即 Serivce Discovery Serivce，envoy 访问外部的 REST 获取 cluster 成员信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lb_type&lt;/code&gt;：cluster 的负载均衡类型，有以下方式：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;round_robin&lt;/code&gt;：轮询主机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weighted_least_request&lt;/code&gt;：最近获得最少请求的主机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random&lt;/code&gt;：随机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hosts&lt;/code&gt;：能够定义 cluster 中主机的 URL 地址，通常是&lt;code&gt;tcp://&lt;/code&gt; URL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.getambassador.io/resources/getting-started-envoyproxy-microservices-resilience//&#34;&gt;Part 1: Getting started with Envoy Proxy for microservices resilience - getambassador.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Envoy 作为前端代理</title>
      <link>https://jimmysong.io/blog/envoy-as-front-proxy/</link>
      <pubDate>Sun, 22 Apr 2018 17:13:15 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/envoy-as-front-proxy/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;Envoy&lt;/a&gt; 是一款由 Lyft 开源的，使用 C++ 编写的 L7 代理和通信总线，目前是 &lt;a href=&#34;https://cncf.io&#34;&gt;CNCF&lt;/a&gt; 旗下的开源项目，代码托管在 GitHub 上，它也是 &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; service mesh 中默认的 data plane。本文将给出使用 Envoy 作为 service mesh 的数据平面的示例，应用使用 docker-compose 编排。&lt;/p&gt;
&lt;h2 id=&#34;特性&#34;&gt;特性&lt;/h2&gt;
&lt;p&gt;Envoy 包括如下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程外架构，不侵入应用进程&lt;/li&gt;
&lt;li&gt;使用现代版 C++11 代码&lt;/li&gt;
&lt;li&gt;L3/L4 filter 架构&lt;/li&gt;
&lt;li&gt;HTTP L7 filter 架构&lt;/li&gt;
&lt;li&gt;支持 HTTP/2&lt;/li&gt;
&lt;li&gt;HTTP L7 routing&lt;/li&gt;
&lt;li&gt;支持 gRPC&lt;/li&gt;
&lt;li&gt;支持 MongoDB L7&lt;/li&gt;
&lt;li&gt;动态配置&lt;/li&gt;
&lt;li&gt;最佳可观测性&lt;/li&gt;
&lt;li&gt;支持 front/edge proxy&lt;/li&gt;
&lt;li&gt;高级负载均衡&lt;/li&gt;
&lt;li&gt;健康检查&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;支持 DynamoDB L7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Envoy 本身无法构成一个完整的 Service Mesh，但是它可以作为 service mesh 中的应用间流量的代理，负责 service mesh 中的数据层。&lt;/p&gt;
&lt;p&gt;更多信息请参考 &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy 官网&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;envoy-作为前端代理&#34;&gt;Envoy 作为前端代理&lt;/h2&gt;
&lt;p&gt;本文是使用 Envoy 作为前端代理的介绍，仅使用 docker 容器和 docker-compose 做编排在单机中运行，帮助我们从更底层了解 Envoy，当我们将 Envoy 作为 Istio Service Mesh 的 data panel 的时候将更加游刃有余。&lt;/p&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;
&lt;p&gt;Envoy 中的所有规则配置跟 Kubernetes 一样都是通过 YAML 文件来完成的。在继续下面的步骤之前，首先克隆 Envoy 的 GitHub repo。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/envoyproxy/envoy.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行-sandbox-测试&#34;&gt;运行 sandbox 测试&lt;/h2&gt;
&lt;p&gt;Envoy 官方提供了以下打包用例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/front_proxy&#34;&gt;Front Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/zipkin_tracing&#34;&gt;Zipkin Tracing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/jaeger_tracing&#34;&gt;Jaeger Tracing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/grpc_bridge&#34;&gt;gRPC Bridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全部可以使用 &lt;code&gt;docker-compose&lt;/code&gt; 运行，代码可以在 &lt;a href=&#34;https://github.com/envoyproxy/envoy/tree/master/examples&#34;&gt;https://github.com/envoyproxy/envoy/tree/master/examples&lt;/a&gt; 找到。&lt;/p&gt;
&lt;h2 id=&#34;front-proxy&#34;&gt;Front proxy&lt;/h2&gt;
&lt;p&gt;Envoy 在 envoymesh 的边缘做反向代理，详细使用方式见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/front_proxy&#34;&gt;https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/front_proxy&lt;/a&gt;，在此我将解说下以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy 是如何作为进程外架构运行的？&lt;/li&gt;
&lt;li&gt;为何说 Envoy 是无侵入式架构？&lt;/li&gt;
&lt;li&gt;Envoy 作为边缘反向代理能做什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本示例的架构图如下所示，此时 Envoy 将作为一个反向代理，类似于 Nginx，但与 Nginx 不同的是它还会作为一个进程，伴随每个服务一起运行在同一个容器中（在 Kubernetes 中可以作为 Sidecar 与应用容器一起运行在同一个 Pod 中）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoyproxy-docker-compose.png&#34; alt=&#34;Front proxy 部署结构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;在此示例中一共有 3 个服务，我们需要为其创建容器编排的 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;version&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;services&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;front-envoy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;build&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;context&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;dockerfile&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Dockerfile-frontenvoy&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./front-envoy.yaml&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/front-envoy.yaml&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;networks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoymesh&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;expose&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;8001&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;8000:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;8001:8001&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;service1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;build&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;context&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;dockerfile&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Dockerfile-service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./service-envoy.yaml&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/service-envoy.yaml&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;networks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;envoymesh&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;aliases&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;environment&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SERVICE_NAME=&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;expose&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;service2&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;build&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;context&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;dockerfile&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Dockerfile-service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./service-envoy.yaml&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/service-envoy.yaml&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;networks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;envoymesh&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;aliases&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;environment&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;SERVICE_NAME=&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;expose&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;networks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;envoymesh&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 docker-compose 启动可以保证三个服务都在同一个网络内，即 &lt;code&gt;frontproxy_envoymesh&lt;/code&gt; 网络中。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;front-envoy&lt;/code&gt; 是前端（边缘）Envoy 服务，用来做反向代理，它使用的是 &lt;code&gt;Dockerfile-frontenvoy&lt;/code&gt; 文件来构建镜像的，我们来看下该 &lt;code&gt;Dockerfile&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; envoyproxy/envoy:latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -q install -y &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    curl&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; /usr/local/bin/envoy -c /etc/front-envoy.yaml --service-cluster front-proxy&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;/etc/front-envoy.yaml&lt;/code&gt; 是本地的 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 挂载进去的。我们看下该文件的内容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;static_resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;listeners&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;filter_chains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.http_connection_manager&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;codec_type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;auto&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;stat_prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ingress_http&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;route_config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;local_route&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;virtual_hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;backend&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;domains&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;routes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/service/1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;match&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;prefix&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/service/2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;route&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;http_filters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;envoy.router&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;clusters&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;connect_timeout&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;25s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;strict_dns&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;lb_policy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;round_robin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;http2_protocol_options&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;connect_timeout&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;25s&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;strict_dns&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;lb_policy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;round_robin&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;http2_protocol_options&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;hosts&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;service2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;admin&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;access_log_path&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/null&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;socket_address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;address&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;port_value&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8001&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到其中包括了三大配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;static_resources&lt;/strong&gt;：路由配置信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster&lt;/strong&gt;：envoymesh 的服务注册信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admin&lt;/strong&gt;：管理接口，可以通过访问 8001 端口的，访问 &lt;code&gt;/stats&lt;/code&gt;  获取当前 envoymesh 的一些统计信息，访问 &lt;code&gt;/server_info&lt;/code&gt; 获取 Envoy 的版本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;docker-compose&lt;/code&gt; 启动三个容器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
envoy/examples/front-proxy
$ docker-compose up --build -d
$ docker-compose ps
        Name                       Command               State      Ports
-------------------------------------------------------------------------------------------------------------
example_service1_1      /bin/sh -c /usr/local/bin/ ... Up       80/tcp
example_service2_1      /bin/sh -c /usr/local/bin/ ... Up       80/tcp
example_front-envoy_1   /bin/sh -c /usr/local/bin/ ... Up       0.0.0.0:8000-&amp;gt;80/tcp, 0.0.0.0:8001-&amp;gt;8001/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们下面将过一遍 Envoy 作为前端代理的所有功能，这些功能是通用功能。&lt;/p&gt;
&lt;h3 id=&#34;路由&#34;&gt;路由&lt;/h3&gt;
&lt;p&gt;访问 service1 &lt;a href=&#34;http://localhost:8000/service/1&#34;&gt;http://localhost:8000/service/1&lt;/a&gt; 将看到如下输出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -v localhost:8000/service/1
* 
Trying ::1...
* TCP_NODELAY &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
* Connected to localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; port &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0)&lt;/span&gt;
&amp;gt; GET /service/1 HTTP/1.1
&amp;gt; Host: localhost:8000
&amp;gt; User-Agent: curl/7.54.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&amp;lt; content-type: text/html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
&amp;lt; content-length: &lt;span class=&#34;m&#34;&gt;89&lt;/span&gt;
&amp;lt; server: envoy
&amp;lt; date: Fri, &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 08:26:33 GMT
&amp;lt; x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;
&amp;lt;
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: a3e4185a9a49 resolvedhostname: 172.18.0.4
* Connection &lt;span class=&#34;c1&#34;&gt;#0 to host localhost left intact&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 service2 &lt;a href=&#34;http://localhost:8000/service/2&#34;&gt;http://localhost:8000/service/2&lt;/a&gt; 将看到如下输出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;*   Trying ::1...
* TCP_NODELAY &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
* Connected to localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; port &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0)&lt;/span&gt;
&amp;gt; GET /service/2 HTTP/1.1
&amp;gt; Host: localhost:8000
&amp;gt; User-Agent: curl/7.54.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&amp;lt; content-type: text/html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
&amp;lt; content-length: &lt;span class=&#34;m&#34;&gt;89&lt;/span&gt;
&amp;lt; server: envoy
&amp;lt; date: Fri, &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 08:27:27 GMT
&amp;lt; x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&amp;lt;
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: f6650e1911a0 resolvedhostname: 172.18.0.3
* Connection &lt;span class=&#34;c1&#34;&gt;#0 to host localhost left intact&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到访问请求被路由到了正确的服务后端。&lt;/p&gt;
&lt;h3 id=&#34;负载均衡&#34;&gt;负载均衡&lt;/h3&gt;
&lt;p&gt;增加 service1 的示例数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker-compose scale &lt;span class=&#34;nv&#34;&gt;service1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
WARNING: The scale &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; is deprecated. Use the up &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; with the --scale flag instead.
Starting frontproxy_service1_1 ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating frontproxy_service1_2 ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating frontproxy_service1_3 ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;

$ docker-compose ps
          Name                        Command               State                            Ports
---------------------------------------------------------------------------------------------------------------------------
frontproxy_front-envoy_1   /usr/bin/dumb-init -- /bin ...   Up      10000/tcp, 0.0.0.0:8000-&amp;gt;80/tcp, 0.0.0.0:8001-&amp;gt;8001/tcp
frontproxy_service1_1      /bin/sh -c /usr/local/bin/ ...   Up      10000/tcp, 80/tcp
frontproxy_service1_2      /bin/sh -c /usr/local/bin/ ...   Up      10000/tcp, 80/tcp
frontproxy_service1_3      /bin/sh -c /usr/local/bin/ ...   Up      10000/tcp, 80/tcp
frontproxy_service2_1      /bin/sh -c /usr/local/bin/ ...   Up      10000/tcp, 80/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到现在 service1 已经有了 3 个实例，现在再访问 service1 &lt;a href=&#34;http://localhost:8000/service/1&#34;&gt;http://localhost:8000/service/1&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; curl localhost:8000/service/1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;sleep 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: a3e4185a9a49 resolvedhostname: 172.18.0.4
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: fe44dba64122 resolvedhostname: 172.18.0.5
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: c5b9f1289e0f resolvedhostname: 172.18.0.6
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: a3e4185a9a49 resolvedhostname: 172.18.0.4
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: fe44dba64122 resolvedhostname: 172.18.0.5
Hello from behind Envoy &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;service 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;! hostname: c5b9f1289e0f resolvedhostname: 172.18.0.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到对 service1 的已经有负载均衡了，使用的策略是 &lt;code&gt;round_robin&lt;/code&gt;，这些都是在 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 文件中的 &lt;code&gt;cluster&lt;/code&gt; 项下配置的。&lt;/p&gt;
&lt;h3 id=&#34;admin-端点&#34;&gt;admin 端点&lt;/h3&gt;
&lt;p&gt;访问 &lt;a href=&#34;http://localhost:8001&#34;&gt;http://localhost:8001&lt;/a&gt; 可以看到 Envoy admin 提供以下管理 API 端点。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;Admin 主页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/certs&lt;/td&gt;
&lt;td&gt;打印机器上的 certs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/clusters&lt;/td&gt;
&lt;td&gt;upstream cluster 状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/config_dump&lt;/td&gt;
&lt;td&gt;输出当前的 Envoy 配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/cpuprofiler&lt;/td&gt;
&lt;td&gt;开启/关闭 CPU profiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/healthcheck/fail&lt;/td&gt;
&lt;td&gt;导致服务失败健康检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/healthcheck/ok&lt;/td&gt;
&lt;td&gt;导致服务通过健康检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/help&lt;/td&gt;
&lt;td&gt;打印管理命令的帮助信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/hot_restart_version&lt;/td&gt;
&lt;td&gt;打印热重启兼容版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/listeners&lt;/td&gt;
&lt;td&gt;打印 listener 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/logging&lt;/td&gt;
&lt;td&gt;查询/更改日志级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/quitquitquit&lt;/td&gt;
&lt;td&gt;退出服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/reset_counters&lt;/td&gt;
&lt;td&gt;将计数器重置为 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/runtime&lt;/td&gt;
&lt;td&gt;打印运行时值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/runtime_modify&lt;/td&gt;
&lt;td&gt;修改运行时值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/server_info&lt;/td&gt;
&lt;td&gt;打印服务器版本/状态信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/stats&lt;/td&gt;
&lt;td&gt;打印服务器状态统计信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/stats/prometheus&lt;/td&gt;
&lt;td&gt;打印 prometheus 格式的服务器状态统计信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Envoy 提供了 API 管理端点，可以对 Envoy 进行动态配置，参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api&#34;&gt;v2 API reference&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/front_proxy&#34;&gt;Front proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

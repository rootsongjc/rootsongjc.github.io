
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – DevOps</title>
    <link>https://jimmysong.io/tags/devops/</link>
    <description>Recent content in DevOps on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Mon, 20 Jan 2025 16:50:25 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>探索云原生可观测性：技术与团队协作的深度结合</title>
      <link>https://jimmysong.io/blog/cloud-native-observability-devops/</link>
      <pubDate>Mon, 20 Jan 2025 16:50:25 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/cloud-native-observability-devops/</guid>
      <description>
        
        
        &lt;p&gt;最近读了 TheNewStack 发布的电子书《&lt;a href=&#34;https://thenewstack.io/ebooks/observability/cloud-native-observability-for-devops-teams/&#34; title=&#34;Cloud Native Observability for DevOps Teams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Native Observability for DevOps Teams&lt;/a&gt;》，虽然这本书是 2022 年出品的，但给我了很大的启发。它不仅讨论了技术工具，还深入探讨了团队协作、文化建设和未来趋势的结合点。在这本书里，“观察”不仅仅是看到数据，而是看清背后的意义。可以说，它从根本上改变了我对可观测性的理解。&lt;/p&gt;
&lt;h2 id=&#34;核心内容&#34;&gt;核心内容&lt;/h2&gt;
&lt;p&gt;本书从基础定义到实际操作，系统地阐述了云原生可观测性的重要性及其实现方式。通过具体的工具和策略，它帮助读者理解如何整合指标、日志、追踪和混沌工程等维度，全面掌控分布式系统的健康状况，为 DevOps 团队提供高效的决策支持。&lt;/p&gt;
&lt;h3 id=&#34;可观测性的定义与价值&#34;&gt;可观测性的定义与价值&lt;/h3&gt;
&lt;p&gt;书中开篇就点明：可观测性是通过系统的外部信号推断内部状态的能力。不仅是传统的指标（Metrics）、日志（Logs）、追踪（Tracing）三根支柱的组合，而是一种综合性、全局化的分析方法。正如作者所说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Observability isn’t just the ability to see each piece at a time; it’s also the ability to understand the broader picture and how these pieces combine.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;云原生环境的挑战&#34;&gt;云原生环境的挑战&lt;/h3&gt;
&lt;p&gt;书中特别强调了 Kubernetes 环境中日志和监控的复杂性。Kubernetes 没有内置的完整可观测性解决方案，只提供了基础功能，比如 &lt;code&gt;kubectl&lt;/code&gt; 查看对象状态，而更高级的功能需要依赖第三方工具如 Fluentd 和 Prometheus。&lt;/p&gt;
&lt;h3 id=&#34;实践指南&#34;&gt;实践指南&lt;/h3&gt;
&lt;p&gt;书中在实践部分提到了多种实现可观测性的具体策略和工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用日志&lt;/strong&gt;：通过 Fluentd 或类似工具采集容器内的标准输出日志，帮助开发者定位应用问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集群日志&lt;/strong&gt;：收集 Kubernetes 核心组件如 kube-apiserver 和 etcd 的日志，适合排查系统级别的故障。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件日志&lt;/strong&gt;：利用 &lt;code&gt;kubectl get events&lt;/code&gt; 快速了解集群中资源的状态变化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;审计日志&lt;/strong&gt;：记录 API 请求，便于安全审查和权限问题的定位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混沌工程&lt;/strong&gt;：利用工具如 Chaos Mesh 和 Litmus Chaos，验证系统在高压或异常情况下的表现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些实践指南强调了工具与策略的结合，从而实现全面的可观测性。&lt;/p&gt;
&lt;h2 id=&#34;我的思考与观点&#34;&gt;我的思考与观点&lt;/h2&gt;
&lt;h3 id=&#34;超越数据本身的观察力&#34;&gt;超越数据本身的“观察力”&lt;/h3&gt;
&lt;p&gt;书中强调，单纯收集数据并不能解决问题，关键在于跨维度数据的整合与分析。例如，在性能问题排查时，指标和追踪往往无法直接关联，而这正是现有工具的短板。未来，统一数据存储和分析视角的工具，比如 OpenTelemetry 提倡的标准化方法，可能是突破口。&lt;/p&gt;
&lt;h3 id=&#34;ai-与可观测性的结合&#34;&gt;AI 与可观测性的结合&lt;/h3&gt;
&lt;p&gt;随着 AI 技术的发展，可观测性工具也可以更智能化。例如，通过机器学习预测异常，或是自动推荐优化策略。这不仅能减少人为干预，还能提升故障响应速度。正如作者在混沌工程部分提到的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Instead of waiting for something to happen and finding out how your application fares, you put it through duress under controlled conditions to identify weaknesses and fix them.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;从团队协作到文化转型&#34;&gt;从团队协作到文化转型&lt;/h3&gt;
&lt;p&gt;书中提到“DevOps 的终极目标是跨团队的协作与同理心”，这点深有共鸣。尤其是在复杂分布式系统中，开发和运维团队往往各自为战，导致沟通断层。跨团队协作的关键在于工具提供的透明性与共享视角，而不仅仅是技术能力。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这本书的独到之处在于它从技术和人文两个角度同时切入，它让我意识到，可观测性不仅是一组工具的集合，而是一种文化、一种能力，帮助我们更深刻地理解系统，推动团队协作，并在复杂的云原生环境中建立起真正的“透明化”。&lt;/p&gt;
&lt;p&gt;最后，我想引用书中一段非常打动我的话来结尾：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Observability lets you see the beautiful and complete picture that is your production software systems.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
                           
    <item>
      <title>2022 年云和 DevOps 趋势报告</title>
      <link>https://jimmysong.io/blog/cloud-and-devops-trend-2022/</link>
      <pubDate>Thu, 23 Jun 2022 11:27:49 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/cloud-and-devops-trend-2022/</guid>
      <description>
        
        
        &lt;p&gt;近日 InfoQ 发布了 &lt;a href=&#34;https://www.infoq.com/articles/devops-and-cloud-trends-2022/&#34; title=&#34;DevOps and Cloud InfoQ Trends Report – June 2022&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps and Cloud InfoQ Trends Report – June 2022&lt;/a&gt;，因为报告中所覆盖的技术领域过于宽泛，本文仅仅是对这篇报告的一点个人解读。我基本认同我关注的这些技术中「创新者」和「后期大众」阶段技术的划分。&lt;/p&gt;
&lt;h2 id=&#34;报告概括&#34;&gt;报告概括&lt;/h2&gt;
&lt;p&gt;下面这段节选自原文的 takeaways：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据可观测性将帮助企业更好地了解和排除其数据密集型系统的故障。&lt;/li&gt;
&lt;li&gt;云原生应用采用无服务器和分布式 SQL 数据库的情况也越来越多。&lt;/li&gt;
&lt;li&gt;FinOps 将走向成熟。&lt;/li&gt;
&lt;li&gt;eBPF 和 WASM 是令人振奋的新技术，它们被用来在服务网格内开启可观测性、监控和安全的新方法。我们认为这处于创新者阶段。&lt;/li&gt;
&lt;li&gt;低代码或无代码平台继续成熟，特别是用于内部工具和自动化用途。&lt;/li&gt;
&lt;li&gt;我们还看到「开发者体验作为决策驱动力」的趋势得到了更多的关注，特别是在云平台领域。「平台工程师」的角色正在许多规模的组织中出现，以支持相关平台抽象、API 和工具的建设。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;报告解读&#34;&gt;报告解读&lt;/h2&gt;
&lt;p&gt;这篇报告为什么命名为「DevOps 和云」我就不太清楚了，我觉得把名字换成「云计算」、「云原生」也是可以的，可能是为了延续之前的报告风格吧，毕竟 InfoQ 已经推出过很多期此类报告了。这类报告都是根据「鸿沟理论」将当前流行的技术分成以下阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者&lt;/li&gt;
&lt;li&gt;早期采用者&lt;/li&gt;
&lt;li&gt;早期大众&lt;/li&gt;
&lt;li&gt;后期大众&lt;/li&gt;
&lt;li&gt;落后者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 InfoQ 的报告中没有「落后者」这个阶段。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    什么是鸿沟理论？
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    鸿沟理论指的就是高科技产品在市场营销过程中遭遇的最大障碍：高科技企业的早期市场和主流市场之间存在着一条巨大的鸿沟，能否顺利跨越鸿沟并进入主流市场，成功赢得实用主义者的支持，就决定了一项高科技产品的成败。实际上每项新技术都会经历鸿沟。关键在予采取适当的策略令高科技企业成功地“跨越鸿沟”，摩尔在这本书中就告诉了人们一些欠经考验的制胜秘诀。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;下图展示的是跨越鸿沟理论中不同阶段人群的分类及占比。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/chasm_hu5927790780296627922.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/chasm.jpg&#34; data-img=&#34;/blog/cloud-and-devops-trend-2022/chasm.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;900&#34; alt=&#34;image&#34; data-caption=&#34;跨越鸿沟理论中不同阶段人群的分类及占比&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;跨越鸿沟理论中不同阶段人群的分类及占比&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们来看下 InfoQ 6 月新出的「云和 DevOps」趋势报告。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/infoq_hu12333247981050968664.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/infoq.jpg&#34; data-img=&#34;/blog/cloud-and-devops-trend-2022/infoq.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;841&#34; alt=&#34;image&#34; data-caption=&#34;软件开发云和 DevOps 趋势图（2022 年 6 月）&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;软件开发云和 DevOps 趋势图（2022 年 6 月）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们可以看到像低代码、eBPF、Data Mesh、WASM 已经出现在创新者视线里了。Service Mesh 还在「早期采用者」阶段，这点比我预想的要慢好多，我以为服务网格已经跨越鸿沟了，你觉得呢？&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

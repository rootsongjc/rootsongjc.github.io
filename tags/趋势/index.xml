<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 趋势</title>
    <link>https://jimmysong.io/tags/%E8%B6%8B%E5%8A%BF/</link>
    <description>Recent content in 趋势 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 23 Jun 2022 11:27:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/%E8%B6%8B%E5%8A%BF/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>2022 年云和 DevOps 趋势报告</title>
      <link>https://jimmysong.io/blog/cloud-and-devops-trend-2022/</link>
      <pubDate>Thu, 23 Jun 2022 11:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-and-devops-trend-2022/</guid>
      <description>
        
        
        &lt;p&gt;近日 InfoQ 发布了 &lt;a href=&#34;https://www.infoq.com/articles/devops-and-cloud-trends-2022/&#34; title=&#34;DevOps and Cloud InfoQ Trends Report – June 2022&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps and Cloud InfoQ Trends Report – June 2022&lt;/a&gt;
，因为报告中所覆盖的技术领域过于宽泛，本文仅仅是对这篇报告的一点个人解读。我基本认同我关注的这些技术中「创新者」和「后期大众」阶段技术的划分。&lt;/p&gt;
&lt;h2 id=&#34;报告概括&#34;&gt;报告概括&lt;/h2&gt;
&lt;p&gt;下面这段节选自原文的 takeaways：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据可观察性将帮助企业更好地了解和排除其数据密集型系统的故障。&lt;/li&gt;
&lt;li&gt;云原生应用采用无服务器和分布式 SQL 数据库的情况也越来越多。&lt;/li&gt;
&lt;li&gt;FinOps 将走向成熟。&lt;/li&gt;
&lt;li&gt;eBPF 和 WASM 是令人振奋的新技术，它们被用来在服务网格内开启可观察性、监控和安全的新方法。我们认为这处于创新者阶段。&lt;/li&gt;
&lt;li&gt;低代码或无代码平台继续成熟，特别是用于内部工具和自动化用途。&lt;/li&gt;
&lt;li&gt;我们还看到「开发者体验作为决策驱动力」的趋势得到了更多的关注，特别是在云平台领域。「平台工程师」的角色正在许多规模的组织中出现，以支持相关平台抽象、API 和工具的建设。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;报告解读&#34;&gt;报告解读&lt;/h2&gt;
&lt;p&gt;这篇报告为什么命名为「DevOps 和云」我就不太清楚了，我觉得把名字换成「云计算」、「云原生」也是可以的，可能是为了延续之前的报告风格吧，毕竟 InfoQ 已经推出过很多期此类报告了。这类报告都是根据「鸿沟理论」将当前流行的技术分成以下阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者&lt;/li&gt;
&lt;li&gt;早期采用者&lt;/li&gt;
&lt;li&gt;早期大众&lt;/li&gt;
&lt;li&gt;后期大众&lt;/li&gt;
&lt;li&gt;落后者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 InfoQ 的报告中没有「落后者」这个阶段。&lt;/p&gt;



&lt;div class=&#34;alert&#34;&gt;
  
  &lt;div class=&#34;alert-note-title py-1 px-2&#34;&gt;
    什么是鸿沟理论？
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note py-1 px-2&#34;&gt;
    鸿沟理论指的就是高科技产品在市场营销过程中遭遇的最大障碍：高科技企业的早期市场和主流市场之间存在着一条巨大的鸿沟，能否顺利跨越鸿沟并进入主流市场，成功赢得实用主义者的支持，就决定了一项高科技产品的成败。实际上每项新技术都会经历鸿沟。关键在予采取适当的策略令高科技企业成功地“跨越鸿沟”，摩尔在这本书中就告诉了人们一些欠经考验的制胜秘诀。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;下图展示的是跨越鸿沟理论中不同阶段人群的分类及占比。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/chasm_hu673caf74b4358f6aba9f5638a9c8f135_47427_1600x900_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/chasm.jpg&#34; data-img=&#34;/blog/cloud-and-devops-trend-2022/chasm.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;900&#34; alt=&#34;image&#34; data-caption=&#34;跨越鸿沟理论中不同阶段人群的分类及占比&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图片: 跨越鸿沟理论中不同阶段人群的分类及占比&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们来看下 InfoQ 6 月新出的「云和 DevOps」趋势报告。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/infoq_hu9a6aed5a552c975698c6b8242b687633_79495_1200x841_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/infoq.jpg&#34; data-img=&#34;/blog/cloud-and-devops-trend-2022/infoq.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;841&#34; alt=&#34;image&#34; data-caption=&#34;软件开发云和 DevOps 趋势图（2022 年 6 月）&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图片: 软件开发云和 DevOps 趋势图（2022 年 6 月）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们可以看到像低代码、eBPF、Data Mesh、WASM 已经出现在创新者视线里了。Service Mesh 还在「早期采用者」阶段，这点比我预想的要慢好多，我以为服务网格已经跨越鸿沟了，你觉得呢？&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Waypoint</title>
    <link>https://jimmysong.io/tags/waypoint/</link>
    <description>Recent content in Waypoint on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Thu, 12 Dec 2024 18:44:52 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/waypoint/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>深入 Istio Ambient 模式：从 ztunnel 到 Waypoint 代理的 L7 流量路径解析</title>
      <link>https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/</link>
      <pubDate>Thu, 12 Dec 2024 18:44:52 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/</guid>
      <description>
        
        
        &lt;p&gt;在 Istio Ambient 模式下，ztunnel 是节点级安全代理，在 L4 层拦截并加密服务间流量。但不负责 L7（如 HTTP）层处理。Ambient 模式中，L7 处理由 Waypoint 代理负责。当 ztunnel 发现目标服务需 L7 处理时，通过 HBONE 协议将流量转发给 Waypoint 代理进行 HTTP 层策略应用和可观察性处理，再由 Waypoint 代理经 ztunnel 转发给目标 Pod，本文将详细阐述这条 L7 流量转发链路。&lt;/p&gt;
&lt;h2 id=&#34;waypoint-代理的角色与责任&#34;&gt;Waypoint 代理的角色与责任&lt;/h2&gt;
&lt;p&gt;在 Istio Ambient 模式中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ztunnel&lt;/strong&gt; 负责透明捕获 Pod 间的 L4 流量，提供 mTLS 加密和身份认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Waypoint 代理&lt;/strong&gt; 是一个基于 Envoy 的 L7 代理，处理 HTTP 层的高级路由、策略和可观察性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个请求需要 L7 层策略时（如 &lt;code&gt;productpage&lt;/code&gt; 调用 &lt;code&gt;reviews-v1&lt;/code&gt; 服务），&lt;strong&gt;ztunnel 将流量通过 HBONE 隧道转发到 Waypoint Proxy&lt;/strong&gt;，由 Waypoint 执行 HTTP 路由和策略。&lt;/p&gt;
&lt;h2 id=&#34;l7-流量在-ambient-模式中的处理路径&#34;&gt;L7 流量在 Ambient 模式中的处理路径&lt;/h2&gt;
&lt;p&gt;下图展示了 L7 流量在 Ambient 模式中的处理路径。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/022a72b18c3091c40cf01bb4fad208a2.svg&#34; data-img=&#34;/blog/istio-ambient-l7-flow-analysis/022a72b18c3091c40cf01bb4fad208a2.svg&#34; alt=&#34;image&#34; data-caption=&#34;L7 流量在 Ambient 模式中的处理路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;L7 流量在 Ambient 模式中的处理路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面两张图片分别展示了源 Pod 和目标 Pod 在同节点和跨节点情况下的 L7 流量处理路径。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/hbone-same-node.svg&#34; data-img=&#34;/blog/istio-ambient-l7-flow-analysis/hbone-same-node.svg&#34; alt=&#34;image&#34; data-caption=&#34;源 pod 和目标 pod 在同一节点上的 L7 流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;源 pod 和目标 pod 在同一节点上的 L7 流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-l7-flow-analysis/hbone-cross-node.svg&#34; data-img=&#34;/blog/istio-ambient-l7-flow-analysis/hbone-cross-node.svg&#34; alt=&#34;image&#34; data-caption=&#34;源 pod 和目标 pod 在不同节点上的 L7 流量路径&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;源 pod 和目标 pod 在不同节点上的 L7 流量路径&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面是详细的流量路径。&lt;/p&gt;
&lt;h3 id=&#34;1-应用请求发出&#34;&gt;1. 应用请求发出&lt;/h3&gt;
&lt;p&gt;假设 productpage 应用需要访问 reviews 服务。productpage Pod 内的应用向 &lt;code&gt;reviews.default.svc.cluster.local:9080&lt;/code&gt; 发起 HTTP 请求。&lt;/p&gt;
&lt;h3 id=&#34;2-ztunnel-l4-透明捕获与识别&#34;&gt;2. ztunnel L4 透明捕获与识别&lt;/h3&gt;
&lt;p&gt;productpage Pod 的出站请求首先被所在节点上的 ztunnel 拦截。ztunnel 查看从 Istio 控制面下发的配置，根据目标服务（reviews）的身份和策略，得知该服务需要经过 Waypoint 代理进行 L7 层处理。&lt;/p&gt;
&lt;h3 id=&#34;3-通过-hbone-协议转发至-waypoint&#34;&gt;3. 通过 HBONE 协议转发至 Waypoint&lt;/h3&gt;
&lt;p&gt;ztunnel 并非使用传统的 Envoy-to-Envoy XDS 或原生 TCP+mTLS 隧道，而是通过 &lt;strong&gt;HBONE 协议&lt;/strong&gt; 与 Waypoint 代理通信。HBONE 是 Istio Ambient 模式中专门设计的无 Sidecar L7 路由协议，基于 HTTP/2，可在透明模式下对流量进行叠加转发，从而实现灵活的服务拓扑和策略控制。&lt;/p&gt;
&lt;p&gt;在这一阶段，ztunnel 会将 L4 流量封装到 HBONE 隧道中，发送给相应的 Waypoint 代理。&lt;/p&gt;
&lt;h3 id=&#34;4-waypoint-代理的-l7-策略与遥测处理&#34;&gt;4. Waypoint 代理的 L7 策略与遥测处理&lt;/h3&gt;
&lt;p&gt;Waypoint 代理（目前仍基于 Envoy 实现）收到通过 HBONE 隧道传来的流量后，通过 TLS 配置和客户端证书校验，确保下游（ztunnel）是已被认证的受信主体。它将下游客户端的身份信息（SPIFFE ID）和其他上下文元数据提取出来，以便在 L7 层策略决策中使用。&lt;/p&gt;
&lt;p&gt;执行的操作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 HTTP Path/Host 的路由和流量拆分&lt;/li&gt;
&lt;li&gt;基于 Headers 的访问控制和认证策略&lt;/li&gt;
&lt;li&gt;故障注入、熔断、限流&lt;/li&gt;
&lt;li&gt;遥测数据收集（请求时延、错误率、Tracing、Metrics、Logs）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成 L7 处理后，Waypoint 代理再通过 HBONE 将流量传回到目标节点的 ztunnel。&lt;/p&gt;
&lt;h3 id=&#34;5-流量到达目标-pod&#34;&gt;5. 流量到达目标 Pod&lt;/h3&gt;
&lt;p&gt;目标节点上的 ztunnel 会从 Waypoint 代理接收处理过的流量（同样通过 HBONE 隧道传递），然后解封装并将流量传递给对应的 reviews Pod 中的应用容器端口。&lt;/p&gt;
&lt;h2 id=&#34;洞察与关键点总结&#34;&gt;洞察与关键点总结&lt;/h2&gt;
&lt;h3 id=&#34;1-waypoint-并不知道-ztunnel-的存在&#34;&gt;1. Waypoint 并不知道 ztunnel 的存在&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Waypoint 代理只知道目标 Pod 的 IP 地址，但目标端口被重写为 &lt;code&gt;15008&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Kubernetes &lt;code&gt;iptables&lt;/code&gt; 规则将流量透明重定向到 ztunnel。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-流量安全性端到端加密与身份认证&#34;&gt;2. 流量安全性：端到端加密与身份认证&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;双向 TLS（mTLS）和 SPIFFE ID 校验确保了端到端安全。&lt;/li&gt;
&lt;li&gt;无法绕过 ztunnel，确保了零信任架构的完整实施。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-完全透明的流量控制&#34;&gt;3. 完全透明的流量控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应用开发人员无需更改任何代码。&lt;/li&gt;
&lt;li&gt;流量控制、策略和可观察性完全在数据面层面透明执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何调试&#34;&gt;如何调试？&lt;/h2&gt;
&lt;p&gt;在 Ambient 模式下，调试方式也有了一些变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ztunnel 调试&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Istio 引入了新的 &lt;code&gt;istioctl ztunnel&lt;/code&gt; 子命令来协助查看和调试 ztunnel 的配置与状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;waypoint 调试&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然 Waypoint 代理仍然是 Envoy，所以仍然可以使用 &lt;code&gt;istioctl pc&lt;/code&gt; 和 &lt;code&gt;istioctl ps&lt;/code&gt; 来查看其路由、集群和监听器配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istioctl waypoint&lt;/code&gt; 提供了更直观的配置查看和状态检查功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio Ambient 模式通过 ztunnel 来处理 L4 流量并实现零信任加密与传输，再通过 Waypoint 代理为需要 L7 策略的请求提供集中处理。两者之间通过 HBONE 协议进行高效、透明的通信，实现比传统 Sidecar 模式更轻量且易于运维的架构。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>解读 Istio Ambient Waypoint Proxy 部署模型</title>
      <link>https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/</link>
      <pubDate>Tue, 08 Oct 2024 11:26:17 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;译者注：Istio Ambient Waypoint Proxy 为服务网格的 L7 处理提供了灵活且高效的解决方案。通过了解不同的部署模式，团队可以根据自身需求选择最合适的架构，避免资源浪费和性能瓶颈。避免按节点部署 waypoint proxy，有助于降低故障域的影响，提升应用的稳定性和性能。正确地部署和配置 waypoint proxy，将有助于充分发挥 Istio Ambient 模式的优势，实现高效、安全的服务通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ambient 模式是 Istio 在 2022 年引入的新型无边车数据平面，并于今年 5 月达到 &lt;a href=&#34;https://istio.io/latest/blog/2024/ambient-reaches-beta/&#34; title=&#34;Beta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beta&lt;/a&gt; 状态。Istio 社区正努力在下一个 Istio v1.24 版本中将 Ambient 推向 GA（一般可用）状态。Ambient 将 Istio 的功能分为两个独立的层：安全覆盖层和第 7 层处理层。在与许多试用 Ambient 的用户合作时，我想澄清关于 waypoint proxy 的一些常见问题和困惑。它是一个可选的基于 Envoy 的组件，负责处理其管理的工作负载的 L7 事务。&lt;/p&gt;
&lt;h2 id=&#34;waypoint-proxy-的常见部署模式是什么&#34;&gt;Waypoint Proxy 的常见部署模式是什么？&lt;/h2&gt;
&lt;h3 id=&#34;理解-waypoint-proxy&#34;&gt;理解 Waypoint Proxy&lt;/h3&gt;
&lt;p&gt;你可以将 waypoint proxy 简单地视为一组目的地的网关，这些目的地可以是来自一个或多个命名空间的一个或多个服务和工作负载。除了处理集群内部的 L7 流量外，它与你的入口或出口网关没有太大区别。这也是为什么在部署 waypoint proxy 时需要使用 Kubernetes 的 Gateway 资源的原因。&lt;/p&gt;
&lt;p&gt;我非常喜欢 waypoint 架构的灵活性，你可以选择适合自己需求的架构。以下是一些常见的模式：&lt;/p&gt;
&lt;h3 id=&#34;a-针对命名空间的-waypoint-proxy&#34;&gt;A: 针对命名空间的 Waypoint Proxy&lt;/h3&gt;
&lt;p&gt;最常见的模式是，每个团队在集群中拥有一个命名空间，并管理该命名空间内的服务和部署。在这种模式下，我们期望每个团队都有自己的 waypoint proxy，供命名空间内的服务使用。按照这种模式，我们将默认的 waypoint 部署设计为命名空间范围，供命名空间内的所有服务使用。在下图中，服务 A、B、C 位于同一命名空间内。所有到服务 A、B 或 C 的 Ambient Mesh 客户端流量将通过命名空间的 waypoint proxy，由客户端的 ztunnel 进行编程。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f1.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f1.webp&#34; data-width=&#34;920&#34; data-height=&#34;476&#34; alt=&#34;image&#34; data-caption=&#34;Istio Ambient Waypoint 代理部署模型&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio Ambient Waypoint 代理部署模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;注意：为简洁起见，省略了目的地端的 ztunnel&lt;/p&gt;
&lt;h3 id=&#34;b-针对部分服务的-waypoint-proxy&#34;&gt;B: 针对部分服务的 Waypoint Proxy&lt;/h3&gt;
&lt;p&gt;如果你不希望到服务 B 的流量经过 waypoint proxy 怎么办？一个常见的原因是，你只需要对服务 B 的流量进行 L4 层的控制，这样在调用它时就不需要通过 waypoint proxy。例如，你有一个调用 MySQL 数据库服务的 Web 服务，只需要对其进行 L4 控制。另一个例子是，当服务是“内部”的，只被命名空间内的其他服务调用，你只需要对跨命名空间边界的服务进行授权策略。例如，在著名的 &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34; title=&#34;Bookinfo 应用程序&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bookinfo 应用程序&lt;/a&gt;中，你可以为 productpage 服务启用零信任，拒绝除端口 9080 上 GET 方法的流量之外的所有流量。对于所有内部服务，如 reviews 或 details 服务，你可以继续允许命名空间内的所有流量。&lt;/p&gt;
&lt;p&gt;另一个用例是，服务 A 的流量非常大，你希望有一个专用的 waypoint proxy 来处理其 L7 处理，以便调整资源配置来应对高负载。你可以配置服务 B 或 C 使用不同的 waypoint，避免受到服务 A 的影响，或根据需要跳过它。我们将在下面的部分中详细讨论这一点。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f2.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f2.webp&#34; data-width=&#34;666&#34; data-height=&#34;320&#34; alt=&#34;image&#34; data-caption=&#34;Istio ambient waypoint 代理部署模型&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio ambient waypoint 代理部署模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;c-多个命名空间共享一个-waypoint-proxy&#34;&gt;C: 多个命名空间共享一个 Waypoint Proxy&lt;/h3&gt;
&lt;p&gt;你也可以通过为命名空间添加 &lt;code&gt;istio.io/use-waypoint&lt;/code&gt; 标签，并在 Gateway 资源中配置 &lt;code&gt;allowRoutes&lt;/code&gt;，来让多个命名空间共享一个 waypoint proxy。如果你运行的是小型集群，想要优化资源效率，并且对嘈杂邻居问题不太担心，你可能希望为整个集群使用一个 waypoint proxy。这种情况下的一个常见例子是所谓的 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/co-located-events/kubernetes-on-edge-day/#about&#34; title=&#34;K8S-at-the-edge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;K8S-at-the-edge&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“当应用程序跨越太多命名空间时，使用 waypoint 为多个命名空间服务更具资源效率，通过提升无边车服务网格的概念，并在不同的命名空间中使用集中式的 L7 功能，而不影响性能和应用可用性”，&lt;a href=&#34;https://www.linkedin.com/in/ahmad-al-masry-9ab90858/&#34; title=&#34;Ahmad Al-Masry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ahmad Al-Masry&lt;/a&gt;，DevSecOps 工程经理说道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个例子是，一个团队拥有几个组成单一信任域的命名空间，你希望通过共享一个 waypoint proxy 来降低资源成本。在下图中，ns-1 和 ns-2 命名空间中的所有服务都使用部署在 ns-1 命名空间中的 waypoint proxy：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f3.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f3.webp&#34; data-width=&#34;994&#34; data-height=&#34;678&#34; alt=&#34;image&#34; data-caption=&#34;Istio ambient waypoint 代理部署模型&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio ambient waypoint 代理部署模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;由于 ns-2 与 ns-1 共享相同的 waypoint proxy，任何在 ns-1 中部署并附加到整个 waypoint 的策略都会影响两个命名空间。例如，如果你部署了一个附加到整个 waypoint 的 &lt;code&gt;AuthorizationPolicy&lt;/code&gt;，该策略将在两个命名空间中的所有服务上由 waypoint 执行。&lt;/p&gt;
&lt;h2 id=&#34;为什么不简单地为每个节点部署一个-waypoint-proxy&#34;&gt;为什么不简单地为每个节点部署一个 Waypoint Proxy？&lt;/h2&gt;
&lt;p&gt;虽然将 waypoint proxy 配置为上述不同目的地范围的网关非常好，但你可能会想，为什么不保持简单，为每个节点部署一个 waypoint proxy 作为 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&#34; title=&#34;DaemonSet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DaemonSet&lt;/a&gt; 来处理该节点的所有 L7 处理呢？&lt;/p&gt;
&lt;p&gt;Waypoint proxy 需要高度可配置，因为应用程序可能有完全不同的性能要求和运行时自定义。例如，你可以插入针对特定服务的外部授权策略或 WASM 扩展。一个租户的错误 Envoy 配置可能会导致节点代理崩溃，影响该节点上的所有工作负载。&lt;/p&gt;
&lt;p&gt;此外，需要在 waypoint proxy 上有大量处理的嘈杂邻居可能会导致另一个应用程序性能不佳，仅仅因为该应用程序也部署在同一节点上。通过为 waypoint proxy 每个节点部署 Envoy，实际上是强制节点上的所有应用程序共享相同的故障域，而不管它们的应用延迟或运行时要求。Envoy 没有租户控制，你无法划分其 CPU 或内存来防止嘈杂邻居抢占其他应用程序。具有复杂 L7 策略的高流量应用程序将需要更多的 CPU 和 waypoint 的内存。Kubernetes DaemonSet 的资源预留是固定的，无法在不增加所有 waypoint pod 的 CPU 和内存的情况下，根据流量负载水平水平或垂直扩展特定的 DaemonSet pod。成本分摊在此模型中也很困难，你无法正确地将 waypoint 引起的资源成本归因于每个租户。&lt;/p&gt;
&lt;p&gt;让我们通过一个具体的例子来说明。我在两个命名空间中部署了 Bookinfo 应用程序，每个命名空间都有其默认配置的命名空间 waypoint。我将每个命名空间的 waypoint proxy 配置为与各自的 &lt;code&gt;productpage&lt;/code&gt; pod 共置。在每个命名空间中，我部署了一个简单的 L7 &lt;code&gt;AuthorizationPolicy&lt;/code&gt;，只允许特定命名空间执行 GET 方法：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f4.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f4.webp&#34; data-width=&#34;668&#34; data-height=&#34;578&#34; alt=&#34;image&#34; data-caption=&#34;Istio ambient waypoint 代理部署模型&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio ambient waypoint 代理部署模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;注意：为简洁起见，省略了源和目的地端的 ztunnel&lt;/p&gt;
&lt;p&gt;当我从 Fortio 向第一个命名空间的 productpage 服务发送 6500 RPS 的请求，并在 3 秒后向第二个命名空间的 productpage 服务发送相同的请求时，平均响应时间分别为 30.8ms 和 30.4ms，如下图所示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f5.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f5.webp&#34; data-width=&#34;1600&#34; data-height=&#34;628&#34; alt=&#34;image&#34; data-caption=&#34;命名空间 1&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;命名空间 1&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;命名空间 1：通过其 waypoint 向第一个命名空间的 productpage 服务发送 6500 QPS，650 个连接的 Fortio 测试&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f6.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f6.webp&#34; data-width=&#34;1600&#34; data-height=&#34;628&#34; alt=&#34;image&#34; data-caption=&#34;命名空间 2&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;命名空间 2&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;命名空间 2：通过其 waypoint 向第二个命名空间的 productpage 服务发送 6500 QPS，650 个连接的 Fortio 测试&lt;/p&gt;
&lt;p&gt;由于两个 Bookinfo 应用程序都有非常大的负载，每个应用程序都有自己的 waypoint proxy 是合理的，这样它们不会相互争抢资源。那么，如果 waypoint proxy 改为按节点部署会怎样？&lt;/p&gt;
&lt;p&gt;我可以手动将 waypoint proxy 作为 DaemonSet 部署，使用非常复杂的 Envoy 配置。在运行两个 productpage pod 的节点上，waypoint proxy pod 将被两个 productpage pod 使用。然而，这需要深入了解 Envoy 配置，这方面我并不擅长。一种简单的测试方法是，将两个命名空间配置为使用相同的 waypoint proxy，这对于不需要非常高负载或专用 waypoint proxy 的应用程序是推荐的（参见前面的模式 C 了解更多信息）。注意：对于这种情况，我不推荐模式 C，因为两个 Bookinfo 应用程序的负载非常大。&lt;/p&gt;
&lt;p&gt;在确保 ns-1 命名空间中的 waypoint proxy pod 也部署在与两个 productpage pod 相同的节点上后，我进行了一个简单的更改，将两个命名空间都配置为使用 ns-1 命名空间中的 waypoint proxy。这使我能够快速测试一个 waypoint proxy pod，被部署在同一节点上的两个 productpage pod 使用，就像我将 waypoint 作为 DaemonSet 部署一样。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f7.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f7.webp&#34; data-width=&#34;682&#34; data-height=&#34;590&#34; alt=&#34;image&#34; data-caption=&#34;5_Istio ambient waypoint proxy deployment model explained&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;5_Istio ambient waypoint proxy deployment model explained&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当我从 Fortio 负载客户端向第一个命名空间的 productpage 服务发送 6500 RPS 时，平均响应时间从 30ms 增加到了 59ms！在 3 秒后向第二个命名空间的 productpage 发送相同的负载（基本上重复之前的测试，但这次使用共享的 waypoint），它报告了 32% 的错误，从之前的 0% 增加了！当它们共享同一节点上的同一个 waypoint proxy 时，对两者的影响有多大！由于两个应用程序在高负载下都变得非常嘈杂，waypoint proxy 达到了其默认的 CPU 限制（2 核）和 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/circuit_breaker.proto#envoy-v3-api-field-config-cluster-v3-circuitbreakers-thresholds-max-connections&#34; title=&#34;上游连接限制&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上游连接限制&lt;/a&gt;（1024），因此许多稍后开始的来自第二个命名空间的请求以高比例的错误失败。Kubernetes 工作节点仍然有充足的 CPU，在峰值时有约 50% 的 CPU 和 6% 的内存利用率。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f8.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f8.webp&#34; data-width=&#34;1600&#34; data-height=&#34;628&#34; alt=&#34;image&#34; data-caption=&#34;命名空间 1.2&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;命名空间 1.2&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;命名空间 1：通过共享的 waypoint 向第一个命名空间的 productpage 服务发送 6500 QPS，650 个连接的 Fortio 测试&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f9.webp&#34; data-img=&#34;/trans/istio-ambient-waypoint-proxy-deployment-model-explained/f9.webp&#34; data-width=&#34;1600&#34; data-height=&#34;627&#34; alt=&#34;image&#34; data-caption=&#34;命名空间 2.1&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;命名空间 2.1&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;命名空间 2：通过共享的 waypoint 向第二个命名空间的 productpage 服务发送 6500 QPS，650 个连接的 Fortio 测试&lt;/p&gt;
&lt;p&gt;这个实验表明，在节点上使用相同的 waypoint proxy 共享相同的故障域，可能很容易在嘈杂的邻居下触发故障场景，而这些可以通过为非常繁忙的租户提供专用的 waypoint 来避免。虽然在测试中使用了非常嘈杂的邻居，但也可能是错误的 Envoy 配置或特定的 Envoy 扩展，在多个租户共享相同的故障域时触发类似的问题。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Cloud Native</title>
    <link>https://jimmysong.io/tags/cloud-native/</link>
    <description>Recent content in Cloud Native on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Mon, 28 Oct 2024 15:29:39 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/cloud-native/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>云原生网络：展望 Kubernetes 的下一个十年</title>
      <link>https://jimmysong.io/trans/kubernetes-next-decade/</link>
      <pubDate>Mon, 28 Oct 2024 15:29:39 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/kubernetes-next-decade/</guid>
      <description>
        
        
        &lt;p&gt;随着 Kubernetes 迈入青春期，让我们思考其网络和安全系统如何进一步发展与适应。&lt;/p&gt;
&lt;p&gt;Kubernetes 最近迎来了&lt;a href=&#34;https://kubernetes.io/blog/2024/06/06/10-years-of-kubernetes/&#34; title=&#34;十周年&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;十周年&lt;/a&gt;纪念。作为一名家有三子的父亲，我感觉有责任提醒 Kubernetes 的管理员们：成长中的 Kubernetes 并不总是“乖巧”。&lt;/p&gt;
&lt;p&gt;可以预见，&lt;a href=&#34;https://roadmap.sh/kubernetes&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 将进入其“叛逆期”。&lt;/p&gt;
&lt;p&gt;Kubernetes 未来将经历增长的阵痛（随着新用例迫使它进行调整）；它或许会遭遇“身份危机”（到底是平台还是API？）；它将寻求更少的监控与更大的自主性（依赖AI工具来减少人类的直接监督）。&lt;/p&gt;
&lt;p&gt;借此机会，随着 KubeCon 北美大会即将在盐湖城召开，让我们展望一下云原生网络的发展方向，并探讨一些未来的趋势。&lt;/p&gt;
&lt;h3 id=&#34;ebpf-将无处不在&#34;&gt;eBPF 将无处不在&lt;/h3&gt;
&lt;p&gt;作为能够在 Linux 内核（未来也将支持 &lt;a href=&#34;https://thenewstack.io/ebpf-is-coming-for-windows/&#34; title=&#34;Windows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows&lt;/a&gt;）中运行自定义程序的技术，&lt;a href=&#34;https://ebpf.io/&#34; title=&#34;eBPF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt; 的势头不减。除了网络和安全功能（例如 &lt;a href=&#34;https://cilium.io/&#34; title=&#34;Cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt; 和 &lt;a href=&#34;https://tetragon.io/&#34; title=&#34;Tetragon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetragon&lt;/a&gt; 项目），还出现了更多的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测量&lt;a href=&#34;https://sched.co/1iW8V&#34; title=&#34;功耗&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;功耗&lt;/a&gt;：使用 eBPF。&lt;/li&gt;
&lt;li&gt;引入&lt;a href=&#34;https://youtu.be/_5Zabryx0nE?si=KhGFMmeay9LtoJ_-&#34; title=&#34;混沌测试&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;混沌测试&lt;/a&gt;来验证系统的弹性：使用 eBPF。&lt;/li&gt;
&lt;li&gt;加速&lt;a href=&#34;https://sched.co/1i7lP&#34; title=&#34;加密流量&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;加密流量&lt;/a&gt;：使用 eBPF。&lt;/li&gt;
&lt;li&gt;在高流量加密数据中&lt;a href=&#34;https://sched.co/1i7ms&#34; title=&#34;检测异常&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;检测异常&lt;/a&gt;：使用 eBPF。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可能会面临一种情况，不选择 eBPF 作为网络编程平台反而成为少数。尽管 &lt;a href=&#34;https://thenewstack.io/ebpf-security-power-and-shortfalls/&#34; title=&#34;eBPF 是一种强大的工具&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF 是一种强大的工具&lt;/a&gt;，我们不能将所有网络问题都视为“钉子”。&lt;/p&gt;
&lt;h3 id=&#34;最酷的组合ebpf-与-opentelemetry&#34;&gt;最酷的组合：eBPF 与 OpenTelemetry&lt;/h3&gt;
&lt;p&gt;在 eBPF 可以访问每一个数据包的能力下，网络可视化是一个非常强大的用例。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cncf.io/reports/opentelemetry-project-journey-report/&#34; title=&#34;OpenTelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt; 作为 CNCF 项目中最活跃的项目之一，提供了标准的可观测框架，通过简单的应用程序仪表来生成和管理遥测数据。&lt;/p&gt;
&lt;p&gt;考虑到网络经常被认为是应用性能问题的根源，我们可以期待使用 &lt;a href=&#34;https://sched.co/1how7&#34; title=&#34;OpenTelemetry Network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry Network&lt;/a&gt;，直接从 Linux 内核获取低级遥测数据，以提供关于应用健康状况的有价值见解。&lt;/p&gt;
&lt;h3 id=&#34;展望未来回顾与反思&#34;&gt;展望未来：回顾与反思&lt;/h3&gt;
&lt;p&gt;在 Kubernetes 迈向十周年之际，我们也开始反思其网络架构的一些设计决策是否依然适用。&lt;/p&gt;
&lt;p&gt;例如，Ingress API 是 Kubernetes 早期的一个重要选择，然而其继任者 Gateway API 正在取代它。&lt;/p&gt;
&lt;p&gt;服务网格架构也在演变，从传统的 sidecar 架构向 &lt;a href=&#34;https://isovalent.com/blog/post/cilium-service-mesh/&#34; title=&#34;Cilium Service Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium Service Mesh&lt;/a&gt; 和 Istio Ambient 模式的无 sidecar 方式转变。&lt;/p&gt;
&lt;p&gt;这似乎是反思的好时机。甚至 Kubernetes 的 SIG-Network 组也在考虑是否要放弃&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/&#34; title=&#34;容器网络接口插件模型&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器网络接口插件模型&lt;/a&gt;，并可能引入更现代的 &lt;a href=&#34;https://github.com/kubernetes/enhancements/issues/4410&#34; title=&#34;Kubernetes 网络接口&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 网络接口&lt;/a&gt;（KNI）。&lt;/p&gt;
&lt;h3 id=&#34;是时候告别-ingress&#34;&gt;是时候告别 Ingress&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; title=&#34;Gateway API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API&lt;/a&gt; 是 Kubernetes 生态系统中最具创新性的项目之一。它不仅解决了 Ingress 的不足，且其开发充满合作与包容精神。&lt;/p&gt;
&lt;p&gt;随着近三十个 Gateway API 的实现和即将推出的 1.2 版本，在今年的 KubeCon 上，Gateway API 的讨论将深入到实际的部署经验，而非入门课程。&lt;/p&gt;
&lt;p&gt;Ingress 曾经广泛使用，但现在是时候迈向 Gateway API 了。&lt;/p&gt;
&lt;h3 id=&#34;ai-在-kubernetes-网络中的应用&#34;&gt;AI 在 Kubernetes 网络中的应用&lt;/h3&gt;
&lt;p&gt;在讨论 &lt;a href=&#34;https://www.youtube.com/watch?v=mUbeiDF2B4k&#34; title=&#34;AI 与网络&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AI 与网络&lt;/a&gt;时，我总是将其分为“面向 AI 工作负载的网络”和“用 AI 改善网络”。后者是当下的重点。&lt;/p&gt;
&lt;p&gt;我曾经尝试使用大型语言模型（LLM）来创建网络策略和分析日志，然而效果不一。我们期待 Kubernetes 能借助 AI 技术做出更智能的网络决策，例如自动生成网络策略。&lt;/p&gt;
&lt;h3 id=&#34;面向-ai-的-kubernetes-网络&#34;&gt;面向 AI 的 Kubernetes 网络&lt;/h3&gt;
&lt;p&gt;随着 Kubernetes 成为 AI/ML 应用的理想平台，AI 工作负载对网络的需求也愈加显著。它不仅需要本地 GPU，还需要通过远程直接内存访问（RDMA）连接远程 GPU。&lt;/p&gt;
&lt;p&gt;或许 Kubernetes 近期的动态资源分配（&lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/dynamic-resource-allocation/&#34; title=&#34;DRA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DRA&lt;/a&gt;）功能可以用来访问专门的网络硬件资源。&lt;/p&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;
&lt;p&gt;是的，Kubernetes 将经历类似青少年的成长过程。但没关系，它有一个支持性强、不断创新的社区来帮助其发展成为一个稳定的系统。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

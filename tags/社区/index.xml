
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 社区</title>
    <link>https://jimmysong.io/tags/%E7%A4%BE%E5%8C%BA/</link>
    <description>Recent content in 社区 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Wed, 17 Jul 2024 13:36:15 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/%E7%A4%BE%E5%8C%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>如何参与 Envoy Gateway 社区：贡献或提交代码指南</title>
      <link>https://jimmysong.io/blog/envoy-gateway-contributor-guide/</link>
      <pubDate>Wed, 17 Jul 2024 13:36:15 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-gateway-contributor-guide/</guid>
      <description>
        
        
        &lt;p&gt;Envoy Gateway 是由 Envoy Proxy 社区推动的一个开源 API 网关项目，结合了 Contour、Emissary 等项目力量。这个指南将帮助你理解如何贡献代码和参与社区。&lt;/p&gt;
&lt;h2 id=&#34;开始之前&#34;&gt;开始之前&lt;/h2&gt;
&lt;p&gt;了解项目的&lt;a href=&#34;https://github.com/envoyproxy/gateway/blob/main/GOALS.md&#34; title=&#34;目标和愿景&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;目标和愿景&lt;/a&gt;是非常重要的。Envoy Gateway 旨在作为一个独立或基于 Kubernetes 的应用程序网关，使用 Gateway API 资源来管理 Envoy 代理。&lt;/p&gt;
&lt;h2 id=&#34;如何参与&#34;&gt;如何参与&lt;/h2&gt;
&lt;h3 id=&#34;1-沟通协作&#34;&gt;1. 沟通协作&lt;/h3&gt;
&lt;p&gt;在开发前，建议通过&lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;或&lt;a href=&#34;https://communityinviter.com/apps/envoyproxy/envoy&#34; title=&#34;Slack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;与社区交流。始终创建一个 GitHub Issue 来讨论你的想法。&lt;/p&gt;
&lt;h3 id=&#34;2-贡献准则&#34;&gt;2. 贡献准则&lt;/h3&gt;
&lt;p&gt;遵守&lt;a href=&#34;https://gateway.envoyproxy.io/contributions/contributing/&#34; title=&#34;贡献准则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;贡献准则&lt;/a&gt;，它包括代码规范和社区行为准则。&lt;/p&gt;
&lt;h3 id=&#34;3-提交代码&#34;&gt;3. 提交代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;签署 DCO&lt;/strong&gt;：确保你的提交信息包含 DCO 签名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建 PR&lt;/strong&gt;：Fork 仓库后，提交 PR。确保通过所有自动化测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码审查&lt;/strong&gt;：PR 会被维护人员审查，一旦满足条件，将会被合并。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构建和测试指南&#34;&gt;构建和测试指南&lt;/h2&gt;
&lt;h3 id=&#34;环境准备&#34;&gt;环境准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;必需工具&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Go（版本 1.22+）&lt;/li&gt;
&lt;li&gt;Make（版本 4.0+）&lt;/li&gt;
&lt;li&gt;Docker（可选，版本 20.10.16+，用于构建镜像）&lt;/li&gt;
&lt;li&gt;Python3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置步骤&lt;/strong&gt;：确保所有工具均已安装并配置好环境变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码构建&#34;&gt;代码构建&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建命令&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;构建全部二进制文件：&lt;code&gt;make build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;仅构建 Envoy Gateway：&lt;code&gt;make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构建控制工具 &lt;code&gt;egctl&lt;/code&gt;：&lt;code&gt;make build BINS=&amp;quot;egctl&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运行测试&lt;/strong&gt;：执行 &lt;code&gt;make test&lt;/code&gt; 来进行 Go 语言的测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成测试数据&lt;/strong&gt;：执行 &lt;code&gt;make testdata&lt;/code&gt; 来生成 YAML 格式的测试数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lint-检查&#34;&gt;Lint 检查&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行 Lint&lt;/strong&gt;：运行 &lt;code&gt;make lint&lt;/code&gt; 确保代码风格和标准一致性（注意修正现有的拼写错误）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;镜像操作&#34;&gt;镜像操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建镜像&lt;/strong&gt;：&lt;code&gt;IMAGE=docker.io/&amp;lt;dockerhub-id&amp;gt;/gateway-dev make image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推送多架构镜像&lt;/strong&gt;：&lt;code&gt;IMAGE=docker.io/&amp;lt;dockerhub-id&amp;gt;/gateway-dev make push-multiarch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署和调试&#34;&gt;部署和调试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本地集群创建&lt;/strong&gt;：使用 &lt;code&gt;make create-cluster&lt;/code&gt; 在 Kind 上创建测试/开发用的集群。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署到 Kubernetes&lt;/strong&gt;：使用 &lt;code&gt;IMAGE=docker.io/&amp;lt;dockerhub-id&amp;gt;/gateway-dev TAG=&amp;lt;image-tag&amp;gt; make kube-deploy&lt;/code&gt; 将 Envoy Gateway 部署至 Kubernetes。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署示例应用&lt;/strong&gt;：执行 &lt;code&gt;make kube-demo&lt;/code&gt; 部署 demo 后端服务及相关网络资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除部署&lt;/strong&gt;：执行 &lt;code&gt;make kube-demo-undeploy&lt;/code&gt; 删除示例应用。执行 &lt;code&gt;make kube-undeploy&lt;/code&gt; 删除 Envoy Gateway。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    Kind 中运行的 Pod 列表
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;当你完成 Envoy Gateway 和示例应用部署后，运行 &lt;code&gt;kubectl get pod -A&lt;/code&gt; 命令，你将看到如下所示的 Pod 列表。&lt;/p&gt;
&lt;details class=&#34;spoiler&#34; id=&#34;spoiler-0&#34;&gt;
  &lt;summary&gt;查看 Kind 中运行的 Pod&lt;/summary&gt;
  &lt;p&gt;&lt;pre&gt;&lt;code&gt; NAMESPACE              NAME                                                  READY   STATUS    RESTARTS      AGE
 default                backend-96f75bbf-tcdf7                                1/1     Running   1 (97s ago)   13h
 envoy-gateway-system   envoy-default-eg-e41e7b31-668f754989-wb7xr            2/2     Running   2 (97s ago)   13h
 envoy-gateway-system   envoy-gateway-b457dc69b-l77cr                         1/1     Running   2 (97s ago)   13h
 kube-system            coredns-5dd5756b68-b494d                              1/1     Running   1 (97s ago)   14h
 kube-system            coredns-5dd5756b68-j46bx                              1/1     Running   1 (97s ago)   14h
 kube-system            etcd-envoy-gateway-control-plane                      1/1     Running   1 (97s ago)   14h
 kube-system            kindnet-sq4b4                                         1/1     Running   1 (97s ago)   14h
 kube-system            kube-apiserver-envoy-gateway-control-plane            1/1     Running   1 (97s ago)   14h
 kube-system            kube-controller-manager-envoy-gateway-control-plane   1/1     Running   2 (97s ago)   14h
 kube-system            kube-proxy-4x72s                                      1/1     Running   1 (97s ago)   14h
 kube-system            kube-scheduler-envoy-gateway-control-plane            1/1     Running   2 (97s ago)   14h
 local-path-storage     local-path-provisioner-6f8956fb48-shjcz               1/1     Running   2 (59s ago)   14h
 metallb-system         controller-5c6b6c8447-kjl4n                           1/1     Running   2 (59s ago)   14h
 metallb-system         speaker-6zlrb                                         1/1     Running   1 (97s ago)   14h
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;调试-envoy-配置&#34;&gt;调试 Envoy 配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;端口转发设置&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ENVOY_DEPLOYMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get deploy -n envoy-gateway-system --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gateway.envoyproxy.io/owning-gateway-namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default,gateway.envoyproxy.io/owning-gateway-name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eg -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl port-forward deploy/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ENVOY_DEPLOYMENT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; -n envoy-gateway-system 19000:19000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问&lt;/strong&gt;：在浏览器中打开 &lt;code&gt;http://localhost:19000&lt;/code&gt; 访问 Envoy 管理界面进行配置调试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络环境适配&lt;/strong&gt;：在中国大陆进行构建和推送镜像时，可能需要设置 Docker 代理以确保依赖的镜像能够下载。详细操作可参考&lt;a href=&#34;https://docs.docker.com/network/proxy/&#34; title=&#34;设置 Docker 代理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;设置 Docker 代理&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    注意事项
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    &lt;p&gt;若你在中国大陆的网络环境下构建和推送镜像，需要为 Docker 设置代理，否则你将无法下载一些依赖镜像。你可以将它们下载到本地后再用 &lt;code&gt;kind load&lt;/code&gt; 命令加载到 kind 里。需要下载和加载到 kind 里的镜像见下面的代码。&lt;/p&gt;
&lt;details class=&#34;spoiler&#34; id=&#34;spoiler-0&#34;&gt;
  &lt;summary&gt;pull-and-load-images-for-kind.sh&lt;/summary&gt;
  &lt;p&gt;&lt;div class=&#34;internal-file&#34;&gt;
  &lt;a href=&#34;pull-and-load-images-for-kind.sh&#34; download&gt;pull-and-load-images-for-kind.sh&lt;/a&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pull the images and load them into the kind cluster...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane quay.io/metallb/controller:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane quay.io/metallb/speaker:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane docker.io/jimmysong/gateway-dev:435a4dc1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane envoyproxy/envoy:distroless-dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull envoy-gateway-control-plane gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane quay.io/metallb/controller:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane quay.io/metallb/speaker:v0.13.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane docker.io/jimmysong/gateway-dev:435a4dc1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane envoyproxy/envoy:distroless-dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind load docker-image -n envoy-gateway --nodes envoy-gateway-control-plane gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;更多资源&#34;&gt;更多资源&lt;/h3&gt;
&lt;p&gt;想深入了解如何进行高级测试和贡献，详见 &lt;a href=&#34;https://gateway.envoyproxy.io/contributions/develop/&#34; title=&#34;Envoy Gateway 开发文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway 开发文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;加入我们，与全球开发者共同推进 Envoy Gateway 的成长，同时提升你的开发技能和对开源社区的理解。&lt;/p&gt;
&lt;h2 id=&#34;加入-envoy-gateway-中文交流群&#34;&gt;加入 Envoy Gateway 中文交流群&lt;/h2&gt;
&lt;p&gt;为了便于中文和中国时区的用户交流，Envoy Gateway 社区成立的微信群，详见&lt;a href=&#34;https://jimmysong.io/notice/envoy-gateway-group/&#34; title=&#34;通知&#34;&gt;通知&lt;/a&gt;，该群成立于 2023 年 4 月，目前已有 400 多名成员。你可以联系&lt;a href=&#34;https://jimmysong.io/contact/&#34; title=&#34;联系我&#34;&gt;联系我&lt;/a&gt;、&lt;a href=&#34;https://www.liuxunzhuo.com/&#34; title=&#34;刘训灼&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;刘训灼&lt;/a&gt;、&lt;a href=&#34;https://zhaohuabing.com/&#34; title=&#34;赵化冰&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;赵化冰&lt;/a&gt;等入群。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway.envoyproxy.io/contributions/develop/&#34; title=&#34;Envoy Gateway Developer Guide - gateway.envoyproxy.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway Developer Guide - gateway.envoyproxy.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

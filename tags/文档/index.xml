<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 文档</title>
    <link>https://jimmysong.io/tags/%E6%96%87%E6%A1%A3/</link>
    <description>Recent content in 文档 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 23 Jun 2017 12:24:12 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/%E6%96%87%E6%A1%A3/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>使用 API blueprint 创建 API 文档</title>
      <link>https://jimmysong.io/blog/creating-api-document-with-api-blueprint/</link>
      <pubDate>Fri, 23 Jun 2017 12:24:12 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/creating-api-document-with-api-blueprint/</guid>
      <description>
        
        
        &lt;p&gt;在进行微服务开发的过程中，为了保证最终开发的系统跟最初的设计保持一致，约定 RESTful 接口之间的调用方法，我们需要将 API 设计文档化，因此我们引入了 API Blueprint。&lt;/p&gt;
&lt;h2 id=&#34;api-blueprint-是什么&#34;&gt;API Blueprint 是什么&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://apiblueprint.org/&#34; title=&#34;API Blueprint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API Blueprint&lt;/a&gt;
 用来编写 API 文档的一种标记语言，类似于 Markdown，因为是纯文本的，所以方便共享编辑，具体的语法规则可以在 &lt;a href=&#34;https://apiblueprint.org/documentation/&#34; title=&#34;API Blueprint documentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API Blueprint documentation&lt;/a&gt;
 查看，配合一些开源的工具可以把接口文档渲染成 html 再搭配一个静态服务器，方便于分享。&lt;/p&gt;
&lt;p&gt;另外，配合一些工具，可以直接生成一个 mock data 数据，这样只要和后端的同学约定好接口格式，那么前端再开发的时候可以使用 mock data 数据来做测试，等到后端写好接口之后再做联调就可以了。&lt;/p&gt;
&lt;p&gt;我们以&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go&#34; title=&#34;Cloud Native Go&#34;&gt;Cloud Native Go&lt;/a&gt;
书中的&lt;a href=&#34;https://github.com/rootsongjc/gogo-service&#34; title=&#34;gogo-service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gogo-service&lt;/a&gt;
示例里的&lt;code&gt;apiary.apib&lt;/code&gt;文件为例。&lt;/p&gt;
&lt;p&gt;该文件实际上是一个 Markdown 格式的文件，Github 中原生支持该文件，使用&lt;a href=&#34;https://typora.io&#34; title=&#34;Typora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Typora&lt;/a&gt;
打开后是这样子。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/creating-api-document-with-api-blueprint/apiary-api-blueprint_hue336860cd87264955c396f9fb64ab7af_43462_939x1057_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/creating-api-document-with-api-blueprint/apiary-api-blueprint.jpg&#34; data-img=&#34;/blog/creating-api-document-with-api-blueprint/apiary-api-blueprint.jpg&#34; data-width=&#34;939&#34; data-height=&#34;1057&#34; alt=&#34;image&#34; data-caption=&#34;apiary.apib 文件&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  &lt;figcaption&gt;apiary.apib 文件&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在 Visual Studio Code 中有个 API Element extension 对于 API Blueprint 文件的支持也比较好。&lt;/p&gt;
&lt;h2 id=&#34;生成静态页面和进行冒烟测试&#34;&gt;生成静态页面和进行冒烟测试&lt;/h2&gt;
&lt;p&gt;我们分别使用开源的&lt;a href=&#34;https://github.com/danielgtaylor/aglio&#34; title=&#34;aglio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aglio&lt;/a&gt;
和&lt;a href=&#34;https://github.com/Aconex/drakov&#34; title=&#34;drakov&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;drakov&lt;/a&gt;
来生成静态页面和进行冒烟测试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/danielgtaylor/aglio&#34; title=&#34;aglio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aglio&lt;/a&gt;
 是一个可以根据 api-blueprint 的文档生成静态 HTML 页面的工具。&lt;/p&gt;
&lt;p&gt;其生成的工具不是简单的 markdown 到 html 的转换，而是可以生成类似 rdoc 这样的拥有特定格式风格的查询文档。&lt;/p&gt;
&lt;p&gt;在本地安装有 node 环境的情况下，使用下面的命令安装和使用 aglio。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npm install -g aglio
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ aglio -i apiary.apib -o api.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开 api.html 文件后，如图：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/creating-api-document-with-api-blueprint/api-blueprint-html_hu8ba409b22f1b93649795de4abd131bbe_39913_951x930_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/creating-api-document-with-api-blueprint/api-blueprint-html.jpg&#34; data-img=&#34;/blog/creating-api-document-with-api-blueprint/api-blueprint-html.jpg&#34; data-width=&#34;951&#34; data-height=&#34;930&#34; alt=&#34;image&#34; data-caption=&#34;使用 aglio 生成的 API 文档&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  &lt;figcaption&gt;使用 aglio 生成的 API 文档&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;安装和使用 drakov。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npm install -g drakov
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ drakov -f apiary.apib -p &lt;span class=&#34;m&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;INFO&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; No configuration files found
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;INFO&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Loading configuration from CLI
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   DRAKOV STARTED   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches List All Matches
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: POST /matches Start a New Match
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id Get Match Details
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id Get Current Liberties &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Match
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id Get Current Chains &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Match
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id/moves Get a Sequential List of All Moves Performed in a Match
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: POST /matches/:match_id/moves Make a Move
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Drakov 1.0.4      Listening on port &lt;span class=&#34;m&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;http://localhost:3000&lt;/code&gt;就可以对该应用进行冒烟测试了。&lt;/p&gt;
&lt;p&gt;例如查询有哪些 match：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl http://localhost:3000/matches
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span class=&#34;s2&#34;&gt;&amp;#34;5a003b78-409e-4452-b456-a6f0dcee05bd&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;started_at&amp;#34;&lt;/span&gt;: 13231239123391,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;turn&amp;#34;&lt;/span&gt; : 27,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;gridsize&amp;#34;&lt;/span&gt; : 19,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;playerWhite&amp;#34;&lt;/span&gt; : &lt;span class=&#34;s2&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;playerBlack&amp;#34;&lt;/span&gt; : &lt;span class=&#34;s2&#34;&gt;&amp;#34;alfred&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外通过&lt;a href=&#34;https://apiary.io&#34; title=&#34;Apiary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apiary&lt;/a&gt;
这个网站，我们可以直接以上的所有功能，还可以同时在页面上进行 mock test，生成多种语言的 code example。如图：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/creating-api-document-with-api-blueprint/apiary-gogo-service_hu61cccb0b219018769a95c6cd5c7d7765_58509_1863x957_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/creating-api-document-with-api-blueprint/apiary-gogo-service.jpg&#34; data-img=&#34;/blog/creating-api-document-with-api-blueprint/apiary-gogo-service.jpg&#34; data-width=&#34;1863&#34; data-height=&#34;957&#34; alt=&#34;image&#34; data-caption=&#34;Apiary 页面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  &lt;figcaption&gt;Apiary 页面&lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
  </channel>
</rss>

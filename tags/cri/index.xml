<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – CRI</title>
    <link>https://jimmysong.io/tags/cri/</link>
    <description>Recent content in CRI on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>rootsongjc@gmail.com (Jimmy Song)</managingEditor>
    <webMaster>rootsongjc@gmail.com (Jimmy Song)</webMaster>
    <lastBuildDate>Mon, 15 Apr 2024 13:54:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/cri/index.xml" rel="self" type="application/rss+xml" />
    
    
      
         
        
                                                         
                                                         
                           
    <item>
      <title>深入解读 CNI：容器网络接口</title>
      <link>https://jimmysong.io/blog/cni-deep-dive/</link>
      <pubDate>Mon, 15 Apr 2024 13:54:49 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/cni-deep-dive/</guid>
      <description>
        
        
        &lt;p&gt;在容器化环境中，有效管理网络是至关重要的。容器网络接口（CNI）是一个标准，定义了容器应如何配置网络。本文将深入探讨 CNI 的基础知识，并带你了解 CNI 与 CRI 的关系。&lt;/p&gt;
&lt;h2 id=&#34;what-is-cni&#34;&gt;什么是 CNI？&lt;/h2&gt;
&lt;p&gt;CNI（容器网络接口）规范为容器运行时和网络插件之间提供了一个通用的接口，旨在实现容器网络配置的标准化。&lt;/p&gt;
&lt;p&gt;CNI 规范包含以下几个核心组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络配置的格式&lt;/strong&gt;：定义了管理员如何定义网络配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求协议&lt;/strong&gt;：描述了容器运行时如何向网络插件发出网络配置或清理请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件执行过程&lt;/strong&gt;：详细阐述了插件如何根据提供的配置执行网络设置或清理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件委派&lt;/strong&gt;：允许插件将特定功能委托给其他插件执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果返回&lt;/strong&gt;：定义了插件执行完成后如何向运行时返回结果的数据格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNI 规范通过定义这些核心组成部分，确保了不同的容器运行时和网络插件能够以一致的方式进行交互，实现网络配置的自动化和标准化。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    CNI 规范的一些要点
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;CNI 是一个插件化的容器化网络解决方案&lt;/li&gt;
&lt;li&gt;CNI 插件为可执行文件&lt;/li&gt;
&lt;li&gt;单个 CNI 插件的职责是单一的&lt;/li&gt;
&lt;li&gt;CNI 插件是呈链式调用的&lt;/li&gt;
&lt;li&gt;CNI 规范为一个容器定义一个 Linux 网络命名空间&lt;/li&gt;
&lt;li&gt;CNI 的网络定义存储为 JSON 格式&lt;/li&gt;
&lt;li&gt;网络定义通过 STDIN 输入流传输到插件，这意味着宿主机上不会存储网络配置文件，其他的配置参数通过环境变量传递给插件&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CNI 插件根据操作类型，接收相应的网络配置参数，执行网络配置或清理任务，并返回执行结果。这一流程确保了容器网络的动态配置与容器生命周期的同步。&lt;/p&gt;
&lt;p&gt;下图展示了 CNI 包含了众多的网络插件。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/cdc38d55a4fc4468ab20df85ab63c2c7.svg&#34; data-img=&#34;/blog/cni-deep-dive/cdc38d55a4fc4468ab20df85ab63c2c7.svg&#34; alt=&#34;image&#34; data-caption=&#34;CNI 插件的种类&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CNI 插件的种类&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;根据 &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#section-2-execution-protocol&#34; title=&#34;CNI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 规范&lt;/a&gt;，一个 CNI 插件负责以某种方式配置容器的网络接口。插件可分为两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;接口&amp;quot;插件，负责在容器内部创建网络接口并确保其具有连通性。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;链式&amp;quot;插件，调整已创建接口的配置（但可能需要创建更多接口以完成此操作）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;relationship&#34;&gt;CNI 与 CRI 的关系&lt;/h2&gt;
&lt;p&gt;CNI 和 CRI（容器运行时接口）是 Kubernetes 中两个关键的接口，它们分别处理容器的网络配置和运行时管理。在 Kubernetes 集群中，CRI 调用 CNI 插件来配置或清理容器的网络，这确保了网络配置的过程与容器的创建和销毁过程紧密协调。&lt;/p&gt;
&lt;p&gt;下图直观地展示了 CNI 如何与 CRI 协同运行的：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/5451dd983a8c3858a265283d74b7536b.svg&#34; data-img=&#34;/blog/cni-deep-dive/5451dd983a8c3858a265283d74b7536b.svg&#34; alt=&#34;image&#34; data-caption=&#34;CNI 如何与 CRI 协同运行的&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CNI 如何与 CRI 协同运行的&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 CRI&lt;/strong&gt;：Kubelet 指示 CRI 创建已调度的 Pod 的容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI 到 Pod&lt;/strong&gt;：容器运行时在 Pod 中启动容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod 到 CRI&lt;/strong&gt;：一旦容器运行，它会向容器运行时发出信号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI 到 Kubelet&lt;/strong&gt;：容器运行时通知 Kubelet 容器已准备就绪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 CNI&lt;/strong&gt;：容器已启动，Kubelet 调用 CNI 为 Pod 设置网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI 到 Pod&lt;/strong&gt;：CNI 为 Pod 配置网络，将其连接到必要的网络接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod 到 CNI&lt;/strong&gt;：网络配置完成后，Pod 向 CNI 确认网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI 到 Kubelet&lt;/strong&gt;：CNI 通知 Kubelet Pod 的网络已准备就绪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 Pod&lt;/strong&gt;：现在 Pod 完全可操作，两个容器均已运行且网络已配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了在 Kubernetes 中为 Pod 设置网络所涉及的详细步骤：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/4f3017abf23385a5007302ea17241bdf.svg&#34; data-img=&#34;/blog/cni-deep-dive/4f3017abf23385a5007302ea17241bdf.svg&#34; alt=&#34;image&#34; data-caption=&#34;在 Kubernetes 中为 Pod 设置网络所涉及的详细步骤&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;在 Kubernetes 中为 Pod 设置网络所涉及的详细步骤&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pod 调度&lt;/strong&gt;：Kubelet 在节点上调度一个 Pod 运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求网络设置&lt;/strong&gt;：已调度的 Pod 请求 Kubelet 进行网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用 CNI&lt;/strong&gt;：Kubelet 调用 CNI 处理 Pod 的网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建网络命名空间&lt;/strong&gt;：CNI 为 Pod 创建一个网络命名空间，隔离其网络环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配 IP 地址&lt;/strong&gt;：CNI 通过其 IP 地址管理（IPAM）插件为 Pod 分配一个 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置网络接口&lt;/strong&gt;：CNI 在 Pod 的网络命名空间内设置必要的网络接口，将其连接到网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络设置完成&lt;/strong&gt;：Pod 通知 Kubelet 其网络设置已完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带有网络运行的 Pod&lt;/strong&gt;：Pod 现在已经运行，并且其网络已配置，可以与 Kubernetes 集群中的其他 Pod 和服务通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cni-process&#34;&gt;CNI 工作流程&lt;/h2&gt;
&lt;p&gt;容器网络接口（CNI）规范定义了容器如何配置网络，其中包括 &lt;code&gt;ADD&lt;/code&gt;、&lt;code&gt;CHECK&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;GC&lt;/code&gt; 和 &lt;code&gt;VERSION&lt;/code&gt; 五种操作。容器运行时通过调用各种 CNI 插件来执行这些操作，从而实现容器网络的动态管理和更新。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/893d64215a1ed2a7e409925b258f32ee.svg&#34; data-img=&#34;/blog/cni-deep-dive/893d64215a1ed2a7e409925b258f32ee.svg&#34; alt=&#34;image&#34; data-caption=&#34;CNI 工作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CNI 工作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;为了详细说明序列图中描述的每个步骤，涉及 Kubelet、Pod、CNI 插件（包括接口和链式 CNI 插件）、网络设置和 IP 地址管理（IPAM）之间的交互，让我们深入了解这个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;调度 Pod&lt;/strong&gt;：Kubelet 安排一个 Pod 在节点上运行。这一步启动了 Kubernetes 集群中 Pod 的生命周期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求网络设置&lt;/strong&gt;：Pod 向 Kubelet 发出网络设置请求。这个请求触发了为 Pod 配置网络的过程，确保它可以在 Kubernetes 集群内进行通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用 CNI 插件&lt;/strong&gt;：Kubelet 调用配置的容器网络接口（CNI）插件。CNI 定义了一个标准化的方式，用于容器管理系统在 Linux 容器中配置网络接口。Kubelet 将必要的信息传递给 CNI 插件，以启动网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用接口插件&lt;/strong&gt;：CNI 框架调用一个接口 CNI 插件，负责为 Pod 设置主要的网络接口。这个插件可能会创建一个新的网络命名空间、连接一对 veth 或执行其他操作，以确保 Pod 具有所需的网络接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置网络接口&lt;/strong&gt;：接口 CNI 插件为 Pod 配置网络接口。这个设置包括分配 IP 地址、设置路由和确保接口准备好通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用链式插件&lt;/strong&gt;：在设置网络接口之后，接口 CNI 插件或 CNI 框架调用链式 CNI 插件。这些插件执行额外的网络配置任务，比如设置 IP 伪装、配置入口/出口规则或应用网络策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配 IP 地址&lt;/strong&gt;：作为链式过程的一部分，链式 CNI 插件中的一个可能涉及 IP 地址管理（IPAM）。IPAM 插件负责为 Pod 分配一个 IP 地址，确保每个 Pod 在集群或命名空间内具有唯一的 IP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 地址已分配&lt;/strong&gt;：IPAM 插件分配了一个 IP 地址，并将分配信息返回给调用插件。这些信息通常包括 IP 地址本身、子网掩码和可能的网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用网络策略&lt;/strong&gt;：链式 CNI 插件将任何指定的网络策略应用于 Pod 的网络接口。这些策略可以规定允许的入口和出口流量，确保根据集群的配置要求进行网络安全和隔离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链式配置完成&lt;/strong&gt;：一旦所有链式插件完成了它们的任务，Pod 的整体网络配置被认为已完成。CNI 框架或链中的最后一个插件向 Kubelet 发送信号，表明网络设置已完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络设置完成&lt;/strong&gt;：Kubelet 收到了 Pod 的网络设置完成的确认。此时，Pod 具有完全配置的网络接口，具有 IP 地址、路由规则和应用的网络策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带有网络运行的 Pod&lt;/strong&gt;：Pod 现在已经运行，并配置了网络。它可以与 Kubernetes 集群中的其他 Pod 通信，根据网络策略访问外部资源，并执行其指定的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是针对 &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#appendix-examples&#34; title=&#34;CNI 官方示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 官方示例&lt;/a&gt;中的 &lt;code&gt;ADD&lt;/code&gt; 操作、&lt;code&gt;CHECK&lt;/code&gt; 操作和 &lt;code&gt;DELETE&lt;/code&gt; 操作的示例序列图以及详细说明。通过这些操作，容器运行时与 CNI 插件之间进行交互，实现容器网络配置的动态管理和更新。&lt;/p&gt;
&lt;h3 id=&#34;add&#34;&gt;ADD 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 ADD 操作的示例序列图以及详细说明：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/4c05303a04984692bbba9bac12928387.svg&#34; data-img=&#34;/blog/cni-deep-dive/4c05303a04984692bbba9bac12928387.svg&#34; alt=&#34;image&#34; data-caption=&#34;ADD 操作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;ADD 操作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Portmap 插件&lt;/strong&gt;：容器运行时通过调用 Portmap 插件执行 ADD 操作，配置容器的端口映射。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap 配置完成&lt;/strong&gt;：Portmap 插件完成端口映射配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 ADD 操作，配置容器的网络调优参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning 配置完成&lt;/strong&gt;：Tuning 插件完成网络调优参数配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件&lt;/strong&gt;：容器运行时调用 Bridge 插件执行 ADD 操作，配置容器的网络接口和 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：在完成自身配置之前，Bridge 插件调用 Host-local 插件执行 ADD 操作，配置容器的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM 配置完成&lt;/strong&gt;：Host-local 插件作为 IP 地址管理（IPAM）的授权方，完成 IP 地址分配，并将结果返回给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 配置完成&lt;/strong&gt;：Bridge 插件完成网络接口和 IP 地址配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器启动时，其所需的网络配置能够按照预期进行设置，包括端口映射、网络调优和 IP 地址分配等。&lt;/p&gt;
&lt;h3 id=&#34;check&#34;&gt;CHECK 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 CHECK 操作的示例序列图以及详细说明：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/eaf27d3bee18f3fe637b78d765c66d3c.svg&#34; data-img=&#34;/blog/cni-deep-dive/eaf27d3bee18f3fe637b78d765c66d3c.svg&#34; alt=&#34;image&#34; data-caption=&#34;CHECK 操作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CHECK 操作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件进行检查&lt;/strong&gt;：容器运行时通过调用 Bridge 插件执行 CHECK 操作，检查容器的网络配置是否符合预期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：Bridge 插件调用 Host-local 插件执行 CHECK 操作，检查 IP 地址分配是否正常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回无错误&lt;/strong&gt;：Host-local 插件检查 IP 地址分配无异常，并返回无错误给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回 0 返回码&lt;/strong&gt;：Bridge 插件检查网络配置无异常，并返回 0 返回码给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件进行检查&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 CHECK 操作，检查网络调优参数是否符合预期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作成功&lt;/strong&gt;：Tuning 插件检查网络调优参数无异常，返回操作成功给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器运行期间，其网络配置和网络调优参数能够按照预期进行检查和验证，以确保网络配置的一致性和正确性。&lt;/p&gt;
&lt;h3 id=&#34;delete&#34;&gt;DELETE 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 DELETE 操作的示例序列图以及详细说明：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/f7506b2840f92ecda6ad52e98a92e79c.svg&#34; data-img=&#34;/blog/cni-deep-dive/f7506b2840f92ecda6ad52e98a92e79c.svg&#34; alt=&#34;image&#34; data-caption=&#34;DELETE 操作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;DELETE 操作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Portmap 插件&lt;/strong&gt;：容器运行时通过调用 Portmap 插件执行 DELETE 操作，删除容器的端口映射配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap 删除完成&lt;/strong&gt;：Portmap 插件完成端口映射的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 DELETE 操作，删除容器的网络调优参数配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning 删除完成&lt;/strong&gt;：Tuning 插件完成网络调优参数的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件&lt;/strong&gt;：容器运行时调用 Bridge 插件执行 DELETE 操作，删除容器的网络接口和 IP 地址配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：在完成自身删除之前，Bridge 插件调用 Host-local 插件执行 DELETE 操作，删除容器的 IP 地址分配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM 删除完成&lt;/strong&gt;：Host-local 插件完成 IP 地址分配的删除，并将结果返回给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 删除完成&lt;/strong&gt;：Bridge 插件完成网络接口和 IP 地址的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器停止运行时，其所需的网络配置能够被正确清理和移除，以确保网络资源的有效释放和管理。&lt;/p&gt;
&lt;p&gt;通过对 ADD、CHECK 和 DELETE 操作的示例序列图及详细说明，可以清晰地了解容器运行时与 CNI 插件之间的交互过程，以及如何实现容器网络配置的动态管理和更新。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;CNI 为容器化环境中的网络管理提供了一种标准化的接口，通过与 CRI 的配合，确保了 Kubernetes 集群中容器的网络配置高效且一致。通过深入理解 CNI，开发者和系统管理员可以更好地管理和优化其容器网络。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md&#34; title=&#34;CNI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>为什么 Docker 要增加 WebAssembly 运行时？</title>
      <link>https://jimmysong.io/blog/why-docker-support-wasm/</link>
      <pubDate>Fri, 07 Apr 2023 18:45:40 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/why-docker-support-wasm/</guid>
      <description>
        
        
        &lt;p&gt;在 &lt;a href=&#34;https://jimmysong.io/blog/docker-four-milestones/&#34; title=&#34;Docker 发展史：四个重大举措，影响深远！&#34;&gt;Docker 发展史：四个重大举措，影响深远！&lt;/a&gt; 这篇文章中我提到了 Docker 从一开始引领容器运行时，再到在容器编排这一维度上落后于 Kubernetes。为了在保住容器运行时的统治地位，Docker 公司提出了 OCI 并通过 &lt;a href=&#34;https://github.com/deislabs/containerd-wasm-shims&#34; title=&#34;containerd-wasm-shim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd-wasm-shim&lt;/a&gt; 支持更多的 WebAssembly 运行时。&lt;/p&gt;
&lt;p&gt;为了解决 Docker 在安全、稳定性、性能及可移植性方面的局限性，Kubernetes 社区开发了具有不同实现和功能的其他容器运行时，并为其制定了容器运行时接口（CRI）规范。目前实现该规范的容器运行时有 containerd、cri-o。还有 katacontainers、gvisor 等未实现 CRI 但是可以通过添加虚拟化层在 Kubernetes 上运行的其他容器运行时。&lt;/p&gt;
&lt;p&gt;开放容器倡议 (OCI) 旨在定义容器镜像格式和运行时的行业标准，Docker 捐赠了其运行时 runc 作为该标准的第一个实现。最近，WASM 社区对 OCI 工具链表现出了兴趣，Docker 现在支持 WebAssembly 模块作为其工件之一。现在 Docker Hub 已经支持除了镜像以外的，Helm、Volume 和 WebAssembly 等常用工件。&lt;/p&gt;
&lt;p&gt;使用 Docker 构建包含 WebAssembly 模块的镜像，并保存在 Docker Hub 中。通过 &lt;a href=&#34;https://github.com/deislabs/containerd-wasm-shims&#34; title=&#34;containerd-wasm-shim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd-wasm-shim&lt;/a&gt;，可以让它们在 Kubernetes 中运行，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/why-docker-support-wasm/oci.svg&#34; data-img=&#34;/blog/why-docker-support-wasm/oci.svg&#34; alt=&#34;image&#34; data-caption=&#34;在 Kubernetes 中运行 WebAssembly 模块&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;在 Kubernetes 中运行 WebAssembly 模块&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Containerd 是一种符合 CRI（Container Runtime Interface）规范的容器运行时，是由 Docker 公司开源并贡献给 CNCF 的。只要支持 CRI 规范的运行时都可以在 Kubernetes 中运行。&lt;/p&gt;
&lt;p&gt;关于以上提到的名词 containerd、CRI、OCI 等的关系介绍，可以参考 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/490585683&#34; title=&#34;Docker，containerd，CRI，CRI-O，OCI，runc 分不清？看这一篇就够了&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker，containerd，CRI，CRI-O，OCI，runc 分不清？看这一篇就够了&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;advantages&#34;&gt;在 Docker 中运行 WebAssembly 应用相对 Linux 镜像有什么优势？&lt;/h2&gt;
&lt;p&gt;使用 Docker 运行 WebAssembly 应用相对运行 Linux 镜像有以下优势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更高的性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebAssembly 应用的启动时间更短，因为它不需要启动整个操作系统，而 Linux 容器需要。WebAssembly 模块的冷启动时间比 Docker 容器快 100 倍。WebAssembly 模块的内存占用更小，因为它是一个二进制格式，可以高效地压缩代码和依赖，而 Docker 容器需要打包整个镜像。WebAssembly 模块的大小一般在 1MB 以内，而 Docker 镜像的大小可以达到 100 或 200 MB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更高的可移植性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebAssembly 应用是一个架构中立的格式，只要有相应的运行时，就可以在任何底层架构上运行，而不需要考虑不同架构之间的兼容性问题。Docker 容器需要针对不同的架构构建不同的镜像，可能会存在一些潜在的安全风险或漏洞。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更好的安全性和隔离性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebAssembly 应用可以提供代码级别的安全性，防止恶意代码访问系统资源，具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebAssembly 应用是运行在一个沙箱环境中的二进制字节码，不需要访问主机系统的资源，也不会受到主机系统的影响。Docker 容器虽然也是运行在一个隔离的环境中，但是仍然需要在主机系统上运行，可能会受到主机系统的攻击或干扰。&lt;/li&gt;
&lt;li&gt;WebAssembly 应用是通过 WebAssembly System Interface (WASI) 来与外部交互的，WASI 是一种标准化的 API 集合，可以提供一些基本的系统功能，比如文件操作、网络访问、环境变量等。WASI 可以限制 WebAssembly 应用的权限和能力，防止它们做一些危险的操作。Docker 容器虽然也可以通过设置一些安全选项来限制容器的权限和能力，但是仍然需要依赖主机系统提供的功能和服务。&lt;/li&gt;
&lt;li&gt;WebAssembly 应用是一个架构中立的格式，只要有相应的运行时，就可以在任何底层架构上运行，而不需要考虑不同架构之间的兼容性问题。Docker 容器需要针对不同的架构构建不同的镜像，可能会存在一些潜在的安全风险或漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为有以上优势，WebAssembly 在一些场景下比 Docker 容器更有优势，例如边缘计算、云原生应用和微服务。当然，WebAssembly 应用也有一些局限性，比如不支持多线程、垃圾回收和二进制打包等。因此，并不是所有的场景都适合使用 WebAssembly 应用。你可以根据你的具体需求和偏好来选择合适的技术方案。&lt;/p&gt;
&lt;h2 id=&#34;how-to-run-wasm-with-docker&#34;&gt;如何在 Docker 中运行 WebAssembly 应用？&lt;/h2&gt;
&lt;p&gt;在 Docker 中运行 WebAssembly 应用的方式与普通的 Linux 镜像没有太大的不同，只是在运行时需要指定下平台和运行时。下面的例子来自 &lt;a href=&#34;https://docs.docker.com/desktop/wasm/&#34; title=&#34;Docker 官方文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 官方文档&lt;/a&gt;，以在 Docker Desktop 中为例运行 WebAssembly 应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -dp 8080:8080 --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;wasm-example --runtime&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;io.containerd.wasmedge.v1 --platform&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;wasi/wasm32 michaelirwin244/wasm-example
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--runtime=io.containerd.wasmedge.v1&lt;/code&gt; 指定使用 WasmEdge 运行时，替代默认的 Linux 容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--platform=wasi/wasm32&lt;/code&gt; 指定镜像的架构。通过利用 Wasm 架构，无需为不同的机器架构构建单独的镜像。Wasm 运行时负责将 Wasm 二进制文件转换为机器指令的最后一步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前 Docker 支持四种 WebAssembly 运行时，分别为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运行时名称&lt;/th&gt;
&lt;th&gt;API 名称&lt;/th&gt;
&lt;th&gt;开发者&lt;/th&gt;
&lt;th&gt;基金会托管&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/fermyon/spin&#34; title=&#34;spin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io.containerd.spin.v1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fermyon&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/deislabs/spiderlightning&#34; title=&#34;SpiderLightning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpiderLightning&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io.containerd.slight.v1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DeisLabs&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/WasmEdge/WasmEdge&#34; title=&#34;WasmEdge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmEdge&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io.containerd.wasmedge.v1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SecondState&lt;/td&gt;
&lt;td&gt;CNCF 沙箱项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/bytecodealliance/wasmtime&#34; title=&#34;Wasmtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasmtime&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io.containerd.wasmtime.v1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mozilla、Fastly、Intel、Red Hat 等公司&lt;/td&gt;
&lt;td&gt;字节码联盟项目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在命令行终端中输入以下命令可以查看 WebAssembly 应用的运行情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl http://localhost:8080/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到如下输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello world from Rust running with Wasm! Send POST data to /echo to have it echoed back to you
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你还可以向&lt;code&gt;/echo&lt;/code&gt;端点发送 POST 测试请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl localhost:8080/echo -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;message&amp;#34;:&amp;#34;Hello&amp;#34;}&amp;#39;&lt;/span&gt; -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-type: application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到如下输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文介绍了 Docker 为什么要增加对 WebAssembly 的支持，以及在 Docker 中运行 WebAssembly 应用的优势和方法。WebAssembly 应用相对于 Linux 镜像有更高的性能、可移植性和安全性，适用于边缘计算、云原生应用和微服务等场景。Docker 支持四种 WebAssembly 运行时，分别为 spin、spiderlightning、WasmEdge 和 wasmtime。在接下来的文章中我将介绍如何开发一个 WebAssembly 应用，敬请期待。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/blog/announcing-docker-hub-oci-artifacts-support/&#34; title=&#34;Announcing Docker Hub OCI Artifacts Support&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Announcing Docker Hub OCI Artifacts Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/490585683&#34; title=&#34;Docker，containerd，CRI，CRI-O，OCI，runc 分不清？看这一篇就够了&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker，containerd，CRI，CRI-O，OCI，runc 分不清？看这一篇就够了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/blog/build-share-run-webassembly-apps-docker/&#34; title=&#34;Build, Share, and Run WebAssembly Apps Using Docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build, Share, and Run WebAssembly Apps Using Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/blog/why-containers-and-webassembly-work-well-together/&#34; title=&#34;Why Containers and WebAssembly Work Well Together&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why Containers and WebAssembly Work Well Together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@guglielmino/docker-webassembly-a-quick-intro-730c38e8390c&#34; title=&#34;Docker &amp;#43; WebAssembly: a quick intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker + WebAssembly: a quick intro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

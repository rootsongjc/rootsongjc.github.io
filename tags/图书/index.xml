<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song&#39;s Blog – 图书</title>
    <link>https://jimmysong.io/tags/%E5%9B%BE%E4%B9%A6/</link>
    <description>Recent content in 图书 on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 15 Jun 2022 20:27:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/%E5%9B%BE%E4%B9%A6/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>云原生社区著《深入理解 Istio》正式上市开售</title>
      <link>https://jimmysong.io/blog/istio-service-mesh-book/</link>
      <pubDate>Wed, 15 Jun 2022 20:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/istio-service-mesh-book/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/istio-service-mesh-book/istio-book.jpg&#34; data-img=&#34;/blog/istio-service-mesh-book/istio-book.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;云原生社区最新力作 —— 《深入理解 Istio》上市开售&#34;&gt;
    
  
  &lt;figcaption&gt;云原生社区最新力作 —— 《深入理解 Istio》上市开售&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;2017 年 5 月，Google、IBM 和 Lyft 联合 &lt;a href=&#34;https://istio.io/latest/news/releases/0.x/announcing-0.1/&#34; title=&#34;宣布&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布&lt;/a&gt;
 将 &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
 开源，不知不觉中距今已 5 年有余。在这 5 年多的时间里，Istio 项目从一颗种子长成了参天大树。尤其是在 2018 年 Istio 1.0 版本发布的接下来两年里，国内有多本关于 Istio 服务网格的图书上市。在 Istio 图书出版领域，我国走在了世界的前列。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/istio-service-mesh-book/istio-history.svg&#34; data-img=&#34;/blog/istio-service-mesh-book/istio-history.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 开源时间线&#34;&gt;
    
  
  &lt;figcaption&gt;Istio 开源时间线&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;服务网格云原生的核心技术之一&#34;&gt;服务网格：云原生的核心技术之一&lt;/h2&gt;
&lt;p&gt;如今在国内，Istio 几乎可以作为服务网格的代名词，作为 &lt;a href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md&#34; title=&#34;CNCF（云原生计算基金会）定义的云原生&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF（云原生计算基金会）定义的云原生&lt;/a&gt;
关键技术之一，服务网格发展至今经历了以下几个阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索阶段：2017 —2018 年&lt;/li&gt;
&lt;li&gt;早期采用者阶段：2019—2020 年&lt;/li&gt;
&lt;li&gt;大规模落地及生态发展阶段：2021 年至今&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2018 年，CNCF 对云原生的定义是：云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。&lt;/p&gt;
&lt;p&gt;可见，CNCF 将服务网格加入了云原生定义中，即服务网格是云原生的代表性技术之一。如今，Google 正在将 Istio 捐献给 CNCF，我们有理由相信，成为 CNCF 项目后，Istio 的社区会开放，它未来的发展之路也会更顺畅。&lt;/p&gt;
&lt;h2 id=&#34;服务网格与云原生应用&#34;&gt;服务网格与云原生应用&lt;/h2&gt;
&lt;p&gt;云原生的发展方兴未艾，虽然不断有新的技术和产品出现，但作为整个云原生技术栈的一部分，服务网格在过去一年里不断夯实了它作为“云原生网络基础设施”的定位。下图展示了云原生技术栈模型，其中的每一层都有一些代表性的技术来定义标准。作为新时代的中间件，服务网格与其他云原生技术交相辉映，如 Dapr（分布式应用程序运行时）定义了云原生中间件的能力模型，OAM 定义了云原生应用程序模型等，而服务网格定义了云原生七层网络模型。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
    &lt;img src=&#34;cloud-native-stack.svg&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34;
         alt=&#34;云原生应用技术栈&#34; width=&#34;80%&#34;data-img=&#34;cloud-native-stack.svg&#34;
         data-caption=&#34;云原生应用技术栈&#34;
         
         
         
    /&gt;&lt;figcaption&gt;
            云原生应用技术栈
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;为什么需要服务网格&#34;&gt;为什么需要服务网格&lt;/h2&gt;
&lt;p&gt;使用服务网格并非意味着与 Kubernetes 决裂，而是自然而然的事情。Kubernetes 的本质是通过声明配置对应用进行生命周期管理，而服务网格的本质是提供应用间的流量控制和安全性管理，以及可观察性。假如已经使用 Kubernetes 构建了稳定的微服务平台，那么如何设置服务间调用的负载均衡和流量控制呢？&lt;/p&gt;
&lt;p&gt;Envoy 创造的 xDS 协议被众多开源软件所支持，如 Istio、Linkerd、MOSN 等。Envoy 对服务网格或云原生而言最大的贡献就是定义了 xDS。Envoy 本质上是一个网络代理，是通过 API 配置的现代版代理，基于它衍生出了很多不同的使用场景，如 API 网关、服务网格中的 sidecar 代理和边缘代理。&lt;/p&gt;
&lt;p&gt;技术发展从 Kubernetes 到 Istio，概括来讲有以下原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 的本质是应用的生命周期管理，具体来说，就是应用的部署和管理（扩缩容、自 动恢复、发布）。&lt;/li&gt;
&lt;li&gt;Kubernetes 为微服务提供了可扩展、高弹性的部署和管理平台。&lt;/li&gt;
&lt;li&gt;服务网格的基础是透明代理，先通过 sidecar 代理拦截微服务间的流量，再通过控制平面配置管理微服务的行为。如今，服务网格的部署模式也迎来了新的挑战，sidecar 已经不是服务网格所必须的，基于 gRPC 的无代理的服务网格也在测试中。&lt;/li&gt;
&lt;li&gt;xDS 定义了服务网格配置的协议标准，目前基于 gRPC 的 xDS 也正在开发中。&lt;/li&gt;
&lt;li&gt;服务网格将流量管理从 Kubernetes 中解耦，服务网格内部的流量无须 kube-proxy 组件的支持，通过接近微服务应用层的抽象，管理服务间的流量，实现安全性和可观察性功能。&lt;/li&gt;
&lt;li&gt;服务网格是对 Kubernetes 中 service 更上层的抽象，它的下一步是 Serverless，这也是 Google 在 Istio 之后紧接着推出基于 Kubernetes 和 Istio 之上的 Knative 的原因。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;以社区之名成就开源&#34;&gt;以社区之名成就开源&lt;/h2&gt;
&lt;p&gt;2018 年 5 月，在蚂蚁金服的支持下，ServiceMesher 社区成立。随后，国内刮起了服务网格的旋风，由社区领导的 Istio 官方文档翻译工作也进入白热化阶段。&lt;/p&gt;
&lt;p&gt;随着时间的推移，我感受到系统介绍 Istio 的中文资料匮乏，于是在 2018 年 9 月开始构思写一本关于 Istio 的图书，并在 GitHub 上发起了 Istio Handbook 的开源电子书项目。几个月后，随着服务网格技术的推广及 ServiceMesher 社区规模的扩大，我在社区的线上线下活动中结识了很多同样热衷于 Istio 和服务网格技术的朋友。我们一致决定，一起写一本 Istio 的开源电子书，将社区积累的宝贵文章和经验集结成系统的文字，分享给广大开发者。&lt;/p&gt;
&lt;p&gt;2019 年 3 月，在社区管理委员会的组织下，几十位成员自愿参与并开始共同撰写此书。2020 年 5 月，为了更好地推广云原生技术，丰富社区分享的技术内容，我们成立了云原生社区，并将原有的 ServiceMesher 社区纳入其中，社区运营的内容也从服务网格技术扩展到更加全面的云原生技术。&lt;/p&gt;
&lt;p&gt;2020 年 10 月，这本书主要的内容贡献者组成了编委会，成员分别有我、马若飞、王佰平、王炜、罗广明、赵化冰、钟华和郭旭东。我们在出版社的指导与帮助下，对本书进行了后续的版本升级、完善、优化等工作。经过反复的迭代，这本《深入理解 Isito：云原生服务网格进阶实战》终于和大家见面了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
    &lt;img src=&#34;cover.jpg&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34;
         alt=&#34;《深入理解 Istio —— 云原生服务网格进阶实战》封面&#34; width=&#34;70%&#34;data-img=&#34;cover.jpg&#34;
         data-caption=&#34;《深入理解 Istio —— 云原生服务网格进阶实战》封面&#34;
         
         
         data-width=&#34;1200&#34;
         data-height=&#34;1569&#34;
         
         
    /&gt;&lt;figcaption&gt;
            《深入理解 Istio —— 云原生服务网格进阶实战》封面
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;Istio 在 1.5 版本后有了重大的架构变化，同时引入或改进了多项功能，例如，引入了智能 DNS 代理、新的资源对象，改进了对虚拟机的支持等。&lt;/p&gt;
&lt;p&gt;本书以 Istio 新版本为基础编写而成，在持续追踪 Istio 社区最新动向的基础上，力求为读者提 供最新、最全面的内容。另外，本书的多位作者都是一线的开发或运维工程师，具有丰富的 Istio 实战经验，为本书提供了翔实、宝贵的参考案例。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
    &lt;img src=&#34;feature.jpg&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34;
         alt=&#34;本书特色&#34; width=&#34;70%&#34;data-img=&#34;feature.jpg&#34;
         data-caption=&#34;本书特色&#34;
         
         
         data-width=&#34;800&#34;
         data-height=&#34;802&#34;
         
         
    /&gt;&lt;figcaption&gt;
            本书特色
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
    &lt;img src=&#34;target-reader.jpg&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34;
         alt=&#34;面向读者&#34; width=&#34;70%&#34;data-img=&#34;target-reader.jpg&#34;
         data-caption=&#34;面向读者&#34;
         
         
         data-width=&#34;800&#34;
         data-height=&#34;957&#34;
         
         
    /&gt;&lt;figcaption&gt;
            面向读者
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;目前，这本书已经在京东平台上线，要想了解更多有关 Istio 的相关知识，就来读一读这本《深入理解 Isito：云原生服务网格进阶实战》吧！&lt;/p&gt;
&lt;p&gt;京东 618，满 100 减 50，扫码即购！&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
    &lt;a href=&#34;https://item.jd.com/13200745.html&#34;&gt;&lt;img src=&#34;qrcode.jpg&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34;
         alt=&#34;购书二维码&#34; width=&#34;30%&#34;data-img=&#34;qrcode.jpg&#34;
         data-caption=&#34;购书二维码&#34;
         
         
         data-width=&#34;400&#34;
         data-height=&#34;401&#34;
         
         
    /&gt;&lt;/a&gt;&lt;figcaption&gt;
            购书二维码&lt;p&gt;&lt;a href=&#34;https://item.jd.com/13200745.html&#34; title=&#34;点此购买&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点此购买&lt;/a&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


      </description>
    </item>
    
    <item>
      <title>云原生服务网格 Istio 图书</title>
      <link>https://jimmysong.io/blog/cloud-native-service-mesh-istio-book/</link>
      <pubDate>Sat, 03 Aug 2019 15:24:37 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-native-service-mesh-istio-book/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://item.jd.com/12538407.html&#34; title=&#34;《云原生服务网格 Istio：原理、实践、架构与源码解析（张超盟、章鑫、徐中虎、徐飞编著）》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《云原生服务网格 Istio：原理、实践、架构与源码解析（张超盟、章鑫、徐中虎、徐飞编著）》&lt;/a&gt;
是 2019 年国内出版的第四本 Istio 相关图书，前三本分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://item.jd.com/12527008.html&#34; title=&#34;深入浅出 Istio：Service Mesh 快速入门与实践，崔秀龙 著&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Istio：Service Mesh 快速入门与实践，崔秀龙 著&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://item.jd.com/12516473.html&#34; title=&#34;Service Mesh 实战：用 Istio 软负载实现服务网格，周遥 著&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh 实战：用 Istio 软负载实现服务网格，周遥 著&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://item.jd.com/12601120.html&#34; title=&#34;Istio 入门与实战，毛广献 著&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 入门与实战，毛广献 著&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这四本书刚上市时我都获得了作者的赠书，这本书是由四位华为的同学编写，于 2019 年  7 月第一次印刷，全书共 24 章，606 页，售价 139 元。我是在 KubeCon China 2019 的上海大会现场张超盟亲手赠与我的，张超盟也是 2018 年第三届 Service Mesh Meetup 的讲师。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/cloud-native-service-mesh-istio-book/006tNc79ly1g60ml3q3i4j30xc0m8wg2.jpg&#34; data-img=&#34;/blog/cloud-native-service-mesh-istio-book/006tNc79ly1g60ml3q3i4j30xc0m8wg2.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;右侧是云原生服务网格 Istio（华为云原生技术丛书）作者之一张超盟&#34;&gt;
    
  
  &lt;figcaption&gt;右侧是云原生服务网格 Istio（华为云原生技术丛书）作者之一张超盟&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;本书结构&#34;&gt;本书结构&lt;/h2&gt;
&lt;p&gt;全书共分四个篇章，24 个章节，606 页，每个章节的页数占比统计如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/cloud-native-service-mesh-istio-book/006tNc79ly1g5nsbm4pkej30u00uj0vw.jpg&#34; data-img=&#34;/blog/cloud-native-service-mesh-istio-book/006tNc79ly1g5nsbm4pkej30u00uj0vw.jpg&#34; data-width=&#34;1080&#34; data-height=&#34;1099&#34; alt=&#34;image&#34; data-caption=&#34;云原生服务网格 Istio：原理、实践、架构与源码解析》图书章节页数占全书百分比 - 表格&#34;&gt;
    
  
  &lt;figcaption&gt;云原生服务网格 Istio：原理、实践、架构与源码解析》图书章节页数占全书百分比 - 表格&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/cloud-native-service-mesh-istio-book/006tNc79ly1g60mjr3lirj30v20u0q5g.jpg&#34; data-img=&#34;/blog/cloud-native-service-mesh-istio-book/006tNc79ly1g60mjr3lirj30v20u0q5g.jpg&#34; data-width=&#34;1118&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;《云原生服务网格 Istio：原理、实践、架构与源码解析》图书章节页数占全书百分比 - 饼图&#34;&gt;
    
  
  &lt;figcaption&gt;《云原生服务网格 Istio：原理、实践、架构与源码解析》图书章节页数占全书百分比 - 饼图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从统计结果中可以看出书中第 3 章（非侵入的流量治理）、第 14 章（司令官 Pilot）一共占全书的页数百分比为 24%，几乎占了四分之一的篇幅。&lt;/p&gt;
&lt;p&gt;这本书是目前（2019 年 08 月 15 日）市面上能买到的最全的一本 Istio 相关的图书了，话说国外还一本 Istio 的书也出来，国内到现在都出了四本了，是不是有种墙外开花墙内香的感觉？&lt;/p&gt;
&lt;p&gt;建议大家结合 &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio 官方文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 官方文档&lt;/a&gt;
一起来看这本书，Istio 版本更新虽然没有 Kubernetes 那么快，但是在本书发行一个多月后也要发布 1.2 版本了，欢迎大家加入 ServiceMesher 社区来学习 Istio！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>TheNewStack 云原生 Devops 报告解读</title>
      <link>https://jimmysong.io/blog/cloud-native-devops-book/</link>
      <pubDate>Sun, 02 Jun 2019 18:13:19 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-native-devops-book/</guid>
      <description>
        
        
        &lt;p&gt;本书的主旨是：如果没有成熟的 DevOps 实践，云原生是玩转不起来的。DevOps 已经不是什么新鲜的话题，但到底什么是 &amp;ldquo;Cloud Native DevOps”及如何实践 Cloud Native DevOps，这正是本书要探讨的内容。&lt;/p&gt;
&lt;p&gt;DevOps 正在经历一次转型，从自动化构建到声明式基础设施、微服务和 Serverless。大部分人对云原生存在误解，以为&lt;code&gt;云原生&lt;/code&gt;就是&lt;code&gt;运行在云上&lt;/code&gt;，其实云原生更偏向于一种理念，即应用的定义及架构方式，而不是将应用运行在哪里。而云上的 DevOps 与传统的 DevOps 有什么区别，开发者和运维人员在云原生时代如何转型？也许本书会给你答案。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书是由 &lt;a href=&#34;https://thenewstack.com&#34; title=&#34;TheNewStack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TheNewStack&lt;/a&gt;
 出品的免费电子书，可以在 &lt;a href=&#34;https://thenewstack.io/ebooks/devops/cloud-native-devops-2019/&#34; title=&#34;TheNewStack 网站&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TheNewStack 网站&lt;/a&gt;
 上获取本书的电子版，同时推荐 &lt;a href=&#34;https://thenewstack.io/ebooks&#34; title=&#34;TheNewStack 的电子书系列&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TheNewStack 的电子书系列&lt;/a&gt;
，囊括了容器、微服务、Kubernetes、云原生诸多主题，可以作为企业决策的参考读物。&lt;/p&gt;
&lt;p&gt;本书是 TheNewStack 编辑集结 DevOps 领域的专家在各种大会上的发言、演讲，有很多观点引用，并结合了一些调查问卷数据展示了一幅云原生 DevOps 的趋势与全景图，下文中我会找一些代表性的观点和图表来说明。&lt;/p&gt;
&lt;p&gt;下面是本书目录，一共分为三大部分：构建、部署和管理，其中前两个部分还给出了参考书目、示例研究等。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/cloud-native-devops-book/a.jpg&#34; data-img=&#34;/blog/cloud-native-devops-book/a.jpg&#34; data-width=&#34;770&#34; data-height=&#34;1058&#34; alt=&#34;image&#34; data-caption=&#34;云原生 DevOps 目录&#34;&gt;
    
  
  &lt;figcaption&gt;云原生 DevOps 目录&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;谁适合读这本书&#34;&gt;谁适合读这本书&lt;/h2&gt;
&lt;p&gt;IT 经理、CIO、团队领导者，希望规划自己公司或团队的云原生化 DevOps 的实践路径以面对大规模场景。&lt;/p&gt;
&lt;h2 id=&#34;云原生化的-devops&#34;&gt;云原生化的 DevOps&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;云原生是对业务价值和团队功能的重构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云原生化的 DevOps 在应用的管理上与原始的 DevOps 最大的区别就是——使用 YAML 文件配置的声明式基础设施（Declarative infrastructure）与应用程序的代码本身放在同一个存储库中，这些 &lt;code&gt;代码&lt;/code&gt; 将由开发团队来维护，而运维团队的职能将转变为基础设施的构建者，服务安全性、健壮性、可见性及耐用性的守护者。&lt;/p&gt;
&lt;p&gt;AWS 的 Serverless 布道师 Chris Munns 早已甚至预测到 2025 年非云供应商的运维人员将不复存在，虽然听上去有点危言耸听，但这也是为传统 IT 运维人员的职业生涯敲响的警钟。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/cloud-native-devops-book/b.jpg&#34; data-img=&#34;/blog/cloud-native-devops-book/b.jpg&#34; data-width=&#34;1682&#34; data-height=&#34;974&#34; alt=&#34;image&#34; data-caption=&#34;云原生 DevOps 高亮部分&#34;&gt;
    
  
  &lt;figcaption&gt;云原生 DevOps 高亮部分&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;开发接手了原来传统运维的一些职责，如配置和发布，减少了每次发布的成本，而运维的职责向管理整个系统的复杂性转变，例如转变为 SRE（Site Reliability Engineer）。&lt;/p&gt;
&lt;h2 id=&#34;工作流自动化的价值&#34;&gt;工作流自动化的价值&lt;/h2&gt;
&lt;p&gt;DevOps 的原始教义：DevOps 不是一种工具或流程，而是一种重视整个组织的持续沟通、协作、集成和自动化的实践。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/cloud-native-devops-book/c.jpg&#34; data-img=&#34;/blog/cloud-native-devops-book/c.jpg&#34; data-width=&#34;1968&#34; data-height=&#34;1300&#34; alt=&#34;image&#34; data-caption=&#34;工作流自动化的五个案例&#34;&gt;
    
  
  &lt;figcaption&gt;工作流自动化的五个案例&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;根据自动化的驱动力及持续时间的长短，将 Workflow Automation 划分为五个类别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务流程自动化&lt;/li&gt;
&lt;li&gt;分布式系统通信&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;编排&lt;/li&gt;
&lt;li&gt;决策自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运维需要做出的转变&#34;&gt;运维需要做出的转变&lt;/h2&gt;
&lt;p&gt;Damon Edwards 提出于运维需要面对的四个灾难（&lt;a href=&#34;https://zh.wikipedia.org/wiki/%e5%90%af%e7%a4%ba%e5%bd%95%e4%b8%ad%e7%9a%84%e5%9b%9b%e9%aa%91%e5%a3%ab&#34; title=&#34;圣经启示录中的四骑士&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;圣经启示录中的四骑士&lt;/a&gt;
）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Silos（孤岛）&lt;/li&gt;
&lt;li&gt;Ticket queues（无尽的低效的工单）&lt;/li&gt;
&lt;li&gt;Toil（干脏活累活的辛勤）&lt;/li&gt;
&lt;li&gt;Low trust（低信任度）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要向云原生 DevOps 转变就要克服以上几个问题。&lt;/p&gt;
&lt;h2 id=&#34;devops-领域的扩展&#34;&gt;DevOps 领域的扩展&lt;/h2&gt;
&lt;p&gt;本书第三章中提到 DevOps 的领域扩展到 Security 和 Networking。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了维持合规的编程语言&lt;/li&gt;
&lt;li&gt;容器镜像扫描&lt;/li&gt;
&lt;li&gt;基于策略的网络安全&lt;/li&gt;
&lt;li&gt;金丝雀测试&lt;/li&gt;
&lt;li&gt;运行时的威胁检测&lt;/li&gt;
&lt;li&gt;日志分析&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>《Service Mesh 实战—基于 Linkerd 和 Kubernetes 的微服务实践》读后感</title>
      <link>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</link>
      <pubDate>Tue, 08 Jan 2019 20:50:44 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</guid>
      <description>
        
        
        &lt;p&gt;最近在回顾 Service Mesh 技术在 2018 年的发展，想再看看 Linkerd，正好&lt;strong&gt;杨彰显&lt;/strong&gt;的这本《Service Mesh 实战——基于 Linkerd 和 Kubernetes 的微服务实践》上市发售了，&lt;strong&gt;机械工业出版社&lt;/strong&gt;的编辑送了我一本，🙏&lt;strong&gt;杨福川&lt;/strong&gt;编辑，我看了下抽空写了点读后感，我看了下抽空写了点读后感，其实也说不上是读后感，就当是自己的一点感悟吧，就当拿此书借题发挥吧，这个知识爆炸的年代，技术发展如此迅速，可以说是 IT 人员的幸运，也是不幸！有多少写开源软件的书推出一版后能撑过三年的？如果软件红得发紫，持续迭代 N 个版本，例如 Kubernetes，最近两年以每三个月一个版本的速度迭代，之前的书早就跟不上节奏，要么就要不断推出新版，直到软件稳定后不再有大的改动。还有种可能就是软件推广和发展的不理想，无人问津，写这样软件的书就不会有再版了。&lt;/p&gt;
&lt;p&gt;拿到本书后我的第一反应就是看看这本书定稿的时候 Istio 是什么版本，Linkerd 又是什么版本。因为在这一年内两款开源软件都有较大的版本变动，如果书籍定稿的时候基于的软件版本太低，软件架构可能会有较大的变化，影响书中示例和部分章节的时效性。这也是大多技术书籍名短的症结所在，技术发展是在太快，传统的书籍出版流程往往过于繁琐和冗长，等到书籍出版后所介绍的软件都出了好几个版本。例如 Kubernetes 这种的软件，每三个月一个版本，而写一般书从策划到发行少说半年，一般也要一年的时间。&lt;/p&gt;
&lt;h2 id=&#34;关于书籍定稿时的软件版本&#34;&gt;关于书籍定稿时的软件版本&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Istio 0.8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书第一章「Service Mesh 简介」对 Service Mesh 相关开源产品介绍时提到本书定稿时 Istio 是 0.8 版本，而 Istio 在 2018 年 7 月 31 日发布了 &lt;a href=&#34;https://istio.io/zh/about/notes/1.0/&#34; title=&#34;1.0 版本&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.0 版本&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;这本书定稿时，Istio 的最新版本是 0.8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linkerd 1.3.6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书从序言开始一直到第二章结束也没有提及写作时基于的 Linkerd 版本，我在第二章的安装步骤中看到了说明。&lt;/p&gt;
&lt;p&gt;可以看到本书写作时是基于 Linkerd 1.3.6 版本，而 Linkerd 在同年的 9 月 18 日发布了 &lt;a href=&#34;https://cloudnative.to/blog/linkerd-2-0-in-general-availability/&#34; title=&#34;2.0 GA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2.0 GA&lt;/a&gt;
，这一版本跟 1.x 版本相比有重大变化——它还将项目从集群范围的 service mesh 转换为可组合的 &lt;em&gt;service sidecar&lt;/em&gt; ，旨在为开发人员和服务所有者提供在云原生环境中成功所需的关键工具。&lt;/p&gt;
&lt;h2 id=&#34;linkerd-vs-envoy&#34;&gt;Linkerd vs Envoy&lt;/h2&gt;
&lt;p&gt;Linkerd 2.0 的 service sidecar 设计使开发人员和服务所有者能够在他们的服务上运行 Linkerd，提供自动可观察性、可靠性和运行时诊断，而无需更改配置或代码。通过提供轻量级的增量路径来获得平台范围的遥测、安全性和可靠性的传统 service mesh 功能，service sidecar 方法还降低了平台所有者和系统架构师的风险。该版本还用 Rust 重写了代理部分，在延迟，吞吐量和资源消耗方面产生了数量级的改进。&lt;/p&gt;
&lt;p&gt;而 Linkerd 1.x 继承自 Twitter 开源的 Finagle 高性能 RPC，所有想要深度学习 Linkerd 1.x 还需要了解 Finagle，这就跟 Istio 将 Envoy 作为默认的数据平面一样，要想深度学习 Istio 必须了解 Envoy。&lt;/p&gt;
&lt;p&gt;二者几乎使用了完全不同的术语，假如你已经了解了 &lt;a href=&#34;https://envoyproxy.io&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;
 想要再切换到 Linkerd 上，那么就要再费很多心力来学习它的概念和原理，例如如下这些术语或配置（Linkerd 中独有的配置）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dtab（委托表）&lt;/strong&gt;：由一系列路由组成，由一系列路由规则组成，以逻辑路径为输入，然后经过路由规则做一系列转换生成具体名字。这是 Linkerd 路由机制的根本，就像 Envoy 中的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;
一样，本书的第四章「深入 Linkerd 数据访问流」专门讲解了 dtab 的实现机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dentry（委托表记录）&lt;/strong&gt;：委托表的每条路由规则称为 dentry，如 /consul =&amp;gt; /#/io.l5d.consul/dc1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namer&lt;/strong&gt;：配置 Linkerd 支持的服务发现工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namerd&lt;/strong&gt;：Linkerd 的控制平面，相当于 Istio 中的 Pilot，对接各种服务发现。当然 Linkerd 也可以直接与某个服务发现平台对接如 consul，而不使用 namerd 这个集中路由和配置管理组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interpreter&lt;/strong&gt;：interpreter 决定如何解析服务名字和客户端名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 Linkerd 也是 &lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;CNCF 中的项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 中的项目&lt;/a&gt;
，但它目前还处于孵化阶段，而 Envoy 的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;
已经被众多开源项目所支持，如 &lt;a href=&#34;https://istio.io/zh&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
、&lt;a href=&#34;https://github.com/alipay/sofa-mesh&#34; title=&#34;SOFAMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SOFAMesh&lt;/a&gt;
、&lt;a href=&#34;https://github.com/nginxinc/nginmesh&#34; title=&#34;NginxMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NginxMesh&lt;/a&gt;
 等，且 Envoy 已经从 CNCF 中毕业，以后可能成为 Service Mesh 领域的标准协议，Linkerd 的生存状况堪忧。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书中所有示例都提供了虚拟机的快速上手环境，只要使用 Vagrant 即可创建虚拟机和应用，所以在本书的&lt;a href=&#34;https://github.com/yangzhares/linkerd-in-action&#34; title=&#34;示例代码&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例代码&lt;/a&gt;
有大量的 Vagrantfile。&lt;/p&gt;
&lt;p&gt;本书第三部分「实战篇」花了大量篇幅（本书一半的页数）来讲解如何使用 Linkerd 和 Kubernetes 来管理微服务，可以参考我 2017 年 8 月 1 日写的这篇&lt;a href=&#34;https://jimmysong.io/posts/linkerd-user-guide/&#34; title=&#34;微服务管理框架 service mesh——Linkerd 安装试用笔记&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务管理框架 service mesh——Linkerd 安装试用笔记&lt;/a&gt;
，那时候还是基于 Linkerd 1.1.2，还有 &lt;a href=&#34;https://github.com/linkerd/linkerd-examples/&#34; title=&#34;Linkerd 官方示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd 官方示例&lt;/a&gt;
，这些示例基本都不怎么更新了。&lt;/p&gt;
&lt;p&gt;因为该书定稿时所基于的 Linkerd 版本距离本书发售时的 Linkerd 已经落后一个大版本（最新版本是 &lt;a href=&#34;https://blog.linkerd.io/2018/12/06/announcing-linkerd-2-1/&#34; title=&#34;Linkerd 2.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd 2.1&lt;/a&gt;
），所以读者一定要注意这一点，老实说我只花了两个夜晚快速过了一下本书，无法对本书内容给出具体评论，所以本书是否是你所需要的就要你自己去思考了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes 中的 CI/CD</title>
      <link>https://jimmysong.io/blog/ci-cd-in-kubernetes/</link>
      <pubDate>Thu, 14 Jun 2018 20:33:24 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/ci-cd-in-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;众所周知 Kubernetes 并不提供代码构建、发布和部署，所有的这些工作都是由 CI/CD 工作流完成的，最近 TheNewStack 又出了本小册子（117 页）介绍了 Kubernetes 中 CI/CD 的现状，&lt;a href=&#34;https://thenewstack.io/ebooks/kubernetes/ci-cd-with-kubernetes/&#34; title=&#34;下载本书的 PDF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载本书的 PDF&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书的作者有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rob Scott：ReactiveOps 公司的 SRE&lt;/li&gt;
&lt;li&gt;Janakiram MSV：Janakiram &amp;amp; Associates 的首席分析师&lt;/li&gt;
&lt;li&gt;Craig Martin：Kenzan 的高级副总裁&lt;/li&gt;
&lt;li&gt;Container Solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本小册子里主要主要介绍了以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DevOps 模式&lt;/li&gt;
&lt;li&gt;云原生应用模式&lt;/li&gt;
&lt;li&gt;使用 Spinnaker 做持续交付&lt;/li&gt;
&lt;li&gt;云原生时代的监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;devops-模式&#34;&gt;DevOps 模式&lt;/h2&gt;
&lt;p&gt;这一章从一些流行的自动化运维工具讲起，比如 Chef、Puppet 等，引申出 CI/CD 流水线，进而引出 Docker 和 DevOps，将容器如何解除开发和运维之间的隔阂，但同时也带来了一些挑战，比如频繁的发布变更如何控制，如何控制容器集群的行为，如何拆分应用到容器之中等。这是一个专门用于容器编排调度的工具呼之欲出，Kubernetes 的出现彻底改变了局面，可以说它直接改变了应用的基础架构。&lt;/p&gt;
&lt;p&gt;Kubernetes 细化的应用程序的分解粒度，同时将服务发现、配置管理、负载均衡和健康检查等作为基础设施的功能，简化了应用程序的开发。&lt;/p&gt;
&lt;p&gt;而 Kubernetes 这种声明式配置尤其适合 CI/CD 流程，况且现在还有如 Helm、Draft、Spinnaker、Skaffold 等开源工具可以帮助我们发布 Kuberentes 应用。&lt;/p&gt;
&lt;p&gt;有了基于 Kubernetes 的 CI/CD 流程后，又诞生了 GitOps（&lt;a href=&#34;http://weave.works&#34; title=&#34;WeaveWorks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WeaveWorks&lt;/a&gt;
 的博客中有很多相关文章）和 SecOps（Security Operation）。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用模式&#34;&gt;云原生应用模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;云原生是通过构建团队、文化和技术，利用自动化和架构来管理系统的复杂性和解放生产力。——Joe Beda，Heptio CTO，联合创始人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一章的重点是给出了云原生应用的 10 条关键属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用轻量级的容器打包&lt;/li&gt;
&lt;li&gt;使用最合适的语言和框架开发&lt;/li&gt;
&lt;li&gt;以松耦合的微服务方式设计&lt;/li&gt;
&lt;li&gt;以 API 为中心的交互和协作&lt;/li&gt;
&lt;li&gt;无状态和有状态服务在架构上界限清晰&lt;/li&gt;
&lt;li&gt;不依赖于底层操作系统和服务器&lt;/li&gt;
&lt;li&gt;部署在自服务、弹性的云基础设施上&lt;/li&gt;
&lt;li&gt;通过敏捷的 DevOps 流程管理&lt;/li&gt;
&lt;li&gt;自动化能力&lt;/li&gt;
&lt;li&gt;通过定义和策略驱动的资源分配&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者然后将应用程序架构中的不同组件映射到云原生的工作负载中。&lt;/p&gt;
&lt;p&gt;这也是 DevOps 需要关注的部分，如何将云原生的组件映射为 Kubernetes 的原语（即 Kubernetes 里的各种资源对象和概念组合）呢？&lt;/p&gt;
&lt;p&gt;总结概括为以下 10 条：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要直接部署裸的 Pod。&lt;/li&gt;
&lt;li&gt;为工作负载选择合适的 Controller。&lt;/li&gt;
&lt;li&gt;使用 Init 容器确保应用程序被正确的初始化。&lt;/li&gt;
&lt;li&gt;在应用程序工作负载启动之前先启动 service。&lt;/li&gt;
&lt;li&gt;使用 Deployment history 来回滚到历史版本。&lt;/li&gt;
&lt;li&gt;使用 ConfigMap 和 Secret 来存储配置。&lt;/li&gt;
&lt;li&gt;在 Pod 里增加 Readiness 和 Liveness 探针。&lt;/li&gt;
&lt;li&gt;给 Pod 这只 CPU 和内存资源限额。&lt;/li&gt;
&lt;li&gt;定义多个 namespace 来限制默认 service 范围的可视性。&lt;/li&gt;
&lt;li&gt;配置 HPA 来动态扩展无状态工作负载。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用-spinnaker-进行持续交付&#34;&gt;使用 Spinnaker 进行持续交付&lt;/h2&gt;
&lt;p&gt;作者首先讲到了 Spinnaker 的各种特性，比如面向微服务啦，云原生的交付工具啦，可视化的交付和基础设施啦，支持多个 region，支持容器和 Kubernetes 等等，不一而足，感兴趣大家可以自己看下报告或者登陆&lt;a href=&#34;https://www.spinnaker.io&#34; title=&#34;Spinnaker 官网&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spinnaker 官网&lt;/a&gt;
查看。&lt;/p&gt;
&lt;p&gt;总之作者就是想说 Spinnaker 很好很强大啦，足以满足您对云原生应用 CI/CD 的需求。&lt;/p&gt;
&lt;h2 id=&#34;云原生时代的监控&#34;&gt;云原生时代的监控&lt;/h2&gt;
&lt;p&gt;监控是为了实现系统的可观察性，不要以为监控就是简单的出个监控页面，监控其实包括以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志收集&lt;/li&gt;
&lt;li&gt;监控和指标度量&lt;/li&gt;
&lt;li&gt;追踪&lt;/li&gt;
&lt;li&gt;告警和可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要把其中任何一个方面做好都不容易。作者主要讲述的 Prometheus 和 Grafana 的开源监控方案。这一章我不详述，感兴趣大家可以查看报告原文。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>如何翻译一本外文书</title>
      <link>https://jimmysong.io/blog/how-to-translate-a-book/</link>
      <pubDate>Fri, 27 Oct 2017 22:55:43 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/how-to-translate-a-book/</guid>
      <description>
        
        
        &lt;p&gt;截止本文发稿时，笔者是以下两本云原生图书的译者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go&#34; title=&#34;Cloud Native Go&#34;&gt;Cloud Native Go&lt;/a&gt;
：已由电子工业出版社出版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-python&#34; title=&#34;Cloud Native Python&#34;&gt;Cloud Native Python&lt;/a&gt;
：正在翻译中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时我还参与了 &lt;a href=&#34;https://kubernetes.io/&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt;
、&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
 的文档翻译，撰写了开源电子书 &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook&#34; title=&#34;kubernetes-handbook&#34;&gt;kubernetes-handbook&lt;/a&gt;
，下面是我本人在翻译过程中的的一些心得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：本文中使用的方法仅供参考，机器翻译有助您快速了解全书或文章的梗概，请勿直接使用机器翻译结果输出。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;图书引进&#34;&gt;图书引进&lt;/h2&gt;
&lt;h3 id=&#34;1-联系出版社&#34;&gt;1. 联系出版社&lt;/h3&gt;
&lt;p&gt;假如您看到一本很好的外文书籍想要翻译，首先需要联系出版社，询问该书是否已被引进，因为每年国内引进的外文书籍是有数量控制的，而且有的书也不是你先给引进就可以引进的，每年都有版权引进会议，国内的出版社统一参加确定引进的书籍，哪家引进多少本，哪一本分给哪一家等。可以与出版社编辑沟通，查看该书是否可以引进，是否已经有别的出版社引进且在翻译中，这个过程基本不需要你与原作者沟通。&lt;/p&gt;
&lt;h3 id=&#34;2-取得图书引进的版权&#34;&gt;2. 取得图书引进的版权&lt;/h3&gt;
&lt;p&gt;如果很幸运的，这本书可以引进到国内，而且还没有人来翻译，可以跟出版社编辑要求翻译这本书，如果书籍内容适当可以一个人翻译，如果内容较多可以分多个人翻译，建议人数不要超过 4 人。&lt;/p&gt;
&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;/h2&gt;
&lt;p&gt;首先需要准备如下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;：用户版本管理，也方便在线查看，我使用 &lt;a href=&#34;https://gitee.com&#34; title=&#34;码云&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;码云&lt;/a&gt;
 私有代码库管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown 编辑器&lt;/strong&gt;：我推荐使用 &lt;a href=&#34;https://typora.io&#34; title=&#34;typora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;typora&lt;/a&gt;
。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gitbook&lt;/strong&gt;：使用 &lt;a href=&#34;https://gitbook.com&#34; title=&#34;Gitbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitbook&lt;/a&gt;
 生成 web 页面便于阅读和查看，注意不要公开发布到 Github 上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word&lt;/strong&gt;：虽然我们使用 markdown 编辑器来编辑，但是 word 还是需要的，因为编辑会在 word 中批注，再返回给你修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Translation-shell&lt;/strong&gt;：命令行翻译工具，见 &lt;a href=&#34;https://github.com/soimort/translate-shell&#34; title=&#34;Github&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;
。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;翻译过程&#34;&gt;翻译过程&lt;/h2&gt;
&lt;p&gt;以下是我个人总结的图书翻译流程，仅供参考。&lt;/p&gt;
&lt;h3 id=&#34;1-分析原版压缩包的结构&#34;&gt;1. 分析原版压缩包的结构&lt;/h3&gt;
&lt;p&gt;以 &lt;a href=&#34;https://jimmysong.io/book/cloud-native-python&#34; title=&#34;Cloud Native Python&#34;&gt;Cloud Native Python&lt;/a&gt;
 这本书为例，原文的压缩包里包含以下目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt;：书中的代码示例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cover&lt;/strong&gt;：本书的封面图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E-Book&lt;/strong&gt;：本书的完成 PDF 文档（一个文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graphics&lt;/strong&gt;：书中的图片，按照章节和顺序编号，放在一个目录下，不一定与图片在书中出现的顺序相同，有些后来补充的图片会另外编号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Printers&lt;/strong&gt;：用于印刷的 PDF 文档，分为封面和正文&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-初始化翻译项目&#34;&gt;2. 初始化翻译项目&lt;/h3&gt;
&lt;p&gt;我们使用 Git 来管理，使用 Gitbook 来预览，需要先初始化一些目录结构和 gitbook 配置。&lt;/p&gt;
&lt;p&gt;初始化的目录和文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LANGS.md&lt;/strong&gt;：语言配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;README.md&lt;/strong&gt;：项目说明&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;book.json&lt;/strong&gt;：gitbook 配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cn&lt;/strong&gt;：中文翻译（按章节划分成不同的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;corrigendum.md&lt;/strong&gt;：勘误表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cover.jpg&lt;/strong&gt;：书籍封面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;en&lt;/strong&gt;：英文原文（按章节划分成不同的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;glossary.md&lt;/strong&gt;：术语表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images&lt;/strong&gt;：保存书中的图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让 Gitbook 支持多语言的 &lt;code&gt;book.json&lt;/code&gt; 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cloud Native Python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cloud Native Python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zh-hans&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Jimmy Song&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;links&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;sidebar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://jimmysong.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;codesnippet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;splitter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;page-toc-button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;back-to-top-button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-lunr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-search&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;search-plus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;tbfed-pagefooter@^0.0.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;pluginsConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;tbfed-pagefooter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Copyright © jimmysong.io 2017&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;modify_label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Updated:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;modify_format&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YYYY-MM-DD HH:mm:ss&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;LANG.md&lt;/code&gt; 文件中定义不同语言的文件目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# Languages
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;*&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;中文&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;cn/&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;*&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;English&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;en/&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-原文-markdown-化&#34;&gt;3. 原文 Markdown 化&lt;/h3&gt;
&lt;p&gt;之所以将原文 Markdown 化一是便于我们后续翻译的时候对照英文和引用其中的原文，二是为了生成 gitbook 便于浏览。将每一章的内容都划分成一个 Markdown 文件，按照章节的名字为文档命名，分别在 &lt;code&gt;cn&lt;/code&gt; 和 &lt;code&gt;en&lt;/code&gt; 目录下都放一份。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/cloud-native-python-cn-en.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/cloud-native-python-cn-en.jpg&#34; data-width=&#34;1184&#34; data-height=&#34;629&#34; alt=&#34;image&#34; data-caption=&#34;中英文目录&#34;&gt;
    
  
  &lt;figcaption&gt;中英文目录&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;4-开始正文的翻译&#34;&gt;4. 开始正文的翻译&lt;/h3&gt;
&lt;p&gt;建议从头开始按顺序翻译，如果前后章节联系不大的可以跳跃翻译，翻译的过程中将一些关键的术语，包括翻译不明确的，需要后续参考的数据记录在 &lt;code&gt;glossary.md&lt;/code&gt; 文档中。&lt;/p&gt;
&lt;p&gt;格式如下所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;English&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;是否翻译&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cross-Origin Resource Sharing&lt;/td&gt;
&lt;td&gt;跨源资源共享&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP header&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Observable&lt;/td&gt;
&lt;td&gt;观察者&lt;/td&gt;
&lt;td&gt;可以不翻译，中文翻译比较模糊&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cookies&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不翻译，保持复数&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module&lt;/td&gt;
&lt;td&gt;模块&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;origin&lt;/td&gt;
&lt;td&gt;源&lt;/td&gt;
&lt;td&gt;有争议&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;会话&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以不断向其中追加新的术语。&lt;/p&gt;
&lt;p&gt;翻译的过程中需要用到翻译工具，我使用的是 &lt;a href=&#34;https://github.com/soimort/translate-shell&#34; title=&#34;translation-shell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;translation-shell&lt;/a&gt;
，一款基于命令行的翻译工具，可以使用 Google、bing 或者 Yandex 翻译，十分方便快捷。也推荐大家使用 &lt;a href=&#34;https://www.deepl.com/&#34; title=&#34;DeepL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepL&lt;/a&gt;
，翻译效果更好。&lt;/p&gt;
&lt;p&gt;注：使用翻译工具是为了将书籍快速汉化，减少大量的人工输入，但是因为机器翻译比较生硬，而且其中难免有错误，需要译者投入大量心思去优化。&lt;/p&gt;
&lt;h4 id=&#34;translation-shell&#34;&gt;Translation-shell&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;trans :zh -b -shell&lt;/code&gt; 进入 translation-shell 交互式界面，拷贝英文段落进去翻译成中文。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-trans-terminal.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-trans-terminal.jpg&#34; data-width=&#34;1029&#34; data-height=&#34;393&#34; alt=&#34;image&#34; data-caption=&#34;Translation-shell&#34;&gt;
    
  
  &lt;figcaption&gt;Translation-shell&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;注：推荐使用翻译质量更高的工具 &lt;a href=&#34;https://deepl.com/&#34; title=&#34;DeepL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepL&lt;/a&gt;
（更新于 2022 年 02 月 22 日）。&lt;/p&gt;
&lt;h4 id=&#34;使用-typora-编辑中文翻译&#34;&gt;使用 Typora 编辑中文翻译&lt;/h4&gt;
&lt;p&gt;同时打开 &lt;code&gt;en&lt;/code&gt; 和 &lt;code&gt;cn&lt;/code&gt; 目录下的同一章节开始翻译。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-typora-multi-language.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-typora-multi-language.jpg&#34; data-width=&#34;1878&#34; data-height=&#34;1057&#34; alt=&#34;image&#34; data-caption=&#34;中英文翻译界面&#34;&gt;
    
  
  &lt;figcaption&gt;中英文翻译界面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;在-gitbook-中查看&#34;&gt;在 Gitbook 中查看&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;gitbook serve&lt;/code&gt; 启用 gitbook 服务，在 http://localhost:4000 页面上查看内容。&lt;/p&gt;
&lt;p&gt;首先会出来语言选择页面，我们可以分别选择中文和英文内容浏览，语言是在 &lt;code&gt;LAGNS.md&lt;/code&gt; 文件中定义的。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-gitbook-cn-en.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-gitbook-cn-en.jpg&#34; data-width=&#34;1878&#34; data-height=&#34;1055&#34; alt=&#34;image&#34; data-caption=&#34;Gitbook&#34;&gt;
    
  
  &lt;figcaption&gt;Gitbook&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;导出为不同格式&#34;&gt;导出为不同格式&lt;/h4&gt;
&lt;p&gt;使用 typora 编辑完中文翻译后，可以导出为 pdf、word 等其它格式，我们导出为 word 格式后发送给编辑批阅。&lt;/p&gt;
&lt;p&gt;生成的 word 内容格式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-word-cn.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-word-cn.jpg&#34; data-width=&#34;879&#34; data-height=&#34;1028&#34; alt=&#34;image&#34; data-caption=&#34;word 文档格式&#34;&gt;
    
  
  &lt;figcaption&gt;word 文档格式&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们可以看到生产的 word 文档仍然保留了代码的高亮，而且可读性也很好。&lt;/p&gt;
&lt;h3 id=&#34;5-审校&#34;&gt;5. 审校&lt;/h3&gt;
&lt;p&gt;每当翻译完一章内容后就发送给编辑，编辑会使用 word 进行审校批注，根据编辑的批注修改后再发回给编辑。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-word-review.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-word-review.jpg&#34; data-width=&#34;978&#34; data-height=&#34;995&#34; alt=&#34;image&#34; data-caption=&#34;word review 界面&#34;&gt;
    
  
  &lt;figcaption&gt;word review 界面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;6-二审&#34;&gt;6. 二审&lt;/h3&gt;
&lt;p&gt;当所有的章节分别翻译和审校完成后，需要在通读一遍全书，更正前后不一致和翻译中的谬误，然后交给编辑等待排版。这时候还要准备写译者序，还要找人写推荐序。翻译版的图书封面会沿用原书的封面。&lt;/p&gt;
&lt;h3 id=&#34;7-印刷&#34;&gt;7. 印刷&lt;/h3&gt;
&lt;p&gt;当正文、译者序、推荐序都完成后就可以交给出版社印刷了，一般初次会印刷几千本。&lt;/p&gt;
&lt;h3 id=&#34;8-后续事宜&#34;&gt;8. 后续事宜&lt;/h3&gt;
&lt;p&gt;书籍印刷后后续事宜主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社支付稿费：翻译图书稿费 = 图书销量 x 定价 x4%，著作一般为 8%&lt;/li&gt;
&lt;li&gt;配合图书宣传：一些 meetup、大会、线上交流时推荐图书&lt;/li&gt;
&lt;li&gt;读者交流：可以开设社区、微信群、网站等交流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;贴士&#34;&gt;贴士&lt;/h2&gt;
&lt;p&gt;图书翻译耗时费力，倾注了原作者和译者的很多心力，打击盗版，维护正版！&lt;/p&gt;
&lt;h2 id=&#34;有用的链接&#34;&gt;有用的链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.termonline.cn/index.htm&#34; title=&#34;术语在线&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;术语在线&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1289408/&#34; title=&#34;非文学翻译理论与实践 - 王长栓&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;非文学翻译理论与实践 - 王长栓&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>记一本关于 kubernetes management design patterns 的书</title>
      <link>https://jimmysong.io/blog/book-kubernetes-management-design-patterns/</link>
      <pubDate>Thu, 20 Jul 2017 18:21:18 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/book-kubernetes-management-design-patterns/</guid>
      <description>
        
        
        &lt;p&gt;下面是这本书的基本信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书名：Kubernetes Management Design Patterns: With Docker, CoreOS Linux, and Other Platforms&lt;/li&gt;
&lt;li&gt;Amazon 购买链接：&lt;a href=&#34;https://www.amazon.com/Kubernetes-Management-Design-Patterns-Platforms-ebook/dp/B01MZDO0BD/ref=pd_sbs_351_4?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=79F47CR67EEESD35S2VF&#34; title=&#34;链接&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;链接&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;作者：Deepak Vohra&lt;/li&gt;
&lt;li&gt;发行日期：2017 年 1 月 20 日&lt;/li&gt;
&lt;li&gt;出版社：Apress&lt;/li&gt;
&lt;li&gt;页数：399&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;Kubernetes 引领容器集群管理进入一个全新的阶段；学习如何在 CoreOS 上配置和管理 kubernetes 集群；使用适当的管理模式，如 ConfigMaps、Autoscaling、弹性资源使用和高可用性配置。讨论了 kubernetes 的一些其他特性，如日志、调度、滚动升级、volume、服务类型和跨多个云供应商 zone。&lt;/p&gt;
&lt;p&gt;Kubernetes 中的最小模块化单位是 Pod，它是拥有共同的文件系统和网络的系列容器的集合。Pod 的抽象层可以对容器使用设计模式，就像面向对象设计模式一样。容器能够提供与软件对象（如模块化或包装，抽象和重用）相同的优势。&lt;/p&gt;
&lt;p&gt;在大多数章节中使用的都是 CoreOS Linux，其他讨论的平台有 CentOS，OpenShift，Debian 8（jessie），AWS 和 Debian 7 for Google Container Engine。&lt;/p&gt;
&lt;p&gt;使用 CoreOS 主要是因为 Docker 已经在 CoreOS 上开箱即用。CoreOS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持大多数云提供商（包括 Amazon AWS EC2 和 Google Cloud Platform）和虚拟化平台（如 VMWare 和 VirtualBox）&lt;/li&gt;
&lt;li&gt;提供 Cloud-Config，用于声明式配置 OS，如网络配置（flannel），存储（etcd）和用户帐户&lt;/li&gt;
&lt;li&gt;为容器化应用提供生产级基础架构，包括自动化，安全性和可扩展性&lt;/li&gt;
&lt;li&gt;引领容器行业标准，并建立了应用程序标准&lt;/li&gt;
&lt;li&gt;提供最先进的容器仓库，Quay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 于 2013 年 3 月开源，现已称为最流行的容器平台。kubernetes 于 2014 年 6 月开源，现在已经成为最流行的容器集群管理平台。第一个稳定版 CoreOS Linux 于 2014 年 7 月发行，现已成为最流行的容器操作系统之一。&lt;/p&gt;
&lt;h3 id=&#34;你将学到什么&#34;&gt;你将学到什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 docker 和 kubernetes&lt;/li&gt;
&lt;li&gt;在 AWS 和 CoreOS 上创建 kubernetes 集群&lt;/li&gt;
&lt;li&gt;应用集群管理设计模式&lt;/li&gt;
&lt;li&gt;使用多个云供应商 zone&lt;/li&gt;
&lt;li&gt;使用 Ansible 管理 kubernetes&lt;/li&gt;
&lt;li&gt;基于 kubernetes 的 PAAS 平台 OpenShift&lt;/li&gt;
&lt;li&gt;创建高可用网站&lt;/li&gt;
&lt;li&gt;构建高可用用的 kubernetes master 集群&lt;/li&gt;
&lt;li&gt;使用 volume、configmap、serivce、autoscaling 和 rolling update&lt;/li&gt;
&lt;li&gt;管理计算资源&lt;/li&gt;
&lt;li&gt;配置日志和调度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;谁适合读这本书&#34;&gt;谁适合读这本书&lt;/h3&gt;
&lt;p&gt;Linux 管理员、CoreOS 管理员、应用程序开发者、容器即服务（CAAS）开发者。阅读这本书需要 Linux 和 Docker 的前置知识。介绍 Kubernetes 的知识，例如创建集群，创建 Pod，创建 service 以及创建和缩放 replication controller。还需要一些关于使用 Amazon Web Services（AWS）EC2，CloudFormation 和 VPC 的必备知识。&lt;/p&gt;
&lt;h3 id=&#34;关于作者&#34;&gt;关于作者&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Deepak Vohra&lt;/strong&gt; is an Oracle Certified Associate and a Sun Certified Java Programmer. Deepak has published in Oracle Magazine, OTN, IBM developerWorks, ONJava, DevSource,  WebLogic Developer’s Journal, XML Journal, Java Developer’s Journal, FTPOnline, and devx.&lt;/p&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一部分：平台
&lt;ul&gt;
&lt;li&gt;第 1 章：Kuberentes on AWS&lt;/li&gt;
&lt;li&gt;第 2 章：kubernetes on CoreOS on AWS&lt;/li&gt;
&lt;li&gt;第 3 章：kubernetes on Google Cloud Platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二部分：管理和配置
&lt;ul&gt;
&lt;li&gt;第 4 章：使用多个可用区&lt;/li&gt;
&lt;li&gt;第 5 章：使用 Tectonic Console&lt;/li&gt;
&lt;li&gt;第 6 章：使用 volume&lt;/li&gt;
&lt;li&gt;第 7 章：使用 service&lt;/li&gt;
&lt;li&gt;第 8 章：使用 Rolling updte&lt;/li&gt;
&lt;li&gt;第 9 章：在 node 上调度 pod&lt;/li&gt;
&lt;li&gt;第 10 章：配置计算资源&lt;/li&gt;
&lt;li&gt;第 11 章：使用 ConfigMap&lt;/li&gt;
&lt;li&gt;第 12 章：使用资源配额&lt;/li&gt;
&lt;li&gt;第 13 章：使用 Autoscaling&lt;/li&gt;
&lt;li&gt;第 14 章：配置 logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三部分：高可用
&lt;ul&gt;
&lt;li&gt;第 15 章：在 OpenShift 中使用 HA master&lt;/li&gt;
&lt;li&gt;第 16 章：开发高可用网站&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;个人评价&#34;&gt;个人评价&lt;/h3&gt;
&lt;p&gt;本书更像是一本参考手册，对于想在公有云中（如 AWS、Google Cloud Platform）中尝试 Kubernetes 的人会有所帮助，而对于想使用 kubernetes 进行自己的私有云建设，或想了解 kubernetes 的实现原理和技术细节的人来说，就不适合了。对我来说，本书中有个别几个章节可以参考，如高可用，但还是使用 OpenShift 实现的。总之，如果你使用 AWS 这样的公有云，对操作系统没有特别要求，可以接受 CoreOS 的话，那么可以看看这本书。本来本书会对 kubernetes 中的各种应用模式能够有个详解，但是从书中我并没有找到。&lt;/p&gt;
&lt;p&gt;本书有两个优点，一个是每个章节都给出了问题的起因和 kubernetes 的解决方案，二是几乎所有的命令和操作都附有截图，说明很详细。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>微服务设计读书笔记</title>
      <link>https://jimmysong.io/blog/microservice-reading-notes/</link>
      <pubDate>Sat, 11 Mar 2017 15:45:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/microservice-reading-notes/</guid>
      <description>
        
        
        &lt;p&gt;最近在看 &lt;strong&gt;《微服务设计（Sam Newman 著）》&lt;/strong&gt; 这本书。作者是 &lt;strong&gt;ThoughtWorks&lt;/strong&gt; 的 Sam Newman。这本书中包括很多业界是用案例，比如 &lt;strong&gt;Netflix&lt;/strong&gt; 和 &lt;strong&gt;亚马逊&lt;/strong&gt;。有兴趣的话大家一起看看讨论一下。😄&lt;/p&gt;
&lt;p&gt;P.S 这本书比较偏理论，另外还有一本中国人写的书，&lt;strong&gt;《微服务架构与实践，王磊著，电子工业出版社》&lt;/strong&gt; 。这个人同样也是 &lt;strong&gt;ThoughtWorks&lt;/strong&gt; 的，两个人的观点不谋而合，依然是便理论的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cloud Native Go - 基于 Go 和 React 的 web 云服务构建指南&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这本书是我最近在翻译的，将由 &lt;strong&gt;电子工业出版社&lt;/strong&gt; 出版，本书根据实际案例教你如何构建一个 web 微服务，是实践为服务架构的很好的参考。&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34; title=&#34;查看本书介绍&#34;&gt;查看本书介绍&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;1微服务初探&#34;&gt;1.微服务初探&lt;/h2&gt;
&lt;h3 id=&#34;什么是微服务&#34;&gt;什么是微服务？&lt;/h3&gt;
&lt;p&gt;微服务（Microservices）这个词比较新颖，但是其实这种架构设计理念早就有了。微服务是一种分布式架构设计理念，为了推动细粒度服务的使用，这些服务要能协同工作，每个服务都有自己的生命周期。一个微服务就是一个独立的实体，可以独立的部署在 PAAS 平台上，也可以作为一个独立的进程在主机中运行。服务之间通过 API 访问，修改一个服务不会影响其它服务。&lt;/p&gt;
&lt;h3 id=&#34;微服务的好处&#34;&gt;微服务的好处&lt;/h3&gt;
&lt;p&gt;微服务的好处有很多，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助你更快的采用新技术&lt;/li&gt;
&lt;li&gt;解决技术异构的问题，因为是用 API 网络通信，可以使用不同的语言和技术开发不同的服务&lt;/li&gt;
&lt;li&gt;增强系统弹性，服务的边界比较清晰，便于故障处理&lt;/li&gt;
&lt;li&gt;方便扩展，比如使用容器技术，可以很方便的一次性启动很多个微服务&lt;/li&gt;
&lt;li&gt;方便部署，因为微服务之间彼此独立，所以能够独立的部署单个服务而不影响其它服务，如果部署失败的话还可以回滚&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别忘了康威定律，微服务可以很好契合解决组织架构问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可重用，可随意组合&lt;/li&gt;
&lt;li&gt;便于维护，可以随时重写服务，不必担心历史遗留问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与面向服务架构-soa-的关系&#34;&gt;与面向服务架构 SOA 的关系&lt;/h3&gt;
&lt;p&gt;可以说微服务架构师 SOA 的一种，但是目前的大多数 SOA 做的都不好，在&lt;code&gt;通信协议的选择&lt;/code&gt;、&lt;code&gt;第三方中间件的选择&lt;/code&gt;、&lt;code&gt;服务力度如何划分&lt;/code&gt;方面做的都不够好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务与 SOA 的共同点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都使用共享库，比如可重用的代码库&lt;/li&gt;
&lt;li&gt;模块化，比如 Java 中的 OSGI(Open Source Gateway Initiative)、Erlang 中的模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2架构师的职责&#34;&gt;2.架构师的职责&lt;/h2&gt;
&lt;h3 id=&#34;架构师应该关心是什么&#34;&gt;架构师应该关心是什么&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;架构师（Architect）&lt;strong&gt;在英文中和&lt;/strong&gt;建筑师&lt;/strong&gt;是同一个词，他们之间也有很多相同之处，架构师构建的是软件，而建筑师构建的是建筑。&lt;/p&gt;
&lt;p&gt;终于看到了我翻译的&lt;em&gt;Cloud Native Go&lt;/em&gt;第 14 章中引用的这本书的原话了。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/microservice-reading-notes/building-microservices-reference.jpg&#34; data-img=&#34;/blog/microservice-reading-notes/building-microservices-reference.jpg&#34; data-width=&#34;1916&#34; data-height=&#34;674&#34; alt=&#34;image&#34; data-caption=&#34;原话&#34;&gt;
    
  
  &lt;figcaption&gt;原话&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;软件的需求变更是&lt;strong&gt;来的那么快来的那么直接&lt;/strong&gt;，不像建筑那样可以在设计好后按照设计图纸一步步的去建设。&lt;/p&gt;
&lt;p&gt;架构师应该关心的是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证系统适合开发人员在上面工作&lt;/li&gt;
&lt;li&gt;关注服务之间的交互，不需要过于关注各个服务内部发生的事情，比如服务之间互相调用的接口，是使用&lt;code&gt;protocol buffer&lt;/code&gt;呢，还是使用&lt;code&gt;RESTful API&lt;/code&gt;，还是使用&lt;code&gt;Java RMI&lt;/code&gt;，这个才是架构师需要关注的问题，至于服务内部究竟使用什么，那就看开发人员自己了，&lt;strong&gt;架构师更需要关注系统的边界和分区&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;架构师应该与团队在一起，&lt;strong&gt;结对编程&lt;/strong&gt; 🤓🤓 了解普通工作，知道普通的工作是什么样子，做一个&lt;em&gt;代码架构师&lt;/em&gt; 😂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构师应该做什么&#34;&gt;架构师应该做什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供原则指导实践，比如 Heroku 的&lt;a href=&#34;https://jimmysong.io/posts/12-factor-app/&#34; title=&#34;12 因素法则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12 因素法则&lt;/a&gt;
用来指导 SAAS 应用架构一样，微服务架构设计也要有一套原则。&lt;/li&gt;
&lt;li&gt;提供要求标准，通过日志功能和监控对服务进行集中式管理，明确接口标准，提供安全性建议。&lt;/li&gt;
&lt;li&gt;代码治理。为开发人员提供范例和服务代码模板。&lt;/li&gt;
&lt;li&gt;解决技术债务。&lt;/li&gt;
&lt;li&gt;集中治理和领导。维持良好的团队关系，当团队跑偏的时候及时纠正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3服务建模&#34;&gt;3.服务建模&lt;/h2&gt;
&lt;p&gt;以&lt;strong&gt;MusicCorp&lt;/strong&gt;这家公司的服务为例子讲解。&lt;/p&gt;
&lt;p&gt;服务建模的两个指导原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高内聚：关键是找出问题的边界，把相关的问题放在同一个服务中。&lt;/li&gt;
&lt;li&gt;松耦合：修改一个服务不需要修改另一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;strong&gt;限定上下文&lt;/strong&gt;（一个由显示边界限定的特定指责）的方法将服务拆分，比如 MusicCorp 的服务可以拆分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;财务部门&lt;/li&gt;
&lt;li&gt;仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们都不需要知道各自的具体实现，只要给它们提供特定的输入就会有你想要的产出。&lt;/p&gt;
&lt;p&gt;过早的将一个系统划分成微服务的代价非常高，尤其是在面对新领域时，将一个已有的代码库划分成微服务会比葱头开始建设微服务要简单的多。&lt;/p&gt;
&lt;h2 id=&#34;4集成&#34;&gt;4.集成&lt;/h2&gt;
&lt;p&gt;使用共享数据库，为用户创建好接口，可以使用 RPC（protocol buffer、thrift）或者 REST。服务端和客户端消息格式可以用 Json 或 XML。当然每种技术都有各自的适用场景，结合自己的业务选择。&lt;/p&gt;
&lt;p&gt;微服务的协作方式是什么样的呢？基于事件的异步通信，使用消息中间件来实现事件发布和消费者接收机制。比如用 Kafka 或 RabbitMQ。&lt;/p&gt;
&lt;h2 id=&#34;5分解单块系统&#34;&gt;5.分解单块系统&lt;/h2&gt;
&lt;p&gt;分解巨大无比没人感动的单块系统，首先要做的是理清代码库，找到&lt;strong&gt;接缝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;分解系统带来的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加快以后系统开发速度&lt;/li&gt;
&lt;li&gt;划清了团队结构（又是康威定律）&lt;/li&gt;
&lt;li&gt;增加安全审计功能后，保障安全性&lt;/li&gt;
&lt;li&gt;利于开展新技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-部署&#34;&gt;6. 部署&lt;/h2&gt;
&lt;p&gt;这一块跟传统服务的部署并没有太大的不同，无非是微服务的短平快，加快了 CI（持续集成）的速度。如果将微服务打包为 docker 镜像，使用 Jenkins、ansible、puppet 等技术来部署微服务可以实现部署自动和效率的显著提高。&lt;/p&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;
&lt;p&gt;该书的后面还讲了&lt;strong&gt;测试&lt;/strong&gt;、&lt;strong&gt;监控&lt;/strong&gt;、&lt;strong&gt;安全&lt;/strong&gt;、&lt;strong&gt;康威定律&lt;/strong&gt;、最后还上升到&lt;strong&gt;人本&lt;/strong&gt;，给予广大的软件开发人员强烈的人文关怀，可见提倡架构师要融入团队，最一个&lt;strong&gt;代码架构师&lt;/strong&gt;和&lt;strong&gt;结对编程&lt;/strong&gt;的作者是多么博爱❤️。&lt;/p&gt;
&lt;p&gt;该书的核心部分是&lt;strong&gt;第 11 章规模化微服务&lt;/strong&gt;，为将在下篇中来探讨一下。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

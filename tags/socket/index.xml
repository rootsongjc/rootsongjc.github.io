
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Socket</title>
    <link>https://jimmysong.io/tags/socket/</link>
    <description>Recent content in Socket on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Thu, 07 Nov 2024 16:48:08 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>跨网络命名空间管理套接字：探索 Linux 套接字的使用</title>
      <link>https://jimmysong.io/blog/cross-network-namespace-socket/</link>
      <pubDate>Thu, 07 Nov 2024 16:48:08 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/cross-network-namespace-socket/</guid>
      <description>
        
        
        &lt;p&gt;最近我在研究 Istio Ambient 模式中的透明流量劫持，过程中涉及了跨网络命名空间管理套接字的功能。在 Istio 官方的博客 &lt;a href=&#34;https://istio.io/latest/blog/2024/inpod-traffic-redirection-ambient/&#34; title=&#34;Maturing Istio Ambient: Compatibility Across Various Kubernetes Providers and CNIs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maturing Istio Ambient: Compatibility Across Various Kubernetes Providers and CNIs&lt;/a&gt; 中也提到了这一点，让我对 Linux 套接字 API 的这个功能产生了浓厚的兴趣。所以，我决定写下这篇博客，分享如何在 Linux 系统中跨网络命名空间管理套接字的细节。&lt;/p&gt;
&lt;h2 id=&#34;网络命名空间简介&#34;&gt;网络命名空间简介&lt;/h2&gt;
&lt;p&gt;网络命名空间是一种 Linux 内核特性，可以把系统的网络资源（例如 IP 地址、路由表等）分割成多个独立的实例。这样每个实例就可以为不同的进程提供独立的网络环境。比如，Docker 使用网络命名空间为每个容器提供独立的网络栈，让它们之间的网络资源互相隔离。&lt;/p&gt;
&lt;p&gt;通过网络命名空间，不同的进程可以有独立的网络配置，比如不同的 IP 地址和路由设置。但即使网络命名空间实现了隔离，Linux 的套接字 API 仍然可以让进程跨网络命名空间操作套接字。&lt;/p&gt;
&lt;h2 id=&#34;跨网络命名空间管理套接字&#34;&gt;跨网络命名空间管理套接字&lt;/h2&gt;
&lt;p&gt;在一个命名空间中运行的进程可以创建一个套接字，并将它放到另一个网络命名空间中，这让我们可以实现非常灵活的网络通信。比如，可以在一个特定的网络命名空间中创建监听套接字，让其他命名空间中的进程共享这个套接字。这种功能在容器编排和微服务架构中非常有用。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子，使用 &lt;code&gt;nc&lt;/code&gt; 命令创建套接字，使其绑定到指定的网络设备或命名空间。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cross-network-namespace-socket/f04c2c199e66b82ef451c2e3c2be99e1.svg&#34; data-img=&#34;/blog/cross-network-namespace-socket/f04c2c199e66b82ef451c2e3c2be99e1.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;使用-docker-演示这一功能&#34;&gt;使用 Docker 演示这一功能&lt;/h2&gt;
&lt;p&gt;因为我使用的 macOS 不支持 Linux 的网络命名空间，但可以使用 Docker Desktop 模拟相应的环境。下面是在 macOS 上使用 Docker 来演示的方法：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cross-network-namespace-socket/73a1a7081b41c63c1e7f98a87e4f8580.svg&#34; data-img=&#34;/blog/cross-network-namespace-socket/73a1a7081b41c63c1e7f98a87e4f8580.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Docker Desktop&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载并安装 Docker Desktop，可以在 macOS 上运行 Linux 容器。&lt;/li&gt;
&lt;li&gt;启动 Docker Desktop 后，我们可以在容器中模拟网络命名空间的相关操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置虚拟网络&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建虚拟网络接口
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker network create --driver bridge my_bridge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;为每个容器分配 IP 地址，以便它们可以相互通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建网络命名空间（使用 Docker 容器模拟）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 Docker 创建两个容器，分别模拟两个网络命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name ns1 --network my_bridge --privileged alpine sleep infinity
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name ns2 --network my_bridge --privileged alpine sleep infinity
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建容器时直接将它们连接到这个虚拟网络，以便它们可以相互通信。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨命名空间创建套接字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;docker exec&lt;/code&gt; 命令进入容器并配置网络接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;ns1&lt;/code&gt; 容器中运行一个监听套接字：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; ns1 sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;nc -l -k -p 8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 &lt;code&gt;ns1&lt;/code&gt; 容器的 IP 地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NS1_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker inspect -f &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;&lt;/span&gt; ns1&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;ns2&lt;/code&gt; 容器中，使用 &lt;code&gt;nc&lt;/code&gt; 命令访问 &lt;code&gt;ns1&lt;/code&gt; 容器中的套接字：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; ns2 sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;echo &amp;#39;Hello from ns2&amp;#39; | nc &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NS1_IP&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，我们可以在 &lt;code&gt;ns1&lt;/code&gt; 容器的界面中看到来自 &lt;code&gt;ns2&lt;/code&gt; 容器的 &lt;code&gt;Hello from ns2&lt;/code&gt; 字符串。尽管 &lt;code&gt;ns1&lt;/code&gt; 和 &lt;code&gt;ns2&lt;/code&gt; 属于不同的容器，但通过正确的配置，&lt;code&gt;ns2&lt;/code&gt; 仍然可以访问 &lt;code&gt;ns1&lt;/code&gt; 中的套接字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以理解为通过在 &lt;code&gt;ns2&lt;/code&gt; 监听 &lt;code&gt;ns1&lt;/code&gt; 的套接字，类似于建立了一个“隧道”来实现通信。这种方式实际上是建立了一条直接的通信通道，使得两个容器之间能够进行数据交换。虽然它没有真正构建 VPN 那样复杂的隧道，但从逻辑上来说，&lt;code&gt;ns2&lt;/code&gt; 和 &lt;code&gt;ns1&lt;/code&gt; 之间可以通过这个套接字来传递数据，相当于建立了一个轻量级的点对点连接通道。&lt;/p&gt;
&lt;h2 id=&#34;实际应用场景&#34;&gt;实际应用场景&lt;/h2&gt;
&lt;p&gt;这种“隧道”式的通信在许多实际场景中非常有用，以下是一些例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;透明代理和负载均衡&lt;/strong&gt;：通过套接字隧道可以将客户端请求转发到服务容器中，常用于透明代理或负载均衡。Istio、&lt;strong&gt;Envoy Proxy&lt;/strong&gt; 和 &lt;strong&gt;HAProxy&lt;/strong&gt; 等工具利用类似机制来管理服务间流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨容器日志收集&lt;/strong&gt;：通过套接字隧道，可以将多个容器的日志集中收集到一个处理容器中。&lt;strong&gt;Fluentd&lt;/strong&gt; 和 &lt;strong&gt;Logstash&lt;/strong&gt; 是常用的日志收集工具，用于简化日志处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全审查和入侵检测&lt;/strong&gt;：将多个命名空间的流量集中到一个监控容器中进行统一检测。&lt;strong&gt;Suricata&lt;/strong&gt;、&lt;strong&gt;Snort&lt;/strong&gt; 和 &lt;strong&gt;Zeek&lt;/strong&gt; 等开源工具可用于网络安全分析和审查。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试和测试&lt;/strong&gt;：开发人员可以将测试流量转发到其他命名空间的服务，用于验证和调试。&lt;strong&gt;Wireshark&lt;/strong&gt; 可以用于捕获网络包，以便进行深入的网络调试和分析。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;跨网络命名空间管理套接字在容器管理、调度系统和微服务架构中有很多应用。例如，可以用这种方式实现服务的透明负载均衡，建立隧道或进行网络流量调试。但这种灵活性也要求我们在设计网络安全策略时更加谨慎，以防止不同命名空间之间的潜在通信带来的安全问题。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

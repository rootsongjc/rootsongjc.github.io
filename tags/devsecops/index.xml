
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – DevSecOps</title>
    <link>https://jimmysong.io/tags/devsecops/</link>
    <description>Recent content in DevSecOps on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    <lastBuildDate>Wed, 18 May 2022 00:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/devsecops/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>声明</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/preface/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/preface/</guid>
      <description>
        
        
        &lt;p&gt;以下是关于本书的声明。&lt;/p&gt;
&lt;h2 id=&#34;许可&#34;&gt;许可&lt;/h2&gt;
&lt;p&gt;本出版物由 NIST 根据 2014 年《联邦信息安全现代化法案》（FISMA）（44 U.S.C. §3551 etseq）规定的法定职责编写，公共法律（P.L.）113-283。NIST 负责制定信息安全标准和准则，包括联邦信息系统的最低要求，但这些标准和准则在未经对国家安全系统行使策略权力的适当联邦官员明确批准的情况下，不得适用于这些系统。本准则与管理和预算办公室（OMB）A-130 号通知的要求一致。&lt;/p&gt;
&lt;p&gt;本出版物中的任何内容都不应被视为与商务部长根据法定授权对联邦机构的强制性和约束性标准和准则相抵触。这些准则也不应被解释为改变或取代商务部长、OMB 主任或任何其他联邦官员的现有权力。本出版物可由非政府组织在自愿的基础上使用，在美国不受版权限制。但是，请注明出处，NIST 将对此表示感谢。&lt;/p&gt;
&lt;p&gt;国家标准和技术研究所特别出版物 800-204C Natl.Inst.
Stand.Technol.Spec.800-204C, 45 pages (March 2022) CODEN: NSPUE2&lt;/p&gt;
&lt;p&gt;本出版物可从以下网站免费获取。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-204C&#34; title=&#34;https://doi.org/10.6028/NIST.SP.800-204C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.6028/NIST.SP.800-204C&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;关于计算机系统技术的报告&#34;&gt;关于计算机系统技术的报告&lt;/h2&gt;
&lt;p&gt;美国国家标准与技术研究所（NIST）的信息技术实验室（ITL）通过为国家的测量和标准基础设施提供技术领导来促进美国经济和公共福利。ITL 开发测试、测试方法、参考数据、概念实施证明和技术分析，以推动信息技术的发展和生产性使用。ITL 的职责包括为联邦信息系统中与国家安全无关的信息制定管理、行政、技术和物理标准和准则，以实现低成本的安全和隐私。&lt;/p&gt;
&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;
&lt;p&gt;云原生应用已经发展成为一个标准化的架构，由多个松散耦合的组件组成，这些组件被称为微服务（通常通常以容器实现），由提供应用服务的基础设施（如服务网格）支持。这两个组件通常都被托管在一个容器调度和资源管理平台上。在这个架构中，应用环境中涉及的整套源代码可以分为五种类型：1）应用代码（体现应用逻辑）；2）应用服务代码（用于会话建立、网络连接等服务）；3）基础设施即代码（用于配置计算、网络和存储资源）；4）策略即代码（用于定义运行时策略，如以声明性代码表达的零信任）；5）可观测性即代码（用于持续监测应用运行时状态）。由于安全、商业竞争力和松散耦合的应用组件的固有结构，这类应用需要一个不同的开发、部署和运行时范式。DevSecOps（分别由开发、安全和运维的首字母缩写组成）已经被发现是这些应用的促进范式，其基本要素包括持续集成、持续交付和持续部署（CI/CD）管道。这些管道是将开发者的源代码通过各个阶段的工作流程，如构建、测试、打包、部署和运维，由带有反馈机制的自动化工具支持。本文的目的是为云原生应用的 DevSecOps 原语的实施提供指导，其架构和代码类型如上所述。本文还讨论了这种方法对高安全保障和实现持续运维授权（C-ATO）的好处。&lt;/p&gt;
&lt;h2 id=&#34;鸣谢&#34;&gt;鸣谢&lt;/h2&gt;
&lt;p&gt;作者首先要感谢 NIST 的 David Ferraiolo，他发起了这项工作，为基于微服务的应用中服务网格的开发、部署和监控提供了有针对性的 DevSecOps 原语实施指导。衷心感谢美国空军 CSO Nicolas Chaillan 先生，感谢他详细而有见地的审查和反馈。还要感谢 Tetrate 公司的 Zack Butcher 为本文标题提供的建议。作者还对 NIST 的 Isabel Van
Wyk 的详细编辑审查表示感谢。&lt;/p&gt;
&lt;h2 id=&#34;专利披露通知&#34;&gt;专利披露通知&lt;/h2&gt;
&lt;p&gt;通知：信息技术实验室（ITL）已要求专利权持有人向 ITL 披露其使用可能需要遵守本出版物的指导或要求的专利权。然而，专利持有人没有义务回应 ITL 的专利要求，ITL 也没有进行专利搜索，以确定哪些专利可能适用于本出版物。&lt;/p&gt;
&lt;p&gt;截至本出版物发布之日，以及在呼吁确定可能需要使用其来遵守本出版物的指导或要求的专利权利要求之后，ITL 没有发现任何此类专利权利要求。&lt;/p&gt;
&lt;p&gt;ITL 没有作出或暗示在使用本出版物时不需要许可证以避免专利侵权。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>执行摘要</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/executive-summary/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/executive-summary/</guid>
      <description>
        
        
        &lt;p&gt;云原生应用已经发展成为一个标准化的架构，由以下部分组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个松散耦合的组件被称为微服务（通常或典型地以容器形式实现）。&lt;/li&gt;
&lt;li&gt;一个应用服务基础设施，为用户、服务和设备提供安全通信、认证和授权等服务（例如，服务网格）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于安全、商业竞争力和其固有的结构（松散耦合的应用组件），这类应用需要一个不同的应用、部署和运行时监控范式 —— 统称为软件生命周期范式。DevSecOps（分别由开发、安全和运维的首字母缩写组成）是这些应用的开发、部署和运维的促进范式之一，其基本要素包括持续集成、持续交付和持续部署（CI/CD）管道。&lt;/p&gt;
&lt;p&gt;CI/CD 管道是将开发人员的源代码通过各个阶段的工作流程，如构建、功能测试、安全扫描漏洞、打包和部署，由带有反馈机制的自动化工具支持。在本文中，应用环境中涉及的整个源代码集被分为五种代码类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用代码，它体现了执行一个或多个业务功能的应用逻辑。&lt;/li&gt;
&lt;li&gt;应用服务代码，用于服务，如会话建立、网络连接等。&lt;/li&gt;
&lt;li&gt;基础设施即代码，它是以声明性代码的形式存在的计算、网络和存储资源。&lt;/li&gt;
&lt;li&gt;策略即代码，这是运行时策略（例如，零信任），以声明性代码的形式表达。&lt;/li&gt;
&lt;li&gt;可观测性即代码，用于持续监测应用程序的健康状况，其中监测功能被表述为声明性代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，可以为所有五个代码类型创建单独的 CI/CD 管道。还描述了这些代码类型中的每一种所执行的功能，以强调它们在整个应用程序的执行中所发挥的作用。&lt;/p&gt;
&lt;p&gt;虽然云原生应用有一个共同的架构堆栈，但堆栈组件运行的平台可能有所不同。该平台是物理（裸机）或虚拟化（如 Kubernetes）上的一个抽象层。为了在本文中明确提及该平台或应用环境，它被称为 &lt;strong&gt;DevSecOps 原语参考平台&lt;/strong&gt;，或简称为 &lt;strong&gt;参考平台&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文件的目的是为参考平台的 DevSecOps 原语的实施提供指导。本文还介绍了这种实施对高安全保障的好处，以及在管道内使用风险管理工具和仪表盘指标提供持续授权操作（C-ATO）的工件。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>简介</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/intro/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/intro/</guid>
      <description>
        
        
        &lt;p&gt;云原生应用由多个松散耦合的组件（称为微服务，通常以容器形式实现）组成，在需要零信任概念的无边界网络环境中运行（企业内部或云），并由来自不同地点的用户访问（例如，校园、家庭办公室等）。云原生应用不只是指在云中运行的应用。它们还指具有设计和运行时架构的一类应用，如微服务，以及用于提供所有应用服务（包括安全）的专用基础设施。将 &lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207.pdf&#34; title=&#34;零信任原则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任原则&lt;/a&gt; 纳入这类应用提供了一些技术，其中对所有受保护资源的访问是通过基于身份的保护和基于网络的保护（如微分）来强制执行的。&lt;/p&gt;
&lt;p&gt;由于业务原因，云原生应用程序需要敏捷和安全的更新和部署技术，以及应对网络安全事件的必要弹性。因此，它们需要一种与传统的单层或多层应用不同的应用开发、部署和运行时监控范式（统称为软件生命周期范式）。DevSecOps（开发、安全和运维）是这类应用的促进范式，因为它通过（a）持续集成、持续交付 / 持续部署（CI/CD）管道（在第 3 节中解释）等基本要素促进了敏捷和安全的开发、交付、部署和运维；（b）整个生命周期的安全测试；以及（c）运行时的持续监控，所有这些都由自动化工具支持。事实上，满足上述目标的范式最初被赋予了 DevOps 这个术语，以表明它试图消除开发和运维之间的隔阂，并促进（或推动）加强合作。后来，DevSecOps 这个词是由社区的一部分人创造的，以强调安全团队在整个过程中的作用。因此，DevSecOps 这个术语表示一种文化和一套带有自动化工具的实践，以推动负责交付软件的关键利益相关者（包括开发、运维和安全组织）之间加强协作、信任、分担责任、透明度、自主性、敏捷性和自动化。DevSecOps 拥有必要的基本要素和其他构建模块，以满足云原生应用的设计目标。&lt;/p&gt;
&lt;p&gt;应该注意的是，整个社区对 DevSecOps 一词并无共识。如前所述，该术语主要是为了强调一个事实，即必须在软件开发生命周期的所有阶段（即构建、测试、打包、部署和运行）对安全进行测试和整合。社区中的一部分人继续使用 DevOps 这个术语，理由是没有必要定义一个新的术语，因为安全必须是任何软件生命周期过程的一个组成部分。&lt;/p&gt;
&lt;h2 id=&#34;11-范围&#34;&gt;1.1 范围&lt;/h2&gt;
&lt;p&gt;从理论上讲，DevSecOps 原语可以应用于许多应用架构，但最适合于基于微服务的架构，由于应用是由相对较小的、松散耦合的模块组成的，被称为微服务，因此允许采用敏捷开发模式。即使在基于微服务的架构中，DevSecOps 原语的实现也可以采取不同的形式，这取决于平台。在本文中，所选择的平台是一个容器编排和资源管理平台（如 Kubernetes）。该平台是物理（裸机）或虚拟化（如虚拟机、容器）基础设施上的一个抽象层。为了在本文中明确提及该平台或应用环境，它被称为 &lt;strong&gt;DevSecOps 原语参考平台&lt;/strong&gt;，或简称为 &lt;strong&gt;参考平台&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在描述参考平台的 DevSecOps 原语的实现之前，我们假设在部署服务网格组件方面采用了以下 &lt;a href=&#34;https://www.oreilly.com/library/view/cloud-native-infrastructure/9781491984291/&#34; title=&#34;尽职调查&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;尽职调查&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于部署和管理基于服务网格的基础设施（如网络路由）、策略执行和监控组件的安全设计模式&lt;/li&gt;
&lt;li&gt;测试证明这些服务网格组件在应用的各个方面（如入口、出口和内部服务）的各种情况下都能按预期工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为参考平台实施 DevSecOps 原语所提供的指导与 (a) DevSecOps 管道中使用的工具和 (b) 提供应用服务的服务网格软件无关，尽管来自 Istio 等服务网格产品的例子被用来将它们与现实世界的应用工件（如容器、策略执行模块等）联系起来。&lt;/p&gt;
&lt;p&gt;以下是对参考平台所呈现的整个应用环境中的代码类型（在执行摘要中提到）的稍微详细的描述。请注意，这些代码类型包括那些支持实施 DevSecOps 原语的代码。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用代码：体现了执行一个或多个业务功能的应用逻辑，由描述业务事务和数据库访问的代码组成。&lt;/li&gt;
&lt;li&gt;应用服务代码（如服务网格代码）：为应用提供各种服务，如服务发现、建立网络路由、网络弹性服务（如负载均衡、重试），以及安全服务（如根据策略强制执行认证、授权等，见第 4 章）。&lt;/li&gt;
&lt;li&gt;基础设施即代码：以声明性代码的形式表达运行应用程序所需的计算、网络和存储资源。&lt;/li&gt;
&lt;li&gt;策略即代码：包含声明性代码，用于生成实现安全目标的规则和配置参数，例如在运行期间通过安全控制（如认证、授权）实现零信任。&lt;/li&gt;
&lt;li&gt;可观测性即代码：触发与日志（记录所有事务）和追踪（执行应用程序请求所涉及的通信途径）以及监控（在运行期间跟踪应用程序状态）有关的软件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码类型 3、4 和 5 可能与代码类型 2 有重叠。&lt;/p&gt;
&lt;p&gt;本文件涵盖了与上述所有五种代码类型相关的管道或工作流程的实施。因此，整个应用环境（不仅仅是应用代码）受益于应用代码的所有最佳实践（例如，敏捷迭代开发、版本控制、治理等）。基础设施即代码、策略即代码和可观测性即代码属于一个特殊的类别，称为声明性代码。当使用“xx 即代码”的技术时，编写的代码（例如，用于配置资源的代码）被管理，类似于应用源代码。这意味着它是有版本的，有文件的，并且有类似于应用源代码库的访问控制定义。通常，使用特定领域的声明性语言：声明需求，并由相关工具将其转换为构成运行时实例的工件。例如，在基础设施即代码（IaC）的情况下，声明性语言将基础设施建模为一系列的资源。相关的配置管理工具将这些资源集中起来，并生成所谓的 &lt;strong&gt;清单&lt;/strong&gt;，定义与所定义的资源相关的平台（运行时实例）的最终状态。这些清单存储在与配置管理工具相关的服务器中，并由该工具用于为指定平台上的运行时实例创建编译的配置指令。清单通常以平台中立的表示方式（如 JSON）进行编码，并通过 REST API 反馈给平台资源配置代理。&lt;/p&gt;
&lt;h2 id=&#34;12-相关的-devsecops-倡议&#34;&gt;1.2 相关的 DevSecOps 倡议&lt;/h2&gt;
&lt;p&gt;在联邦政府的各个机构中，有几个 DevSecOps 倡议，其重点和焦点各不相同，这取决于软件和任务需求所带来的流程。尽管并不详尽，但以下是对 &lt;a href=&#34;https://federalnewsnetwork.com/wp-content/uploads/2021/12/120821_Expert-Edition_DevSecOps.pdf&#34; title=&#34;这些倡议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这些倡议&lt;/a&gt; 的简要概述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DevSecOps 管道参与构建、签入和签出一个名为 Iron Bank 的容器镜像仓库，这是一个经过国防部审查的强化容器镜像库。&lt;/li&gt;
&lt;li&gt;空军的 Platform One，也就是实现了连续操作授权（C-ATO）概念的 DevSecOps 平台，这又简化了国防部的授权程序，以适应现代连续软件部署的速度和频率。&lt;/li&gt;
&lt;li&gt;国家地理空间情报局（NGA）在 &amp;quot;NGA 软件之路&amp;quot; 中概述了其 DevSecOps 战略，其中为其每个软件产品规定了三个关键指标：可用性、准备时间和部署频率，以及用于实现 DevSecOps 管道的七个不同产品系列的规格，包括消息传递和工作流工具。&lt;/li&gt;
&lt;li&gt;医疗保险和医疗补助服务中心（CMS）正在采用一种 DevSecOps 方法，其中一个重点是为软件材料清单（SBOM）奠定基 —— 这是一种正式记录，包含用于构建软件的各种组件的细节和供应链关系。制作 SBOM 的目的是为了实现持续诊断和缓解（CDM）计划下的目标。&lt;/li&gt;
&lt;li&gt;在海军水面作战中心（NSWC），DevSecOps 原语的实施方法被用来教导和培训软件工作人员，让他们了解各种软件指标以及自动化作为实现这些指标的助推器的作用。&lt;/li&gt;
&lt;li&gt;陆军的 DevSecOps 倡议被称为 &amp;ldquo;陆军软件工厂&amp;rdquo;，重点是建立技能组合而不是建立软件。它利用 DevSecOps 能力（管道和平台即服务功能）作为技术加速器，在产品管理、用户体验、用户界面（UI/UX）设计、平台和软件工程方面提高效率和熟练度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-目标受众&#34;&gt;1.3 目标受众&lt;/h2&gt;
&lt;p&gt;由于 DevSecOps 的基本要素跨越了开发（安全的构建和测试、打包）、交付 / 部署和持续监控（以确保运行期间的安全状态），本文建议的目标受众包括软件开发、运维和安全团队。&lt;/p&gt;
&lt;h2 id=&#34;14-与其他-nist-指导文件的关系&#34;&gt;1.4 与其他 NIST 指导文件的关系&lt;/h2&gt;
&lt;p&gt;由于参考平台是由容器编排和资源管理平台以及服务网格软件组成的，以下出版物为确保该平台的安全提供了指导，并为本文件的内容提供了背景信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SP800-204，&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-204&#34; title=&#34;基于微服务的应用系统的安全策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于微服务的应用系统的安全策略&lt;/a&gt;，讨论了基于微服务的应用的特点和安全要求，以及满足这些要求的总体策略。&lt;/li&gt;
&lt;li&gt;SP800-204A，&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-204A&#34; title=&#34;使用服务网格构建基于微服务的安全应用&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用服务网格构建基于微服务的安全应用&lt;/a&gt;，为基于微服务的应用的各种安全服务（如建立安全会话、安全监控等）提供了部署指导，这些服务使用基于独立于应用代码运行的服务代理的专用基础设施（即服务网格）。&lt;/li&gt;
&lt;li&gt;SP800-204B，&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-204B&#34; title=&#34;使用服务网格的基于微服务的应用的基于属性的访问控制&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用服务网格的基于微服务的应用的基于属性的访问控制&lt;/a&gt;，为在服务网格中构建满足安全要求的认证和授权框架提供了部署指导，例如：（1）通过在任何一对服务之间的通信中实现相互认证来实现零信任；（2）基于访问控制模型，如基于属性的访问控制（ABAC）模型的强大访问控制机制，可用于表达广泛的策略集，并在用户群、对象（资源）和部署环境方面可扩展。&lt;/li&gt;
&lt;li&gt;SP800-190，&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-190&#34; title=&#34;应用容器安全指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;应用容器安全指南&lt;/a&gt;，解释了与容器技术相关的安全问题，并为在规划、实施和维护容器时解决这些问题提出了实用建议。这些建议是针对容器技术架构中的每个层级提供的。&amp;mdash;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;15-本文件的组织&#34;&gt;1.5 本文件的组织&lt;/h2&gt;
&lt;p&gt;本文件的结构如下：&lt;/p&gt;
&lt;p&gt;第二章简要介绍了参考平台，为其提供了实施 DevSecOps 原语的指导。&lt;/p&gt;
&lt;p&gt;第三章介绍了 DevSecOps 的基本要素（即管道），设计和执行管道的方法，以及自动化在执行中的作用。&lt;/p&gt;
&lt;p&gt;第四章涵盖了管道的所有方面，包括（a）所有管道需要解决的共同问题，（b）对第 1.1 节中列出的参考平台中五种代码类型的管道的描述，以及（c）DevSecOps 在整个生命周期中对整个应用环境（有五种代码类型的参考平台，因此承载着 DevSecOps 的实施）的安全保证的好处，包括 &lt;strong&gt;持续授权操作（C-ATO）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;第五章提供了摘要和结论。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>实施 DevSecOps 原语的参考平台</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/reference-platform/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/reference-platform/</guid>
      <description>
        
        
        &lt;p&gt;如第 1.1 节所述，参考平台是一个容器编排和管理平台。在现代应用环境中，平台是物理（裸机）或虚拟化（如虚拟机、容器）基础设施上的一个抽象层。在实施 DevSecOps 原语之前，平台只是包含了应用代码，其中包含了应用逻辑和服务网状代码，而服务网状代码又提供应用服务。本节将考虑以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个容器编排和资源管理平台，容纳了应用程序代码和大部分的服务网格代码&lt;/li&gt;
&lt;li&gt;服务网格的软件架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;21-容器编排和资源管理平台&#34;&gt;2.1 容器编排和资源管理平台&lt;/h2&gt;
&lt;p&gt;由于微服务通常是以容器的形式实现的，因此容器编排和资源管理平台被用于服务的部署、运维和维护。&lt;/p&gt;
&lt;p&gt;一个典型的协调和资源管理平台由各种逻辑（形成抽象层）和物理工件组成，用于部署容器。例如，在 Kubernetes 中，容器在最小的部署单元内运行，称为 Pod。一个 Pod 理论上可以承载一组容器，但通常情况下，一个 Pod 内只运行一个容器。一组 Pod 被定义在所谓的节点内，节点可以是物理机或虚拟机（VM）。一组节点构成了一个集群。通常情况下，需要单个微服务的多个实例来分配工作负载，以达到预期的性能水平。集群是一个资源池（节点），用于分配微服务的工作负载。使用的技术之一是横向扩展，即访问频率较高的微服务被分配更多的实例或分配到具有更多资源（如 CPU 和 / 或内存）的节点。&lt;/p&gt;
&lt;h2 id=&#34;22-服务网格架构&#34;&gt;2.2 服务网格架构&lt;/h2&gt;
&lt;p&gt;在看了基于微服务的应用所需的各种应用服务后，考虑一下提供这些服务的服务网格的架构。服务网格由两个主要部分组成：控制平面和数据平面。&lt;/p&gt;
&lt;h3 id=&#34;221-控制平面&#34;&gt;2.2.1 控制平面&lt;/h3&gt;
&lt;p&gt;控制平面有几个组件。虽然服务网格的数据面主要由作为容器运行在与应用容器相同的 Pod 中的代理组成，但控制面组件在它们自己的 Pod、节点和相关集群中运行。以下是控制平面的 &lt;a href=&#34;https://medium.com/avmconsulting-blog/managing-microservices-with-istio-service-mesh-in-kubernetes-36e1fda81757&#34; title=&#34;各种功能&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;各种功能&lt;/a&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Envoy sidecar 代理的服务发现和配置&lt;/li&gt;
&lt;li&gt;自动化的密钥和证书管理&lt;/li&gt;
&lt;li&gt;用于策略定义和收集遥测数据的 API&lt;/li&gt;
&lt;li&gt;服务网格组件的配置摄取&lt;/li&gt;
&lt;li&gt;管理一个到服务网格的入站连接（入站网关）&lt;/li&gt;
&lt;li&gt;管理来自服务网格的出站连接（出口网关）&lt;/li&gt;
&lt;li&gt;将 sidecar 代理注入那些托管应用程序微服务容器的 Pod、节点或命名空间中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，控制平面帮助管理员用配置数据填充数据平面组件，这些数据是由控制平面的策略产生的。上述功能 3 的策略可能包括网络路由策略、负载均衡策略、蓝绿部署的策略、金丝雀部署、超时、重试和断路能力。这后三项被统称为网络基础设施服务的弹性能力的特殊名称。最后要说的是与安全相关的策略（例如，认证和授权策略、TLS 建立策略等）。这些策略规则由一个模块解析，该模块将其转换为配置参数，供执行这些策略的数据平面代理中的可执行程序使用。&lt;/p&gt;
&lt;h3 id=&#34;222-数据平面&#34;&gt;2.2.2 数据平面&lt;/h3&gt;
&lt;p&gt;数据平面组件执行三种不同的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安全的网络功能&lt;/li&gt;
&lt;li&gt;策略执行功能&lt;/li&gt;
&lt;li&gt;可观测性功能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;执行上述三种功能的数据平面的主要组件被称为 sidecar 代理。这个七层代理运行在与它执行代理功能的微服务相同的网络命名空间（在这个平台上，就是同一个 Pod）。每个微服务都有一个代理，以确保来自微服务的请求不会绕过其相关的代理，每个代理都作为容器运行在与应用微服务相同的 Pod 中。两个容器都有相同的 IP 地址，并共享相同的 IP 表规则。这使得代理完全控制了 Pod，并 &lt;a href=&#34;https://medium.com/avmconsulting-blog/managing-microservices-with-istio-service-mesh-in-kubernetes-36e1fda81757&#34; title=&#34;处理所有通过它的流量&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;处理所有通过它的流量&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;第一类功能（安全网络）包括与微服务之间的实际路由或消息通信有关的所有功能。属于这一类的功能是服务发现、建立安全（TLS）会话、为每个微服务及其相关请求建立网络路径和路由规则、验证每个请求（来自服务或用户）以及授权请求。&lt;/p&gt;
&lt;p&gt;以建立双向 TLS 会话为例，发起通信会话的代理将与服务网格的控制平面中的模块进行交互，以检查是否需要通过链加密流量并与后端或目标 Pod 建立双向 TLS。使用双向 TLS 启用这个功能需要每个 Pod 有一个证书（即有效的凭证）。由于一个规模较大的微服务应用程序（由许多微服务组成）可能需要数百个 Pod（即使没有通过多个实例对单个微服务进行横向扩展），这可能涉及到管理数百个生命周期短暂的证书。这反过来又要求每个微服务有一个强大的身份，服务网格要有一个访问管理器、一个证书存储和一个证书验证能力。此外，为了支持认证策略，还需要识别和认证两个通信的 Pod 的机制。&lt;/p&gt;
&lt;p&gt;其他类型的代理包括拦截客户端调用到应用程序的第一个入口点（第一个被调用的微服务）的 &lt;a href=&#34;https://medium.com/swlh/kong-api-gateway-zero-to-production-5b8431495ee&#34; title=&#34;入口代理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入口代理&lt;/a&gt; 和处理微服务对驻扎在平台集群外的应用模块的请求的出口代理。&lt;/p&gt;
&lt;p&gt;数据平面执行的第二类功能是通过代理中的配置参数执行控制平面中定义的策略（策略执行服务）。一个例子是使用作为微服务请求一部分的 JWT 令牌中的信息来验证调用服务。另一个例子是使用驻留在代理本身的代码或通过连接到外部授权服务，为每个请求执行访问控制策略。&lt;/p&gt;
&lt;p&gt;服务代理与应用服务容器联合执行的第三类功能是收集遥测数据，这有助于监测服务的健康和状态，将与服务相关的日志传输到控制平面中的日志聚合模块，并将必要的数据附加到应用请求头，以方便追踪与特定应用事务相关的所有请求。应用响应由代理机构以返回代码、响应描述或检索数据的形式传达给其相关的调用服务。&lt;/p&gt;
&lt;p&gt;服务网格是容器编排平台感知的，与 API 服务器互动，该服务器为安装在各种平台工件（如 Pod、节点、命名空间）中的应用服务提供一个窗口，监测它是否有新的微服务，并自动将 sidecar 容器注入包含这些新微服务的 Pod。一旦服务网格插入 sidecar 代理容器，运维和安全团队就可以对流量执行策略，并帮助保护和运维应用程序。这些团队还可以配置对微服务应用的监控，而不干扰应用的运作。&lt;/p&gt;
&lt;p&gt;基础设施、策略执行和可观测性服务的配置可以使用作为 DevSecOps 管道一部分的声明性代码来自动化。虽然开发团队应该全面了解其代码部署的安全和管理细节，但上述服务的自动化为他们提供了更多的时间来集中精力进行高效的开发范式，如代码模块化和结构化。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>DevSecOps 组织准备、关键基本要素和实施</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/devsecops/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/devsecops/</guid>
      <description>
        
        
        &lt;p&gt;DevSecOps 在早期就将安全纳入了软件工程流程。它将安全流程和工具集成到 DevOps 的所有开发工作流程（或后面解释的管道）中，并使之自动化，从而实现无缝和连续。换句话说，它可以被看作是三个过程的组合。&lt;a href=&#34;https://medium.com/faun/devsecops-baking-security-into-development-process-9579418ad9a7&#34; title=&#34;开发 &amp;#43; 安全 &amp;#43; 运维&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开发 + 安全 + 运维&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本节讨论了 DevSecOps 的以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组织对 DevSecOps 的准备情况&lt;/li&gt;
&lt;li&gt;开发安全运维平台&lt;/li&gt;
&lt;li&gt;开发安全运维的基本构件或关键原语&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;31-组织对-devsecops-的准备情况&#34;&gt;3.1 组织对 DevSecOps 的准备情况&lt;/h2&gt;
&lt;p&gt;DevSecOps 是一种软件开发、部署和生命周期管理方法，它涉及到从整个应用程序或平台的一次大型发布转变为持续集成、持续交付和持续部署（CI/CD）方法。这种转变又要求公司的 IT 部门的结构和工作流程发生变化。最明显的变化是组织一个 DevSecOps 小组，由软件开发人员、安全专家和 IT 运维专家组成，负责应用程序（即微服务）的每一部分。这个较小的团队不仅能促进最初的敏捷开发和部署的效率和效果，还能促进后续的生命周期管理活动，如监控应用行为、开发补丁、修复错误或扩展应用。这种具有三个领域专业知识的跨职能团队的组成，构成了在组织中引入 DevSecOps 的关键成功因素。&lt;/p&gt;
&lt;h2 id=&#34;32-devsecops-平台&#34;&gt;3.2 DevSecOps 平台&lt;/h2&gt;
&lt;p&gt;DevSecOps 是一个敏捷的、自动化的开发和部署过程，它使用称为 CI/CD 管道的原语，在自动化工具的帮助下，将软件从构建阶段带到部署阶段，最后到运行时间 / 操作阶段。这些管道是将开发者的源代码带过各个阶段的工作流程，如构建、测试、打包、交付，以及在各个阶段由测试工具支持的部署。&lt;/p&gt;
&lt;p&gt;DevSecOps 平台是指各种 CI/CD 管道（针对每种代码类型）运行的资源集合。至少，这个平台由以下部分组成。&lt;/p&gt;
&lt;p&gt;(a) 管道软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CI 软件 —— 从代码库中提取代码，调用构建软件，调用测试工具，并将测试后的工件存储到图像注册表中。&lt;/li&gt;
&lt;li&gt;CD 软件 —— 拉出工件、软件包，并根据 IaC 中的计算、网络和存储资源描述，部署软件包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(b) SDLC 软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建工具（例如，IDE）&lt;/li&gt;
&lt;li&gt;测试工具（SAST、DAST、SCA）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(c) 存储库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源代码库（如 GitHub）&lt;/li&gt;
&lt;li&gt;容器镜像存储库或注册表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(d) 可观测性或监测工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志和日志聚合工具&lt;/li&gt;
&lt;li&gt;产生指标的工具&lt;/li&gt;
&lt;li&gt;追踪工具（应用程序的调用顺序）&lt;/li&gt;
&lt;li&gt;可视化工具（结合上述数据生成仪表盘 / 警报）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 DevSecOps 平台中，通过内置的设计功能（如零信任）和使用一套全面的安全测试工具，如静态应用安全工具（SAST）、动态安全测试工具（DAST）和软件组成分析（SCA）工具进行测试，在构建和部署阶段提供安全保证。此外，在运行时 / 操作阶段，还通过持续的行为检测 / 预防工具提供安全保证，其中一些工具甚至可能使用人工智能（AI）和机器学习（ML）等复杂技术。因此，DevSecOps 平台不仅在构建和部署阶段运行，而且在运行时 / 操作阶段也运行。&lt;/p&gt;
&lt;p&gt;在一些 DevSecOps 平台中，执行应用程序安全分析的安全工具（例如 SAST、DAST 和 SCA），例如通过在后台的有效扫描来识别漏洞和错误，可以与集成开发环境（IDE）和其他 DevOps 工具紧密集成。这一功能的存在，使得这些工具对开发者来说是透明的，避免了他们为运行这些工具而 &lt;a href=&#34;https://sdtimes.com/security/appsec-vs-devsecops-and-what-that-means-for-developers/&#34; title=&#34;调用单独的 API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;调用单独的 API&lt;/a&gt;。根据集成开发环境、所执行的任务或工具所消耗的资源的不同，工具也可以与集成开发环境分开执行。&lt;/p&gt;
&lt;h2 id=&#34;321-devsecops-平台的可交付成果&#34;&gt;3.2.1 DevSecOps 平台的可交付成果&lt;/h2&gt;
&lt;p&gt;SAST、DAST 和 SCA 工具的使用可能不仅限于测试应用程序代码。DevSecOps 可能包括将这些工具用于其他代码类型，如 IaC，因为 IaC 定义了应用程序的部署架构，因此是自动评估和补救安全设计差距的关键途径。&lt;/p&gt;
&lt;p&gt;总之，DevSecOps 平台可以提供以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过在与应用环境中所有代码类型相关的管道内纳入充分的测试 / 检查，提供安全保证。安全性不是被归入一个单独的任务或阶段。&lt;/li&gt;
&lt;li&gt;DevSecOps 平台也在运行时（生产中）运行，通过协助执行零信任原则，并通过持续监控，随后的警报和纠正机制，提供实时的安全保证，从而实现持续授权操作（C-ATO）的认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33-devsecops-关键原语和实施任务&#34;&gt;3.3 DevSecOps 关键原语和实施任务&lt;/h2&gt;
&lt;p&gt;所涉及的关键原语和实施任务是。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管道和 CI/CD 管道的概念&lt;/li&gt;
&lt;li&gt;CI/CD 管道的构建块&lt;/li&gt;
&lt;li&gt;设计和执行 CI/CD 管道&lt;/li&gt;
&lt;li&gt;自动化的战略&lt;/li&gt;
&lt;li&gt;CI/CD 管道中对安全自动化工具的要求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;331-管道的概念和-cicd-管道&#34;&gt;3.3.1 管道的概念和 CI/CD 管道&lt;/h3&gt;
&lt;p&gt;DevSecOps 作为一种敏捷应用开发、部署和运维的方法论或框架，与其他方法论一样，是由 &lt;a href=&#34;https://www.redhat.com/en/topics/devops/what-is-devsecops&#34; title=&#34;各个阶段&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;各个阶段&lt;/a&gt; 组成的。信息在各阶段中的顺序和流动被称为工作流，其中一些阶段可以平行执行，而其他阶段则必须遵循一个顺序。每个阶段可能需要调用一个独特的工作来执行该阶段的活动。&lt;/p&gt;
&lt;p&gt;DevSecOps 在流程工作流中引入的一个独特概念是 &lt;strong&gt;&lt;a href=&#34;https://www.redhat.com/en/topics/devops/what-is-ci-cd#:%7E:text=CI%2FCD%20is%20a%20method,continuous%20delivery%2C%20and%20continuous%20deployment&#34; title=&#34;管道&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;管道&lt;/a&gt;&lt;/strong&gt; 的概念。有了管道，就不需要为启动 / 执行流程的每个阶段单独编写作业。相反，只有一个作业从初始阶段开始，自动触发与其他阶段有关的活动 / 任务（包括顺序的和并行的），并创建一个无错误的智能工作流程。&lt;/p&gt;
&lt;p&gt;DevSecOps 中的管道被称为 CI/CD 管道，这是基于它所完成的总体任务和它所包含的两个单独阶段。CD 可以表示持续交付或持续部署阶段。根据这后一个阶段，CI/CD 可以涉及以下任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建、测试、安全和交付：经过测试的修改后的代码被交付到暂存区。&lt;/li&gt;
&lt;li&gt;构建、测试、安全、交付和部署：暂存区的代码会自动部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在前者中，自动化在交付阶段就结束了，接下来在托管平台基础设施中部署修改后的应用程序的任务是手动执行的。在后者中，部署也是自动化的。管道中任何阶段的自动化都可以通过将管道阶段表达为代码的工具来实现。&lt;/p&gt;
&lt;p&gt;CI/CD 管道的工作流程如下图 1 所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/f1_hud8e580ec49b0969e182135d22b6e802e_58310_986x302_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/f1.png&#34; data-img=&#34;/book/service-mesh-devsecops/devsecops/f1.png&#34; data-width=&#34;986&#34; data-height=&#34;302&#34; alt=&#34;image&#34; data-caption=&#34;图 1：CI/CD 管道工作流程&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：CI/CD 管道工作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图中所示的单元和集成测试使用了第 3.2 节中描述的 SAST、DAST 和 SCA 工具。应该注意的是，当测试失败时，组织可以选择继续构建过程。根据组织如何平衡风险容忍度和业务需求，当一个特定的测试失败时，它可以选择 fail-open（记录并继续）或 fail-closed（停止 / 中断）。在失败关闭的情况下，开发人员得到测试结果报告，必须修复问题，并重新启动 CI 过程。&lt;/p&gt;
&lt;p&gt;持续集成涉及到开发人员经常将代码变化合并到一个中央存储库中，在那里运行自动化的构建和测试。构建是将源代码转换为可执行代码的过程，以便在其上运行的平台。在 CI/CD 管道软件中，开发者的修改是通过创建构建和运行针对构建的自动测试来验证的。这个过程避免了在等待发布日将修改合并到发布分支时可能发生的 &lt;a href=&#34;https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment&#34; title=&#34;集成挑战&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;集成挑战&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;持续交付是持续集成之后的一个阶段，在这个阶段，代码的变化在构建阶段之后被部署到测试和 / 或暂存环境。持续交付到生产环境包括指定一个发布频率 —— 每天、每周、每两周或其他时期 —— 基于软件的性质或组织运营的市场。这意味着在自动化测试的基础上，有一个预定的发布过程，尽管应用程序可以通过点击一个按钮在任何时候被部署。持续交付中的部署过程的特点是手动，但诸如代码迁移到生产服务器、建立网络参数和指定运行时配置数据等任务可以由自动化脚本来完成。&lt;/p&gt;
&lt;p&gt;持续部署类似于持续交付，只是发布是 &lt;a href=&#34;https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment&#34; title=&#34;自动进行&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动进行&lt;/a&gt; 的，代码的修改在完成后立即提供给客户。自动发布过程在很多情况下可能包括 A/B 测试，以促进新功能的缓慢上线，以便在出现错误 / 误差时减轻失败的影响。&lt;/p&gt;
&lt;p&gt;持续交付和持续部署之间的区别如图 2 中所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/f2_hu31420f417540d9a4cec8caeb0a763aba_128422_1708x704_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/f2.png&#34; data-img=&#34;/book/service-mesh-devsecops/devsecops/f2.png&#34; data-width=&#34;1708&#34; data-height=&#34;704&#34; alt=&#34;image&#34; data-caption=&#34;图 2：持续交付和持续部署之间的区别&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：持续交付和持续部署之间的区别&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;332-cicd-管道的构建块&#34;&gt;3.3.2 CI/CD 管道的构建块&lt;/h3&gt;
&lt;p&gt;定义 CI/CD 管道资源、构建管道和执行这些管道的主要软件是 CI/CD 管道软件。这类软件的架构可能有轻微的变化，取决于特定的产品。以下是对 CI/CD 工具（管道软件）运行情况的概述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些 CI/CD 工具在应用程序和相关资源托管的平台上自然运行（即容器编排和资源管理平台），而其他工具需要通过其 API 集成到应用程序托管平台。使用应用托管平台原生的 CI/CD 工具的一些优势是：
&lt;ul&gt;
&lt;li&gt;它使部署、维护和管理 CI/CD 工具本身更加容易。&lt;/li&gt;
&lt;li&gt;CI/CD 工具定义的每个管道都成为另一个平台原生资源，并以同样的方式管理。事实上，执行管道所需的所有实体，如任务和管道（然后分别作为其他实体的蓝图，如任务运行和管道运行），可以作为建立在平台原生资源之上的 &lt;a href=&#34;https://itnext.io/k8s-native-jenkins-x-and-tekton-pipelines-e2b5a61a1d22&#34; title=&#34;自定义资源定义&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义资源定义&lt;/a&gt;（CRD）来创建。具有这种架构的软件可以被其他 CI/CD 管道软件产品所使用，以促进管道的快速定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一些 CI/CD 工具与代码库集成，以扫描 / 检查应用程序代码。这些类型的工具与每个应用程序和每个环境的代码库有关联。当应用程序模块、基础设施或配置发生变化时，它们被存储在这些代码库中。通过 webhooks 或其他方式连接到代码库的 CI/CD 管道软件在提交时被激活（推送工作流模型）或通过来自这些存储库的拉取请求。&lt;/li&gt;
&lt;li&gt;一些 CI/CD 工具单独为本地平台执行 CD 功能（例如，Kubernetes 平台的 Jenkins X）或为多个技术栈执行 CD 功能（例如，多云部署的 Spinnaker）。这类工具的困难在于，它们可能缺乏完成 CI 功能的本地工具（例如，测试代码的工具，构建应用镜像，或将其推送到注册中心）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;333-准备和执行-cicd-管道&#34;&gt;3.3.3 准备和执行 CI/CD 管道&lt;/h3&gt;
&lt;p&gt;创建 CI/CD 管道的目的是为了实现源代码的频繁更新、重建，以及将更新的模块自动部署到生产环境中。&lt;/p&gt;
&lt;p&gt;涉及的 &lt;a href=&#34;https://aws.amazon.com/getting-started/hands-on/create-continuous-delivery-pipeline/?trk=gs_card&#34; title=&#34;关键任务&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关键任务&lt;/a&gt; 是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保 DevSecOps 平台中的所有单个组件（管道软件、SDLC 软件、代码库、可观测性工具等）都可用。&lt;/li&gt;
&lt;li&gt;通过认证、验证或定制测试，确保这些组件的安全。&lt;/li&gt;
&lt;li&gt;将 CI 和 CD 工具与 SDLC 工具整合起来 —— 访问令牌、调用脚本、管道定义。&lt;/li&gt;
&lt;li&gt;根据部署环境（即内部或云端的应用程序托管平台），在 IaC 工具（与 GitOps）中设置配置细节&lt;/li&gt;
&lt;li&gt;将运行时工具与部署环境相结合。&lt;/li&gt;
&lt;li&gt;设计仪表盘并定义要监控的事件、要生成的警报和要监控的应用程序状态变量（如内存利用率等），通过与日志聚合器、指标生成器和跟踪生成器等工具的连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;执行任务包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置源代码库。建立一个存储库（如 GitHub 或 GitLab），用于存储具有适当版本控制的应用程序源代码。&lt;/li&gt;
&lt;li&gt;构建过程。使用自动代码构建工具，配置并执行生成可执行文件的构建过程（对于那些需要更新的代码部分）。&lt;/li&gt;
&lt;li&gt;保证过程的安全。通过使用 SAST 和 DAST 工具进行单元测试，确保构建时没有静态和动态的漏洞。这和上面的任务是由 CI 工具激活的。&lt;/li&gt;
&lt;li&gt;描述部署环境。这可能涉及描述（使用 IaC）物理 / 虚拟资源，以便在云或企业数据中心部署应用程序。&lt;/li&gt;
&lt;li&gt;创建交付管道。创建一个将自动部署应用程序的管道。这个任务和前面的任务是由 CD 工具启用的。&lt;/li&gt;
&lt;li&gt;测试代码并执行管道。在适当的测试之后，只要有新的代码出现在资源库中，就执行 CI 工具。当构建过程成功后，执行 CD 工具，将应用程序部署到暂存 / 生产环境中。&lt;/li&gt;
&lt;li&gt;激活运行时工具和仪表板，启动运行时监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重申一下，CI/CD 流程的三个主要阶段是构建 / 测试、发布 / 打包和部署。以下功能将其转化为一个管道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当一个服务的源代码被更新时，推送到源代码库的代码变化会触发代码构建工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码开发环境或代码构建工具（如 IDE），通常与安全测试工具（如静态漏洞分析工具）集成，以促进安全编译代码工件的生成，从而将安全纳入 CI 管道。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在代码构建工具中生成的编译代码工件会触发交付 / 打包工具，该工具可能与它自己的一套工具（例如，动态漏洞分析、动态渗透测试工具、用于识别所附库中的漏洞的软件组成分析工具）集成在一起，并且还创建与部署环境有关的配置参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后，发布 / 打包工具的输出被自动送入 CD 工具，该工具将软件包部署到 &lt;a href=&#34;https://aws.amazon.com/blogs/devops/setting-up-a-ci-cd-pipeline-by-integrating-jenkins-with-aws-codebuild-and-aws-codedeploy/&#34; title=&#34;所需的环境&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;所需的环境&lt;/a&gt; 中（例如，中转、生产）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CI/CD 管道的工作流程不应产生无人参与的印象。以下团队 / 角色对 CI/CD 管道做出 &lt;a href=&#34;https://medium.com/@mylocaldevstack/the-future-of-devops-assembly-lines-40227546d750&#34; title=&#34;贡献&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;贡献&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发团队：这个团队的成员为他们的应用程序申报第三方现成软件（OSS）的依赖性，审查 DevSecOps 系统围绕脆弱依赖性提出的建议，按照建议进行更新，并编写足够的测试案例以确保所有功能验证（消除运行时的错误）。&lt;/li&gt;
&lt;li&gt;首席信息安全官（CISO）：在与安全团队协商后，CISO 定义了 DevSecOps 系统的整体范围（深度和广度），从而可以适当地配置它，以满足应用程序的关键任务需求。&lt;/li&gt;
&lt;li&gt;安全团队：这个团队的成员按照最佳实践创建管道，包括执行所有必要的安全功能的任务（例如，SBOM 生成、漏洞扫描、代码构建、代码签名、引入新的测试工具、进行审计等）。具体来说，在某些情况下，安全团队的成员可能会负责设计、构建和维护策略即代码和相关管道。&lt;/li&gt;
&lt;li&gt;基础设施团队：这个团队的成员创建、维护和升级基础设施。&lt;/li&gt;
&lt;li&gt;QA 团队：这个团队的成员开发集成测试案例。&lt;/li&gt;
&lt;li&gt;部署团队 / 发布团队：这个团队的成员为各种环境（UAT/PreProd/Prod）创建管道和包，并为这些环境进行适当的配置和供应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些团队进行的许多活动中，有一些包括 CI/CD 管道中采用的工具的定制、更新和增强（例如，用最新的已知漏洞数据库更新静态漏洞分析工具）。在手工操作过程中，应谨慎行事，以免阻塞管道。在设定平均生产时间目标的同时，还应通过使用 &amp;ldquo;合并（GitLab）或拉取（GitHub）请求&amp;rdquo; 和这些请求的多个批准者来减少风险，如内部威胁。这个管道由发布后团队设计、维护和执行，该团队 —— 除了监控功能 —— 还执行 &lt;a href=&#34;https://faun.pub/best-terraform-tutorial-guides-an-overview-65a6fcee0a24&#34; title=&#34;其他流程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;其他流程&lt;/a&gt;，如合规管理、备份流程和资产跟踪。&lt;/p&gt;
&lt;h3 id=&#34;334-自动化的战略&#34;&gt;3.3.4 自动化的战略&lt;/h3&gt;
&lt;p&gt;与其他涉及从编码到发布的线性流程的软件开发模式相比，DevOps 使用了一个具有交付管道的前向过程（即构建 / 安全、交付 / 打包和发布）和一个具有反馈回路的反向过程（即计划和监控），形成一个递归的工作流程。自动化在这些活动中的作用是改善工作流程。持续集成强调测试自动化，以确保每当新的提交被集成到主分支时，应用程序不会被破坏。自动化带来了以下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生有关软件静态和运行时流程的数据。&lt;/li&gt;
&lt;li&gt;减少开发和部署时间。&lt;/li&gt;
&lt;li&gt;架构的内置安全、隐私和合规性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是推荐的 &lt;a href=&#34;https://medium.com/searce/gitops-the-next-big-thing-for-devops-and-automation-2a9597e51559&#34; title=&#34;自动化策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动化策略&lt;/a&gt;，以便于更好地利用组织资源，并在高效、安全的应用环境方面获得最大利益。&lt;/p&gt;
&lt;p&gt;选择要自动化的活动。例如，以下是测试活动自动化的有效候选项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试其功能需符合法规要求的模块（如 PCI-DSS、HIPAA、Sarbanes-Oxley）。&lt;/li&gt;
&lt;li&gt;具有中度至高度重复性的任务。&lt;/li&gt;
&lt;li&gt;测试执行时间序列操作的模块，如消息发布者和消息订阅者。&lt;/li&gt;
&lt;li&gt;测试涉及跨越多个服务的事务的工作流程（例如，请求跟踪）。&lt;/li&gt;
&lt;li&gt;测试那些资源密集型和可能成为性能瓶颈的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在根据上述标准选择自动化的候选者后，必须应用通常的风险分析来选择一个子集，以提供最佳的回报，并使理想的安全指标（如深度防御）最大化。一些推荐的策略包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用每年节省的小时数的成本效益比来确定哪些 &lt;a href=&#34;https://medium.com/searce/gitops-the-next-big-thing-for-devops-and-automation-2a9597e51559&#34; title=&#34;流程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流程&lt;/a&gt; 需要自动化的优先次序。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://searchitoperations.techtarget.com/feature/Understand-the-role-of-infrastructure-as-code-in-DevOps?utm_campaign=20210809_The&amp;#43;next&amp;#43;DevSecOps&amp;#43;challenge%3A&amp;#43;People&amp;amp;utm_medium=EM&amp;amp;utm_source=NLN&amp;amp;track=NL-1841&amp;amp;ad=939963&amp;amp;asrc=EM_NLN_174809933&#34; title=&#34;关键绩效指标（KPI）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关键绩效指标（KPI）&lt;/a&gt;（例如，识别故障或问题、纠正或恢复的平均时间）作为标记来完善 DevSecOps 流程。&lt;/li&gt;
&lt;li&gt;根据应用，对基础设施服务应用不同的权重（例如，授权和其他策略的执行，监测系统状态以确保安全运行状态，在系统可用性、延迟、从中断中恢复的平均时间等方面的网络弹性），以确定对 DevSecOps 流程的资源分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;335-cicd-管道中对安全自动化工具的要求&#34;&gt;3.3.5 CI/CD 管道中对安全自动化工具的要求&lt;/h3&gt;
&lt;p&gt;在 CI/CD 管道中使用的各种功能（如静态漏洞分析、动态漏洞分析、软件构成分析）的安全自动化工具需要有不同的接口和警报 / 报告要求，因为它们必须根据使用管道阶段（如构建、打包、发布）而无缝运行。这些要求是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全自动化工具应与集成开发环境（IDE）工具一起工作，并帮助开发人员优先处理和补救静态漏洞。需要这些功能来促进开发人员的采用和提高生产力。&lt;/li&gt;
&lt;li&gt;安全自动化工具应该是灵活的，以支持特定的工作流程，并为安全服务提供扩展能力。&lt;/li&gt;
&lt;li&gt;在构建阶段进行静态漏洞检查的工具确保了数据流的安全，而那些进行动态漏洞检查的工具则确保了运行时应用程序状态的安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必须提到的是，安全自动化工具是有成本的，因此，这些工具的使用程度是基于风险因素分析。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>为参考平台实施 DevSecOps 原语</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/implement/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/implement/</guid>
      <description>
        
        
        &lt;p&gt;各种 CI/CD 管道都涉及到参考平台（即基于微服务的应用，有提供基础设施服务的服务网格）。虽然参考应用是基于微服务的应用，但 DevSecOps 的原语可以应用于单体应用以及既在企业内部又基于云的应用（如混合云、单一公有云和多云）。&lt;/p&gt;
&lt;p&gt;在第 2.1 节中，我们提到了我们参考应用环境中的五种代码类型。我们还提到，也可以为这五种代码类型中的每一种创建单独的 CI/CD 管道。这五种代码类型在参考平台组件中的位置将被讨论，然后是描述相关 CI/CD 管道的单独章节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参考平台中的代码类型和相关的 CI/CD 管道（4.1 节）&lt;/li&gt;
&lt;li&gt;应用程序代码和应用服务代码的 CI/CD 管道（4.2 节）&lt;/li&gt;
&lt;li&gt;基础设施即代码（IaC）的 CI/CD 管道（4.3 节）&lt;/li&gt;
&lt;li&gt;策略即代码的 CI/CD 管道（4.4 节）&lt;/li&gt;
&lt;li&gt;可观测性即代码的 CI/CD 管道（4.5 节）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所有 CI/CD 管道的实施问题，无论代码类型如何，都将在以下章节中讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保 CI/CD 管道的安全（4.6 节）&lt;/li&gt;
&lt;li&gt;CI/CD 管道中的工作流模型（4.7 节）&lt;/li&gt;
&lt;li&gt;CI/CD 管道中的安全测试（4.8 节）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节还将考虑 DevSecOps 的整体优势，并在第 4.9 节和第 4.10 节分别介绍参考平台的具体优势和利用 DevSecOps 进行持续授权操作（C-ATO）的能力。&lt;/p&gt;
&lt;h2 id=&#34;41-代码类型和参考平台组件的描述&#34;&gt;4.1 代码类型和参考平台组件的描述&lt;/h2&gt;
&lt;p&gt;对上述五类代码（即应用、应用服务、基础设施、策略和监控）的简要描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序代码和应用服务代码：前者包含一组特定业务事务的数据和应用逻辑，而后者包含所有服务的代码，如网络连接、负载均衡和网络弹性。&lt;/li&gt;
&lt;li&gt;基础设施即代码（IaC）：用于提供和配置基础设施资源的代码，它以可重复和一致的方式承载 &lt;a href=&#34;https://searchitoperations.techtarget.com/feature/Understand-the-role-of-infrastructure-as-code-in-DevOps?utm_campaign=20210809_The&amp;#43;next&amp;#43;DevSecOps&amp;#43;challenge%3A&amp;#43;People&amp;amp;utm_medium=EM&amp;amp;utm_source=NLN&amp;amp;track=NL-1841&amp;amp;ad=939963&amp;amp;asrc=EM_NLN_174809933&#34; title=&#34;应用程序的部署&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;应用程序的部署&lt;/a&gt;。这种代码是用一种声明性语言编写的，当执行时，为正在部署的应用程序提供和配置基础设施。这种类型的代码就像在应用程序的微服务中发现的任何其他代码，只是它提供的是基础设施服务（例如，配置服务器）而不是事务服务（例如，在线零售应用程序的支付处理）。&lt;/li&gt;
&lt;li&gt;策略即代码：描述了许多策略，包括安全策略，作为 &lt;a href=&#34;https://www.magalix.com/blog/introducing-policy-as-code-the-open-policy-agent-opa&#34; title=&#34;可执行模块&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可执行模块&lt;/a&gt;。一个例子是授权策略，它的代码包含了策略（如允许、拒绝等）和适用领域（如 RESTAPI 的方法，GET、PUT 等，路径等动词或工件）这段代码可以用特殊用途的策略语言（如 Rego）或常规应用中使用的语言（如 Go）编写。这段代码可能与 IaC 的配置代码有一些重合。然而，对于实施与特定于应用领域的关键安全服务相关的策略，需要一个单独的策略作为代码，驻留在参考平台的策略执行点（PEP）中。&lt;/li&gt;
&lt;li&gt;可观测性即代码：推断系统内部状态的能力，并对系统内何时以及更重要的是为何发生错误提供可操作的洞察力。它是一种全栈式的可观测性，包括监测和分析，并对应用程序和承载它们的系统的整体性能提供关键的洞察力。在参考平台的背景下，可观测性即代码是指在代理中创建机构的那部分代码，并为从微服务应用中收集三种类型的数据（即日志、跟踪和遥测）&lt;a href=&#34;https://searchitoperations.techtarget.com/tip/Tackle-Kubernetes-observability-with-the-right-metrics?track=NL-1841&amp;amp;ad=938191&amp;amp;asrc=EM_NLN_153034984&amp;amp;utm_medium=EM&amp;amp;utm_source=NLN&amp;amp;utm_campaign=20210322_DevSecOps&amp;#43;leaves&amp;#43;Excel&amp;#43;in&amp;#43;the&amp;#43;dust&#34; title=&#34;创建功能&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;创建功能&lt;/a&gt;。这类代码还向外部工具提供或传输数据（例如，日志聚合工具，它聚合来自单个微服务的日志数据，为瓶颈服务提供跟踪数据分析，从遥测数据生成反映应用健康状况的指标等）。以下描述了对作为代码的可观测性所实现的三种功能：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;日志捕获详细的错误信息，以及用于故障排除的调试日志和堆栈跟踪。&lt;/li&gt;
&lt;li&gt;追踪应用程序的请求，因为它们通过多个微服务来完成一项事务，以确定分布式或基于微服务的生态系统中的问题或性能瓶颈。&lt;/li&gt;
&lt;li&gt;监测，或称度量，收集遥测从应用程序和服务中收集数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每种代码类型都有相关的 CI/CD 管道，并在第 4.2 到 4.5 节中进行了描述。应用服务代码、基础设施即代码、策略即代码和可观测性即代码类型之间可能存在重叠。&lt;/p&gt;
&lt;p&gt;托管这五种代码类型的参考平台的组成成分是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;业务功能组件（由几个微服务模块组成，每个模块通常作为一个容器实现），体现了应用逻辑（例如，与数据交互，执行事务等），从而形成应用代码。&lt;/li&gt;
&lt;li&gt;基础设施组件（包含计算机、网络和存储资源），其成员可以使用基础设施即代码进行配置。&lt;/li&gt;
&lt;li&gt;服务网格组件（通过控制面模块和服务代理的组合实现），提供应用服务，执行策略（例如，认证和授权），并包含应用服务代码和策略作为代码。&lt;/li&gt;
&lt;li&gt;监测组件（参与确定表明应用程序健康状况的参数的模块），执行功能（例如，日志聚合、生成指标、生成仪表板的显示等）并包含作为代码的可观测性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;策略和可观测性代码类型在服务网格中的分布情况如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理组件（入口、sidecar 和出口）。这些组件容纳了与会话建立、路由、认证和授权功能有关的编码策略。&lt;/li&gt;
&lt;li&gt;服务网格的控制平面。这里面有一些代码，用于转发来自服务的遥测信息，并由代理发送至专门的监控工具，认证证书的生成和维护，更新代理机构中的策略，监控服务协调平台中的整体配置，以生成新的代理，并删除与停用的微服务相关的过时代理。&lt;/li&gt;
&lt;li&gt;外部模块。这些内部模块在应用和企业层面执行专门的功能（例如，如集中授权或权利服务器、集中记录器、通过仪表板监测 / 提醒服务器状态等），并建立一个全面的应用状态视图。这些模块由来自代理或控制平面的代码调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;42-应用程序代码和应用服务代码的-cicd-管道&#34;&gt;4.2 应用程序代码和应用服务代码的 CI/CD 管道&lt;/h2&gt;
&lt;p&gt;应用程序代码和应用服务代码驻留在容器编排和资源管理平台中，而实现与之相关的工作流程的 CI/CD 软件通常驻留在同一平台中。应使用第 4.6 节所述的步骤对该管道进行保护，该管道控制下的应用程序代码应接受第 4.8 节所述的安全测试。此外，应用程序所在的调度平台本身应使用运行时安全工具（如 &lt;a href=&#34;https://betterprogramming.pub/kubernetes-security-with-falco-2eb060d3ae7d&#34; title=&#34;Falco&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Falco&lt;/a&gt;）进行保护，该工具可以实时读取操作系统内核日志、容器日志和平台日志，并根据威胁检测规则引擎对其进行处理，以提醒用户注意恶意行为（例如，创建有特权的容器、未经授权的用户读取敏感文件等）。它们通常有一套默认（预定义）的规则，可以在上面添加自定义规则。在平台上安装它们，可以为集群中的每个节点启动代理，这些代理可以监控在该节点的各个 Pod 中运行的容器。这种类型的工具的优点是，它补充了现有平台的本地安全措施，如访问控制模型和 Pod 安全策略，通过实际检测它们的发生来 &lt;a href=&#34;https://searchitoperations.techtarget.com/tip/Terraform-cheat-sheet-Notable-commands-HCL-and-more?utm_campaign=20210726_Infrastructure&amp;#43;as&amp;#43;code&amp;#43;still&amp;#43;a&amp;#43;big&amp;#43;security&amp;#43;buzz&amp;amp;utm_medium=EM&amp;amp;utm_source=NLN&amp;amp;track=NL-1841&amp;amp;ad=939808&amp;amp;asrc=EM_NLN_172629823&#34; title=&#34;防止漏洞&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;防止漏洞&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;43-基础设施即代码的-cicd-管道&#34;&gt;4.3 基础设施即代码的 CI/CD 管道&lt;/h2&gt;
&lt;p&gt;为应用程序分配基础设施的传统方法包括最初用配置参数和持续的任务配置计算和网络资源，如补丁管理（如操作系统和库），建立符合合规法规（如数据隐私），并进行漂移（当前配置不再提供预期的操作状态）纠正。&lt;/p&gt;
&lt;p&gt;基础设施即代码（IaC）是一种声明式的代码，它对计算机指令进行编码，这些指令封装了通过服务的管理 API 在公共云服务或私有数据中心部署虚拟基础设施所需的 &lt;a href=&#34;https://searchitoperations.techtarget.com/tip/Terraform-cheat-sheet-Notable-commands-HCL-and-more?utm_campaign=20210726_Infrastructure&amp;#43;as&amp;#43;code&amp;#43;still&amp;#43;a&amp;#43;big&amp;#43;security&amp;#43;buzz&amp;amp;utm_medium=EM&amp;amp;utm_source=NLN&amp;amp;track=NL-1841&amp;amp;ad=939808&amp;amp;asrc=EM_NLN_172629823&#34; title=&#34;参数&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参数&lt;/a&gt;。换句话说，基础设施是以声明式的方式定义的，并使用用于应用程序代码的相同的源代码控制工具（如 GitOps）进行版本控制。根据特定的 IaC 工具，这种语言可以是脚本语言（如 JavaScript、Python、TypeScript 等）或专有配置语言（如 HCL），可能与标准化语言（如 JSON）兼容也可能不兼容。基本指令包括告诉系统如何配置和管理 &lt;a href=&#34;https://medium.com/4th-coffee/on-devops-8-infrastructure-as-code-introduction-best-practices-and-choosing-the-right-tool-2c8f46d1f34&#34; title=&#34;基础设施&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基础设施&lt;/a&gt;（无论是单个计算实例还是完整的服务器，如物理服务器或虚拟机）、容器、存储、网络连接、连接拓扑和负载均衡器。在某些情况下，基础设施可能是短暂的，基础设施的寿命（无论是不可变的还是可变的）不需要继续配置管理。配置可以与应用程序代码的单个提交相联系，使用的工具可以将应用程序代码和基础设施代码以一种合乎逻辑、富有表现力、为开发和运维团队所熟悉的方式连接起来，其中应用程序代码越来越多地定义了云应用的基础设施资源 &lt;a href=&#34;https://cdn2.hubspot.net/hubfs/4429525/Content/Pulumi-Delivering-CNI-as-Code.pdf&#34; title=&#34;要求&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;要求&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因此，IaC 涉及编码所有的软件部署任务（分配服务器的类型，如裸机、虚拟机或容器，服务器的资源内容）和这些服务器及其网络的配置。包含这种代码类型的软件也被称为资源管理器或部署管理器。换句话说，IaC 软件可以自动管理整个 IT 基础设施的生命周期（资源的配置和取消配置），并实现一个可编程的基础设施。将这种软件作为 CI/CD 管道的一部分进行整合，不仅可以实现敏捷的部署和维护，还可以实现安全和满足性能需求的强大应用平台。&lt;/p&gt;
&lt;h3 id=&#34;431-对-iac-的保护&#34;&gt;4.3.1 对 IaC 的保护&lt;/h3&gt;
&lt;p&gt;当基础设施是 IaC 中的代码时，它可能包括有可能成为漏洞的 bug 和疏忽，因此，就像在应用程序代码中一样被利用。因此，保护 IaC 就是保护基础设施的定义和最终的部署环境。任何一段 IaC 在进入 GitOps 并被合并之前，都必须进行潜在漏洞的扫描。&lt;/p&gt;
&lt;p&gt;此外，只有当有一个有条不紊的漂移管理过程时，才能获得安全应用平台的保证。只有当 IaC 中定义的架构是部署环境中实际存在的架构时，才能获得这种保证，因为这种等同性可能会被通过控制台或 CLI 进行的无意或有意的更改所改变，从而绕过 IaC。确保这种对等性必须在部署后立即进行，并在运行期间定期进行，因为对架构的任何改变都可能导致引入安全设计缺陷，并可能需要对 IaC 进行修改。&lt;/p&gt;
&lt;h3 id=&#34;432-配置和基础设施之间的区别&#34;&gt;4.3.2 配置和基础设施之间的区别&lt;/h3&gt;
&lt;p&gt;基础设施经常与 &lt;a href=&#34;https://cdn2.hubspot.net/hubfs/4429525/Content/Pulumi-Delivering-CNI-as-Code.pdf&#34; title=&#34;配置&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置&lt;/a&gt; 相混淆，后者将计算机系统、软件、依赖关系和设置维持在一个理想的、一致的状态。例如，将一台新购买的服务器放到机架上，并将其连接到交换机上，使其与现有网络相连（或启动一个新的虚拟机并为其分配网络接口），属于基础设施的定义。相反，在服务器启动后，安装 HTTPS 服务器并对其进行配置属于配置管理。&lt;/p&gt;
&lt;h2 id=&#34;44-策略即代码的-cicd-管道&#34;&gt;4.4 策略即代码的 CI/CD 管道&lt;/h2&gt;
&lt;p&gt;策略即代码涉及编纂所有策略，并作为 CI/CD 管道的一部分运行，使其成为应用程序运行时的一个组成部分。策略类别的例子包括授权策略、网络策略和实现工件策略（例如，容器策略）。典型的
策略即代码软件的策略管理能力可能带有一套预定义的策略类别和策略，也支持通过提供策略模板定义新的策略类别和 &lt;a href=&#34;https://www.datadoghq.com/blog/log-patterns/&#34; title=&#34;相关策略&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;相关策略&lt;/a&gt;。策略即代码所要求的尽职调查是，它应该提供保护，防止与应用环境（包括基础设施）相关的所有已知威胁，只有当该代码被定期扫描和更新，以应对与应用类别（如网络应用）和托管基础设施相关的威胁，才能确保这一点。下面的表 1 中给出了一些策略类别和相关策略的例子。&lt;/p&gt;
&lt;p&gt;表 1：策略类别和策略实例&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;策略类别&lt;/th&gt;
&lt;th&gt;策略示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;网络策略和零信任策略&lt;/td&gt;
&lt;td&gt;- 封锁指定端口 - 指定入口主机名称 - 一般来说，所有的网络访问控制策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实施工件策略（例如，容器策略）&lt;/td&gt;
&lt;td&gt;- 对服务器进行加固，对基础镜像进行漏洞扫描 - 确保容器不以 root 身份运行 - 阻止容器的权限升级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储策略&lt;/td&gt;
&lt;td&gt;- 设置持久性卷大小 - 设置持久性卷回收策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;访问控制策略&lt;/td&gt;
&lt;td&gt;- 确保策略涵盖所有数据对象 - 确保策略涵盖管理和应用访问的所有角色 - 确保数据保护策略涵盖静态数据、传输中数据和使用中数据 - 确保所有类型的策略不存在冲突&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;供应链策略&lt;/td&gt;
&lt;td&gt;- 只允许经批准的容器注册表 - 只允许经认证的库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;审计和问责策略&lt;/td&gt;
&lt;td&gt;- 确保有与审计和问责职能相关的策略&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在策略即代码软件中定义的策略可以转化为应用基础设施运行时配置参数中的以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强化策略的可执行性（例如，服务代理中的 WASM）。&lt;/li&gt;
&lt;li&gt;用于调用外部策略决策模块的触发器（例如，调用外部授权服务器，根据对与当前访问请求相关的访问控制策略的评估，做出允许 / 拒绝的决定）。&lt;/li&gt;
&lt;li&gt;它还可能影响 IaC，以确保在部署环境中提供适当的资源，以执行安全、隐私和合规要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;45-可观测性即代码的-cicd-管道&#34;&gt;4.5 可观测性即代码的 CI/CD 管道&lt;/h2&gt;
&lt;p&gt;可观测性即代码在应用程序的每个服务组件中部署一个监控代理，以收集三种类型的数据（在第 4.1 节中描述），将它们发送到专门的工具，将它们关联起来，进行分析，并在仪表板上显示分析后的综合数据，以呈现整个应用程序级别的情况。这种综合数据的一个例子是日志模式，它提供了一个日志数据的视图，该视图是在使用一些标准（例如，一个服务或一个事件）对日志数据进行过滤后呈现的。数据根据共同的模式（例如，基于时间戳或 IP 地址范围）被分组，以方便解释。不寻常的发生被识别出来，然后这些发现可以被用来指导和加速 &lt;a href=&#34;https://www.datadoghq.com/blog/log-patterns/&#34; title=&#34;进一步的调查&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;进一步的调查&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;46-确保-cicd-管道的安全&#34;&gt;4.6 确保 CI/CD 管道的安全&lt;/h2&gt;
&lt;p&gt;无论代码类型如何，CI/CD 管道都有一些共同的实施问题需要解决。确保流程安全涉及到为操作构建任务分配角色。自动化工具（例如，Git Secrets）可用于此目的。为保证 CI/CD 管道的安全，以下安全任务应被视为最低限度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强化托管代码和工件库的服务器。&lt;/li&gt;
&lt;li&gt;确保用于访问存储库的凭证，如授权令牌和生成拉动请求的凭证。&lt;/li&gt;
&lt;li&gt;控制谁可以在容器镜像注册处签入和签出，因为它们是 CI 管道产生的工件的存储处，是 CI 和 CD 管道之间的桥梁。&lt;/li&gt;
&lt;li&gt;记录所有的代码和构建更新活动。&lt;/li&gt;
&lt;li&gt;如果在 CI 管道中构建或测试失败 —— 向开发人员发送构建报告并停止进一步的管道任务。配置代码库自动阻止来自 CD 管道的所有拉取请求。&lt;/li&gt;
&lt;li&gt;如果审计失败，将构建报告发送给安全团队，并停止进一步的管道任务。&lt;/li&gt;
&lt;li&gt;确保开发人员只能访问应用程序代码，而不能访问五种管道代码类型中的任何一种。&lt;/li&gt;
&lt;li&gt;在构建和发布过程中，在每个需要的 CI/CD 阶段签署发布工件（最好是多方签署）。&lt;/li&gt;
&lt;li&gt;在生产发布期间，验证所有需要的签名（用多个阶段的密钥生成），以确保没有人绕过管道。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;47-cicd-管道中的工作流模型&#34;&gt;4.7 CI/CD 管道中的工作流模型&lt;/h2&gt;
&lt;p&gt;下一个常见问题涉及工作流模型。所有的 CI/CD 管道都可以有两种类型的工作流程模型，这取决于作为管道一部分部署的自动化工具。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于推的模式&lt;/li&gt;
&lt;li&gt;基于拉的模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在支持基于推模式的 CI/CD 工具中，在管道的一个阶段或阶段所做的改变会触发后续阶段或阶段的改变。例如，通过一系列的编码脚本，CI 系统中的新构建会触发管道中 CD 部分的变化，从而改变部署基础设施（如 Kubernetes 集群）。使用 CI 系统作为部署变化的基础，其安全方面的缺点是有可能将凭证暴露在部署环境之外，尽管已尽最大努力确保 CI 脚本的安全，因为 CI 脚本是在部署基础设施的信任域之外运行的。由于 CD 工具拥有生产系统的 key，基于推送的模式就变得不安全了。&lt;/p&gt;
&lt;p&gt;在基于拉的工作流程模型中，与部署环境有关的运维（例如 Kubernetes 运维、Flux、ArgoCD）一旦观察到有新镜像被推送到注册表，就会从环境内部拉动新镜像。新镜像被从注册表中拉出，部署清单被自动更新，新镜像被部署在环境（如集群）中。因此，实际的部署基础设施状态与 Git 部署库中声明性描述的状态实现了衔接。此外，部署环境凭证（例如集群凭证）不会暴露在生产环境之外。因此，强烈建议采用基于拉的模式，即通常使用 GitOps 仓库来存储源代码和构建。&lt;/p&gt;
&lt;h3 id=&#34;471-gitsops-的-cicd-工作流程模型--基于拉的模型&#34;&gt;4.7.1 GitsOps 的 CI/CD 工作流程模型 —— 基于拉的模型&lt;/h3&gt;
&lt;p&gt;GitOps 工作流模型是对 CI/CD 管道的改进（针对管道的交付部分），它使用了基于拉的工作流模型，而不是许多 CI/CD 工具支持的基于推的模型。在这个模型中，流水线的 CI 部分没有变化，因为 CI 引擎（如 Jenkins、GitLab CI）仍然用于为修改后的代码创建构建。&lt;/p&gt;
&lt;p&gt;回归测试，以及与相关存储库中的主要源代码集成 / 合并，尽管它不用于在管道中触发持续交付（直接推送更新）。&lt;/p&gt;
&lt;p&gt;相反，一个单独的 GitOps Operator 根据主干代码的更新来管理部署。&lt;/p&gt;
&lt;p&gt;Operator（例如，Flux、ArgoCD）是一个由协调平台管理的行为体，可以继承集群的配置、安全和可用性。使用这种行为体可以提高安全性，因为在集群内部的代理会监听它被允许访问的所有代码和镜像仓库的更新，并将镜像和配置更新拉入集群。代理使用的拉方式具有以下安全特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只执行协调平台中定义的授权策略所允许的操作；信任与集群共享，不单独管理。&lt;/li&gt;
&lt;li&gt;与所有协调平台对象进行原生绑定，并了解操作是否已经完成或需要重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;48-安全测试所有代码类型的-cicd-管道的共同要求&#34;&gt;4.8 安全测试——所有代码类型的 CI/CD 管道的共同要求&lt;/h2&gt;
&lt;p&gt;最后一个常见的问题是安全测试。无论代码类型是什么（例如，应用服务、Iac、Pac 或可观测性），基于微服务的基础设施的 DevSecOps 的 CI/CD 管道与服务网格应包括由自动化工具或作为服务提供的应用安全测试（AST）。这些工具会分析和测试应用程序的安全漏洞。根据 Gartner 的说法，有 四种 主要的 AST 技术：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静态 AST（SAST）工具：分析应用程序的源码、字节码或二进制代码的安全漏洞，通常在编程和 / 或测试软件生命周期（SLC）阶段。具体来说，这项技术涉及到在提交中查看应用程序并分析其依赖关系的 &lt;a href=&#34;https://sdtimes.com/test/a-guide-to-automated-testing-providers/&#34; title=&#34;技术&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技术&lt;/a&gt;。如果任何依赖关系包含问题或已知的安全漏洞，提交将被标记为不安全的，不允许继续部署。这也可以包括在代码中找到应该被删除的硬编码密码 / 秘密。&lt;/li&gt;
&lt;li&gt;动态 AST（DAST）工具：在测试或运行阶段，分析应用程序的动态运行状态。它们模拟针对应用程序（通常是支持网络的应用程序、服务和 API）的攻击，分析应用程序的反应，并确定它是否有漏洞。特别是，DAST 工具比 SAST 更进一步，在 CI 工作中启动生产环境的副本，以扫描所产生的容器和 &lt;a href=&#34;https://sdtimes.com/test/a-guide-to-automated-testing-providers/&#34; title=&#34;可执行文件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可执行文件&lt;/a&gt;。动态方面有助于系统捕捉在启动时正在加载的依赖关系，例如那些不会被 SAST 捕捉的依赖关系。&lt;/li&gt;
&lt;li&gt;交互式 AST（IAST）工具：将 DAST 的元素与被测试的应用程序的仪器相结合。它们通常作为测试运行环境中的一个代理来实现（例如，对 Java 虚拟机或.NET CLR 进行检测），观察操作或识别攻击漏洞。&lt;/li&gt;
&lt;li&gt;软件组成分析（SCA）工具：用于识别应用程序中使用的开源和第三方组件、其已知的安全漏洞以及典型的对抗性许可限制。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;481-ast-工具的功能和覆盖要求&#34;&gt;4.8.1 AST 工具的功能和覆盖要求&lt;/h3&gt;
&lt;p&gt;一般来说，测试工具（包括特定类别的 AST 工具）应该满足的总体指标是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过识别安全、隐私和合规性方面的差距，提高应用程序的发布质量。&lt;/li&gt;
&lt;li&gt;与开发人员已经在使用的工具整合。&lt;/li&gt;
&lt;li&gt;要尽可能少的测试工具，但提供必要的风险覆盖。&lt;/li&gt;
&lt;li&gt;API 和微服务层面的低级单元测试应该有足够的可视性来确定覆盖率。&lt;/li&gt;
&lt;li&gt;包括更高层次的 UI/UX 和系统测试。&lt;/li&gt;
&lt;li&gt;具备深入的代码分析能力，以检测运行时的缺陷。&lt;/li&gt;
&lt;li&gt;提高发布的速度。&lt;/li&gt;
&lt;li&gt;要有成本效益。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特别是对 AST 工具的功能要求包括进行以下类型的扫描：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;漏洞扫描。探测应用程序的安全弱点，这些弱点可能会使它们受到攻击。&lt;/li&gt;
&lt;li&gt;容器镜像扫描。分析容器镜像的内容和构建过程，以检测安全问题、漏洞或缺陷做法（例如，硬编码密码 / 秘密）。&lt;/li&gt;
&lt;li&gt;监管 / 合规性扫描。评估对特定合规要求的遵守情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每当源代码库中的代码被修改时，都要进行漏洞扫描，以确保当前的修订版不包含任何有漏洞的 &lt;a href=&#34;https://circleci.com/blog/security-best-practices-for-ci-cd/&#34; title=&#34;依赖&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;依赖&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;AST 工具和 / 或服务的理想特征，以及行为分析的技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析源码、字节码或二进制代码&lt;/li&gt;
&lt;li&gt;观察应用程序的行为，以确定引入安全漏洞的编码、设计、打包、部署和运行时条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为 CI/CD 管道任务的一部分，扫描应用程序代码的安全漏洞和错误配置应涉及以下工件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器镜像应被扫描以发现漏洞。&lt;/li&gt;
&lt;li&gt;在容器从基础镜像（如上所述进行扫描）构建之后，应该对容器的文件系统进行漏洞和错误配置的扫描。&lt;/li&gt;
&lt;li&gt;应该对 Git 存储库（包含应用程序源代码）进行扫描，以发现漏洞和错误配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器镜像包括操作系统包（如 Alpine、UBI、RHEL、CentOS 等）和特定语言包（如 Bundler、Composer、npm、yarn 等）。&lt;/p&gt;
&lt;p&gt;对基础设施即代码进行安全漏洞扫描，通过防止这些漏洞进入生产，减少了操作工作量，尽管它不能取代对运行时安全的检查，因为漂移的风险始终存在。然而，必须对架构的所有部署后（运行时）变化（由于漂移）的原因进行分析，并通过向 IaC 推送适当的更新来解决，从而使其成为管道的一部分，并在后续部署中不再出现。这种方法有利于使用运行时检查来补救安全设计缺陷。&lt;/p&gt;
&lt;p&gt;基础设施即代码的文件可以在下面找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器编排平台本身，以促进部署（例如，Kubernetes YAML 基础设施即代码文件）。&lt;/li&gt;
&lt;li&gt;作为 CI/CD 管道软件的一部分而发现的专用基础设施即代码文件（例如，HashiCorp Terraform 基础设施即代码文件，AWS CloudFormation 基础设施即代码文件）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用服务代码、策略即代码和可观测性即代码文件可以在专门的应用服务组件（如服务网格）的数据平面和控制平面组件中找到，并且应该对安全漏洞（如授权策略的信息泄露）和错误配置进行扫描。&lt;/p&gt;
&lt;h2 id=&#34;49-devsecops-原语对服务网格中应用安全的好处&#34;&gt;4.9 DevSecOps 原语对服务网格中应用安全的好处&lt;/h2&gt;
&lt;p&gt;DevSecOps 的好处包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个 IT 团队之间，特别是开发人员、运维和安全团队以及其他利益相关者之间更好的沟通和协作。导致 &lt;a href=&#34;https://whatis.techtarget.com/feature/Top-30-DevOps-interview-questions-and-answers?utm_campaign=20210712_New&amp;#43;Kubernetes&amp;#43;use&amp;#43;case%253A&amp;#43;Hacking&amp;amp;utm_medium=EM&amp;amp;utm_source=NLN&amp;amp;track=NL-1841&amp;amp;ad=939635&amp;amp;asrc=EM_NLN_170130891&#34; title=&#34;更好的生产力&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更好的生产力&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;简化软件开发、交付和部署过程 —— 由于自动化，停机时间减少，发布时间加快，基础设施和运维成本降低，效率提高。&lt;/li&gt;
&lt;li&gt;通过实施零信任来减少攻击面，这也限制了横向移动，从而防止攻击升级。具有现代行为预防能力的持续监控进一步促进了这一点。&lt;/li&gt;
&lt;li&gt;安全优势。通过对每个请求的验证监控、警报和反馈机制来提高安全性，因为可观测性是代码。这些将在以下段落中详细描述。具体的能力包括：
&lt;ul&gt;
&lt;li&gt;a.  运行时：杀死恶意容器。&lt;/li&gt;
&lt;li&gt;b.  反馈：由于一个错误的程序更新了代码并重新触发了管道，所以反馈到了正确的存储库。&lt;/li&gt;
&lt;li&gt;c.  监测新的和终止的服务，并调整相关服务（如服务代理）。&lt;/li&gt;
&lt;li&gt;d.  启用安全断言。不可绕过 —— 通过在同一空间执行的代理、安全会话、强大的认证和授权以及安全的状态转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启用持续授权操作（C-ATO），在本节末尾详细描述。
对每个请求的验证和上述的反馈机制将在下面进一步描述：&lt;/li&gt;
&lt;li&gt;每个请求的验证。来自用户或客户端应用程序（服务）的每个请求都要经过验证和授权（使用 OPA 或任何外部授权引擎或 &lt;a href=&#34;https://medium.com/cloudlego/kubernetes-admission-controllers-request-interceptors-47a9b12c5303&#34; title=&#34;接纳控制器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;接纳控制器&lt;/a&gt; 等机制，它们是平台的组成部分）。授权引擎提供特定于应用域的策略执行，而接纳控制器则提供与特定平台的端点对象（如 Pod、部署、命名空间）相关的平台特定策略。具体来说，接纳控制器会进行突变和验证。突变的接纳控制器解析每个请求，并在将其向下转发之前对请求进行修改（突变）。一个例子是为没有被用户在请求中设置的规格设置默认值，以确保在集群上运行的工作负载是统一的，并遵循集群管理员定义的特定标准。另一个例子是为 Pod 添加特定的资源限制（如果资源限制没有为该 Pod 设置），然后向下转发（如果请求中没有这个字段，通过添加这个字段来突变请求）。通过这样做，集群中的所有 Pod 将始终有一个根据规范设置的资源限制，除非明确说明。验证接纳控制器会拒绝那些不遵循特定规范的请求。例如，没有一个 Pod 请求可以将安全上下文设置为以根用户身份运行。&lt;/li&gt;
&lt;li&gt;反馈机制：
&lt;ul&gt;
&lt;li&gt;一些在运行时发现的问题的补救措施可能需要在源代码中处理或修复。应该有一个流程，针对正确的代码库自动打开一个问题，以修复问题并重新触发 DevSecOps 管道。&lt;/li&gt;
&lt;li&gt;向应用程序托管平台提供反馈回路（例如，杀死包含恶意容器的 Pod 的通知）。&lt;/li&gt;
&lt;li&gt;通过监控应用程序的配置，提供主动的动态安全（例如，监控引入到应用程序的新荚 / 容器，并生成和注入代理以照顾其安全通信需求）。&lt;/li&gt;
&lt;li&gt;启用关于应用程序的几个安全断言：不可绕过（即在所有使用场景下始终执行的策略）、整个应用程序代码的受信任和不受信任部分、没有凭证和特权泄漏、受信任的通信路径和安全状态转换。&lt;/li&gt;
&lt;li&gt;启用关于性能参数的断言（例如，网络弹性参数，如在故障、冗余和可恢复性功能下继续运行）。&lt;/li&gt;
&lt;li&gt;总的来说，更快地吸收反馈意见，使软件得到更快的改进。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>第五章：摘要和结论</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/summary-and-conclusion/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/summary-and-conclusion/</guid>
      <description>
        
        
        &lt;p&gt;本文为托管云原生应用的参考平台实施 DevSecOps 原语提供全面指导。它包括对参考平台的概述，并描述了基本的 DevSecOps 原语（即 CI/CD 管道）、其构建模块、管道的设计和执行，以及自动化在 CI/CD 管道中有效执行工作流程的作用。&lt;/p&gt;
&lt;p&gt;参考平台的架构除了应用代码和提供应用服务的代码外还包括用于基础设施、运行时策略和持续监测应用健康状况的功能元素，可以通过具有独立 CI/CD 管道类型的声明性代码来部署。还介绍了这些代码的运行时行为、实现高安全性的好处，以及使用风险管理工具和仪表盘指标的管道内的工件来提供持续授权操作（C-ATO）。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>利用服务网格为基于微服务的应用程序实施 DevSecOps</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/service-mesh-devsecops/</guid>
      <description>
        
        
        &lt;p&gt;本书译自美国国家标准标准与技术研究院（NIST）Special Publication 800-204C。&lt;/p&gt;
&lt;h2 id=&#34;本书大纲&#34;&gt;本书大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/preface/&#34;&gt;声明&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/executive-summary/&#34;&gt;执行摘要&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/intro/&#34;&gt;第一章：简介&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/reference-platform/&#34;&gt;第二章：实施 DevSecOps 原语的参考平台&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/&#34;&gt;第三章：DevSecOps 组织准备、关键基本要素和实施&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/&#34;&gt;第四章：为参考平台实施 DevSecOps 原语&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/summary-and-conclusion/&#34;&gt;第五章：摘要和结论&lt;/a&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作者：Ramaswamy Chandramouli&lt;/li&gt;
&lt;li&gt;计算机安全司信息技术实验室&lt;/li&gt;
&lt;li&gt;美国商务部&lt;/li&gt;
&lt;li&gt;Gina M. Raimondo，秘书&lt;/li&gt;
&lt;li&gt;国家标准和技术研究所&lt;/li&gt;
&lt;li&gt;James K. Olthoff，履行负责标准和技术的商务部副部长兼国家标准和技术研究所所长的非专属职能和职责&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本出版物可在：&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-204C&#34; title=&#34;https://doi.org/10.6028/NIST.SP.800-204C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.6028/NIST.SP.800-204C&lt;/a&gt; 免费获取。&lt;/p&gt;
&lt;div class=&#34;cta-group&#34;&gt;
  
    &lt;a href=&#34;preface&#34;  class=&#34;btn btn-sm btn-primary&#34;&gt;开始阅读&lt;/a&gt;
  
  
&lt;/dv&gt;


      </description>
    </item>
    
  </channel>
</rss>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Kubernetes</title>
    <link>https://jimmysong.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Mon, 28 Oct 2024 15:29:39 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>集群联邦（Cluster Federation）</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/federation/</link>
      <pubDate>Tue, 17 Jan 2023 10:40:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/federation/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    &lt;a href=&#34;https://github.com/kubernetes-sigs/kubefed&#34; title=&#34;Kubefed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubefed&lt;/a&gt; 项目计划归档，详见 &lt;a href=&#34;https://groups.google.com/g/kubernetes-sig-multicluster/c/lciAVj-_ShE?pli=1&#34; title=&#34;Fellow-up: discussion on archiving Kubefed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fellow-up: discussion on archiving Kubefed&lt;/a&gt;。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Kubernetes 从 1.8 版本起就声称单集群最多可支持 5000 个节点和 15 万个 Pod，我相信很少有公司会部署如此庞大的一个单集群，总有很多情况下因为各种各样的原因我们可能会部署多个集群，但是有时候有想将他们统一起来管理，这时候就需要用到集群联邦（Federation）。&lt;/p&gt;
&lt;h2 id=&#34;为什么要使用集群联邦&#34;&gt;为什么要使用集群联邦&lt;/h2&gt;
&lt;p&gt;Federation 使管理多个集群变得简单。它通过提供两个主要构建模块来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨集群同步资源：Federation 提供了在多个集群中保持资源同步的能力。例如，可以保证同一个 deployment 在多个集群中存在。&lt;/li&gt;
&lt;li&gt;跨集群服务发现：Federation 提供了自动配置 DNS 服务以及在所有集群后端上进行负载均衡的能力。例如，可以提供一个全局 VIP 或者 DNS 记录，通过它可以访问多个集群后端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Federation 还可以提供一些其它用例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高可用：通过在集群间分布负载并自动配置 DNS 服务和负载均衡，federation 最大限度地减少集群故障的影响。&lt;/li&gt;
&lt;li&gt;避免厂商锁定：通过更简单的跨集群应用迁移方式，federation 可以防止集群厂商锁定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Federation 对于单个集群没有用处。基于下面这些原因你可能会需要多个集群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低延迟：通过在多个区域部署集群可以最大限度减少区域近端用户的延迟。&lt;/li&gt;
&lt;li&gt;故障隔离：拥有多个小集群可能比单个大集群更利于故障隔离（例如：在云服务提供商的不同可用区中的多个集群）。&lt;/li&gt;
&lt;li&gt;可伸缩性：单个集群有可伸缩性限制（对于大多数用户这不是典型场景。更多细节请参考 &lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-scalability/goals.md&#34; title=&#34;Kubernetes 弹性伸缩与性能目标&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 弹性伸缩与性能目标&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;混合云：你可以在不同的云服务提供商或本地数据中心中拥有多个集群。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;警告&#34;&gt;警告&lt;/h3&gt;
&lt;p&gt;虽然 federation 有很多吸引人的使用案例，但也有一些注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加网络带宽和成本：federation 控制平面监控所有集群以确保当前状态符合预期。如果集群在云服务提供商的不同区域或者不同的云服务提供商上运行时，这将导致明显的网络成本增加。&lt;/li&gt;
&lt;li&gt;减少跨集群隔离：federation 控制平面中的 bug 可能影响所有集群。通过在 federation 中实现最少的逻辑可以缓解这种情况。只要有可能，它就将尽力把工作委托给 kubernetes 集群中的控制平面。这种设计和实现在安全性及避免多集群停止运行上也是错误的。&lt;/li&gt;
&lt;li&gt;成熟度：federation 项目相对比较新，还不是很成熟。并不是所有资源都可用，许多仍然处于 alpha 状态。 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/88&#34; title=&#34;Issue 88&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Issue 88&lt;/a&gt; 列举了团队目前正忙于解决的与系统相关的已知问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;混合云能力&#34;&gt;混合云能力&lt;/h3&gt;
&lt;p&gt;Kubernetes 集群 federation 可以包含运行在不同云服务提供商（例如 Google Cloud、AWS）及本地（例如在 OpenStack 上）的集群。你只需要按需在适合的云服务提供商和 / 或地点上简单的创建集群，然后向 Federation API Server 注册每个集群的 API endpoint 和凭据即可。&lt;/p&gt;
&lt;p&gt;此后，你的 API 资源就可以跨越不同的集群和云服务提供商。&lt;/p&gt;
&lt;h2 id=&#34;单个集群范围&#34;&gt;单个集群范围&lt;/h2&gt;
&lt;p&gt;在诸如 Google Compute Engine 或者 Amazon Web Services 等 IaaS 服务提供商中，虚拟机存在于 &lt;a href=&#34;https://cloud.google.com/compute/docs/zones&#34; title=&#34;区域（Zone）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;区域（Zone）&lt;/a&gt; 或 &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html&#34; title=&#34;可用区（Availability Zone）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可用区（Availability Zone）&lt;/a&gt; 上。我们建议 Kubernetes 集群中的所有虚拟机应该位于相同的可用区，因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与拥有单个全局 Kubernetes 集群相比，单点故障更少。&lt;/li&gt;
&lt;li&gt;与跨可用区集群相比，推测单区域集群的可用性属性更容易。&lt;/li&gt;
&lt;li&gt;当 Kubernetes 开发人员设计系统时（例如对延迟，带宽或相关故障进行假设），它们假设所有的机器都在一个单一的数据中心，或以其它方式紧密连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在每个可用区域同时拥有多个集群也是可以的，但总体而言，我们认为少一点更好。选择较少集群的理由是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某些情况下，在一个集群中拥有更多的节点可以改进 Pod 的装箱打包（较少资源碎片）。&lt;/li&gt;
&lt;li&gt;减少运维开销（尽管随着运维工具和流程的成熟，优势已经减少）。&lt;/li&gt;
&lt;li&gt;减少每个集群固定资源成本的开销，例如 apiserver 虚拟机（但对于大中型集群的整体集群成本来说百分比很小）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拥有多个集群的原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;严格的安全策略要求将一类工作与另一类工作隔离开来（但是，请参见下面的分区集群（Partitioning Clusters））。&lt;/li&gt;
&lt;li&gt;对新的 Kubernetes 发行版或其它集群软件进行灰度测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;选择正确的集群数量&#34;&gt;选择正确的集群数量&lt;/h2&gt;
&lt;p&gt;Kubernetes 集群数量的选择可能是一个相对静态的选择，只是偶尔重新设置。相比之下，依据负载情况和增长，集群的节点数量和 service 的 pod 数量可能会经常变化。&lt;/p&gt;
&lt;p&gt;要选择集群的数量，首先要确定使用哪些区域，以便为所有终端用户提供足够低的延迟，以在 Kubernetes 上运行服务，如果你使用内容分发网络（Content Distribution Network，CDN），则 CDN 托管内容的时延要求不需要考虑。法律问题也可能影响到这一点。例如，拥有全球客户群的公司可能会决定在美国、欧盟、亚太和南亚地区拥有集群。我们将选择的区域数量称为 &lt;code&gt;R&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其次，决定在整体仍然可用的前提下，可以同时有多少集群不可用。将不可用集群的数量称为 &lt;code&gt;U&lt;/code&gt;。如果你不能确定，那么 1 是一个不错的选择。&lt;/p&gt;
&lt;p&gt;如果在集群故障的情形下允许负载均衡将流量引导到任何区域，则至少需要有比 &lt;code&gt;R&lt;/code&gt; 或 &lt;code&gt;U + 1&lt;/code&gt; 数量更大的集群。如果不行的话（例如希望在集群发生故障时对所有用户确保低延迟），那么你需要有数量为 &lt;code&gt;R * (U + 1)&lt;/code&gt; 的集群（&lt;code&gt;R&lt;/code&gt; 个区域，每个中有 &lt;code&gt;U + 1&lt;/code&gt; 个集群）。无论如何，请尝试将每个集群放在不同的区域中。&lt;/p&gt;
&lt;p&gt;最后，如果你的任何集群需要比 Kubernetes 集群最大建议节点数更多的节点，那么你可能需要更多的集群。Kubernetes v1.3 支持最多 1000 个节点的集群。Kubernetes v1.8 支持最多 5000 个节点的集群。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-集群联邦的演进&#34;&gt;Kubernetes 集群联邦的演进&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2018/12/12/kubernetes-federation-evolution/&#34; title=&#34;Kubernetes 官方博客的文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 官方博客的文章&lt;/a&gt;中介绍了 Kubernetes 集群联邦的演进，该项目是在 SIG Multicluster 中进行的，Federation 是 Kubernetes 的一个子项目，社区对这个项目的兴趣很浓，该项目最初重用 Kubernetes API，以消除现有 Kubernetes 用户的任何附加使用复杂性。但由于以下原因，此方式行不通：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在集群层面重新实施 Kubernetes API 的困难，因为 Federation 的特定扩展存储在注释中。&lt;/li&gt;
&lt;li&gt;由于 Kubernetes API 的 1:1 仿真，Federation 类型、放置（placement）和调节（reconciliation）的灵活性有限。&lt;/li&gt;
&lt;li&gt;没有固定的 GA 路径，API 成熟度普遍混乱；例如，Deployment 在 Kubernetes 中是 GA，但在 Federation v1 中甚至不是 Beta。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着 Federation 特定的 API 架构和社区的努力，这些想法有了进一步的发展，改进为 Federation v2。请注意，Federation V1 版本已经归档不再维护和更新，且官方也不再推荐继续使用。如果需要了解更多的 Federation 资料，请参考：&lt;a href=&#34;https://github.com/kubernetes-sigs/kubefed&#34; title=&#34;Kubernetes Federation v2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Federation v2&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面将带你了解 Federation v2 背后的考量。&lt;/p&gt;
&lt;h3 id=&#34;将任意资源联合起来&#34;&gt;将任意资源联合起来&lt;/h3&gt;
&lt;p&gt;联邦的主要目标之一是能够定义 API 和 API 组，其中包含联邦任何给定 Kubernetes 资源所需的基本原则。这是至关重要的，因为 CRD 已经成为扩展 Kubernetes API 的一种主流方式。&lt;/p&gt;
&lt;p&gt;Multicluster SIG 得出了 Federation API 和 API 组的共同定义，即 &amp;ldquo;一种将&lt;code&gt;规范的&lt;/code&gt; Kubernetes API 资源分配到不同集群的机制&amp;rdquo;。最简单的分布形式可以想象为这种&amp;rsquo;规范的 Kubernetes API 资源&amp;rsquo;在联邦集群中的简单传播。除了这种简单的 Kubernetes 资源传播之外，有心的读者当然可以看出更复杂的机制。&lt;/p&gt;
&lt;p&gt;在定义 Federation API 的构建模块的历程中，最早期的目标也演化为 &amp;ldquo;能够创建一个简单的联邦，也就是任何 Kubernetes 资源或 CRD 的简单传播，几乎不需要编写代码&amp;rdquo;。随后，核心 API 组进一步定义了构件，即每个给定的 Kubernetes 资源有一个 &lt;code&gt;Template&lt;/code&gt; 资源、一个 &lt;code&gt;Placement&lt;/code&gt; 资源和一个 &lt;code&gt;Override&lt;/code&gt; 资源，一个 &lt;code&gt;TypeConfig&lt;/code&gt; 来指定给定资源的同步或不同步，以及执行同步的相关控制器。更多细节将在后文中介绍。进一步的章节还将谈到能够遵循分层行为，更高级别的 Federation API 消耗这些核心构件的行为，而用户能够消耗整个或部分 API 和相关控制器。最后，这种架构还允许用户编写额外的控制器或用自己的控制器替换现有的参考控制器（reference controller），以执行所需的行为。&lt;/p&gt;
&lt;p&gt;能够 &amp;ldquo;轻松地联合任意 Kubernetes 资源&amp;rdquo;，以及一个解耦的 API，分为构件 API、更高层次的 API 和可能的用户预期类型，这样的呈现方式使得不同的用户可以消费部分和编写控制器组成特定的解决方案，这为 Federation v2 提供了一个令人信服的案例。&lt;/p&gt;
&lt;h3 id=&#34;联邦服务与跨集群服务发现&#34;&gt;联邦服务与跨集群服务发现&lt;/h3&gt;
&lt;p&gt;Kubernetes 服务在构建微服务架构时非常有用。人们明显希望跨越集群、可用区、区域和云的边界来部署服务。跨集群的服务提供了地理分布，实现了混合和多云场景，并提高了超越单一集群部署的高可用性水平。希望其服务跨越一个或多个（可能是远程）集群的客户，需要在集群内外以一致的方式提供服务。&lt;/p&gt;
&lt;p&gt;Federated Service 的核心是包含一个 Template（Kubernetes 服务的定义）、一个 Placement（部署到哪个集群）、一个 Override（在特定集群中的可选变化）和一个 ServiceDNSRecord（指定如何发现它的细节）。&lt;/p&gt;
&lt;p&gt;注意：联邦服务必须是 LoadBalancer 类型，以便它可以跨集群发现。&lt;/p&gt;
&lt;h3 id=&#34;pod-如何发现联邦服务&#34;&gt;Pod 如何发现联邦服务&lt;/h3&gt;
&lt;p&gt;默认情况下，Kubernetes 集群预先配置了集群本地 DNS 服务器，以及智能构建的 DNS 搜索路径，它们共同确保了由 pod 内部运行的软件发出的 myservice、&lt;code&gt;myservice.mynamespace &lt;/code&gt;或 &lt;code&gt;some-other-service.other-namespace&lt;/code&gt; 等 DNS 查询会自动扩展并正确解析到本地集群中运行的服务的相应 IP。&lt;/p&gt;
&lt;p&gt;随着联邦服务和跨集群服务发现的引入，这个概念被扩展到全局覆盖在你的集群联邦中所有集群中运行的 Kubernetes 服务。为了利用这个扩展的范围，我们需要使用一个稍微不同的 DNS 名称（例如 &lt;code&gt;myservice.mynamespace.myfederation&lt;/code&gt;）来解析联邦服务。使用不同的 DNS 名还可以避免现有的应用意外地穿越区域网络而会产生不必要的网络费用或延迟。&lt;/p&gt;
&lt;p&gt;让我们看一个例子，使用一个名为 nginx 的服务。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;us-central1-a&lt;/code&gt; 可用区的集群中的一个 pod 需要联系我们的 nginx 服务。它现在可以使用服务的联邦 DNS 名，即 &lt;code&gt;nginx.mynamespace.myfederation&lt;/code&gt; ，而不是使用服务的传统集群本地 DNS 名（即  &lt;code&gt;nginx.mynamespace&lt;/code&gt; 自动扩展为 &lt;code&gt;nginx.mynamespace.svc.cluster.local&lt;/code&gt;）。这将被自动扩展并解析到离我的 nginx 服务最近的健康 shard。如果本地集群中存在一个健康的 shard，那么该服务的集群本地 IP 地址将被返回（通过集群本地 DNS）。这完全等同于非联邦服务解析。&lt;/p&gt;
&lt;p&gt;如果服务在本地集群中不存在（或者存在但没有健康的后端 pod），DNS 查询会自动扩展到 &lt;code&gt;nginx.mynamespace.myfederation.svc.us-central1-a.example.com&lt;/code&gt;。在幕后，这可以找到离我们的可用区最近的一个 shard 的外部 IP。这个扩展是由集群本地 DNS 服务器自动执行的，它返回相关的 CNAME 记录。这就导致了对 DNS 记录的层次结构的遍历，并最终找到附近联邦服务的一个外部 IP。&lt;/p&gt;
&lt;p&gt;也可以通过明确指定适当的 DNS 名称，而不是依赖自动的 DNS 扩展，将目标锁定在 pod 本地以外的可用性区域和地区的服务 shard。例如，&lt;code&gt;nginx.mynamespace.myfederation.svc.europe-west1.example.com&lt;/code&gt; 将解析到欧洲所有当前健康的服务 shard，即使发布查询的 pod 位于美国，也不管美国是否有健康的服务 shard，这对远程监控和其他类似的应用很有用。&lt;/p&gt;
&lt;h3 id=&#34;从联邦集群之外的其他客户端发现联邦服务&#34;&gt;从联邦集群之外的其他客户端发现联邦服务&lt;/h3&gt;
&lt;p&gt;对于外部客户端，目前还不能实现所述自动 DNS 扩展。外部客户需要指定联邦服务的一个完全限定的 DNS 名称，无论是区域、可用区还是全局名称。为了方便起见，通常情况下，在服务中手动配置额外的静态 CNAME 记录是一个好主意，例如：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;短名称&lt;/th&gt;
          &lt;th&gt;CNAME&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;eu.nginx.acme.com&lt;/td&gt;
          &lt;td&gt;nginx.mynamespace.myfederation.svc.europe-west1.example.com&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;us.nginx.acme.com&lt;/td&gt;
          &lt;td&gt;nginx.mynamespace.myfederation.svc.us-central1.example.com&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;nginx.acme.com&lt;/td&gt;
          &lt;td&gt;nginx.mynamespace.myfederation.svc.example.com&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这样一来，你的客户就可以始终使用左边的短名称，并始终自动路由到离他们位置最近的健康 shard。所有所需的故障转移都由 Kubernetes 集群联邦为你自动处理。&lt;/p&gt;
&lt;h2 id=&#34;架构概览&#34;&gt;架构概览&lt;/h2&gt;
&lt;p&gt;Kubernetes Cluster Federation 又名 KubeFed 或 Federation v2，v2 架构在 Federation v1 基础之上，简化扩展 Federated API 过程，并加强跨集群服务发现与编排的功能。另外 KubeFed 在设计之初，有两个最重要核心理念是 KubeFed 希望实现的，分别为 Modularization（模块化）与 Customizable (定制化)，这两个理念大概是希望 KubeFed 能够跟随着 Kubernetes 生态发展，并持续保持相容性与扩展性。&lt;/p&gt;
&lt;p&gt;由于 Federation 试图解决一系列复杂的问题，因此需要将这些问题的不同部分分解开来。Federation 中涉及的概念和架构图如下所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/federation/federation-concepts.webp&#34; data-img=&#34;/book/kubernetes-handbook/multi-cluster/federation/federation-concepts.webp&#34; data-width=&#34;960&#34; data-height=&#34;720&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 集群联邦架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes 集群联邦架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;上图中展示了集群联邦的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置需要联邦的集群&lt;/li&gt;
&lt;li&gt;配置需要在集群中传播的 API 资源&lt;/li&gt;
&lt;li&gt;配置 API 资源如何分配到不同的集群&lt;/li&gt;
&lt;li&gt;对集群中 DNS 记录注册&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相较于 v1，v2 在组件上最大改变是将 API Server 移除，并通过 CRD 机制来完成 Federated Resources 的扩充。而 KubeFed Controller 则管理这些 CRD，并实现同步资源、跨集群编排等功能。&lt;/p&gt;
&lt;p&gt;目前 KubeFed 通过 CRD 方式新增了四种 API 群组来实现联邦机制的核心功能：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;API Group&lt;/th&gt;
          &lt;th&gt;用途&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;core.kubefed.k8s.io&lt;/td&gt;
          &lt;td&gt;集群组态、联邦资源组态、KubeFed Controller 设定档等。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;types.kubefed.k8s.io&lt;/td&gt;
          &lt;td&gt;被联邦的 Kubernetes API 资源。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;scheduling.kubefed.k8s.io&lt;/td&gt;
          &lt;td&gt;副本编排策略。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;multiclusterdns.kubefed.k8s.io&lt;/td&gt;
          &lt;td&gt;跨集群服务发现设定。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在这些核心功能中，我们必须先了解一些 KebeFed 提出的基础概念后，才能更清楚知道 KubeFed 是如何运作的。&lt;/p&gt;
&lt;h3 id=&#34;cluster-configuration&#34;&gt;Cluster Configuration&lt;/h3&gt;
&lt;p&gt;用来定义哪些 Kubernetes 集群要被联邦。可通过 kubefedctl join/unjoin 来加入/删除集群，当成功加入时，会建立一个 KubeFedCluster 组件来储存集群相关信息，如 API Endpoint、CA Bundle 等。这些信息会被用在 KubeFed Controller 存取不同 Kubernetes 集群上，以确保能够建立 Kubernetes API 资源，示意图如下所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/federation/sync-controller.webp&#34; data-img=&#34;/book/kubernetes-handbook/multi-cluster/federation/sync-controller.webp&#34; data-width=&#34;4199&#34; data-height=&#34;2474&#34; alt=&#34;image&#34; data-caption=&#34;KubeFed 基础架构&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;KubeFed 基础架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;在 Federation 中，会区分 Host 与 Member 两种类型集群。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host : 用于提供 KubeFed API 与控制平面的集群。&lt;/li&gt;
&lt;li&gt;Member : 通过 KubeFed API 注册的集群，并提供相关身份凭证来让 KubeFed Controller 能够存取集群。Host 集群也可以作为 Member 被加入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;type-configuration&#34;&gt;Type Configuration&lt;/h3&gt;
&lt;p&gt;定义了哪些 Kubernetes API 资源要被用于联邦管理。比如说想将 ConfigMap 资源通过联邦机制建立在不同集群上时，就必须先在 Federation Host 集群中，通过 CRD 建立新资源 FederatedConfigMap，接着再建立名称为 configmaps 的 Type configuration（FederatedTypeConfig）资源，然后描述 ConfigMap 要被 FederatedConfigMap 所管理，这样 KubeFed Controllers 才能知道如何建立 Federated 资源。以下为简单范例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.kubefed.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FederatedTypeConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;configmaps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-federation-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;federatedType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;types.kubefed.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FederatedConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pluralName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;federatedconfigmaps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Namespaced&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;propagation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Enabled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pluralName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;configmaps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Namespaced&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若想新增 CRD 的 Federated API 的话，可通过 &lt;code&gt;kubefedctl enable &amp;lt;res&amp;gt;&lt;/code&gt; 指令来建立，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubefedctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; etcdclusters
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl api-resources &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep etcd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;etcdclusters                      etcd         etcd.database.coreos.com         &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         EtcdCluster
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;federatedetcdclusters             fetcd        types.kubefed.k8s.io             &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         FederatedEtcdCluster
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl -n kube-federation-system get federatedtypeconfigs &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep etcd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;etcdclusters.etcd.database.coreos.com    3m16s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而一个 Federated 资源一般都会具备三个主要功能，这些信息能够在 spec 中由使用者自行定义，如下范例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;types.kubefed.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FederatedDeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义 Deployment 的所有內容，可理解成 Deployment 与 Pod 之间的关联。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;placement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;overrides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;clusterName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusterOverrides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.replicas&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Placement：定义 Federated 资源要分散到哪些集群上，若没有该文件，则不会分散到任何集群中。如 FederatedDeployment 中的 &lt;code&gt;spec.placement&lt;/code&gt; 定义了两个集群时，这些集群将被同步建立相同的 Deployment。另外也支持用 &lt;code&gt;spec.placement.clusterSelector&lt;/code&gt; 的方式来选择要放置的集群。&lt;/li&gt;
&lt;li&gt;Override：定义修改指定集群的 Federated 资源中的 &lt;code&gt;spec.template&lt;/code&gt; 内容。如部署 FederatedDeployment 到不同公有云上的集群时，就能通过 &lt;code&gt;spec.overrides&lt;/code&gt; 来调整 Volume 或副本数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：目前 Override 不支持 List（Array）。比如说无法修改 &lt;code&gt;spec.template.spec.containers [0].image&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;scheduling&#34;&gt;Scheduling&lt;/h3&gt;
&lt;p&gt;KubeFed 提供了一种自动化机制来将工作负载实例分散到不同的集群中，这能够基于总副本数与集群的定义策略来将 Deployment 或 ReplicaSet 资源进行编排。编排策略是通过建立 &lt;code&gt;ReplicaSchedulingPreference&lt;/code&gt;（RSP）文件，再由 KubeFed RSP Controller 监听与撷取 RSP 内容来将工作负载实例建立到指定的集群上。这是基于用户给出的高级用户偏好。这些偏好包括加权分布的语义和分布副本的限制（最小和最大）。这些还包括允许动态重新分配副本的语义，以防某些副本 Pod 仍然没有被调度到某些集群上，例如由于该集群资源不足。更多细节可以在 &lt;a href=&#34;https://github.com/kubernetes-sigs/kubefed/blob/master/docs/userguide.md#replicaschedulingpreference&#34; title=&#34;ReplicaSchedulingPreferences 的用户指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ReplicaSchedulingPreferences&lt;/code&gt; 的用户指南&lt;/a&gt;中找到。&lt;/p&gt;
&lt;p&gt;以下为一个 RSP 范例。假设有三个集群被联邦，名称分别为 ap-northeast、us-east 与 us-west。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;scheduling.kubefed.k8s.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ReplicaSchedulingPreference&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-ns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetKind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FederatedDeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;totalReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ap-northeast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;minReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该配置示意图如下所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/federation/kubefed-rsp.webp&#34; data-img=&#34;/book/kubernetes-handbook/multi-cluster/federation/kubefed-rsp.webp&#34; data-width=&#34;1707&#34; data-height=&#34;948&#34; alt=&#34;image&#34; data-caption=&#34;RSP&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;RSP&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当该范例建立后，RSP Controller 会收到资源，并匹配对应 namespace/name 的 FederatedDeployment 与 FederatedReplicaSet 是否存在，若存在的话，会根据设定的策略计算出每个集群预期的副本数，之后覆写 Federated 资源中的 &lt;code&gt;spec.overrides&lt;/code&gt; 内容以修改每个集群的副本数，最后再由 KubeFed Sync Controller 来同步至每个集群的 Deployment。以上面为例，结果会是 ap-northeast 集群会拥有 3 个 Pod，us-east 跟 us-west 则分别会有 6 个 Pod。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;code&gt;spec.clusters&lt;/code&gt; 未定义的话，则预设为 &lt;code&gt;{“*”:{Weight: 1}}&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;若有定义 &lt;code&gt;spec.replicas&lt;/code&gt; 的 overrides 时，副本会以 RSP 为优先考量。&lt;/li&gt;
&lt;li&gt;分配的计算机制可以参考 &lt;code&gt;kubefed/pkg/controller/util/planner/planner.go&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multi-cluster-dns&#34;&gt;Multi-cluster DNS&lt;/h3&gt;
&lt;p&gt;KubeFed 提供了一组 API 资源，以及 Controllers 来实现跨集群 Service/Ingress 的 DNS records 自动产生机制，并结合 ExternalDNS 来同步更新至 DNS 服务供应商。以下为简单例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;multiclusterdns.kubefed.k8s.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Domain&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-federation-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;multiclusterdns.kubefed.k8s.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceDNSRecord&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;development&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domainRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;recordTTL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先假设已建立一个名称为 nginx 的 FederatedDeployment，然后放到 development namespace 中，并且也建立了对应的 FederatedService 提供 LoadBalancer。这时当建立上述 Domain 与 ServiceDNSRecord 后，KubeFed 的 Service DNS Controller 会依据 ServiceDNSRecord 文件内容，去收集不同集群的 Service 信息，并将这些信息更新至 ServiceDNSRecord 状态中，接着 DNS Endpoint Controller 会依据该 ServiceDNSRecord 的状态内容，建立一个 DNSEndpoint 文件，并产生 DNS records 资源，最后再由 ExternalDNS 来同步更新 DNS records 至 DNS 供应商。下图是 Service DNS 建立的架构。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/federation/kubefed-service-dns.webp&#34; data-img=&#34;/book/kubernetes-handbook/multi-cluster/federation/kubefed-service-dns.webp&#34; data-width=&#34;1572&#34; data-height=&#34;912&#34; alt=&#34;image&#34; data-caption=&#34;DNS&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;DNS&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;若是 Ingress 的话，会由 IngressDNSRecord 文件取代，并由 Ingress DNS Controller 收集信息。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kubefed&#34; title=&#34;Kubernetes Federation v2 - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Federation v2 - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2018/12/12/kubernetes-federation-evolution/&#34; title=&#34;Kubernetes Federation Evolution - kuberentes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Federation Evolution - kuberentes.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>Kubernetes 基础教程</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    关于本教程
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    本教程迁移自&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook&#34; title=&#34;《Kubernetes 中文指南——云原生应用架构实战手册》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Kubernetes 中文指南——云原生应用架构实战手册》&lt;/a&gt;，原手册使用 Gitbook 发布，内容涵盖 容器、Kubernetes、服务网格、Serverless 等云元生的多个领域，因内容过于宽泛，且 Gitbook 项目已停止维护，现将其中的 Kubernetes 教程部分独立成书，并使用 Hugo 重新构建。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。Kubernetes 开启了云原生的序幕，服务网格 Istio 的出现，引领了后 Kubernetes 时代的微服务，Serverless 的兴起，使得云原生从基础设施层不断向应用架构层挺进，我们正处于一个云原生的新时代。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kubernetes.io&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 是 Google 于 2014 年 6 月基于其内部使用的 &lt;a href=&#34;https://research.google.com/pubs/pub43438.html&#34; title=&#34;Borg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borg&lt;/a&gt; 系统开源出来的容器编排调度引擎，Google 将其作为初始和核心项目贡献给 &lt;a href=&#34;https://cncf.io&#34; title=&#34;CNCF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt;（云原生计算基金会），近年来逐渐发展出了云原生生态。&lt;/p&gt;
&lt;p&gt;Kubernetes 的目标不仅仅是一个编排系统，而是提供一个规范用以描述集群的架构，定义服务的最终状态，使系统自动地达到和维持该状态。Kubernetes 作为云原生应用的基石，相当于一个云原生操作系统，其重要性不言而喻。&lt;/p&gt;
&lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括 &lt;strong&gt;容器&lt;/strong&gt;、&lt;strong&gt;服务网格&lt;/strong&gt;、&lt;strong&gt;微服务&lt;/strong&gt;、&lt;strong&gt;不可变基础设施&lt;/strong&gt; 和 &lt;strong&gt;声明式 API&lt;/strong&gt;。这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。——CNCF（云原生计算基金会）。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;Kubernetes Handbook 项目始于 2016 年底，开源于 2017 年 3 月，作为第一本系统介绍 Kubernetes 的中文电子书，其后经过不断完善。写作本书的过程中，笔者记录了从零开始学习和使用 Kubernetes 的历程，着重于经验总结和资料分享，亦有 Kubernetes 核心概念解析，希望能够帮助大家少走弯路，为大家介绍 Kubernetes 周边生态，如微服务、DevOps、大数据应用、服务网格、云原生应用、Serverless 等领域。&lt;/p&gt;
&lt;h2 id=&#34;本书大纲&#34;&gt;本书大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/&#34;&gt;Kubernetes 架构&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/&#34;&gt;资源对象&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/&#34;&gt;集群资源管理&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/&#34;&gt;控制器&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/service-discovery/&#34;&gt;服务发现与路由&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/&#34;&gt;身份与权限认证&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/networking/&#34;&gt;网络&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/&#34;&gt;存储&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/extend/&#34;&gt;扩展集群&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/&#34;&gt;多集群管理&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/config/&#34;&gt;资源对象配置&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cli/&#34;&gt;命令使用&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/&#34;&gt;集群安全性管理&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/&#34;&gt;访问集群&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/devops/&#34;&gt;部署应用&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/&#34;&gt;开发指南&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/&#34;&gt;服务网格&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/&#34;&gt;云原生&lt;/a&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;您可以使用&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; title=&#34;署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0)&lt;/a&gt;  协议共享。&lt;/p&gt;
&lt;h2 id=&#34;交流群&#34;&gt;交流群&lt;/h2&gt;
&lt;p&gt;欢迎加入&lt;a href=&#34;https://cloudnativecn.com/&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;微信讨论群，加入前请先填写&lt;a href=&#34;https://wj.qq.com/s2/5479026/bf82&#34; title=&#34;入群申请问卷&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入群申请问卷&lt;/a&gt;后联系 &lt;a href=&#34;https://jimmysong.io/contact/&#34; title=&#34;Jimmy Song&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jimmy Song&lt;/a&gt; 入群。&lt;/p&gt;
&lt;div class=&#34;cta-group&#34;&gt;
  
    &lt;a href=&#34;architecture&#34;  class=&#34;btn btn-sm btn-primary&#34;&gt;开始阅读&lt;/a&gt;
  
  
&lt;/dv&gt;


      </description>
    </item>
                           
    <item>
      <title>通知和历史</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/notices-and-hitory/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/notices-and-hitory/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;文件变更历史&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英文版&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;日期&lt;/th&gt;
          &lt;th&gt;版本&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;2021 年 8 月&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;首次发布&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;中文版&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;日期&lt;/th&gt;
          &lt;th&gt;版本&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;2021 年 8 月 8 日&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;首次发布&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;担保和认可的免责声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文件中的信息和意见是 &amp;ldquo;按原样&amp;rdquo; 提供的，没有任何保证或担保。本文件以商品名称、商标、制造商或其他方式提及任何具体的商业产品、程序或服务，并不一定构成或暗示美国政府对其的认可、推荐或青睐，而且本指南不得用于广告或产品代言的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于中文版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中文版为 &lt;a href=&#34;https://jimmysong.io&#34; title=&#34;Jimmy Song&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jimmy Song&lt;/a&gt; 个人翻译，翻译过程中完全遵照原版，未做任何删减。其本人与本书的原作者没有任何组织或利益上的联系，翻译本书仅为交流学习之用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;商标认可&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 是 Linux 基金会的注册商标。&lt;/li&gt;
&lt;li&gt;SELinux 是美国国家安全局的注册商标。&lt;/li&gt;
&lt;li&gt;AppArmor 是 SUSE LLC 的注册商标。&lt;/li&gt;
&lt;li&gt;Windows 和 Hyper-V 是微软公司的注册商标。&lt;/li&gt;
&lt;li&gt;ETCD 是 CoreOS, Inc. 的注册商标。&lt;/li&gt;
&lt;li&gt;Syslog-ng 是 One Identity Software International Designated Activity 公司的注册商标。&lt;/li&gt;
&lt;li&gt;Prometheus 是 Linux 基金会的注册商标。&lt;/li&gt;
&lt;li&gt;Grafana 是 Raintank, Inc.dba Grafana Labs 的注册商标。&lt;/li&gt;
&lt;li&gt;Elasticsearch 和 ELK Stack 是 Elasticsearch B.V 的注册商标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;版权确认&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文件中的信息、例子和数字基于 Kubernetes 作者的 &lt;a href=&#34;https://kubernetes.io/docs/&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; &lt;a href=&#34;https://kubernetes.io/docs/&#34; title=&#34;文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;，以&lt;a href=&#34;https://git.k8s.io/website/LICENSE&#34; title=&#34;知识共享&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知识共享&lt;/a&gt;&lt;a href=&#34;https://git.k8s.io/website/LICENSE&#34; title=&#34;署名 4.0 许可方式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名 4.0 许可方式&lt;/a&gt;发布。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Workload</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/workload/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/workload/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    本文基于 OAM v1alpha2 版本。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;应用程序可用的 &lt;code&gt;Workload&lt;/code&gt; 类型是由平台提供商和基础设施运维人员提供的。&lt;code&gt;Workload&lt;/code&gt; 模型参照 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/#required-fields&#34; title=&#34;Kubernetes 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 规范&lt;/a&gt;定义，理论上，平台商可以定义如容器、Pod、Serverless 函数、虚拟机、数据库、消息队列等任何类型的 &lt;code&gt;Workload&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面是一个 &lt;code&gt;Workload&lt;/code&gt; 定义的是示例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;WorkloadDefinition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;schema.example.jimmysong.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;definitionRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;schema.example.jimmysong.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-warn-container&#34;&gt;
  
  &lt;div class=&#34;alert-warn-title px-2 py-2&#34;&gt;
    关于 definitionRef
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warn px-2&#34;&gt;
    CR 即 Custom Resource（自定义资源），指的是实例化后的 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; title=&#34;CRD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRD&lt;/a&gt;。应用开发者可以在 &lt;code&gt;Component&lt;/code&gt; 的 &lt;code&gt;Workload&lt;/code&gt; 中直接定义 CR。&lt;code&gt;definitionRef&lt;/code&gt; 将 &lt;code&gt;Workload&lt;/code&gt; shcema 在 OAM 解释器中注册，通过增加一个抽象层，使其与 Operator 框架解耦（毕竟不是说有 CRD 都是面向应用开发者的），表示可作为负载类型使用。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;请保持 &lt;code&gt;spec.definitionRef.name&lt;/code&gt; 的值与 &lt;code&gt;metadata.name&lt;/code&gt; 的值相同，因为 &lt;code&gt;definitionRef&lt;/code&gt; 是对相应的 &lt;code&gt;Workload&lt;/code&gt; schema 的引用，对于 Kubernetes 平台来说，即对 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; title=&#34;CRD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRD&lt;/a&gt; 的引用。应用开发者在定义 &lt;a href=&#34;../component&#34; title=&#34;Component&#34;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt; 引用该 &lt;code&gt;Workload&lt;/code&gt; 的时候需要直接实例化一个 CRD 的配置（及创建一个 CR）。&lt;/p&gt;
&lt;p&gt;OAM 中将 &lt;code&gt;Workload&lt;/code&gt; 分成了 &lt;code&gt;core.oam.dev&lt;/code&gt;（核心）、&lt;code&gt;standard.oam.dev&lt;/code&gt;（标准）及自定义扩展类别。目前 OAM 中支持的核心 &lt;code&gt;Workload&lt;/code&gt; 有 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/core/workloads/containerized_workload/containerized_workload.md&#34; title=&#34;ContainerizedWorkload&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ContainerizedWorkload&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于 Workload 的详细信息参考 OAM 中的 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/3.workload.md&#34; title=&#34;Workload 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Workload 规范&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>什么是服务网格？</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-service-mesh/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-service-mesh/</guid>
      <description>
        
        
        &lt;p&gt;Service Mesh 又译作“服务网格”，作为服务间通信的基础设施层。Buoyant 公司的 CEO Willian Morgan 在他的这篇文章 WHAT’S A SERVICE MESH? AND WHY DO I NEED ONE? 中解释了什么是 Service Mesh，为什么云原生应用需要 Service Mesh。&lt;/p&gt;
&lt;p&gt;服务网格是用于处理服务间通信的专用基础设施层。它负责通过包含现代云原生应用程序的复杂服务拓扑来可靠地传递请求。实际上，服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码一起部署，而不需要感知应用程序本身。—— &lt;a href=&#34;https://twitter.com/wm&#34; title=&#34;Willian Morgan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Willian Morgan&lt;/a&gt; Buoyant CEO&lt;/p&gt;
&lt;p&gt;服务网格（Service Mesh）这个术语通常用于描述构成这些应用程序的微服务网络以及应用之间的交互。随着规模和复杂性的增长，服务网格越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、指标收集和监控以及通常更加复杂的运维需求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端认证等。&lt;/p&gt;
&lt;h2 id=&#34;服务网格的特点&#34;&gt;服务网格的特点&lt;/h2&gt;
&lt;p&gt;服务网格有如下几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序间通讯的中间层&lt;/li&gt;
&lt;li&gt;轻量级网络代理&lt;/li&gt;
&lt;li&gt;应用程序无感知&lt;/li&gt;
&lt;li&gt;解耦应用程序的重试 / 超时、监控、追踪和服务发现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前两款流行的服务网格开源软件 &lt;a href=&#34;https://linkerd.io/&#34; title=&#34;Linkerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt; 和 &lt;a href=&#34;https://istio.io/&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 都可以直接在 Kubernetes 中集成，其中 Linkerd 是 CNCF 成员项目，并在 2021 年 7 月毕业。Istio 在 2018 年 7 月 31 日宣布 1.0，并在 2020 年 7 月将 &lt;a href=&#34;https://istio.io/latest/blog/2020/open-usage/&#34; title=&#34;商标捐献&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;商标捐献&lt;/a&gt;给 &lt;a href=&#34;https://openusage.org/&#34; title=&#34;Open Usage Commons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Usage Commons&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;理解服务网格&#34;&gt;理解服务网格&lt;/h2&gt;
&lt;p&gt;如果用一句话来解释什么是服务网格，可以将它比作是应用程序或者说微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控。对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用服务网格也就无须关系服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给服务网格就可以了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://philcalcado.com/&#34; title=&#34;Phil Calçado&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Phil Calçado&lt;/a&gt; 在他的这篇博客 &lt;a href=&#34;http://philcalcado.com/2017/08/03/pattern_service_mesh.html&#34; title=&#34;Pattern: Service Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pattern: Service Mesh&lt;/a&gt; 中详细解释了服务网格的来龙去脉：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从最原始的主机之间直接使用网线相连&lt;/li&gt;
&lt;li&gt;网络层的出现&lt;/li&gt;
&lt;li&gt;集成到应用程序内部的控制流&lt;/li&gt;
&lt;li&gt;分解到应用程序外部的控制流&lt;/li&gt;
&lt;li&gt;应用程序的中集成服务发现和断路器&lt;/li&gt;
&lt;li&gt;出现了专门用于服务发现和断路器的软件包 / 库，如 &lt;a href=&#34;https://finagle.github.io/&#34; title=&#34;Twitter 的 Finagle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter 的 Finagle&lt;/a&gt; 和 &lt;a href=&#34;https://code.fb.com/networking-traffic/introducing-proxygen-facebook-s-c-http-framework/&#34; title=&#34;Facebook 的 Proxygen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook 的 Proxygen&lt;/a&gt;，这时候还是集成在应用程序内部&lt;/li&gt;
&lt;li&gt;出现了专门用于服务发现和断路器的开源软件，如 &lt;a href=&#34;https://netflix.github.io/&#34; title=&#34;Netflix OSS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix OSS&lt;/a&gt;、Airbnb 的 &lt;a href=&#34;https://github.com/airbnb/synapse&#34; title=&#34;synapse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;synapse&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/airbnb/nerve&#34; title=&#34;nerve&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nerve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;最后作为微服务的中间层服务网格出现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务网格的架构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-service-mesh/service-mesh-pattern_hu_d952055ec881f209.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-service-mesh/service-mesh-pattern.png&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/what-is-service-mesh/service-mesh-pattern.png&#34; data-width=&#34;661&#34; data-height=&#34;421&#34; alt=&#34;image&#34; data-caption=&#34;Service Mesh 架构图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Service Mesh 架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
图片来自：&lt;a href=&#34;http://philcalcado.com/2017/08/03/pattern_service_mesh.html&#34; title=&#34;Pattern: Service Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pattern: Service Mesh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;服务网格作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 Service mesh 中实现。&lt;/p&gt;
&lt;h2 id=&#34;服务网格如何工作&#34;&gt;服务网格如何工作？&lt;/h2&gt;
&lt;p&gt;下面以 Istio 为例讲解服务网格如何在 Kubernetes 中工作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Istio 将服务请求路由到目的地址，根据中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。&lt;/li&gt;
&lt;li&gt;当 Istio 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。&lt;/li&gt;
&lt;li&gt;Istio 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。&lt;/li&gt;
&lt;li&gt;Istio 将请求发送给该实例，同时记录响应类型和延迟数据。&lt;/li&gt;
&lt;li&gt;如果该实例挂了、不响应了或者进程不工作了，Istio 将把请求发送到其他实例上重试。&lt;/li&gt;
&lt;li&gt;如果该实例持续返回 error，Istio 会将该实例从负载均衡池中移除，稍后再周期性得重试。&lt;/li&gt;
&lt;li&gt;如果请求的截止时间已过，Istio 主动失败该请求，而不是再次尝试添加负载。&lt;/li&gt;
&lt;li&gt;Istio 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为何使用服务网格&#34;&gt;为何使用服务网格？&lt;/h2&gt;
&lt;p&gt;服务网格并没有给我们带来新功能，它是用于解决其他工具已经解决过的问题，只不过这次是在云原生的 Kubernetes 环境下的实现。&lt;/p&gt;
&lt;p&gt;在传统的 MVC 三层 Web 应用程序架构下，服务之间的通讯并不复杂，在应用程序内部自己管理即可，但是在现今的复杂的大型网站情况下，单体应用被分解为众多的微服务，服务之间的依赖和通讯十分复杂，出现了 Twitter 开发的 &lt;a href=&#34;https://twitter.github.io/finagle/&#34; title=&#34;Finagle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Finagle&lt;/a&gt;、Netflix 开发的 &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34; title=&#34;Hystrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hystrix&lt;/a&gt; 和 Google 的 Stubby 这样的“胖客户端”库，这些就是早期的服务网格，但是它们都近适用于特定的环境和特定的开发语言，并不能作为平台级的服务网格支持。&lt;/p&gt;
&lt;p&gt;在云原生架构下，容器的使用给予了异构应用程序的更多可行性，Kubernetes 增强的应用的横向扩容能力，用户可以快速的编排出复杂环境、复杂依赖关系的应用程序，同时开发者又无须过分关心应用程序的监控、扩展性、服务发现和分布式追踪这些繁琐的事情而专注于程序开发，赋予开发者更多的创造性。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/attest-engineering/Istio-a-service-mesh-for-aws-ecs-937f201f847a&#34; title=&#34;Istio: A service mesh for AWS ECS - medium.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio: A service mesh for AWS ECS - medium.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/news/releases/0.x/announcing-0.1/&#34; title=&#34;初次了解 Istio - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初次了解 Istio - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&#34; title=&#34;Application Network Functions With ESBs, API Management, and Now.. Service Mesh? - blog.christianposta.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Application Network Functions With ESBs, API Management, and Now.. Service Mesh? - blog.christianposta.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://philcalcado.com/2017/08/03/pattern_service_mesh.html&#34; title=&#34;Pattern: Service Mesh - philcalcado.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pattern: Service Mesh - philcalcado.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnativecn.com/envoy/&#34; title=&#34;Envoy 官方文档中文版 - cloudnativecn.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 官方文档中文版 - cloudnativecn.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34; title=&#34;Istio 官方文档 - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 官方文档 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>什么是云原生？</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/what-is-cloud-native/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/what-is-cloud-native/</guid>
      <description>
        
        
        &lt;p&gt;云原生（Cloud Native）这个词汇由来已久，以致于何时出现已无据可考。云原生开始大规模出现在受众视线中，与 Pivotal 提出的云原生应用的理念有着莫大的关系。我们现在谈到云原生，更多的指的是&lt;a href=&#34;https://cloudnativecn.com/blog/cloud-native-culture-not-container/&#34; title=&#34;一种文化&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一种文化&lt;/a&gt;，而不具象为哪些技术体系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pivotal 推出过 Pivotal Cloud Foundry 云原生应用平台和 &lt;a href=&#34;https://spring.io/&#34; title=&#34;Spring&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring&lt;/a&gt; 开源 Java 开发框架，成为云原生应用架构中先驱者和探路者。Pivotal 是云原生应用平台第一股，2018 年在纽交所上市，2019 年底被 VMWare 以 27 亿美元收购，加入到 VMware 新的产品线 &lt;a href=&#34;https://tanzu.vmware.com/&#34; title=&#34;Tanzu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tanzu&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;pivotal-最初的定义&#34;&gt;Pivotal 最初的定义&lt;/h2&gt;
&lt;p&gt;早在 2015 年 Pivotal 公司的 Matt Stine 写了一本叫做 &lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures/&#34; title=&#34;迁移到云原生应用架构&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;迁移到云原生应用架构&lt;/a&gt; 的小册子，其中探讨了云原生应用架构的几个主要特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合 12 因素应用&lt;/li&gt;
&lt;li&gt;面向微服务架构&lt;/li&gt;
&lt;li&gt;自服务敏捷架构&lt;/li&gt;
&lt;li&gt;基于 API 的协作&lt;/li&gt;
&lt;li&gt;抗脆弱性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者已于 2017 年翻译了本书，详见 &lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures/&#34; title=&#34;迁移到云原生应用架构&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;迁移到云原生应用架构&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;cncf-最初的定义&#34;&gt;CNCF 最初的定义&lt;/h2&gt;
&lt;p&gt;到了 2015 年 Google 主导成立了云原生计算基金会（CNCF），起初 CNCF 对云原生（Cloud Native）的定义包含以下三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用容器化&lt;/li&gt;
&lt;li&gt;面向微服务架构&lt;/li&gt;
&lt;li&gt;应用支持容器的编排调度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重定义&#34;&gt;重定义&lt;/h2&gt;
&lt;p&gt;到了 2018 年，随着近几年来云原生生态的不断壮大，所有主流云计算供应商都加入了该基金会，且从 &lt;a href=&#34;https://i.cncf.io&#34; title=&#34;Cloud Native Landscape&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Native Landscape&lt;/a&gt; 中可以看出云原生有意蚕食原先非云原生应用的部分。CNCF 基金会中的会员以及容纳的项目越来越多，该定义已经限制了云原生生态的发展，CNCF 为云原生进行了重新定位。&lt;/p&gt;
&lt;p&gt;以下是 CNCF 对云原生的&lt;a href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md&#34; title=&#34;重新定义&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重新定义&lt;/a&gt;（中英对照）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Cloud Native Computing Foundation seeks to drive adoption of this paradigm by fostering and sustaining an ecosystem of open source, vendor-neutral projects. We democratize state-of-the-art patterns to make these innovations accessible for everyone.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;关于什么是云原生的争论还在进行中，在笔者看来云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。Kubernetes 开启了云原生的序幕，服务网格 Istio 的出现，引领了后 Kubernetes 时代的微服务，serverless 的再次兴起，使得云原生从基础设施层不断向应用架构层挺进，我们正处于一个云原生的新时代。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cncf/toc/blob/master/DEFINITION.md&#34; title=&#34;CNCF Cloud Native Definition v1.0 - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Cloud Native Definition v1.0 - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnativecn.com/blog/cloud-native-culture-not-container/&#34; title=&#34;云原生关乎文化，而不是容器 - cloudnativecn.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生关乎文化，而不是容器 - cloudnativecn.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>多集群服务 API（Multicluster Services API）</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/multi-cluster-services-api/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/multi-cluster-services-api/</guid>
      <description>
        
        
        &lt;p&gt;2020 年初，Kubernetes 社区提议 &lt;a href=&#34;https://docs.google.com/document/d/1hFtp8X7dzVS-JbfA5xuPvI_DNISctEbJSorFnY-nz6o/edit#heading=h.u7jfy9wqpd2b&#34; title=&#34;Multicluster Services API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multicluster Services API&lt;/a&gt;，旨在解决长久以来就存在的 Kubernetes 多集群服务管理问题。&lt;/p&gt;
&lt;p&gt;Kubernetes 用户可能希望将他们的部署分成多个集群，但仍然保留在这些集群中运行的工作负载之间的相互依赖关系，这有&lt;a href=&#34;https://docs.google.com/document/d/1G1lfIukib7Fy_LpLUoHZPhcZ5T-w52D2YT9W1465dtY/edit&#34; title=&#34;很多原因&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;很多原因&lt;/a&gt;。今天，集群是一个硬边界，一个服务对远程的 Kubernetes 消费者来说是不透明的，否则就可以利用元数据（如端点拓扑结构）来更好地引导流量。为了支持故障转移或在迁移过程中的临时性，用户可能希望消费分布在各集群中的服务，但今天这需要非复杂的定制解决方案。&lt;/p&gt;
&lt;h2 id=&#34;multicluster-services-api-概述&#34;&gt;Multicluster Services API 概述&lt;/h2&gt;
&lt;p&gt;Multicluster Services API 是 Kubernetes 的一个扩展，用于跨多个集群提供服务。它建立在 Namespace Sameness 概念之上，通过使用相同的服务名称，可以让服务在集群之间保持可用。控制平面可以是集中式或分散式的，但消费者只依赖于本地数据。&lt;/p&gt;
&lt;p&gt;该 API 的目的是使 ClusterIP 和 headless 服务能够在集群之间按预期工作。接下来，我将为你介绍 Multicluster API 中的一些基本概念。&lt;/p&gt;
&lt;h2 id=&#34;namespace-sameness&#34;&gt;Namespace Sameness&lt;/h2&gt;
&lt;p&gt;Namespace Sameness 是 Kubernetes 集群中的一个重要概念，指的是在由单一管理机构治理的一组相关集群中，具有相同名称的命名空间被视为相同的命名空间。这意味着在这些集群中，用户在特定命名空间内的权限和特性是一致的。&lt;/p&gt;
&lt;p&gt;Namespace Sameness 的关键特性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性&lt;/strong&gt;：所有具有相同名称的命名空间在不同集群中被视为相同，用户在这些命名空间中的权限相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灵活性&lt;/strong&gt;：命名空间不必在每个集群中都存在，允许某些集群缺少特定命名空间，而不影响其他集群的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务共享&lt;/strong&gt;：在多个集群中，具有相同名称的服务被视为同一服务。这使得跨集群的服务发现和负载均衡变得更加简单和一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设计原则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同目的的命名空间不应在集群间使用相同名称。&lt;/li&gt;
&lt;li&gt;应为团队和集群分配或保留命名空间，以确保资源的合理管理。&lt;/li&gt;
&lt;li&gt;应严格控制用户对命名空间的访问权限，以防止未授权访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;避免默认命名空间的使用&lt;/strong&gt;：在生产环境中，建议避免使用默认命名空间或通用命名空间（如 &amp;ldquo;prod&amp;rdquo; 或 &amp;ldquo;dev&amp;rdquo;），以减少意外部署资源到默认命名空间的风险。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;clusterset&#34;&gt;ClusterSet&lt;/h2&gt;
&lt;p&gt;ClusterSet 是一组由单一管理机构治理的 Kubernetes 集群的集合。它具有以下特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集群之间存在高度信任。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClusterSet 中的集群应用 Namespace Sameness 原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定命名空间在集群间具有一致的权限和特征。&lt;/li&gt;
&lt;li&gt;命名空间不必在每个集群中都存在，但在存在的集群中行为一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ClusterSet 是一个集群作用域的 ClusterProperty CRD，存储名称和值。这个属性可用于:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 clusterID 唯一标识集群&lt;/li&gt;
&lt;li&gt;唯一标识集群在 ClusterSet 中的成员资格，直到成员资格结束&lt;/li&gt;
&lt;li&gt;为构建在 ClusterSet 内的多集群工具提供参考点，例如 DNS 标签、日志记录和跟踪等&lt;/li&gt;
&lt;li&gt;提供额外的元数据空间，存储可能以临时注释的形式实现的其他集群属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;service-和-serviceexport&#34;&gt;Service 和 ServiceExport&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用户/管理员与 MCS 交互的主要接口&lt;/li&gt;
&lt;li&gt;一种自定义资源，可用于创建并标记要导出的服务&lt;/li&gt;
&lt;li&gt;mcs-controller 使用这些资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;serviceimport-和-endpointslices&#34;&gt;ServiceImport 和 EndpointSlices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由 mcs-controller 在 ClusterSet 中的所有 namespace-same 集群中创建&lt;/li&gt;
&lt;li&gt;代表导入的服务以及跨 ClusterSet 的所有可用后端&lt;/li&gt;
&lt;li&gt;用于在消费集群中创建相关的 EndpointSlices&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/enhancements/tree/master/keps/sig-multicluster/1645-multi-cluster-services-api&#34; title=&#34;KEP-1645: Multi-Cluster Services API - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KEP-1645: Multi-Cluster Services API - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/&#34; title=&#34;Mutlcluster API SIG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mutlcluster API SIG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>出版信息</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/publication-information/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/publication-information/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cybersecurity and Infrastructure Security Agency (CISA)&lt;/p&gt;
&lt;p&gt;National Security Agency (NSA) Cybersecurity Directorate Endpoint Security&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联系信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户要求 / 一般网络安全问题。&lt;/p&gt;
&lt;p&gt;网络安全需求中心，410-854-4200，&lt;a href=&#34;mailto:Cybersecurity_Requests@nsa.gov&#34; title=&#34;Cybersecurity_Requests@nsa.gov&#34;&gt;Cybersecurity_Requests@nsa.gov&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;媒体咨询&lt;/strong&gt; / &lt;strong&gt;新闻台&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;媒体关系，443-634-0721，&lt;a href=&#34;mailto:MediaRelations@nsa.gov&#34; title=&#34;MediaRelations@nsa.gov&#34;&gt;MediaRelations@nsa.gov&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于事件响应资源，请联系 CISA：&lt;a href=&#34;mailto:CISAServiceDesk@cisa.dhs.gov&#34; title=&#34;CISAServiceDesk@cisa.dhs.gov&#34;&gt;CISAServiceDesk@cisa.dhs.gov&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中文版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于本书中文版的信息请联系 Jimmy Song：&lt;a href=&#34;mailto:jimmysong@jimmysong.io&#34; title=&#34;jimmysong@jimmysong.io&#34;&gt;jimmysong@jimmysong.io&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宗旨&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国家安全局和 CISA 制定本文件是为了促进其各自的网络安全，包括其制定和发布网络安全规范和缓解措施的责任。这一信息可以被广泛分享，以触达所有适当的利益相关者。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Component</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/component/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/component/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    本文基于 OAM v1alpha2 版本。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Component&lt;/code&gt; 用于定义应用程序的基本组件，其中包含了对 Workload 的引用，一个 Component 中只能定义一个 Workload，这个 Workload 是与平台无关的，可以直接引用 Kubernetes 中的 CRD。&lt;/p&gt;
&lt;p&gt;下面是根据 OAM 规范定义的一个 Component 示例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ContainerizedWorkload&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;linux&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-image:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myServerImage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fieldPaths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;.spec.containers[0].image&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Component&lt;/code&gt;  定义由以下几个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;metadata&lt;/code&gt;：关于 Component 的信息，主要是针对应用运维的信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workload&lt;/code&gt;：该 Component 的实际工作负载。具体有哪些负载类型可用可以咨询平台提供商，平台运维也可以根据 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/3.workload.md&#34; title=&#34;Workload 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Workload 规范&lt;/a&gt; 来扩展负载类型，比如 &lt;code&gt;Containers&lt;/code&gt;、&lt;code&gt;Functions&lt;/code&gt;、&lt;code&gt;VirtualMachine&lt;/code&gt;、&lt;a href=&#34;https://istio.io/docs/reference/config/networking/virtual-service/&#34; title=&#34;VirtualService &#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;VirtualService &lt;/code&gt;&lt;/a&gt; 等。OAM 目前定义的核心负载类型有 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/core/workloads/containerized_workload/containerized_workload.md&#34; title=&#34;ContainerizedWorkload&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ContainerizedWorkload&lt;/a&gt;（与 Kubernetes 中的 Pod 定义类似，同样支持定义多个容器，但是缺少了 Pod 中的一些属性）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameters&lt;/code&gt;：在应用程序运行时可以调整的参数，即应用开发者在 &lt;code&gt;Component&lt;/code&gt; 中的原有定义可以在运行时被应用运维人员覆盖。&lt;code&gt;parameters&lt;/code&gt; 使用 &lt;a href=&#34;https://kubernetes.io/zh/docs/reference/kubectl/jsonpath/&#34; title=&#34;JSONPath&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSONPath&lt;/a&gt; 的方式引用 &lt;code&gt;spec&lt;/code&gt; 中的字段。&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-warn-container&#34;&gt;
  
  &lt;div class=&#34;alert-warn-title px-2 py-2&#34;&gt;
    Component 是可变的
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warn px-2&#34;&gt;
    &lt;code&gt;Component&lt;/code&gt; 的配置在应用后是&lt;strong&gt;可更改的（Mutable）&lt;/strong&gt;，有的 &lt;a href=&#34;../trait&#34; title=&#34;Trait&#34;&gt;&lt;code&gt;Trait&lt;/code&gt;&lt;/a&gt; 可能会监听 &lt;code&gt;Component&lt;/code&gt; 的变更并作出相应的操作，每次变更都会导致新的 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 发布。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;关于 Component 的详细信息请参考 OAM 中的 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/4.component.md&#34; title=&#34;Component 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Component 规范&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生的设计哲学</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/cloud-native-philosophy/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/cloud-native-philosophy/</guid>
      <description>
        
        
        &lt;p&gt;云原生一词已经被过度的采用，很多软件都号称是云原生，很多打着云原生旗号的会议也如雨后春笋般涌现。&lt;/p&gt;
&lt;p&gt;云原生本身甚至不能称为是一种架构，它首先是一种基础设施，运行在其上的应用称作云原生应用，只有符合云原生设计哲学的应用架构才叫云原生应用架构。&lt;/p&gt;
&lt;h2 id=&#34;云原生的设计理念&#34;&gt;云原生的设计理念&lt;/h2&gt;
&lt;p&gt;云原生系统的设计理念如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向分布式设计（Distribution）：容器、微服务、API 驱动的开发；&lt;/li&gt;
&lt;li&gt;面向配置设计（Configuration）：一个镜像，多个环境配置；&lt;/li&gt;
&lt;li&gt;面向韧性设计（Resistancy）：故障容忍和自愈；&lt;/li&gt;
&lt;li&gt;面向弹性设计（Elasticity）：弹性扩展和对环境变化（负载）做出响应；&lt;/li&gt;
&lt;li&gt;面向交付设计（Delivery）：自动拉起，缩短交付时间；&lt;/li&gt;
&lt;li&gt;面向性能设计（Performance）：响应式，并发和资源高效利用；&lt;/li&gt;
&lt;li&gt;面向自动化设计（Automation）：自动化的 DevOps；&lt;/li&gt;
&lt;li&gt;面向诊断性设计（Diagnosability）：集群级别的日志、metric 和追踪；&lt;/li&gt;
&lt;li&gt;面向安全性设计（Security）：安全端点、API Gateway、端到端加密；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的设计理念很多都是继承自分布式应用的设计理念。虽然有如此多的理念但是我们仍然无法辨认什么样的设施才是云原生基础设施，不过可以先用排除法，我将解释什么不是云原生基础设施。&lt;/p&gt;
&lt;h2 id=&#34;什么不是云原生基础设施&#34;&gt;什么不是云原生基础设施？&lt;/h2&gt;
&lt;p&gt;云原生基础设施不等于在公有云上运行的基础设施。光是租用服务器并不会使你的基础设施云原生化。管理 IaaS 的流程与运维物理数据中心没什么两样，将现有架构迁移到云上也未必能获得回报。&lt;/p&gt;
&lt;p&gt;云原生不是指在容器中运行应用程序。Netflix 率先推出云原生基础设施时，几乎所有应用程序部署在虚拟机中，而不是在容器中。改变应用程序的打包方式并不意味着就会增加自治系统的可扩展性和优势。即使应用程序是通过 CI/CD 渠道自动构建和部署的，也不意味着你就可以从增强 API 驱动部署的基础设施中受益。&lt;/p&gt;
&lt;p&gt;这也并不意味着你只能运行容器编排器（例如 Kubernetes 和 Mesos）。容器编排器提供了云原生基础设施所需的许多平台功能，但并未按预期方式使用这些功能，这意味着你的应用程序会在一组服务器上运行，被动态调度。这是一个非常好的起步，但仍有许多工作要做。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;调度器与编排器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;术语“调度器”和“编排器”通常可以互换使用。&lt;/p&gt;
&lt;p&gt;在大多数情况下，编排器负责集群中的所有资源利用（例如：存储，网络和 CPU）。该术语典型地用于描述执行许多任务的产品，如健康检查和云自动化。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;调度器是编排平台的一个子集，仅负责选择运行在每台服务器上的进程和服务。&lt;/p&gt;
&lt;p&gt;云原生不是微服务或基础设施即代码。微服务意味着更快的开发周期和更小的独特功能，但是单体应用程序可以具有相同的功能，使其能够通过软件有效管理，并且还可以从云原生基础设施中受益。&lt;/p&gt;
&lt;p&gt;基础设施即代码以机器可解析语言或领域特定语言（DSL）定义、自动化你的基础设施。将代码应用于基础架构的传统工具包括配置管理工具（例如 Chef 和 Puppet）。这些工具在自动执行任务和提供一致性方面有很大帮助，但是它们在提供必要的抽象来描述超出单个服务器的基础设施方面存在缺陷。&lt;/p&gt;
&lt;p&gt;配置管理工具一次自动化一台服务器，并依靠人员将服务器提供的功能绑定在一起。这将人类定位为基础设施规模的潜在瓶颈。这些工具也不会使构建完整系统所需的云基础设施（例如存储和网络）的额外部分自动化。&lt;/p&gt;
&lt;p&gt;尽管配置管理工具为操作系统的资源（例如软件包管理器）提供了一些抽象，但它们并没有抽象出足够的底层操作系统来轻松管理它。如果一位工程师想要管理系统中的每个软件包和文件，这将是一个非常艰苦的过程，并且对于每个配置变体都是独一无二的。同样，定义不存在或不正确的资源的配置管理仅消耗系统资源并且不能提供任何价值。&lt;/p&gt;
&lt;p&gt;虽然配置管理工具可以帮助自动化部分基础设施，但它们无法更好地管理应用程序。我们将在后面的章节中通过查看部署，管理，测试和操作基础架构的流程，探讨云原生基础设施的不同之处，但首先，我们将了解哪些应用程序是成功的以及应该何时与原生基础设施一起使用。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用程序&#34;&gt;云原生应用程序&lt;/h2&gt;
&lt;p&gt;就像云改变了业务和基础设施之间的关系一样，云原生应用程序也改变了应用程序和基础设施之间的关系。我们需要了解与传统应用程序相比，云本身有什么不同，因此我们需要了解它们与基础设施的新关系。&lt;/p&gt;
&lt;p&gt;为了写好本书，也为了有一个共享词汇表，我们需要定义“云原生应用程序”是什么意思。云原生与 12 因素应用程序不同，即使它们可能共享一些类似的特征。如果你想了解更多细节，请阅读 Kevin Hoffman 撰写的“超越 12 因素应用程序”（O&amp;rsquo;Reilly，2012）。&lt;/p&gt;
&lt;p&gt;云原生应用程序被设计为在平台上运行，并设计用于弹性，敏捷性，可操作性和可观测性。弹性包含失败而不是试图阻止它们；它利用了在平台上运行的动态特性。敏捷性允许快速部署和快速迭代。可操作性从应用程序内部控制应用程序生命周期，而不是依赖外部进程和监视器。可观测性提供信息来回答有关应用程序状态的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;云原生定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生应用程序的定义仍在发展中。还有像 CNCF 这样的组织可以提供其他的定义。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;云原生应用程序通过各种方法获取这些特征。它通常取决于应用程序的运行位置以及企业流程和文化。以下是实现云原生应用程序所需特性的常用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服务&lt;/li&gt;
&lt;li&gt;健康报告&lt;/li&gt;
&lt;li&gt;遥测数据&lt;/li&gt;
&lt;li&gt;弹性&lt;/li&gt;
&lt;li&gt;声明式的，而不是命令式的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微服务&#34;&gt;微服务&lt;/h3&gt;
&lt;p&gt;作为单个实体进行管理和部署的应用程序通常称为单体应用。最初开发应用程序时，单体有很多好处。它们更易于理解，并允许你在不影响其他服务的情况下更改主要功能。&lt;/p&gt;
&lt;p&gt;随着应用程序复杂性的增长，单体应用的益处逐渐减少。它们变得更难理解，而且失去了敏捷性，因为工程师很难推断和修改代码。&lt;/p&gt;
&lt;p&gt;对付复杂性的最好方法之一是将明确定义的功能分成更小的服务，并让每个服务独立迭代。这增加了应用程序的灵活性，允许根据需要更轻松地更改部分应用程序。每个微服务可以由单独的团队进行管理，使用适当的语言编写，并根据需要进行独立扩缩容。&lt;/p&gt;
&lt;p&gt;只要每项服务都遵守强有力的合约，应用程序就可以快速改进和改变。当然，转向微服务架构还有许多其他的考虑因素。其中最不重要的是弹性通信，我们在附录 A 中有讨论。&lt;/p&gt;
&lt;p&gt;我们无法考虑转向微服务的所有考虑因素。拥有微服务并不意味着你拥有云原生基础设施。如果你想阅读更多，我们推荐 Sam Newman 的 Building Microservices（O&amp;rsquo;Reilly，2015）。虽然微服务是实现你的应用程序灵活性的一种方式，但正如我们之前所说的，它们不是云原生应用程序的必需条件。&lt;/p&gt;
&lt;h3 id=&#34;健康报告&#34;&gt;健康报告&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;停止逆向工程应用程序并开始从内部进行监控。 —— Kelsey Hightower，Monitorama PDX 2016：healthz&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;没有人比开发人员更了解应用程序需要什么才能以健康的状态运行。很长一段时间，基础设施管理员都试图从他们负责运行的应用程序中找出“健康”该怎么定义。如果不实际了解应用程序的健康状况，他们尝试在应用程序不健康时进行监控并发出警报，这往往是脆弱和不完整的。&lt;/p&gt;
&lt;p&gt;为了提高云原生应用程序的可操作性，应用程序应该暴露健康检查。开发人员可以将其实施为命令或过程信号，以便应用程序在执行自我检查之后响应，或者更常见的是：通过应用程序提供 Web 服务，返回 HTTP 状态码来检查健康状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Google Borg 示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google 的 Borg 报告中列出了一个健康报告的例子：&lt;/p&gt;
&lt;p&gt;几乎每个在 Borg 下运行的任务都包含一个内置的 HTTP 服务器，该服务器发布有关任务运行状况和数千个性能指标（如 RPC 延迟）的信息。Borg 会监控运行状况检查 URL 并重新启动不及时响应或返回 HTTP 错误代码的任务。其他数据由监控工具跟踪，用于仪表板和服务级别目标（SLO）违规警报。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;将健康责任转移到应用程序中使应用程序更容易管理和自动化。应用程序应该知道它是否正常运行以及它依赖于什么（例如，访问数据库）来提供业务价值。这意味着开发人员需要与产品经理合作来定义应用服务的业务功能并相应地编写测试。&lt;/p&gt;
&lt;p&gt;提供健康检查的应用程序示例包括 Zookeeper 的 ruok 命令和 etcd 的 HTTP / 健康端点。&lt;/p&gt;
&lt;p&gt;应用程序不仅仅有健康或不健康的状态。它们将经历一个启动和关闭过程，在这个过程中它们应该通过健康检查，报告它们的状态。如果应用程序可以让平台准确了解它所处的状态，平台将更容易知道如何操作它。&lt;/p&gt;
&lt;p&gt;一个很好的例子就是当平台需要知道应用程序何时可以接收流量。在应用程序启动时，如果它不能正确处理流量，它就应该表现为未准备好。此额外状态将防止应用程序过早终止，因为如果运行状况检查失败，平台可能会认为应用程序不健康，并且会反复停止或重新启动它。&lt;/p&gt;
&lt;p&gt;应用程序健康只是能够自动化应用程序生命周期的一部分。除了知道应用程序是否健康之外，你还需要知道应用程序是否正在进行哪些工作。这些信息来自遥测数据。&lt;/p&gt;
&lt;h3 id=&#34;遥测数据&#34;&gt;遥测数据&lt;/h3&gt;
&lt;p&gt;遥测数据是进行决策所需的信息。确实，遥测数据可能与健康报告重叠，但它们有不同的用途。健康报告通知我们应用程序生命周期状态，而遥测数据通知我们应用程序业务目标。&lt;/p&gt;
&lt;p&gt;你测量的指标有时称为服务级指标（SLI）或关键性能指标（KPI）。这些是特定于应用程序的数据，可以确保应用程序的性能处于服务级别目标（SLO）内。如果你需要更多关于这些术语的信息以及它们与你的应用程序、业务需求的关系，我们推荐你阅读来自 Site Reliability Engineering（O&amp;rsquo;Reilly）的第 4 章。&lt;/p&gt;
&lt;p&gt;遥测和度量标准用于解决以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序每分钟收到多少请求？&lt;/li&gt;
&lt;li&gt;有没有错误？&lt;/li&gt;
&lt;li&gt;什么是应用程序延迟？&lt;/li&gt;
&lt;li&gt;订购需要多长时间？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常会将数据刮取或推送到时间序列数据库（例如 Prometheus 或 InfluxDB）进行聚合。遥测数据的唯一要求是它将被收集数据的系统格式化。&lt;/p&gt;
&lt;p&gt;至少，可能最好实施度量标准的 RED 方法，该方法收集应用程序的速率，错误和执行时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;收到了多少个请求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用程序有多少错误&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多久才能收到回复&lt;/p&gt;
&lt;p&gt;遥测数据应该用于提醒而非健康监测。在动态的、自我修复的环境中，我们更少关注单个应用程序实例的生命周期，更多关注关于整体应用程序 SLO 的内容。健康报告对于自动应用程序管理仍然很重要，但不应该用于页面工程师。&lt;/p&gt;
&lt;p&gt;如果 1 个实例或 50 个应用程序不健康，只要满足应用程序的业务需求，我们可能不会收到警报。度量标准可让你知道你是否符合你的 SLO，应用程序的使用方式以及对于你的应用程序来说什么是“正常”。警报有助于你将系统恢复到已知的良好状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果它移动，我们跟踪它。有时候我们会画出一些尚未移动的图形，以防万一它决定为它运行。&lt;/p&gt;
&lt;p&gt;——Ian Malpass，衡量所有，衡量一切&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;警报也不应该与日志记录混淆。记录用于调试，开发和观察模式。它暴露了应用程序的内部功能。度量有时可以从日志（例如错误率）计算，但需要额外的聚合服务（例如 ElasticSearch）和处理。&lt;/p&gt;
&lt;h3 id=&#34;弹性&#34;&gt;弹性&lt;/h3&gt;
&lt;p&gt;一旦你有遥测和监测数据，你需要确保你的应用程序对故障有适应能力。弹性是基础设施的责任，但云原生应用程序也需要承担部分工作。&lt;/p&gt;
&lt;p&gt;基础设施被设计为抵制失败。硬件用于需要多个硬盘驱动器，电源以及全天候监控和部件更换以保持应用程序可用。使用云原生应用程序，应用程序有责任接受失败而不是避免失败。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在任何平台上，尤其是在云中，最重要的特性是其可靠性。&lt;/p&gt;
&lt;p&gt;——David Rensin，e ARCHITECT Show：来自 Google 的关于云计算的速成课程&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;设计具有弹性的应用程序可能是整本书本身。我们将在云原生应用程序中考虑弹性的两个主要方面：为失败设计和优雅降级。&lt;/p&gt;
&lt;h4 id=&#34;为失败设计&#34;&gt;为失败设计&lt;/h4&gt;
&lt;p&gt;唯一永远不会失败的系统是那些让你活着的系统（例如心脏植入物和刹车系统）。如果你的服务永远不会停止运行，你需要花费太多时间设计它们来抵制故障，并且没有足够的时间增加业务价值。你的 SLO 确定服务需要多长时间。你花费在工程设计上超出 SLO 的正常运行时间的任何资源都将被浪费掉。&lt;/p&gt;
&lt;p&gt;你应该为每项服务测量两个值，即平均无故障时间（MTBF）和平均恢复时间（MTTR）。监控和指标可以让你检测你是否符合你的 SLO，但运行应用程序的平台是保持高 MTBF 和低 MTTR 的关键。&lt;/p&gt;
&lt;p&gt;在任何复杂的系统中，都会有失败。你可以管理硬件中的某些故障（例如，RAID 和冗余电源），以及某些基础设施中的故障（例如负载平衡器）。但是因为应用程序知道他们什么时候健康，所以他们也应该尽可能地管理自己的失败。&lt;/p&gt;
&lt;p&gt;设计一个以失败期望为目标的应用程序将比假定可用性的应用程序更具防御性。当故障不可避免时，将会有额外的检查，故障模式和日志内置到应用程序中。&lt;/p&gt;
&lt;p&gt;知道应用程序可能失败的每种方式是不可能的。假设任何事情都可能并且可能会失败，这是一种云原生应用程序的模式。&lt;/p&gt;
&lt;p&gt;你的应用程序的最佳状态是健康状态。第二好的状态是失败状态。其他一切都是非二进制的，难以监控和排除故障。Honeycomb 首席执行官 CharityMajors 在她的文章“Ops：现在每个人都在工作”中指出：“分布式系统永远不会起作用；它们处于部分退化服务的持续状态。接受失败，设计弹性，保护和缩小关键路径。”&lt;/p&gt;
&lt;p&gt;无论发生什么故障，云原生应用程序都应该是可适应的。他们期望失败，所以他们在检测到时进行调整。&lt;/p&gt;
&lt;p&gt;有些故障不能也不应该被设计到应用程序中（例如，网络分区和可用区故障）。该平台应自主处理未集成到应用程序中的故障域。&lt;/p&gt;
&lt;h4 id=&#34;优雅降级&#34;&gt;优雅降级&lt;/h4&gt;
&lt;p&gt;云原生应用程序需要有一种方法来处理过载，无论它是应用程序还是负载下的相关服务。处理负载的一种方式是优雅降级。 “站点可靠性工程”一书中描述了应用程序的优雅降级，因为它提供的响应在负载过重的情况下“不如正常响应准确或含有较少数据的响应，但计算更容易”。&lt;/p&gt;
&lt;p&gt;减少应用程序负载的某些方面由基础设施处理。智能负载平衡和动态扩展可以提供帮助，但是在某些时候，你的应用程序可能承受的负载比它可以处理的负载更多。云原生应用程序需要知道这种必然性并作出相应的反应。&lt;/p&gt;
&lt;p&gt;优雅降级的重点是允许应用程序始终返回请求的答案。如果应用程序没有足够的本地计算资源，并且依赖服务没有及时返回信息，则这是正确的。依赖于一个或多个其他服务的服务应该可用于应答请求，即使依赖于服务不是。当服务退化时，返回部分答案或使用本地缓存中的旧信息进行答案是可能的解决方案。&lt;/p&gt;
&lt;p&gt;尽管优雅的降级和失败处理都应该在应用程序中实现，但平台的多个层面应该提供帮助。如果采用微服务，则网络基础设施成为需要在提供应用弹性方面发挥积极作用的关键组件。有关构建弹性网络层的更多信息，请参阅附录 A。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可用性数学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生应用程序需要在基础设施之上建立一个平台，以使基础设施更具弹性。如果你希望将现有应用程序“提升并转移”到云中，则应检查云提供商的服务级别协议（SLA），并考虑在使用多个服务时会发生什么情况。&lt;/p&gt;
&lt;p&gt;让我们拿运行我们的应用程序的云来进行假设。&lt;/p&gt;
&lt;p&gt;计算基础设施的典型可用性是每月 99.95％的正常运行时间。这意味着你的实例每天可能会缩短到 43.2 秒，并且仍在你的云服务提供商的 SLA 中。&lt;/p&gt;
&lt;p&gt;另外，实例的本地存储（例如 EBS 卷）也具有 99.95％的可用性正常运行时间。如果幸运的话，他们都会同时出现故障，但最糟糕的情况是他们可能会在不同的时间停机，让你的实例只有 99.9％的可用性。&lt;/p&gt;
&lt;p&gt;你的应用程序可能还需要一个数据库，而不是自己安装一个计算可能的停机时间为 1 分 26 秒（99.9％可用性）的情况下，选择可靠性为 99.95％的更可靠的托管数据库。这使你的应用程序的可靠性达到 99.85％，或者每天可能发生 2 分钟和 9 秒的宕机时间。&lt;/p&gt;
&lt;p&gt;将可用性乘到一起可以快速了解为什么应以不同方式处理云。真正不好的部分是，如果云提供商不符合其 SLA，它将退还其账单中一定比例的退款。&lt;/p&gt;
&lt;p&gt;虽然你不必为停机支付费用，但我们并不知道世界上存在云计算信用的单一业务。如果你的应用程序的可用性不足以超过你收到的信用额度，那么你应该真正考虑是否应该运行这个应用程序。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;声明式非反应式&#34;&gt;声明式，非反应式&lt;/h3&gt;
&lt;p&gt;因为云原生应用程序被设计为在云环境中运行，所以它们与基础设施以及相关依赖应用程序的交互方式不同于传统应用程序。在云原生应用程序中，与任何事物的通信都需要通过网络来进行。很多时候，网络通信是通过 RESTful HTTP 调用完成的，但是也可以通过其他接口实现，比如远程过程调用 (RPC)。&lt;/p&gt;
&lt;p&gt;传统的应用程序会通过向消息队列发送消息、在共享存储上写入文件或触发本地 shell 脚本来执行自动化任务。通信方法基于发生的事件作出反应（例如，如果用户单击提交，运行提交脚本）并且通常需要存在于同一物理或虚拟服务器上的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无服务器平台是云原生化的，并被设计为对事件做出反应。他们在云中工作得很好的原因是他们通过 HTTP API 进行通信，（这些 API）是单一用途的函数，并且在它们的调用中是声明性的。该平台还使它们可伸缩并可从云内访问。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;传统应用程序中的反应式通信通常是构建弹性的一种尝试。如果应用程序（以反应式的方式）在磁盘上或消息队列中写入了一个文件，然后应用程序死亡，那么该消息或文件的结果仍然可以完成。&lt;/p&gt;
&lt;p&gt;这里并不是说不应该使用像消息队列这样的技术，而是说在动态且经常出现故障的系统中，不能将它们作为惟一的弹性层来依赖。从根本上说，在云原生环境之中，应用程序之间的通信方法应该有所变化 - 这不仅是因为还存在其他方法来构建通信弹性（请参阅附录 A），而且还因为如果要让传统的通信方法在云中实现复制，我们往往需要做更多工作。&lt;/p&gt;
&lt;p&gt;当应用程序可以信任通信的弹性时，它们应该放弃反应式并使用声明式。声明式通信信任网络会将消息送达。它也相信应用程序将返回成功或错误。这并不是说让应用程序观察变化不重要。Kubernetes 的控制器对 API 服务器做的就是这个。但是，一旦发现变更，他们就会声明一个新的状态，并相信 API 服务器和 kubelets 会做必要的事情。&lt;/p&gt;
&lt;p&gt;声明式通信模型由于多种原因而变得更加健壮。最重要的是，它规范了通信模型，并且它将（如何从某种状态到达期望状态的）功能实现从应用程序转移到远程 API 或服务端点。这有助于简化应用程序，并使它们彼此的行为更具可预测性。&lt;/p&gt;
&lt;h3 id=&#34;云原生应用程序如何影响基础设施&#34;&gt;云原生应用程序如何影响基础设施？&lt;/h3&gt;
&lt;p&gt;希望你可以知道云原生应用程序与传统应用程序不同。云原生应用程序不能直接在 PaaS 上运行或与服务器的操作系统紧密耦合。它们期望在一个拥有大多数自治系统的动态环境中运行。&lt;/p&gt;
&lt;p&gt;云原生基础设施在提供自主应用管理的 IaaS 之上创建了一个平台。该平台建立在动态创建的基础设施之上，以抽象出单个服务器并促进动态资源分配调度。&lt;/p&gt;
&lt;p&gt;自动化与自治不一样。自动化使人类对他们所采取的行动产生更大的影响。&lt;/p&gt;
&lt;p&gt;云原生是关于不需要人类做出决定的自治系统。它仍然使用自动化，但只有在决定了所需的操作之后。只有在系统不能自动确定正确的事情时才应该通知人。&lt;/p&gt;
&lt;p&gt;具有这些特征的应用程序需要一个能够实际监控，收集度量标准并在发生故障时做出反应的平台。云原生应用程序不依赖于人员设置 ping 检查或创建 Syslog 规则。他们需要从选择基本操作系统或软件包管理器的过程中提取自助服务资源，并依靠服务发现和强大的网络通信来提供丰富的功能体验。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.heptio.com/i-still-remember-the-first-time-i-logged-into-a-production-server-over-ssh-and-telling-myself-i-53ab1d1e7f46&#34; title=&#34;“Cloud Native Infrastructure”, a Free O’Reilly eBook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“Cloud Native Infrastructure”, a Free O’Reilly eBook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>什么是 Istio?</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-istio/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-istio/</guid>
      <description>
        
        
        &lt;p&gt;Istio 是一个服务网格的开源实现。Istio 支持以下功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用配置，我们可以控制服务间的流量。设置断路器、超时或重试都可以通过简单的配置改变来完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可观测性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Istio 通过跟踪、监控和记录让我们更好地了解你的服务，它让我们能够快速发现和修复问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Istio 可以在代理层面上管理认证、授权和通信的加密。我们可以通过快速的配置变更在各个服务中执行政策。&lt;/p&gt;
&lt;h2 id=&#34;istio-组件&#34;&gt;Istio 组件&lt;/h2&gt;
&lt;p&gt;Istio 服务网格有两个部分：数据平面和控制平面。&lt;/p&gt;
&lt;p&gt;在构建分布式系统时，将组件分离成控制平面和数据平面是一种常见的模式。数据平面的组件在请求路径上，而控制平面的组件则帮助数据平面完成其工作。&lt;/p&gt;
&lt;p&gt;Istio 中的数据平面由 Envoy 代理组成，控制服务之间的通信。网格的控制平面部分负责管理和配置代理。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-istio/istio-arch_hu_70b45d1249b7aed0.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-istio/istio-arch.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/what-is-istio/istio-arch.jpg&#34; data-width=&#34;1280&#34; data-height=&#34;720&#34; alt=&#34;image&#34; data-caption=&#34;Istio 架构&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;envoy数据平面&#34;&gt;Envoy（数据平面）&lt;/h3&gt;
&lt;p&gt;Envoy 是一个用 C++ 开发的高性能代理。Istio 服务网格将 Envoy 代理作为一个 sidecar 容器注入到你的应用容器旁边。然后该代理拦截该服务的所有入站和出站流量。注入的代理一起构成了服务网格的数据平面。&lt;/p&gt;
&lt;p&gt;Envoy 代理也是唯一与流量进行交互的组件。除了前面提到的功能 —— 负载均衡、断路器、故障注入等。Envoy 还支持基于 WebAssembly（WASM）的可插拔扩展模型。这种可扩展性使我们能够执行自定义策略，并为网格中的流量生成遥测数据。&lt;/p&gt;
&lt;h3 id=&#34;istiod控制平面&#34;&gt;Istiod（控制平面）&lt;/h3&gt;
&lt;p&gt;Istiod 是控制平面组件，提供服务发现、配置和证书管理功能。Istiod 采用 YAML 编写的高级规则，并将其转换为 Envoy 的可操作配置。然后，它把这个配置传播给网格中的所有 sidecar。&lt;/p&gt;
&lt;p&gt;Istiod 内部的 Pilot 组件抽象出特定平台的服务发现机制（Kubernetes、Consul 或 VM），并将其转换为 sidecar 可以使用的标准格式。&lt;/p&gt;
&lt;p&gt;使用内置的身份和凭证管理，我们可以实现强大的服务间和终端用户认证。通过授权功能，我们可以控制谁可以访问你的服务。&lt;/p&gt;
&lt;p&gt;控制平面的部分以前被称为 Citadel，作为一个证书授权机构，生成证书，允许数据平面中的代理之间进行安全的 mTLS 通信。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Karmada</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/karmada/</link>
      <pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/karmada/</guid>
      <description>
        
        
        &lt;p&gt;Karmada 是一个 Kubernetes 管理系统，使您能够在多个 Kubernetes 集群和云中运行云原生应用程序，而无需更改应用程序。通过使用 Kubernetes 原生 API 并提供先进的调度功能，Karmada 实现了真正的开放式、多云 Kubernetes。&lt;/p&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    Karmada 名称的由来
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    &lt;code&gt;Karmada&lt;/code&gt; 是由“Kubernetes”和“Armada”组合而来的。&lt;code&gt;Armada&lt;/code&gt; 这个词在英语中意味着“舰队”，通常指的是由许多船只组成的大型水面作战力量。在这里，它象征着多个集群的集合，每个集群如同一个强大的船只，共同组成了一个强大的“舰队”（正如 Karmada 的图标是一个舰队一样），协同工作，提高效率和资源利用率。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;关于 Karmada 的更多内容，请访问 &lt;a href=&#34;https://karmada.io/zh/docs/&#34; title=&#34;Karmada 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Karmada 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;karmada-组件概述&#34;&gt;Karmada 组件概述&lt;/h2&gt;
&lt;p&gt;下图展示的是 Karmada 中的各个组件及其关系。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/karmada/arch.webp&#34; data-img=&#34;/book/kubernetes-handbook/multi-cluster/karmada/arch.webp&#34; data-width=&#34;1706&#34; data-height=&#34;1127&#34; alt=&#34;image&#34; data-caption=&#34;Karmada 中的各个组件及其关系&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Karmada 中的各个组件及其关系&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;以下是 Karmada 的主要组件概述以及每个组件的功能说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-apiserver&lt;/strong&gt;：扩展了 Kubernetes API 的 Karmada API 服务器，作为 Karmada 控制平面的前端，使 Karmada 能够简单集成 Kubernetes 生态系统，并允许使用&lt;code&gt;kubectl&lt;/code&gt;操作 Karmada。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-aggregated-apiserver&lt;/strong&gt;：利用 Kubernetes API 聚合层技术的聚合 API 服务器，提供集群 API 和相关子资源，支持通过 karmada-apiserver 访问成员集群。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;kube-controller-manager&lt;/strong&gt;：包含多个控制器的 kube-controller-manager，Karmada 继承了一些来自 Kubernetes 的控制器，以保持用户体验和行为的一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-controller-manager&lt;/strong&gt;：运行多个自定义控制器进程的管理器，这些控制器监视 Karmada 对象并与下层集群的 API 服务器交互，创建常规的 Kubernetes 资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-scheduler&lt;/strong&gt;：负责将 k8s 原生 API 资源对象（包括 CRD 资源）调度到成员集群，根据约束和可用资源确定有效的集群放置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-webhook&lt;/strong&gt;：是 HTTP 回调，处理 Karmada/Kubernetes API 请求的 webhook，可以定义为验证 webhook 和突变 webhook，用于执行自定义策略和修改对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;etcd&lt;/strong&gt;：作为 Karmada/Kubernetes API 对象的后端存储，提供一致且高可用的键值存储。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-agent&lt;/strong&gt;：在 Pull 模式下部署在每个成员集群上的代理，负责将特定集群注册到 Karmada 控制平面并同步清单和状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-scheduler-estimator&lt;/strong&gt;：运行一个精确的集群调度估算器，为调度器提供更精确的集群资源信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-descheduler&lt;/strong&gt;：定期检测所有副本，并根据成员集群中实例状态的变化触发重新调度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmada-search&lt;/strong&gt;：启动一个聚合服务器，提供全局搜索和多云环境中的资源代理等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;karmadactl&lt;/strong&gt;：Karmada 提供的命令行工具，用于与 Karmada 控制平面通信，执行诸如集群加入/退出等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;kubectl karmada&lt;/strong&gt;：以 kubectl 插件的形式提供功能，其实现与&lt;code&gt;karmadactl&lt;/code&gt;完全相同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集群注册概述&#34;&gt;集群注册概述&lt;/h2&gt;
&lt;p&gt;Karmada 允许用户将多个集群注册到 Karmada 控制平面，以便进行统一管理和调度。集群注册的过程涉及到在 Karmada 控制平面和目标集群之间建立连接。&lt;/p&gt;
&lt;p&gt;Karmada 的集群注册，包括了&lt;code&gt;Push&lt;/code&gt;模式和&lt;code&gt;Pull&lt;/code&gt;模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Push 模式&lt;/strong&gt;：Karmada 控制平面直接访问成员集群的&lt;code&gt;kube-apiserver&lt;/code&gt;以获取集群状态和部署清单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pull 模式&lt;/strong&gt;：控制平面不直接访问成员集群，而是通过一个叫做&lt;code&gt;karmada-agent&lt;/code&gt;的额外组件来委派任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注册集群---push-模式&#34;&gt;注册集群 - Push 模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;kubectl-karmada&lt;/code&gt;命令行工具通过&lt;code&gt;join&lt;/code&gt;命令注册集群，通过&lt;code&gt;unjoin&lt;/code&gt;命令取消注册。&lt;/li&gt;
&lt;li&gt;注册和取消注册时，需要指定 Karmada 的&lt;code&gt;kubeconfig&lt;/code&gt;文件和成员集群的&lt;code&gt;kubeconfig&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;可以通过&lt;code&gt;--cluster-context&lt;/code&gt;标志自定义集群上下文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注册集群---pull-模式&#34;&gt;注册集群 - Pull 模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;karmadactl register&lt;/code&gt;命令以 Pull 模式注册成员集群。&lt;/li&gt;
&lt;li&gt;注册过程中需要在 Karmada 控制平面创建引导令牌，并在成员集群执行注册命令。&lt;/li&gt;
&lt;li&gt;成员集群注册后，&lt;code&gt;karmada-agent&lt;/code&gt;将在其启动阶段自动完成集群的注册。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集群标识符&#34;&gt;集群标识符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个在 Karmada 注册的集群都会被表示为一个&lt;code&gt;Cluster&lt;/code&gt;对象，对象的名称 (&lt;code&gt;.metadata.name&lt;/code&gt;) 是注册时使用的名称。&lt;/li&gt;
&lt;li&gt;在注册过程中，每个集群都会被分配一个&lt;code&gt;.spec.id&lt;/code&gt;中的&lt;code&gt;独特标识符&lt;/code&gt;，这主要用于技术上区分每个集群，防止同一个集群被多次以不同的名称注册。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>Kubernetes 架构</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 最初源于谷歌内部的 Borg，提供了面向应用的容器集群部署和管理系统。Kubernetes 的目标旨在消除编排物理 / 虚拟计算，网络和存储基础设施的负担，并使应用程序运营商和开发人员完全将重点放在以容器为中心的原语上进行自助运营。Kubernetes 也提供稳定、兼容的基础（平台），用于构建定制化的 workflows 和更高级的自动化任务。&lt;/p&gt;
&lt;p&gt;Kubernetes 具备完善的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、内建负载均衡器、故障发现和自我修复能力、服务滚动升级和在线扩容、可扩展的资源自动调度机制、多粒度的资源配额管理能力。Kubernetes 还提供完善的管理工具，涵盖开发、部署测试、运维监控等各个环节。&lt;/p&gt;
&lt;h2 id=&#34;borg-简介&#34;&gt;Borg 简介&lt;/h2&gt;
&lt;p&gt;Borg 是谷歌内部的大规模集群管理系统，负责对谷歌内部很多核心服务的调度和管理。Borg 的目的是让用户能够不必操心资源管理的问题，让他们专注于自己的核心业务，并且做到跨多个数据中心的资源利用率最大化。&lt;/p&gt;
&lt;p&gt;Borg 主要由 BorgMaster、Borglet、borgcfg 和 Scheduler 组成，如下图所示&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/borg_hu_b029e6a04e16055c.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/borg.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/borg.png&#34; data-width=&#34;572&#34; data-height=&#34;549&#34; alt=&#34;image&#34; data-caption=&#34;Borg 架构&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Borg 架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;BorgMaster 是整个集群的大脑，负责维护整个集群的状态，并将数据持久化到 Paxos 存储中；&lt;/li&gt;
&lt;li&gt;Scheduer 负责任务的调度，根据应用的特点将其调度到具体的机器上去；&lt;/li&gt;
&lt;li&gt;Borglet 负责真正运行任务（在容器中）；&lt;/li&gt;
&lt;li&gt;borgcfg 是 Borg 的命令行工具，用于跟 Borg 系统交互，一般通过一个配置文件来提交任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-架构&#34;&gt;Kubernetes 架构&lt;/h2&gt;
&lt;p&gt;Kubernetes 借鉴了 Borg 的设计理念，比如 Pod、Service、Label 和单 Pod 单 IP 等。Kubernetes 的整体架构跟 Borg 非常像，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/architecture_hu_8c6c3c950f447ae0.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/architecture.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/architecture.png&#34; data-width=&#34;2409&#34; data-height=&#34;1984&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 架构&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes 架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Kubernetes 主要由以下几个核心组件组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etcd 保存了整个集群的状态；&lt;/li&gt;
&lt;li&gt;apiserver 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制；&lt;/li&gt;
&lt;li&gt;controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；&lt;/li&gt;
&lt;li&gt;scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上；&lt;/li&gt;
&lt;li&gt;kubelet 负责维护容器的生命周期，同时也负责 Volume（CSI）和网络（CNI）的管理；&lt;/li&gt;
&lt;li&gt;Container runtime 负责镜像管理以及 Pod 和容器的真正运行（CRI）；&lt;/li&gt;
&lt;li&gt;kube-proxy 负责为 Service 提供 cluster 内部的服务发现和负载均衡；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了核心组件，还有一些推荐的插件，其中有的已经成为 CNCF 中的托管项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CoreDNS 负责为整个集群提供 DNS 服务&lt;/li&gt;
&lt;li&gt;Ingress Controller 为服务提供外网入口&lt;/li&gt;
&lt;li&gt;Prometheus 提供资源监控&lt;/li&gt;
&lt;li&gt;Dashboard 提供 GUI&lt;/li&gt;
&lt;li&gt;Federation 提供跨可用区的集群&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-架构示意图&#34;&gt;Kubernetes 架构示意图&lt;/h2&gt;
&lt;h3 id=&#34;整体架构&#34;&gt;整体架构&lt;/h3&gt;
&lt;p&gt;下图清晰表明了 Kubernetes 的架构设计以及组件之间的通信协议。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-high-level-component-archtecture_hu_532d95a227b54305.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-high-level-component-archtecture.jpg&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-high-level-component-archtecture.jpg&#34; data-width=&#34;1858&#34; data-height=&#34;1126&#34; alt=&#34;image&#34; data-caption=&#34;Kuberentes 架构（图片来自于网络）&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kuberentes 架构（图片来自于网络）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面是更抽象的一个视图：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-whole-arch_hu_f240f617ab63ebab.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-whole-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-whole-arch.png&#34; data-width=&#34;1600&#34; data-height=&#34;1067&#34; alt=&#34;image&#34; data-caption=&#34;kubernetes 整体架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;kubernetes 整体架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;master-架构&#34;&gt;Master 架构&lt;/h3&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-master-arch_hu_494394b5a200ca1c.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-master-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-master-arch.png&#34; data-width=&#34;1600&#34; data-height=&#34;1067&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes master 架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes master 架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;node-架构&#34;&gt;Node 架构&lt;/h3&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-node-arch_hu_3a825d1ea0d8dc81.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-node-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-node-arch.png&#34; data-width=&#34;1600&#34; data-height=&#34;1067&#34; alt=&#34;image&#34; data-caption=&#34;kubernetes node 架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;kubernetes node 架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;分层架构&#34;&gt;分层架构&lt;/h3&gt;
&lt;p&gt;Kubernetes 设计理念和功能其实就是一个类似 Linux 的分层架构，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-layers-arch_hu_f7b267fc9f530dd7.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-layers-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-layers-arch.png&#34; data-width=&#34;1898&#34; data-height=&#34;1008&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 分层架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes 分层架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;核心层：Kubernetes 最核心的功能，对外提供 API 构建高层的应用，对内提供插件式应用执行环境&lt;/li&gt;
&lt;li&gt;应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS 解析等）、Service Mesh（部分位于应用层）&lt;/li&gt;
&lt;li&gt;管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态 Provision 等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy 等）、Service Mesh（部分位于管理层）&lt;/li&gt;
&lt;li&gt;接口层：kubectl 命令行工具、客户端 SDK 以及集群联邦&lt;/li&gt;
&lt;li&gt;生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴
&lt;ul&gt;
&lt;li&gt;Kubernetes 外部：日志、监控、配置管理、CI/CD、Workflow、FaaS、OTS 应用、ChatOps、GitOps、SecOps 等&lt;/li&gt;
&lt;li&gt;Kubernetes 内部：CRI、CNI、CSI、镜像仓库、Cloud Provider、集群自身的配置和管理等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    备注
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    关于分层架构，可以关注下 &lt;a href=&#34;https://docs.google.com/document/d/1XkjVm4bOeiVkj-Xt1LgoGiqWsBfNozJ51dyI-ljzt1o&#34; title=&#34;Kubernetes architectual roadmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes architectual roadmap&lt;/a&gt; 和 &lt;a href=&#34;https://docs.google.com/presentation/d/1GpELyzXOGEPY0Y1ft26yMNV19ROKt8eMN67vDSSHglk/edit&#34; title=&#34;幻灯片&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;幻灯片&lt;/a&gt;。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/perspective/&#34;&gt;Kubernetes 的设计理念&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/etcd/&#34;&gt;Etcd 解析&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/&#34;&gt;开放接口&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/pod-state-and-lifecycle/&#34;&gt;Pod 状态与生命周期管理&lt;/a&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2898444&#34; title=&#34;Borg, Omega, and Kubernetes - Lessons learned from three container-management systems over a decade&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borg, Omega, and Kubernetes - Lessons learned from three container-management systems over a decade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43438.pdf&#34; title=&#34;Paper - Large-scale cluster management at Google with Borg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paper - Large-scale cluster management at Google with Borg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thenewstack.io/kubernetes-an-overview&#34; title=&#34;KUBERNETES: AN OVERVIEW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KUBERNETES: AN OVERVIEW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1XkjVm4bOeiVkj-Xt1LgoGiqWsBfNozJ51dyI-ljzt1o&#34; title=&#34;Kubernetes architectual roadmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes architectual roadmap&lt;/a&gt; 和 &lt;a href=&#34;https://docs.google.com/presentation/d/1GpELyzXOGEPY0Y1ft26yMNV19ROKt8eMN67vDSSHglk/edit&#34; title=&#34;slide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>执行摘要</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/executive-summary/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/executive-summary/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes® 是一个开源系统，可以自动部署、扩展和管理在容器中运行的应用程序，并且通常托管在云环境中。与传统的单体软件平台相比，使用这种类型的虚拟化基础设施可以提供一些灵活性和安全性的好处。然而，安全地管理从微服务到底层基础设施的所有方面，会引入其他的复杂性。本报告中详述的加固指导旨在帮助企业处理相关风险并享受使用这种技术的好处。&lt;/p&gt;
&lt;p&gt;Kubernetes 中三个常见的破坏源是供应链风险、恶意威胁者和内部威胁。&lt;/p&gt;
&lt;p&gt;供应链风险往往是具有挑战性的，可以在容器构建周期或基础设施收购中出现。恶意威胁者可以利用 Kubernetes 架构的组件中的漏洞和错误配置，如控制平面、工作节点或容器化应用程序。内部威胁可以是管理员、用户或云服务提供商。对组织的 Kubernetes 基础设施有特殊访问权的内部人员可能会滥用这些特权。&lt;/p&gt;
&lt;p&gt;本指南描述了与设置和保护 Kubernetes 集群有关的安全挑战。包括避免常见错误配置的加固策略，并指导国家安全系统的系统管理员和开发人员如何部署 Kubernetes，并提供了建议的加固措施和缓解措施的配置示例。本指南详细介绍了以下缓解措施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扫描容器和 Pod 的漏洞或错误配置。&lt;/li&gt;
&lt;li&gt;以尽可能少的权限运行容器和 Pod。&lt;/li&gt;
&lt;li&gt;使用网络隔离来控制漏洞可能造成的损害程度。&lt;/li&gt;
&lt;li&gt;使用防火墙来限制不需要的网络连接，并使用加密技术来保护机密。&lt;/li&gt;
&lt;li&gt;使用强大的认证和授权来限制用户和管理员的访问，以及限制攻击面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用日志审计，以便管理员可以监控活动，并对潜在的恶意活动发出警告。&lt;/p&gt;
&lt;p&gt;定期审查所有 Kubernetes 设置，并使用漏洞扫描，以帮助确保风险得到适当考虑并应用安全补丁。&lt;/p&gt;
&lt;p&gt;有关其他安全加固指导，请参见互联网安全中心 Kubernetes 基准、Docker 和 Kubernetes 安全技术实施指南、网络安全和基础设施安全局（CISA）分析报告以及 Kubernetes 文档。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Kubernetes 次世代的云原生应用</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/</guid>
      <description>
        
        
        &lt;h2 id=&#34;重点&#34;&gt;重点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云原生基础设施已渡过了野蛮生长期，正朝着统一应用标准方向迈进。&lt;/li&gt;
&lt;li&gt;Kubernetes 的原语无法完整描述云原生应用体系，且在资源的配置上开发与运维功能耦合严重。&lt;/li&gt;
&lt;li&gt;Operator 在扩展了 Kubernetes 生态的同时导致云原生应用碎片化，亟需一个统一的应用定义标准。&lt;/li&gt;
&lt;li&gt;OAM 的本质是将云原生应用定义中的研发、运维关注点分离，资源对象进行进一步抽象，化繁为简，包罗万象。&lt;/li&gt;
&lt;li&gt;“Kubernetes 次世代”是指在 Kubernetes 成为基础设施层标准之后，云原生生态的关注点正在向应用层过度，近两年来火热的 Service Mesh 正是该过程中的一次有力探索，而基于 Kubernetes 的云原生&lt;strong&gt;应用&lt;/strong&gt;架构的时代即将到来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 已成为云原生应用的既定运行平台，本文以 Kubernetes 为默认平台展开，包括云原生应用的分层模型。&lt;/p&gt;
&lt;h2 id=&#34;云原生的不同发展阶段&#34;&gt;云原生的不同发展阶段&lt;/h2&gt;
&lt;p&gt;Kubernetes 从开源至今已经走过快六个年头（2014 年 6 月开源）了，可以说是 Kubernetes 的诞生开启了整个云原生的时代。我粗略的将云原生的发展划分为以下几个时期。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/cloud-native-stages.svg&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/post-kubernetes-era/cloud-native-stages.svg&#34; alt=&#34;image&#34; data-caption=&#34;云原生的发展阶段&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;云原生的发展阶段&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;第一阶段：孵化期（2014 年）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2014 年，Google 开源 Kubernetes，在此之前的 2013 年，Docker 开源，DevOps、微服务已变得十分流行，云原生的概念已经初出茅庐。在开源了 Kubernetes 之后，Google 联合其他厂商发起成立了 CNCF，并将 Kubernetes 作为初创项目捐献给了 CNCF。CNCF 作为云原生的背后推手，开始推广 Kubernetes。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二阶段：高速发展期（2015 年 - 2016 年）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这几年间，Kubernetes 保持着高速发展，并于 2017 年打败了 Docker Swarm、Mesos，确立了容器编排工具领导者的地位。CRD 和 Operator 模式的诞生，大大增强了 Kubernetes 的扩展性，促进了周边生态的繁荣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三阶段：野蛮生长期（2017 年 - 2018 年）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2016 年之后的云原生基本都默认运行在 Kubernetes 平台上，2017、2018 年 Google 主导的 Istio、Knative 相继开源，这些开源项目都大量利用了 Kubernetes 的 Operator 进行了扩展，Istio 刚发布时就有 50 多个 CRD 定义。Istio 号称是&lt;a href=&#34;https://jimmysong.io/blog/service-mesh-the-microservices-in-post-kubernetes-era/&#34; title=&#34;后 Kubernetes 时代的微服务&#34;&gt;后 Kubernetes 时代的微服务&lt;/a&gt;，它的出现第一次使得云原生以服务（应用）为中心。Knative 是 Google 在基于 Kubernetes 之上开源的 Serverless 领域的一次尝试。2018 年 Kubernetes 正式从 CNCF &lt;a href=&#34;https://www.cncf.io/blog/2018/03/06/kubernetes-first-cncf-project-graduate/&#34; title=&#34;毕业&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;毕业&lt;/a&gt;，Prometheus、Envoy 也陆续从 CNCF 毕业。CNCF 也与 2018 年修改了 charter，对云原生进行了重定义，从原来的三要素：”应用容器化；面向微服务架构；应用支持容器的编排调度“，修改为”云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API“。这一年，我曾写过两篇 Kubernetes 及云原生发展的年终总结和展望，见 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/appendix/kubernetes-and-cloud-native-summary-in-2017-and-outlook-for-2018.html&#34; title=&#34;2017 年&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 年&lt;/a&gt;和 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/appendix/kubernetes-and-cloud-native-summary-in-2018-and-outlook-for-2019.html&#34; title=&#34;2018 年&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018 年&lt;/a&gt;的预测和总结。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四阶段：普及推广期（2019 年至今）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经过几年的发展，Kubernetes 已经得到的大规模的应用，云原生的概念开始深入人心，Kubernetes 号称是云原生的操作系统，基于 Operator 模式的生态大放异彩。整合 Kubernetes 和云基础设施，研发和运维关注点分离。Kubernetes 到 Service Mesh（后 Kubernetes 时代的微服务），基于 Kubernetes 的 Serverless 都在快速发展，OAM 诞生，旨在定义云原生应用标准。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-开辟了云原生时代&#34;&gt;Kubernetes 开辟了云原生时代&lt;/h2&gt;
&lt;p&gt;Kubernetes 开源之初就继承了 Google 内部调度系统 Borg 的经验，屏蔽掉了底层物理机、虚拟机之间的差异，经过几年时间的发展成为了容器编排标准，进而统一了 PaaS 平台的基础设施层。&lt;/p&gt;
&lt;p&gt;下图是 Kubernetes 原生内置的可以应用到一个 Pod 上的所有控制器、资源对象等。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/kubernetes-concepts_hu_dac826e3c8bfa0f.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/kubernetes-concepts.png&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/post-kubernetes-era/kubernetes-concepts.png&#34; data-width=&#34;800&#34; data-height=&#34;596&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 概念&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes 概念&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图片来自图书 &lt;a href=&#34;https://www.redhat.com/cms/managed-files/cm-oreilly-kubernetes-patterns-ebook-f19824-201910-en.pdf&#34; title=&#34;Kubernetes Patterns（O’Reilly）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Patterns（O’Reilly）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 作为云原生基础设施设计之初遵循了以下原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础设施即代码（声明式 API）&lt;/li&gt;
&lt;li&gt;不可变基础设施&lt;/li&gt;
&lt;li&gt;幂等性&lt;/li&gt;
&lt;li&gt;调节器模式（Operator 的原理）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中声明式 API 可谓开创了云原生时代的基调，而调节器模式是 Kubernetes 区别于其他&lt;a href=&#34;https://jimmysong.io/book/cloud-native-infra/evolution-of-cloud-native-developments/&#34; title=&#34;云部署形式&#34;&gt;云部署形式&lt;/a&gt;的主要区别之一，这也为后来的 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/54633203&#34; title=&#34;Operator 框架的诞生&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Operator 框架的诞生&lt;/a&gt;打下了基础。&lt;/p&gt;
&lt;h3 id=&#34;声明式-api&#34;&gt;声明式 API&lt;/h3&gt;
&lt;p&gt;根据声明式 API 可以做应用编排，定义组件间的依赖，通常使用人类易读的 YAML 文件来表示。但是，YAML 文件声明的字段真的就是最终的状态吗？有没有可能动态改变？&lt;/p&gt;
&lt;p&gt;我们在创建 &lt;code&gt;Deployment&lt;/code&gt; 时会指定 Pod 的副本数，但是其实际副本数并不一定是一成不变的。假如集群中还有定义 HPA，那么 Pod 的副本数就可能随着一些外界因素（比如内存、CPU 使用率或者自定义 metric）而改变，而且如果集群中还有运行自定义的控制器话，那么也有可能修改应用的实例数量。在有多个控制器同时控制某个资源对象时，如何确保控制器之间不会发生冲突，资源对象的状态可预期？可使用&lt;a href=&#34;https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/#monitoring-admission-webhooks&#34; title=&#34;动态准入控制&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;动态准入控制&lt;/a&gt;来达到这一点。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-原生应用&#34;&gt;Kubernetes 原生应用&lt;/h3&gt;
&lt;p&gt;我们都知道要想运行一个应用至少需要以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用的业务逻辑（代码）、运行时（可运行的二进制文件、字节码或脚本）。&lt;/li&gt;
&lt;li&gt;应用的配置注入（配置文件、环境变量等），身份、路由、服务暴露等满足应用的安全性和可访问性。&lt;/li&gt;
&lt;li&gt;应用的生命周期管理（各种 Controller 登场）。&lt;/li&gt;
&lt;li&gt;可观测性、可运维、网络和资源及环境依赖、隔离性等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图展示了基于 Kubernetes 原语及 PaaS 平台资源的 Kubernetes 原生应用的组成。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/kubernetes-native-application-motion.gif&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/post-kubernetes-era/kubernetes-native-application-motion.gif&#34; data-width=&#34;600&#34; data-height=&#34;334&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 原生应用&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes 原生应用&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们都知道 Kubernetes 提供了大量的&lt;a href=&#34;https://kubernetes.io/docs/concepts/&#34; title=&#34;原语&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原语&lt;/a&gt;，用户可以基于这些原语来编排服务，管理应用的生命周期。上图展示的是基于 Kubernetes 原生应用可以使用的 Kubernetes 原语、扩展及平台层资源，从内向外的对象跟应用程序（业务逻辑）的关联度依次降低，到最外层基本只剩下平台资源依赖，已经与 Kubernetes 几乎没有关系了。该图里仅展示了部分资源和对象（包含阿里巴巴开源的 &lt;a href=&#34;https://github.com/openkruise/kruise&#34; title=&#34;OpenKruise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenKruise&lt;/a&gt;、Istio），实际上 &lt;a href=&#34;https://operatorhub.io/&#34; title=&#34;Operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Operator&lt;/a&gt; 资源之丰富，也是 Kubernetes 生态如此繁荣的原因之一。&lt;/p&gt;
&lt;p&gt;Kubernetes 本身的原语、资源对象、配置、常用的 CRD 扩展有几十、上百个之多。开发者需要了解这些复杂的概念吗？我只是想部署一个应用而已！不用所对于应用开发者，即使对于基础实施开发和运维人员也需要很陡峭的学习曲线才能完全掌握它。&lt;/p&gt;
&lt;p&gt;我将 Kubernetes 原生应用所需要的定义和资源进行了分层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心层&lt;/strong&gt;：应用逻辑、服务定义、生命周期控制；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离与服务访问层&lt;/strong&gt;：资源限制与隔离、配置、身份、路由规则等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度层&lt;/strong&gt;：各种调度控制器，这也是 Kubernetes 原生应用的主要扩展层；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源层&lt;/strong&gt;：提供网络、存储和其他平台资源；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而这些不同的层，完全可以将其职责分配给相应的人员，比如核心层是由应用程序开发者负责，将其职责分离，可以很大程度上降低开发和运维的复杂度。&lt;/p&gt;
&lt;p&gt;云原生应用落实到 Kubernetes 平台之上，仅仅利用 Kubernetes 的对象原语已很难描述一个复杂的应用程序，所以诞生了各种各样的 Operator，但这也仅仅解决了单个应用的定义，对于应用的打包封装则无能为力。&lt;/p&gt;
&lt;p&gt;同一个资源对象又有多种实现方式，比如 Ingress 就有 &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1DnsHtdHbxjvHmxvlu7VhzWcWgLAn_Mc5L1WlhLDA__k/edit#gid=0&#34; title=&#34;10 多种实现&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10 多种实现&lt;/a&gt;，PV 就更不用说，对于开发者究竟如何选择，平台如何管理，这都是让人很头疼的问题。而且有时候平台所提供的扩展能力还可能会有冲突，这些能力有的可能互不相干，有的可能会有正交，有的可能完全重合。且应用本身与运维特性之间存在太多耦合，不便于复用。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/resources-motion.gif&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/post-kubernetes-era/resources-motion.gif&#34; data-width=&#34;600&#34; data-height=&#34;363&#34; alt=&#34;image&#34; data-caption=&#34;资源交集动画&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;资源交集动画&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;上图中不同颜色的方框代表不同的资源类别，红线框代表不能为一个资源同时应用该配置，否则会出现冲突，不同的颜色上面是一个动画，展示的是部分资源组合。图中仅包含了部分 Kubernetes 中的原语和 Istio 中的资源对象组合及自定义扩展，实际上用户可以根据应用的自身特点，基于 Kubernetes 原语和 CRD 创建出千变万化的组合。&lt;/p&gt;
&lt;p&gt;为了管理这些应用诞生出了众多的 &lt;a href=&#34;https://github.com/operator-framework/awesome-operators&#34; title=&#34;Operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Operator&lt;/a&gt;。Kubernetes 1.7 版本以来就引入了&lt;a href=&#34;https://kubernetes.io/docs/concepts/api-extension/custom-resources/&#34; title=&#34;自定义控制器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义控制器&lt;/a&gt;的概念，该功能可以让开发人员扩展添加新功能，更新现有的功能，并且可以自动执行一些管理任务，这些自定义的控制器就像 Kubernetes 原生的组件一样，Operator 直接使用 Kubernetes API 进行开发，也就是说它们可以根据这些控制器内部编写的自定义规则来监控集群、更改 Pods/Services、对正在运行的应用进行扩缩容。&lt;/p&gt;
&lt;p&gt;Operator 的本质是一种调节器模式（Reconciler Pattern）的应用，跟 Kubernetes 本身的实现模式是一样的，用于管理云原生应用，协调应用的实际状态达到预期状态。&lt;/p&gt;
&lt;p&gt;调节器模式的四个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的输入和输出都使用数据结构。&lt;/li&gt;
&lt;li&gt;确保数据结构是不可变的。&lt;/li&gt;
&lt;li&gt;保持资源映射简单。&lt;/li&gt;
&lt;li&gt;使实际状态符合预期状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;云原生应用走向碎片化&#34;&gt;云原生应用走向碎片化&lt;/h2&gt;
&lt;p&gt;利用声明式 API 及调节器模式，理论上可以在 Kubernetes 上部署任何可声明应用，但是在 Operator 出现之前，管理 Kubernetes 上的有状态应用一直是一个难题，随着 Operator 模式的确立，该难题已得以解决，并促进了 Kubernetes 生态的进一步发展。随着该生态的繁荣，有一种碎片化的特征正在显现。&lt;/p&gt;



&lt;div class=&#34;alert alert-warn-container&#34;&gt;
  
  &lt;div class=&#34;alert-warn-title px-2 py-2&#34;&gt;
    云原生应用碎片化的体现
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warn px-2&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;Operator 模式将运维人员的反应式经验转化成基于 &lt;code&gt;Reconcile&lt;/code&gt; 模式的代码，统一了有状态应用的管理模式，极大得扩展了 Kubernetes 应用生态。&lt;/li&gt;
&lt;li&gt;开发者在引用 Operator 所提供的能力时没有统一的视图，加大了基础设施运维与开发者之间的沟通成本。&lt;/li&gt;
&lt;li&gt;Operator 总体上治理松散，没有统一的管控机制，在同时应用时可能导致互相冲突或无法预期的结果发生。&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;有状态应用管理难题&#34;&gt;有状态应用管理难题&lt;/h3&gt;
&lt;p&gt;Kubernetes 对于无状态应用的管理很出色，但是对于有状态应用就不是那么回事了。虽然 StatefulSet 可以帮助管理有状态应用，但是这还远远不够，有状态应用往往有复杂的依赖。声明式的 API 里往往要加载着大量的配置和启动脚本，才能实现一个复杂应用的 Kubernetes 化。&lt;/p&gt;
&lt;p&gt;例如在 2017 年初，Operator Framework 出现之前，需要使用大量的 &lt;code&gt;ConfigMap&lt;/code&gt;、复杂的启动脚本才能&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/guide/migrating-hadoop-yarn-to-kubernetes.html&#34; title=&#34;在 Kubernetes 上定义 Hadoop YARN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Kubernetes 上定义 Hadoop YARN&lt;/a&gt; 和&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/usecases/running-spark-with-kubernetes-native-scheduler.html&#34; title=&#34;运行 Spark&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;运行 Spark&lt;/a&gt;。虽然 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/&#34; title=&#34;StatefulSet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;StatefulSet&lt;/code&gt;&lt;/a&gt; 号称可以解决有状态应用的部署问题，但是它主要是保证了 Pod 的在启动、伸缩时的顺序和使 Pod 具有稳定的标识。但是很多分布式应用来说并不仅依靠启动顺序就可以保证其状态，根据其在分布式应用中的角色不同（master/worker）而需要有大量的自定义配置，在没有 Operator 之前这些配置通常是通过一些自定义脚本来实现，这些脚本可能存在于应用镜像中，也可以通过 &lt;code&gt;ConfigMap&lt;/code&gt; 挂在到容器运行时，但无论如何这些脚本都可能因为散落在各处，这些脚本还是面向过程的，跟在 Kubernetes 诞生之前的运维方式毫无二致，这极其不便于版本控制和运维管理。&lt;/p&gt;
&lt;h3 id=&#34;operator-统一了-kubernetes-应用运维框架&#34;&gt;Operator 统一了 Kubernetes 应用运维框架&lt;/h3&gt;
&lt;p&gt;Operator 大大增强了 Kubernetes 的可扩展性，丰富了以 Kubernetes 为基础的云原生生态，许多原先不是为 Kubernetes 而构建的应用纷纷通过&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54633203&#34; title=&#34;构建自己的 Operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建自己的 Operator&lt;/a&gt; 迁移到 Kubernetes 上。还有一些直接基于 Kubernetes 构建的 Service Mesh、Serverless 框架，它们应用 Operator 模式（如 &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https://knative.dev&#34; title=&#34;Knative&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative&lt;/a&gt;），试图成为云原生应用的基础设施层，补齐 Kubernetes 在服务治理、无服务架构等方面的短板，随着大量的 CRD、Operator 控制器的出现，而 Kubernetes 却无法以应用的视角来管理这些能力及其背后零散的 CRD，这使得云原生应用碎片化。&lt;/p&gt;
&lt;p&gt;Operator 百花齐放，在没有一个大一统的视图之前，各个控制器之间存在着这样的关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;独立&lt;/strong&gt;：互不干涉，比如 Controller 与服务发现之间就不存在冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可组合&lt;/strong&gt;：例如 &lt;code&gt;Service&lt;/code&gt;、&lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;DestinationRule&lt;/code&gt; 同属一类资源（可访问性与路由），就是可组合的（后两者是 Istio 中的 CRD，用于流量管理）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有冲突&lt;/strong&gt;：例如图中的 &lt;code&gt;CronHorizontalPodAutoscaler&lt;/code&gt;（CRD）、&lt;code&gt;HorizontalPodAutoscaler&lt;/code&gt;（Kubernetes 内置），同时使用可能导致无法意料的情况发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正是以为这样复杂的关系，导致其无法做到开箱即用，还需要基础设施团队基于云原生社区和生态自己构建出来的，比如&lt;a href=&#34;https://jimmysong.io/awesome-cloud-native/#application-delivery&#34; title=&#34;应用交付领域&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;应用交付领域&lt;/a&gt;的系列开源项目。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用管理工具-helm&#34;&gt;云原生应用管理工具 Helm&lt;/h2&gt;
&lt;p&gt;Kubernetes 之上有很多能力缺失，比如应用构建、发布、管理和运维等，Helm 的出现主要补偿了应用打包和版本管理的缺陷。其中云原生应用的配置包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序启动时加载的配置文件；&lt;/li&gt;
&lt;li&gt;应用程序的运维配置，如资源申请限额；&lt;/li&gt;
&lt;li&gt;应用程序的服务发现配置；&lt;/li&gt;
&lt;li&gt;应用程序的工作负载、发布策略、依赖等；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些配置可以存在于 &lt;code&gt;ConfigMap&lt;/code&gt;、&lt;code&gt;Deployment&lt;/code&gt;、&lt;code&gt;Service&lt;/code&gt;、&lt;code&gt;Ingress&lt;/code&gt; 等 Kubernetes 的多个资源文件中，如何保证应用程序的复用性？应用程序之间有依赖该如何解决？这是时候你可能自然的想到了 Helm。&lt;/p&gt;



&lt;div class=&#34;alert alert-warn-container&#34;&gt;
  
  &lt;div class=&#34;alert-warn-title px-2 py-2&#34;&gt;
    云原生应用打包和发布管理
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warn px-2&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;Helm 通过 chart 模板，提高了应用程序的复用性并解决了部分依赖问题；&lt;/li&gt;
&lt;li&gt;Chart 仓库提供了云原生应用程序的统一管控视图；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt; 概念的引入，使得云原生应用版本化管理进一步加强；&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Helm 主要关注的是 &lt;a href=&#34;https://12factor.net/zh_cn/&#34; title=&#34;12 因素应用&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12 因素应用&lt;/a&gt;法则&lt;a href=&#34;https://12factor.net/zh_cn/build-release-run&#34; title=&#34;构建、发布、运行&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建、发布、运行&lt;/a&gt;这一原则中的”发布”这一环节。下图是 Helm v3 的架构图。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/helm-chart.svg&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/post-kubernetes-era/helm-chart.svg&#34; alt=&#34;image&#34; data-caption=&#34;Helm3 架构&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Helm3 架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Helm 可以安装本地或者远程的 chart，当 chart 安装到 Kubernetes 中后就会创建一个 release，每次更新该 chart 的配置并执行 &lt;code&gt;helm upgrade&lt;/code&gt;，release 的版本数就会加 1，开发者可以升级 chart 或回滚到历史版本。&lt;/p&gt;
&lt;h3 id=&#34;打包配置和发布&#34;&gt;打包、配置和发布&lt;/h3&gt;
&lt;p&gt;Helm 和 chart 的主要作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序封装&lt;/li&gt;
&lt;li&gt;版本管理&lt;/li&gt;
&lt;li&gt;依赖检查&lt;/li&gt;
&lt;li&gt;便于应用程序分发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;打包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Helm 采用 &lt;a href=&#34;https://helm.sh/docs/topics/charts/&#34; title=&#34;Chart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chart&lt;/a&gt; 的格式来标准化描述应用，可以将目录打包成版本化的压缩包进行部署理论上一个 Chart 是可以嵌套若干个 Chart 并定义依赖关系，组织形式非常灵活。Helm chart 用于打包 Kubernetes 原生应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用配置参数，在 Chart 中由 &lt;code&gt;values.yaml&lt;/code&gt; 和命令行参数组成。Chart 采用 Go Template 的特性和 &lt;code&gt;values.yaml&lt;/code&gt; 对部署的模板文件进行参数渲染，也可以通过 &lt;code&gt;helm&lt;/code&gt; 命令 &lt;code&gt;--set key=value&lt;/code&gt; 的方式进行参数赋值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Release 代表 Chart 在集群中的运行实例，Helm 围绕 Release 对应用提供了强大的生命周期管理能力，包括 Release 的查询、安装、更新、删除、回滚等。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用&#34;&gt;云原生应用&lt;/h2&gt;
&lt;p&gt;以上关注的点都是基于 Kubernetes 原语的实现，虽然基于 Kubernetes 构建的 PaaS 平台部分屏蔽了底层基础设施的差异，但是仍有很多云服务是无法通过 Kubernetes 创建，或者需要提前创建供 Kubernetes 原生应用使用的，这些应用通常不运行在 Kubernetes 集群中。因此创建和管理一个云原生应用程序需要考虑以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行时：ECS、Docker、KataContainer、gVisor 等；&lt;/li&gt;
&lt;li&gt;资源隔离性：多租户、VPC、Namespace、防火墙；&lt;/li&gt;
&lt;li&gt;资源调度：各种类型的 controller；&lt;/li&gt;
&lt;li&gt;网络可达性：Service、Ingress、Egress、Gateway、VirtualService、DestinationRule、LoadBalancer、ServiceEntry 等；&lt;/li&gt;
&lt;li&gt;可观测性：日志、分布式追踪、指标；&lt;/li&gt;
&lt;li&gt;安全性：SecurityPolicy、NetworkPolicy、AuthorizationPolicy；&lt;/li&gt;
&lt;li&gt;平台资源申请：数据库、存储等；&lt;/li&gt;
&lt;li&gt;运行与隔离：ECS、Docker、KataContainer 等；&lt;/li&gt;
&lt;li&gt;资源分配和调度：各种控制器；&lt;/li&gt;
&lt;li&gt;环境隔离：Namespace、多租户、VPC、防火墙、LimitRange、Resources；&lt;/li&gt;
&lt;li&gt;可访问性：Service、Ingress、Egress、Gateway、LoadBalancer、VirtualService、DestinationRule、ServiceEntry；&lt;/li&gt;
&lt;li&gt;状态管理：Operator；&lt;/li&gt;
&lt;li&gt;可观测性：日志、监控、指标；&lt;/li&gt;
&lt;li&gt;安全性：SecurityPolicy、ServiceAccount；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;云原生应用分层模型&#34;&gt;云原生应用分层模型&lt;/h3&gt;
&lt;p&gt;那么究竟如何来给云原生应用分层，化繁就简？近几年来，基于 Kubernetes 的应用呈爆炸式发展，光是在&lt;a href=&#34;https://jimmysong.io/awesome-cloud-native/#application-delivery&#34; title=&#34;应用交付领域&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;应用交付领域&lt;/a&gt;的开源项目就达几十个之多。下图展示我根据这些项目的特性而绘制的 App Delivery Landscape。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/post-kubernetes-era/cloud-native-app.svg&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/post-kubernetes-era/cloud-native-app.svg&#34; alt=&#34;image&#34; data-caption=&#34;云原生应用的分层模型&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;云原生应用的分层模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用定义和包装&lt;/strong&gt;：云原生应用的最上层，直接定义云原生应用的组成形式，解决云原生应用之间的依赖关系，并封装成发布包，如 Helm、CNAB，还有云原生变成语言 Pulumi 和 Ballerina，基于 API 的方式来编排云原生应用；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载定义&lt;/strong&gt;：基于 Kubernetes Operator，大多是 Serverless 负载，既负责了负载的定义又负责了生命周期管理。&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 是比较特殊的存在，它不仅管理服务间的流量，还负责安全性、可观测性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用发布和上线&lt;/strong&gt;：关注应用的构建和发布、GitOps、发布策略等，这也是云原生应用全景中最丰富的部分之一；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 原语&lt;/strong&gt;：Kubernetes 本身提供的原语，Operator 基于此构建；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上为我个人分类的云原生应用全景模型，仅限于 Kubernetes 之上的应用，对于其他非 Kubernetes 应用非本文的考虑范围。另外，CNCF SIG App Delivery 中也给出的云原生应用的分层模型，其模型将非 Kubernetes 应用场景也纳入了考虑，详见：&lt;a href=&#34;https://docs.google.com/document/d/1gMhRz4vEwiHa3uD8DqFKHGTSxrVJNgkLG2WZWvi9lXo/edit#heading=h.h9so53gv5zen&#34; title=&#34;The Dictionary of Cloud-Native App Delivery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Dictionary of Cloud-Native App Delivery&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Platform/Kuberntes，Kubernetes 仅仅是屏蔽了平台的一些差异，但是对于最上层的应用来说，没有涉及，用户需要自己来基于各种开源组件来搭积木。&lt;/p&gt;
&lt;h3 id=&#34;oam开放应用模型&#34;&gt;OAM（开放应用模型）&lt;/h3&gt;
&lt;p&gt;那么以上这么多应用有哪些共性，能不能再进一步抽象呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有应用是都以容器作为运行时环境（ContainerizedWorkload），这是 OAM 中的核心 Workload 类型；&lt;/li&gt;
&lt;li&gt;在应用发布和上线方面，有些是属于应用的运维特征，需要根据实际需求组合和变更，这些是持续变动的部分；&lt;/li&gt;
&lt;li&gt;要实现某些复杂的应用管控，需要使用到多个 CRD 的组合，比如 Istio 中的让流量根据百分比切分到不同的而服务，就需要部署 Istio Operator，并声明 &lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;DestinationRule&lt;/code&gt;，二者同时使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 的 Runtime 的正常流程应该是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用开发者创建自己的 &lt;code&gt;Component&lt;/code&gt;，在 &lt;code&gt;Component&lt;/code&gt; 中描述要应用相关的信息，如应用名称、镜像配置、环境变量等，应用到 Kubernetes cluster 中；&lt;/li&gt;
&lt;li&gt;运维创建各种运维策略，如发布策略、网络策略等等，发布时由 AppConfig 对象关联要发布的 &lt;code&gt;Component&lt;/code&gt; 和本次的运维策略，apply 到集群中，集群的 OAM operator watch 到一次 &lt;code&gt;ApplicationConfiguration&lt;/code&gt;的下发，生成 &lt;code&gt;Component&lt;/code&gt; 对应的 &lt;code&gt;Workload&lt;/code&gt; 和 &lt;code&gt;Trait&lt;/code&gt;，&lt;code&gt;Trait&lt;/code&gt; controller 将本次的 &lt;code&gt;Trait&lt;/code&gt; 策略应用到本次要管理的 &lt;code&gt;Workload&lt;/code&gt; 当中，最终到达终态，完成一次发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OAM 是对 Kubernetes 友好的，一样采用声明式 API 的理念开发。如果你已经编写了现成的 CRD Operator，可以平滑地接入到 OAM 体系中。OAM 以应用为中心，高度可扩展，扩展点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workload：扩展各种运行时类型，不仅限于容器运行时，还可以定义更多其他运行时，比如 Serverless 负载、虚拟机、数据库、网络等；例如，Pod、无服务器函数、数据存储、消息队列或任何其他类型的工作负载，这些都是应用程序开发人员需要设计一个完整的应用程序所需要的，可以直接引用 Kubernetes 的 CRD；&lt;/li&gt;
&lt;li&gt;Trait：各种运维规则，比如扩缩容、流量控制、安全性；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生态&#34;&gt;生态&lt;/h3&gt;
&lt;p&gt;以前 CNCF 的主要关注群体大多是基础设施领域的技术人员，但是自 2019 年 9 月，&lt;a href=&#34;https://www.infoq.cn/article/Cdw7ISlEqKilGyN9V3Pj&#34; title=&#34;CNCF 宣布成立 SIG App Delivery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 宣布成立 SIG App Delivery&lt;/a&gt; 后，CNCF 正在将应用开发者和运维人员更紧密的联系在一起。&lt;a href=&#34;https://github.com/cncf/sig-app-delivery&#34; title=&#34;应用交付 SIG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;应用交付 SIG&lt;/a&gt; 的使命是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在与开发、分发、部署、管理和运行安全的云原生应用相关的领域进行合作，目标是以云原生方式交付应用。&lt;/li&gt;
&lt;li&gt;发展信息资源，包括指南、教程和白皮书，让社区了解最佳实践和应用交付的价值。&lt;/li&gt;
&lt;li&gt;识别合适的项目和现状的差距，定期向 TOC 更新，并以结构化的方式向 TOC 提出行动建议。这包括帮助 TOC 评估和对潜在的新项目进行尽职调查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前 OAM 定义的云原生应用模型已有以下项目支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://crossplane.io/&#34; title=&#34;Crossplane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crossplane&lt;/a&gt;：这是一个开源的 Kubernetes 扩展组件，适用于主流公有云平台，使用 &lt;code&gt;kubectl&lt;/code&gt; 配置和管理基础架构、服务和应用。对于 OAM 的支持详见运行应用程序。&lt;/li&gt;
&lt;li&gt;KPT：Kpt（发音为 &amp;ldquo;keep&amp;rdquo;）是一个在资源配置之上构建声明性工作流的开源工具。它的 git + YAML 架构意味着它只需与现有的工具、框架和平台一起工作。Kpt 包括了获取、显示、自定义、更新、验证和应用 Kubernetes 配置的解决方案。对 OAM 的支持详见 使用 kpt 来管理由开放应用模型（OAM）定义的自定义 Kubernetes 应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用交付领域相关的开源项目还有很多，详见 &lt;a href=&#34;https://jimmysong.io/awesome-cloud-native/#application-delivery&#34; title=&#34;Awesome Cloud Native&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Cloud Native&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;基于 Kubernetes 的云原生生态发展至今已有 6 年时间，当前已步入了普及推广阶段。可以说谁云原生应用定义的制高点，就可以掌握云原生的未来。从前我们是新技术浪潮的追随者，现在我们抓住时代的基于，参与标准制定、引领云原生的浪潮！欢迎加入 &lt;a href=&#34;https://oam.dev/&#34; title=&#34;OAM 社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAM 社区&lt;/a&gt;，一起参与进来，把国人参与指定的标准推向世界。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/technologies/containers/blogs/kubernetes-helm-3/&#34; title=&#34;Do you know what’s in Helm 3? - developer.ibm.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Do you know what’s in Helm 3? - developer.ibm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/cms/managed-files/cm-oreilly-kubernetes-patterns-ebook-f19824-201910-en.pdf&#34; title=&#34;O’Reilly: Kubernetes patterns for designing cloud-native apps - redhat.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;O’Reilly: Kubernetes patterns for designing cloud-native apps - redhat.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1gMhRz4vEwiHa3uD8DqFKHGTSxrVJNgkLG2WZWvi9lXo/edit#heading=h.h9so53gv5zen&#34; title=&#34;The Dictionary of Cloud-Native App Delivery - docs.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Dictionary of Cloud-Native App Delivery - docs.google.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/Cdw7ISlEqKilGyN9V3Pj&#34; title=&#34;CNCF 宣布成立应用交付领域小组，正式开启云原生应用时代 - infoq.cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 宣布成立应用交付领域小组，正式开启云原生应用时代 - infoq.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/c7A8lOdAKkW25GoqmwOgWg&#34; title=&#34;OAM v1alpha2 新版发布：平衡标准与可扩展性，灵活接入 CRD operator - mp.weixin.qq.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAM v1alpha2 新版发布：平衡标准与可扩展性，灵活接入 CRD operator - mp.weixin.qq.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54633203&#34; title=&#34;Kubernetes API 与 Operator，不为人知的开发者战争&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API 与 Operator，不为人知的开发者战争&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>Trait</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/trait/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/trait/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    本文基于 OAM v1alpha2 版本。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Trait&lt;/code&gt; 用于定义 &lt;code&gt;Component&lt;/code&gt; 的运维属性，是对 &lt;code&gt;Component&lt;/code&gt; 运行时的叠加，需要通过 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 的配置将其与 &lt;code&gt;Component&lt;/code&gt; 绑定，用于动态修改 &lt;code&gt;Component&lt;/code&gt; 中 &lt;code&gt;workload&lt;/code&gt; 的行为。&lt;/p&gt;
&lt;p&gt;不同的 &lt;code&gt;Trait&lt;/code&gt; 可能适用于不同的 &lt;code&gt;Component&lt;/code&gt;（因为不同的 &lt;code&gt;Component&lt;/code&gt; 中的  &lt;code&gt;workload&lt;/code&gt; 可能不同，因此它们的运维特性也可能不同），如流量路由规则（如负载均衡策略、入口路由、出口路由、百分比路由、限流、熔断、超时限制、故障注入等）、自动缩放策略、升级策略、发布策略等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Trait&lt;/code&gt; 还具有以下几个特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Trait&lt;/code&gt; 是根据在 &lt;code&gt;Component&lt;/code&gt; 中引用的顺序应用的，如果某些运维特征本身具有依赖性，可以通过显式排序来解决；&lt;/li&gt;
&lt;li&gt;对于某一类型的 &lt;code&gt;Trait&lt;/code&gt; 在同一个 &lt;code&gt;Component&lt;/code&gt; 实例只能应用一个；&lt;/li&gt;
&lt;li&gt;在应用 &lt;code&gt;Trait&lt;/code&gt; 时，需要进行冲突检查，如果一组 &lt;code&gt;Trait&lt;/code&gt; 的特性不能满足运维组合，则判定为不合法；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将运维属性从应用组件本身的定义（ &lt;code&gt;Component&lt;/code&gt;）中剥离有如下几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Trait&lt;/code&gt; 通常由应用运维人员定义和维护，而不需要应用开发人员参与，应用开发人员对 &lt;code&gt;Trait&lt;/code&gt; 可能无感知，减轻了应用开发人员的负担；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Trait&lt;/code&gt; 将云原生应用程序的一些通用运维属性从应用配置中剥离出来，大大提高了运维逻辑的可复用性；&lt;/li&gt;
&lt;li&gt;应用 &lt;code&gt;Trait&lt;/code&gt; 组合前进行运维特性检查，可以有效防止配置冲突和无法预期的情况发生；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是根据 OAM 规范定义的一个 Trait 示例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TraitDefinition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;manualscalertrait.core.oam.dev&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;appliesToWorkloads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2.ContainerizedWorkload&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;definitionRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;manualscalertrait.core.oam.dev&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-warn-container&#34;&gt;
  
  &lt;div class=&#34;alert-warn-title px-2 py-2&#34;&gt;
    关于 definitionRef
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warn px-2&#34;&gt;
    CR 即 Custom Resource（自定义资源），指的是实例化后的 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; title=&#34;CRD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRD&lt;/a&gt;。&lt;code&gt;definitionRef&lt;/code&gt; 将 &lt;code&gt;Trait&lt;/code&gt; shcema 在 OAM 解释器中注册，通过增加一个抽象层，使其与 Operator 框架解耦（毕竟不是说有 CRD 都是面向应用开发者的）。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;OAM 中将 &lt;code&gt;Trait&lt;/code&gt; 分成了 &lt;code&gt;core.oam.dev&lt;/code&gt;（核心）、&lt;code&gt;standard.oam.dev&lt;/code&gt;（标准）及自定义扩展类别。一个 &lt;code&gt;Trait&lt;/code&gt; 具体适用于哪些 &lt;code&gt;workload&lt;/code&gt; 可以在 &lt;code&gt;Trait&lt;/code&gt; 的 &lt;code&gt;TraitDefinition&lt;/code&gt; 中定义。目前 OAM 中支持的核心 &lt;code&gt;Trait&lt;/code&gt; 有 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/core/traits/manual_scaler_trait.md&#34; title=&#34;ManualScalerTrait&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ManualScalerTrait&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于 Trait 的详细请参考 OAM 中的 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/6.traits.md&#34; title=&#34;Trait 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trait 规范&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>你是否需要 Istio？</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-mesh/do-you-need-a-service-mesh/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-mesh/do-you-need-a-service-mesh/</guid>
      <description>
        
        
        &lt;p&gt;你可能参加过各种云原生、服务网格相关的 meetup，在社区里看到很多人在分享和讨论 Istio，但是对于自己是否真的需要 Istio 感到踌躇，甚至因为它的复杂性而对服务网格的前景感到怀疑。那么，在你继阅读 Istio SIG 后续文章之前，请先仔细阅读本文，审视一下自己公司的现状，看看你是否有必要使用服务网格，处于 Istio 应用的哪个阶段。&lt;/p&gt;
&lt;p&gt;本文不是对应用服务网格的指导，而是根据社区里经常遇到的问题而整理。在使用 Istio 之前，请先考虑下以下因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的团队里有多少人？&lt;/li&gt;
&lt;li&gt;你的团队是否有使用 Kubernetes、Istio 的经验？&lt;/li&gt;
&lt;li&gt;你有多少微服务？&lt;/li&gt;
&lt;li&gt;这些微服务使用什么语言？&lt;/li&gt;
&lt;li&gt;你的运维、SRE 团队是否可以支持服务网格管理？&lt;/li&gt;
&lt;li&gt;你有采用开源项目的经验吗？&lt;/li&gt;
&lt;li&gt;你的服务都运行在哪些平台上？&lt;/li&gt;
&lt;li&gt;你的应用已经容器化并使用 Kubernetes 管理了吗？&lt;/li&gt;
&lt;li&gt;你的服务有多少是部署在虚拟机、有多少是部署到 Kubernetes 集群上，比例如何？&lt;/li&gt;
&lt;li&gt;你的团队有制定转移到云原生架构的计划吗？&lt;/li&gt;
&lt;li&gt;你想使用 Istio 的什么功能？&lt;/li&gt;
&lt;li&gt;Istio 的稳定性是否能够满足你的需求？&lt;/li&gt;
&lt;li&gt;你是否可以忍受 Istio 带来的性能损耗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 作为目前最流行的 Service Mesh 技术之一，拥有活跃的社区和众多的落地案例。但如果你真的想在你的生产环境大规模落地 Isito，这看似壮观美好的冰山下，却是暗流涌动，潜藏着无数凶险。&lt;/p&gt;
&lt;h2 id=&#34;使用-istio-无法做到完全对应用透明&#34;&gt;使用 Istio 无法做到完全对应用透明&lt;/h2&gt;
&lt;p&gt;服务通信和治理相关的功能迁移到 Sidecar 进程中后，应用中的 SDK 通常需要作出一些对应的改变。&lt;/p&gt;
&lt;p&gt;比如 SDK 需要关闭一些功能，例如重试。一个典型的场景是，SDK 重试 m 次，Sidecar 重试 n 次，这会导致 m * n 的重试风暴，从而引发风险。&lt;/p&gt;
&lt;p&gt;此外，诸如 trace header 的透传，也需要 SDK 进行升级改造。如果你的 SDK 中还有其它特殊逻辑和功能，这些可能都需要小心处理才能和 Isito Sidecar 完美配合。&lt;/p&gt;
&lt;h2 id=&#34;istio-对非-kubernetes-环境的支持有限&#34;&gt;Istio 对非 Kubernetes 环境的支持有限&lt;/h2&gt;
&lt;p&gt;在业务迁移至 Istio 的同时，可能并没有同步迁移至 Kubernetes，而还运行在原有 PAAS 系统之上。这会带来一系列挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原有 PAAS 可能没有容器网络，Istio 的服务发现和流量劫持都可能要根据旧有基础设施进行适配才能正常工作&lt;/li&gt;
&lt;li&gt;如果旧有的 PAAS 单个实例不能很好的管理多个容器（类比 Kubernetes 的 Pod 和 Container 概念），大量 Istio Sidecar 的部署和运维将是一个很大的挑战&lt;/li&gt;
&lt;li&gt;缺少 Kubernetes webhook 机制，Sidecar 的注入也可能变得不那么透明，而需要耦合在业务的部署逻辑中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;只有-http-协议是一等公民&#34;&gt;只有 HTTP 协议是一等公民&lt;/h2&gt;
&lt;p&gt;Istio 原生对 HTTP 协议提供了完善的全功能支持，但在真实的业务场景中，私有化协议却非常普遍，而 Istio 却并未提供原生支持。&lt;/p&gt;
&lt;p&gt;这导致使用私有协议的一些服务可能只能被迫使用 TCP 协议来进行基本的请求路由，这会导致很多功能的缺失，这其中包括 Istio 非常强大的基于内容的消息路由，如基于 header、path 等进行权重路由。&lt;/p&gt;
&lt;h2 id=&#34;扩展-istio-的成本并不低&#34;&gt;扩展 Istio 的成本并不低&lt;/h2&gt;
&lt;p&gt;虽然 Istio 的总体架构是基于高度可扩展而设计，但由于整个 Istio 系统较为复杂，如果你对 Istio 进行过真实的扩展，就会发现成本不低。&lt;/p&gt;
&lt;p&gt;以扩展 Istio 支持某一种私有协议为例，首先你需要在 Istio 的 api 代码库中进行协议扩展，其次你需要修改 Istio 代码库来实现新的协议处理和下发，然后你还需要修改 xds 代码库的协议，最后你还要在 Envoy 中实现相应的 Filter 来完成协议的解析和路由等功能。&lt;/p&gt;
&lt;p&gt;在这个过程中，你还可能面临上述数个复杂代码库的编译等工程挑战（如果你的研发环境不能很好的使用 Docker 或者无法访问部分国外网络的情况下）。&lt;/p&gt;
&lt;p&gt;即使做完了所有的这些工作，你也可能面临这些工作无法合并回社区的情况，社区对私有协议的扩展支持度不高，这会导致你的代码和社区割裂，为后续的升级更新带来隐患。&lt;/p&gt;
&lt;h2 id=&#34;istio-在集群规模较大时的性能问题&#34;&gt;Istio 在集群规模较大时的性能问题&lt;/h2&gt;
&lt;p&gt;Istio 默认的工作模式下，每个 Sidecar 都会收到全集群所有服务的信息。如果你部署过 Istio 官方的 Bookinfo 示例应用，并使用 Envoy 的 config dump 接口进行观察，你会发现，仅仅几个服务，Envoy 所收到的配置信息就有将近 20w 行。&lt;/p&gt;
&lt;p&gt;可以想象，在稍大一些的集群规模，Envoy 的内存开销、Istio 的 CPU 开销、XDS 的下发时效性等问题，一定会变得尤为突出。&lt;/p&gt;
&lt;p&gt;Istio 这么做一是考虑这样可以开箱即用，用户不用进行过多的配置，另外在一些场景，可能也无法梳理出准确的服务之间的调用关系，因此直接给每个 Sidecar 下发了全量的服务配置，即使这个 Sidecar 只会访问其中很小一部分服务。&lt;/p&gt;
&lt;p&gt;当然这个问题也有解法，你可以通过 Sidecar CRD 来显示定义服务调用关系，使 Envoy 只得到他需要的服务信息，从而大幅降低 Envoy 的资源开销，但前提是在你的业务线中能梳理出这些调用关系。&lt;/p&gt;
&lt;h2 id=&#34;xds-分发没有分级发布机制&#34;&gt;XDS 分发没有分级发布机制&lt;/h2&gt;
&lt;p&gt;当你对一个服务的策略配置进行变更的时候，XDS 不具备分级发布的能力，所有访问这个服务的 Envoy 都会立即收到变更后的最新配置。这在一些对变更敏感的严苛生产环境，可能是有很高风险甚至不被允许的。&lt;/p&gt;
&lt;p&gt;如果你的生产环境严格要求任何变更都必须有分级发布流程，那你可能需要考虑自己实现一套这样的机制。&lt;/p&gt;
&lt;h2 id=&#34;istio-组件故障时是否有退路&#34;&gt;Istio 组件故障时是否有退路？&lt;/h2&gt;
&lt;p&gt;以 Istio 为代表的 Sidecar 架构的特殊性在于，Sidecar 直接承接了业务流量，而不像一些其他的基础设施那样，只是整个系统的旁路组件（比如 Kubernetes）。&lt;/p&gt;
&lt;p&gt;因此在 Isito 落地初期，你必须考虑，如果 Sidecar 进程挂掉，服务怎么办？是否有退路？是否能 fallback 到直连模式？&lt;/p&gt;
&lt;p&gt;在 Istio 落地过程中，是否能无损 fallback，通常决定了核心业务能否接入 Service Mesh。&lt;/p&gt;
&lt;h2 id=&#34;isito-技术架构的成熟度还没有达到预期&#34;&gt;Isito 技术架构的成熟度还没有达到预期&lt;/h2&gt;
&lt;p&gt;虽然 Istio 1.0 版本已经发布了很久，但是如果你关注社区每个版本的迭代，就会发现，Istio 目前架构依然处于不太稳定的状态，尤其是 1.5 版本前后的几个大版本，先后经历了去除 Mixer 组件、合并为单体架构、仅支持高版本 Kubernetes 等等重大变动，这对于已经在生产环境中使用了 Istio 的用户非常不友好，因为升级会面临各种不兼容性问题。&lt;/p&gt;
&lt;p&gt;好在社区也已经意识到这一问题，2021 年社区也成立了专门的小组，重点改善 Istio 的兼容性和用户体验。&lt;/p&gt;
&lt;h2 id=&#34;istio-缺乏成熟的产品生态&#34;&gt;Istio 缺乏成熟的产品生态&lt;/h2&gt;
&lt;p&gt;Istio 作为一套技术方案，却并不是一套产品方案。&lt;/p&gt;
&lt;p&gt;如果你在生产环境中使用，你可能还需要解决可视化界面、权限和账号系统对接、结合公司已有技术组件和产品生态等问题，仅仅通过命令行来使用，可能并不能满足你的组织对权限、审计、易用性的要求。&lt;/p&gt;
&lt;p&gt;而 Isito 自带的 Kiali 功能还十分简陋，远远没有达到能在生产环境使用的程度，因此你可能需要研发基于 Isito 的上层产品。&lt;/p&gt;
&lt;h2 id=&#34;istio-目前解决的问题域还很有限&#34;&gt;Istio 目前解决的问题域还很有限&lt;/h2&gt;
&lt;p&gt;Istio 目前主要解决的是分布式系统之间服务调用的问题，但还有一些分布式系统的复杂语义和功能并未纳入到 Istio 的 Sidecar 运行时之中，比如消息发布和订阅、状态管理、资源绑定等等。&lt;/p&gt;
&lt;p&gt;云原生应用将会朝着多 Sidecar 运行时或将更多分布式能力纳入单 Sidecar 运行时的方向继续发展，以使服务本身变得更为轻量，让应用和基础架构彻底解耦。&lt;/p&gt;
&lt;p&gt;如果你的生产环境中，业务系统对接了非常多和复杂的分布式系系统中间件，Istio 目前可能并不能完全解决你的应用的云原生化诉求。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;看到这里，你是否感到有些沮丧，而对 Isito 失去信心？&lt;/p&gt;
&lt;p&gt;别担心，上面列举的这些问题，实际上并不影响 Isito 依然是目前最为流行和成功的 Service Mesh 技术选型之一。Istio 频繁的变动，一定程度上也说明它拥有一个活跃的社区，我们应当对一个新的事物报以信心，Isito 的社区也在不断听取来自终端用户的声音，朝着大家期待的方向演进。&lt;/p&gt;
&lt;p&gt;同时，如果你的生产环境中的服务规模并不是很大，服务已经托管于 Kubernetes 之上，也只使用那些 Istio 原生提供的能力，那么 Istio 依然是一个值得尝试的开箱即用方案。&lt;/p&gt;
&lt;p&gt;但如果你的生产环境比较复杂，技术债务较重，专有功能和策略需求较多，亦或者服务规模庞大，那么在开始使用 Istio 之前，你需要仔细权衡上述这些要素，以评估在你的系统之中引入 Istio 可能带来的复杂度和潜在成本。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnativecn.com/blog/the-facts-of-using-istio/&#34; title=&#34;在生产环境使用 Istio 前的若干考虑要素 - cloudnativecn.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在生产环境使用 Istio 前的若干考虑要素 - cloudnativecn.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>什么是 Envoy？</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-envoy/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-mesh/what-is-envoy/</guid>
      <description>
        
        
        &lt;p&gt;IT 行业正在向微服务架构和云原生解决方案发展。由于使用不同的技术开发了成百上千的微服务，这些系统可能变得复杂，难以调试。&lt;/p&gt;
&lt;p&gt;作为一个应用开发者，你考虑的是业务逻辑——购买产品或生成发票。然而，任何像这样的业务逻辑都会导致不同服务之间的多个服务调用。每个服务可能都有它的超时、重试逻辑和其他可能需要调整或微调的网络特定代码。&lt;/p&gt;
&lt;p&gt;如果在任何时候最初的请求失败了，就很难通过多个服务来追踪，准确地指出失败发生的地方，了解请求为什么失败。是网络不可靠吗？是否需要调整重试或超时？或者是业务逻辑问题或错误？&lt;/p&gt;
&lt;p&gt;服务可能使用不一致的跟踪和记录机制，使这种调试的复杂性增加。这些问题使你很难确定问题发生在哪里，以及如何解决。如果你是一个应用程序开发人员，而调试网络问题不属于你的核心技能，那就更是如此。&lt;/p&gt;
&lt;p&gt;将网络问题从应用程序堆栈中抽离出来，由另一个组件来处理网络部分，让调试网络问题变得更容易。这就是 Envoy 所做的事情。&lt;/p&gt;
&lt;p&gt;在每个服务实例旁边都有一个 Envoy 实例在运行。这种类型的部署也被称为 &lt;strong&gt;Sidecar 部署&lt;/strong&gt;。Envoy 的另一种模式是&lt;strong&gt;边缘代理&lt;/strong&gt;，用于构建 API 网关。&lt;/p&gt;
&lt;p&gt;Envoy 和应用程序形成一个原子实体，但仍然是独立的进程。应用程序处理业务逻辑，而 Envoy 则处理网络问题。&lt;/p&gt;
&lt;p&gt;在发生故障的情况下，分离关注点可以更容易确定故障是来自应用程序还是网络。&lt;/p&gt;
&lt;p&gt;为了帮助网络调试，Envoy 提供了以下高级功能。&lt;/p&gt;
&lt;h2 id=&#34;进程外架构&#34;&gt;进程外架构&lt;/h2&gt;
&lt;p&gt;Envoy 是一个独立的进程，旨在与每个应用程序一起运行 —— 也就是我们前面提到的 Sidecar 部署模式。集中配置的 Envoy 的集合形成了一个透明的服务网格。&lt;/p&gt;
&lt;p&gt;路由和其他网络功能的责任被推给了 Envoy。应用程序向一个虚拟地址（localhost）而不是真实地址（如公共 IP 地址或主机名）发送请求，不知道网络拓扑结构。应用程序不再承担路由的责任，因为该任务被委托给一个外部进程。&lt;/p&gt;
&lt;p&gt;与其让应用程序管理其网络配置，不如在 Envoy 层面上独立于应用程序管理网络配置。在一个组织中，这可以使应用程序开发人员解放出来，专注于应用程序的业务逻辑。&lt;/p&gt;
&lt;p&gt;Envoy 适用于任何编程语言。你可以用 Go、Java、C++ 或其他任何语言编写你的应用程序，而 Envoy 可以在它们之间架起桥梁。Envoy 的行为是相同的，无论应用程序的编程语言或它们运行的操作系统是什么。&lt;/p&gt;
&lt;p&gt;Envoy 还可以在整个基础设施中透明地进行部署和升级。这与为每个单独的应用程序部署库升级相比，后者可能是非常痛苦和耗时的。&lt;/p&gt;
&lt;p&gt;进程外架构是有益的，因为它使我们在不同的编程语言 / 应用堆栈中保持一致，我们可以免费获得独立的应用生命周期和所有的 Envoy 网络功能，而不必在每个应用中单独解决这些问题。&lt;/p&gt;
&lt;h2 id=&#34;l3l4-过滤器结构&#34;&gt;L3/L4 过滤器结构&lt;/h2&gt;
&lt;p&gt;Envoy 是一个 L3/L4 网络代理，根据 IP 地址和 TCP 或 UDP 端口进行决策。它具有一个可插拔的过滤器链，可以编写你的过滤器来执行不同的 TCP/UDP 任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过滤器链（Filter Chain）&lt;/strong&gt; 的想法借鉴了 Linux shell，即一个操作的输出被输送到另一个操作中。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls -l &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;Envoy*.cc&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Envoy 可以通过堆叠所需的过滤器来构建逻辑和行为，形成一个过滤器链。许多过滤器已经存在，并支持诸如原始 TCP 代理、UDP 代理、HTTP 代理、TLS 客户端认证等任务。Envoy 也是可扩展的，我们可以编写我们的过滤器。&lt;/p&gt;
&lt;h2 id=&#34;l7-过滤器结构&#34;&gt;L7 过滤器结构&lt;/h2&gt;
&lt;p&gt;Envoy 支持一个额外的 HTTP L7 过滤器层。我们可以在 HTTP 连接管理子系统中插入 HTTP 过滤器，执行不同的任务，如缓冲、速率限制、路由 / 转发等。&lt;/p&gt;
&lt;h2 id=&#34;一流的-http2-支持&#34;&gt;一流的 HTTP/2 支持&lt;/h2&gt;
&lt;p&gt;Envoy 同时支持 HTTP/1.1 和 HTTP/2，并且可以作为一个透明的 HTTP/1.1 到 HTTP/2 的双向代理进行操作。这意味着任何 HTTP/1.1 和 HTTP/2 客户端和目标服务器的组合都可以被桥接起来。即使你的传统应用没有通过 HTTP/2 进行通信，如果你把它们部署在 Envoy 代理旁边，它们最终也会通过 HTTP/2 进行通信。&lt;/p&gt;
&lt;p&gt;推荐在所有的服务间配置的 Envoy 使用 HTTP/2，以创建一个持久连接的网格，请求和响应可以在上面复用。&lt;/p&gt;
&lt;h2 id=&#34;http-路由&#34;&gt;HTTP 路由&lt;/h2&gt;
&lt;p&gt;当以 HTTP 模式操作并使用 REST 时，Envoy 支持路由子系统，能够根据路径、权限、内容类型和运行时间值来路由和重定向请求。在将 Envoy 作为构建 API 网关的前台 / 边缘代理时，这一功能非常有用，在构建服务网格（sidecar 部署模式）时，也可以利用这一功能。&lt;/p&gt;
&lt;h2 id=&#34;grpc-准备就绪&#34;&gt;gRPC 准备就绪&lt;/h2&gt;
&lt;p&gt;Envoy 支持作为 gRPC 请求和响应的路由和负载均衡底层所需的所有 HTTP/2 功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gRPC 是一个开源的远程过程调用（RPC）系统，它使用 HTTP/2 进行传输，并将协议缓冲区作为接口描述语言（IDL），它提供的功能包括认证、双向流和流量控制、阻塞 / 非阻塞绑定，以及取消和超时。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;服务发现和动态配置&#34;&gt;服务发现和动态配置&lt;/h2&gt;
&lt;p&gt;我们可以使用静态配置文件来配置 Envoy，这些文件描述了服务间通信方式。&lt;/p&gt;
&lt;p&gt;对于静态配置 Envoy 不现实的高级场景，Envoy 支持动态配置，在运行时自动重新加载配置。一组名为 xDS 的发现服务可以用来通过网络动态配置 Envoy，并为 Envoy 提供关于主机、集群 HTTP 路由、监听套接字和加密信息。&lt;/p&gt;
&lt;h2 id=&#34;健康检查&#34;&gt;健康检查&lt;/h2&gt;
&lt;p&gt;负载均衡器有一个特点，那就是只将流量路由到健康和可用的上游服务。Envoy 支持健康检查子系统，对上游服务集群进行主动健康检查。然后，Envoy 使用服务发现和健康检查信息的组合来确定健康的负载均衡目标。Envoy 还可以通过异常点检测子系统支持被动健康检查。&lt;/p&gt;
&lt;h2 id=&#34;高级负载均衡&#34;&gt;高级负载均衡&lt;/h2&gt;
&lt;p&gt;Envoy 支持自动重试、断路、全局速率限制（使用外部速率限制服务）、影子请求（或流量镜像）、异常点检测和请求对冲。&lt;/p&gt;
&lt;h2 id=&#34;前端--边缘代理支持&#34;&gt;前端 / 边缘代理支持&lt;/h2&gt;
&lt;p&gt;Envoy 的特点使其非常适合作为边缘代理运行。这些功能包括 TLS 终端、HTTP/1.1、HTTP/2 和 HTTP/3 支持，以及 HTTP L7 路由。&lt;/p&gt;
&lt;h2 id=&#34;tls-终止&#34;&gt;TLS 终止&lt;/h2&gt;
&lt;p&gt;应用程序和代理的解耦使网格部署模型中所有服务之间的 TLS 终止（双向 TLS）成为可能。&lt;/p&gt;
&lt;h2 id=&#34;一流的可观测性&#34;&gt;一流的可观测性&lt;/h2&gt;
&lt;p&gt;为了便于观察，Envoy 会生成日志、指标和追踪。Envoy 目前支持 statsd（和兼容的提供者）作为所有子系统的统计。得益于可扩展性，我们也可以在需要时插入不同的统计提供商。&lt;/p&gt;
&lt;h2 id=&#34;http3alpha&#34;&gt;HTTP/3（Alpha）&lt;/h2&gt;
&lt;p&gt;Envoy 1.19.0 支持 HTTP/3 的上行和下行，并在 HTTP/1.1、HTTP/2 和 HTTP/3 之间进行双向转义。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Kubernetes 的设计理念</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/perspective/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/perspective/</guid>
      <description>
        
        
        &lt;p&gt;这一章将介绍 Kubernetes 的设计理念及基本概念。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-设计理念与分布式系统&#34;&gt;Kubernetes 设计理念与分布式系统&lt;/h2&gt;
&lt;p&gt;分析和理解 Kubernetes 的设计理念可以使我们更深入地了解 Kubernetes 系统，更好地利用它管理分布式部署的云原生应用，另一方面也可以让我们借鉴其在分布式系统设计方面的经验。&lt;/p&gt;
&lt;h2 id=&#34;分层架构&#34;&gt;分层架构&lt;/h2&gt;
&lt;p&gt;Kubernetes 设计理念和功能其实就是一个类似 Linux 的分层架构，如下图所示&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/perspective/006tNc79ly1fzniqvmi51j31gq0s0q5u_hu_e2debff8c4c6156a.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/perspective/006tNc79ly1fzniqvmi51j31gq0s0q5u.jpg&#34; data-img=&#34;/book/kubernetes-handbook/architecture/perspective/006tNc79ly1fzniqvmi51j31gq0s0q5u.jpg&#34; data-width=&#34;1898&#34; data-height=&#34;1008&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 分层架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes 分层架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;核心层：Kubernetes 最核心的功能，对外提供 API 构建高层的应用，对内提供插件式应用执行环境&lt;/li&gt;
&lt;li&gt;应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS 解析等）&lt;/li&gt;
&lt;li&gt;管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态 Provision 等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy 等）&lt;/li&gt;
&lt;li&gt;接口层：kubectl 命令行工具、客户端 SDK 以及集群联邦&lt;/li&gt;
&lt;li&gt;生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴
&lt;ul&gt;
&lt;li&gt;Kubernetes 外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS 应用、ChatOps 等&lt;/li&gt;
&lt;li&gt;Kubernetes 内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-设计原则&#34;&gt;API 设计原则&lt;/h2&gt;
&lt;p&gt;对于云计算系统，系统 API 实际上处于系统设计的统领地位，正如本文前面所说，Kubernetes 集群系统每支持一项新功能，引入一项新技术，一定会新引入对应的 API 对象，支持对该功能的管理操作，理解掌握的 API，就好比抓住了 Kubernetes 系统的牛鼻子。Kubernetes 系统 API 的设计有以下几条原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;所有 API 应该是声明式的&lt;/strong&gt;。正如前文所说，声明式的操作，相对于命令式操作，对于重复操作的效果是稳定的，这对于容易出现数据丢失或重复的分布式环境来说是很重要的。另外，声明式操作更容易被用户使用，可以使系统向用户隐藏实现的细节，隐藏实现的细节的同时，也就保留了系统未来持续优化的可能性。此外，声明式的 API，同时隐含了所有的 API 对象都是名词性质的，例如 Service、Volume 这些 API 都是名词，这些名词描述了用户所期望得到的一个目标分布式对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 对象是彼此互补而且可组合的&lt;/strong&gt;。这里面实际是鼓励 API 对象尽量实现面向对象设计时的要求，即“高内聚，松耦合”，对业务相关的概念有一个合适的分解，提高分解出来的对象的可重用性。事实上，Kubernetes 这种分布式系统管理平台，也是一种业务系统，只不过它的业务就是调度和管理容器服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高层 API 以操作意图为基础设计&lt;/strong&gt;。如何能够设计好 API，跟如何能用面向对象的方法设计好应用系统有相通的地方，高层设计一定是从业务出发，而不是过早的从技术实现出发。因此，针对 Kubernetes 的高层 API 设计，一定是以 Kubernetes 的业务为基础出发，也就是以系统调度管理容器的操作意图为基础设计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低层 API 根据高层 API 的控制需要设计&lt;/strong&gt;。设计实现低层 API 的目的，是为了被高层 API 使用，考虑减少冗余、提高重用性的目的，低层 API 的设计也要以需求为基础，要尽量抵抗受技术实现影响的诱惑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尽量避免简单封装，不要有在外部 API 无法显式知道的内部隐藏的机制&lt;/strong&gt;。简单的封装，实际没有提供新的功能，反而增加了对所封装 API 的依赖性。内部隐藏的机制也是非常不利于系统维护的设计方式，例如 StatefulSet 和 ReplicaSet，本来就是两种 Pod 集合，那么 Kubernetes 就用不同 API 对象来定义它们，而不会说只用同一个 ReplicaSet，内部通过特殊的算法再来区分这个 ReplicaSet 是有状态的还是无状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 操作复杂度与对象数量成正比&lt;/strong&gt;。这一条主要是从系统性能角度考虑，要保证整个系统随着系统规模的扩大，性能不会迅速变慢到无法使用，那么最低的限定就是 API 的操作复杂度不能超过 O(N)，N 是对象的数量，否则系统就不具备水平伸缩性了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 对象状态不能依赖于网络连接状态&lt;/strong&gt;。由于众所周知，在分布式环境下，网络连接断开是经常发生的事情，因此要保证 API 对象状态能应对网络的不稳定，API 对象的状态就不能依赖于网络连接状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尽量避免让操作机制依赖于全局状态，因为在分布式系统中要保证全局状态的同步是非常困难的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;控制机制设计原则&#34;&gt;控制机制设计原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制逻辑应该只依赖于当前状态&lt;/strong&gt;。这是为了保证分布式系统的稳定可靠，对于经常出现局部错误的分布式系统，如果控制逻辑只依赖当前状态，那么就非常容易将一个暂时出现故障的系统恢复到正常状态，因为你只要将该系统重置到某个稳定状态，就可以自信的知道系统的所有控制逻辑会开始按照正常方式运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;假设任何错误的可能，并做容错处理&lt;/strong&gt;。在一个分布式系统中出现局部和临时错误是大概率事件。错误可能来自于物理系统故障，外部系统故障也可能来自于系统自身的代码错误，依靠自己实现的代码不会出错来保证系统稳定其实也是难以实现的，因此要设计对任何可能错误的容错处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尽量避免复杂状态机，控制逻辑不要依赖无法监控的内部状态&lt;/strong&gt;。因为分布式系统各个子系统都是不能严格通过程序内部保持同步的，所以如果两个子系统的控制逻辑如果互相有影响，那么子系统就一定要能互相访问到影响控制逻辑的状态，否则，就等同于系统里存在不确定的控制逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;假设任何操作都可能被任何操作对象拒绝，甚至被错误解析&lt;/strong&gt;。由于分布式系统的复杂性以及各子系统的相对独立性，不同子系统经常来自不同的开发团队，所以不能奢望任何操作被另一个子系统以正确的方式处理，要保证出现错误的时候，操作级别的错误不会影响到系统稳定性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个模块都可以在出错后自动恢复&lt;/strong&gt;。由于分布式系统中无法保证系统各个模块是始终连接的，因此每个模块要有自我修复的能力，保证不会因为连接不到其他模块而自我崩溃。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个模块都可以在必要时优雅地降级服务&lt;/strong&gt;。所谓优雅地降级服务，是对系统鲁棒性的要求，即要求在设计实现模块时划分清楚基本功能和高级功能，保证基本功能不会依赖高级功能，这样同时就保证了不会因为高级功能出现故障而导致整个模块崩溃。根据这种理念实现的系统，也更容易快速地增加新的高级功能，因为不必担心引入高级功能影响原有的基本功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-的核心技术概念和-api-对象&#34;&gt;Kubernetes 的核心技术概念和 API 对象&lt;/h2&gt;
&lt;p&gt;API 对象是 Kubernetes 集群中的管理操作单元。Kubernetes 集群系统每支持一项新功能，引入一项新技术，一定会新引入对应的 API 对象，支持对该功能的管理操作。例如副本集 Replica Set 对应的 API 对象是 RS。&lt;/p&gt;
&lt;p&gt;每个 API 对象都有 3 大类属性：元数据 metadata、规范 spec 和状态 status。元数据是用来标识 API 对象的，每个对象都至少有 3 个元数据：namespace，name 和 uid；除此以外还有各种各样的标签 labels 用来标识和匹配不同的对象，例如用户可以用标签 env 来标识区分不同的服务部署环境，分别用 env=dev、env=testing、env=production 来标识开发、测试、生产的不同服务。规范描述了用户期望 Kubernetes 集群中的分布式系统达到的理想状态（Desired State），例如用户可以通过复制控制器 Replication Controller 设置期望的 Pod 副本数为 3；status 描述了系统实际当前达到的状态（Status），例如系统当前实际的 Pod 副本数为 2；那么复制控制器当前的程序逻辑就是自动启动新的 Pod，争取达到副本数为 3。&lt;/p&gt;
&lt;p&gt;Kubernetes 中所有的配置都是通过 API 对象的 spec 去设置的，也就是用户通过配置系统的理想状态来改变系统，这是 Kubernetes 重要设计理念之一，即所有的操作都是声明式（Declarative）的而不是命令式（Imperative）的。声明式操作在分布式系统中的好处是稳定，不怕丢操作或运行多次，例如设置副本数为 3 的操作运行多次也还是一个结果，而给副本数加 1 的操作就不是声明式的，运行多次结果就错了。&lt;/p&gt;
&lt;h3 id=&#34;pod&#34;&gt;Pod&lt;/h3&gt;
&lt;p&gt;Kubernetes 有很多技术概念，同时对应很多 API 对象，最重要的也是最基础的是 Pod。Pod 是在 Kubernetes 集群中运行部署应用或服务的最小单元，它是可以支持多容器的。Pod 的设计理念是支持多个容器在一个 Pod 中共享网络地址和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。Pod 对多容器的支持是 K8 最基础的设计理念。比如你运行一个操作系统发行版的软件仓库，一个 Nginx 容器用来发布软件，另一个容器专门用来从源仓库做同步，这两个容器的镜像不太可能是一个团队开发的，但是他们一块儿工作才能提供一个微服务；这种情况下，不同的团队各自开发构建自己的容器镜像，在部署的时候组合成一个微服务对外提供服务。&lt;/p&gt;
&lt;p&gt;Pod 是 Kubernetes 集群中所有业务类型的基础，可以看作运行在 Kubernetes 集群中的小机器人，不同类型的业务就需要不同类型的小机器人去执行。目前 Kubernetes 中的业务主要可以分为长期伺服型（long-running）、批处理型（batch）、节点后台支撑型（node-daemon）和有状态应用型（stateful application）；分别对应的小机器人控制器为 Deployment、Job、DaemonSet 和 StatefulSet，本文后面会一一介绍。&lt;/p&gt;
&lt;h3 id=&#34;副本控制器replication-controllerrc&#34;&gt;副本控制器（Replication Controller，RC）&lt;/h3&gt;
&lt;p&gt;RC 是 Kubernetes 集群中最早的保证 Pod 高可用的 API 对象。通过监控运行中的 Pod 来保证集群中运行指定数目的 Pod 副本。指定的数目可以是多个也可以是 1 个；少于指定数目，RC 就会启动运行新的 Pod 副本；多于指定数目，RC 就会杀死多余的 Pod 副本。即使在指定数目为 1 的情况下，通过 RC 运行 Pod 也比直接运行 Pod 更明智，因为 RC 也可以发挥它高可用的能力，保证永远有 1 个 Pod 在运行。RC 是 Kubernetes 较早期的技术概念，只适用于长期伺服型的业务类型，比如控制小机器人提供高可用的 Web 服务。&lt;/p&gt;
&lt;h3 id=&#34;副本集replica-setrs&#34;&gt;副本集（Replica Set，RS）&lt;/h3&gt;
&lt;p&gt;RS 是新一代 RC，提供同样的高可用能力，区别主要在于 RS 后来居上，能支持更多种类的匹配模式。副本集对象一般不单独使用，而是作为 Deployment 的理想状态参数使用。&lt;/p&gt;
&lt;h3 id=&#34;部署deployment&#34;&gt;部署（Deployment）&lt;/h3&gt;
&lt;p&gt;部署表示用户对 Kubernetes 集群的一次更新操作。部署是一个比 RS 应用模式更广的 API 对象，可以是创建一个新的服务，更新一个新的服务，也可以是滚动升级一个服务。滚动升级一个服务，实际是创建一个新的 RS，然后逐渐将新 RS 中副本数增加到理想状态，将旧 RS 中的副本数减小到 0 的复合操作；这样一个复合操作用一个 RS 是不太好描述的，所以用一个更通用的 Deployment 来描述。以 Kubernetes 的发展方向，未来对所有长期伺服型的的业务的管理，都会通过 Deployment 来管理。&lt;/p&gt;
&lt;h3 id=&#34;服务service&#34;&gt;服务（Service）&lt;/h3&gt;
&lt;p&gt;RC、RS 和 Deployment 只是保证了支撑服务的微服务 Pod 的数量，但是没有解决如何访问这些服务的问题。一个 Pod 只是一个运行服务的实例，随时可能在一个节点上停止，在另一个节点以一个新的 IP 启动一个新的 Pod，因此不能以确定的 IP 和端口号提供服务。要稳定地提供服务需要服务发现和负载均衡能力。服务发现完成的工作，是针对客户端访问的服务，找到对应的的后端服务实例。在 K8 集群中，客户端需要访问的服务就是 Service 对象。每个 Service 会对应一个集群内部有效的虚拟 IP，集群内部通过虚拟 IP 访问一个服务。在 Kubernetes 集群中微服务的负载均衡是由 Kube-proxy 实现的。Kube-proxy 是 Kubernetes 集群内部的负载均衡器。它是一个分布式代理服务器，在 Kubernetes 的每个节点上都有一个；这一设计体现了它的伸缩性优势，需要访问服务的节点越多，提供负载均衡能力的 Kube-proxy 就越多，高可用节点也随之增多。与之相比，我们平时在服务器端做个反向代理做负载均衡，还要进一步解决反向代理的负载均衡和高可用问题。&lt;/p&gt;
&lt;h3 id=&#34;任务job&#34;&gt;任务（Job）&lt;/h3&gt;
&lt;p&gt;Job 是 Kubernetes 用来控制批处理型任务的 API 对象。批处理业务与长期伺服业务的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job 管理的 Pod 根据用户的设置把任务成功完成就自动退出了。成功完成的标志根据不同的 spec.completions 策略而不同：单 Pod 型任务有一个 Pod 成功就标志完成；定数成功型任务保证有 N 个任务全部成功；工作队列型任务根据应用确认的全局成功而标志成功。&lt;/p&gt;
&lt;h3 id=&#34;后台支撑服务集daemonset&#34;&gt;后台支撑服务集（DaemonSet）&lt;/h3&gt;
&lt;p&gt;长期伺服型和批处理型服务的核心在业务应用，可能有些节点运行多个同类业务的 Pod，有些节点上又没有这类 Pod 运行；而后台支撑型服务的核心关注点在 Kubernetes 集群中的节点（物理机或虚拟机），要保证每个节点上都有一个此类 Pod 运行。节点可能是所有集群节点也可能是通过 nodeSelector 选定的一些特定节点。典型的后台支撑型服务包括，存储，日志和监控等在每个节点上支持 Kubernetes 集群运行的服务。&lt;/p&gt;
&lt;h3 id=&#34;有状态服务集statefulset&#34;&gt;有状态服务集（StatefulSet）&lt;/h3&gt;
&lt;p&gt;Kubernetes 在 1.3 版本里发布了 Alpha 版的 PetSet 功能，在 1.5 版本里将 PetSet 功能升级到了 Beta 版本，并重新命名为 StatefulSet，最终在 1.9 版本里成为正式 GA 版本。在云原生应用的体系里，有下面两组近义词；第一组是无状态（stateless）、牲畜（cattle）、无名（nameless）、可丢弃（disposable）；第二组是有状态（stateful）、宠物（pet）、有名（having name）、不可丢弃（non-disposable）。RC 和 RS 主要是控制提供无状态服务的，其所控制的 Pod 的名字是随机设置的，一个 Pod 出故障了就被丢弃掉，在另一个地方重启一个新的 Pod，名字变了。名字和启动在哪儿都不重要，重要的只是 Pod 总数；而 StatefulSet 是用来控制有状态服务，StatefulSet 中的每个 Pod 的名字都是事先确定的，不能更改。StatefulSet 中 Pod 的名字的作用，并不是《千与千寻》的人性原因，而是关联与该 Pod 对应的状态。&lt;/p&gt;
&lt;p&gt;对于 RC 和 RS 中的 Pod，一般不挂载存储或者挂载共享存储，保存的是所有 Pod 共享的状态，Pod 像牲畜一样没有分别（这似乎也确实意味着失去了人性特征）；对于 StatefulSet 中的 Pod，每个 Pod 挂载自己独立的存储，如果一个 Pod 出现故障，从其他节点启动一个同样名字的 Pod，要挂载上原来 Pod 的存储继续以它的状态提供服务。&lt;/p&gt;
&lt;p&gt;适合于 StatefulSet 的业务包括数据库服务 MySQL 和 PostgreSQL，集群化管理服务 ZooKeeper、etcd 等有状态服务。StatefulSet 的另一种典型应用场景是作为一种比普通容器更稳定可靠的模拟虚拟机的机制。传统的虚拟机正是一种有状态的宠物，运维人员需要不断地维护它，容器刚开始流行时，我们用容器来模拟虚拟机使用，所有状态都保存在容器里，而这已被证明是非常不安全、不可靠的。使用 StatefulSet，Pod 仍然可以通过漂移到不同节点提供高可用，而存储也可以通过外挂的存储来提供高可靠性，StatefulSet 做的只是将确定的 Pod 与确定的存储关联起来保证状态的连续性。&lt;/p&gt;
&lt;h3 id=&#34;集群联邦federation&#34;&gt;集群联邦（Federation）&lt;/h3&gt;
&lt;p&gt;Kubernetes 在 1.3 版本里发布了 beta 版的 Federation 功能。在云计算环境中，服务的作用距离范围从近到远一般可以有：同主机（Host，Node）、跨主机同可用区（Available Zone）、跨可用区同地区（Region）、跨地区同服务商（Cloud Service Provider）、跨云平台。Kubernetes 的设计定位是单一集群在同一个地域内，因为同一个地区的网络性能才能满足 Kubernetes 的调度和计算存储连接要求。而联合集群服务就是为提供跨 Region 跨服务商 Kubernetes 集群服务而设计的。&lt;/p&gt;
&lt;p&gt;每个 Kubernetes Federation 有自己的分布式存储、API Server 和 Controller Manager。用户可以通过 Federation 的 API Server 注册该 Federation 的成员 Kubernetes Cluster。当用户通过 Federation 的 API Server 创建、更改 API 对象时，Federation API Server 会在自己所有注册的子 Kubernetes Cluster 都创建一份对应的 API 对象。在提供业务请求服务时，Kubernetes Federation 会先在自己的各个子 Cluster 之间做负载均衡，而对于发送到某个具体 Kubernetes Cluster 的业务请求，会依照这个 Kubernetes Cluster 独立提供服务时一样的调度模式去做 Kubernetes Cluster 内部的负载均衡。而 Cluster 之间的负载均衡是通过域名服务的负载均衡来实现的。&lt;/p&gt;
&lt;p&gt;Federation V1 的设计是尽量不影响 Kubernetes Cluster 现有的工作机制，这样对于每个子 Kubernetes 集群来说，并不需要更外层的有一个 Kubernetes Federation，也就是意味着所有现有的 Kubernetes 代码和机制不需要因为 Federation 功能有任何变化。&lt;/p&gt;
&lt;p&gt;目前正在开发的 Federation V2，在保留现有 Kubernetes API 的同时，会开发新的 Federation 专用的 API 接口，详细内容可以在 &lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-multicluster&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt; 找到。&lt;/p&gt;
&lt;h3 id=&#34;存储卷volume&#34;&gt;存储卷（Volume）&lt;/h3&gt;
&lt;p&gt;Kubernetes 集群中的存储卷跟 Docker 的存储卷有些类似，只不过 Docker 的存储卷作用范围为一个容器，而 Kubernetes 的存储卷的生命周期和作用范围是一个 Pod。每个 Pod 中声明的存储卷由 Pod 中的所有容器共享。Kubernetes 支持非常多的存储卷类型，特别的，支持多种公有云平台的存储，包括 AWS，Google 和 Azure 云；支持多种分布式存储包括 GlusterFS 和 Ceph；也支持较容易使用的主机本地目录 emptyDir, hostPath 和 NFS。Kubernetes 还支持使用 Persistent Volume Claim 即 PVC 这种逻辑存储，使用这种存储，使得存储的使用者可以忽略后台的实际存储技术（例如 AWS，Google 或 GlusterFS 和 Ceph），而将有关存储实际技术的配置交给存储管理员通过 Persistent Volume 来配置。&lt;/p&gt;
&lt;h3 id=&#34;持久存储卷persistent-volumepv和持久存储卷声明persistent-volume-claimpvc&#34;&gt;持久存储卷（Persistent Volume，PV）和持久存储卷声明（Persistent Volume Claim，PVC）&lt;/h3&gt;
&lt;p&gt;PV 和 PVC 使得 Kubernetes 集群具备了存储的逻辑抽象能力，使得在配置 Pod 的逻辑里可以忽略对实际后台存储技术的配置，而把这项配置的工作交给 PV 的配置者，即集群的管理者。存储的 PV 和 PVC 的这种关系，跟计算的 Node 和 Pod 的关系是非常类似的；PV 和 Node 是资源的提供者，根据集群的基础设施变化而变化，由 Kubernetes 集群管理员配置；而 PVC 和 Pod 是资源的使用者，根据业务服务的需求变化而变化，有 Kubernetes 集群的使用者即服务的管理员来配置。&lt;/p&gt;
&lt;h3 id=&#34;节点node&#34;&gt;节点（Node）&lt;/h3&gt;
&lt;p&gt;Kubernetes 集群中的计算能力由 Node 提供，最初 Node 称为服务节点 Minion，后来改名为 Node。Kubernetes 集群中的 Node 也就等同于 Mesos 集群中的 Slave 节点，是所有 Pod 运行所在的工作主机，可以是物理机也可以是虚拟机。不论是物理机还是虚拟机，工作主机的统一特征是上面要运行 kubelet 管理节点上运行的容器。&lt;/p&gt;
&lt;h3 id=&#34;密钥对象secret&#34;&gt;密钥对象（Secret）&lt;/h3&gt;
&lt;p&gt;Secret 是用来保存和传递密码、密钥、认证凭证这些敏感信息的对象。使用 Secret 的好处是可以避免把敏感信息明文写在配置文件里。在 Kubernetes 集群中配置和使用服务不可避免的要用到各种敏感信息实现登录、认证等功能，例如访问 AWS 存储的用户名密码。为了避免将类似的敏感信息明文写在所有需要使用的配置文件中，可以将这些信息存入一个 Secret 对象，而在配置文件中通过 Secret 对象引用这些敏感信息。这种方式的好处包括：意图明确，避免重复，减少暴漏机会。&lt;/p&gt;
&lt;h3 id=&#34;用户帐户user-account和服务帐户service-account&#34;&gt;用户帐户（User Account）和服务帐户（Service Account）&lt;/h3&gt;
&lt;p&gt;顾名思义，用户帐户为人提供账户标识，而服务账户为计算机进程和 Kubernetes 集群中运行的 Pod 提供账户标识。用户帐户和服务帐户的一个区别是作用范围；用户帐户对应的是人的身份，人的身份与服务的 namespace 无关，所以用户账户是跨 namespace 的；而服务帐户对应的是一个运行中程序的身份，与特定 namespace 是相关的。&lt;/p&gt;
&lt;h3 id=&#34;命名空间namespace&#34;&gt;命名空间（Namespace）&lt;/h3&gt;
&lt;p&gt;命名空间为 Kubernetes 集群提供虚拟的隔离作用，Kubernetes 集群初始有两个命名空间，分别是默认命名空间 default 和系统命名空间 kube-system，除此以外，管理员可以可以创建新的命名空间满足需要。&lt;/p&gt;
&lt;h3 id=&#34;rbac-访问授权&#34;&gt;RBAC 访问授权&lt;/h3&gt;
&lt;p&gt;Kubernetes 在 1.3 版本中发布了 alpha 版的基于角色的访问控制（Role-based Access Control，RBAC）的授权模式。相对于基于属性的访问控制（Attribute-based Access Control，ABAC），RBAC 主要是引入了角色（Role）和角色绑定（RoleBinding）的抽象概念。在 ABAC 中，Kubernetes 集群中的访问策略只能跟用户直接关联；而在 RBAC 中，访问策略可以跟某个角色关联，具体的用户在跟一个或多个角色相关联。显然，RBAC 像其他新功能一样，每次引入新功能，都会引入新的 API 对象，从而引入新的概念抽象，而这一新的概念抽象一定会使集群服务管理和使用更容易扩展和重用。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;从 Kubernetes 的系统架构、技术概念和设计理念，我们可以看到 Kubernetes 系统最核心的两个设计理念：一个是 &lt;strong&gt;容错性&lt;/strong&gt;，一个是 &lt;strong&gt;易扩展性&lt;/strong&gt;。容错性实际是保证 Kubernetes 系统稳定性和安全性的基础，易扩展性是保证 Kubernetes 对变更友好，可以快速迭代增加新功能的基础。&lt;/p&gt;
&lt;p&gt;按照分布式系统一致性算法 Paxos 发明人计算机科学家 &lt;a href=&#34;http://research.microsoft.com/users/lamport/pubs/pubs.html&#34; title=&#34;Leslie Lamport&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leslie Lamport&lt;/a&gt; 的理念，一个分布式系统有两类特性：安全性 Safety 和活性 Liveness。安全性保证系统的稳定，保证系统不会崩溃，不会出现业务错误，不会做坏事，是严格约束的；活性使得系统可以提供功能，提高性能，增加易用性，让系统可以在用户“看到的时间内”做些好事，是尽力而为的。Kubernetes 系统的设计理念正好与 Lamport 安全性与活性的理念不谋而合，也正是因为 Kubernetes 在引入功能和技术的时候，非常好地划分了安全性和活性，才可以让 Kubernetes 能有这么快版本迭代，快速引入像 RBAC、Federation 和 PetSet 这种新功能。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/kubernetes-and-cloud-native-applications-part01/&#34; title=&#34;《Kubernetes 与云原生应用》系列之 Kubernetes 的系统架构与设计理念&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Kubernetes 与云原生应用》系列之 Kubernetes 的系统架构与设计理念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>勘误</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/corrigendum/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/corrigendum/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;勘误 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PDF 原文第 4 页，kubelet 端口，默认应为 10250，而不是 10251。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>ApplicationScope</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/application-scope/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/application-scope/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    本文基于 OAM v1alpha2 版本。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ApplicationScope&lt;/code&gt; 根据 &lt;code&gt;Component&lt;/code&gt; 中的应用逻辑或共同行为划定作用域，将其分组以便于管理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ApplicationScope&lt;/code&gt; 具有以下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 &lt;code&gt;Component&lt;/code&gt; 可能属于一个或多个 &lt;code&gt;ApplicationScope&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;有的 &lt;code&gt;ApplicationScope&lt;/code&gt; 可以限定其中是否可以部署同一个 &lt;code&gt;Component&lt;/code&gt; 的多个实例；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplicationScope&lt;/code&gt; 可以作为 &lt;code&gt;Component&lt;/code&gt; 与基础设施的连接层，提供身份、网络或安全能力；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Trait&lt;/code&gt; 可以根据 &lt;code&gt;Component&lt;/code&gt; 中定义的 &lt;code&gt;ApplicationScope&lt;/code&gt; 来执行适当的运维特性；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前 OAM 中支持的核心应用范围类型有 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/standard/scopes/network_scope.md&#34; title=&#34;NetworkScope&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;NetworkScope&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/standard/scopes/health_scope.md&#34; title=&#34;HealthScope&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;HealthScope&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是使用 &lt;code&gt;NetworkScope&lt;/code&gt; 来声明作用域的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkScope&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-network&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-region&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;production&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;networkId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-network&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subnetIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;my-subnetwork-01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;my-subnetwork-02&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;my-subnetwork-03&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;internetGatewayType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的示例的作用是将三个子网划定为一组网络边界，这通常是使用 VPC 实现。&lt;/p&gt;
&lt;p&gt;关于 &lt;code&gt;ApplicationScope&lt;/code&gt; 的详细信息请参考 OAM 中的 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/5.application_scopes.md&#34; title=&#34;ApplicationScope 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ApplicationScope 规范&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生应用的定义</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/apps/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/apps/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    本文参考的是 &lt;a href=&#34;https://github.com/oam-dev/spec&#34; title=&#34;OAM 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAM 规范&lt;/a&gt;中对云原生应用的定义，并做出了引申。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;云原生应用是一个相互关联但又不独立的组件（service、task、worker）的集合，这些组件与配置结合在一起并在适当的运行时实例化后，共同完成统一的功能目的。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用模型&#34;&gt;云原生应用模型&lt;/h2&gt;
&lt;p&gt;下图是 OAM 定义的云原生应用模型示意图，为了便于理解，图中相同颜色的部分为同一类别的对象定义。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/apps/cloud-native-app-model_hu_7332c5a843e00f04.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/apps/cloud-native-app-model.png&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/apps/cloud-native-app-model.png&#34; data-width=&#34;1850&#34; data-height=&#34;550&#34; alt=&#34;image&#34; data-caption=&#34;云原生应用模型&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;云原生应用模型&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;OAM 的规范中定义了以下对象，它们既是 OAM 规范中的基本术语也是云原生应用的基本组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;../spec/workload&#34; title=&#34;Workload&#34;&gt;Workload&lt;/a&gt;（工作负载）&lt;/strong&gt;：应用程序的工作负载类型，由平台提供。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;../spec/component&#34; title=&#34;Component&#34;&gt;Component&lt;/a&gt;（组件）&lt;/strong&gt;：定义了一个 &lt;code&gt;Workload&lt;/code&gt; 的实例，并以基础设施中立的术语声明其运维特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;../spec/trait&#34; title=&#34;Trait&#34;&gt;Trait&lt;/a&gt;（特征）&lt;/strong&gt;：用于将运维特性分配给组件实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;../spec/application-scope&#34; title=&#34;ApplicationScope&#34;&gt;ApplicationScope&lt;/a&gt;（应用作用域）&lt;/strong&gt;：用于将组件分组成具有共同特性的松散耦合的应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;../spec/application-configuration&#34; title=&#34;ApplicationConfiguration&#34;&gt;ApplicationConfiguration&lt;/a&gt;（应用配置）&lt;/strong&gt;：描述 &lt;code&gt;Component&lt;/code&gt; 的部署、&lt;code&gt;Trait&lt;/code&gt; 和 &lt;code&gt;ApplicationScope&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OAM 规范中提供了一个使用以上对象定义云原生应用的&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/examples/workflow.md&#34; title=&#34;工作流示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;工作流示例&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关注点分离&#34;&gt;关注点分离&lt;/h2&gt;
&lt;p&gt;下图是不同角色对于该模型的关注点示意图。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/apps/roles.svg&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/apps/roles.svg&#34; alt=&#34;image&#34; data-caption=&#34;云原生应用模型中的目标角色&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;云原生应用模型中的目标角色&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们可以看到对于一个云原生应用来说，不同的对象是由不同的角色来负责的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础设施运维：提供不同的 &lt;code&gt;Workload&lt;/code&gt; 类型供开发者使用；&lt;/li&gt;
&lt;li&gt;应用运维：定义适用于不同 &lt;code&gt;Workload&lt;/code&gt; 的运维属性 &lt;code&gt;Trait&lt;/code&gt; 和管理 &lt;code&gt;Component&lt;/code&gt; 的 &lt;code&gt;ApplicationScope&lt;/code&gt; 即作用域；&lt;/li&gt;
&lt;li&gt;应用开发者：负责应用组件 &lt;code&gt;Component&lt;/code&gt; 的定义；&lt;/li&gt;
&lt;li&gt;应用开发者和运维：共同将 &lt;code&gt;Component&lt;/code&gt; 与运维属性 &lt;code&gt;Trait&lt;/code&gt; 绑定在一起，维护应用程序的生命周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 OAM 中的对象定义的云原生应用可以充分利用平台能力自由组合，开发者和运维人员的职责可以得到有效分离，组件的复用性得到大幅提高。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/spec&#34; title=&#34;The Open Application Model specification - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Open Application Model specification - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>服务网格的部署模式</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/</guid>
      <description>
        
        
        &lt;p&gt;我们在前面看到了通过&lt;strong&gt;客户端库&lt;/strong&gt;来治理服务的架构图，那是我们在改造成服务网格架构前使用微服务架构通常的形式，下图是使用服务网格架构的最终形式。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/arch_hu_382288679cea9546.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/arch.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/service-mesh-patterns/arch.jpg&#34; data-width=&#34;1140&#34; data-height=&#34;892&#34; alt=&#34;image&#34; data-caption=&#34;服务网格架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;服务网格架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当然在达到这一最终形态之前我们需要将架构一步步演进，下面给出的是参考的演进路线。&lt;/p&gt;
&lt;h2 id=&#34;ingress-或边缘代理&#34;&gt;Ingress 或边缘代理&lt;/h2&gt;
&lt;p&gt;如果你使用的是 Kubernetes 做容器编排调度，那么在进化到服务网格架构之前，通常会使用 Ingress Controller，做集群内外流量的反向代理，如使用 Traefik 或 Nginx Ingress Controller。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/ingress_hu_e38c3760e765074c.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/ingress.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/service-mesh-patterns/ingress.jpg&#34; data-width=&#34;1140&#34; data-height=&#34;422&#34; alt=&#34;image&#34; data-caption=&#34;Ingress 或边缘代理架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ingress 或边缘代理架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这样只要利用 Kubernetes 的原有能力，当你的应用微服务化并容器化需要开放外部访问且只需要 L7 代理的话这种改造十分简单，但问题是无法管理服务间流量。&lt;/p&gt;
&lt;h2 id=&#34;路由器网格&#34;&gt;路由器网格&lt;/h2&gt;
&lt;p&gt;Ingress 或者边缘代理可以处理进出集群的流量，为了应对集群内的服务间流量管理，我们可以在集群内加一个 &lt;code&gt;Router&lt;/code&gt; 层，即路由器层，让集群内所有服务间的流量都通过该路由器。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/router_hu_539facbb1c04de8f.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/router.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/service-mesh-patterns/router.jpg&#34; data-width=&#34;1142&#34; data-height=&#34;498&#34; alt=&#34;image&#34; data-caption=&#34;路由器网格架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;路由器网格架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这个架构无需对原有的单体应用和新的微服务应用做什么改造，可以很轻易的迁移进来，但是当服务多了管理起来就很麻烦。&lt;/p&gt;
&lt;h2 id=&#34;proxy-per-node&#34;&gt;Proxy per Node&lt;/h2&gt;
&lt;p&gt;这种架构是在每个节点上都部署一个代理，如果使用 Kubernetes 来部署的话就是使用 &lt;code&gt;DaemonSet&lt;/code&gt; 对象，Linkerd 第一代就是使用这种方式部署的，一代的 Linkerd 使用 Scala 开发，基于 JVM 比较消耗资源，二代的 Linkerd 使用 Go 开发。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/proxy-per-node_hu_a151cd6df685ff84.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/proxy-per-node.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/service-mesh-patterns/proxy-per-node.jpg&#34; data-width=&#34;1142&#34; data-height=&#34;408&#34; alt=&#34;image&#34; data-caption=&#34;Proxy per node 架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Proxy per node 架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这种架构有个好处是每个节点只需要部署一个代理即可，比起在每个应用中都注入一个 sidecar 的方式更节省资源，而且更适合基于物理机 / 虚拟机的大型单体应用，但是也有一些副作用，比如粒度还是不够细，如果一个节点出问题，该节点上的所有服务就都会无法访问，对于服务来说不是完全透明的。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-代理--fabric-模型&#34;&gt;Sidecar 代理 / Fabric 模型&lt;/h2&gt;
&lt;p&gt;这个一般不会成为典型部署类型，当企业的服务网格架构演进到这一步时通常只会持续很短时间，然后就会增加控制平面。跟前几个阶段最大的不同就是，应用程序和代理被放在了同一个部署单元里，可以对应用程序的流量做更细粒度的控制。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/sidecar_hu_fcf51fc70322641f.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/sidecar.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/service-mesh-patterns/sidecar.jpg&#34; data-width=&#34;1140&#34; data-height=&#34;524&#34; alt=&#34;image&#34; data-caption=&#34;Sidecar 代理/Fabric 模型示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Sidecar 代理/Fabric 模型示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这已经是最接近服务网格架构的一种形态了，唯一缺的就是控制平面了。所有的 sidecar 都支持热加载，配置的变更可以很容易的在流量控制中反应出来，但是如何操作这么多 sidecar 就需要一个统一的控制平面了。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-代理--控制平面&#34;&gt;Sidecar 代理 / 控制平面&lt;/h2&gt;
&lt;p&gt;下面的示意图是目前大多数服务网格的架构图，也可以说是整个服务网格架构演进的最终形态。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/control-plane_hu_c3dee1670c70327d.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/service-mesh-patterns/control-plane.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/service-mesh-patterns/control-plane.jpg&#34; data-width=&#34;1142&#34; data-height=&#34;814&#34; alt=&#34;image&#34; data-caption=&#34;Sidecar 代理/控制平面架构示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Sidecar 代理/控制平面架构示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这种架构将代理作为整个服务网格中的一部分，使用 Kubernetes 部署的话，可以通过以 sidecar 的形式注入，减轻了部署的负担，可以对每个服务的做细粒度权限与流量控制。但有一点不好就是为每个服务都注入一个代理会占用很多资源，因此要想方设法降低每个代理的资源消耗。&lt;/p&gt;
&lt;h2 id=&#34;多集群部署和扩展&#34;&gt;多集群部署和扩展&lt;/h2&gt;
&lt;p&gt;以上都是单个服务网格集群的架构，所有的服务都位于同一个集群中，服务网格管理进出集群和集群内部的流量，当我们需要管理多个集群或者是引入外部的服务时就需要网格扩展和多集群配置。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Etcd 解析</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/etcd/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/etcd/</guid>
      <description>
        
        
        &lt;p&gt;Etcd 是 Kubernetes 集群中的一个十分重要的组件，用于保存集群所有的网络配置和对象的状态信息。在后面具体的安装环境中，我们安装的 etcd 的版本是 v3.1.5，整个 Kubernetes 系统中一共有两个服务需要用到 etcd 用来协同和存储配置，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络插件 flannel、对于其它网络插件也需要用到 etcd 存储网络的配置信息&lt;/li&gt;
&lt;li&gt;Kubernetes 本身，包括各种对象的状态和元信息配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：flannel 操作 etcd 使用的是 v2 的 API，而 Kubernetes 操作 etcd 使用的 v3 的 API，所以在下面我们执行 &lt;code&gt;etcdctl&lt;/code&gt; 的时候需要设置 &lt;code&gt;ETCDCTL_API&lt;/code&gt; 环境变量，该变量默认值为 2。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;Etcd 使用的是 raft 一致性算法来实现的，是一款分布式的一致性 KV 存储，主要用于共享配置和服务发现。关于 raft 一致性算法请参考 &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34; title=&#34;该动画演示&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;该动画演示&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于 Etcd 的原理解析请参考 &lt;a href=&#34;http://jolestar.com/etcd-architecture/&#34; title=&#34;Etcd 架构与实现解析&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etcd 架构与实现解析&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用-etcd-存储-flannel-网络信息&#34;&gt;使用 Etcd 存储 Flannel 网络信息&lt;/h2&gt;
&lt;p&gt;我们在安装 Flannel 的时候配置了 &lt;code&gt;FLANNEL_ETCD_PREFIX=&amp;quot;/kube-centos/network&amp;quot;&lt;/code&gt; 参数，这是 Flannel 查询 etcd 的目录地址。&lt;/p&gt;
&lt;p&gt;查看 Etcd 中存储的 flannel 网络信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;$ etcdctl --ca-file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;/etc/kubernetes/ssl/ca.pem --cert-file=/etc/kubernetes/ssl/kubernetes.pem --key-file=/etc/kubernetes/ssl/kubernetes-key.pem ls /kube-centos/network -r&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;2018-01-19 18:38:22.768145 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;/kube-centos/network/config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;/kube-centos/network/subnets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;/kube-centos/network/subnets/172.30.31.0-24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;/kube-centos/network/subnets/172.30.20.0-24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;/kube-centos/network/subnets/172.30.23.0-24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 flannel 的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ etcdctl --ca-file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/kubernetes/ssl/ca.pem --cert-file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/kubernetes/ssl/kubernetes.pem --key-file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/kubernetes/ssl/kubernetes-key.pem get /kube-centos/network/config
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2018-01-19 18:38:22.768145 I &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; warning: ignoring ServerName &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; user-provided CA &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; backwards compatibility is deprecated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Network&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;172.30.0.0/16&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;SubnetLen&amp;#34;&lt;/span&gt;: 24, &lt;span class=&#34;s2&#34;&gt;&amp;#34;Backend&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;host-gw&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-etcd-存储-kubernetes-对象信息&#34;&gt;使用 Etcd 存储 Kubernetes 对象信息&lt;/h2&gt;
&lt;p&gt;Kubernetes 使用 etcd v3 的 API 操作 etcd 中的数据。所有的资源对象都保存在 &lt;code&gt;/registry&lt;/code&gt; 路径下，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;ThirdPartyResourceData&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;apiextensions.k8s.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;apiregistration.k8s.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;certificatesigningrequests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;clusterrolebindings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;clusterroles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;configmaps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;controllerrevisions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;controllers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;daemonsets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;deployments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;events&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;horizontalpodautoscalers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;limitranges&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;minions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;monitoring.coreos.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;namespaces&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;persistentvolumeclaims&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;persistentvolumes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;poddisruptionbudgets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;pods&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;ranges&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;replicasets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;resourcequotas&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;rolebindings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;roles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;secrets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;serviceaccounts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;services&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;statefulsets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;storageclasses&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;thirdpartyresources&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你还创建了 CRD（自定义资源定义），则在此会出现 CRD 的 API。&lt;/p&gt;
&lt;h3 id=&#34;查看集群中所有的-pod-信息&#34;&gt;查看集群中所有的 Pod 信息&lt;/h3&gt;
&lt;p&gt;例如我们直接从 etcd 中查看 kubernetes 集群中所有的 pod 的信息，可以使用下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ETCDCTL_API&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; etcdctl get /registry/pods --prefix -w json&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;python -m json.tool
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时将看到 json 格式输出的结果，其中的&lt;code&gt;key&lt;/code&gt;使用了&lt;code&gt;base64&lt;/code&gt; 编码，关于 etcdctl 命令的详细用法请参考 &lt;a href=&#34;../../guide/using-etcdctl-to-access-kubernetes-data/&#34; title=&#34;使用 etcdctl 访问 kubernetes 数据&#34;&gt;使用 etcdctl 访问 kubernetes 数据&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;etcd-v2-与-v3-版本-api-的区别&#34;&gt;Etcd V2 与 V3 版本 API 的区别&lt;/h2&gt;
&lt;p&gt;Etcd V2 和 V3 之间的数据结构完全不同，互不兼容，也就是说使用 V2 版本的 API 创建的数据只能使用 V2 的 API 访问，V3 的版本的 API 创建的数据只能使用 V3 的 API 访问。这就造成我们访问 etcd 中保存的 flannel 的数据需要使用 &lt;code&gt;etcdctl&lt;/code&gt; 的 V2 版本的客户端，而访问 kubernetes 的数据需要设置 &lt;code&gt;ETCDCTL_API=3&lt;/code&gt; 环境变量来指定 V3 版本的 API。&lt;/p&gt;
&lt;h2 id=&#34;etcd-数据备份&#34;&gt;Etcd 数据备份&lt;/h2&gt;
&lt;p&gt;我们安装的时候指定的 Etcd 数据的存储路径是 &lt;code&gt;/var/lib/etcd&lt;/code&gt;，一定要对该目录做好备份。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://etcd.io/&#34; title=&#34;etcd 官方文档 - etcd.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;etcd 官方文档 - etcd.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/u010278923/article/details/71727682&#34; title=&#34;etcd v3 命令和 API - blog.csdn.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;etcd v3 命令和 API - blog.csdn.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jolestar.com/etcd-architecture/&#34; title=&#34;Etcd 架构与实现解析 - jolestar.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etcd 架构与实现解析 - jolestar.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>简介</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/introduction/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/introduction/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes，经常被缩写为 &amp;ldquo;K8s&amp;rdquo;，是一个开源的容器或编排系统，用于自动部署、扩展和管理容器化应用程序。它管理着构成集群的所有元素，从应用中的每个微服务到整个集群。与单体软件平台相比，将容器化应用作为微服务使用可以提供更多的灵活性和安全优势，但也可能引入其他复杂因素。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/introduction/f1_hu_9cc9bee39508d91f.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/introduction/f1.jpg&#34; data-img=&#34;/book/kubernetes-hardening-guidance/introduction/f1.jpg&#34; data-width=&#34;1721&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;图 1：Kubernetes 集群组件的高层视图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：Kubernetes 集群组件的高层视图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;本指南重点关注安全挑战，并尽可能提出适用于国家安全系统和关键基础设施管理员的加固策略。尽管本指南是针对国家安全系统和关键基础设施组织的，但也鼓励联邦和州、地方、部落和领土（SLTT）政府网络的管理员实施所提供的建议。Kubernetes 集群的安全问题可能很复杂，而且经常在利用其错误配置的潜在威胁中被滥用。以下指南提供了具体的安全配置，可以帮助建立更安全的 Kubernetes 集群。&lt;/p&gt;
&lt;h2 id=&#34;建议&#34;&gt;建议&lt;/h2&gt;
&lt;p&gt;每个部分的主要建议摘要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes Pod 安全
&lt;ul&gt;
&lt;li&gt;使用构建的容器，以非 root 用户身份运行应用程序&lt;/li&gt;
&lt;li&gt;在可能的情况下，用不可变的文件系统运行容器&lt;/li&gt;
&lt;li&gt;扫描容器镜像，以发现可能存在的漏洞或错误配置&lt;/li&gt;
&lt;li&gt;使用 Pod 安全政策来执行最低水平的安全，包括：
&lt;ul&gt;
&lt;li&gt;防止有特权的容器&lt;/li&gt;
&lt;li&gt;拒绝经常被利用来突破的容器功能，如 &lt;code&gt;hostPID&lt;/code&gt;、&lt;code&gt;hostIPC&lt;/code&gt;、&lt;code&gt;hostNetwork&lt;/code&gt;、&lt;code&gt;allowedHostPath&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;拒绝以 root 用户身份执行或允许提升为根用户的容器&lt;/li&gt;
&lt;li&gt;使用安全服务，如 SELinux®、AppArmor® 和 seccomp，加固应用程序，防止被利用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络隔离和加固
&lt;ul&gt;
&lt;li&gt;使用防火墙和基于角色的访问控制（RBAC）锁定对控制平面节点的访问&lt;/li&gt;
&lt;li&gt;进一步限制对 Kubernetes etcd 服务器的访问&lt;/li&gt;
&lt;li&gt;配置控制平面组件，使用传输层安全（TLS）证书进行认证、加密通信&lt;/li&gt;
&lt;li&gt;设置网络策略来隔离资源。不同命名空间的 Pod 和服务仍然可以相互通信，除非执行额外的隔离，如网络策略&lt;/li&gt;
&lt;li&gt;将所有凭证和敏感信息放在 Kubernetes Secret 中，而不是配置文件中。使用强大的加密方法对 Secret 进行加密&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;认证和授权
&lt;ul&gt;
&lt;li&gt;禁用匿名登录（默认启用）&lt;/li&gt;
&lt;li&gt;使用强大的用户认证&lt;/li&gt;
&lt;li&gt;创建 RBAC 策略以限制管理员、用户和服务账户活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志审计
&lt;ul&gt;
&lt;li&gt;启用审计记录（默认为禁用）&lt;/li&gt;
&lt;li&gt;在节点、Pod 或容器级故障的情况下，持续保存日志以确保可用性&lt;/li&gt;
&lt;li&gt;配置一个 metric logger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;升级和应用安全实践
&lt;ul&gt;
&lt;li&gt;立即应用安全补丁和更新&lt;/li&gt;
&lt;li&gt;定期进行漏洞扫描和渗透测试&lt;/li&gt;
&lt;li&gt;当组件不再需要时，将其从环境中移除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架构概述&#34;&gt;架构概述&lt;/h2&gt;
&lt;p&gt;Kubernetes 使用集群架构。一个 Kubernetes 集群是由一些控制平面和一个或多个物理或虚拟机组成的，称为工作节点。工作者节点承载 Pod，其中包含一个或多个容器。容器是包含软件包及其所有依赖关系的可执行镜像。见图 2：Kubernetes 架构。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/introduction/f2_hu_f85ae089442cac2.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/introduction/f2.jpg&#34; data-img=&#34;/book/kubernetes-hardening-guidance/introduction/f2.jpg&#34; data-width=&#34;1752&#34; data-height=&#34;852&#34; alt=&#34;image&#34; data-caption=&#34;图 2：Kubernetes 架构&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：Kubernetes 架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;控制平面对集群进行决策。这包括调度容器的运行，检测 / 应对故障，并在部署文件中指定的副本数量没有得到满足时启动新的 Pod。以下逻辑组件都是控制平面的一部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controller manager（默认端口：10252）&lt;/strong&gt; - 监视 Kubernetes 集群，以检测和维护 Kubernetes 环境的几个方面，包括将 Pod 加入到服务中，保持一组 Pod 的正确数量，并对节点的丢失做出反应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud controller manager（默认端口：10258）&lt;/strong&gt; - 一个用于基于云的部署的可选组件。云控制器与云服务提供商接口，以管理集群的负载均衡器和虚拟网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes API Server（默认端口：6443 或 8080）&lt;/strong&gt; - 管理员操作 Kubernetes 的接口。因此，API 服务器通常暴露在控制平面之外。API 服务器被设计成可扩展的，可能存在于多个控制平面节点上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd（默认端口范围：2379-2380）&lt;/strong&gt; - 持久化的备份存储，关于集群状态的所有信息都保存在这里。Etcd 不应该被直接操作，而应该通过 API 服务器来管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheduler（默认端口：10251）&lt;/strong&gt; - 跟踪工作节点的状态并决定在哪里运行 Pod。Kube-scheduler 只可以由控制平面内的节点访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 工作节点是专门为集群运行容器化应用的物理或虚拟机。除了运行容器引擎外，工作节点还承载以下两个服务，允许从控制平面进行协调：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubelet（默认端口：10250）&lt;/strong&gt; - 在每个工作节点上运行，以协调和验证 Pod 的执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kube-proxy&lt;/strong&gt; - 一个网络代理，使用主机的数据包过滤能力，确保 Kubernetes 集群中数据包的正确路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集群通常使用云服务提供商（CSP）的 Kubernetes 服务或在企业内部托管。在设计 Kubernetes 环境时，组织应了解他们在安全维护集群方面的责任。CSP 管理大部分的 Kubernetes 服务，但组织可能需要处理某些方面，如认证和授权。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>ApplicationConfiguration</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/application-configuration/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/application-configuration/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    本文基于 OAM v1alpha2 版本。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ApplicationConfiguration&lt;/code&gt; 将 &lt;code&gt;Component&lt;/code&gt; 与 &lt;code&gt;Trait&lt;/code&gt; 组合，定义了一个应用程序的配置，&lt;code&gt;Component&lt;/code&gt; 每部署一次就会产生一个实例（&lt;code&gt;Instance&lt;/code&gt;），实例是可以被升级的（包括回滚和重新部署），而每次部署和升级就会产生一次新的发布（&lt;code&gt;Release&lt;/code&gt;）。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    关于 Release
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;a href=&#34;https://12factor.net/zh_cn/&#34; title=&#34;12 因素应用&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12 因素应用&lt;/a&gt;严格区分&lt;a href=&#34;https://12factor.net/zh_cn/build-release-run&#34; title=&#34;构建、发布、运行&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建、发布、运行&lt;/a&gt;这三个步骤。每次构建和修改配置后都会产生一次新的发布（&lt;code&gt;Release&lt;/code&gt;）。OAM 中将 &lt;code&gt;Component&lt;/code&gt;、&lt;code&gt;Trait&lt;/code&gt;、&lt;code&gt;ApplicaitonScope&lt;/code&gt; 组合而成的 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 即等同于 &lt;code&gt;Release&lt;/code&gt;。每次对 &lt;code&gt;ApplciationConfiguration&lt;/code&gt; 的更新都会创建一个新的 &lt;code&gt;Release&lt;/code&gt;（跟 &lt;a href=&#34;https://helm.sh&#34; title=&#34;Helm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm&lt;/a&gt; 中的 &lt;code&gt;Release&lt;/code&gt; 概念一致）。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;下面是一个 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 示例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ApplicationConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My first application deployment.&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;componentName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parameterValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PARAMETER_NAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SUPPLIED_VALUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ANOTHER_PARAMETER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AnotherValue&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;traits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;manualscaler.core.oam.dev&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicaCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scopes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;scopeRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;core.oam.dev/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkScope&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-network&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 的详细信息参考 OAM 中的 &lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/7.application_configuration.md&#34; title=&#34;ApplicationConfiguration 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ApplicationConfiguration 规范&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生快速入门</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/quick-start/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/quick-start/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 一词来自希腊语，意思是“飞行员”或“舵手”。这个名字很贴切，Kubernetes 可以帮助你在波涛汹涌的容器海洋中航行。&lt;/p&gt;
&lt;p&gt;Kubernetes 是做什么的？什么是 Docker？什么是容器编排？Kubernetes 是如何工作和扩展的？你可能还有很多其他的问题，本文将一一为你解答。&lt;/p&gt;
&lt;p&gt;这篇文章适合初学者，尤其是那些工作忙碌，没有办法抽出太多时间来了解 Kubernetes 和云原生的开发者们，希望本文可以帮助你进入 Kubernetes 的世界。&lt;/p&gt;
&lt;p&gt;简而言之，Kubernetes 提供了一个平台或工具来帮助你快速协调或扩展容器化应用，特别是在 &lt;a href=&#34;https://docker.com/&#34; title=&#34;Docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 容器。让我们深入了解一下这些概念。&lt;/p&gt;
&lt;h2 id=&#34;容器和容器化&#34;&gt;容器和容器化&lt;/h2&gt;
&lt;p&gt;那么什么是容器呢？&lt;/p&gt;
&lt;p&gt;要讨论容器化首先要谈到虚拟机 (VM)，顾名思义，虚拟机就是可以远程连接的虚拟服务器，比如 AWS 的 EC2 或阿里云的 ECS。&lt;/p&gt;
&lt;p&gt;接下来，假如你要在虚拟机上运行一个网络应用 —— 包括一个 MySQL 数据库、一个 Vue 前端和一些 Java 库，在 Ubuntu 操作系统 (OS) 上运行。你不用熟悉其中的每一个技术 —— 你只要记住，一个应用程序由各种组件、服务和库组成，它们运行在操作系统上。&lt;/p&gt;
&lt;p&gt;现在，将应用程序打包成一个虚拟机镜像，这个镜像中包括了 Ubuntu 操作系统。这使得虚拟机变得非常笨重 —— 通常有几个 G 的大小。&lt;/p&gt;
&lt;p&gt;虚拟机镜像包含了整个操作系统及所有的库，对应用程序来说，这个镜像过于臃肿，其中大部分组件并没有被应用程序直接调用。如果你需要重新创建、备份或扩展这个应用程序，就需要复制整个环境（虚拟机镜像），在新环境中启动应用通常需要几十秒甚至几分钟时间。如果你想单独升级应用中的某个组件，比如说 Vue 应用，就需要重建整个虚拟机镜像。另外，如果你的两个应用依赖同一个底层镜像，升级底层镜像会同时影响这两个应用，而有时候，你只需要升级其中一个应用的依赖而已。这就是所谓的“依赖陷阱”。&lt;/p&gt;
&lt;p&gt;解决这个问题的办法就是容器。容器是继虚拟机之后更高层次的抽象，在这层抽象中，整个应用程序的每个组件被单独打包成一个个独立的单元，这个单元就是所谓的容器。通过这种方式，可以将代码和应用服务从底层架构中分离出来，实现了完全的可移植性（在任何操作系统或环境上运行应用的能力）。所以在上面的例子中，Ubuntu 操作系统就是一个单元（容器）。MySQL 数据库是另一个容器，Vue 环境和随之而来的库也是一个容器。&lt;/p&gt;
&lt;p&gt;但是，MySQL 数据库是如何自己“运行”的？数据库本身肯定也要在操作系统上运行吧？没错！&lt;/p&gt;
&lt;p&gt;更高层次的容器，比如 MySQL 容器，实际上会包含必要的库来与底层的操作系统容器通信和集成。所以你可以把容器看成是整个应用堆栈中的一层，每层都依赖于下层的单元。而这就类似于船舶或港口中集装箱的堆叠方式，每个容器的稳定性都依赖于下面的容器的支持。所以应用容器的核心是一个受控的执行环境。它们允许你从头开始定义整个环境，从操作系统开始，到你要使用的各个版本的库，再到你要添加的代码版本。&lt;/p&gt;
&lt;p&gt;与容器相关的一个重要概念是&lt;strong&gt;微服务&lt;/strong&gt;。将应用程序的各个组件拆分并打包成独立的服务，这样每个组件都可以很容易地被替换、升级、调试。上面的例子中，我们会为 Vue 前端创建一个微服务，为 MySQL 数据库创建另一个微服务，为 Java 中间件部分创建另一个微服务，以此类推。很明显，微服务与容器化是相辅相成的。&lt;/p&gt;
&lt;h2 id=&#34;从-docker-开始&#34;&gt;从 Docker 开始&lt;/h2&gt;
&lt;p&gt;现在你已经对容器有一定了解了吧？Docker 是最常用的容器化工具，也是最流行的容器运行时。&lt;/p&gt;
&lt;p&gt;Docker 开源于 2013 年。用于打包和创建容器，管理基于容器的应用。所有 Linux 发行版、Windows 和 macOS 都支持 Docker。&lt;/p&gt;
&lt;p&gt;还有其他的容器化工具，如 &lt;a href=&#34;https://coreos.com/rkt/&#34; title=&#34;CoreOS rkt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoreOS rkt&lt;/a&gt;、&lt;a href=&#34;https://mesos.apache.org/documentation/latest/mesos-containerizer/&#34; title=&#34;Mesos Containerizer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mesos Containerizer&lt;/a&gt; 和 &lt;a href=&#34;https://linuxcontainers.org/&#34; title=&#34;LXC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LXC&lt;/a&gt;。但是目前，绝大多数的容器化应用都是在 Docker 上运行的。&lt;/p&gt;
&lt;h2 id=&#34;再到-kubernetes&#34;&gt;再到 Kubernetes&lt;/h2&gt;
&lt;p&gt;首先，简单介绍一下历史。Kubernetes 是 Google 基于其内部容器调度平台 Borg 的经验开发的。2014 年开源，并作为 CNCF（云原生计算基金会）的核心发起项目。&lt;/p&gt;
&lt;p&gt;那么 Kubernetes 又跟容器是什么关系呢？让我们再回到上面的例子。假设我们的应用爆火，每天的注册用户越来越多。&lt;/p&gt;
&lt;p&gt;现在，我们需要增加后端资源，使浏览我们网站的用户在浏览页面时加载时间不会过长或者超时。最简单的方式就是增加容器的数量，然后使用负载均衡器将传入的负载（以用户请求的形式）分配给容器。&lt;/p&gt;
&lt;p&gt;这样做虽然行之有效，但也只能在用户规模有限的情况下使用。当用户请求达到几十万或几百万时，这种方法也是不可扩展的。你需要管理几十个也许是几百个负载均衡器，这本身就是另一个令人头疼的问题。如果我们想对网站或应用进行任何升级，也会遇到问题，因为负载均衡不会考虑到应用升级的问题。我们需要单独配置每个负载均衡器，然后升级该均衡器所服务的容器。想象一下，当你有 20 个负载均衡器和每周 5 或 6 个小的更新时，你将不得不进行大量的手工劳动。&lt;/p&gt;
&lt;p&gt;我们需要的是一种可以一次性将变更传递给所有受控容器的方法，同时也需要一种可以轻松地调度可用容器的方法，这个过程还必须要是自动化的，这正是 Kubernetes 所做的事情。&lt;/p&gt;
&lt;p&gt;接下来，我们将探讨 Kubernetes 究竟是如何工作的，它的各种组件和服务，以及更多关于如何使用 Kubernetes 来编排、管理和监控容器化环境。为了简单起见，假设我们使用的是 Docker 容器，尽管如前所述，Kubernetes 除了支持 Docker 之外，还支持其他几种容器平台。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-架构和组件&#34;&gt;Kubernetes 架构和组件&lt;/h2&gt;
&lt;p&gt;首先，最重要的是你需要认识到 Kubernetes 利用了“期望状态”原则。就是说，你定义了组件的期望状态，而 Kubernetes 要将它们始终调整到这个状态。&lt;/p&gt;
&lt;p&gt;例如，你想让你的 Web 服务器始终运行在 4 个容器中，以达到负载均衡的目的，你的数据库复制到 3 个不同的容器中，以达到冗余的目的。这就是你想要的状态。如果这 7 个容器中的任何一个出现故障，Kubernetes 引擎会检测到这一点，并自动创建出一个新的容器，以确保维持所需的状态。&lt;/p&gt;
&lt;p&gt;现在我们来定义一些 Kubernetes 的重要组件。&lt;/p&gt;
&lt;p&gt;当你第一次设置 Kubernetes 时，你会创建一个集群。所有其他组件都是集群的一部分。你也可以创建多个虚拟集群，称为命名空间 (namespace)，它们是同一个物理集群的一部分。这与你可以在同一物理服务器上创建多个虚拟机的方式非常相似。如果你不需要，也没有明确定义的命名空间，那么你的集群将在始终存在的默认命名空间中创建。&lt;/p&gt;
&lt;p&gt;Kubernetes 运行在节点 (node) 上，节点是集群中的单个机器。如果你有自己的硬件，节点可能对应于物理机器，但更可能对应于在云中运行的虚拟机。节点是部署你的应用或服务的地方，是 Kubernetes 工作的地方。有 2 种类型的节点 ——master 节点和 worker 节点，所以说 Kubernetes 是主从结构的。&lt;/p&gt;
&lt;p&gt;主节点是一个控制其他所有节点的特殊节点。一方面，它和集群中的任何其他节点一样，这意味着它只是另一台机器或虚拟机。另一方面，它运行着控制集群其他部分的软件。它向集群中的所有其他节点发送消息，将工作分配给它们，工作节点向主节点上的 API Server 汇报。&lt;/p&gt;
&lt;p&gt;Master 节点本身也包含一个名为 API Server 的组件。这个 API 是节点与控制平面通信的唯一端点。API Server 至关重要，因为这是 worker 节点和 master 节点就 pod、deployment 和所有其他 Kubernetes API 对象的状态进行通信的点。&lt;/p&gt;
&lt;p&gt;Worker 节点是 Kubernetes 中真正干活的节点。当你在应用中部署容器或 pod（稍后定义）时，其实是在将它们部署到 worker 节点上运行。Worker 节点托管和运行一个或多个容器的资源。&lt;/p&gt;
&lt;p&gt;Kubernetes 中的逻辑而非物理的工作单位称为 pod。一个 pod 类似于 Docker 中的容器。记得我们在前面讲到，容器可以让你创建独立、隔离的工作单元，可以独立运行。但是要创建复杂的应用程序，比如 Web 服务器，你经常需要结合多个容器，然后在一个 pod 中一起运行和管理。这就是 pod 的设计目的 —— 一个 pod 允许你把多个容器，并指定它们如何组合在一起来创建应用程序。而这也进一步明确了 Docker 和 Kubernetes 之间的关系 —— 一个 Kubernetes pod 通常包含一个或多个 Docker 容器，所有的容器都作为一个单元来管理。&lt;/p&gt;
&lt;p&gt;Kubernetes 中的 service 是一组逻辑上的 pod。把一个 service 看成是一个 pod 的逻辑分组，它提供了一个单一的 IP 地址和 DNS 名称，你可以通过它访问服务内的所有 pod。有了服务，就可以非常容易地设置和管理负载均衡，当你需要扩展 Kubernetes pod 时，这对你有很大的帮助，我们很快就会看到。&lt;/p&gt;
&lt;p&gt;ReplicationController 或 ReplicaSet 是 Kubernetes 的另一个关键功能。它是负责实际管理 pod 生命周期的组件 —— 当收到指令时或 pod 离线或意外停止时启动 pod，也会在收到指示时杀死 pod，也许是因为用户负载减少。所以换句话说，ReplicationController 有助于实现我们所期望的指定运行的 pod 数量的状态。&lt;/p&gt;
&lt;h2 id=&#34;什么是-kubectl&#34;&gt;什么是 Kubectl？&lt;/h2&gt;
&lt;p&gt;kubectl 是一个命令行工具，用于与 Kubernetes 集群和其中的 pod 通信。使用它你可以查看集群的状态，列出集群中的所有 pod，进入 pod 中执行命令等。你还可以使用 YAML 文件定义资源对象，然后使用 kubectl 将其应用到集群中。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中的自动扩展&#34;&gt;Kubernetes 中的自动扩展&lt;/h2&gt;
&lt;p&gt;请记住，我们使用 Kubernetes 而不是直接使用 Docker 的原因之一，是因为 Kubernetes 能够自动扩展应用实例的数量以满足工作负载的需求。&lt;/p&gt;
&lt;p&gt;自动缩放是通过集群设置来实现的，当服务需求增加时，增加节点数量，当需求减少时，则减少节点数量。但也要记住，节点是“物理”结构 —— 我们把“物理”放在引号里，因为要记住，很多时候，它们实际上是虚拟机。&lt;/p&gt;
&lt;p&gt;无论如何，节点是物理机器的事实意味着我们的云平台必须允许 Kubernetes 引擎创建新机器。各种云提供商对 Kubernetes 支持基本都满足这一点。&lt;/p&gt;
&lt;p&gt;我们再继续说一些概念，这次是和网络有关的。&lt;/p&gt;
&lt;h2 id=&#34;什么是-kubernetes-ingress-和-egress&#34;&gt;什么是 kubernetes Ingress 和 Egress？&lt;/h2&gt;
&lt;p&gt;外部用户或应用程序与 Kubernetes pod 交互，就像 pod 是一个真正的服务器一样。我们需要设置安全规则允许哪些流量可以进入和离开“服务器”，就像我们为托管应用程序的服务器定义安全规则一样。&lt;/p&gt;
&lt;p&gt;进入 Kubernetes pod 的流量称为 Ingress，而从 pod 到集群外的出站流量称为 egress。我们创建入口策略和出口策略的目的是限制不需要的流量进入和流出服务。而这些策略也是定义 pod 使用的端口来接受传入和传输传出数据 / 流量的地方。&lt;/p&gt;
&lt;h2 id=&#34;什么是-ingress-controller&#34;&gt;什么是 Ingress Controller？&lt;/h2&gt;
&lt;p&gt;但是在定义入口和出口策略之前，你必须首先启动被称为 Ingress Controller（入口控制器）的组件；这个在集群中默认不启动。有不同类型的入口控制器，Kubernetes 项目默认只支持 Google Cloud 和开箱即用的 Nginx 入口控制器。通常云供应商都会提供自己的入口控制器。&lt;/p&gt;
&lt;h2 id=&#34;什么是-replica-和-replicaset&#34;&gt;什么是 Replica 和 ReplicaSet？&lt;/h2&gt;
&lt;p&gt;为了保证应用程序的弹性，需要在不同节点上创建多个 pod 的副本。这些被称为 Replica。假设你所需的状态策略是“让名为 webserver-1 的 pod 始终维持在 3 个副本”，这意味着 ReplicationController 或 ReplicaSet 将监控活动副本的数量，如果其中有任何一个 replica 因任何原因不可用（例如节点的故障），那么 Deployment Controller 将自动创建一个新的系统（定义如下）。&lt;/p&gt;
&lt;p&gt;所需状态是在 deployment 中定义的。Master 节点的中有一个子系统叫做 Deployment Controller，负责实际执行并使当前状态不断趋向于所需状态。&lt;/p&gt;
&lt;p&gt;因此，举例来说，如果你目前有 2 个 pod 的副本，而你所希望的状态应该有 3 个，那么 Replication Controller 或 ReplicaSet 会自动检测到这个要求，并指示 Deployment Controller 根据预定义的设置部署一个新的 pod。&lt;/p&gt;
&lt;h2 id=&#34;什么是服务网格&#34;&gt;什么是服务网格？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jimmysong.io/blog/what-is-a-service-mesh/&#34; title=&#34;服务网格 (Service Mesh)&#34;&gt;服务网格 (Service Mesh)&lt;/a&gt; 用于管理服务之间的网络流量，是云原生的网络基础设施层，也是 &lt;a href=&#34;https://jimmysong.io/blog/post-kubernetes-era/&#34; title=&#34;Kubernetes 次世代的云原生应用&#34;&gt;Kubernetes 次世代的云原生应用&lt;/a&gt; 的重要组成部分。&lt;/p&gt;
&lt;p&gt;服务网格利用容器之间的网络设置来控制或改变应用程序中不同组件之间的交互。下面，我们用一个例子来说明。假设你想测试 Nginx 的新版本，检查它是否与你的 Web 应用兼容。你用新的 Nginx 版本创建了一个新的容器 (Container2)，并从当前容器 (Container1) 中复制了当前的 Nginx webserver 配置。但你不想影响组成 web 应用的其他微服务（假设每个容器对应一个单独的微服务）—— 就是 MySQL 数据库、Node.js 前端、负载均衡器等。&lt;/p&gt;
&lt;p&gt;所以使用服务网格，你可以立即只把 webserver 微服务改成 Container2（新 Nginx 版本的那个）进行测试。如果确定它不能工作，比如因为它导致网站出现一些兼容性问题，那么你就调用服务网格来快速切换回原来的 Container1。而这一切都不需要对其他容器进行任何配置变更 —— 这些变更对其他容器是完全透明的。&lt;/p&gt;
&lt;p&gt;如果没有服务网格，对容器来说这项工作将十分繁琐，因为这涉及到逐一更改所有其他容器上的配置，将它们所包含的服务从 Container1 指向 Container2，然后在测试失败后，将它们全部改回来。&lt;/p&gt;
&lt;p&gt;在前面这部分 Kubernetes 指南中，我们介绍了一些与 Kubernetes 网络相关的概念。Kubernetes 中的网络可能很棘手，很难理解，如果你刚刚开始，你可能需要一些实践来理解这里。&lt;/p&gt;
&lt;p&gt;在下一部分中，我们将展开更多关于 Kubernetes 的话题：如何开始学习 Kubernetes，如何在本地安装和测试 Kubernetes，以及 Kubernetes 的一些优秀的监控工具。&lt;/p&gt;
&lt;h2 id=&#34;如何学习-kubernetes&#34;&gt;如何学习 Kubernetes？&lt;/h2&gt;
&lt;p&gt;自学 Kubernetes 知识基本上有三种不同的途径，我们在这里只提供了一个指导大纲。&lt;/p&gt;
&lt;h3 id=&#34;一从零开始学习和安装-kubernetes&#34;&gt;一、从零开始学习和安装 Kubernetes&lt;/h3&gt;
&lt;p&gt;要想真正掌握 Kubernetes，最好的办法莫过于自己从头开始安装 Kubernetes。不过要注意的是，从零开始安装 Kubernetes 并不是一件容易的事情。安装 Kubernetes 并不是简单的“下载文件 -&amp;gt; 点击安装”式的操作，Kubernetes 由多个组件组成，这些组件必须单独安装和配置。而在此之前，你也需要相当的技术储备来做安装前的准备，比如熟悉 Linux 操作系统。如果你决定使用这种方式学习的话，推荐你阅读 &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook&#34; title=&#34;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&#34;&gt;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&lt;/a&gt;。此外，请记住，尽管 Kubernetes 作为一个开源解决方案在技术上是免费的，但它确实有一些隐藏的成本，只不过对初学者来说可能并不明显。&lt;/p&gt;
&lt;h3 id=&#34;二kubernetes-自托管解决方案&#34;&gt;二、Kubernetes 自托管解决方案&lt;/h3&gt;
&lt;p&gt;这些解决方案样是一些工具和实用程序，大大简化了在本地计算机上安装和配置小型 Kubernetes 集群的任务。它们是学习 Kubernetes 的好方法，同时对于新手来说也不会太难，又足够小巧可以到安装在个人电脑上。最流行的自托管 Kubernetes 工具和环境是 &lt;a href=&#34;https://github.com/kubernetes/minikube&#34; title=&#34;Minikube&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Minikube&lt;/a&gt;、&lt;a href=&#34;https://github.com/ubuntu/microk8s&#34; title=&#34;MicroK8s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MicroK8s&lt;/a&gt;、&lt;a href=&#34;https://docs.docker.com/docker-for-windows/kubernetes/&#34; title=&#34;Docker Desktop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Desktop&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/kubernetes-sigs/kind&#34; title=&#34;Kind&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kind&lt;/a&gt;。这些解决方案往往有一些限制，例如，Minikube 只允许创建一个节点。尽管有这些缺点，但这些工具还是非常值得推荐，因为它们将易学性和成本效益结合起来，对于刚开始使用 Kubernetes 的初学者来说，是一个很好的选择。&lt;/p&gt;
&lt;h3 id=&#34;三云托管的解决方案&#34;&gt;三、云托管的解决方案&lt;/h3&gt;
&lt;p&gt;如今各大云供应商都提供了定制化的 Kubernetes 解决方案来。你也可以通过线上教学平台如 &lt;a href=&#34;https://katacoda.com/&#34; title=&#34;Katacoda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Katacoda&lt;/a&gt; 上的免费课程来学习 Kubernetes，它们都是云托管的，你不需要自己安装，只不过你需要云供应商的集群需要付费。&lt;/p&gt;
&lt;h2 id=&#34;本地测试和调试-kubernetes&#34;&gt;本地测试和调试 Kubernetes&lt;/h2&gt;
&lt;p&gt;作为本地安装 Kubernetes 的一部分，你很可能还需要一些测试和调试能力，以确保一切都在顺利运行，特别是定义入口和出口策略等棘手的任务。此外，还有 Kubernetes 附加组件的生态系统，你可能想使用这些组件来扩展 Kubernetes 集群的功能。添加所有这些都需要进行更多的测试，以确保它们能与你的 Kubernetes 集群完美的集成。&lt;/p&gt;
&lt;p&gt;用于在本地开发和调试 Kubernetes 服务的工具有：&lt;a href=&#34;https://github.com/microsoft/mindaro&#34; title=&#34;Microsoft Bridge to Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Bridge to Kubernetes&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/telepresenceio/telepresence&#34; title=&#34;telepresence&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;telepresence&lt;/a&gt;。这些工具可以让你在本地运行单个服务，同时将该服务连接到远程 Kubernetes 集群。这样你就可以让自己的本地机器作为 Kubernetes 集群中的一部分来运行 —— 这对于在本地而不是在生产集群上开发服务非常有用。&lt;/p&gt;
&lt;p&gt;Kubernetes 项目也了解到了 Kubernetes 安装对端到端 (E2E) 测试的需求。为此，项目核心团队一直在确保在最近的版本中更恰当地支持 E2E 测试。这包括诸如允许测试重用和纳入更多附加组件和驱动程序的测试等。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-监控工具&#34;&gt;Kubernetes 监控工具&lt;/h2&gt;
&lt;p&gt;Kubernetes 提供了应用程序在集群的每个层次上的资源使用情况的详细信息 —— 容器、pod、服务。这些详细信息使你能够评估应用程序的性能，确定哪些瓶颈可以解决以提高整体性能。&lt;/p&gt;
&lt;p&gt;毕竟，监控可以帮助你了解应用和集群运行情况的详细信息，这对于学习 Kubernetes 是十分有帮助的。&lt;/p&gt;
&lt;p&gt;Kubernetes 包含两个内置度量收集工具用于监控：资源管道和全度量管道。资源管道是一个较低级和较有限的工具，主要集中在与各种控制器相关的指标上。全指标管道，顾名思义，从几乎所有集群组件中获取并显示更丰富的指标。&lt;/p&gt;
&lt;p&gt;还有一些第三方工具可以安装并集成到 Kubernetes 集群中。对于 Kubernetes 来说，最普遍使用的两个工具是 Prometheus 和 Grafana。&lt;/p&gt;
&lt;h3 id=&#34;prometheus-监控&#34;&gt;Prometheus 监控&lt;/h3&gt;
&lt;p&gt;Prometheus 是一个功能丰富的开源监控和警报工具。Prometheus 包含一个内部数据存储用来收集指标，如生成的时间序列数据。Prometheus 还拥有众多插件，允许它将数据暴露给各种外部解决方案，并从其他数据源导入数据，包括所有主要公有云监控解决方案。&lt;/p&gt;
&lt;h3 id=&#34;grafana-仪表盘&#34;&gt;Grafana 仪表盘&lt;/h3&gt;
&lt;p&gt;Grafana 是一个优秀的仪表盘、分析和数据可视化工具。它没有 Prometheus 的全功能数据收集能力，但 Prometheus 又没有 Grafana 的数据呈现界面。事实上，他们最好是结合在一起使用 ——Prometheus 负责数据收集和汇总，Grafana 负责数据展示。它们共同创造了一个强大的组合，涵盖了数据收集、基本警报和可视化。&lt;/p&gt;
&lt;h3 id=&#34;高级警报&#34;&gt;高级警报&lt;/h3&gt;
&lt;p&gt;对于高级警报，你可以添加 &lt;a href=&#34;https://www.nagios.org/&#34; title=&#34;Nagios&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nagios&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/prometheus/alertmanager&#34; title=&#34;Prometheus Alertmanager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus Alertmanager&lt;/a&gt; 等工具。这些警报工具通常有大量的集成。你可以为自定义值班团队，然后定义你想要监控的参数，例如“当任何 pod 不可用时”或“当任何节点无法访问时”、“当容量达到 90%”等，然后通过电子邮件、短信、手机应用提醒、电话呼叫等方式向值班人员发送自定义通知。你还可以创建升级策略，比如，如果一个被定义为“危急”的警报在 10 分钟内没有值班人员确认，那么就将警报升级（发送警报）到该人员的经理。&lt;/p&gt;
&lt;p&gt;现在，你应该已经对 Docker 和 Kubernetes 有了大体的认识。了解了 Kubernetes 的作用，知道它是如何进行容器化应用部署和管理的。&lt;/p&gt;
&lt;p&gt;调试和监控技术不仅仅是运维需要，你也可以把它当作学习方式。有什么比边做边学更好呢？&lt;/p&gt;
&lt;p&gt;请记住，如果你的应用规模太小，而且预计用户需求不会有太大变化或重大波动（比如一个只在公司内部使用的应用），那么 Kubernetes 对你来说可能没有必要，这种情况下，直接使用 Docker 就足够了。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;云原生领域的开源项目众多（见 &lt;a href=&#34;https://jimmysong.io/awesome-cloud-native&#34; title=&#34;Awesome Cloud Native / 云原生开源项目大全&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Cloud Native / 云原生开源项目大全&lt;/a&gt;），其中有大量的优秀项目可供我们学习。此外，Kubernetes 开源已经多年时间，网上有大量的学习资料，业界出版过很多书籍，建议大家通过阅读&lt;a href=&#34;https://kubernetes.io/&#34; title=&#34;官方文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;和实践来学习，也可以参考我编写的 &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook&#34; title=&#34;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&#34;&gt;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;推荐大家加入笔者发起创办的&lt;a href=&#34;https://cloudnativecn.com/&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;，这是一个立足中国，放眼世界的云原生终端用户社区，致力于云原生技术的传播和应用。云原生社区主办的&lt;a href=&#34;https://github.com/cloudnativeto/academy&#34; title=&#34;云原生学院&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生学院&lt;/a&gt;定期邀请云原生和开源领域的大咖进行直播分享，成员自发组织了多个 SIG（特别兴趣小组）进行讨论学习。欢迎加入我们，共同学习和交流云原生技术。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Envoy 的构建模块</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/</guid>
      <description>
        
        
        &lt;p&gt;在这一节中，我们将解释 Envoy 的基本构建模块。&lt;/p&gt;
&lt;p&gt;Envoy 配置的根被称为引导配置。它包含了一些字段，我们可以在这里提供静态或动态的资源和高级别的 Envoy 配置（例如，Envoy 实例名称、运行时配置、启用管理界面等等）。&lt;/p&gt;
&lt;p&gt;为了开始学习，我们将主要关注静态资源，在课程的后面，我们将介绍如何配置动态资源。&lt;/p&gt;
&lt;p&gt;Envoy 输出许多统计数据，这取决于启用的组件和它们的配置。我们会在整个课程中提到不同的统计信息，在课程后面的专门模块中，我们会更多地讨论统计信息。&lt;/p&gt;
&lt;p&gt;下图显示了通过这些概念的请求流。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/envoy-block_hu_29f70682c0e50103.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/envoy-block.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/envoy-building-blocks/envoy-block.jpg&#34; data-width=&#34;1920&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 构建块&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 构建块&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这一切都从监听器开始。Envoy 暴露的监听器是命名的网络位置，可以是一个 IP 地址和一个端口，也可以是一个 Unix 域套接字路径。Envoy 通过监听器接收连接和请求。考虑一下下面的 Envoy 配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;{}&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过上面的 Envoy 配置，我们在  0.0.0.0 地址的 10000 端口上声明了一个名为 listener_0 的监听器。这意味着 Envoy 正在监听 0.0.0.0:10000 的传入请求。&lt;/p&gt;
&lt;p&gt;每个监听器都有不同的部分需要配置。然而，唯一需要的设置是地址。上述配置是有效的，你可以用它来运行 Envoy—— 尽管它没有用，因为所有的连接都会被关闭。&lt;/p&gt;
&lt;p&gt;我们让 filter_chains 字段为空，因为在接收数据包后不需要额外的操作。&lt;/p&gt;
&lt;p&gt;为了进入下一个构件（路由），我们需要创建一个或多个网络过滤器链（filter_chains），至少要有一个过滤器。&lt;/p&gt;
&lt;p&gt;网络过滤器通常对数据包的有效载荷进行操作，查看有效载荷并对其进行解析。例如，Postgres 网络过滤器解析数据包的主体，检查数据库操作的种类或其携带的结果。&lt;/p&gt;
&lt;p&gt;Envoy 定义了三类过滤器：监听器过滤器、网络过滤器和 HTTP 过滤器。监听器过滤器在收到数据包后立即启动，通常对数据包的头信息进行操作。监听器过滤器包括代理监听器过滤器（提取 PROXY 协议头），或 TLS 检查器监听器过滤器（检查流量是否为 TLS，如果是，则从 TLS 握手中提取数据）。&lt;/p&gt;
&lt;p&gt;每个通过监听器进来的请求可以流经多个过滤器。我们还可以写一个配置，根据传入的请求或连接属性选择不同的过滤器链。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/filter-chain_hu_dc4c0a1f285c4eb7.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/filter-chain.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/envoy-building-blocks/filter-chain.jpg&#34; data-width=&#34;1611&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;过滤器链&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;过滤器链&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;一个特殊的、内置的网络过滤器被称为 &lt;strong&gt;HTTP 连接管理器&lt;/strong&gt;过滤器（HTTP Connection Manager Filter）或 &lt;strong&gt;HCM&lt;/strong&gt;。HCM 过滤器能够将原始字节转换为 HTTP 级别的消息。它可以处理访问日志，生成请求 ID，操作头信息，管理路由表，并收集统计数据。我们将在以后的课程中对 HCM 进行更详细的介绍。&lt;/p&gt;
&lt;p&gt;就像我们可以为每个监听器定义多个网络过滤器（其中一个是 HCM）一样，Envoy 也支持在 HCM 过滤器中定义多个 HTTP 级过滤器。我们可以在名为 &lt;code&gt;http_filters&lt;/code&gt; 的字段下定义这些 HTTP 过滤器。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/hcm-filter_hu_c2a6678cfa424e92.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/envoy-building-blocks/hcm-filter.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/envoy-building-blocks/hcm-filter.jpg&#34; data-width=&#34;1920&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;HCM 过滤器&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;HCM 过滤器&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;HTTP 过滤器链中的最后一个过滤器必须是路由器过滤器（&lt;code&gt;envoy.filters.HTTP.router&lt;/code&gt;）。路由器过滤器负责执行路由任务。这最终把我们带到了第二个构件 —— &lt;strong&gt;路由&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们在 HCM 过滤器的 &lt;code&gt;route_config&lt;/code&gt; 字段下定义路由配置。在路由配置中，我们可以通过查看元数据（URI、Header 等）来匹配传入的请求，并在此基础上，定义流量的发送位置。&lt;/p&gt;
&lt;p&gt;路由配置中的顶级元素是虚拟主机。每个虚拟主机都有一个名字，在发布统计数据时使用（不用于路由），还有一组被路由到它的域。&lt;/p&gt;
&lt;p&gt;让我们考虑下面的路由配置和域的集合。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_route_config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tetrate_hosts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test_hosts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test.tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;qa.tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果传入请求的目的地是 &lt;code&gt;tetrate.io&lt;/code&gt;（即 &lt;code&gt;Host/Authority&lt;/code&gt; 标头被设置为其中一个值），则 &lt;code&gt;tetrate_hosts &lt;/code&gt; 虚拟主机中定义的路由将得到处理。&lt;/p&gt;
&lt;p&gt;同样，如果 &lt;code&gt;Host/Authority&lt;/code&gt; 标头包含 &lt;code&gt;test.tetrate.io&lt;/code&gt; 或 &lt;code&gt;qa.tetrate.io&lt;/code&gt;，&lt;code&gt;test_hosts&lt;/code&gt; 虚拟主机下的路由将被处理。使用这种设计，我们可以用一个监听器（&lt;code&gt;0.0.0.0:10000&lt;/code&gt;）来处理多个顶级域。&lt;/p&gt;
&lt;p&gt;如果你在数组中指定多个域，搜索顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;精确的域名（例如：&lt;code&gt;tetrate.io&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;后缀域名通配符（如 &lt;code&gt;*.tetrate.io）&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;前缀域名通配符（例如：&lt;code&gt;tetrate.*&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;匹配任何域的特殊通配符（&lt;code&gt;*&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Envoy 匹配域名后，是时候处理所选虚拟主机中的 &lt;code&gt;routes&lt;/code&gt; 字段了。这是我们指定如何匹配一个请求，以及接下来如何处理该请求（例如，重定向、转发、重写、发送直接响应等）的地方。&lt;/p&gt;
&lt;p&gt;我们来看看一个例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.network.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_first_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;direct_response_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;direct_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inline_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yay&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置的顶部部分与我们之前看到的一样。我们已经添加了 HCM 过滤器、统计前缀（&lt;code&gt;hello_world_service&lt;/code&gt;）、单个 HTTP 过滤器（路由器）和路由配置。&lt;/p&gt;
&lt;p&gt;在虚拟主机内，我们要匹配任何域名。在 &lt;code&gt;routes&lt;/code&gt; 下，我们匹配前缀（&lt;code&gt;/&lt;/code&gt;），然后我们可以发送一个响应。&lt;/p&gt;
&lt;p&gt;当涉及到匹配请求时，我们有多种选择。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;路由匹配&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
          &lt;th&gt;示例&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;前缀必须与&lt;code&gt;:path&lt;/code&gt; 头的开头相符。&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/hello&lt;/code&gt; 与 &lt;code&gt;hello.com/hello&lt;/code&gt;、&lt;code&gt;hello.com/helloworld&lt;/code&gt; 和 &lt;code&gt;hello.com/hello/v1&lt;/code&gt; 匹配。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;路径必须与&lt;code&gt;:path&lt;/code&gt; 头完全匹配。&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/hello &lt;/code&gt;匹配 &lt;code&gt;hello.com/hello&lt;/code&gt;，但不匹配 &lt;code&gt;hello.com/helloworld &lt;/code&gt;或 &lt;code&gt;hello.com/hello/v1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;safe_regex&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;所提供的正则表达式必须与&lt;code&gt;:path&lt;/code&gt; 头匹配。&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/\{3}&lt;/code&gt; 匹配任何以 &lt;code&gt;/&lt;/code&gt; 开头的三位数。例如，与 &lt;code&gt;hello.com/123&lt;/code&gt; 匹配，但不能匹配 &lt;code&gt;hello.com/hello&lt;/code&gt; 或 &lt;code&gt;hello.com/54321。&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;connect_matcher&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;匹配器只匹配 CONNECT 请求。&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一旦 Envoy 将请求与路由相匹配，我们就可以对其进行路由、重定向或返回一个直接响应。在这个例子中，我们通过 &lt;code&gt;direct_response&lt;/code&gt; 配置字段使用&lt;strong&gt;直接响应&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以把上述配置保存到 &lt;code&gt;envoy-direct-response.yaml&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;我们将使用一个名为 &lt;a href=&#34;https://func-e.io/&#34; title=&#34;func-e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;func-e&lt;/a&gt; 的命令行工具。func-e 允许我们选择和使用不同的 Envoy 版本。&lt;/p&gt;
&lt;p&gt;我们可以通过运行以下命令下载 func-e CLI。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl https://func-e.io/install.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo bash -s -- -b /usr/local/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们用我们创建的配置运行 Envoy。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;func-e run -c envoy-direct-response.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦 Envoy 启动，我们就可以向 &lt;code&gt;localhost:10000&lt;/code&gt; 发送一个请求，以获得我们配置的直接响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl localhost:10000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yay
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，如果我们添加一个不同的主机头（例如 &lt;code&gt;-H &amp;quot;Host: hello.com&amp;quot;&lt;/code&gt;）将得到相同的响应，因为 &lt;code&gt;hello.com&lt;/code&gt; 主机与虚拟主机中定义的域相匹配。&lt;/p&gt;
&lt;p&gt;在大多数情况下，从配置中直接发送响应是一个很好的功能，但我们会有一组端点或主机，我们将流量路由到这些端点或主机。在 Envoy 中做到这一点的方法是通过定义&lt;strong&gt;集群&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;集群（Cluster）是一组接受流量的上游类似主机。这可以是你的服务所监听的主机或 IP 地址的列表。&lt;/p&gt;
&lt;p&gt;例如，假设我们的 hello world 服务是在 &lt;code&gt;127.0.0.0:8000&lt;/code&gt; 上监听。然后，我们可以用一个单一的端点创建一个集群，像这样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;集群的定义与监听器的定义在同一级别，使用 &lt;code&gt;clusters&lt;/code&gt; 字段。我们在路由配置中引用集群时，以及在导出统计数据时，都会使用集群。该名称在所有集群中必须是唯一的。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;load_assignment&lt;/code&gt; 字段下，我们可以定义要进行负载均衡的端点列表，以及负载均衡策略设置。&lt;/p&gt;
&lt;p&gt;Envoy 支持多种负载均衡算法（round-robin、Maglev、least-request、random），这些算法是由静态引导配置、DNS、动态 xDS（CDS 和 EDS 服务）以及主动 / 被动健康检查共同配置的。如果我们没有通过 &lt;code&gt;lb_policy&lt;/code&gt; 字段明确地设置负载均衡算法，它默认为 round-robin。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;endpoints&lt;/code&gt; 字段定义了一组属于特定地域的端点。使用可选的 &lt;code&gt;locality&lt;/code&gt; 字段，我们可以指定上游主机的运行位置，然后在负载均衡过程中使用（即，将请求代理到离调用者更近的端点）。&lt;/p&gt;
&lt;p&gt;添加新的端点指示负载均衡器在一个以上的接收者之间分配流量。通常情况下，负载均衡器对所有端点一视同仁，但集群定义允许在端点内建立一个层次结构。&lt;/p&gt;
&lt;p&gt;例如，端点可以有一个 &lt;strong&gt;权重（weight）&lt;/strong&gt; 属性，这将指示负载均衡器与其他端点相比，向这些端点发送更多 / 更少的流量。&lt;/p&gt;
&lt;p&gt;另一种层次结构类型是基于&lt;strong&gt;地域性的（locality）&lt;/strong&gt;，通常用于定义故障转移架构。这种层次结构允许我们定义地理上比较接近的 &amp;ldquo;首选&amp;rdquo; 端点，以及在 &amp;ldquo;首选&amp;rdquo; 端点变得不健康的情况下应该使用的 &amp;ldquo;备份&amp;rdquo; 端点。&lt;/p&gt;
&lt;p&gt;由于我们只有一个端点，所以我们还没有设置 locality。在 &lt;code&gt;lb_endpoints&lt;/code&gt; 字段下，可以定义 Envoy 可以路由流量的实际端点。&lt;/p&gt;
&lt;p&gt;我们可以在 Cluster 中配置以下可选功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动健康检查（&lt;code&gt;health_checks&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;断路器 (&lt;code&gt;circuit_breakers&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;异常点检测（&lt;code&gt;outlier_detection&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;在处理上游的 HTTP 请求时有额外的协议选项&lt;/li&gt;
&lt;li&gt;一组可选的网络过滤器，应用于所有出站连接等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和监听器的地址一样，端点地址可以是一个套接字地址，也可以是一个 Unix 域套接字。在我们的例子中，我们使用一个套接字地址，并在 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 为我们的服务定义端点。一旦选择了端点，请求就会被代理到该端点的上游。&lt;/p&gt;
&lt;p&gt;让我们看看我们定义的集群是如何与其他配置结合起来的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.network.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_first_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;direct_response_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们已经添加了集群配置，我们没有使用 &lt;code&gt;direct_response&lt;/code&gt;，而是使用 &lt;code&gt;routes&lt;/code&gt; 字段并指定集群名称。&lt;/p&gt;
&lt;p&gt;为了尝试这种配置，让我们在 &lt;code&gt;8000&lt;/code&gt; 端口启动一个 hello-world Docker 镜像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -dit -p 8000:3000 gcr.io/tetratelabs/hello-world:1.0.0 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以向 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 发送一个请求，以检查我们是否得到 &amp;ldquo;Hello World&amp;rdquo; 的响应。&lt;/p&gt;
&lt;p&gt;接下来，让我们把上述 Envoy 配置保存到 &lt;code&gt;envoy-clusters.yaml中&lt;/code&gt;，并启动 Envoy 代理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;func-e run -c envoy-cluster.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 Envoy 代理启动时，向 &lt;code&gt;0.0.0.0:10000&lt;/code&gt; 发送一个请求，让 Envoy 代理请求到 hello world 端点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -v 0.0.0.0:10000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; GET / HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Host: localhost:10000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; User-Agent: curl/7.64.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Accept: */*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; date: Wed, &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 23:53:47 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; content-length: &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; content-type: text/plain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Connection &lt;span class=&#34;c1&#34;&gt;#0 to host localhost left intact&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello World
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从冗长的输出中，我们会注意到由 Envoy 代理设置的响应头 &lt;code&gt;x-envoy-upstream-service-time&lt;/code&gt; 和 &lt;code&gt;server: envoy&lt;/code&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>开放接口</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 作为云原生应用的基础调度平台，相当于云原生的操作系统，为了便于系统的扩展，Kubernetes 中开放的以下接口，可以分别对接不同的后端，来实现自己的业务逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;cri&#34; title=&#34;容器运行时接口（CRI）&#34;&gt;容器运行时接口（CRI）&lt;/a&gt;：提供计算资源&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;cni&#34; title=&#34;容器网络接口（CNI）&#34;&gt;容器网络接口（CNI）&lt;/a&gt;：提供网络资源&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;csi&#34; title=&#34;容器存储接口（CSI）&#34;&gt;容器存储接口（CSI）&lt;/a&gt;，提供存储资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上三种资源相当于一个分布式操作系统的最基础的几种资源类型，而 Kuberentes 是将他们粘合在一起的纽带。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cri/&#34;&gt;CRI&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cni/&#34;&gt;CNI&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/csi/&#34;&gt;CSI&lt;/a&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
                           
    <item>
      <title>威胁建模</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/threat-model/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/threat-model/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 可以成为数据和 / 或计算能力盗窃的重要目标。虽然数据盗窃是传统上的主要动机，但寻求计算能力（通常用于加密货币挖掘）的网络行为者也被吸引到 Kubernetes 来利用其底层基础设施。除了资源盗窃，网络行为者还可能针对 Kubernetes 造成拒绝服务。下面的威胁代表了 Kubernetes 集群最可能的破坏源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;供应链风险&lt;/strong&gt; - 对供应链的攻击载体是多种多样的，并且在减轻风险方面具有挑战性。供应链风险是指对手可能颠覆构成系统的任何元素的风险，包括帮助提供最终产品的产品组件、服务或人员。这可能包括用于创建和管理 Kubernetes 集群的第三方软件和供应商。供应链的潜在威胁会在多个层面上影响 Kubernetes，包括：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;容器 / 应用层面&lt;/strong&gt; - 在 Kubernetes 中运行的应用及其第三方依赖的安全性，它们依赖于开发者的可信度和开发基础设施的防御能力。来自第三方的恶意容器或应用程序可以为网络行为者在集群中提供一个立足点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基础设施&lt;/strong&gt; - 托管 Kubernetes 的底层系统有其自身的软件和硬件依赖性。系统作为工作节点或控制平面一部分的，任何潜在威胁都可能为网络行为者在集群中提供一个立足点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恶意威胁行为者&lt;/strong&gt; - 恶意行为者经常利用漏洞从远程位置获得访问权。Kubernetes 架构暴露了几个 API，网络行为者有可能利用这些 API 进行远程利用。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制平面&lt;/strong&gt; - Kubernetes 控制平面有各种组件，通过通信来跟踪和管理集群。网络行为者经常利用缺乏适当访问控制的暴露的控制平面组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作节点&lt;/strong&gt; - 除了运行容器引擎外，工作者节点还承载着 &lt;code&gt;kubelet&lt;/code&gt; 和 &lt;code&gt;kube-proxy&lt;/code&gt; 服务，这些都有可能被网络行为者利用。此外，工作节点存在于被锁定的控制平面之外，可能更容易被网络行为者利用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器化的应用程序&lt;/strong&gt; - 在集群内运行的应用程序是常见的目标。应用程序经常可以在集群之外访问，使它们可以被远程网络行为者接触到。然后，网络行为者可以从已经被破坏的应用出发，或者利用暴露的应用程序的内部可访问资源在集群中提升权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部威胁&lt;/strong&gt; - 威胁者可以利用漏洞或使用个人在组织内工作时获得的特权。来自组织内部的个人被赋予特殊的知识和特权，可以用来威胁 Kubernetes 集群。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理员&lt;/strong&gt; - Kubernetes 管理员对运行中的容器有控制权，包括在容器化环境中执行任意命令的能力。Kubernetes 强制的 RBAC 授权可以通过限制对敏感能力的访问来帮助降低风险。然而，由于 Kubernetes 缺乏双人制的完整性控制，即必须有至少一个管理账户才能够获得集群的控制权。管理员通常有对系统或管理程序的物理访问权，这也可能被用来破坏 Kubernetes 环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt; - 容器化应用程序的用户可能有知识和凭证来访问 Kubernetes 集群中的容器化服务。这种程度的访问可以提供足够的手段来利用应用程序本身或其他集群组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云服务或基础设施供应商&lt;/strong&gt; - 对管理 Kubernetes 节点的物理系统或管理程序的访问可被用来破坏 Kubernetes 环境。云服务提供商通常有多层技术和管理控制，以保护系统免受特权管理员的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生计算基金会（CNCF）</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/cncf/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/cncf/</guid>
      <description>
        
        
        &lt;p&gt;CNCF，全称 Cloud Native Computing Foundation（云原生计算基金会），成立于 2015 年 7 月 21 日（&lt;a href=&#34;https://www.cncf.io/announcement/2015/06/21/new-cloud-native-computing-foundation-to-drive-alignment-among-container-technologies/&#34; title=&#34;于美国波特兰 OSCON 2015 上宣布&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;于美国波特兰 OSCON 2015 上宣布&lt;/a&gt;），其最初的口号是&lt;strong&gt;坚持和整合开源技术来让编排容器作为微服务架构的一部分&lt;/strong&gt;，其作为致力于云原生应用推广和普及的一支重要力量，不论你是云原生应用的开发者、管理者还是研究人员都有必要了解。&lt;/p&gt;
&lt;p&gt;CNCF 作为一个厂商中立的基金会，致力于 Github 上的快速成长的开源技术的推广，如 Kubernetes、Prometheus、Envoy 等，帮助开发人员更快更好的构建出色的产品。CNCF 维护了一个全景图项目，详见 &lt;a href=&#34;https://github.com/cncf/landscape&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于 CNCF 的使命与组织方式请参考&lt;a href=&#34;https://www.cncf.io/about/charter/&#34; title=&#34;CNCF 章程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 章程&lt;/a&gt;，概括的讲 CNCF 的使命包括以下三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器化包装。&lt;/li&gt;
&lt;li&gt;通过中心编排系统的动态资源管理。&lt;/li&gt;
&lt;li&gt;面向微服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNCF 这个角色的作用是推广技术，形成社区，开源项目管理与推进生态系统健康发展。&lt;/p&gt;
&lt;p&gt;另外 CNCF 组织由以下部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;会员&lt;/strong&gt;：白金、金牌、银牌、最终用户、学术和非赢利成员，不同级别的会员在治理委员会中的投票权不同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理事会&lt;/strong&gt;：负责事务管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TOC（技术监督委员会）&lt;/strong&gt;：技术管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最终用户社区&lt;/strong&gt;：推动 CNCF 技术的采纳并选举最终用户技术咨询委员会&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最终用户技术咨询委员会&lt;/strong&gt;：为最终用户会议或向理事会提供咨询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;营销委员会&lt;/strong&gt;：市场推广&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cncf-项目成熟度分级与毕业条件&#34;&gt;CNCF 项目成熟度分级与毕业条件&lt;/h2&gt;
&lt;p&gt;每个 CNCF 项目都需要有个成熟度等级，申请成为 CNCF 项目的时候需要确定项目的成熟度级别。&lt;/p&gt;
&lt;p&gt;成熟度级别（Maturity Level）包括以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sandbox（初级）&lt;/li&gt;
&lt;li&gt;incubating（孵化中）&lt;/li&gt;
&lt;li&gt;graduated（毕业）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是否可以成为 CNCF 项目需要通过 Technical Oversight Committee (技术监督委员会）简称&lt;a href=&#34;https://github.com/cncf/toc&#34; title=&#34;TOC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TOC&lt;/a&gt;，投票采取 fallback 策略，即&lt;strong&gt;回退策略&lt;/strong&gt;，先从最高级别（graduated）开始，如果 2/3 多数投票通过的话则确认为该级别，如果没通过的话，则进行下一低级别的投票，如果一直到 inception 级别都没得到 2/3 多数投票通过的话，则拒绝其进入 CNCF 项目。&lt;/p&gt;
&lt;p&gt;当前所有的 CNCF 项目可以访问&lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;https://www.cncf.io/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cncf.io/projects/&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;项目所达到相应成熟度需要满足的条件和投票机制见下图：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
  
  
  &lt;figcaption&gt;CNCF项目成熟度级别&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;toc技术监督委员会&#34;&gt;TOC（技术监督委员会）&lt;/h2&gt;
&lt;p&gt;TOC（Technical Oversight Committee）作为 CNCF 中的一个重要组织，它的作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义和维护技术视野&lt;/li&gt;
&lt;li&gt;审批新项目加入组织，为项目设定概念架构&lt;/li&gt;
&lt;li&gt;接受最终用户的反馈并映射到项目中&lt;/li&gt;
&lt;li&gt;调整组件间的访问接口，协调组件之间兼容性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TOC 成员通过选举产生，见&lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/election-schedule.md&#34; title=&#34;选举时间表&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;选举时间表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;参考 CNCF TOC：&lt;a href=&#34;https://github.com/cncf/toc&#34; title=&#34;https://github.com/cncf/toc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/cncf/toc&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;cncf-ambassador&#34;&gt;CNCF Ambassador&lt;/h2&gt;
&lt;p&gt;CNCF Ambassador（CNCF 大使），人员名单详见 &lt;a href=&#34;https://www.cncf.io/people/ambassadors/&#34; title=&#34;https://www.cncf.io/people/ambassadors/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cncf.io/people/ambassadors/&lt;/a&gt;，笔者很荣幸作为第二位成为 CNCF Ambassador 的中国人。&lt;/p&gt;
&lt;h3 id=&#34;如何成为-cncf-ambassador&#34;&gt;如何成为 CNCF Ambassador&lt;/h3&gt;
&lt;p&gt;可以通过以下方式成为 CNCF Ambassador：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成为 CNCF 会员或对成为某个 CNCF 的项目的贡献者&lt;/li&gt;
&lt;li&gt;以 contributor、blogger、演讲者等身份参与 CNCF 社区项目&lt;/li&gt;
&lt;li&gt;在社区中演讲或撰写博客&lt;/li&gt;
&lt;li&gt;主持云原生社区 meetup&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/announcement/2015/06/21/new-cloud-native-computing-foundation-to-drive-alignment-among-container-technologies/&#34; title=&#34;AT&amp;amp;T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks join new effort to build and maintain cloud native distributed systems - cncf.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AT&amp;amp;T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks join new effort to build and maintain cloud native distributed systems - cncf.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>HTTP 连接管理器介绍</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-mesh/http-conneciton-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-mesh/http-conneciton-manager/</guid>
      <description>
        
        
        &lt;p&gt;HCM 是一个网络级的过滤器，将原始字节转译成 HTTP 级别的消息和事件（例如，收到的 Header，收到的 Body 数据等）。&lt;/p&gt;
&lt;p&gt;HCM 过滤器还处理标准的 HTTP 功能。它支持访问记录、请求 ID 生成和跟踪、Header 操作、路由表管理和统计等功能。&lt;/p&gt;
&lt;p&gt;从协议的角度来看，HCM 原生支持 HTTP/1.1、WebSockets、HTTP/2 和 HTTP/3（仍在 Alpha 阶段）。&lt;/p&gt;
&lt;p&gt;Envoy 代理被设计成一个 HTTP/2 复用代理，这体现在描述 Envoy 组件的术语中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2 术语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 HTTP/2 中，流是已建立的连接中的字节的双向流动。每个流可以携带一个或多个&lt;strong&gt;消息（message）&lt;/strong&gt;。消息是一个完整的&lt;strong&gt;帧（frame）&lt;strong&gt;序列，映射到一个 HTTP 请求或响应消息。最后，帧是 HTTP/2 中最小的通信单位。每个帧都包含一个&lt;/strong&gt;帧头（frame header）&lt;/strong&gt;，它至少可以识别该帧所属的流。帧可以携带有关 HTTP Header、消息有效载荷等信息。&lt;/p&gt;
&lt;p&gt;无论流来自哪个连接（HTTP/1.1、HTTP/2 或 HTTP/3），Envoy 都使用一个叫做 &lt;strong&gt;编解码 API（codec API）&lt;/strong&gt; 的功能，将不同的线程协议翻译成流、请求、响应等协议无关模型。协议无关的模型意味着大多数 Envoy 代码不需要理解每个协议的具体内容。&lt;/p&gt;
&lt;h2 id=&#34;http-过滤器&#34;&gt;HTTP 过滤器&lt;/h2&gt;
&lt;p&gt;在 HCM 中，Envoy 支持一系列的 HTTP 过滤器。与监听器级别的过滤器不同，这些过滤器对 HTTP 级别的消息进行操作，而不知道底层协议（HTTP/1.1、HTTP/2 等）或复用能力。&lt;/p&gt;
&lt;p&gt;有三种类型的 HTTP 过滤器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解码器（Decoder）：当 HCM 对请求流的部分进行解码时调用。&lt;/li&gt;
&lt;li&gt;编码器（Encoder）：当 HCM 对响应流的部分进行编码时调用。&lt;/li&gt;
&lt;li&gt;解码器 / 编码器（Decoder/Encoder）：在两个路径上调用，解码和编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图解释了 Envoy 如何在请求和响应路径上调用不同的过滤器类型。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/http-conneciton-manager/request-response_hu_35db2437a0011115.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/service-mesh/http-conneciton-manager/request-response.jpg&#34; data-img=&#34;/book/kubernetes-handbook/service-mesh/http-conneciton-manager/request-response.jpg&#34; data-width=&#34;2029&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;请求响应路径及 HTTP 过滤器&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;请求响应路径及 HTTP 过滤器&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;像网络过滤器一样，单个的 HTTP 过滤器可以停止或继续执行后续的过滤器，并在单个请求流的范围内相互分享状态。&lt;/p&gt;
&lt;h2 id=&#34;数据共享&#34;&gt;数据共享&lt;/h2&gt;
&lt;p&gt;在高层次上，我们可以把过滤器之间的数据共享分成&lt;strong&gt;静态&lt;/strong&gt;和&lt;strong&gt;动态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;静态包含 Envoy 加载配置时的任何不可变的数据集，它被分成三个部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 元数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Envoy 的配置，如监听器、路由或集群，都包含一个&lt;code&gt;metadata&lt;/code&gt;数据字段，存储键 / 值对。元数据允许我们存储特定过滤器的配置。这些值不能改变，并在所有请求 / 连接中共享。例如，元数据值在集群中使用子集选择器时被使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 类型化的元数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类型化元数据不需要为每个流或请求将元数据转换为类型化的类对象，而是允许过滤器为特定的键注册一个一次性的转换逻辑。来自 xDS 的元数据在配置加载时被转换为类对象，过滤器可以在运行时请求类型化的版本，而不需要每次都转换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. HTTP 每路过滤器配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与适用于所有虚拟主机的全局配置相比，我们还可以指定每个虚拟主机或路由的配置。每个路由的配置被嵌入到路由表中，可以在 &lt;code&gt;typed_per_filter_config&lt;/code&gt; 字段下指定。&lt;/p&gt;
&lt;p&gt;另一种分享数据的方式是使用&lt;strong&gt;动态状态&lt;/strong&gt;。动态状态会在每个连接或 HTTP 流中产生，并且它可以被产生它的过滤器改变。名为 &lt;code&gt;StreamInfo&lt;/code&gt; 的对象提供了一种从 map 上存储和检索类型对象的方法。&lt;/p&gt;
&lt;h2 id=&#34;过滤器顺序&#34;&gt;过滤器顺序&lt;/h2&gt;
&lt;p&gt;指定 HTTP 过滤器的顺序很重要。考虑一下下面的 HTTP 过滤器链。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;filter_1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;filter_2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;filter_3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般来说，链中的最后一个过滤器通常是路由器过滤器。假设所有的过滤器都是解码器 / 编码器过滤器，HCM 在请求路径上调用它们的顺序是&lt;code&gt;filter_1&lt;/code&gt;、&lt;code&gt;filter_2&lt;/code&gt;、&lt;code&gt;filter_3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在响应路径上，Envoy 只调用编码器过滤器，但顺序相反。由于这三个过滤器都是解码器 / 编码器过滤器，所以在响应路径上的顺序是 &lt;code&gt;filter_3&lt;/code&gt;、&lt;code&gt;filter_2&lt;/code&gt;、&lt;code&gt;filter_1&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;内置-http-过滤器&#34;&gt;内置 HTTP 过滤器&lt;/h2&gt;
&lt;p&gt;Envoy 已经内置了几个 HTTP 过滤器，如 CORS、CSRF、健康检查、JWT 认证等。你可以&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/http_filters#config-http-filters&#34; title=&#34;在这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;找到 HTTP 过滤器的完整列表。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>容器运行时接口（CRI）</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cri/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cri/</guid>
      <description>
        
        
        &lt;p&gt;容器运行时接口（Container Runtime Interface），简称 CRI。CRI 中定义了 &lt;strong&gt;容器&lt;/strong&gt; 和 &lt;strong&gt;镜像&lt;/strong&gt; 的服务的接口，因为容器运行时与镜像的生命周期是彼此隔离的，因此需要定义两个服务。该接口使用 &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34; title=&#34;Protocol Buffer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol Buffer&lt;/a&gt;，基于 &lt;a href=&#34;https://grpc.io/&#34; title=&#34;gRPC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC&lt;/a&gt;，在 Kubernetes v1.10 + 版本中是在 &lt;code&gt;pkg/kubelet/apis/cri/runtime/v1alpha2&lt;/code&gt; 的 &lt;code&gt;api.proto&lt;/code&gt; 中定义的。&lt;/p&gt;
&lt;h2 id=&#34;cri-架构&#34;&gt;CRI 架构&lt;/h2&gt;
&lt;p&gt;Container Runtime 实现了 CRI gRPC Server，包括 &lt;code&gt;RuntimeService&lt;/code&gt; 和 &lt;code&gt;ImageService&lt;/code&gt;。该 gRPC Server 需要监听本地的 Unix socket，而 kubelet 则作为 gRPC Client 运行。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cri/cri-architecture_hu_9b4fe4ea281e949f.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cri/cri-architecture.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/open-interfaces/cri/cri-architecture.png&#34; data-width=&#34;572&#34; data-height=&#34;136&#34; alt=&#34;image&#34; data-caption=&#34;CRI 架构 - 图片来自 kubernetes blog&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;CRI 架构 - 图片来自 kubernetes blog&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;启用-cri&#34;&gt;启用 CRI&lt;/h2&gt;
&lt;p&gt;除非集成了 rktnetes，否则 CRI 都是被默认启用了，从 Kubernetes 1.7 版本开始，旧的预集成的 docker CRI 已经被移除。&lt;/p&gt;
&lt;p&gt;要想启用 CRI 只需要在 kubelet 的启动参数重传入此参数：&lt;code&gt;--container-runtime-endpoint&lt;/code&gt; 远程运行时服务的端点。当前 Linux 上支持 unix socket，windows 上支持 tcp。例如：&lt;code&gt;unix:///var/run/dockershim.sock&lt;/code&gt;、 &lt;code&gt;tcp://localhost:373&lt;/code&gt;，默认是 &lt;code&gt;unix:///var/run/dockershim.sock&lt;/code&gt;，即默认使用本地的 docker 作为容器运行时。&lt;/p&gt;
&lt;h2 id=&#34;cri-接口&#34;&gt;CRI 接口&lt;/h2&gt;
&lt;p&gt;Kubernetes 1.9 中的 CRI 接口在 &lt;code&gt;api.proto&lt;/code&gt; 中的定义，其中包含了两个 gRPC 服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RuntimeService&lt;/strong&gt;：容器和 Sandbox 运行时管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageService&lt;/strong&gt;：提供了从镜像仓库拉取、查看、和移除镜像的 RPC。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;当前支持的-cri-后端&#34;&gt;当前支持的 CRI 后端&lt;/h2&gt;
&lt;p&gt;我们最初在使用 Kubernetes 时通常会默认使用 Docker 作为容器运行时，其实从 Kubernetes 1.5 开始已经支持 CRI，通过 CRI 接口可以指定使用其它容器运行时作为 Pod 的后端，目前支持 CRI 的后端有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o&#34; title=&#34;cri-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cri-o&lt;/a&gt;：cri-o 是 Kubernetes 的 CRI 标准的实现，并且允许 Kubernetes 间接使用 OCI 兼容的容器运行时，可以把 cri-o 看成 Kubernetes 使用 OCI 兼容的容器运行时的中间层。主要由 Red Hat 公司贡献开源。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containerd/containerd&#34; title=&#34;containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd&lt;/a&gt;：Kubernetes CRI 默认实现，由 Docker 公司贡献开源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，还有两个容器运行时值得一提——katacontainers 和 gvisor 都没有直接实现 CRI 接口。它们都是通过在容器运行时和宿主机之间添加一个虚拟化层来增强安全性能的。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://katacontainers.io/&#34; title=&#34;Kata Containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kata Containers&lt;/a&gt;：katacontainers 是一种轻量级的虚拟化技术，曾合并了 Clear Containers。它通过在容器和操作系统之间添加一个轻量级的虚拟化层来提供额外的安全性和隔离性。它可以与 Kubernetes 集成，但需要通过一些额外的工具来实现与 CRI 的交互。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/gvisor&#34; title=&#34;gVisor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gVisor&lt;/a&gt;：gvisor 是一种轻量级的沙箱技术，由 Google 公司开源。它通过在容器运行时和操作系统之间添加一个沙箱层来提供额外的安全性和隔离性。gvisor 可以与 Docker 和 Kubernetes 集成，但是也需要通过一些额外的工具来实现与 CRI 的交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，虽然 katacontainers 和 gvisor 都不能直接实现 CRI 接口，但它们都是为容器提供增强安全性和隔离性的重要技术，并且可以与 Kubernetes 集成来实现容器管理和调度。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sreeninet.wordpress.com/2017/02/11/kubernetes-cri-and-minikube/&#34; title=&#34;Kubernetes CRI and Minikube - sreeninet.wordpress.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes CRI and Minikube - sreeninet.wordpress.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectatomic.io/blog/2017/02/crio-runtimes/&#34; title=&#34;CRI-O and Alternative Runtimes in Kubernetes - projectatomic.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRI-O and Alternative Runtimes in Kubernetes - projectatomic.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/2017/02/Docker-Containerd-RunC/&#34; title=&#34;Docker、Containerd、RunC&amp;hellip;：你应该知道的所有&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker、Containerd、RunC&amp;hellip;：你应该知道的所有&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/&#34; title=&#34;Introducing Container Runtime Interface (CRI) in Kubernetes - blog.kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introducing Container Runtime Interface (CRI) in Kubernetes - blog.kubernetes.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cri-o.io/&#34; title=&#34;cri-o 官网 - cri-o.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cri-o 官网 - cri-o.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kata-containers/documentation/blob/master/design/architecture.md#kubernetes-support&#34; title=&#34;Kata Containers Architecture - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kata Containers Architecture - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>Kubernetes Pod 安全</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/kubernetes-pod-security/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/kubernetes-pod-security/</guid>
      <description>
        
        
        &lt;p&gt;Pod 是 Kubernetes 中最小的可部署单元，由一个或多个容器组成。Pod 通常是网络行为者在利用容器时的初始执行环境。出于这个原因，Pod 应该被加固，以使利用更加困难，并限制成功入侵的影响。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/kubernetes-pod-security/f3_hu_d0ccd82a67cee350.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/kubernetes-pod-security/f3.jpg&#34; data-img=&#34;/book/kubernetes-hardening-guidance/kubernetes-pod-security/f3.jpg&#34; data-width=&#34;1744&#34; data-height=&#34;1044&#34; alt=&#34;image&#34; data-caption=&#34;图3：有 sidecar 代理作为日志容器的 Pod 组件&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图3：有 sidecar 代理作为日志容器的 Pod 组件&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;非-root容器和无-root容器引擎&#34;&gt;“非 root”容器和“无 root”容器引擎&lt;/h2&gt;
&lt;p&gt;默认情况下，许多容器服务以有特权的 root 用户身份运行，应用程序在容器内以 root 用户身份执行，尽管不需要有特权的执行。&lt;/p&gt;
&lt;p&gt;通过使用非 root 容器或无 root 容器引擎来防止 root 执行，可以限制容器受损的影响。这两种方法都会对运行时环境产生重大影响，因此应该对应用程序进行全面测试，以确保兼容性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非 root 容器&lt;/strong&gt;：容器引擎允许容器以非 root 用户和非 root 组成员身份运行应用程序。通常情况下，这种非默认设置是在构建容器镜像的时候配置的。&lt;strong&gt;&lt;a href=&#34;../appendix/a/&#34; title=&#34;附录 A：非 root 应用的 Dockerfile 示例&#34;&gt;附录 A：非 root 应用的 Dockerfile 示例&lt;/a&gt;&lt;/strong&gt; 显示了一个 Dockerfile 示例，它以非 root 用户身份运行一个应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非 root 用户&lt;/strong&gt;。另外，Kubernetes 可以在 &lt;code&gt;SecurityContext:runAsUser&lt;/code&gt; 指定一个非零用户的情况下，将容器加载到 Pod。虽然 &lt;code&gt;runAsUser&lt;/code&gt; 指令在部署时有效地强制非 root 执行，但 NSA 和 CISA 鼓励开发者构建的容器应用程序，以非 root 用户身份执行。在构建时集成非 root 用户执行，可以更好地保证应用程序在没有 root 权限的情况下正常运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无 root 的容器引擎&lt;/strong&gt;：一些容器引擎可以在无特权的上下文中运行，而不是使用以 root 身份运行的守护程序。在这种情况下，从容器化应用程序的角度来看，执行似乎是使用 root 用户，但执行被重新映射到主机上的引擎用户上下文。虽然无 root 容器引擎增加了一个有效的安全层，但许多引擎目前是作为实验性发布的，不应该在生产环境中使用。管理员应该了解这一新兴技术，并在供应商发布与 Kubernetes 兼容的稳定版本时寻求采用无 root 容器引擎。&lt;/p&gt;
&lt;h2 id=&#34;不可变的容器文件系统&#34;&gt;不可变的容器文件系统&lt;/h2&gt;
&lt;p&gt;默认情况下，容器在自己的上下文中被允许不受限制地执行。在容器中获得执行权限的网络行为者可以在容器中创建文件、下载脚本和修改应用程序。Kubernetes 可以锁定一个容器的文件系统，从而防止许多暴露后的活动。&lt;/p&gt;
&lt;p&gt;然而，这些限制也会影响合法的容器应用程序，并可能导致崩溃或异常行为。为了防止损害合法的应用程序，Kubernetes 管理员可以为应用程序需要写访问的特定目录挂载二级读 / 写文件系统。&lt;strong&gt;&lt;a href=&#34;../appendix/b/&#34; title=&#34;附录 B：只读文件系统的部署模板示例&#34;&gt;附录 B：只读文件系统的部署模板示例&lt;/a&gt;&lt;/strong&gt; 显示了一个具有可写目录的不可变容器的例子。&lt;/p&gt;
&lt;h2 id=&#34;构建安全的容器镜像&#34;&gt;构建安全的容器镜像&lt;/h2&gt;
&lt;p&gt;容器镜像通常是通过从头开始构建容器或在从存储库中提取的现有镜像基础上创建的。除了使用可信的存储库来构建容器外，镜像扫描是确保部署的容器安全的关键。在整个容器构建工作流程中，应该对镜像进行扫描，以识别过时的库、已知的漏洞或错误配置，如不安全的端口或权限。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/kubernetes-pod-security/f4_hu_d52897f64d4aec65.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/kubernetes-pod-security/f4.jpg&#34; data-img=&#34;/book/kubernetes-hardening-guidance/kubernetes-pod-security/f4.jpg&#34; data-width=&#34;1160&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;图4：容器的构建工作流程，用 webhook 和准入控制器进行优化&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图4：容器的构建工作流程，用 webhook 和准入控制器进行优化&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;实现镜像扫描的一种方法是使用准入控制器。准入控制器是 Kubernetes 的原生功能，可以在对象的持久化之前，但在请求被验证和授权之后，拦截和处理对 Kubernetes API 的请求。可以实现一个自定义或专有的 webhook，以便在集群中部署任何镜像之前执行扫描。如果镜像符合 webhook 配置中定义的组织的安全策略，这个准入控制器可以阻止部署。&lt;/p&gt;
&lt;h2 id=&#34;pod-安全策略&#34;&gt;Pod 安全策略&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Pod 的创建应遵守最小授权原则。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Pod 安全策略（PSP）&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;是一个集群范围内的策略，它规定了 Pod 在集群内执行的安全要求 / 默认值。虽然安全机制通常是在 Pod/Deployment 配置中指定的，但 PSP 建立了一个所有 Pod 必须遵守的最低安全门槛。一些 PSP 字段提供默认值，当 Pod 的配置省略某个字段时使用。其他 PSP 字段被用来拒绝创建不符合要求的 Pod。PSP 是通过 Kubernetes 准入控制器执行的，所以 PSP 只能在 Pod 创建期间执行要求。PSP 并不影响已经在集群中运行的 Pod。&lt;/p&gt;
&lt;p&gt;PSP 很有用，可以在集群中强制执行安全措施。PSP 对于由具有分层角色的管理员管理的集群特别有效。在这些情况下，顶级管理员可以施加默认值，对低层级的管理员强制执行要求。NSA 和 CISA 鼓励企业根据自己的需要调整 &lt;strong&gt;&lt;a href=&#34;../appendix/c/&#34; title=&#34;附录 C：Pod 安全策略示例&#34;&gt;附录 C：Pod 安全策略示例&lt;/a&gt;&lt;/strong&gt; 中的 Kubernetes 加固 PSP 模板。下表描述了一些广泛适用的 PSP 组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 1: Pod 安全策略组件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;字段名称&lt;/th&gt;
          &lt;th&gt;使用方法&lt;/th&gt;
          &lt;th&gt;建议&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;privileged&lt;/td&gt;
          &lt;td&gt;控制 Pod 是否可以运行有特权的容器。&lt;/td&gt;
          &lt;td&gt;设置为 false。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;hostPID、hostIPC&lt;/td&gt;
          &lt;td&gt;控制容器是否可以共享主机进程命名空间。&lt;/td&gt;
          &lt;td&gt;设置为 false。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;hostNetwork&lt;/td&gt;
          &lt;td&gt;控制容器是否可以使用主机网络。&lt;/td&gt;
          &lt;td&gt;设置为 false。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;allowedHostPaths&lt;/td&gt;
          &lt;td&gt;将容器限制在主机文件系统的特定路径上。&lt;/td&gt;
          &lt;td&gt;使用一个 &amp;ldquo;假的&amp;rdquo; 路径名称（比如 &lt;code&gt;/foo&lt;/code&gt; 标记为只读）。省略这个字段的结果是不对容器进行准入限制。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;readOnlyRootFilesystem&lt;/td&gt;
          &lt;td&gt;需要使用一个只读的根文件系统。&lt;/td&gt;
          &lt;td&gt;可能时设置为 true。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;runAsUser, runAsGroup, supplementalGroups, fsGroup&lt;/td&gt;
          &lt;td&gt;控制容器应用程序是否能以 root 权限或 root 组成员身份运行。&lt;/td&gt;
          &lt;td&gt;- 设置 &lt;code&gt;runAsUser&lt;/code&gt; 为 &lt;code&gt;MustRunAsNonRoot&lt;/code&gt;。- 将 &lt;code&gt;runAsGroup&lt;/code&gt; 设置为非零（参见&lt;a href=&#34;../appendix/c/&#34; title=&#34;附录 C&#34;&gt;附录 C&lt;/a&gt; 中的例子：Pod 安全策略示例）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;将 &lt;code&gt;supplementalGroups&lt;/code&gt; 设置为非零（见附录 C 的例子）。将 &lt;code&gt;fsGroup&lt;/code&gt; 设置为非零（参见&lt;a href=&#34;../appendix/c/&#34; title=&#34;附录 C&#34;&gt;附录 C&lt;/a&gt; 中的例子：Pod 安全策略示例）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;allowPrivilegeEscalation&lt;/td&gt;
          &lt;td&gt;限制升级到 root 权限。&lt;/td&gt;
          &lt;td&gt;设置为 false。为了有效地执行 &lt;code&gt;runAsUser: MustRunAsNonRoot&lt;/code&gt; 设置，需要采取这一措施。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;seLinux&lt;/td&gt;
          &lt;td&gt;设置容器的 SELinux 上下文。&lt;/td&gt;
          &lt;td&gt;如果环境支持 SELinux，可以考虑添加 SELinux 标签以进一步加固容器。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;AppArmor 注解&lt;/td&gt;
          &lt;td&gt;设置容器所使用的 AppArmor 配置文件。&lt;/td&gt;
          &lt;td&gt;在可能的情况下，通过采用 AppArmor 来限制开发，以加固容器化的应用程序。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;seccomp 注解&lt;/td&gt;
          &lt;td&gt;设置用于沙盒容器的 seccomp 配置文件。&lt;/td&gt;
          &lt;td&gt;在可能的情况下，使用 seccomp 审计配置文件来识别运行中的应用程序所需的系统调用；然后启用 seccomp 配置文件来阻止所有其他系统调用。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：由于以下原因，PSP 不会自动适用于整个集群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，在应用 PSP 之前，必须为 Kubernetes 准入控制器启用 &lt;code&gt;PodSecurityPolicy&lt;/code&gt; 插件，这是 &lt;code&gt;kube-apiserver&lt;/code&gt; 的一部分。&lt;/li&gt;
&lt;li&gt;第二，策略必须通过 RBAC 授权。管理员应从其集群组织内的每个角色中验证已实施的 PSP 的正确功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在有多个 PSP 的环境中，管理员应该谨慎行事，因为 Pod 的创建会遵守&lt;strong&gt;最小限制性&lt;/strong&gt;授权策略。以下命令描述了给定命名空间的所有 Pod 安全策略，这可以帮助识别有问题的重叠策略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get psp -n &amp;lt;namespace&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;保护-pod-服务账户令牌&#34;&gt;保护 Pod 服务账户令牌&lt;/h2&gt;
&lt;p&gt;默认情况下，Kubernetes 在创建 Pod 时自动提供一个服务账户（Service Account），并在运行时在 Pod 中挂载该账户的秘密令牌（token）。许多容器化的应用程序不需要直接访问服务账户，因为 Kubernetes 的协调工作是在后台透明进行的。如果一个应用程序被破坏了。Pod 中的账户令牌可以被网络行为者收集并用于进一步破坏集群。当应用程序不需要直接访问服务账户时，Kubernetes 管理员应确保 Pod 规范禁用正在加载的秘密令牌。这可以通过 Pod 的 YAML 规范中的 &lt;code&gt;automountServiceAccountToken: false&lt;/code&gt; 指令来完成。&lt;/p&gt;
&lt;h2 id=&#34;加固容器引擎&#34;&gt;加固容器引擎&lt;/h2&gt;
&lt;p&gt;一些平台和容器引擎提供了额外的选项来加固容器化环境。一个强有力的例子是使用管理程序来提供容器隔离。管理程序依靠硬件来执行虚拟化边界，而不是操作系统。管理程序隔离比传统的容器隔离更安全。在 Windows® 操作系统上运行的容器引擎可以被配置为使用内置的 Windows 管理程序 Hyper-V®，以增强安全性。&lt;/p&gt;
&lt;p&gt;此外，一些注重安全的容器引擎将每个容器部署在一个轻量级的管理程序中，以实现深度防御。由管理程序支持的容器可以减少容器的突破。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;译者注：Pod Security Policy 已在 1.21 版本中宣布弃用，作为替代，1.22 引入了内置的 Pod Security Admission 控制器以及新的 Pod Security Standards 标准。&lt;a href=&#34;https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/&#34; title=&#34;来源&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来源&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生社区（中国）</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/community/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/community/</guid>
      <description>
        
        
        &lt;p&gt;云原生社区是由 &lt;a href=&#34;https://jimmysong.io&#34; title=&#34;宋净超（Jimmy Song）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宋净超（Jimmy Song）&lt;/a&gt; 于 2020 年 5 月发起的，企业中立的云原生终端用户社区。社区秉持“共识、共治、共建、共享”的原则。社区的宗旨是：连接、中立、开源。立足中国，面向世界，企业中立，关注开源，回馈开源。了解更多请访问云原生社区官网：&lt;a href=&#34;https://cloudnativecn.com&#34; title=&#34;https://cloudnativecn.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloudnativecn.com&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;成立背景&#34;&gt;成立背景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Software is eating the world. —— Marc Andreessen&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“软件正在吞噬这个世界”已被大家多次引用，随着云原生（Cloud Native）的崛起，我们想说的是“Cloud Native is eating the software”。随着越来越多的企业将服务迁移上云，企业原有的开发模式以及技术架构已无法适应云的应用场景，其正在被重塑，向着云原生的方向演进。&lt;/p&gt;
&lt;p&gt;那么什么是云原生？云原生是一系列架构、研发流程、团队文化的最佳实践组合，以此支撑更快的创新速度、极致的用户体验、稳定可靠的用户服务、高效的研发效率。开源社区与云原生的关系密不可分，正是开源社区尤其是终端用户社区的存在，极大地促进了以容器、服务网格、微服务等为代表的云原生技术的持续演进！&lt;/p&gt;
&lt;p&gt;随着云计算的不断发展，云原生技术在全球范围内变得越来越受关注，同时国内社区同学也展现了对云原生技术热爱。近些年中国已经孕育众多的云原生技术爱好者，也有自发组织的一些相关技术交流和 meetup，同时在云原生领域也涌现了众多优秀的开源项目，在这样的背景下，一个有理想，有组织，有温度的云原生社区应运而生。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnativecn.com/blog/cnc-announcement/&#34; title=&#34;云原生社区成立 - cloudnativecn.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区成立 - cloudnativecn.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>容器网络接口（CNI）</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cni/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/cni/</guid>
      <description>
        
        
        &lt;p&gt;容器网络接口（Container Network Interface），简称 CNI，是 CNCF 旗下的一个项目，由一组用于配置 Linux 容器的网络接口的规范和库组成，同时还包含了一些插件。CNI 仅关心容器创建时的网络分配，和当容器被删除时释放网络资源。有关详情请查看 &lt;a href=&#34;https://github.com/containernetworking/cni&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Kubernetes 源码的 &lt;code&gt;vendor/github.com/containernetworking/cni/libcni&lt;/code&gt; 目录中已经包含了 CNI 的代码，也就是说 Kubernetes 中已经内置了 CNI。&lt;/p&gt;
&lt;h2 id=&#34;接口定义&#34;&gt;接口定义&lt;/h2&gt;
&lt;p&gt;CNI 的接口中包括以下几个方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CNI&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;AddNetworkList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NetworkConfigList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RuntimeConf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;DelNetworkList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NetworkConfigList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RuntimeConf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;AddNetwork&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NetworkConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RuntimeConf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;DelNetwork&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NetworkConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RuntimeConf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该接口只有四个方法，添加网络、删除网络、添加网络列表、删除网络列表。&lt;/p&gt;
&lt;h2 id=&#34;设计考量&#34;&gt;设计考量&lt;/h2&gt;
&lt;p&gt;CNI 设计的时候考虑了以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器运行时必须在调用任何插件之前为容器创建一个新的网络命名空间。&lt;/li&gt;
&lt;li&gt;然后，运行时必须确定这个容器应属于哪个网络，并为每个网络确定哪些插件必须被执行。&lt;/li&gt;
&lt;li&gt;网络配置采用 JSON 格式，可以很容易地存储在文件中。网络配置包括必填字段，如 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;type&lt;/code&gt; 以及插件（类型）。网络配置允许字段在调用之间改变值。为此，有一个可选的字段 &lt;code&gt;args&lt;/code&gt;，必须包含不同的信息。&lt;/li&gt;
&lt;li&gt;容器运行时必须按顺序为每个网络执行相应的插件，将容器添加到每个网络中。&lt;/li&gt;
&lt;li&gt;在完成容器生命周期后，运行时必须以相反的顺序执行插件（相对于执行添加容器的顺序）以将容器与网络断开连接。&lt;/li&gt;
&lt;li&gt;容器运行时不能为同一容器调用并行操作，但可以为不同的容器调用并行操作。&lt;/li&gt;
&lt;li&gt;容器运行时必须为容器订阅 ADD 和 DEL 操作，这样 ADD 后面总是跟着相应的 DEL。DEL 可能跟着额外的 DEL，但是，插件应该允许处理多个 DEL（即插件 DEL 应该是幂等的）。&lt;/li&gt;
&lt;li&gt;容器必须由 ContainerID 唯一标识。存储状态的插件应该使用（网络名称，容器 ID）的主键来完成。&lt;/li&gt;
&lt;li&gt;运行时不能调用同一个网络名称或容器 ID 执行两次 ADD（没有相应的 DEL）。换句话说，给定的容器 ID 必须只能添加到特定的网络一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cni-插件&#34;&gt;CNI 插件&lt;/h2&gt;
&lt;p&gt;CNI 插件必须实现一个可执行文件，这个文件可以被容器管理系统（例如 rkt 或 Kubernetes）调用。&lt;/p&gt;
&lt;p&gt;CNI 插件负责将网络接口插入容器网络命名空间（例如，veth 对的一端），并在主机上进行任何必要的改变（例如将 veth 的另一端连接到网桥）。然后将 IP 分配给接口，并通过调用适当的 IPAM 插件来设置与“IP 地址管理”部分一致的路由。&lt;/p&gt;
&lt;h3 id=&#34;参数&#34;&gt;参数&lt;/h3&gt;
&lt;p&gt;CNI 插件必须支持以下操作：&lt;/p&gt;
&lt;h4 id=&#34;将容器添加到网络&#34;&gt;将容器添加到网络&lt;/h4&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;版本&lt;/strong&gt;调用者正在使用的 CNI 规范（容器管理系统或调用插件）的版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器 ID&lt;/strong&gt;由运行时分配的容器的唯一明文标识符。一定不能是空的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络命名空间路径&lt;/strong&gt;要添加的网络名称空间的路径，即 &lt;code&gt;/proc/[pid]/ns/net&lt;/code&gt; 或绑定挂载 / 链接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络配置&lt;/strong&gt;描述容器可以加入的网络的 JSON 文档。架构如下所述。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;额外的参数&lt;/strong&gt;这提供了一个替代机制，允许在每个容器上简单配置 CNI 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器内接口的名称&lt;/strong&gt;这是应该分配给容器（网络命名空间）内创建的接口的名称；因此它必须符合 Linux 接口名称上的标准限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;接口列表&lt;/strong&gt;根据插件的不同，这可以包括沙箱（例如容器或管理程序）接口名称和 / 或主机接口名称，每个接口的硬件地址以及接口所在的沙箱（如果有的话）的详细信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配给每个接口的 IP 配置&lt;/strong&gt;分配给沙箱和 / 或主机接口的 IPv4 和 / 或 IPv6 地址，网关和路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS 信息&lt;/strong&gt;包含 nameserver、domain、search domain 和 option 的 DNS 信息的字典。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;从网络中删除容器&#34;&gt;从网络中删除容器&lt;/h4&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;版本&lt;/strong&gt;调用者正在使用的 CNI 规范（容器管理系统或调用插件）的版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;容器 ID&lt;/strong&gt;，如上所述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络命名空间路径&lt;/strong&gt;，如上定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络配置&lt;/strong&gt;，如上所述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;额外的参数&lt;/strong&gt;，如上所述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上面定义的容器&lt;/strong&gt;内的接口的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有参数应与传递给相应的添加操作的参数相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除操作应释放配置的网络中提供的 containerid 拥有的所有资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;报告版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数：无。&lt;/li&gt;
&lt;li&gt;结果：插件支持的 CNI 规范版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cniVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.3.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 此输出使用的 CNI 规范的版本
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;supportedVersions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.3.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.3.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 此插件支持的 CNI 规范版本列表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CNI 插件的详细说明请参考：&lt;a href=&#34;https://github.com/containernetworking/cni/blob/master/SPEC.md&#34; title=&#34;CNI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 规范&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ip-分配&#34;&gt;IP 分配&lt;/h3&gt;
&lt;p&gt;作为容器网络管理的一部分，CNI 插件需要为接口分配（并维护）IP 地址，并安装与该接口相关的所有必要路由。这给了 CNI 插件很大的灵活性，但也给它带来了很大的负担。众多的 CNI 插件需要编写相同的代码来支持用户需要的多种 IP 管理方案（例如 dhcp、host-local）。&lt;/p&gt;
&lt;p&gt;为了减轻负担，使 IP 管理策略与 CNI 插件类型解耦，我们定义了 IP 地址管理插件（IPAM 插件）。CNI 插件的职责是在执行时恰当地调用 IPAM 插件。IPAM 插件必须确定接口 IP/subnet，网关和路由，并将此信息返回到“主”插件来应用配置。IPAM 插件可以通过协议（例如 dhcp）、存储在本地文件系统上的数据、网络配置文件的“ipam”部分或上述的组合来获得信息。&lt;/p&gt;
&lt;h4 id=&#34;ipam-插件&#34;&gt;IPAM 插件&lt;/h4&gt;
&lt;p&gt;像 CNI 插件一样，调用 IPAM 插件的可执行文件。可执行文件位于预定义的路径列表中，通过 &lt;code&gt;CNI_PATH&lt;/code&gt; 指示给 CNI 插件。IPAM 插件必须接收所有传入 CNI 插件的相同环境变量。就像 CNI 插件一样，IPAM 插件通过 stdin 接收网络配置。&lt;/p&gt;
&lt;h2 id=&#34;可用插件&#34;&gt;可用插件&lt;/h2&gt;
&lt;h3 id=&#34;main接口创建&#34;&gt;Main：接口创建&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bridge&lt;/strong&gt;：创建网桥，并添加主机和容器到该网桥&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ipvlan&lt;/strong&gt;：在容器中添加一个 &lt;a href=&#34;https://www.kernel.org/doc/Documentation/networking/ipvlan.txt&#34; title=&#34;ipvlan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ipvlan&lt;/a&gt; 接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loopback&lt;/strong&gt;：创建一个回环接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macvlan&lt;/strong&gt;：创建一个新的 MAC 地址，将所有的流量转发到容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ptp&lt;/strong&gt;：创建 veth 对&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vlan&lt;/strong&gt;：分配一个 vlan 设备&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipamip-地址分配&#34;&gt;IPAM：IP 地址分配&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dhcp&lt;/strong&gt;：在主机上运行守护程序，代表容器发出 DHCP 请求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host-local&lt;/strong&gt;：维护分配 IP 的本地数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;meta其它插件&#34;&gt;Meta：其它插件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flannel&lt;/strong&gt;：根据 flannel 的配置文件创建接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tuning&lt;/strong&gt;：调整现有接口的 sysctl 参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;portmap&lt;/strong&gt;：一个基于 iptables 的 portmapping 插件。将端口从主机的地址空间映射到容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni&#34; title=&#34;containernetworking/cni - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containernetworking/cni - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/plugins&#34; title=&#34;containernetworking/plugins - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containernetworking/plugins - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/master/SPEC.md&#34; title=&#34;Container Networking Interface Specification - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Container Networking Interface Specification - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/CONVENTIONS.md&#34; title=&#34;CNI Extension conventions - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI Extension conventions - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>网络隔离和加固</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/network-separation-and-hardening/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/network-separation-and-hardening/</guid>
      <description>
        
        
        &lt;p&gt;集群网络是 Kubernetes 的一个核心概念。容器、Pod、服务和外部服务之间的通信必须被考虑在内。默认情况下，很少有网络策略来隔离资源，防止集群被破坏时的横向移动或升级。资源隔离和加密是限制网络行为者在集群内转移和升级的有效方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用网络策略和防火墙来隔离资源。&lt;/li&gt;
&lt;li&gt;确保控制平面的安全。&lt;/li&gt;
&lt;li&gt;对流量和敏感数据（例如 Secret）进行静态加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命名空间&#34;&gt;命名空间&lt;/h2&gt;
&lt;p&gt;Kubernetes 命名空间是在同一集群内的多个个人、团队或应用程序之间划分集群资源的一种方式。&lt;strong&gt;默认情况下，命名空间不会被自动隔离&lt;/strong&gt;。然而，命名空间确实为一个范围分配了一个标签，这可以用来通过 RBAC 和网络策略指定授权规则。除了网络隔离之外，策略可以限制存储和计算资源，以便在命名空间层面上对 Pod 进行更好的控制。&lt;/p&gt;
&lt;p&gt;默认有三个命名空间，它们不能被删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kube-system&lt;/code&gt;（用于 Kubernetes 组件）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kube-public&lt;/code&gt;（用于公共资源）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;（针对用户资源）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户 Pod 不应该放在 &lt;code&gt;kube-system&lt;/code&gt; 或 &lt;code&gt;kube-public&lt;/code&gt; 中，因为这些都是为集群服务保留的。可以用 YAML 文件，如 &lt;strong&gt;&lt;a href=&#34;../appendix/d/&#34; title=&#34;附录 D：命名空间示例&#34;&gt;附录 D：命名空间示例&lt;/a&gt;&lt;/strong&gt; ，可以用来创建新的命名空间。不同命名空间中的 Pod 和服务仍然可以相互通信，除非有额外的隔离措施，如网络策略。&lt;/p&gt;
&lt;h2 id=&#34;网络策略&#34;&gt;网络策略&lt;/h2&gt;
&lt;p&gt;网络策略控制 Pod、命名空间和外部 IP 地址之间的流量。默认情况下，没有网络策略应用于 Pod 或命名空间，导致 Pod 网络内的入口和出口流量不受限制。通过适用于 Pod 或 Pod 命名空间的网络策略，Pod 将被隔离。一旦一个 Pod 在网络策略中被选中，它就会拒绝任何适用的策略对象所不允许的任何连接。&lt;/p&gt;
&lt;p&gt;要创建网络策略，需要一个支持 &lt;code&gt;NetworkPolicy&lt;/code&gt; API 的网络插件。使用 &lt;code&gt;podSelector&lt;/code&gt; 和 / 或 &lt;code&gt;namespaceSelector&lt;/code&gt; 选项来选择 Pod。&lt;a href=&#34;../appendix/e/&#34; title=&#34;附录 E&#34;&gt;&lt;strong&gt;附录 E&lt;/strong&gt;&lt;/a&gt; 中展示了一个网络策略的例子。网络策略的格式可能有所不同，这取决于集群使用的容器网络接口（CNI）插件。管理员应该使用选择所有 Pod 的默认策略来拒绝所有入口和出口流量，并确保任何未选择的 Pod 被隔离。然后，额外的策略可以放松这些允许连接的限制。&lt;/p&gt;
&lt;p&gt;外部 IP 地址可以使用 &lt;code&gt;ipBlock&lt;/code&gt; 在入口和出口策略中使用，但不同的 CNI 插件、云提供商或服务实现可能会影响 &lt;code&gt;NetworkPolicy&lt;/code&gt; 处理的顺序和集群内地址的重写。&lt;/p&gt;
&lt;h2 id=&#34;资源政策&#34;&gt;资源政策&lt;/h2&gt;
&lt;p&gt;除了网络策略，&lt;code&gt;LimitRange&lt;/code&gt; 和 &lt;code&gt;ResourceQuota&lt;/code&gt; 是两个可以限制命名空间或节点的资源使用的策略。&lt;code&gt;LimitRange&lt;/code&gt; 策略限制了特定命名空间内每个 Pod 或容器的单个资源，例如，通过强制执行最大计算和存储资源。每个命名空间只能创建一个 &lt;code&gt;LimitRange&lt;/code&gt; 约束，如 &lt;strong&gt;&lt;a href=&#34;../appendix/f/&#34; title=&#34;附录 F&#34;&gt;附录 F&lt;/a&gt;&lt;/strong&gt; 的 &lt;code&gt;LimitRange&lt;/code&gt; 示例中所示。Kubernetes 1.10 和更新版本默认支持 &lt;code&gt;LimitRange&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;LimitRange&lt;/code&gt; 策略不同的是，&lt;code&gt;ResourceQuotas&lt;/code&gt; 是对整个命名空间的资源使用总量的限制，例如对 CPU 和内存使用总量的限制。如果用户试图创建一个违反 &lt;code&gt;LimitRange&lt;/code&gt; 或 &lt;code&gt;ResourceQuota&lt;/code&gt; 策略的 Pod，则 Pod 创建失败。&lt;a href=&#34;../appendix/g/&#34; title=&#34;附录 G&#34;&gt;&lt;strong&gt;附录 G&lt;/strong&gt;&lt;/a&gt; 中显示了一个 &lt;code&gt;ResourceQuota&lt;/code&gt; 策略的示例。&lt;/p&gt;
&lt;h2 id=&#34;控制平面加固&#34;&gt;控制平面加固&lt;/h2&gt;
&lt;p&gt;控制平面是 Kubernetes 的核心，使用户能够查看容器，安排新的 Pod，读取 Secret，在集群中执行命令。由于这些敏感的功能，控制平面应受到高度保护。除了 TLS 加密、RBAC 和强大的认证方法等安全配置外，网络隔离可以帮助防止未经授权的用户访问控制平面。Kubernetes API 服务器运行在 6443 和 8080 端口上，这些端口应该受到防火墙的保护，只接受预期的流量。8080 端口，默认情况下，可以在没有 TLS 加密的情况下从本地机器访问，请求绕过认证和授权模块。不安全的端口可以使用 API 服务器标志 &lt;code&gt;--insecure-port=0&lt;/code&gt; 来禁用。Kubernetes API 服务器不应该暴露在互联网或不信任的网络中。网络策略可以应用于 &lt;code&gt;kube-system&lt;/code&gt; 命名空间，以限制互联网对 &lt;code&gt;kube-system&lt;/code&gt; 的访问。如果对所有命名空间实施默认的拒绝策略，&lt;code&gt;kube-system&lt;/code&gt; 命名空间仍然必须能够与其他控制平面和工作节点进行通信。&lt;/p&gt;
&lt;p&gt;下表列出了控制平面的端口和服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 2：控制平面端口&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;端口&lt;/th&gt;
          &lt;th&gt;方向&lt;/th&gt;
          &lt;th&gt;端口范围&lt;/th&gt;
          &lt;th&gt;目的&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;6443 or 8080 if not disabled&lt;/td&gt;
          &lt;td&gt;Kubernetes API server&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;2379-2380&lt;/td&gt;
          &lt;td&gt;etcd server client API&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;10250&lt;/td&gt;
          &lt;td&gt;kubelet API&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;10251&lt;/td&gt;
          &lt;td&gt;kube-scheduler&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;10252&lt;/td&gt;
          &lt;td&gt;kube-controller-manager&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;10258&lt;/td&gt;
          &lt;td&gt;cloud-controller-manager（可选）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;etcd&#34;&gt;Etcd&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;etcd 后端数据库是一个关键的控制平面组件，也是集群中最重要的安全部分。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;etcd 后端数据库存储状态信息和集群 Secret。它是一个关键的控制平面组件，获得对 etcd 的写入权限可以使网络行为者获得对整个集群的 root 权限。Etcd 只能通过 API 服务器访问，集群的认证方法和 RBAC 策略可以限制用户。etcd 数据存储可以在一个单独的控制平面节点上运行，允许防火墙限制对 API 服务器的访问。管理员应该设置 TLS 证书以强制执行 etcd 服务器和 API 服务器之间的 HTTPS 通信。etcd 服务器应被配置为只信任分配给 API 服务器的证书。&lt;/p&gt;
&lt;h3 id=&#34;kubeconfig-文件&#34;&gt;Kubeconfig 文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubeconfig&lt;/code&gt; 文件包含关于集群、用户、命名空间和认证机制的敏感信息。Kubectl 使用存储在工作节点的 &lt;code&gt;$HOME/.kube&lt;/code&gt; 目录下的配置文件，并控制平面本地机器。网络行为者可以利用对该配置目录的访问，获得并修改配置或凭证，从而进一步破坏集群。配置文件应该被保护起来，以防止非故意的改变，未经认证的非 root 用户应该被阻止访问这些文件。&lt;/p&gt;
&lt;h2 id=&#34;工作节点划分&#34;&gt;工作节点划分&lt;/h2&gt;
&lt;p&gt;工作节点可以是一个虚拟机或物理机，这取决于集群的实现。由于节点运行微服务并承载集群的网络应用，它们往往是被攻击的目标。如果一个节点被破坏，管理员应主动限制攻击面，将工作节点与其他不需要与工作节点或 Kubernetes 服务通信的网段分开。防火墙可用于将内部网段与面向外部的工作节点或整个 Kubernetes 服务分开，这取决于网络的情况。机密数据库或不需要互联网访问的内部服务，这可能需要与工作节点的可能攻击面分离。&lt;/p&gt;
&lt;p&gt;下表列出了工作节点的端口和服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 3：工作节点端口&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;端口&lt;/th&gt;
          &lt;th&gt;方向&lt;/th&gt;
          &lt;th&gt;端口范围&lt;/th&gt;
          &lt;th&gt;目的&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;10250&lt;/td&gt;
          &lt;td&gt;kubelet API&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;TCP&lt;/td&gt;
          &lt;td&gt;Inbound&lt;/td&gt;
          &lt;td&gt;30000-32767&lt;/td&gt;
          &lt;td&gt;NodePort Services&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;加密&#34;&gt;加密&lt;/h2&gt;
&lt;p&gt;管理员应配置 Kubernetes 集群中的所有流量 —— 包括组件、节点和控制计划之间的流量（使用 TLS 1.2 或 1.3 加密）。&lt;/p&gt;
&lt;p&gt;加密可以在安装过程中设置，也可以在安装后使用 TLS 引导（详见 &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/securing-a-cluster/&#34; title=&#34;Kubernetes 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档&lt;/a&gt;）来创建并向节点分发证书。对于所有的方法，必须在节点之间分发证书，以便安全地进行通信。&lt;/p&gt;
&lt;h2 id=&#34;secret&#34;&gt;Secret&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况下，Secret 被存储为未加密的 base64 编码的字符串，并且可以被任何有 API 权限的人检索。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kubernetes Secret 维护敏感信息，如密码、OAuth 令牌和 SSH 密钥。与在 YAML 文件、容器镜像或环境变量中存储密码或令牌相比，将敏感信息存储在 Secret 中提供了更大的访问控制。默认情况下，Kubernetes 将 Secret 存储为未加密的 base64 编码字符串，任何有 API 权限的人都可以检索到。可以通过对 &lt;strong&gt;secret&lt;/strong&gt; 资源应用 RBAC 策略来限制访问。&lt;/p&gt;
&lt;p&gt;可以通过在 API 服务器上配置静态数据加密或使用外部密钥管理服务（KMS）来对秘密进行加密，该服务可以通过云提供商提供。要启用使用 API 服务器的 Secret 数据静态加密，管理员应修改 &lt;code&gt;kube-apiserver&lt;/code&gt; 清单文件，以执行使用 &lt;code&gt;--encryption-provider-config&lt;/code&gt; 参数执行。&lt;a href=&#34;../appendix/h/&#34; title=&#34;附录 H&#34;&gt;附录 H&lt;/a&gt; 中显示了一个 &lt;code&gt;encryption-provider-config&lt;/code&gt; 的例子：加密实例。使用 KMS 提供者可以防止原始加密密钥被存储在本地磁盘上。要用 KMS 提供者加密 Secret，&lt;code&gt;encryption-provider-config&lt;/code&gt; 文件中应指定 KMS 提供者，如&lt;a href=&#34;../appendix/i/&#34; title=&#34;附录 I&#34;&gt;附录 I&lt;/a&gt; 的 KMS 配置示例所示。&lt;/p&gt;
&lt;p&gt;在应用了 &lt;code&gt;encryption-provider-config&lt;/code&gt; 文件后，管理员应该运行以下命令来读取和加密所有的 Secret。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get secrets --all-namespaces -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl replace -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;保护敏感的云基础设施&#34;&gt;保护敏感的云基础设施&lt;/h2&gt;
&lt;p&gt;Kubernetes 通常被部署在云环境中的虚拟机上。因此，管理员应该仔细考虑 Kubernetes 工作节点所运行的虚拟机的攻击面。在许多情况下，在这些虚拟机上运行的 Pod 可以在不可路由的地址上访问敏感的云元数据服务。这些元数据服务为网络行为者提供了关于云基础设施的信息，甚至可能是云资源的短期凭证。网络行为者滥用这些元数据服务进行特权升级。Kubernetes 管理员应通过使用网络策略或通过云配置策略防止 Pod 访问云元数据服务。由于这些服务根据云供应商的不同而不同，管理员应遵循供应商的指导来加固这些访问载体。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>角色与分工</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/roles/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/roles/</guid>
      <description>
        
        
        &lt;p&gt;云原生应用在诞生之初就是面向云而设计，适应云环境，为了在云上运行而开发的应用，既然是应用就涉及到生命周期管理，在一个云原生应用的生命周期中，存在以下几种角色，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/roles/roles.svg&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/roles/roles.svg&#34; alt=&#34;image&#34; data-caption=&#34;云原生应用中的角色&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;云原生应用中的角色&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;三者之间不是完全独立，而是互有交集。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用开发者：关注的是代码，对应用的生命周期负责，需要了解业务逻辑。&lt;/li&gt;
&lt;li&gt;应用运维：维护应用平台，负责管理应用的生命周期管，需要具有应用的领域知识。&lt;/li&gt;
&lt;li&gt;基础设施运维：维护计算、存储和网络资源，需要具有底层系统的知识。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面将分别阐述这三种角色之间的区别和联系。&lt;/p&gt;
&lt;h2 id=&#34;应用开发者&#34;&gt;应用开发者&lt;/h2&gt;
&lt;p&gt;应用开发者负责编写代码，实现应用程序的业务逻辑和数据的处理，是应用程序的拥有者、负责人。底层的计算、存储、网络的复杂性全部通过编程语言层面给屏蔽掉了，比如开发者需要发起远程过程调用（RPC），只需要指定对应的协议，调用相应的接口，传递符合规范的数据即可，而不需要自己去实现一个协议。&lt;/p&gt;
&lt;p&gt;注意这里之所以在开发者前面加上了”应用“两个字，是为了强调这部分开发者是面向业务的开发者，而非基础设施、中间件或者平台开发者，虽然他们本质上都是开发者，但是面向的对象不同。应用开发者负责生产应用程序，并负责它的升级换代，但是对于应用生产出来后如何维护，就要交给应用运维了。&lt;/p&gt;
&lt;h2 id=&#34;应用运维&#34;&gt;应用运维&lt;/h2&gt;
&lt;p&gt;应用运维人员通常基于 PaaS 平台为应用程序提供运行时所需的资源或能力，负责管理应用程序的生命周期，更加关注应用交付，如应用的构建、打包、编排、调度、发布、升级、回滚、配置、备份等，这些操作通常与开发者要运行的应用程序的本身逻辑无关。当需要为某些类型的应用提供平台层能力的时候，应用运维还需要具有这些应用所处领域的专业知识。比如数据科学家需要使用的大数据集群，这些集群通常会有专人来维护，这些人可能不会直接参与底层基础设施的建设，而是负责在 PaaS 平台上维护这套集群。但是对于一些简单的 web 应用，应用运维的角色有时候也会由开发者兼任，也就是 DevOps。&lt;/p&gt;
&lt;h2 id=&#34;基础设施运维&#34;&gt;基础设施运维&lt;/h2&gt;
&lt;p&gt;基础设施运维可能是管理公有云中的资源（虚拟机或容器），也可能直接管理底层的物理资源，他们不必了解这些资源上具体运行的是什么应用，也不需要相关领域的背景知识，在他们眼里一切皆为资源（计算、存储、网络），他们需要负责基础设施的稳定性，资源的利用率，账号的权限管理等。&lt;/p&gt;
&lt;h2 id=&#34;关系&#34;&gt;关系&lt;/h2&gt;
&lt;p&gt;这三个角色不是孤立存在的，他们之间存在很多交集，其中应用运维是将开发者与程序运行资源、环境串联起来的关键，这个角色部分职能可以由 PaaS 平台来完成。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>容器存储接口（CSI）</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/csi/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/csi/</guid>
      <description>
        
        
        &lt;p&gt;容器存储接口（Container Storage Interface），简称 CSI，CSI 试图建立一个行业标准接口的规范，借助 CSI 容器编排系统（CO）可以将任意存储系统暴露给自己的容器工作负载。有关详细信息，请查看设计方案。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;csi&lt;/code&gt; 卷类型是一种 out-tree（即跟其它存储插件在同一个代码路径下，随 Kubernetes 的代码同时编译的）的 CSI 卷插件，用于 Pod 与在同一节点上运行的外部 CSI 卷驱动程序交互。部署 CSI 兼容卷驱动后，用户可以使用 &lt;code&gt;csi&lt;/code&gt; 作为卷类型来挂载驱动提供的存储。&lt;/p&gt;
&lt;p&gt;CSI 持久化卷支持是在 Kubernetes v1.9 中引入的，作为一个 alpha 特性，必须由集群管理员明确启用。换句话说，集群管理员需要在 apiserver、controller-manager 和 kubelet 组件的“&lt;code&gt;--feature-gates =&lt;/code&gt;”标志中加上“&lt;code&gt;CSIPersistentVolume = true&lt;/code&gt;”。&lt;/p&gt;
&lt;p&gt;CSI 持久化卷具有以下字段可供用户指定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;driver&lt;/code&gt;：一个字符串值，指定要使用的卷驱动程序的名称。必须少于 63 个字符，并以一个字符开头。驱动程序名称可以包含“。”、“ - ”、“_”或数字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumeHandle&lt;/code&gt;：一个字符串值，唯一标识从 CSI 卷插件的 &lt;code&gt;CreateVolume&lt;/code&gt; 调用返回的卷名。随后在卷驱动程序的所有后续调用中使用卷句柄来引用该卷。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readOnly&lt;/code&gt;：一个可选的布尔值，指示卷是否被发布为只读。默认是 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用说明&#34;&gt;使用说明&lt;/h2&gt;
&lt;p&gt;下面将介绍如何使用 CSI。&lt;/p&gt;
&lt;h3 id=&#34;动态配置&#34;&gt;动态配置&lt;/h3&gt;
&lt;p&gt;可以通过为 CSI 创建插件 &lt;code&gt;StorageClass&lt;/code&gt; 来支持动态配置的 CSI Storage 插件启用自动创建/删除。&lt;/p&gt;
&lt;p&gt;例如，以下 &lt;code&gt;StorageClass&lt;/code&gt; 允许通过名为 &lt;code&gt;com.example.team/csi-driver&lt;/code&gt; 的 CSI Volume Plugin 动态创建“fast-storage”Volume。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;StorageClass&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;storage.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;fast-storage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;provisioner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;com.example.team/csi-driver&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pd-ssd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要触发动态配置，请创建一个 &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; 对象。例如，下面的 PersistentVolumeClaim 可以使用上面的 StorageClass 触发动态配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PersistentVolumeClaim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-request-for-storage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessModes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ReadWriteOnce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storageClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;fast-storage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当动态创建 Volume 时，通过 CreateVolume 调用，将参数 &lt;code&gt;type：pd-ssd&lt;/code&gt; 传递给 CSI 插件 &lt;code&gt;com.example.team/csi-driver&lt;/code&gt; 。作为响应，外部 Volume 插件会创建一个新 Volume，然后自动创建一个 &lt;code&gt;PersistentVolume&lt;/code&gt; 对象来对应前面的 PVC。然后，Kubernetes 会将新的 &lt;code&gt;PersistentVolume&lt;/code&gt; 对象绑定到 &lt;code&gt;PersistentVolumeClaim&lt;/code&gt;，使其可以使用。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;fast-storage&lt;/code&gt; StorageClass 被标记为默认值，则不需要在 &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; 中包含 StorageClassName，它将被默认使用。&lt;/p&gt;
&lt;h3 id=&#34;预配置-volume&#34;&gt;预配置 Volume&lt;/h3&gt;
&lt;p&gt;您可以通过手动创建一个 &lt;code&gt;PersistentVolume&lt;/code&gt; 对象来展示现有 Volumes，从而在 Kubernetes 中暴露预先存在的 Volume。例如，暴露属于 &lt;code&gt;com.example.team/csi-driver&lt;/code&gt; 这个 CSI 插件的 &lt;code&gt;existingVolumeName Volume&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PersistentVolume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-manually-created-pv&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessModes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ReadWriteOnce&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;persistentVolumeReclaimPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Retain&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;csi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;com.example.team/csi-driver&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeHandle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;existingVolumeName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;附着和挂载&#34;&gt;附着和挂载&lt;/h3&gt;
&lt;p&gt;您可以在任何的 pod 或者 pod 的 template 中引用绑定到 CSI volume 上的 &lt;code&gt;PersistentVolumeClaim&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;dockerfile/nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/www/html&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-csi-volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-csi-volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;claimName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-request-for-storage&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当一个引用了 CSI Volume 的 pod 被调度时，Kubernetes 将针对外部 CSI 插件进行相应的操作，以确保特定的 Volume 被 attached、mounted，并且能被 pod 中的容器使用。&lt;/p&gt;
&lt;p&gt;关于 CSI 实现的详细信息请参考设计文档。&lt;/p&gt;
&lt;h2 id=&#34;创建-csi-驱动&#34;&gt;创建 CSI 驱动&lt;/h2&gt;
&lt;p&gt;Kubernetes 尽可能少地指定 CSI Volume 驱动程序的打包和部署规范。&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/container-storage-interface.md#third-party-csi-volume-drivers&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;记录了在 Kubernetes 上部署 CSI Volume 驱动程序的最低要求。&lt;/p&gt;
&lt;p&gt;最低要求文件还包含&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/container-storage-interface.md#recommended-mechanism-for-deploying-csi-drivers-on-kubernetes&#34; title=&#34;概述部分&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;概述部分&lt;/a&gt;，提供了在 Kubernetes 上部署任意容器化 CSI 驱动程序的建议机制。存储提供商可以运用这个机制来简化 Kubernetes 上容器式 CSI 兼容 Volume 驱动程序的部署。&lt;/p&gt;
&lt;p&gt;作为推荐部署的一部分，Kubernetes 团队提供以下 sidecar（辅助）容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/external-attacher&#34; title=&#34;External-attacher&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;External-attacher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可监听 Kubernetes VolumeAttachment 对象并触发 ControllerPublish 和 ControllerUnPublish 操作的 sidecar 容器，通过 CSI endpoint 触发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/external-provisioner&#34; title=&#34;External-provisioner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;External-provisioner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 Kubernetes PersistentVolumeClaim 对象的 sidecar 容器，并触发对 CSI 端点的 CreateVolume 和 DeleteVolume 操作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/driver-registrar&#34; title=&#34;Driver-registrar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Driver-registrar&lt;/a&gt;(DEPRECATED)&lt;/p&gt;
&lt;p&gt;使用 Kubelet（将来）注册 CSI 驱动程序的 sidecar 容器，并将 &lt;code&gt;NodeId&lt;/code&gt; （通过 &lt;code&gt;GetNodeID&lt;/code&gt; 调用检索到 CSI endpoint）添加到 Kubernetes Node API 对象的 annotation 里面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/cluster-driver-registrar&#34; title=&#34;Cluster Driver Registrar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cluster Driver Registrar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 CSIDriver 这个集群范围的 CRD 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/node-driver-registrar&#34; title=&#34;Node Driver Registrar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node Driver Registrar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;替代 Driver-registrar。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储供应商完全可以使用这些组件来为其插件构建 Kubernetes Deployment，同时让它们的 CSI 驱动程序完全意识不到 Kubernetes 的存在。&lt;/p&gt;
&lt;p&gt;另外 CSI 驱动完全是由第三方存储供应商自己维护的，在 kubernetes 1.9 版本中 CSI 还处于 alpha 版本。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/container-storage-interface/spec/blob/master/spec.md&#34; title=&#34;Container Storage Interface (CSI) - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Container Storage Interface (CSI) - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>认证和授权</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/authentication-and-authorization/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/authentication-and-authorization/</guid>
      <description>
        
        
        &lt;p&gt;认证和授权是限制访问集群资源的主要机制。如果集群配置错误，网络行为者可以扫描知名的 Kubernetes 端口，访问集群的数据库或进行 API 调用，而不需要经过认证。用户认证不是 Kubernetes 的一个内置功能。然而，有几种方法可以让管理员在集群中添加认证。&lt;/p&gt;
&lt;h2 id=&#34;认证&#34;&gt;认证&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;管理员必须向集群添加一个认证方法，以实现认证和授权机制。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kubernetes 集群有两种类型的用户：服务账户和普通用户账户。服务账户代表 Pod 处理 API 请求。认证通常由 Kubernetes 通过 ServiceAccount Admission Controller 使用承载令牌自动管理。不记名令牌被安装到 Pod 中约定俗成的位置，如果令牌不安全，可能会在集群外使用。正因为如此，对 Pod Secret 的访问应该限制在那些需要使用 Kubernetes RBAC 查看的人身上。对于普通用户和管理员账户，没有自动的用户认证方法。管理员必须在集群中添加一个认证方法，以实现认证和授权机制。&lt;/p&gt;
&lt;p&gt;Kubernetes 假设由一个独立于集群的服务来管理用户认证。&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/authentication&#34; title=&#34;Kubernetes 文档中&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档中&lt;/a&gt;列出了几种实现用户认证的方法，包括客户端证书、承载令牌、认证插件和其他认证协议。至少应该实现一种用户认证方法。当实施多种认证方法时，第一个成功认证请求的模块会缩短评估的时间。管理员不应使用静态密码文件等弱方法。薄弱的认证方法可能允许网络行为者冒充合法用户进行认证。&lt;/p&gt;
&lt;p&gt;匿名请求是被其他配置的认证方法拒绝的请求，并且不与任何个人用户或 Pod 相联系。在一个设置了令牌认证并启用了匿名请求的服务器中，没有令牌的请求将作为匿名请求执行。在 Kubernetes 1.6 和更新的版本中，匿名请求是默认启用的。当启用 RBAC 时，匿名请求需要 &lt;code&gt; system:anonymous&lt;/code&gt; 用户或 &lt;code&gt;system:unauthenticated&lt;/code&gt; 组的明确授权。匿名请求应该通过向 API 服务器传递 &lt;code&gt;--anonymous-auth=false&lt;/code&gt; 选项来禁用。启用匿名请求可能会允许网络行为者在没有认证的情况下访问集群资源。&lt;/p&gt;
&lt;h2 id=&#34;基于角色的访问控制&#34;&gt;基于角色的访问控制&lt;/h2&gt;
&lt;p&gt;RBAC 是根据组织内个人的角色来控制集群资源访问的一种方法。在 Kubernetes 1.6 和更新的版本中，RBAC 是默认启用的。要使用 kubectl 检查集群中是否启用了 RBAC，执行 &lt;code&gt;kubectl api-version&lt;/code&gt;。如果启用，应该列出&lt;code&gt;rbac.authorization.k8s.io/v1&lt;/code&gt; 的 API 版本。云 Kubernetes 服务可能有不同的方式来检查集群是否启用了 RBAC。如果没有启用 RBAC，在下面的命令中用 &lt;code&gt;--authorization-mode&lt;/code&gt; 标志启动 API 服务器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kube-apiserver --authorization-mode&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;RBAC
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;留下授权模式标志，如 &lt;code&gt;AlwaysAllow&lt;/code&gt;，允许所有的授权请求，有效地禁用所有的授权，限制了执行最小权限的访问能力。&lt;/p&gt;
&lt;p&gt;可以设置两种类型的权限：&lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt;。&lt;code&gt;Roles&lt;/code&gt; 为特定命名空间设置权限，而 &lt;code&gt;ClusterRoles&lt;/code&gt; 则为所有集群资源设置权限，而不考虑命名空间。&lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt; 只能用于添加权限。没有拒绝规则。如果一个集群被配置为使用 RBAC，并且匿名访问被禁用，Kubernetes API 服务器将拒绝没有明确允许的权限。&lt;a href=&#34;../appendix/j/&#34; title=&#34;附录 J&#34;&gt;&lt;strong&gt;附录&lt;/strong&gt; J&lt;/a&gt; 中显示了一个 RBAC 角色的例子：&lt;code&gt;pod-reader&lt;/code&gt; RBAC 角色。&lt;/p&gt;
&lt;p&gt;一个 &lt;code&gt;Role&lt;/code&gt; 或 &lt;code&gt;ClusterRole&lt;/code&gt; 定义了一个权限，但并没有将该权限与一个用户绑定。&lt;code&gt;RoleBindings&lt;/code&gt; 和 &lt;code&gt;ClusterRoleBindings&lt;/code&gt; 用于将一个 &lt;code&gt;Roles&lt;/code&gt; 或 &lt;code&gt;ClusterRoles&lt;/code&gt; 与一个用户、组或服务账户联系起来。角色绑定将角色或集群角色的权限授予定义的命名空间中的用户、组或服务账户。&lt;code&gt;ClusterRoles&lt;/code&gt; 是独立于命名空间而创建的，然后可以使用 &lt;code&gt;RoleBinding&lt;/code&gt; 来限制命名空间的范围授予个人。&lt;code&gt;ClusterRoleBindings&lt;/code&gt; 授予用户、群组或服务账户跨所有集群资源的 &lt;code&gt;ClusterRoles&lt;/code&gt;。RBAC &lt;code&gt;RoleBinding&lt;/code&gt; 和 &lt;code&gt;ClusterRoleBinding&lt;/code&gt; 的例子在&lt;a href=&#34;../appendix/k/&#34; title=&#34;附录 K：RBAC RoleBinding 和 ClusterRoleBinding 示例&#34;&gt;&lt;strong&gt;附录 K：RBAC &lt;code&gt;RoleBinding&lt;/code&gt; 和 &lt;code&gt;ClusterRoleBinding&lt;/code&gt; 示例&lt;/strong&gt;&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;要创建或更新 &lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt;，用户必须在同一范围内拥有新角色所包含的权限，或者拥有对 &lt;code&gt;rbac.authorization.k8s.io&lt;/code&gt; API 组中的 &lt;code&gt;Roles&lt;/code&gt; 或 &lt;code&gt;ClusterRoles&lt;/code&gt; 资源执行升级动词的明确权限。创建绑定后，&lt;code&gt;Roles&lt;/code&gt; 或 &lt;code&gt;ClusterRoles&lt;/code&gt; 是不可改变的。要改变一个角色，必须删除该绑定。&lt;/p&gt;
&lt;p&gt;分配给用户、组和服务账户的权限应该遵循最小权限原则，只给资源以必要的权限。用户或用户组可以被限制在所需资源所在的特定命名空间。默认情况下，为每个命名空间创建一个服务账户，以便 Pod 访问 Kubernetes API。可以使用 RBAC 策略来指定每个命名空间的服务账户的允许操作。对 Kubernetes API 的访问是通过创建 RBAC 角色或 &lt;code&gt;ClusterRoles&lt;/code&gt; 来限制的，该角色具有适当的 API 请求动词和所需的资源，该行动可以应用于此。有一些工具可以通过打印用户、组和服务账户及其相关分配的 &lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt; 来帮助审计 RBAC 策略。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生应用规范模型</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/</guid>
      <description>
        
        
        &lt;p&gt;OAM 规范的设计遵循了以下&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/9.design_principles.md&#34; title=&#34;原则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原则&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注点分离：根据功能和行为来定义模型，以此划分不同角色的职责;&lt;/li&gt;
&lt;li&gt;平台中立：OAM 的实现不绑定到特定平台；&lt;/li&gt;
&lt;li&gt;优雅：尽量减少设计复杂性；&lt;/li&gt;
&lt;li&gt;复用性：可移植性好，同一个应用程序可以在不同的平台上不加改动地执行；&lt;/li&gt;
&lt;li&gt;不作为编程模型：OAM 提供的是应用程序模型，描述了应用程序的组成和组件的拓扑结构，而不关注应用程序的具体实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图是 OAM 规范示意图。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/oam-spec_hu_da243277ae0b37e7.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/oam-spec.png&#34; data-img=&#34;/book/kubernetes-handbook/cloud-native/spec/oam-spec.png&#34; data-width=&#34;1361&#34; data-height=&#34;811&#34; alt=&#34;image&#34; data-caption=&#34;OAM 规范示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;OAM 规范示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;图片来自 &lt;a href=&#34;https://github.com/oam-dev/spec/issues/346&#34; title=&#34;oam/spec issue #346&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;oam/spec issue #346&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/workload/&#34;&gt;Workload&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/component/&#34;&gt;Component&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/trait/&#34;&gt;Trait&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/application-scope/&#34;&gt;ApplicationScope&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cloud-native/spec/application-configuration/&#34;&gt;ApplicationConfiguration&lt;/a&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
                           
    <item>
      <title>Kubernetes 中的资源对象</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/objects/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/objects/</guid>
      <description>
        
        
        &lt;p&gt;以下列举的内容都是 Kubernetes 中的对象（Object），这些对象都可以在 YAML 文件中作为一种 API 类型来配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Namespace&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;Volume&lt;/li&gt;
&lt;li&gt;PersistentVolume&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Secret&lt;/li&gt;
&lt;li&gt;StatefulSet&lt;/li&gt;
&lt;li&gt;DaemonSet&lt;/li&gt;
&lt;li&gt;ServiceAccount&lt;/li&gt;
&lt;li&gt;ReplicationController&lt;/li&gt;
&lt;li&gt;ReplicaSet&lt;/li&gt;
&lt;li&gt;Job&lt;/li&gt;
&lt;li&gt;CronJob&lt;/li&gt;
&lt;li&gt;SecurityContext&lt;/li&gt;
&lt;li&gt;ResourceQuota&lt;/li&gt;
&lt;li&gt;LimitRange&lt;/li&gt;
&lt;li&gt;HorizontalPodAutoscaling&lt;/li&gt;
&lt;li&gt;Ingress&lt;/li&gt;
&lt;li&gt;ConfigMap&lt;/li&gt;
&lt;li&gt;Label&lt;/li&gt;
&lt;li&gt;CustomResourceDefinition&lt;/li&gt;
&lt;li&gt;Role&lt;/li&gt;
&lt;li&gt;ClusterRole&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我将它们简单的分类为以下几种资源对象：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;类别&lt;/th&gt;
          &lt;th&gt;名称&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;资源对象&lt;/td&gt;
          &lt;td&gt;Pod、ReplicaSet、ReplicationController、Deployment、StatefulSet、DaemonSet、Job、CronJob、HorizontalPodAutoscaling、Node、Namespace、Service、Ingress、Label、CustomResourceDefinition&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储对象&lt;/td&gt;
          &lt;td&gt;Volume、PersistentVolume、Secret、ConfigMap&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;策略对象&lt;/td&gt;
          &lt;td&gt;SecurityContext、ResourceQuota、LimitRange&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;身份对象&lt;/td&gt;
          &lt;td&gt;ServiceAccount、Role、ClusterRole&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;理解-kubernetes-中的对象&#34;&gt;理解 Kubernetes 中的对象&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 系统中，&lt;em&gt;Kubernetes 对象&lt;/em&gt; 是持久化的条目。Kubernetes 使用这些条目去表示整个集群的状态。特别地，它们描述了如下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么容器化应用在运行（以及在哪个 Node 上）&lt;/li&gt;
&lt;li&gt;可以被应用使用的资源&lt;/li&gt;
&lt;li&gt;关于应用如何表现的策略，比如重启策略、升级策略，以及容错策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 对象是“目标性记录” —— 一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。通过创建对象，可以有效地告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的，这就是 Kubernetes 集群的 &lt;strong&gt;期望状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;与 Kubernetes 对象工作 —— 是否创建、修改，或者删除 —— 需要使用 Kubernetes API。当使用 &lt;code&gt;kubectl&lt;/code&gt; 命令行接口时，比如，CLI 会使用必要的 Kubernetes API 调用，也可以在程序中直接使用 Kubernetes API。为了实现该目标，Kubernetes 当前提供了一个 &lt;code&gt;golang&lt;/code&gt; &lt;a href=&#34;https://github.com/kubernetes/client-go&#34; title=&#34;客户端库&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;客户端库&lt;/a&gt; ，其它语言库（例如&lt;a href=&#34;https://github.com/kubernetes-incubator/client-python&#34; title=&#34;Python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;）也正在开发中。&lt;/p&gt;
&lt;h3 id=&#34;对象-spec-与状态&#34;&gt;对象 Spec 与状态&lt;/h3&gt;
&lt;p&gt;每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置：对象 &lt;em&gt;spec&lt;/em&gt; 和 对象 &lt;em&gt;status&lt;/em&gt;。&lt;em&gt;spec&lt;/em&gt; 必须提供，它描述了对象的 &lt;em&gt;期望状态&lt;/em&gt;—— 希望对象所具有的特征。&lt;em&gt;status&lt;/em&gt; 描述了对象的 &lt;em&gt;实际状态&lt;/em&gt;，它是由 Kubernetes 系统提供和更新。在任何时刻，Kubernetes 控制平面一直处于活跃状态，管理着对象的实际状态以与我们所期望的状态相匹配。&lt;/p&gt;
&lt;p&gt;例如，Kubernetes Deployment 对象能够表示运行在集群中的应用。当创建 Deployment 时，可能需要设置 Deployment 的 spec，以指定该应用需要有 3 个副本在运行。Kubernetes 系统读取 Deployment spec，启动我们所期望的该应用的 3 个实例 —— 更新状态以与 spec 相匹配。如果那些实例中有失败的（一种状态变更），Kubernetes 系统通过修正来响应 spec 和状态之间的不一致 —— 这种情况，启动一个新的实例来替换。&lt;/p&gt;
&lt;p&gt;关于对象 spec、status 和 metadata 更多信息，查看 &lt;a href=&#34;https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&#34; title=&#34;Kubernetes API Conventions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API Conventions&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;描述-kubernetes-对象&#34;&gt;描述 Kubernetes 对象&lt;/h3&gt;
&lt;p&gt;当创建 Kubernetes 对象时，必须提供对象的 spec，用来描述该对象的期望状态，以及关于对象的一些基本信息（例如，名称）。当使用 Kubernetes API 创建对象时（或者直接创建，或者基于&lt;code&gt;kubectl&lt;/code&gt;），API 请求必须在请求体中包含 JSON 格式的信息。&lt;strong&gt;更常用的是，需要在 .yaml 文件中为 kubectl 提供这些信息&lt;/strong&gt;。 &lt;code&gt;kubectl&lt;/code&gt; 在执行 API 请求时，将这些信息转换成 JSON 格式。&lt;/p&gt;
&lt;p&gt;这里有一个 &lt;code&gt;.yaml&lt;/code&gt; 示例文件，展示了 Kubernetes Deployment 的必需字段和对象 spec：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx-deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx:1.7.9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一种创建 Deployment 的方式，类似上面使用 &lt;code&gt;.yaml&lt;/code&gt; 文件，是使用 &lt;code&gt;kubectl&lt;/code&gt; 命令行接口（CLI）中的 &lt;code&gt;kubectl create&lt;/code&gt; 命令，传递 &lt;code&gt;.yaml&lt;/code&gt; 作为参数。下面是一个示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl create -f docs/user-guide/nginx-deployment.yaml --record
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出类似如下这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx-deployment&amp;#34;&lt;/span&gt; created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;必需字段&#34;&gt;必需字段&lt;/h3&gt;
&lt;p&gt;在想要创建的 Kubernetes 对象对应的 &lt;code&gt;.yaml&lt;/code&gt; 文件中，需要配置如下的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt; - 创建该对象所使用的 Kubernetes API 的版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kind&lt;/code&gt; - 想要创建的对象的类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata&lt;/code&gt; - 帮助识别对象唯一性的数据，包括一个 &lt;code&gt;name&lt;/code&gt; 字符串、UID 和可选的 &lt;code&gt;namespace&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也需要提供对象的 &lt;code&gt;spec&lt;/code&gt; 字段。对象 &lt;code&gt;spec&lt;/code&gt; 的精确格式对每个 Kubernetes 对象来说是不同的，包含了特定于该对象的嵌套字段。&lt;a href=&#34;https://kubernetes.io/docs/api/&#34; title=&#34;Kubernetes API 参考&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API 参考&lt;/a&gt;能够帮助我们找到任何我们想创建的对象的 spec 格式。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-overview/&#34;&gt;Pod 概览&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod/&#34;&gt;Pod 解析&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/init-containers/&#34;&gt;Init 容器&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pause-container/&#34;&gt;Pause 容器&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-security-policy/&#34;&gt;Pod 安全策略&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-lifecycle/&#34;&gt;Pod 的生命周期&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-hook/&#34;&gt;Pod Hook&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-preset/&#34;&gt;Pod Preset&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-disruption-budget/&#34;&gt;Pod 中断预算&lt;/a&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
                           
    <item>
      <title>日志审计</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/logging/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/logging/</guid>
      <description>
        
        
        &lt;p&gt;日志记录了集群中的活动。审计日志是必要的，这不仅是为了确保服务按预期运行和配置，也是为了确保系统的安全。系统性的审计要求对安全设置进行一致和彻底的检查，以帮助识别潜在威胁。Kubernetes 能够捕获集群操作的审计日志，并监控基本的 CPU 和内存使用信息；然而，它并没有提供深入的监控或警报服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在创建时建立 Pod 基线，以便能够识别异常活动。&lt;/li&gt;
&lt;li&gt;在主机层面、应用层面和云端（如果适用）进行日志记录。&lt;/li&gt;
&lt;li&gt;整合现有的网络安全工具，进行综合扫描、监控、警报和分析。&lt;/li&gt;
&lt;li&gt;设置本地日志存储，以防止在通信失败的情况下丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志&#34;&gt;日志&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中运行应用程序的系统管理员应该为其环境建立一个有效的日志、监控和警报系统。仅仅记录 Kubernetes 事件还不足以了解系统上发生的行动的全貌。还应在主机级、应用级和云上（如果适用）进行日志记录。而且，这些日志可以与任何外部认证和系统日志相关联，以提供整个环境所采取的行动的完整视图，供安全审计员和事件响应者使用。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 环境中，管理员应监控 / 记录以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 请求历史&lt;/li&gt;
&lt;li&gt;性能指标&lt;/li&gt;
&lt;li&gt;部署情况&lt;/li&gt;
&lt;li&gt;资源消耗&lt;/li&gt;
&lt;li&gt;操作系统调用&lt;/li&gt;
&lt;li&gt;协议、权限变化&lt;/li&gt;
&lt;li&gt;网络流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个 Pod 被创建或更新时，管理员应该捕获网络通信、响应时间、请求、资源消耗和任何其他相关指标的详细日志以建立一个基线。正如上一节所详述的，匿名账户应被禁用，但日志策略仍应记录匿名账户采取的行动，以确定异常活动。&lt;/p&gt;
&lt;p&gt;应定期审计 RBAC 策略配置，并在组织的系统管理员发生变化时进行审计。这样做可以确保访问控制的调整符合基于角色的访问控制部分中概述的 RBAC 策略加固指导。&lt;/p&gt;
&lt;p&gt;审计应包括将当前日志与正常活动的基线测量进行比较，以确定任何日志指标和事件的重大变化。系统管理员应调查重大变动——例如，应用程序使用的变化或恶意程序的安装，如密码器，以确定根本原因。应该对内部和外部流量日志进行审计，以确保对连接的所有预期的安全限制已被正确配置，并按预期运行。管理员还可以在系统发展过程中使用这些审计，以确定何时不再需要外部访问并可以限制。&lt;/p&gt;
&lt;p&gt;日志可以导向外部日志服务，以确保集群外的安全专业人员的可用使用它们，尽可能接近实时地识别异常情况，并在发生损害时保护日志不被删除。如果使用这种方法，日志应该在传输过程中用 TLS 1.2 或 1.3 进行加密，以确保网络行为者无法在传输过程中访问日志并获得关于环境的宝贵信息。在利用外部日志服务器时，要采取的另一项预防措施是在 Kubernetes 内配置日志转发器，只对外部存储进行追加访问。这有助于保护外部存储的日志不被删除或被集群内日志覆盖。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-原生审计日志配置&#34;&gt;Kubernetes 原生审计日志配置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes 的审计功能默认是禁用的，所以如果没有写审计策略，就不会有任何记录。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;kube-apiserver&lt;/code&gt; 驻留在 Kubernetes 控制平面上，作为前端，处理集群的内部和外部请求。每个请求，无论是由用户、应用程序还是控制平面产生的，在其执行的每个阶段都会产生一个审计事件。当审计事件注册时，&lt;code&gt;kube-apiserver&lt;/code&gt; 检查审计策略文件和适用规则。如果存在这样的规则，服务器会在第一个匹配的规则所定义的级别上记录该事件。Kubernetes 的内置审计功能默认是不启用的，所以如果没有写审计策略，就不会有任何记录。&lt;/p&gt;
&lt;p&gt;集群管理员必须写一个审计策略 YAML 文件，以建立规则，并指定所需的审计级别，以记录每种类型的审计事件。然后，这个审计策略文件被传递给 &lt;code&gt;kube-apiserver&lt;/code&gt;，并加上适当的标志。一个规则要被认为是有效的，必须指定四个审计级别中的一个：&lt;code&gt;none&lt;/code&gt;、&lt;code&gt;Meatadataa&lt;/code&gt;、&lt;code&gt;Request&lt;/code&gt; 或 &lt;code&gt;RequestResponse&lt;/code&gt;。&lt;a href=&#34;../appendix/l/&#34; title=&#34;附录 L：审计策略&#34;&gt;&lt;strong&gt;附录 L：审计策略&lt;/strong&gt;&lt;/a&gt;展示了一个审计策略文件的内容，该文件记录了 &lt;code&gt;RequestResponse&lt;/code&gt; 级别的所有事件。&lt;a href=&#34;../appendix/m/&#34; title=&#34;附录 M&#34;&gt;&lt;strong&gt;附录 M&lt;/strong&gt;&lt;/a&gt; 向 &lt;code&gt;kube-apiserver&lt;/code&gt; 提交审计策略文件的标志示例显示了 &lt;code&gt;kube-apiserver&lt;/code&gt; 配置文件的位置，并提供了审计策略文件可以被传递给 &lt;code&gt;kube-apiserver&lt;/code&gt; 的标志示例。附录 M 还提供了如何挂载卷和在必要时配置主机路径的指导。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-apiserver&lt;/code&gt; 包括可配置的日志和 webhook 后端，用于审计日志。日志后端将指定的审计事件写入日志文件，webhook 后端可以被配置为将文件发送到外部 HTTP API。附录 M 中的例子中设置的 &lt;code&gt;--audit-log-path&lt;/code&gt; 和 &lt;code&gt;--audit-log-maxage&lt;/code&gt; 标志是可以用来配置日志后端的两个例子，它将审计事件写到一个文件中。&lt;code&gt;log-path&lt;/code&gt; 标志是启用日志的最小配置，也是日志后端唯一需要的配置。这些日志文件的默认格式是 JSON，尽管必要时也可以改变。日志后端的其他配置选项可以在 Kubernetes 文档中找到。&lt;/p&gt;
&lt;p&gt;为了将审计日志推送给组织的 SIEM 平台，可以通过提交给 &lt;code&gt;kube-apiserver&lt;/code&gt; 的 YAML 文件手动配置 webhook 后端。webhook 配置文件以及如何将该文件传递给 &lt;code&gt;kube-apiserver&lt;/code&gt; 可以在&lt;a href=&#34;../appendix/n/&#34; title=&#34;附录 N：webhook 配置&#34;&gt;&lt;strong&gt;附录 N：webhook 配置&lt;/strong&gt;&lt;/a&gt;的示例中查看。关于如何在 &lt;code&gt;kube-apiserver&lt;/code&gt; 中为 webhook 后端设置的配置选项的详尽列表，可以在 Kubernetes 文档中找到。&lt;/p&gt;
&lt;h3 id=&#34;工作节点和容器的日志记录&#34;&gt;工作节点和容器的日志记录&lt;/h3&gt;
&lt;p&gt;在 Kubernetes 架构中，有很多方法可以配置日志功能。在日志管理的内置方法中，每个节点上的 kubelet 负责管理日志。它根据其对单个文件长度、存储时间和存储容量的策略，在本地存储和轮转日志文件。这些日志是由 kubelet 控制的，可以从命令行访问。下面的命令打印了一个 Pod 中的容器的日志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl logs &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-f&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-p&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; POD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-c CONTAINER&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要对日志进行流式处理，可以使用 &lt;code&gt;-f&lt;/code&gt; 标志；如果存在并需要来自容器先前实例的日志，可以使用 &lt;code&gt;-p&lt;/code&gt; 标志；如果 Pod 中有多个容器，可以使用 &lt;code&gt;-c&lt;/code&gt; 标志来指定一个容器。如果发生错误导致容器、Pod 或节点死亡，Kubernetes 中的本地日志解决方案并没有提供一种方法来保存存储在失败对象中的日志。NSA 和 CISA 建议配置一个远程日志解决方案，以便在一个节点失败时保存日志。&lt;/p&gt;
&lt;p&gt;远程记录的选项包括：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;远程日志选项&lt;/th&gt;
          &lt;th&gt;使用的理由&lt;/th&gt;
          &lt;th&gt;配置实施&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;在每个节点上运行一个日志代理，将日志推送到后端&lt;/td&gt;
          &lt;td&gt;赋予节点暴露日志或将日志推送到后端的能力，在发生故障的情况下将其保存在节点之外。&lt;/td&gt;
          &lt;td&gt;配置一个 Pod 中的独立容器作为日志代理运行，让它访问节点的应用日志文件，并配置它将日志转发到组织的 SIEM。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;在每个 Pod 中使用一个 sidecar 容器，将日志推送到一个输出流中&lt;/td&gt;
          &lt;td&gt;用于将日志推送到独立的输出流。当应用程序容器写入不同格式的多个日志文件时，这可能是一个有用的选项。&lt;/td&gt;
          &lt;td&gt;为每种日志类型配置 sidecar 容器，并用于将这些日志文件重定向到它们各自的输出流，在那里它们可以被 kubelet 处理。然后，节点级的日志代理可以将这些日志转发给 SIEM 或其他后端。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;在每个 Pod 中使用一个日志代理 sidecar，将日志推送到后端&lt;/td&gt;
          &lt;td&gt;当需要比节点级日志代理所能提供的更多灵活性时。&lt;/td&gt;
          &lt;td&gt;为每个 Pod 配置，将日志直接推送到后端。这是连接第三方日志代理和后端的常用方法。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;从应用程序中直接向后端推送日志&lt;/td&gt;
          &lt;td&gt;捕获应用程序的日志。Kubernetes 没有内置的机制直接来暴露或推送日志到后端。&lt;/td&gt;
          &lt;td&gt;各组织将需要在其应用程序中建立这一功能，或附加一个有信誉的第三方工具来实现这一功能。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Sidecar 容器与其他容器一起在 Pod 中运行，可以被配置为将日志流向日志文件或日志后端。Sidecar 容器也可以被配置为作为另一个标准功能容器的流量代理，它被打包和部署。&lt;/p&gt;
&lt;p&gt;为了确保这些日志代理在工作节点之间的连续性，通常将它们作为 DaemonSet 运行。为这种方法配置 DaemonSet，可以确保每个节点上都有一份日志代理的副本，而且对日志代理所做的任何改变在集群中都是一致的。&lt;/p&gt;
&lt;h3 id=&#34;seccomp-审计模式&#34;&gt;Seccomp: 审计模式&lt;/h3&gt;
&lt;p&gt;除了上述的节点和容器日志外，记录系统调用也是非常有益的。在 Kubernetes 中审计容器系统调用的一种方法是使用安全计算模式（seccomp）工具。这个工具默认是禁用的，但可以用来限制容器的系统调用能力，从而降低内核的攻击面。Seccomp 还可以通过使用审计配置文件记录正在进行的调用。&lt;/p&gt;
&lt;p&gt;自定义 seccomp 配置文件用于定义哪些系统调用是允许的，以及未指定调用的默认动作。为了在 Pod 中启用自定义 seccomp 配置文件，Kubernetes 管理员可以将他们的 seccomp 配置文件 JSON 文件写入到 &lt;code&gt;/var/lib/kubelet/seccomp/&lt;/code&gt; 目录，并将 &lt;code&gt;seccompProfile&lt;/code&gt; 添加到 Pod 的 &lt;code&gt;securityContext&lt;/code&gt;。自定义的 &lt;code&gt;seccompProfile&lt;/code&gt; 还应该包括两个字段。&lt;code&gt;Type: Localhost&lt;/code&gt; 和 &lt;code&gt;localhostProfile: myseccomppolicy.json&lt;/code&gt;。记录所有的系统调用可以帮助管理员了解标准操作需要哪些系统调用，使他们能够进一步限制 seccomp 配置文件而不失去系统功能。&lt;/p&gt;
&lt;h3 id=&#34;syslog&#34;&gt;SYSLOG&lt;/h3&gt;
&lt;p&gt;Kubernetes 默认将 kubelet 日志和容器运行时日志写入 journald，如果该服务可用的话。如果组织希望对默认情况下不使用的系统使用 syslog 工具，或者从整个集群收集日志并将其转发到 syslog 服务器或其他日志存储和聚合平台，他们可以手动配置该功能。Syslog 协议定义了一个日志信息格式化标准。Syslog 消息包括一个头——由时间戳、主机名、应用程序名称和进程 ID（PID）组成，以及一个以明文书写的消息。Syslog 服务，如 syslog-ng® 和 rsyslog，能够以统一的格式收集和汇总整个系统的日志。许多 Linux 操作系统默认使用 rsyslog 或 journald——一个事件日志守护程序，它优化了日志存储并通过 journalctl 输出 syslog 格式的日志。在运行某些 Linux 发行版的节点上，syslog 工具默认在操作系统层面记录事件。运行这些 Linux 发行版的容器，默认也会使用 syslog 收集日志。由 syslog 工具收集的日志存储在每个适用的节点或容器的本地文件系统中，除非配置了一个日志聚合平台来收集它们。&lt;/p&gt;
&lt;h2 id=&#34;siem-平台&#34;&gt;SIEM 平台&lt;/h2&gt;
&lt;p&gt;安全信息和事件管理（SIEM）软件从整个组织的网络中收集日志。SIEM 软件将防火墙日志、应用程序日志等汇集在一起；将它们解析出来，提供一个集中的平台，分析人员可以从这个平台上监控系统安全。SIEM 工具在功能上有差异。一般来说，这些平台提供日志收集、威胁检测和警报功能。有些包括机器学习功能，可以更好地预测系统行为并帮助减少错误警报。在其环境中使用这些平台的组织可以将它们与 Kubernetes 集成，以更好地监测和保护集群。用于管理 Kubernetes 环境中的日志的开源平台是作为 SIEM 平台的替代品存在的。&lt;/p&gt;
&lt;p&gt;容器化环境在节点、Pod、容器和服务之间有许多相互依赖的关系。在这些环境中，Pod 和容器不断地在不同的节点上被关闭和重启。这给传统的 SIEM 带来了额外的挑战，它们通常使用 IP 地址来关联日志。即使是下一代的 SIEM 平台也不一定适合复杂的 Kubernetes 环境。然而，随着 Kubernetes 成为最广泛使用的容器编排平台，许多开发 SIEM 工具的组织已经开发了专门用于 Kubernetes 环境的产品变化，为这些容器化环境提供全面的监控解决方案。管理员应该了解他们平台的能力，并确保他们的日志充分捕捉到环境，以支持未来的事件响应。&lt;/p&gt;
&lt;h2 id=&#34;警报&#34;&gt;警报&lt;/h2&gt;
&lt;p&gt;Kubernetes 本身并不支持警报功能；然而，一些具有警报功能的监控工具与 Kubernetes 兼容。如果 Kubernetes 管理员选择配置一个警报工具在 Kubernetes 环境中工作，有几个指标是管理员应该监控和配置警报的。&lt;/p&gt;
&lt;p&gt;可能触发警报的案例包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境中的任何机器上的磁盘空间都很低。&lt;/li&gt;
&lt;li&gt;记录卷上的可用存储空间正在减少。&lt;/li&gt;
&lt;li&gt;外部日志服务脱机。&lt;/li&gt;
&lt;li&gt;一个以 root 权限运行的 Pod 或应用程序。&lt;/li&gt;
&lt;li&gt;一个账户对他们没有权限的资源提出的请求。&lt;/li&gt;
&lt;li&gt;一个正在使用或获得特权的匿名账户。&lt;/li&gt;
&lt;li&gt;Pod 或工作节点的 IP 地址被列为 Pod 创建请求的源 ID。&lt;/li&gt;
&lt;li&gt;异常的系统调用或失败的 API 调用。&lt;/li&gt;
&lt;li&gt;用户 / 管理员的行为不正常（即在不寻常的时间或从不寻常的地点），以及&lt;/li&gt;
&lt;li&gt;显著偏离标准操作指标基线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当存储不足时发出警报，可以帮助避免因资源有限而导致的性能问题和日志丢失，并帮助识别恶意的加密劫持企图。可以调查有特权的 Pod 执行案例，以确定管理员是否犯了一个错误，一个真实的用例需要升级特权，或者一个恶意行为者部署了一个有特权的 Pod。可疑的 Pod 创建源 IP 地址可能表明，恶意的网络行为者已经突破了容器并试图创建一个恶意的 Pod。&lt;/p&gt;
&lt;p&gt;将 Kubernetes 与企业现有的 SIEM 平台整合，特别是那些具有机器学习 / 大数据功能的平台，可以帮助识别审计日志中的违规行为并减少错误警报。如果配置这样的工具与 Kubernetes 一起工作，它应该被配置为这些情况和任何其他适用于用例的情况被配置为触发警报。&lt;/p&gt;
&lt;p&gt;当疑似入侵发生时，能够自动采取行动的系统有可能被配置为在管理员对警报作出反应时采取步骤以减轻损害。在 Pod IP 被列为 Pod 创建请求的源 ID 的情况下，一个可以实施的缓解措施是自动驱逐 Pod，以保持应用程序的可用性，但暂时停止对集群的任何损害。这样做将允许一个干净的 Pod 版本被重新安排到一个节点上。然后，调查人员可以检查日志，以确定是否发生了漏洞，如果是的话，调查恶意行为者是如何执行潜在威胁的，以便可以部署一个补丁。&lt;/p&gt;
&lt;h2 id=&#34;服务网格&#34;&gt;服务网格&lt;/h2&gt;
&lt;p&gt;服务网格是一个平台，通过允许将这些通信逻辑编码到服务网格中，而不是在每个微服务中，来简化应用程序中的微服务通信。将这种通信逻辑编码到各个微服务中是很难扩展的，当故障发生时很难调试，而且很难保证安全。使用服务网格可以简化开发人员的工作。服务网格可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个服务中断时，重新定向流量。&lt;/li&gt;
&lt;li&gt;收集性能指标以优化通信。&lt;/li&gt;
&lt;li&gt;允许管理服务与服务之间的通信加密。&lt;/li&gt;
&lt;li&gt;收集服务间通信的日志。&lt;/li&gt;
&lt;li&gt;从每个服务中收集日志。&lt;/li&gt;
&lt;li&gt;帮助开发者诊断微服务或通信机制的问题和故障。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务网格还可以帮助将服务迁移到混合或多云环境。虽然服务网格不是必须的，但它们是一种高度适合 Kubernetes 环境的选择。托管的 Kubernetes 服务通常包括他们自己的服务网格。然而，其他几个平台也是可用的，如果需要的话，是可以高度定制的。其中一些包括一个生成和轮换证书的证书颁发机构，允许服务之间进行安全的 TLS 认证。管理员应该考虑使用服务网格来加强 Kubernetes 集群的安全性。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/logging/f5_hu_cac8c5a74c822779.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/logging/f5.jpg&#34; data-img=&#34;/book/kubernetes-hardening-guidance/logging/f5.jpg&#34; data-width=&#34;1129&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;图5：集群利用服务网格，将日志与网络安全结合起来&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图5：集群利用服务网格，将日志与网络安全结合起来&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;容错性&#34;&gt;容错性&lt;/h2&gt;
&lt;p&gt;应制定容错策略，以确保日志服务的可用性。这些策略可以根据具体的 Kubernetes 用例而有所不同。一个可以实施的策略是，如果在存储容量超标的情况下，绝对有必要允许新的日志覆盖最旧的日志文件。&lt;/p&gt;
&lt;p&gt;如果日志被发送到外部服务，应该建立一种机制，以便在发生通信中断或外部服务故障时将日志存储在本地。一旦与外部服务的通信恢复，应制定策略，将本地存储的日志推送到外部服务器上。&lt;/p&gt;
&lt;h2 id=&#34;工具&#34;&gt;工具&lt;/h2&gt;
&lt;p&gt;Kubernetes 不包括广泛的审计功能。然而，该系统的构建是可扩展的，允许用户自由开发自己的定制解决方案，或选择适合自己需求的现有附加组件。最常见的解决方案之一是添加额外的审计后端服务，它可以使用 Kubernetes 记录的信息，并为用户执行额外的功能，如扩展搜索参数、数据映射功能和警报功能。已经使用 SIEM 平台的企业可以将 Kubernetes 与这些现有的功能进行整合。&lt;/p&gt;
&lt;p&gt;开源监控工具，如 Cloud Native Computing Foundation 的 Prometheus®、Grafana Labs 的 Grafana® 和 Elasticsearch 的 Elastic Stack (ELK)®—— 可用于进行事件监控、运行威胁分析、管理警报，以及收集资源隔离参数、历史使用情况和运行容器的网络统计数据。在审计访问控制和权限配置时，扫描工具可以通过协助识别 RBAC 中的风险权限配置而发挥作用。NSA 和 CISA 鼓励在现有环境中使用入侵检测系统（IDS）的组织考虑将该服务也整合到他们的 Kubernetes 环境中。这种整合将使企业能够监测并有可能杀死有异常行为迹象的容器，从而使容器能够从最初的干净镜像中重新启动。许多云服务提供商也为那些希望得到更多管理和可扩展解决方案的人提供容器监控服务。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Pod 状态与生命周期管理</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/pod-state-and-lifecycle/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/pod-state-and-lifecycle/</guid>
      <description>
        
        
        &lt;p&gt;该节将带领大家了解 Kubernetes 中的基本概念，尤其是作为 Kubernetes 中调度的最基本单位 Pod。&lt;/p&gt;
&lt;p&gt;本节中包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解 Pod 的构成&lt;/li&gt;
&lt;li&gt;Pod 的生命周期&lt;/li&gt;
&lt;li&gt;Pod 中容器的启动顺序模板定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 中的基本组件 &lt;code&gt;kube-controller-manager&lt;/code&gt; 就是用来控制 Pod 的状态和生命周期的，在了解各种 controller 之前我们有必要先了解下 Pod 本身和其生命周期。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>升级和应用安全实践</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/upgrading-and-application-security-practices/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/upgrading-and-application-security-practices/</guid>
      <description>
        
        
        &lt;p&gt;遵循本文件中概述的加固指南是确保在 Kubernetes 协调容器上运行的应用程序安全的一个步骤。然而，安全是一个持续的过程，跟上补丁、更新和升级是至关重要的。具体的软件组件因个人配置的不同而不同，但整个系统的每一块都应尽可能保持安全。这包括更新：Kubernetes、管理程序、虚拟化软件、插件、环境运行的操作系统、服务器上运行的应用程序，以及 Kubernetes 环境中托管的任何其他软件。&lt;/p&gt;
&lt;p&gt;互联网安全中心（CIS）发布了保护软件安全的基准。管理员应遵守 Kubernetes 和任何其他相关系统组件的 CIS 基准。管理员应定期检查，以确保其系统的安全性符合当前安全专家对最佳实践的共识。应定期对各种系统组件进行漏洞扫描和渗透测试，主动寻找不安全的配置和零日漏洞。任何发现都应在潜在的网络行为者发现和利用它们之前及时补救。&lt;/p&gt;
&lt;p&gt;随着更新的部署，管理员也应该跟上从环境中删除任何不再需要的旧组件。使用托管的 Kubernetes 服务可以帮助自动升级和修补 Kubernetes、操作系统和网络协议。然而，管理员仍然必须为他们的容器化应用程序打补丁和升级。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>附录</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/</guid>
      <description>
        
        
        

  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/a/&#34;&gt;附录 A：非 root 应用的 Dockerfile 示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/b/&#34;&gt;附录 B：只读文件系统的部署模板示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/c/&#34;&gt;附录 C：Pod 安全策略示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/d/&#34;&gt;附录 D：命名空间示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/e/&#34;&gt;附录 E：网络策略示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/f/&#34;&gt;附录 F：LimitRange 示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/g/&#34;&gt;附录 G：ResourceQuota 示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/h/&#34;&gt;附录 H：加密示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/i/&#34;&gt;附录 I：KMS 配置实例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/j/&#34;&gt;附录 J：pod-reader RBAC 角色&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/k/&#34;&gt;附录 K：RBAC RoleBinding 和 ClusterRoleBinding 示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/l/&#34;&gt;附录 L：审计策略&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/m/&#34;&gt;附录 M：向 kube-apiserver 提交审计策略文件的标志示例&lt;/a&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;a href=&#34;https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/n/&#34;&gt;附录 N：webhook 配置&lt;/a&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
                           
    <item>
      <title>附录 A：非 root 应用的 Dockerfile 示例</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/a/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/a/</guid>
      <description>
        
        
        &lt;p&gt;下面的例子是一个 Dockerfile，它以非 root 用户和非 group 成员身份运行一个应用程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 升级和安装 make 工具&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install -y make&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 从一个名为 code 的文件夹中复制源代码，并使用 make 工具构建应用程序。&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; ./code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; make /code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 创建一个新的用户（user1）和新的组（group1）；然后切换到该用户的上下文中。&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; useradd user1 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; groupadd group1&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; user1:group1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 设置容器的默认入口&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; /code/app&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
                           
    <item>
      <title>Pod 概览</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/objects/pod-overview/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/objects/pod-overview/</guid>
      <description>
        
        
        &lt;p&gt;本文将为你讲解 Pod 的基础概念。&lt;/p&gt;
&lt;h2 id=&#34;理解-pod&#34;&gt;理解 Pod&lt;/h2&gt;
&lt;p&gt;Pod 是 Kubernetes 中你可以创建和部署的最小也是最简的单位。Pod 代表着集群中运行的进程。&lt;/p&gt;
&lt;p&gt;Pod 中封装着应用的容器（有的情况下是好几个容器），存储、独立的网络 IP，管理容器如何运行的策略选项。Pod 代表着部署的一个单位：Kubernetes 中应用的一个实例，可能由一个或者多个容器组合在一起共享资源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docker.com&#34; title=&#34;Docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 是 Kubernetes 中最常用的容器运行时，但是 Pod 也支持其他容器运行时。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在 Kubernetes 集群中 Pod 有如下两种使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个 Pod 中运行一个容器&lt;/strong&gt;。“每个 Pod 中一个容器”的模式是最常见的用法；在这种使用方式中，你可以把 Pod 想象成是单个容器的封装，kuberentes 管理的是 Pod 而不是直接管理容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在一个 Pod 中同时运行多个容器&lt;/strong&gt;。一个 Pod 中也可以同时封装几个需要紧密耦合互相协作的容器，它们之间共享资源。这些在同一个 Pod 中的容器可以互相协作成为一个 service 单位 —— 一个容器共享文件，另一个“sidecar”容器来更新这些文件。Pod 将这些容器的存储资源作为一个实体来管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog&#34; title=&#34;Kubernetes Blog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Blog&lt;/a&gt; 有关于 Pod 用例的详细信息，查看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/&#34; title=&#34;The Distributed System Toolkit: Patterns for Composite Containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Distributed System Toolkit: Patterns for Composite Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2016/06/container-design-patterns/&#34; title=&#34;Container Design Patterns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Container Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个 Pod 都是应用的一个实例。如果你想平行扩展应用的话（运行多个实例），你应该运行多个 Pod，每个 Pod 都是一个应用实例。在 Kubernetes 中，这通常被称为 replication。&lt;/p&gt;
&lt;h3 id=&#34;pod-中如何管理多个容器&#34;&gt;Pod 中如何管理多个容器&lt;/h3&gt;
&lt;p&gt;Pod 中可以同时运行多个进程（作为容器运行）协同工作。同一个 Pod 中的容器会自动的分配到同一个 node 上。同一个 Pod 中的容器共享资源、网络环境和依赖，它们总是被同时调度。&lt;/p&gt;
&lt;p&gt;注意在一个 Pod 中同时运行多个容器是一种比较高级的用法。只有当你的容器需要紧密配合协作的时候才考虑用这种模式。例如，你有一个容器作为 web 服务器运行，需要用到共享的 volume，有另一个“sidecar”容器来从远端获取资源更新这些文件，如下图所示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-overview/pod-overview_hu_9224bf94f1adc905.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-overview/pod-overview.png&#34; data-img=&#34;/book/kubernetes-handbook/objects/pod-overview/pod-overview.png&#34; data-width=&#34;600&#34; data-height=&#34;400&#34; alt=&#34;image&#34; data-caption=&#34;Pod 示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Pod 示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Pod 中可以共享两种资源：网络和存储。&lt;/p&gt;
&lt;h4 id=&#34;网络&#34;&gt;网络&lt;/h4&gt;
&lt;p&gt;每个 Pod 都会被分配一个唯一的 IP 地址。Pod 中的所有容器共享网络空间，包括 IP 地址和端口。Pod 内部的容器可以使用 &lt;code&gt;localhost&lt;/code&gt; 互相通信。Pod 中的容器与外界通信时，必须分配共享网络资源（例如使用宿主机的端口映射）。&lt;/p&gt;
&lt;h4 id=&#34;存储&#34;&gt;存储&lt;/h4&gt;
&lt;p&gt;可以为一个 Pod 指定多个共享的 Volume。Pod 中的所有容器都可以访问共享的 volume。Volume 也可以用来持久化 Pod 中的存储资源，以防容器重启后文件丢失。&lt;/p&gt;
&lt;h2 id=&#34;使用-pod&#34;&gt;使用 Pod&lt;/h2&gt;
&lt;p&gt;你很少会直接在 Kubernetes 中创建单个 Pod。因为 Pod 的生命周期是短暂的，用后即焚的实体。当 Pod 被创建后（不论是由你直接创建还是被其他 Controller），都会被 Kubernetes 调度到集群的 Node 上。直到 Pod 的进程终止、被删掉、因为缺少资源而被驱逐、或者 Node 故障之前这个 Pod 都会一直保持在那个 Node 上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：重启 Pod 中的容器跟重启 Pod 不是一回事。Pod 只提供容器的运行环境并保持容器的运行状态，重启容器不会造成 Pod 重启。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Pod 不会自愈。如果 Pod 运行的 Node 故障，或者是调度器本身故障，这个 Pod 就会被删除。同样的，如果 Pod 所在 Node 缺少资源或者 Pod 处于维护状态，Pod 也会被驱逐。Kubernetes 使用更高级的称为 Controller 的抽象层，来管理 Pod 实例。虽然可以直接使用 Pod，但是在 Kubernetes 中通常是使用 Controller 来管理 Pod 的。&lt;/p&gt;
&lt;h3 id=&#34;pod-和-controller&#34;&gt;Pod 和 Controller&lt;/h3&gt;
&lt;p&gt;Controller 可以创建和管理多个 Pod，提供副本管理、滚动升级和集群级别的自愈能力。例如，如果一个 Node 故障，Controller 就能自动将该节点上的 Pod 调度到其他健康的 Node 上。&lt;/p&gt;
&lt;p&gt;包含一个或者多个 Pod 的 Controller 示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../controllers/deployment&#34; title=&#34;Deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../controllers/statefulset&#34; title=&#34;StatefulSet&#34;&gt;StatefulSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../controllers/daemonset&#34; title=&#34;DaemonSet&#34;&gt;DaemonSet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，Controller 会用你提供的 Pod Template 来创建相应的 Pod。&lt;/p&gt;
&lt;h2 id=&#34;pod-templates&#34;&gt;Pod Templates&lt;/h2&gt;
&lt;p&gt;Pod 模版是包含了其他 object 的 Pod 定义，例如 &lt;a href=&#34;../replicaset&#34; title=&#34;Replication Controllers&#34;&gt;Replication Controllers&lt;/a&gt;，&lt;a href=&#34;../job&#34; title=&#34;Jobs&#34;&gt;Jobs&lt;/a&gt; 和 &lt;a href=&#34;../daemonset&#34; title=&#34;DaemonSets&#34;&gt;DaemonSets&lt;/a&gt;。Controller 根据 Pod 模板来创建实际的 Pod。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Pod 解析</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/objects/pod/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-handbook/objects/pod/</guid>
      <description>
        
        
        &lt;p&gt;Pod 是 Kubernetes 中可以创建的最小部署单元，也是 Kubernetes REST API 中的顶级资源类型。&lt;/p&gt;
&lt;p&gt;在 Kuberentes V1 core API 版本中的 Pod 的数据结构如下图所示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod/kubernetes-pod-cheatsheet_hu_e8d7e8c15490e57c.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod/kubernetes-pod-cheatsheet.png&#34; data-img=&#34;/book/kubernetes-handbook/objects/pod/kubernetes-pod-cheatsheet.png&#34; data-width=&#34;3695&#34; data-height=&#34;5188&#34; alt=&#34;image&#34; data-caption=&#34;Pod Cheatsheet&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Pod Cheatsheet&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;什么是-pod&#34;&gt;什么是 Pod？&lt;/h2&gt;
&lt;p&gt;Pod 就像是豌豆荚一样，它由一个或者多个容器组成（例如 Docker 容器），它们共享容器存储、网络和容器运行配置项。Pod 中的容器总是被同时调度，有共同的运行环境。你可以把单个 Pod 想象成是运行独立应用的“逻辑主机”—— 其中运行着一个或者多个紧密耦合的应用容器 —— 在有容器之前，这些应用都是运行在几个相同的物理机或者虚拟机上。&lt;/p&gt;
&lt;p&gt;尽管 kubernetes 支持多种容器运行时，但是 Docker 依然是最常用的运行时环境，我们可以使用 Docker 的术语和规则来定义 Pod。&lt;/p&gt;
&lt;p&gt;Pod 中共享的环境包括 Linux 的 namespace、cgroup 和其他可能的隔绝环境，这一点跟 Docker 容器一致。在 Pod 的环境中，每个容器中可能还有更小的子隔离环境。&lt;/p&gt;
&lt;p&gt;Pod 中的容器共享 IP 地址和端口号，它们之间可以通过 &lt;code&gt;localhost&lt;/code&gt; 互相发现。它们之间可以通过进程间通信，例如 &lt;a href=&#34;https://en.wikipedia.org/wiki/UNIX_System_V&#34; title=&#34;SystemV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SystemV&lt;/a&gt; 信号或者 POSIX 共享内存。不同 Pod 之间的容器具有不同的 IP 地址，不能直接通过 IPC 通信。&lt;/p&gt;
&lt;p&gt;Pod 中的容器也有访问共享 volume 的权限，这些 volume 会被定义成 pod 的一部分并挂载到应用容器的文件系统中。&lt;/p&gt;
&lt;p&gt;根据 Docker 的结构，Pod 中的容器共享 namespace 和 volume，不支持共享 PID 的 namespace。&lt;/p&gt;
&lt;p&gt;就像每个应用容器，pod 被认为是临时（非持久的）实体。在 Pod 的生命周期中讨论过，pod 被创建后，被分配一个唯一的 ID（UID），调度到节点上，并一致维持期望的状态直到被终结（根据重启策略）或者被删除。如果 node 死掉了，分配到了这个 node 上的 pod，在经过一个超时时间后会被重新调度到其他 node 节点上。一个给定的 pod（如 UID 定义的）不会被“重新调度”到新的节点上，而是被一个同样的 pod 取代，如果期望的话甚至可以是相同的名字，但是会有一个新的 UID。&lt;/p&gt;
&lt;p&gt;临时卷的生命周期跟 pod 相同，当 Pod 因为某种原因被删除或者被新创建的相同的 pod 取代时，pod 的附属物（例如 volume）也会被销毁和重新创建。Kubernetes 中提供了众多的卷类型，关于卷（Volume）的详细介绍请参考 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/storage/volumes/&#34; title=&#34;Kubernetes 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod/pod-overview_hu_9224bf94f1adc905.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod/pod-overview.png&#34; data-img=&#34;/book/kubernetes-handbook/objects/pod/pod-overview.png&#34; data-width=&#34;600&#34; data-height=&#34;400&#34; alt=&#34;image&#34; data-caption=&#34;Pod 示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Pod 示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;说明：一个多容器 Pod，包含文件提取程序和 Web 服务器，该服务器使用持久卷在容器之间共享存储。&lt;/p&gt;
&lt;h2 id=&#34;pod-的动机&#34;&gt;Pod 的动机&lt;/h2&gt;
&lt;h3 id=&#34;管理&#34;&gt;管理&lt;/h3&gt;
&lt;p&gt;Pod 是一个服务的多个进程的聚合单位，pod 提供这种模型能够简化应用部署管理，通过提供一个更高级别的抽象的方式。Pod 作为一个独立的部署单位，支持横向扩展和复制。共生（协同调度），命运共同体（例如被终结），协同复制，资源共享，依赖管理，pod 都会自动的为容器处理这些问题。&lt;/p&gt;
&lt;h3 id=&#34;资源共享和通信&#34;&gt;资源共享和通信&lt;/h3&gt;
&lt;p&gt;Pod 中的应用可以共享网络空间（IP 地址和端口），因此可以通过 &lt;code&gt;localhost&lt;/code&gt; 互相发现。因此，pod 中的应用必须协调端口占用。每个 pod 都有一个唯一的 IP 地址，跟物理机和其他 pod 都处于一个扁平的网络空间中，它们之间可以直接连通。&lt;/p&gt;
&lt;p&gt;Pod 中应用容器的 hostname 被设置成 Pod 的名字。&lt;/p&gt;
&lt;p&gt;Pod 中的应用容器可以共享卷。持久化卷能够保证 pod 重启时使用的数据不丢失。&lt;/p&gt;
&lt;h2 id=&#34;pod-的使用&#34;&gt;Pod 的使用&lt;/h2&gt;
&lt;p&gt;Pod 也可以用于垂直应用栈（例如 LAMP），这样使用的主要动机是为了支持共同调度和协调管理应用程序，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容管理系统、文件和数据加载器、本地换群管理器等。&lt;/li&gt;
&lt;li&gt;日志和检查点备份、压缩、旋转、快照等。&lt;/li&gt;
&lt;li&gt;数据变更观察者、日志和监控适配器、活动发布者等。&lt;/li&gt;
&lt;li&gt;代理、桥接和适配器等。&lt;/li&gt;
&lt;li&gt;控制器、管理器、配置器、更新器等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常单个 pod 中不会同时运行一个应用的多个实例。&lt;/p&gt;
&lt;p&gt;详细说明请看： &lt;a href=&#34;https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/&#34; title=&#34;The Distributed System ToolKit: Patterns for Composite Containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Distributed System ToolKit: Patterns for Composite Containers&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;其他替代选择&#34;&gt;其他替代选择&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;为什么不直接在一个容器中运行多个应用程序呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;透明。让 pod 中的容器对基础设施可见，以便基础设施能够为这些容器提供服务，例如进程管理和资源监控。这可以为用户带来极大的便利。&lt;/li&gt;
&lt;li&gt;解耦软件依赖。每个容器都可以进行版本管理，独立的编译和发布。未来 kubernetes 甚至可能支持单个容器的在线升级。&lt;/li&gt;
&lt;li&gt;使用方便。用户不必运行自己的进程管理器，还要担心错误信号传播等。&lt;/li&gt;
&lt;li&gt;效率。因为由基础架构提供更多的职责，所以容器可以变得更加轻量级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么不支持容器的亲和性的协同调度？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方法可以提供容器的协同定位，能够根据容器的亲和性进行调度，但是无法实现使用 pod 带来的大部分好处，例如资源共享，IPC，保持状态一致性和简化管理等。&lt;/p&gt;
&lt;h2 id=&#34;pod-的持久性或者说缺乏持久性&#34;&gt;Pod 的持久性（或者说缺乏持久性）&lt;/h2&gt;
&lt;p&gt;Pod 在设计支持就不是作为持久化实体的。在调度失败、节点故障、缺少资源或者节点维护的状态下都会死掉会被驱逐。&lt;/p&gt;
&lt;p&gt;通常，用户不需要手动直接创建 Pod，而是应该使用 controller（例如 &lt;a href=&#34;../deployment&#34; title=&#34;Deployments&#34;&gt;Deployments&lt;/a&gt;），即使是在创建单个 Pod 的情况下。Controller 可以提供集群级别的自愈功能、复制和升级管理。&lt;/p&gt;
&lt;p&gt;使用集合 API 作为主要的面向用户的原语在集群调度系统中相对常见，包括 &lt;a href=&#34;https://research.google.com/pubs/pub43438.html&#34; title=&#34;Borg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borg&lt;/a&gt;、&lt;a href=&#34;https://mesosphere.github.io/marathon/docs/rest-api.html&#34; title=&#34;Marathon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Marathon&lt;/a&gt;、&lt;a href=&#34;https://aurora.apache.org/documentation/latest/reference/configuration/#job-schema&#34; title=&#34;Aurora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aurora&lt;/a&gt; 和 &lt;a href=&#34;https://www.slideshare.net/Docker/aravindnarayanan-facebook140613153626phpapp02-37588997&#34; title=&#34;Tupperware&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tupperware&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Pod 原语有利于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度程序和控制器可插拔性&lt;/li&gt;
&lt;li&gt;支持 pod 级操作，无需通过控制器 API“代理”它们&lt;/li&gt;
&lt;li&gt;将 pod 生命周期与控制器生命周期分离，例如用于自举（bootstrap）&lt;/li&gt;
&lt;li&gt;控制器和服务的分离 —— 端点控制器只是监视 pod&lt;/li&gt;
&lt;li&gt;将集群级功能与 Kubelet 级功能的清晰组合 ——Kubelet 实际上是“pod 控制器”&lt;/li&gt;
&lt;li&gt;高可用性应用程序，它们可以在终止之前及在删除之前更换 pod，例如在计划驱逐、镜像预拉取或实时 pod 迁移的情况下，详见&lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/3949&#34; title=&#34;Issue #3949&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Issue #3949&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;../statefulset&#34; title=&#34;StatefulSet&#34;&gt;StatefulSet&lt;/a&gt; 控制器支持有状态的 Pod。在 1.4 版本中被称为 PetSet。在 kubernetes 之前的版本中创建有状态 pod 的最佳方式是创建一个 replica 为 1 的 replication controller。&lt;/p&gt;
&lt;h2 id=&#34;pod-的终止&#34;&gt;Pod 的终止&lt;/h2&gt;
&lt;p&gt;因为 pod 作为在集群的节点上运行的进程，所以在不再需要的时候能够优雅的终止掉是十分必要的（比起使用发送 KILL 信号这种暴力的方式）。用户需要能够发起一个删除 Pod 的请求，并且知道它们何时会被终止，是否被正确的删除。用户想终止程序时发送删除 pod 的请求，在 pod 可以被强制删除前会有一个宽限期，会发送一个 TERM 请求到每个容器的主进程。一旦超时，将向主进程发送 KILL 信号并从 API server 中删除。如果 kubelet 或者 container manager 在等待进程终止的过程中重启，在重启后仍然会重试完整的宽限期。&lt;/p&gt;
&lt;p&gt;示例流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户发送删除 pod 的命令，默认宽限期是 30 秒；&lt;/li&gt;
&lt;li&gt;在 Pod 超过该宽限期后 API server 就会更新 Pod 的状态为“dead”；&lt;/li&gt;
&lt;li&gt;在客户端命令行上显示的 Pod 状态为“terminating”；&lt;/li&gt;
&lt;li&gt;跟第三步同时，当 kubelet 发现 pod 被标记为“terminating”状态时，开始停止 pod 进程：
&lt;ol&gt;
&lt;li&gt;如果在 pod 中定义了 preStop hook，在停止 pod 前会被调用。如果在宽限期过后，preStop hook 依然在运行，第二步会再增加 2 秒的宽限期；&lt;/li&gt;
&lt;li&gt;向 Pod 中的进程发送 TERM 信号；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;跟第三步同时，该 Pod 将从该 service 的端点列表中删除，不再是 replication controller 的一部分。关闭的慢的 pod 将继续处理 load balancer 转发的流量；&lt;/li&gt;
&lt;li&gt;过了宽限期后，将向 Pod 中依然运行的进程发送 SIGKILL 信号而杀掉进程。&lt;/li&gt;
&lt;li&gt;Kubelet 会在 API server 中完成 Pod 的的删除，通过将优雅周期设置为 0（立即删除）。Pod 在 API 中消失，并且在客户端也不可见。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除宽限期默认是 30 秒。 &lt;code&gt;kubectl delete&lt;/code&gt; 命令支持 &lt;code&gt;—grace-period=&amp;lt;seconds&amp;gt;&lt;/code&gt; 选项，允许用户设置自己的宽限期。如果设置为 0 将强制删除 pod。在 kubectl&amp;gt;=1.5 版本的命令中，你必须同时使用 &lt;code&gt;--force&lt;/code&gt; 和 &lt;code&gt;--grace-period=0&lt;/code&gt; 来强制删除 pod。在 yaml 文件中可以通过 &lt;code&gt;{{ .spec.spec.terminationGracePeriodSeconds }}&lt;/code&gt; 来修改此值。&lt;/p&gt;
&lt;h3 id=&#34;强制删除-pod&#34;&gt;强制删除 Pod&lt;/h3&gt;
&lt;p&gt;Pod 的强制删除是通过在集群和 etcd 中将其定义为删除状态。当执行强制删除命令时，API server 不会等待该 pod 所运行在节点上的 kubelet 确认，就会立即将该 pod 从 API server 中移除，这时就可以创建跟原 pod 同名的 pod 了。这时，在节点上的 pod 会被立即设置为 terminating 状态，不过在被强制删除之前依然有一小段优雅删除周期。&lt;/p&gt;
&lt;p&gt;强制删除对于某些 pod 具有潜在危险性，请谨慎使用。使用 StatefulSet pod 的情况下，请参考删除 StatefulSet 中的 pod 文章。&lt;/p&gt;
&lt;h2 id=&#34;pod-中容器的特权模式&#34;&gt;Pod 中容器的特权模式&lt;/h2&gt;
&lt;p&gt;从 Kubernetes1.1 版本开始，pod 中的容器就可以开启 privileged 模式，在容器定义文件的 &lt;code&gt;SecurityContext&lt;/code&gt; 下使用 &lt;code&gt;privileged&lt;/code&gt; flag。这在使用 Linux 的网络操作和访问设备的能力时是很有用的。容器内进程可获得近乎等同于容器外进程的权限。在不需要修改和重新编译 kubelet 的情况下就可以使用 pod 来开发节点的网络和存储插件。&lt;/p&gt;
&lt;p&gt;如果 master 节点运行的是 kuberentes1.1 或更高版本，而 node 节点的版本低于 1.1 版本，则 API server 将也可以接受新的特权模式的 pod，但是无法启动，pod 将处于 pending 状态。&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl describe pod FooPodName&lt;/code&gt;，可以看到为什么 pod 处于 pending 状态。输出的 event 列表中将显示： &lt;code&gt;Error validating pod &amp;quot;FooPodName&amp;quot;.&amp;quot;FooPodNamespace&amp;quot; from api, ignoring: spec.containers[0].securityContext.privileged: forbidden &#39;&amp;lt;*&amp;gt;(0xc2089d3248)true&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果 master 节点的版本低于 1.1，无法创建特权模式的 pod。如果你仍然试图去创建的话，你得到如下错误：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;The Pod &amp;#34;FooPodName&amp;#34; is invalid. spec.containers[0].securityContext.privileged: forbidden &amp;#39;&amp;lt;*&amp;gt;(0xc20b222db0)true&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
                           
    <item>
      <title>附录 B：只读文件系统的部署模板示例</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/b/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/appendix/b/</guid>
      <description>
        
        
        &lt;p&gt;下面是一个使用只读根文件系统的 Kubernetes 部署模板的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sleep&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;999&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#使容器的文件系统成为只读&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/writeable/location/here&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#创建一个可写卷&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;volName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;volName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 网络</title>
    <link>https://jimmysong.io/tags/%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 网络 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 24 Jul 2024 11:07:40 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>微分段安全技术解析：云原生环境下的零信任实践</title>
      <link>https://jimmysong.io/trans/what-is-microsegmentation/</link>
      <pubDate>Wed, 24 Jul 2024 11:07:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/trans/what-is-microsegmentation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;什么是微分段&#34;&gt;什么是微分段？&lt;/h2&gt;
&lt;p&gt;微分段（Microsegmentation）是一种网络安全管理方法，它通过将网络划分为多个小段，并根据各段的安全需求应用安全控制，从而管理工作负载间的网络访问权限。这种方法结合了&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-least-privilege-access&#34; title=&#34;最小权限原则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小权限原则&lt;/a&gt;和&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-a-zero-trust-architecture&#34; title=&#34;零信任架构&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任架构&lt;/a&gt;，让管理员可以精确管理安全策略，限制流量，有效减少攻击面，加强数据泄露的防护，并增强合规性。&lt;/p&gt;
&lt;h3 id=&#34;微分段的工作原理&#34;&gt;微分段的工作原理&lt;/h3&gt;
&lt;p&gt;微分段通过网络虚拟化技术，在云部署中创建安全区域，这些小的安全区可以隔离&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-workload&#34; title=&#34;工作负载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;工作负载&lt;/a&gt;，并为每个工作负载定制安全策略。这种粒度级的安全控制对于运行多个应用的现代云环境至关重要。企业可以为每个工作负载和应用程序单独应用安全控制，而不是采用针对服务器的统一安全策略。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-microsegmentation/microsegmentation_hu588d2bf7f9aa501ff5e9fb616147ae26_102742_1920x1080_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/microsegmentation.jpg&#34; data-img=&#34;/trans/what-is-microsegmentation/microsegmentation.jpg&#34; data-width=&#34;1920&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;图 1: 微分段通过零信任框架限制流量，将网络划分为多个小段。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1: 微分段通过零信任框架限制流量，将网络划分为多个小段。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;工作负载的定义&#34;&gt;工作负载的定义&lt;/h3&gt;
&lt;p&gt;工作负载广泛地定义为运行应用程序所需的资源和过程。主机、虚拟机和容器是几种常见的工作负载形式。公司可以在数据中心、混合云和多云环境中运行工作负载，而随着应用程序越来越多地部署在不同的云原生计算架构上，这种分布式趋势根据业务需求不断加速。&lt;/p&gt;
&lt;h2 id=&#34;超越边界安全&#34;&gt;超越边界安全&lt;/h2&gt;
&lt;p&gt;边界安全是大多数组织网络安全控制的重要部分。网络安全设备，如网络防火墙，会检查穿越安全边界的“南北”（客户端到服务器）流量，并阻止恶意流量。边界内的资产被隐含信任，意味着“东西”（工作负载间）的流量可能未经检查。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-1_hu49bdd444e569ad9356ee1d7059a09399_25668_868x488_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-1.jpg&#34; data-img=&#34;/trans/what-is-microsegmentation/what-is-microsegmentation-img-1.jpg&#34; data-width=&#34;868&#34; data-height=&#34;488&#34; alt=&#34;image&#34; data-caption=&#34;图 2: “南北”与“东西”流量示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2: “南北”与“东西”流量示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;对于大多数组织来说，东西向通信占据了数据中心和云流量模式的大部分，而基于边界的防御对东西向流量缺乏可见性。考虑到这些因素，恶意行为者可能利用这一点，在工作负载间横向移动。&lt;/p&gt;
&lt;p&gt;网络在工作负载间创建可靠的路径，并决定两个端点是否可以相互访问。微分段则通过创建隔离来决定两个端点是否应该相互访问。通过最小权限访问的强制实施，微分段减少了横向移动的范围，并包含数据泄露。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img2.gif&#34; data-img=&#34;/trans/what-is-microsegmentation/what-is-microsegmentation-img2.gif&#34; data-width=&#34;512&#34; data-height=&#34;271&#34; alt=&#34;image&#34; data-caption=&#34;图 3: 微分段可以帮助你隔离攻击。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 3: 微分段可以帮助你隔离攻击。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;网络分段的挑战&#34;&gt;网络分段的挑战&lt;/h2&gt;
&lt;p&gt;网络分段是一种将网络划分为多个小的子网的方法，这不仅有助于提升性能，还能增强安全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能：&lt;/strong&gt; 将网络划分为较小的子网和 VLAN 可以减少广播数据包的范围，从而提高网络性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全：&lt;/strong&gt; 网络安全团队可以将访问控制列表（ACL）应用于 VLAN 和子网，隔离不同网络段上的机器。如果发生数据泄露，ACL 可以防止威胁扩散到其他网络段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用网络分段进行安全管理存在挑战。分段需求并不总是与网络架构相匹配。重新架构网络或重新配置 VLAN 和子网以满足分段要求既困难又耗时。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-3_huaed26c6b68adcb70bcc6c94fc6c02596_50459_868x488_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/what-is-microsegmentation/what-is-microsegmentation-img-3.jpg&#34; data-img=&#34;/trans/what-is-microsegmentation/what-is-microsegmentation-img-3.jpg&#34; data-width=&#34;868&#34; data-height=&#34;488&#34; alt=&#34;image&#34; data-caption=&#34;网络分段 - 使用 VLAN 和子网 - 是通过打破网络广播域来提供最佳网络性能的一种方法&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;网络分段 - 使用 VLAN 和子网 - 是通过打破网络广播域来提供最佳网络性能的一种方法&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;em&gt;图 4: 网络分段 - 使用 VLAN 和子网 - 是通过打破网络广播域来提供最佳网络性能的一种方法。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;微分段的工作方式&#34;&gt;微分段的工作方式&lt;/h2&gt;
&lt;p&gt;微分段，也被称为零信任或基于身份的分段，不需要重新架构就可以满足分段要求。安全团队可以在网络中隔离工作负载，限制恶意横向移动的影响。微分段控制可以分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于代理的&lt;/strong&gt;解决方案在工作负载上使用软件代理，并实施粒度隔离至单个主机和容器。基于代理的解决方案可能利用内置的基于主机的防火墙，或根据工作负载的身份或属性实现隔离能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于网络的&lt;/strong&gt;分段控制依赖于网络基础设施。这种方式利用物理和虚拟设备，如负载均衡器、交换机、软件定义网络（SDN）和覆盖网络来执行策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云原生控制&lt;/strong&gt;利用嵌入在云服务提供商中的功能（例如，Amazon 安全组、Azure 防火墙或 Google Cloud 防火墙）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微分段通过三个关键原则提供一致的安全性：可见性、粒度安全和动态适应。&lt;/p&gt;
&lt;p&gt;一个微分段解决方案应该提供对所有网络流量的可见性，无论是在数据中心内部还是跨云流量。虽然监控流量的方式有很多，但最有效的方法是能够看到与工作负载上下文（例如，云、应用、编排器）相关联的流量，而不仅仅是包含 IP 地址和端口的日志。&lt;/p&gt;
&lt;p&gt;粒度安全意味着网络管理员可以通过为关键应用程序创建特定策略来加强和精确安全。其目标是通过精确控制特定工作负载的进出流量（例如，每周的工资运行或人力资源数据库的更新），防止威胁的横向移动。&lt;/p&gt;
&lt;p&gt;微分段为动态环境提供保护。例如，云原生架构如容器和 Kubernetes 可以在几秒钟内启动并关闭。分配给云工作负载的 IP 地址是短暂的，使基于 IP 的规则管理成为不可能。在微分段中，安全策略以身份或属性（env=prod, app=hrm 等）而不是网络构造（例如，10.100.0.10 tcp/80）的形式表达。应用或基础设施的更改会触发安全策略的实时自动修订，无需人工干预。&lt;/p&gt;
&lt;h2 id=&#34;微分段的类型&#34;&gt;微分段的类型&lt;/h2&gt;
&lt;p&gt;微分段为动态环境提供保护。例如，云原生架构如&lt;a href=&#34;https://www.paloaltonetworks.com/cyberpedia/what-is-a-container&#34; title=&#34;容器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器&lt;/a&gt;和 Kubernetes 可以在几秒钟内启动并关闭。分配给云工作负载的 IP 地址是短暂的，使得基于 IP 的规则管理成为不可能。在微分段中，安全策略以身份或属性（env=prod, app=hrm 等）而不是网络构造（例如，10.100.0.10 tcp/80）的形式表达。应用或基础设施的变化会触发安全策略的实时自动修订，无需人工干预。&lt;/p&gt;
&lt;h3 id=&#34;容器分段&#34;&gt;容器分段&lt;/h3&gt;
&lt;p&gt;容器分段涉及将容器从彼此及宿主系统隔离开来，以提高安全性并减少攻击面。容器化是一种广泛使用的技术，允许在单个宿主系统上的不同容器中运行多个应用程序或服务。如果没有适当的分段，容器可能会访问彼此的数据和配置文件，这可能导致安全漏洞。&lt;/p&gt;
&lt;h4 id=&#34;容器分段的最佳实践&#34;&gt;容器分段的最佳实践&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;容器隔离：&lt;/strong&gt; 每个容器应从运行在同一宿主系统上的其他容器中隔离开来，以防止未授权访问。这可以通过使用 Docker 和 Kubernetes 等提供内置隔离机制的容器技术来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络分段：&lt;/strong&gt; 可以使用网络分段技术将容器彼此分开。这涉及为每个容器创建独立的网络，并配置防火墙规则以允许或拒绝容器之间的流量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于角色的访问控制：&lt;/strong&gt; 可以使用基于角色的访问控制（RBAC）定义不同容器的访问策略，根据用户角色和权限进行管理。这有助于确保容器只被授权的用户和过程访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;镜像签名：&lt;/strong&gt; 容器镜像可以进行数字签名，以确保只有经过验证的镜像才能在生产环境中部署。这有助于防止容器镜像被篡改或修改，从而减少安全漏洞的风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行时保护：&lt;/strong&gt; 运行时保护工具可以用来监控容器活动并检测可能表明安全漏洞的异常行为。这些工具有助于实时检测和防止攻击，提高容器化环境的安全态势。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器分段有助于确保容器化应用程序和服务的安全。通过隔离容器并应用访问控制策略，组织可以减少攻击面，并防止未授权访问敏感数据和资源。容器分段应作为整体安全策略的一部分实施，包括网络安全、访问控制和运行时保护。&lt;/p&gt;
&lt;h3 id=&#34;云安全中的用户分段&#34;&gt;云安全中的用户分段&lt;/h3&gt;
&lt;p&gt;云安全中的用户分段涉及根据组织内不同角色和职责划分用户访问权限，以确保用户只能访问其工作功能所需的资源。用户分段通过限制敏感数据和资源的暴露范围，仅限于授权用户，从而减少攻击面。&lt;/p&gt;
&lt;p&gt;由于云环境的动态性和快速变化，用户分段是全面云安全策略的关键组成部分。以下是云安全中用户分段的一些关键考虑因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于角色的访问控制（RBAC）：&lt;/strong&gt; RBAC 涉及创建和定义角色的权限，然后根据工作职能将用户分配到适当的角色。这种方法确保用户只能访问其工作功能所需的资源，减少意外或故意数据泄露的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多因素认证（MFA）：&lt;/strong&gt; MFA 要求用户提供多种形式的认证才能访问资源。这可能包括密码、安全令牌或生物识别数据。MFA 是一种有效的方法，特别是与 RBAC 结合使用时，可以防止未授权访问云资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续监控：&lt;/strong&gt; 持续监控用户活动对于实时检测和响应安全事件至关重要。这涉及分析日志数据和用户行为，以识别威胁和漏洞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;职责分离：&lt;/strong&gt; 职责分离涉及在多个用户之间划分责任，以防止任何单一用户对系统或过程拥有过多控制权。这有助于降低欺诈或错误的风险，并确保敏感操作由多个用户执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定期访问审查：&lt;/strong&gt; 定期访问审查涉及定期审查用户访问权限和权限，以确保它们仍然是必需的。访问审查有助于识别和移除不必要的访问权限，减少未授权访问的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过实施 RBAC、MFA、持续监控、职责分离和定期访问审查，组织可以增强其云安全态势，保护免受不断变化的威胁影响。&lt;/p&gt;
&lt;h2 id=&#34;微分段的益处&#34;&gt;微分段的益处&lt;/h2&gt;
&lt;p&gt;采用微分段的组织能够实现具体的益处，具体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;减少攻击面&lt;/strong&gt;：微分段提供了对完整网络环境的可见性，不会延缓开发或创新的速度。应用开发人员可以在开发周期早期集成安全策略定义，确保应用部署或更新不会产生新的攻击向量。这在快速发展的 DevOps 世界中尤为重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改善数据泄露的防护&lt;/strong&gt;：微分段使安全团队能够根据预定义的策略监控网络流量，同时缩短对数据泄露的响应和修复时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加强监管合规性&lt;/strong&gt;：利用微分段，监管官员可以创建政策，将受监管系统从基础设施的其余部分隔离开来。精细控制与受监管系统的通信，降低非合规使用的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化策略管理&lt;/strong&gt;：转向微分段网络或零信任安全模型提供了简化策略管理的机会。一些微分段解决方案提供自动应用发现和基于学习的应用行为的策略建议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;微分段的应用案例&#34;&gt;微分段的应用案例&lt;/h2&gt;
&lt;p&gt;微分段的应用范围广泛且日益增长。以下是一些代表性的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发与生产系统&lt;/strong&gt;：在最佳情况下，组织会仔细区分开发和测试环境与生产系统。然而，这些措施可能无法阻止疏忽行为，如开发人员为测试目的从生产数据库取用客户信息。微分段可以通过精细地限制两个环境之间的连接来强制执行更严格的分离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保护软资产&lt;/strong&gt;：公司有巨大的财务和声誉动机来保护“软”资产，如机密的客户和员工信息、知识产权和公司财务数据。微分段为防止数据外泄和其他恶意行为提供了额外的安全级别，这些行为可能导致停机并干扰业务运营。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云管理&lt;/strong&gt;：微分段可以为跨多个云的应用程序提供无缝的保护，并在由多个数据中心和云服务提供商组成的混合环境中实施统一的安全策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件响应&lt;/strong&gt;：如前所述，微分段限制了威胁的横向移动和泄露的影响。此外，微分段解决方案提供的日志信息有助于事件响应团队更好地理解攻击策略，并通过遥测数据帮助确定特定应用程序的政策违规情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;微分段常见问题解答&#34;&gt;微分段常见问题解答&lt;/h2&gt;
&lt;h3 id=&#34;网络分段与微分段有何不同&#34;&gt;网络分段与微分段有何不同？&lt;/h3&gt;
&lt;p&gt;虽然网络分段和微分段都有助于提升网络安全和性能，但它们在基础上有所不同。传统的网络分段侧重于进出网络的南北流量，并使用 VLAN、防火墙、路由器等设备实施。这些设备可以配置来执行网络层面的安全策略，如访问控制列表（ACL）或防火墙规则。&lt;/p&gt;
&lt;p&gt;另一方面，微分段侧重于东西流量，通常使用基于软件的安全解决方案实施，如基于虚拟机的防火墙或端点保护平台（EPP）。微分段在个别工作负载或应用层面而非网络层面应用安全策略。&lt;/p&gt;
&lt;h3 id=&#34;什么是防火墙策略&#34;&gt;什么是防火墙策略？&lt;/h3&gt;
&lt;p&gt;防火墙策略定义了组织的防火墙应如何处理针对某些 IP 地址和地址范围的进出网络流量。策略可能关注用户身份、网络活动和应用程序，以及 IP 地址。&lt;/p&gt;
&lt;h3 id=&#34;什么是虚拟网络&#34;&gt;什么是虚拟网络？&lt;/h3&gt;
&lt;p&gt;虚拟网络使用软件连接计算机、虚拟机（VM）和服务器或虚拟服务器，与传统的物理网络不同，后者通过硬件和电缆固定在特定位置。&lt;/p&gt;
&lt;h3 id=&#34;什么是应用依赖&#34;&gt;什么是应用依赖？&lt;/h3&gt;
&lt;p&gt;应用依赖是指软件、应用程序、服务器和其他组件相互依赖以执行其功能的情况。为确保服务不间断，应在将组件迁移到云、移到新的云环境或实施微分段之前绘制应用依赖关系图。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>电子书：Kubernetes 网络和 Cilium 网络工程师指南</title>
      <link>https://jimmysong.io/blog/ebook-cilium-for-network-engineer/</link>
      <pubDate>Mon, 29 Apr 2024 09:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/ebook-cilium-for-network-engineer/</guid>
      <description>
        
        
        &lt;p&gt;亲爱的云原生社区的朋友们，我很高兴向大家推荐 Isovalent 最新推出的电子书《&lt;a href=&#34;https://isovalent.com/blog/post/introducing-the-new-kubernetes-networking-and-cilium-for-the-network-engineer-ebook/&#34; title=&#34;Kubernetes 网络和 Cilium 网络工程师指南（英文原版）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 网络和 Cilium 网络工程师指南（英文原版）&lt;/a&gt;》。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    &lt;img src=&#34;https://jimmysong.io/img/blog/ebook-cilium-for-network-engineer/cover.webp&#34; data-img=&#34;https://jimmysong.io/img/blog/ebook-cilium-for-network-engineer/cover.webp&#34; alt=&#34;image&#34; data-caption=&#34;《Kubernetes 网络和 Cilium 网络工程师指南》电子书封面&#34;&gt;
  
  
  &lt;figcaption&gt;《Kubernetes 网络和 Cilium 网络工程师指南》电子书封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;作为一名资深的云原生倡导者，我深知 Kubernetes 网络对于网络工程师来说是一个巨大的挑战。但是，随着 Kubernetes 在企业中的广泛应用，学习 Kubernetes 网络知识已经变得非常重要和紧迫。这本电子书正是为了帮助网络工程师们克服这些挑战而诞生的。&lt;/p&gt;
&lt;p&gt;这本 56 页的电子书由 &lt;em&gt;Isovalent 的 Senior Staff Technical Marketing Engineer&lt;/em&gt; Nico Vibert 撰写，内容涵盖了 Kubernetes 网络的方方面面，包括 Cilium 这个事实上的 Kubernetes 网络层。即使你不是网络工程师，相信你也能轻松理解和学习这本书的内容。&lt;/p&gt;
&lt;p&gt;这本电子书就像一本使用说明手册，为网络工程师们提供了一个循序渐进的学习路径。从 Kubernetes 网络的基础知识，到 Cilium 的高级功能，再到实际的部署和运维，应有尽有。相信这本书一定会成为网络工程师学习 Kubernetes 网络的必备资料。&lt;/p&gt;
&lt;p&gt;根据这本由 Isovalent 推出的电子书《Kubernetes Networking and Cilium: An Instruction Manual for the Network Engineer》的内容，我为大家总结了以下几点。&lt;/p&gt;
&lt;h2 id=&#34;本书亮点&#34;&gt;本书亮点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;全面介绍了 Kubernetes 网络的基础知识，包括容器网络接口 (CNI)、网络模型等，为网络工程师打下坚实的基础。&lt;/li&gt;
&lt;li&gt;深入探讨了 Cilium 这个事实上的 Kubernetes 网络层，详细讲解了它提供的各种功能，如路由、交换、负载均衡、防火墙、监控等。&lt;/li&gt;
&lt;li&gt;系统介绍了如何在 Kubernetes 中配置和管理网络，包括使用 kubectl 命令行工具、应用 YAML 配置文件等。&lt;/li&gt;
&lt;li&gt;重点阐述了 Cilium 的身份感知安全机制，以及如何使用网络策略进行精细化的网络访问控制。&lt;/li&gt;
&lt;li&gt;讲解了 Kubernetes 中的负载均衡机制，包括 ClusterIP、NodePort 和 Ingress 等服务类型。&lt;/li&gt;
&lt;li&gt;探讨了 Kubernetes 集群跨多个集群的联通方案，以及如何实现跨集群的负载均衡和安全策略。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;适读人群&#34;&gt;适读人群&lt;/h2&gt;
&lt;p&gt;这本电子书主要面向 Kubernetes 网络工程师，帮助他们全面掌握 Kubernetes 网络的方方面面知识。即使不是网络工程师，对云原生技术感兴趣的读者也能从中受益，学习 Kubernetes 网络的基础知识。&lt;/p&gt;
&lt;h2 id=&#34;中文版&#34;&gt;中文版&lt;/h2&gt;
&lt;p&gt;如果你想阅读该书的中文版，请访问&lt;a href=&#34;https://isovalent.com/books/kubernetes-networking-and-cilium-zh/&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;获取。中文版由 Isovalent 的黄力一翻译。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>深入解读 CNI：容器网络接口</title>
      <link>https://jimmysong.io/blog/cni-deep-dive/</link>
      <pubDate>Mon, 15 Apr 2024 13:54:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cni-deep-dive/</guid>
      <description>
        
        
        &lt;p&gt;在容器化环境中，有效管理网络是至关重要的。容器网络接口（CNI）是一个标准，定义了容器应如何配置网络。本文将深入探讨 CNI 的基础知识，并带你了解 CNI 与 CRI 的关系。&lt;/p&gt;
&lt;h2 id=&#34;what-is-cni&#34;&gt;什么是 CNI？&lt;/h2&gt;
&lt;p&gt;CNI（容器网络接口）规范为容器运行时和网络插件之间提供了一个通用的接口，旨在实现容器网络配置的标准化。&lt;/p&gt;
&lt;p&gt;CNI 规范包含以下几个核心组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络配置的格式&lt;/strong&gt;：定义了管理员如何定义网络配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求协议&lt;/strong&gt;：描述了容器运行时如何向网络插件发出网络配置或清理请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件执行过程&lt;/strong&gt;：详细阐述了插件如何根据提供的配置执行网络设置或清理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件委派&lt;/strong&gt;：允许插件将特定功能委托给其他插件执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果返回&lt;/strong&gt;：定义了插件执行完成后如何向运行时返回结果的数据格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNI 规范通过定义这些核心组成部分，确保了不同的容器运行时和网络插件能够以一致的方式进行交互，实现网络配置的自动化和标准化。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    CNI 规范的一些要点
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;CNI 是一个插件化的容器化网络解决方案&lt;/li&gt;
&lt;li&gt;CNI 插件为可执行文件&lt;/li&gt;
&lt;li&gt;单个 CNI 插件的职责是单一的&lt;/li&gt;
&lt;li&gt;CNI 插件是呈链式调用的&lt;/li&gt;
&lt;li&gt;CNI 规范为一个容器定义一个 Linux 网络命名空间&lt;/li&gt;
&lt;li&gt;CNI 的网络定义存储为 JSON 格式&lt;/li&gt;
&lt;li&gt;网络定义通过 STDIN 输入流传输到插件，这意味着宿主机上不会存储网络配置文件，其他的配置参数通过环境变量传递给插件&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CNI 插件根据操作类型，接收相应的网络配置参数，执行网络配置或清理任务，并返回执行结果。这一流程确保了容器网络的动态配置与容器生命周期的同步。&lt;/p&gt;
&lt;p&gt;下图展示了 CNI 包含了众多的网络插件。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/cdc38d55a4fc4468ab20df85ab63c2c7.svg&#34; data-img=&#34;/blog/cni-deep-dive/cdc38d55a4fc4468ab20df85ab63c2c7.svg&#34; alt=&#34;image&#34; data-caption=&#34;CNI 插件的种类&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CNI 插件的种类&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;根据 &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#section-2-execution-protocol&#34; title=&#34;CNI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 规范&lt;/a&gt;，一个 CNI 插件负责以某种方式配置容器的网络接口。插件可分为两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;接口&amp;quot;插件，负责在容器内部创建网络接口并确保其具有连通性。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;链式&amp;quot;插件，调整已创建接口的配置（但可能需要创建更多接口以完成此操作）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;relationship&#34;&gt;CNI 与 CRI 的关系&lt;/h2&gt;
&lt;p&gt;CNI 和 CRI（容器运行时接口）是 Kubernetes 中两个关键的接口，它们分别处理容器的网络配置和运行时管理。在 Kubernetes 集群中，CRI 调用 CNI 插件来配置或清理容器的网络，这确保了网络配置的过程与容器的创建和销毁过程紧密协调。&lt;/p&gt;
&lt;p&gt;下图直观地展示了 CNI 如何与 CRI 协同运行的：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/5451dd983a8c3858a265283d74b7536b.svg&#34; data-img=&#34;/blog/cni-deep-dive/5451dd983a8c3858a265283d74b7536b.svg&#34; alt=&#34;image&#34; data-caption=&#34;CNI 如何与 CRI 协同运行的&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CNI 如何与 CRI 协同运行的&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 CRI&lt;/strong&gt;：Kubelet 指示 CRI 创建已调度的 Pod 的容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI 到 Pod&lt;/strong&gt;：容器运行时在 Pod 中启动容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod 到 CRI&lt;/strong&gt;：一旦容器运行，它会向容器运行时发出信号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI 到 Kubelet&lt;/strong&gt;：容器运行时通知 Kubelet 容器已准备就绪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 CNI&lt;/strong&gt;：容器已启动，Kubelet 调用 CNI 为 Pod 设置网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI 到 Pod&lt;/strong&gt;：CNI 为 Pod 配置网络，将其连接到必要的网络接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod 到 CNI&lt;/strong&gt;：网络配置完成后，Pod 向 CNI 确认网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI 到 Kubelet&lt;/strong&gt;：CNI 通知 Kubelet Pod 的网络已准备就绪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 Pod&lt;/strong&gt;：现在 Pod 完全可操作，两个容器均已运行且网络已配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了在 Kubernetes 中为 Pod 设置网络所涉及的详细步骤：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/4f3017abf23385a5007302ea17241bdf.svg&#34; data-img=&#34;/blog/cni-deep-dive/4f3017abf23385a5007302ea17241bdf.svg&#34; alt=&#34;image&#34; data-caption=&#34;在 Kubernetes 中为 Pod 设置网络所涉及的详细步骤&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;在 Kubernetes 中为 Pod 设置网络所涉及的详细步骤&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pod 调度&lt;/strong&gt;：Kubelet 在节点上调度一个 Pod 运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求网络设置&lt;/strong&gt;：已调度的 Pod 请求 Kubelet 进行网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用 CNI&lt;/strong&gt;：Kubelet 调用 CNI 处理 Pod 的网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建网络命名空间&lt;/strong&gt;：CNI 为 Pod 创建一个网络命名空间，隔离其网络环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配 IP 地址&lt;/strong&gt;：CNI 通过其 IP 地址管理（IPAM）插件为 Pod 分配一个 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置网络接口&lt;/strong&gt;：CNI 在 Pod 的网络命名空间内设置必要的网络接口，将其连接到网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络设置完成&lt;/strong&gt;：Pod 通知 Kubelet 其网络设置已完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带有网络运行的 Pod&lt;/strong&gt;：Pod 现在已经运行，并且其网络已配置，可以与 Kubernetes 集群中的其他 Pod 和服务通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cni-process&#34;&gt;CNI 工作流程&lt;/h2&gt;
&lt;p&gt;容器网络接口（CNI）规范定义了容器如何配置网络，其中包括 &lt;code&gt;ADD&lt;/code&gt;、&lt;code&gt;CHECK&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;GC&lt;/code&gt; 和 &lt;code&gt;VERSION&lt;/code&gt; 五种操作。容器运行时通过调用各种 CNI 插件来执行这些操作，从而实现容器网络的动态管理和更新。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/893d64215a1ed2a7e409925b258f32ee.svg&#34; data-img=&#34;/blog/cni-deep-dive/893d64215a1ed2a7e409925b258f32ee.svg&#34; alt=&#34;image&#34; data-caption=&#34;CNI 工作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CNI 工作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;为了详细说明序列图中描述的每个步骤，涉及 Kubelet、Pod、CNI 插件（包括接口和链式 CNI 插件）、网络设置和 IP 地址管理（IPAM）之间的交互，让我们深入了解这个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;调度 Pod&lt;/strong&gt;：Kubelet 安排一个 Pod 在节点上运行。这一步启动了 Kubernetes 集群中 Pod 的生命周期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求网络设置&lt;/strong&gt;：Pod 向 Kubelet 发出网络设置请求。这个请求触发了为 Pod 配置网络的过程，确保它可以在 Kubernetes 集群内进行通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用 CNI 插件&lt;/strong&gt;：Kubelet 调用配置的容器网络接口（CNI）插件。CNI 定义了一个标准化的方式，用于容器管理系统在 Linux 容器中配置网络接口。Kubelet 将必要的信息传递给 CNI 插件，以启动网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用接口插件&lt;/strong&gt;：CNI 框架调用一个接口 CNI 插件，负责为 Pod 设置主要的网络接口。这个插件可能会创建一个新的网络命名空间、连接一对 veth 或执行其他操作，以确保 Pod 具有所需的网络接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置网络接口&lt;/strong&gt;：接口 CNI 插件为 Pod 配置网络接口。这个设置包括分配 IP 地址、设置路由和确保接口准备好通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用链式插件&lt;/strong&gt;：在设置网络接口之后，接口 CNI 插件或 CNI 框架调用链式 CNI 插件。这些插件执行额外的网络配置任务，比如设置 IP 伪装、配置入口/出口规则或应用网络策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配 IP 地址&lt;/strong&gt;：作为链式过程的一部分，链式 CNI 插件中的一个可能涉及 IP 地址管理（IPAM）。IPAM 插件负责为 Pod 分配一个 IP 地址，确保每个 Pod 在集群或命名空间内具有唯一的 IP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 地址已分配&lt;/strong&gt;：IPAM 插件分配了一个 IP 地址，并将分配信息返回给调用插件。这些信息通常包括 IP 地址本身、子网掩码和可能的网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用网络策略&lt;/strong&gt;：链式 CNI 插件将任何指定的网络策略应用于 Pod 的网络接口。这些策略可以规定允许的入口和出口流量，确保根据集群的配置要求进行网络安全和隔离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链式配置完成&lt;/strong&gt;：一旦所有链式插件完成了它们的任务，Pod 的整体网络配置被认为已完成。CNI 框架或链中的最后一个插件向 Kubelet 发送信号，表明网络设置已完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络设置完成&lt;/strong&gt;：Kubelet 收到了 Pod 的网络设置完成的确认。此时，Pod 具有完全配置的网络接口，具有 IP 地址、路由规则和应用的网络策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带有网络运行的 Pod&lt;/strong&gt;：Pod 现在已经运行，并配置了网络。它可以与 Kubernetes 集群中的其他 Pod 通信，根据网络策略访问外部资源，并执行其指定的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是针对 &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#appendix-examples&#34; title=&#34;CNI 官方示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 官方示例&lt;/a&gt;中的 &lt;code&gt;ADD&lt;/code&gt; 操作、&lt;code&gt;CHECK&lt;/code&gt; 操作和 &lt;code&gt;DELETE&lt;/code&gt; 操作的示例序列图以及详细说明。通过这些操作，容器运行时与 CNI 插件之间进行交互，实现容器网络配置的动态管理和更新。&lt;/p&gt;
&lt;h3 id=&#34;add&#34;&gt;ADD 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 ADD 操作的示例序列图以及详细说明：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/4c05303a04984692bbba9bac12928387.svg&#34; data-img=&#34;/blog/cni-deep-dive/4c05303a04984692bbba9bac12928387.svg&#34; alt=&#34;image&#34; data-caption=&#34;ADD 操作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;ADD 操作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Portmap 插件&lt;/strong&gt;：容器运行时通过调用 Portmap 插件执行 ADD 操作，配置容器的端口映射。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap 配置完成&lt;/strong&gt;：Portmap 插件完成端口映射配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 ADD 操作，配置容器的网络调优参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning 配置完成&lt;/strong&gt;：Tuning 插件完成网络调优参数配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件&lt;/strong&gt;：容器运行时调用 Bridge 插件执行 ADD 操作，配置容器的网络接口和 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：在完成自身配置之前，Bridge 插件调用 Host-local 插件执行 ADD 操作，配置容器的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM 配置完成&lt;/strong&gt;：Host-local 插件作为 IP 地址管理（IPAM）的授权方，完成 IP 地址分配，并将结果返回给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 配置完成&lt;/strong&gt;：Bridge 插件完成网络接口和 IP 地址配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器启动时，其所需的网络配置能够按照预期进行设置，包括端口映射、网络调优和 IP 地址分配等。&lt;/p&gt;
&lt;h3 id=&#34;check&#34;&gt;CHECK 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 CHECK 操作的示例序列图以及详细说明：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/eaf27d3bee18f3fe637b78d765c66d3c.svg&#34; data-img=&#34;/blog/cni-deep-dive/eaf27d3bee18f3fe637b78d765c66d3c.svg&#34; alt=&#34;image&#34; data-caption=&#34;CHECK 操作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;CHECK 操作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件进行检查&lt;/strong&gt;：容器运行时通过调用 Bridge 插件执行 CHECK 操作，检查容器的网络配置是否符合预期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：Bridge 插件调用 Host-local 插件执行 CHECK 操作，检查 IP 地址分配是否正常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回无错误&lt;/strong&gt;：Host-local 插件检查 IP 地址分配无异常，并返回无错误给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回 0 返回码&lt;/strong&gt;：Bridge 插件检查网络配置无异常，并返回 0 返回码给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件进行检查&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 CHECK 操作，检查网络调优参数是否符合预期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作成功&lt;/strong&gt;：Tuning 插件检查网络调优参数无异常，返回操作成功给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器运行期间，其网络配置和网络调优参数能够按照预期进行检查和验证，以确保网络配置的一致性和正确性。&lt;/p&gt;
&lt;h3 id=&#34;delete&#34;&gt;DELETE 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 DELETE 操作的示例序列图以及详细说明：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cni-deep-dive/f7506b2840f92ecda6ad52e98a92e79c.svg&#34; data-img=&#34;/blog/cni-deep-dive/f7506b2840f92ecda6ad52e98a92e79c.svg&#34; alt=&#34;image&#34; data-caption=&#34;DELETE 操作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;DELETE 操作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Portmap 插件&lt;/strong&gt;：容器运行时通过调用 Portmap 插件执行 DELETE 操作，删除容器的端口映射配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap 删除完成&lt;/strong&gt;：Portmap 插件完成端口映射的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 DELETE 操作，删除容器的网络调优参数配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning 删除完成&lt;/strong&gt;：Tuning 插件完成网络调优参数的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件&lt;/strong&gt;：容器运行时调用 Bridge 插件执行 DELETE 操作，删除容器的网络接口和 IP 地址配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：在完成自身删除之前，Bridge 插件调用 Host-local 插件执行 DELETE 操作，删除容器的 IP 地址分配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM 删除完成&lt;/strong&gt;：Host-local 插件完成 IP 地址分配的删除，并将结果返回给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 删除完成&lt;/strong&gt;：Bridge 插件完成网络接口和 IP 地址的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器停止运行时，其所需的网络配置能够被正确清理和移除，以确保网络资源的有效释放和管理。&lt;/p&gt;
&lt;p&gt;通过对 ADD、CHECK 和 DELETE 操作的示例序列图及详细说明，可以清晰地了解容器运行时与 CNI 插件之间的交互过程，以及如何实现容器网络配置的动态管理和更新。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;CNI 为容器化环境中的网络管理提供了一种标准化的接口，通过与 CRI 的配合，确保了 Kubernetes 集群中容器的网络配置高效且一致。通过深入理解 CNI，开发者和系统管理员可以更好地管理和优化其容器网络。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md&#34; title=&#34;CNI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 分部署追踪</title>
    <link>https://jimmysong.io/tags/%E5%88%86%E9%83%A8%E7%BD%B2%E8%BF%BD%E8%B8%AA/</link>
    <description>Recent content in 分部署追踪 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Thu, 26 Sep 2024 15:24:35 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/%E5%88%86%E9%83%A8%E7%BD%B2%E8%BF%BD%E8%B8%AA/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>Envoy 代理如何处理用户请求以实现追踪</title>
      <link>https://jimmysong.io/blog/envoy-tracing/</link>
      <pubDate>Thu, 26 Sep 2024 15:24:35 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/envoy-tracing/</guid>
      <description>
        
        
        &lt;p&gt;在云原生环境中，提升对应用程序的可观测性以更好地理解用户体验是至关重要的。然而，单纯依靠指标和日志无法提供个别案例的具体细节。这时，追踪（Tracing）技术就显得尤为重要。&lt;/p&gt;
&lt;h2 id=&#34;追踪的基本原理&#34;&gt;追踪的基本原理&lt;/h2&gt;
&lt;p&gt;追踪通过为每个用户请求附加一个关联 ID，向开发人员提供完整的用户体验上下文。这个关联 ID 就像一根线，将跨越多个服务的追踪串联起来，从而实现全面的可观测性。&lt;/p&gt;
&lt;p&gt;下图展示了 Envoy 处理用户请求的流程。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/98285f54b4811bd9ece87523444f4e02.svg&#34; data-img=&#34;/blog/envoy-tracing/98285f54b4811bd9ece87523444f4e02.svg&#34; alt=&#34;image&#34; data-caption=&#34;用户请求与 Envoy 代理的处理流程图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;用户请求与 Envoy 代理的处理流程图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;追踪&lt;/strong&gt;可以通过为每个用户请求附加一个关联 ID，向开发人员提供完整的用户体验上下文。这个关联 ID 就像一根线，将跨越多个服务的追踪串联起来。&lt;/p&gt;
&lt;p&gt;尽管所有请求都会经过 Envoy 代理，但 Envoy 无法独立提供完整的追踪信息。它只看到应用程序作为网络的一部分，无法洞察内部处理。这使得 Envoy 无法区分入站请求和出站请求是否来自同一个用户，因此无法自动转发追踪上下文。&lt;/p&gt;
&lt;h2 id=&#34;服务网格中的请求上下文&#34;&gt;服务网格中的请求上下文&lt;/h2&gt;
&lt;p&gt;Envoy 可以在 Istio 服务网格中作为 Sidecar 或 Waypoint 代理，下图展示了 Envoy 在服务网格中如何处理请求上下文的。&lt;/p&gt;
&lt;h3 id=&#34;1-用户请求的开始&#34;&gt;1. 用户请求的开始&lt;/h3&gt;
&lt;p&gt;追踪涉及通过多个服务跟踪路径，以理解用户体验的完整上下文。追踪从一个用户请求开始，该请求被分配了一个关联 ID。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/51fd90d791099a4f158c823a821fba6d.svg&#34; data-img=&#34;/blog/envoy-tracing/51fd90d791099a4f158c823a821fba6d.svg&#34; alt=&#34;image&#34; data-caption=&#34;用户请求的开始&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;用户请求的开始&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;2-请求通过-envoy-代理&#34;&gt;2. 请求通过 Envoy 代理&lt;/h3&gt;
&lt;p&gt;Envoy 位于应用程序旁边，所有进入的请求都会经过 Envoy。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/aebbb0ea064ee93575ec5a1ec9bdf329.svg&#34; data-img=&#34;/blog/envoy-tracing/aebbb0ea064ee93575ec5a1ec9bdf329.svg&#34; alt=&#34;image&#34; data-caption=&#34;用户请求的开始&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;用户请求的开始&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;3-envoy-附加额外的-headers&#34;&gt;3. Envoy 附加额外的 Headers&lt;/h3&gt;
&lt;p&gt;Envoy 可以在请求中附加额外的 Headers，以收集关于应用程序内部发生情况的信息。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/7ab35160ac9d07cfdcaa9436b8706548.svg&#34; data-img=&#34;/blog/envoy-tracing/7ab35160ac9d07cfdcaa9436b8706548.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 附加额外的 Headers&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 附加额外的 Headers&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;4-应用程序处理请求并调用后端服务&#34;&gt;4. 应用程序处理请求并调用后端服务&lt;/h3&gt;
&lt;p&gt;应用程序在处理请求的过程中，可能需要联系其他系统来处理该请求。比如外部的认证和授权服务。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/d1016c81280b99d35a642a80caa3af52.svg&#34; data-img=&#34;/blog/envoy-tracing/d1016c81280b99d35a642a80caa3af52.svg&#34; alt=&#34;image&#34; data-caption=&#34;应用程序处理请求并调用后端服务&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;应用程序处理请求并调用后端服务&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;5-应用程序需要复制关联-id&#34;&gt;5. 应用程序需要复制关联 ID&lt;/h3&gt;
&lt;p&gt;应用程序知道出站请求是代表哪个入站请求发起的（例如 Trace ID 为 1234 的请求）。但是，Envoy 并不知道这一点。因此，应用程序需要将关联 ID 等上下文从入站请求复制到出站请求中。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/1409785fdd6f8909dffee3c5bd1b44ba.svg&#34; data-img=&#34;/blog/envoy-tracing/1409785fdd6f8909dffee3c5bd1b44ba.svg&#34; alt=&#34;image&#34; data-caption=&#34;应用程序需要复制关联 ID&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;应用程序需要复制关联 ID&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;6-多个请求的并发处理&#34;&gt;6. 多个请求的并发处理&lt;/h3&gt;
&lt;p&gt;在实际场景中，应用程序同时处理多个用户请求，这导致了并发性。由于 Envoy 只能看到网络层面的请求和响应，无法区分这些请求之间的因果关系。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/2aebfd544f726da5fe6f4389aed924bd.svg&#34; data-img=&#34;/blog/envoy-tracing/2aebfd544f726da5fe6f4389aed924bd.svg&#34; alt=&#34;image&#34; data-caption=&#34;多个请求的并发处理&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;多个请求的并发处理&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;7-envoy-的局限性&#34;&gt;7. Envoy 的局限性&lt;/h3&gt;
&lt;p&gt;因为 Envoy 无法看到应用程序内部的处理逻辑，它只能看到一系列的网络请求和响应，无法知道哪些出站请求是由哪些入站请求触发的。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/d048f6f9fc9af6f29a9f2e4bfe599613.svg&#34; data-img=&#34;/blog/envoy-tracing/d048f6f9fc9af6f29a9f2e4bfe599613.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 的局限性&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 的局限性&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;需要应用程序的参与&#34;&gt;需要应用程序的参与&lt;/h2&gt;
&lt;p&gt;由于 Envoy 无法自动转发追踪上下文，应用程序本身需要负责将入站请求的 Headers 复制到出站请求中，以保持追踪信息的完整性。&lt;/p&gt;
&lt;h3 id=&#34;应用程序复制-headers&#34;&gt;应用程序复制 Headers&lt;/h3&gt;
&lt;p&gt;应用程序在处理入站请求时，需要将必要的 Headers（如关联 ID、用户身份等）复制到任何出站请求中。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/d1f00ba65d1c61edf996a19a6b5145d7.svg&#34; data-img=&#34;/blog/envoy-tracing/d1f00ba65d1c61edf996a19a6b5145d7.svg&#34; alt=&#34;image&#34; data-caption=&#34;应用程序复制 Headers&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;应用程序复制 Headers&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;响应返回给用户&#34;&gt;响应返回给用户&lt;/h3&gt;
&lt;p&gt;应用程序完成对用户请求的处理后，将响应返回给用户。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/envoy-tracing/ed0816d0cb881c7c7d5eb19e6d0826bf.svg&#34; data-img=&#34;/blog/envoy-tracing/ed0816d0cb881c7c7d5eb19e6d0826bf.svg&#34; alt=&#34;image&#34; data-caption=&#34;响应返回给用户&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;响应返回给用户&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;解决方案与推荐&#34;&gt;解决方案与推荐&lt;/h2&gt;
&lt;p&gt;为了确保追踪信息的完整性，应用程序需要主动复制和传递追踪相关的 Headers。这可以通过集成如 &lt;a href=&#34;https://skywalking.apache.org/&#34; title=&#34;Apache SkyWalking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache SkyWalking&lt;/a&gt; 的工具来实现，SkyWalking 不仅支持分布式追踪，还包括性能监控、日志分析等功能。利用 SkyWalking 的库和代理，可以简化 Headers 的复制和追踪信息的传递。&lt;/p&gt;
&lt;p&gt;关于如何在 Istio 中使用 SkyWalking 实现分布式追踪详见&lt;a href=&#34;https://jimmysong.io/blog/distributed-tracing-with-skywalking-in-istio/&#34; title=&#34;这篇博客&#34;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;追踪的重要性&lt;/strong&gt;：追踪为开发人员提供了用户请求的完整上下文，帮助更好地理解和改进用户体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Envoy 的局限性&lt;/strong&gt;：Envoy 只能看到网络层面的请求和响应，无法跟踪请求的因果关系，因此无法自动转发追踪上下文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序的角色&lt;/strong&gt;：应用程序需要主动复制和传递追踪相关的 Headers，以确保追踪信息的完整性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐的工具&lt;/strong&gt;：使用 SkyWalking 等追踪工具的库，可以简化在应用程序中实现 Headers 复制的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/how-the-envoy-proxy-handles-a-user-request/&#34; title=&#34;How the Envoy proxy handles a user request - tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How the Envoy proxy handles a user request - tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/distributed-tracing-with-skywalking-in-istio/&#34; title=&#34;如何在 Istio 中使用 SkyWalking 进行分布式追踪？- jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何在 Istio 中使用 SkyWalking 进行分布式追踪？- jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

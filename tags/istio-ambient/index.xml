
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Istio Ambient</title>
    <link>https://jimmysong.io/tags/istio-ambient/</link>
    <description>Recent content in Istio Ambient on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Tue, 07 Jan 2025 15:07:30 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/istio-ambient/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>Istio Ambient 模式中的数据包生命周期及流量优化</title>
      <link>https://jimmysong.io/blog/istio-ambient-packet-lifecycle-optimization/</link>
      <pubDate>Tue, 07 Jan 2025 15:07:30 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/istio-ambient-packet-lifecycle-optimization/</guid>
      <description>
        
        
        &lt;p&gt;本文围绕 Istio Ambient 模式下的数据包生命周期进行深入剖析，从初始数据包的流量拦截与目标解析，到后续数据包的快速转发与优化策略，帮助读者理解 Ambient 模式背后的技术逻辑和性能实践。&lt;/p&gt;
&lt;h2 id=&#34;数据包生命周期概览从内核态到用户态&#34;&gt;数据包生命周期概览：从内核态到用户态&lt;/h2&gt;
&lt;p&gt;在 Ambient 模式中，数据包的处理路径从 Pod 内核态网络栈开始，经由 &lt;code&gt;iptables&lt;/code&gt; 规则被拦截后进入 ztunnel 的用户态处理逻辑。ztunnel 负责透明代理、策略验证、加密隧道建立等任务，最终将数据包通过内核态网络再次转发给目标服务或下一个 ztunnel。其核心思想是通过首次数据包的详细解析和标记，为后续数据包铺路，从而减少重复开销。&lt;/p&gt;
&lt;p&gt;下图展示了 Istio Ambient 模式中从 Pod 到 ztunnel 的数据包生命周期：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-ambient-packet-lifecycle-optimization/4c7d5e7ac5168314a5c5de34a39a4f9c.svg&#34; data-img=&#34;/blog/istio-ambient-packet-lifecycle-optimization/4c7d5e7ac5168314a5c5de34a39a4f9c.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio Ambient 模式中从 Pod 到 ztunnel 的数据包生命周期&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio Ambient 模式中从 Pod 到 ztunnel 的数据包生命周期&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;接下来，我们将详细介绍首个数据包与后续数据包的处理路径，并分析其中的技术要点与优化手段。&lt;/p&gt;
&lt;h2 id=&#34;首个数据包路径从拦截到目标解析&#34;&gt;首个数据包路径：从拦截到目标解析&lt;/h2&gt;
&lt;p&gt;当应用程序在 Pod 内发出数据包（如 HTTP 请求），数据包首先经过 Pod 的网络命名空间和内核态网络栈进行处理。&lt;/p&gt;
&lt;h3 id=&#34;透明拦截与目标解析&#34;&gt;透明拦截与目标解析&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 规则对出站流量进行筛选，若发现目标地址为非本地资源且数据包未携带特定标记，则将数据包重定向至 ztunnel 的透明代理端口（如 &lt;code&gt;15006&lt;/code&gt; 或 &lt;code&gt;15008&lt;/code&gt;）。借助 &lt;code&gt;IP_TRANSPARENT&lt;/code&gt; 和 &lt;code&gt;SO_ORIGINAL_DST&lt;/code&gt; 选项，ztunnel 可提取数据包的原始目标地址，实现无缝透明代理。&lt;/p&gt;
&lt;h3 id=&#34;用户态处理策略验证与加密隧道&#34;&gt;用户态处理：策略验证与加密隧道&lt;/h3&gt;
&lt;p&gt;数据包进入 ztunnel 用户态后，将经历以下处理流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;策略验证&lt;/strong&gt;：RBAC 验证、mTLS 加密判定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标流量处理&lt;/strong&gt;：对网格内部流量，通过 HTTP/2 CONNECT 隧道（HBONE）加密与跨节点传输；对网格外流量，直接通过本地 TCP 连接透传。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完成处理后，ztunnel 基于数据包解析结果建立出站连接（如 HTTP/2 隧道或明文 TCP），并将数据包送回内核态，最终转发至目标服务或下一个 ztunnel。&lt;/p&gt;
&lt;h2 id=&#34;后续数据包路径利用-conntrack-与隧道复用&#34;&gt;后续数据包路径：利用 Conntrack 与隧道复用&lt;/h2&gt;
&lt;p&gt;首个数据包完成解析与策略验证后，Linux 内核的连接跟踪（&lt;code&gt;conntrack&lt;/code&gt;）记录连接状态与标记。后续数据包无需再次经历复杂的拦截与解析，直接进入 ztunnel 的 inbound socket。&lt;/p&gt;
&lt;h3 id=&#34;连接跟踪与快速转发&#34;&gt;连接跟踪与快速转发&lt;/h3&gt;
&lt;p&gt;后续数据包基于 &lt;code&gt;conntrack&lt;/code&gt; 跟踪机制，快速到达 ztunnel 的 inbound socket。ztunnel 可直接识别目标地址与安全策略，避免重复的解析与验证。&lt;/p&gt;
&lt;h3 id=&#34;隧道与明文连接优化&#34;&gt;隧道与明文连接优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HBONE 隧道&lt;/strong&gt;：支持多路复用，提高加密流量处理效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;明文连接&lt;/strong&gt;：对无需加密的流量，直接复用现有 TCP 连接，进一步减少处理开销。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;技术要点与优化策略&#34;&gt;技术要点与优化策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;透明代理&lt;/strong&gt;：利用 &lt;code&gt;IP_TRANSPARENT&lt;/code&gt; 实现透明流量捕获与目标解析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核与用户态高效协作&lt;/strong&gt;：首个数据包通过用户态完成深度处理，后续数据包借助 &lt;code&gt;conntrack&lt;/code&gt; 与 inbound socket 实现快速转发，降低上下文切换成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路复用&lt;/strong&gt;：借助 HTTP/2 隧道实现高效加密与负载均衡，优化传输性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实践建议&#34;&gt;实践建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;多平台适配&lt;/strong&gt;：根据平台特性调整透明代理实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调优与监控&lt;/strong&gt;：结合 ztunnel 日志与服务网格监控工具，优化流量路径与性能表现。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio Ambient 模式通过数据包生命周期设计，在透明代理、性能优化与安全策略间实现平衡。zTunnel 通过高效的用户态处理与内核态快速转发，将应用程序的透明体验与底层网络优化有效结合，助力服务网格的实践与推广。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio Ambient 模式中 Ztunnel 停止运行时的流量处理机制</title>
      <link>https://jimmysong.io/trans/istio-ambient-mode-ztunnel-shutdown/</link>
      <pubDate>Tue, 07 Jan 2025 11:54:03 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/istio-ambient-mode-ztunnel-shutdown/</guid>
      <description>
        
        
        &lt;p&gt;关于 Istio 的 Ambient 模式，一个常见的问题是它如何在升级或重启期间处理流量。&lt;/p&gt;
&lt;p&gt;在 Sidecar 模型中，代理和应用程序是 1:1 的关系，这种情况下无需担心此类问题——代理在应用程序停止时会关闭，并在应用程序启动时加载最新版本。&lt;/p&gt;
&lt;p&gt;然而，Ambient 模式中，每个节点都有一个专用代理（“Ztunnel”），这意味着我们可能需要在应用程序运行时对其进行升级。&lt;/p&gt;
&lt;h2 id=&#34;停止运行的过程&#34;&gt;停止运行的过程&lt;/h2&gt;
&lt;p&gt;Ztunnel 遵循标准的滚动更新流程。也就是说，当我们需要引入新版本时，会按照以下步骤进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动新版本&lt;/li&gt;
&lt;li&gt;当新版本准备就绪后，开始关闭旧版本&lt;/li&gt;
&lt;li&gt;在一段时间内，两个版本会同时运行&lt;/li&gt;
&lt;li&gt;最终，旧版本被关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于 Ztunnel，有两种类型的流量需要考虑：&lt;/p&gt;
&lt;p&gt;第一种是当同时运行多个实例时，&lt;em&gt;新建&lt;/em&gt;连接会发生什么。在非常短的时间内，两个实例都会接受连接（利用 &lt;code&gt;SO_REUSEPORT&lt;/code&gt;），这些连接由内核随机分配。然而，一旦新实例完全准备就绪，就会通知旧实例停止接受新连接，这样新实例可以开始处理所有新建连接。&lt;/p&gt;
&lt;p&gt;第二种是对于我们正在关闭的实例上的&lt;em&gt;现有&lt;/em&gt;连接会发生什么。虽然应用协议通常具有通知对端停止使用的机制，例如 HTTP/1.1 可以发送 &lt;code&gt;Connection: close&lt;/code&gt; 标头，HTTP/2 可以发送 &lt;code&gt;GOAWAY&lt;/code&gt;，但 Ztunnel 在 L4 层工作，TCP 本身并没有这样的机制。为此，Ztunnel 使用了一种宽限期机制。只要仍有活动连接，旧实例就会继续运行并服务这些连接（但正如前面提到的，不再处理任何新连接）。最终，如果超出了可配置的宽限期，任何剩余的连接都会被发送 &lt;code&gt;RST&lt;/code&gt;（连接复位）。&lt;/p&gt;
&lt;p&gt;结合起来，从“蓝色版本”升级到“绿色版本”的生命周期如下图所示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-ambient-mode-ztunnel-shutdown/ztunnel-shutdown_hu6150808700657480811.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-ambient-mode-ztunnel-shutdown/ztunnel-shutdown.png&#34; data-img=&#34;/trans/istio-ambient-mode-ztunnel-shutdown/ztunnel-shutdown.png&#34; data-width=&#34;1432&#34; data-height=&#34;480&#34; alt=&#34;image&#34; data-caption=&#34;Ztunnel 升级时间线&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ztunnel 升级时间线&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;第一条时间轴显示哪个实例正在积极接受连接。可以看到，这个状态从“蓝色”切换到“绿色”，其中有一个短暂的时间段内两个实例都在接受连接。&lt;/p&gt;
&lt;p&gt;第二和第三条时间轴分别显示旧实例和新实例的状态。旧实例在新实例准备就绪后开始其宽限期，最终强制终止所有剩余连接。&lt;/p&gt;
&lt;h2 id=&#34;我的应用程序会受到影响吗&#34;&gt;我的应用程序会受到影响吗？&lt;/h2&gt;
&lt;p&gt;对大多数人来说，重要的不是内部运作的细节，而是他们的应用程序是否会受到影响。简短的答案是：这取决于情况。&lt;/p&gt;
&lt;p&gt;如果你的应用程序存在比宽限期更长的连接，这些连接可能会被重置。具体影响取决于你的应用程序——有些能够更优雅地处理这种情况，而有些则不行。&lt;/p&gt;
&lt;p&gt;需要特别注意的是，&lt;strong&gt;在任何时候，新建连接都不会失败&lt;/strong&gt;。因此，如果你的应用程序在连接终止后尝试重新建立新连接（这是正确的做法！），那么这个过程始终可以成功。&lt;/p&gt;
&lt;h2 id=&#34;如何减少连接重置的影响&#34;&gt;如何减少连接重置的影响？&lt;/h2&gt;
&lt;p&gt;如果你的应用程序无法很好地处理连接重置，有两种主要的方法可以缓解问题：&lt;/p&gt;
&lt;p&gt;第一种方法是确保 Ztunnel 的宽限期比你的最大连接时长更长。许多使用长连接的场景（例如连接池）可以配置连接的最大时长，并在达到最大时长后重新建立连接。如果需要，可以将此值设置得更短。此外，Ztunnel 的宽限期可以通过配置其 &lt;code&gt;terminationGracePeriodSeconds&lt;/code&gt; 设置来调整——这个值可以设置得相当高，甚至是数小时。&lt;/p&gt;
&lt;p&gt;另一种更具侵入性但非常安全的选项是，确保升级过程中节点上没有运行应用程序。这可以通过&lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/generated/kubectl_cordon/&#34; title=&#34;给节点打上隔离标记&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;给节点打上隔离标记&lt;/a&gt;来实现。在大多数情况下，这种方法可能过于繁琐，但如果你将 TCP 连接视为“宠物”（需要精心维护），这种方式可能是值得的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你可能会好奇，为什么节点隔离/关闭可以 100% 避免连接终止，而 Ztunnel 升级却不能？问题在于，Ztunnel 升级时无法通知应用程序优雅地关闭或终止连接。然而，当应用程序关闭时，它会收到 &lt;code&gt;SIGTERM&lt;/code&gt; 信号，可以利用该信号进行优雅的关闭。当然，你的应用程序必须正确处理该信号才能获得任何好处！&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
  </channel>
</rss>

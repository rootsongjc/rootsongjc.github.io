<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song&#39;s Blog – CNI</title>
    <link>https://jimmysong.io/tags/cni/</link>
    <description>Recent content in CNI on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 17 Apr 2024 18:54:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/cni/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>深入解析 Istio CNI：赋能无侵入式流量管理与强化服务网格安全</title>
      <link>https://jimmysong.io/blog/istio-cni-deep-dive/</link>
      <pubDate>Wed, 17 Apr 2024 18:54:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/istio-cni-deep-dive/</guid>
      <description>
        
        
        &lt;p&gt;本文将深入探讨 Istio CNI 插件的设计理念、实现方式以及如何通过 Ambient Mode 来解决传统模式中存在的安全和权限问题。本文内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Init 容器的安全风险及其解决方案。&lt;/li&gt;
&lt;li&gt;Istio CNI 的工作原理及其优势。&lt;/li&gt;
&lt;li&gt;Ambient Mode 的实现机制及其与 CNI 的集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Istio 网络要求与解决方案概览&lt;/h2&gt;
&lt;p&gt;Istio 服务网格通过 Sidecar 模式实现应用流量的拦截和管理。该模式通过在应用程序 Pod 中注入 Sidecar Proxy 和 init 容器，并使用 iptables 规则来管理网络流量。详细的部署和操作过程请参见 &lt;a href=&#34;https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/&#34; title=&#34;Istio 中的 Sidecar 注入、透明流量劫持及流量路由过程详解&#34;&gt;Istio 中的 Sidecar 注入、透明流量劫持及流量路由过程详解&lt;/a&gt;
。虽然此方法在多数 Kubernetes 平台上有效，但对高权限的依赖在多租户环境中引发了安全方面的担忧。&lt;/p&gt;
&lt;h3 id=&#34;istio-init&#34;&gt;Istio-init 的局限性&lt;/h3&gt;
&lt;p&gt;Istio 在其网络配置初期采用了 &lt;code&gt;istio-init&lt;/code&gt; 容器来初始化流量拦截规则，这需要容器具有高级权限来修改网络配置，如 IPTables 规则。虽然这种方法实现了对流量的有效管理，但它也显著提高了权限需求并增加了安全风险。根据 &lt;a href=&#34;https://istio.io/latest/zh/docs/setup/additional-setup/cni/&#34; title=&#34;Istio 官方文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 官方文档&lt;/a&gt;
，&lt;code&gt;istio-init&lt;/code&gt; 容器默认被注入到 Istio 网格中的 Pod 里，以便将网络流量劫持到 Istio 的 Sidecar 代理。这一过程需要对部署 Pod 的 Service Account 赋予 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container&#34; title=&#34;&amp;lt;code&amp;gt;NET_ADMIN&amp;lt;/code&amp;gt; 容器权限&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;NET_ADMIN&lt;/code&gt; 容器权限&lt;/a&gt;
，可能与某些组织的安全政策相悖。&lt;/p&gt;
&lt;h3 id=&#34;istio-cni-plugin&#34;&gt;Istio CNI 插件&lt;/h3&gt;
&lt;p&gt;为响应这一挑战，Istio 社区推出了 &lt;a href=&#34;https://github.com/istio/istio/tree/master/cni&#34; title=&#34;Istio CNI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio CNI&lt;/a&gt;
 插件，该插件避免了对 init 容器的需求，允许直接在 Kubernetes 的网络层面操作，从而降低权限需求并简化部署流程，但是存在 CNI 兼容性问题。&lt;/p&gt;
&lt;h3 id=&#34;ambient-mode&#34;&gt;Ambient 模式的引入&lt;/h3&gt;
&lt;p&gt;Istio 的 Ambient Mode 是一种创新的无 sidecar 方案，它通过 &lt;a href=&#34;https://jimmysong.io/blog/traffic-interception-with-geneve-tunnel-with-istio-ambient-mesh/&#34; title=&#34;使用 Geneve 隧道&#34;&gt;使用 Geneve 隧道&lt;/a&gt;
 或 Istio CNI 提高网络的灵活性和安全性。&lt;/p&gt;
&lt;p&gt;直到最近 Istio 社区才推出&lt;a href=&#34;https://istio.io/latest/zh/blog/2024/inpod-traffic-redirection-ambient/&#34; title=&#34;适配任意 CNI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;适配任意 CNI&lt;/a&gt;
 的通用的解决方案。此模式解决了与任意 CNI 的兼容性问题，使 Istio 能够在不影响现有网络策略的前提下，更有效地管理服务间的流量。&lt;/p&gt;
&lt;h2 id=&#34;net-admin&#34;&gt;NET_ADMIN 权限的安全考虑&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 和 Docker 等容器化环境中，&lt;code&gt;NET_ADMIN&lt;/code&gt; 权限允许容器内的进程执行广泛的网络相关操作。这包括修改 iptables 规则、更改网络接口配置、管理 IP 路由表，以及控制网络相关的内核参数。然而，这种权限的使用引发了安全上的考虑，特别是在权限过度和潜在的攻击面方面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最佳实践包括&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;限制使用范围&lt;/strong&gt;：只在必要时授予 &lt;code&gt;NET_ADMIN&lt;/code&gt; 权限，并通过 Kubernetes 网络策略加以限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续监控与审计&lt;/strong&gt;：对使用 &lt;code&gt;NET_ADMIN&lt;/code&gt; 权限的容器进行严格的日志记录和监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;istio-cni-principal&#34;&gt;Istio CNI 插件的工作原理&lt;/h2&gt;
&lt;p&gt;Istio CNI 插件是一个二进制文件，作为代理安装在每个节点的文件系统中。以下流程图说明了 Istio CNI 节点代理的工作原理：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;flowchart TB
    subgraph istio_cni_node_agent[Istio CNI 节点代理]
        direction LR
        install_plugin[安装 Istio CNI 插件]
        update_config[更新节点 CNI 配置位于 /etc/cni/net.d]
        monitor_paths[监控插件和配置路径]
        
        subgraph sidecar_mode[&#34;Sidecar 模式&#34;]
            sidecar_setup[为 Pod 配置 iptables]
        end
        
        subgraph ambient_mode[&#34;Ambient 模式&#34;]
            ambient_server[Ambient 监控服务器]
            sync_events[同步 Pod 事件]
            configure_iptables[在 Pod 内配置 iptables]
        end

        install_plugin --&gt; update_config
        update_config --&gt; monitor_paths
        monitor_paths --&gt; sidecar_mode
        monitor_paths --&gt; ambient_mode
        ambient_mode --&gt; ambient_server
        ambient_server --&gt; sync_events
        sync_events --&gt; configure_iptables
    end
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Istio CNI Node Agent 充当安装在每个节点上的代理。&lt;/li&gt;
&lt;li&gt;安装 Istio CNI 插件并更新节点的 CNI 配置。&lt;/li&gt;
&lt;li&gt;代理监控 CNI 插件和配置路径的更改。&lt;/li&gt;
&lt;li&gt;在 Sidecar 模式下，它使用 pod 的 iptables 处理 sidecar 网络设置。&lt;/li&gt;
&lt;li&gt;在 Ambient 模式下，它将 pod 事件同步到环境监控服务器，然后该服务器在 pod 内配置 iptables。&lt;/li&gt;
&lt;li&gt;节点需要提升权限，例如 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 、 &lt;code&gt;CAP_NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;CAP_NET_RAW&lt;/code&gt; 才能在任一模式下运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;confilct&#34;&gt;解析 Istio Ambient Mode 与 Kubernetes CNI 的冲突&lt;/h2&gt;
&lt;p&gt;Istio 的 Ambient Mode 是为了适配所有 CNI 而设计的一种模式，它通过 ztunnel 来透明地处理 Pod 内的流量转发，而不影响现有的 CNI 配置。这种模式下，Ambient Mode 通过 ztunnel 管理流量，使其流经 Istio 服务网格，而标准的 CNI 则侧重于为 Pod 提供标准化的网络接入。&lt;/p&gt;
&lt;p&gt;CNI 的主要职责是解决 Kubernetes Pod 之间的网络连通性，例如分配 IP 地址和转发数据包。相比之下，Ambient Mode 需要将流量导入 ztunnel，这与 CNI 的网络配置可能存在不兼容，主要问题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主流 CNI 的网络配置可能会与 Istio 的 CNI 扩展冲突，导致流量处理中断。&lt;/li&gt;
&lt;li&gt;如果部署的网络策略依赖于 CNI，那么使用 Istio CNI 时可能会影响这些策略的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为解决这些问题，可以通过将 ztunnel 运行在与 Pod 相同的用户空间中，避免与 CNI 修改过的内核空间的冲突。这样，Pod 可以直接连接到 ztunnel，绕过 CNI 的影响。&lt;/p&gt;
&lt;p&gt;下面的时序图描述了 Ambient mode 下的流程：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant K8s_API as Kubernetes API
    participant Plugin as CNI Plugin
    participant Agent as Ambient CNI Agent
    participant Server as Ambient Watch Server
    participant Ztunnel as ztunnel

    Plugin-&gt;&gt;Agent: CmdAdd (Pod 调度)
    Agent-&gt;&gt;Server: 通知新的 Pod
    Server-&gt;&gt;K8s_API: 检索 Pod 信息
    K8s_API--&gt;&gt;Server: Pod 详情
    Server-&gt;&gt;Ztunnel: 设置 iptables
    Ztunnel-&gt;&gt;Server: 确认设置
    Server-&gt;&gt;Agent: 配置完成
    Agent-&gt;&gt;Plugin: CmdDel (Pod 移除)
    Server-&gt;&gt;Ztunnel: 移除 iptables
    Ztunnel--&gt;&gt;Server: 确认
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ambient CNI 代理&lt;/strong&gt; 通过监听信号着 Pod 创建的 UDS 事件来启动交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient 监控服务器&lt;/strong&gt; 根据需要修改 Pod 内的 iptables，将流量重定向到 ztunnel。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ztunnel&lt;/strong&gt; 在 Kubernetes 集群内建立连接，并处理网络流量的重定向。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resolution&#34;&gt;解决 Istio Ambient Mode 和 Kubernetes CNI 的冲突&lt;/h2&gt;
&lt;p&gt;为缓解这些冲突，Istio 的 Ambient Mode 避免了对 CNI 修改过的内核空间的依赖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在用户空间运行 ztunnel&lt;/strong&gt;：这一策略让 ztunnel 与 Pod 运行在同一用户空间，避免了与 CNI 的直接冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确保 CNI 兼容性&lt;/strong&gt;：Istio CNI 配置必须在不影响现有 CNI 插件配置的前提下进行，确保 Pod 间的正常通信和流量管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些措施帮助 Istio 的 Ambient Mode 在不干扰现有 CNI 插件的情况下，有效管理服务间流量。&lt;/p&gt;
&lt;h2 id=&#34;optimization&#34;&gt;Istio Ambient Mode 的流量管理优化&lt;/h2&gt;
&lt;p&gt;Ambient Mode 在 Istio 中通过 &lt;strong&gt;node-local Ztunnel&lt;/strong&gt; 实现了改进的流量转发机制，允许在 Pod 的网络命名空间中设置侦听套接字，实现从服务网格内部的加密（mTLS）和明文流量的有效重定向。这种方法不仅提高了流量管理的灵活性，还避免了与现有的 CNI 插件之间的潜在冲突。下面是该模式的具体实现流程：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;graph TD
    subgraph Kubernetes 集群
    A[带有 istio.io/dataplane-mode=ambient 的 Pod] --&gt;|被检测到| B(istio-cni 节点代理)
    B --&gt; C{Pod 状态}
    C --&gt;|新启动| D[CNI 插件触发]
    C --&gt;|已运行| E[新 Pod 事件]
    D &amp; E --&gt; F[配置重定向]
    F --&gt;|进入 Pod 的网络命名空间| G[建立网络重定向]
    G --&gt; H[通知节点 Ztunnel]
    H --&gt;|在 Pod 的命名空间中创建监听套接字| I[节点本地 Ztunnel 代理实例]
    I --&gt; J[流量重定向已建立]
    end

    J --&gt; K{流量类型}
    K --&gt;|mTLS| L[网格内的加密流量]
    K --&gt;|明文| M[明文流量处理]
&lt;/pre&gt;

&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;侦测标记&lt;/strong&gt;：Istio CNI 节点代理侦测标记为 &lt;code&gt;istio.io/dataplane-mode=ambient&lt;/code&gt; 的 Pod。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;触发 CNI 插件&lt;/strong&gt;：根据 Pod 事件（新启动或现有 Pod 加入网格）触发 CNI 插件，这一步会触发 Istio CNI 节点代理进行流量重定向配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置重定向规则&lt;/strong&gt;：在 Pod 的网络命名空间内配置网络重定向规则，以便拦截并重定向至 node-local ztunnel 代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立侦听套接字&lt;/strong&gt;：node-local ztunnel 在 Pod 的网络命名空间中创建侦听套接字，实现流量的重定向。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量处理&lt;/strong&gt;：node-local ztunnel 处理网格内的加密（mTLS）和明文流量，确保数据传输的安全性和高效性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这种方法，Istio Ambient Mode 为 Kubernetes 环境中的服务间流量管理提供了一种更为高效和安全的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文全面解析了 Istio CNI 插件的设计理念、实现方式和优势，特别是 Istio CNI 如何解决了传统 &lt;code&gt;istio-init&lt;/code&gt; 方法中存在的权限和安全问题。通过这些创新，Istio 在网络安全和操作简便性上取得了重大进步，为 Kubernetes 环境中实施 Istio 提供了更灵活和高效的方法。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>深入解读 CNI：容器网络接口</title>
      <link>https://jimmysong.io/blog/cni-deep-dive/</link>
      <pubDate>Mon, 15 Apr 2024 13:54:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cni-deep-dive/</guid>
      <description>
        
        
        &lt;p&gt;在容器化环境中，有效管理网络是至关重要的。容器网络接口（CNI）是一个标准，定义了容器应如何配置网络。本文将深入探讨 CNI 的基础知识，并带你了解 CNI 与 CRI 的关系。&lt;/p&gt;
&lt;h2 id=&#34;what-is-cni&#34;&gt;什么是 CNI？&lt;/h2&gt;
&lt;p&gt;CNI（容器网络接口）规范为容器运行时和网络插件之间提供了一个通用的接口，旨在实现容器网络配置的标准化。&lt;/p&gt;
&lt;p&gt;CNI 规范包含以下几个核心组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络配置的格式&lt;/strong&gt;：定义了管理员如何定义网络配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求协议&lt;/strong&gt;：描述了容器运行时如何向网络插件发出网络配置或清理请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件执行过程&lt;/strong&gt;：详细阐述了插件如何根据提供的配置执行网络设置或清理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件委派&lt;/strong&gt;：允许插件将特定功能委托给其他插件执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果返回&lt;/strong&gt;：定义了插件执行完成后如何向运行时返回结果的数据格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNI 规范通过定义这些核心组成部分，确保了不同的容器运行时和网络插件能够以一致的方式进行交互，实现网络配置的自动化和标准化。&lt;/p&gt;
&lt;div class=&#34;alert&#34;&gt;

&lt;div class=&#34;alert-note-title py-1 px-2&#34;&gt;
  CNI 规范的一些要点
&lt;/div&gt;

&lt;div class=&#34;alert-note py-1 px-2&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;CNI 是一个插件化的容器化网络解决方案&lt;/li&gt;
&lt;li&gt;CNI 插件为可执行文件&lt;/li&gt;
&lt;li&gt;单个 CNI 插件的职责是单一的&lt;/li&gt;
&lt;li&gt;CNI 插件是呈链式调用的&lt;/li&gt;
&lt;li&gt;CNI 规范为一个容器定义一个 Linux 网络命名空间&lt;/li&gt;
&lt;li&gt;CNI 的网络定义存储为 JSON 格式&lt;/li&gt;
&lt;li&gt;网络定义通过 STDIN 输入流传输到插件，这意味着宿主机上不会存储网络配置文件，其他的配置参数通过环境变量传递给插件&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CNI 插件根据操作类型，接收相应的网络配置参数，执行网络配置或清理任务，并返回执行结果。这一流程确保了容器网络的动态配置与容器生命周期的同步。&lt;/p&gt;
&lt;p&gt;下图展示了 CNI 包含了众多的网络插件。&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;graph TB
    CR[Container Runtime] --&gt; CNI[&#34;Container Network Interface (CNI)&#34;]
    CNI --&gt; LP[Loopback Plugin]
    CNI --&gt; BP[Bridge Plugin]
    CNI --&gt; PTP[PTP Plugin]
    CNI --&gt; MACV[MACvlan Plugin]
    CNI --&gt; IPV[IPvlan Plugin]
    CNI --&gt; TPP[3rd-Party Plugin]
&lt;/pre&gt;

&lt;p&gt;根据 &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#section-2-execution-protocol&#34; title=&#34;CNI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 规范&lt;/a&gt;
，一个 CNI 插件负责以某种方式配置容器的网络接口。插件可分为两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;接口&amp;quot;插件，负责在容器内部创建网络接口并确保其具有连通性。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;链式&amp;quot;插件，调整已创建接口的配置（但可能需要创建更多接口以完成此操作）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;relationship&#34;&gt;CNI 与 CRI 的关系&lt;/h2&gt;
&lt;p&gt;CNI 和 CRI（容器运行时接口）是 Kubernetes 中两个关键的接口，它们分别处理容器的网络配置和运行时管理。在 Kubernetes 集群中，CRI 调用 CNI 插件来配置或清理容器的网络，这确保了网络配置的过程与容器的创建和销毁过程紧密协调。&lt;/p&gt;
&lt;p&gt;下图直观地展示了 CNI 如何与 CRI 协同运行的：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant K as Kubelet
    participant CRI as Container Runtime Interface
    participant CNI as Container Network Interface
    participant P as Pod

    K-&gt;&gt;+CRI: 创建 Pod 容器
    CRI-&gt;&gt;+P: 启动容器
    P--&gt;&gt;-CRI: 容器运行中
    CRI--&gt;&gt;-K: 容器准备就绪
    K-&gt;&gt;+CNI: 调用 CNI 进行网络设置
    CNI-&gt;&gt;+P: 连接网络
    P--&gt;&gt;-CNI: 网络配置完成
    CNI--&gt;&gt;-K: Pod 网络就绪
    K-&gt;&gt;P: 带有网络运行的 Pod
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 CRI&lt;/strong&gt;：Kubelet 指示 CRI 创建已调度的 Pod 的容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI 到 Pod&lt;/strong&gt;：容器运行时在 Pod 中启动容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod 到 CRI&lt;/strong&gt;：一旦容器运行，它会向容器运行时发出信号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI 到 Kubelet&lt;/strong&gt;：容器运行时通知 Kubelet 容器已准备就绪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 CNI&lt;/strong&gt;：容器已启动，Kubelet 调用 CNI 为 Pod 设置网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI 到 Pod&lt;/strong&gt;：CNI 为 Pod 配置网络，将其连接到必要的网络接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod 到 CNI&lt;/strong&gt;：网络配置完成后，Pod 向 CNI 确认网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI 到 Kubelet&lt;/strong&gt;：CNI 通知 Kubelet Pod 的网络已准备就绪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet 到 Pod&lt;/strong&gt;：现在 Pod 完全可操作，两个容器均已运行且网络已配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了在 Kubernetes 中为 Pod 设置网络所涉及的详细步骤：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant P as Pod
    participant K as Kubelet
    participant CNI as Container Network Interface
    participant NS as Network Setup
    participant IPAM as IP Address Management

    K-&gt;&gt;+P: 调度 Pod
    P-&gt;&gt;+K: 请求网络设置
    K-&gt;&gt;+CNI: 调用 CNI
    CNI-&gt;&gt;+NS: 创建网络命名空间
    NS--&gt;&gt;-CNI: 命名空间已创建
    CNI-&gt;&gt;+IPAM: 分配 IP 地址
    IPAM--&gt;&gt;-CNI: IP 地址已分配
    CNI-&gt;&gt;P: 设置网络接口
    P--&gt;&gt;-K: 网络设置完成
    K-&gt;&gt;P: 带有网络运行的 Pod

    Note over P,K: Pod 调度触发网络设置
    Note over CNI,IPAM: CNI 处理网络命名空间创建和 IP 地址分配
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pod 调度&lt;/strong&gt;：Kubelet 在节点上调度一个 Pod 运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求网络设置&lt;/strong&gt;：已调度的 Pod 请求 Kubelet 进行网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用 CNI&lt;/strong&gt;：Kubelet 调用 CNI 处理 Pod 的网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建网络命名空间&lt;/strong&gt;：CNI 为 Pod 创建一个网络命名空间，隔离其网络环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配 IP 地址&lt;/strong&gt;：CNI 通过其 IP 地址管理（IPAM）插件为 Pod 分配一个 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置网络接口&lt;/strong&gt;：CNI 在 Pod 的网络命名空间内设置必要的网络接口，将其连接到网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络设置完成&lt;/strong&gt;：Pod 通知 Kubelet 其网络设置已完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带有网络运行的 Pod&lt;/strong&gt;：Pod 现在已经运行，并且其网络已配置，可以与 Kubernetes 集群中的其他 Pod 和服务通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cni-process&#34;&gt;CNI 工作流程&lt;/h2&gt;
&lt;p&gt;容器网络接口（CNI）规范定义了容器如何配置网络，其中包括 &lt;code&gt;ADD&lt;/code&gt;、&lt;code&gt;CHECK&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;GC&lt;/code&gt; 和 &lt;code&gt;VERSION&lt;/code&gt; 五种操作。容器运行时通过调用各种 CNI 插件来执行这些操作，从而实现容器网络的动态管理和更新。&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant K as Kubelet
    participant P as Pod
    participant CNI as CNI Plugins
    participant CNII as Interface CNI Plugin
    participant CNIC as Chained CNI Plugin
    participant NS as Network Setup
    participant IPAM as IP Address Management

    K-&gt;&gt;+P: 调度 Pod
    P-&gt;&gt;K: 请求网络设置
    K-&gt;&gt;CNI: 调用 CNI 插件
    CNI-&gt;&gt;CNII: 调用接口插件
    CNII-&gt;&gt;NS: 设置网络接口
    CNII-&gt;&gt;CNIC: 调用链式插件
    CNIC-&gt;&gt;IPAM: 分配 IP 地址
    IPAM-&gt;&gt;CNIC: IP 地址已分配
    CNIC-&gt;&gt;NS: 应用网络策略
    CNIC--&gt;&gt;CNI: 链式配置完成
    CNI--&gt;&gt;K: 网络设置完成
    K-&gt;&gt;P: 带有网络运行的 Pod

    Note over CNI,CNIC: CNI插件可以是接口类型或链式类型
&lt;/pre&gt;

&lt;p&gt;为了详细说明序列图中描述的每个步骤，涉及 Kubelet、Pod、CNI 插件（包括接口和链式 CNI 插件）、网络设置和 IP 地址管理（IPAM）之间的交互，让我们深入了解这个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;调度 Pod&lt;/strong&gt;：Kubelet 安排一个 Pod 在节点上运行。这一步启动了 Kubernetes 集群中 Pod 的生命周期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求网络设置&lt;/strong&gt;：Pod 向 Kubelet 发出网络设置请求。这个请求触发了为 Pod 配置网络的过程，确保它可以在 Kubernetes 集群内进行通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用 CNI 插件&lt;/strong&gt;：Kubelet 调用配置的容器网络接口（CNI）插件。CNI 定义了一个标准化的方式，用于容器管理系统在 Linux 容器中配置网络接口。Kubelet 将必要的信息传递给 CNI 插件，以启动网络设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用接口插件&lt;/strong&gt;：CNI 框架调用一个接口 CNI 插件，负责为 Pod 设置主要的网络接口。这个插件可能会创建一个新的网络命名空间、连接一对 veth 或执行其他操作，以确保 Pod 具有所需的网络接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置网络接口&lt;/strong&gt;：接口 CNI 插件为 Pod 配置网络接口。这个设置包括分配 IP 地址、设置路由和确保接口准备好通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用链式插件&lt;/strong&gt;：在设置网络接口之后，接口 CNI 插件或 CNI 框架调用链式 CNI 插件。这些插件执行额外的网络配置任务，比如设置 IP 伪装、配置入口/出口规则或应用网络策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配 IP 地址&lt;/strong&gt;：作为链式过程的一部分，链式 CNI 插件中的一个可能涉及 IP 地址管理（IPAM）。IPAM 插件负责为 Pod 分配一个 IP 地址，确保每个 Pod 在集群或命名空间内具有唯一的 IP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 地址已分配&lt;/strong&gt;：IPAM 插件分配了一个 IP 地址，并将分配信息返回给调用插件。这些信息通常包括 IP 地址本身、子网掩码和可能的网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用网络策略&lt;/strong&gt;：链式 CNI 插件将任何指定的网络策略应用于 Pod 的网络接口。这些策略可以规定允许的入口和出口流量，确保根据集群的配置要求进行网络安全和隔离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链式配置完成&lt;/strong&gt;：一旦所有链式插件完成了它们的任务，Pod 的整体网络配置被认为已完成。CNI 框架或链中的最后一个插件向 Kubelet 发送信号，表明网络设置已完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络设置完成&lt;/strong&gt;：Kubelet 收到了 Pod 的网络设置完成的确认。此时，Pod 具有完全配置的网络接口，具有 IP 地址、路由规则和应用的网络策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带有网络运行的 Pod&lt;/strong&gt;：Pod 现在已经运行，并配置了网络。它可以与 Kubernetes 集群中的其他 Pod 通信，根据网络策略访问外部资源，并执行其指定的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是针对 &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#appendix-examples&#34; title=&#34;CNI 官方示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 官方示例&lt;/a&gt;
中的 &lt;code&gt;ADD&lt;/code&gt; 操作、&lt;code&gt;CHECK&lt;/code&gt; 操作和 &lt;code&gt;DELETE&lt;/code&gt; 操作的示例序列图以及详细说明。通过这些操作，容器运行时与 CNI 插件之间进行交互，实现容器网络配置的动态管理和更新。&lt;/p&gt;
&lt;h3 id=&#34;add&#34;&gt;ADD 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 ADD 操作的示例序列图以及详细说明：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant CR as Container Runtime
    participant PP as Portmap Plugin
    participant TP as Tuning Plugin
    participant BP as Bridge Plugin
    participant HLP as Host-local Plugin

    CR-&gt;&gt;PP: CNI_COMMAND=ADD
    PP--&gt;&gt;CR: Portmap 配置完成
    CR-&gt;&gt;TP: CNI_COMMAND=ADD
    TP--&gt;&gt;CR: Tuning 配置完成
    CR-&gt;&gt;BP: CNI_COMMAND=ADD
    BP-&gt;&gt;HLP: CNI_COMMAND=ADD
    HLP--&gt;&gt;BP: IPAM 配置完成
    BP--&gt;&gt;CR: Bridge 配置完成
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Portmap 插件&lt;/strong&gt;：容器运行时通过调用 Portmap 插件执行 ADD 操作，配置容器的端口映射。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap 配置完成&lt;/strong&gt;：Portmap 插件完成端口映射配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 ADD 操作，配置容器的网络调优参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning 配置完成&lt;/strong&gt;：Tuning 插件完成网络调优参数配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件&lt;/strong&gt;：容器运行时调用 Bridge 插件执行 ADD 操作，配置容器的网络接口和 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：在完成自身配置之前，Bridge 插件调用 Host-local 插件执行 ADD 操作，配置容器的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM 配置完成&lt;/strong&gt;：Host-local 插件作为 IP 地址管理（IPAM）的授权方，完成 IP 地址分配，并将结果返回给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 配置完成&lt;/strong&gt;：Bridge 插件完成网络接口和 IP 地址配置，并将结果返回给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器启动时，其所需的网络配置能够按照预期进行设置，包括端口映射、网络调优和 IP 地址分配等。&lt;/p&gt;
&lt;h3 id=&#34;check&#34;&gt;CHECK 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 CHECK 操作的示例序列图以及详细说明：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant CR as Container Runtime
    participant BP as Bridge Plugin
    participant HLP as Host-local Plugin
    participant TP as Tuning Plugin

    CR-&gt;&gt;BP: CNI_COMMAND=CHECK with prevResult
    BP-&gt;&gt;HLP: CNI_COMMAND=CHECK
    HLP--&gt;&gt;BP: 返回无错误
    BP--&gt;&gt;CR: 返回 0 返回码
    CR-&gt;&gt;TP: CNI_COMMAND=CHECK with prevResult
    TP--&gt;&gt;CR: 操作成功
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件进行检查&lt;/strong&gt;：容器运行时通过调用 Bridge 插件执行 CHECK 操作，检查容器的网络配置是否符合预期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：Bridge 插件调用 Host-local 插件执行 CHECK 操作，检查 IP 地址分配是否正常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回无错误&lt;/strong&gt;：Host-local 插件检查 IP 地址分配无异常，并返回无错误给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回 0 返回码&lt;/strong&gt;：Bridge 插件检查网络配置无异常，并返回 0 返回码给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件进行检查&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 CHECK 操作，检查网络调优参数是否符合预期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作成功&lt;/strong&gt;：Tuning 插件检查网络调优参数无异常，返回操作成功给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器运行期间，其网络配置和网络调优参数能够按照预期进行检查和验证，以确保网络配置的一致性和正确性。&lt;/p&gt;
&lt;h3 id=&#34;delete&#34;&gt;DELETE 操作示例&lt;/h3&gt;
&lt;p&gt;以下是 DELETE 操作的示例序列图以及详细说明：&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram
    participant CR as Container Runtime
    participant PP as Portmap Plugin
    participant TP as Tuning Plugin
    participant BP as Bridge Plugin
    participant HLP as Host-local Plugin

    CR-&gt;&gt;PP: CNI_COMMAND=DEL
    PP--&gt;&gt;CR: Portmap 删除完成
    CR-&gt;&gt;TP: CNI_COMMAND=DEL
    TP--&gt;&gt;CR: Tuning 删除完成
    CR-&gt;&gt;BP: CNI_COMMAND=DEL
    BP-&gt;&gt;HLP: CNI_COMMAND=DEL
    HLP--&gt;&gt;BP: IPAM 删除完成
    BP--&gt;&gt;CR: Bridge 删除完成
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Portmap 插件&lt;/strong&gt;：容器运行时通过调用 Portmap 插件执行 DELETE 操作，删除容器的端口映射配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap 删除完成&lt;/strong&gt;：Portmap 插件完成端口映射的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Tuning 插件&lt;/strong&gt;：容器运行时调用 Tuning 插件执行 DELETE 操作，删除容器的网络调优参数配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning 删除完成&lt;/strong&gt;：Tuning 插件完成网络调优参数的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器运行时调用 Bridge 插件&lt;/strong&gt;：容器运行时调用 Bridge 插件执行 DELETE 操作，删除容器的网络接口和 IP 地址配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 插件调用 Host-local 插件&lt;/strong&gt;：在完成自身删除之前，Bridge 插件调用 Host-local 插件执行 DELETE 操作，删除容器的 IP 地址分配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM 删除完成&lt;/strong&gt;：Host-local 插件完成 IP 地址分配的删除，并将结果返回给 Bridge 插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge 删除完成&lt;/strong&gt;：Bridge 插件完成网络接口和 IP 地址的删除，并将结果返回给容器运行时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作确保了在容器停止运行时，其所需的网络配置能够被正确清理和移除，以确保网络资源的有效释放和管理。&lt;/p&gt;
&lt;p&gt;通过对 ADD、CHECK 和 DELETE 操作的示例序列图及详细说明，可以清晰地了解容器运行时与 CNI 插件之间的交互过程，以及如何实现容器网络配置的动态管理和更新。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;CNI 为容器化环境中的网络管理提供了一种标准化的接口，通过与 CRI 的配合，确保了 Kubernetes 集群中容器的网络配置高效且一致。通过深入理解 CNI，开发者和系统管理员可以更好地管理和优化其容器网络。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md&#34; title=&#34;CNI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 规范&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

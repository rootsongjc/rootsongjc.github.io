<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - Cloud Native | Open Source | Community – TheNewStack</title>
    <link>https://jimmysong.io/tags/thenewstack/</link>
    <description>Recent content in TheNewStack on Jimmy Song - Cloud Native | Open Source | Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright &amp;copy; 2020 Jimmy Song 保留所有权利；基于 Hugo [educenter](https://github.com/themefisher/educenter-hugo)  主题构建</copyright>
    <lastBuildDate>Sun, 02 Jun 2019 18:13:19 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/thenewstack/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>TheNewStack 云原生 Devops 报告解读</title>
      <link>https://jimmysong.io/blog/cloud-native-devops-book/</link>
      <pubDate>Sun, 02 Jun 2019 18:13:19 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-native-devops-book/</guid>
      <description>
        
        
        &lt;p&gt;本书的主旨是：如果没有成熟的 DevOps 实践，云原生是玩转不起来的。DevOps 已经不是什么新鲜的话题，但到底什么是 &amp;ldquo;Cloud Native DevOps” 及如何实践 Cloud Native DevOps，这正是本书要探讨的内容。&lt;/p&gt;
&lt;p&gt;DevOps 正在经历一次转型，从自动化构建到声明式基础设施、微服务和 Serverless。大部分人对云原生存在误解，以为&lt;code&gt;云原生&lt;/code&gt;就是&lt;code&gt;运行在云上&lt;/code&gt;，其实云原生更偏向于一种理念，即应用的定义及架构方式，而不是将应用运行在哪里。而云上的 DevOps 与传统的 DevOps 有什么区别，开发者和运维人员在云原生时代如何转型？也许本书会给你答案。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书是由 &lt;a href=&#34;https://thenewstack.com&#34;&gt;TheNewStack&lt;/a&gt; 出品的免费电子书，可以在 &lt;a href=&#34;https://thenewstack.io/ebooks/devops/cloud-native-devops-2019/&#34;&gt;TheNewStack 网站&lt;/a&gt; 上获取本书的电子版，同时推荐 &lt;a href=&#34;https://thenewstack.io/ebooks&#34;&gt;TheNewStack 的电子书系列&lt;/a&gt;，囊括了容器、微服务、Kubernetes、云原生诸多主题，可以作为企业决策的参考读物。&lt;/p&gt;
&lt;p&gt;本书是 TheNewStack 编辑集结 DevOps 领域的专家在各种大会上的发言、演讲，有很多观点引用，并结合了一些调查问卷数据展示了一幅云原生 DevOps 的趋势与全景图，下文中我会找一些代表性的观点和图表来说明。&lt;/p&gt;
&lt;p&gt;下面是本书目录，一共分为三大部分：构建、部署和管理，其中前两个部分还给出了参考书目、示例研究等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;a.jpg&#34; alt=&#34;云原生 DevOps 目录&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;谁适合读这本书&#34;&gt;谁适合读这本书&lt;/h2&gt;
&lt;p&gt;IT 经理、CIO、团队领导者，希望规划自己公司或团队的云原生化 DevOps 的实践路径以面对大规模场景。&lt;/p&gt;
&lt;h2 id=&#34;云原生化的-devops&#34;&gt;云原生化的 DevOps&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;云原生是对业务价值和团队功能的重构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云原生化的 DevOps 在应用的管理上与原始的 DevOps 最大的区别就是——使用 YAML 文件配置的声明式基础设施（Declarative infrastructure）与应用程序的代码本身放在同一个存储库中，这些 &lt;code&gt;代码&lt;/code&gt; 将由开发团队来维护，而运维团队的职能将转变为基础设施的构建者，服务安全性、健壮性、可见性及耐用性的守护者。&lt;/p&gt;
&lt;p&gt;AWS 的 Serverless 布道师 Chris Munns 早已甚至预测到 2025 年非云供应商的运维人员将不复存在，虽然听上去有点危言耸听，但这也是为传统 IT 运维人员的职业生涯敲响的警钟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;b.jpg&#34; alt=&#34;云原生 DevOps 高亮部分&#34;&gt;&lt;/p&gt;
&lt;p&gt;开发接手了原来传统运维的一些职责，如配置和发布，减少了每次发布的成本，而运维的职责向管理整个系统的复杂性转变，例如转变为 SRE（Site Reliability Engineer）。&lt;/p&gt;
&lt;h2 id=&#34;工作流自动化的价值&#34;&gt;工作流自动化的价值&lt;/h2&gt;
&lt;p&gt;DevOps 的原始教义：DevOps 不是一种工具或流程，而是一种重视整个组织的持续沟通、协作、集成和自动化的实践。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;c.jpg&#34; alt=&#34;工作流自动化的五个案例&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据自动化的驱动力及持续时间的长短，将 Workflow Automation 划分为五个类别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务流程自动化&lt;/li&gt;
&lt;li&gt;分布式系统通信&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;编排&lt;/li&gt;
&lt;li&gt;决策自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运维需要做出的转变&#34;&gt;运维需要做出的转变&lt;/h2&gt;
&lt;p&gt;Damon Edwards 提出于运维需要面对的四个灾难（&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%90%AF%E7%A4%BA%E5%BD%95%E4%B8%AD%E7%9A%84%E5%9B%9B%E9%AA%91%E5%A3%AB&#34;&gt;圣经启示录中的四骑士&lt;/a&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Silos（孤岛）&lt;/li&gt;
&lt;li&gt;Ticket queues（无尽的低效的工单）&lt;/li&gt;
&lt;li&gt;Toil（干脏活累活的辛勤）&lt;/li&gt;
&lt;li&gt;Low trust（低信任度）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要向云原生 DevOps 转变就要克服以上几个问题。&lt;/p&gt;
&lt;h2 id=&#34;devops-领域的扩展&#34;&gt;DevOps 领域的扩展&lt;/h2&gt;
&lt;p&gt;本书第三章中提到 DevOps 的领域扩展到 Security 和 Networking。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了维持合规的编程语言&lt;/li&gt;
&lt;li&gt;容器镜像扫描&lt;/li&gt;
&lt;li&gt;基于策略的网络安全&lt;/li&gt;
&lt;li&gt;金丝雀测试&lt;/li&gt;
&lt;li&gt;运行时的威胁检测&lt;/li&gt;
&lt;li&gt;日志分析&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes中的CI/CD</title>
      <link>https://jimmysong.io/blog/ci-cd-in-kubernetes/</link>
      <pubDate>Thu, 14 Jun 2018 20:33:24 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/ci-cd-in-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;众所周知Kubernetes并不提供代码构建、发布和部署，所有的这些工作都是由CI/CD工作流完成的，最近TheNewStack又出了本小册子（117页）介绍了Kubernetes中CI/CD的现状。下载本书的PDF请访问：&lt;a href=&#34;https://thenewstack.io/ebooks/kubernetes/ci-cd-with-kubernetes/&#34;&gt;https://thenewstack.io/ebooks/kubernetes/ci-cd-with-kubernetes/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本书的作者有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rob Scott：ReactiveOps公司的SRE&lt;/li&gt;
&lt;li&gt;Janakiram MSV：Janakiram &amp;amp; Associates 的首席分析师&lt;/li&gt;
&lt;li&gt;Craig Martin：Kenzan的高级副总裁&lt;/li&gt;
&lt;li&gt;Container Solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本小册子里主要主要介绍了以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DevOps模式&lt;/li&gt;
&lt;li&gt;云原生应用模式&lt;/li&gt;
&lt;li&gt;使用Spinnaker做持续交付&lt;/li&gt;
&lt;li&gt;云原生时代的监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;devops模式&#34;&gt;DevOps模式&lt;/h3&gt;
&lt;p&gt;这一章从一些流行的自动化运维工具讲起，比如Chef、Puppet等，引申出CI/CD流水线，进而引出Docker和DevOps，将容器如何解除开发和运维之间的隔阂，但同时也带来了一些挑战，比如频繁的发布变更如何控制，如何控制容器集群的行为，如何拆分应用到容器之中等。这是一个专门用于容器编排调度的工具呼之欲出，Kubernetes的出现彻底改变了局面，可以说它直接改变了应用的基础架构。&lt;/p&gt;
&lt;p&gt;Kubernetes细化的应用程序的分解粒度，同时将服务发现、配置管理、负载均衡和健康检查等作为基础设施的功能，简化了应用程序的开发。&lt;/p&gt;
&lt;p&gt;而Kubernetes这种声明式配置尤其适合CI/CD流程，况且现在还有如Helm、Draft、Spinnaker、Skaffold等开源工具可以帮助我们发布Kuberentes应用。&lt;/p&gt;
&lt;p&gt;有了基于Kubernetes的CI/CD流程后，又诞生了GitOps（&lt;a href=&#34;http://weave.works&#34;&gt;http://weave.works&lt;/a&gt;的博客中有很多相关文章）和SecOps（Security Operation）。&lt;/p&gt;
&lt;h3 id=&#34;云原生应用模式&#34;&gt;云原生应用模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;云原生是通过构建团队、文化和技术，利用自动化和架构来管理系统的复杂性和解放生产力。——Joe Beda，Heptio CTO，联合创始人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一章的重点是给出了云原生应用的10条关键属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用轻量级的容器打包&lt;/li&gt;
&lt;li&gt;使用最合适的语言和框架开发&lt;/li&gt;
&lt;li&gt;以松耦合的微服务方式设计&lt;/li&gt;
&lt;li&gt;以API为中心的交互和协作&lt;/li&gt;
&lt;li&gt;无状态和有状态服务在架构上界限清晰&lt;/li&gt;
&lt;li&gt;不依赖于底层操作系统和服务器&lt;/li&gt;
&lt;li&gt;部署在自服务、弹性的云基础设施上&lt;/li&gt;
&lt;li&gt;通过敏捷的DevOps流程管理&lt;/li&gt;
&lt;li&gt;自动化能力&lt;/li&gt;
&lt;li&gt;通过定义和策略驱动的资源分配&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者然后将应用程序架构中的不同组件映射到云原生的工作负载中。&lt;/p&gt;
&lt;p&gt;这也是DevOps需要关注的部分，如何将云原生的组件映射为Kubernetes的原语（即Kubernetes里的各种资源对象和概念组合）呢？&lt;/p&gt;
&lt;p&gt;总结概括为以下10条：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要直接部署裸的Pod。&lt;/li&gt;
&lt;li&gt;为工作负载选择合适的Controller。&lt;/li&gt;
&lt;li&gt;使用Init容器确保应用程序被正确的初始化。&lt;/li&gt;
&lt;li&gt;在应用程序工作负载启动之前先启动service。&lt;/li&gt;
&lt;li&gt;使用Deployment history来回滚到历史版本。&lt;/li&gt;
&lt;li&gt;使用ConfigMap和Secret来存储配置。&lt;/li&gt;
&lt;li&gt;在Pod里增加Readiness和Liveness探针。&lt;/li&gt;
&lt;li&gt;给Pod这只CPU和内存资源限额。&lt;/li&gt;
&lt;li&gt;定义多个namespace来限制默认service范围的可视性。&lt;/li&gt;
&lt;li&gt;配置HPA来动态扩展无状态工作负载。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用spinnaker进行持续交付&#34;&gt;使用Spinnaker进行持续交付&lt;/h3&gt;
&lt;p&gt;作者首先讲到了Spinnaker的各种特性，比如面向微服务啦，云原生的交付工具啦，可视化的交付和基础设施啦，支持多个region，支持容器和Kubernetes等等，不一而足，感兴趣大家可以自己看下报告或者登陆Spinnaker官网&lt;a href=&#34;https://www.spinnaker.io&#34;&gt;https://www.spinnaker.io&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;总之作者就是想说Spinnaker很好很强大啦，足以满足您对云原生应用CI/CD的需求。&lt;/p&gt;
&lt;h3 id=&#34;云原生时代的监控&#34;&gt;云原生时代的监控&lt;/h3&gt;
&lt;p&gt;监控是为了实现系统的可观察性，不要以为监控就是简单的出个监控页面，监控其实包括以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志收集&lt;/li&gt;
&lt;li&gt;监控和指标度量&lt;/li&gt;
&lt;li&gt;追踪&lt;/li&gt;
&lt;li&gt;告警和可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要把其中任何一个方面做好都不容易。作者主要讲述的Prometheus和Grafana的开源监控方案。这一章我不详述，感兴趣大家可以查看报告原文。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Fortio</title>
    <link>https://jimmysong.io/tags/fortio/</link>
    <description>Recent content in Fortio on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    <lastBuildDate>Thu, 05 Sep 2024 10:25:01 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/fortio/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>Istio Ambient 模式：无 Sidecar Istio 如何让应用更快？</title>
      <link>https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/</link>
      <pubDate>Thu, 05 Sep 2024 10:25:01 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/</guid>
      <description>
        
        
        &lt;p&gt;Ambient 模式是 2022 年在 &lt;a href=&#34;https://thenewstack.io/simplifying-cluster-connectivity-with-istio-service-mesh/&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 中引入的新型无 sidecar 数据平面。当今年 5 月 &lt;a href=&#34;https://thenewstack.io/ambient-mesh-sidestepping-the-sidecar/&#34; title=&#34;Ambient 模式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient 模式&lt;/a&gt; 达到 &lt;a href=&#34;https://istio.io/latest/blog/2024/ambient-reaches-beta/&#34; title=&#34;Beta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beta&lt;/a&gt; 阶段时，我观察到用户开始试用并运行负载测试，以理解将应用添加到网格后的性能影响。&lt;/p&gt;
&lt;p&gt;受到 &lt;a href=&#34;https://a-cup-of.coffee/blog/istio/#with-istio-ambient&#34; title=&#34;Quentin Joly 的博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quentin Joly 的博客&lt;/a&gt; 关于 Istio 在 Ambient 模式下的惊人性能的启发，以及来自社区其他用户有时应用在 &lt;a href=&#34;https://thenewstack.io/istio-1-23-drops-the-sidecars-for-a-simpler-ambient-mesh/&#34; title=&#34;Ambient 模式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient 模式&lt;/a&gt; 下稍快的反馈，我决定自己验证这些结果。&lt;/p&gt;
&lt;h2 id=&#34;测试环境&#34;&gt;测试环境&lt;/h2&gt;
&lt;p&gt;我使用了一个拥有 256GB RAM 和每个节点 32 核 CPU 的三节点 Kubernetes 集群。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f1.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f1.webp&#34; data-width=&#34;936&#34; data-height=&#34;572&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;Istio 使用了一些工具来简化一致性的基准测试。首先，我们使用一个叫做 &lt;a href=&#34;https://github.com/fortio/fortio&#34; title=&#34;Fortio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fortio&lt;/a&gt; 的负载测试工具，它以指定的每秒请求数 (RPS) 运行，记录执行时间的直方图并计算百分位数，例如 P99，即 99% 的请求在此时间内完成。&lt;/p&gt;
&lt;p&gt;我们还提供了一个叫做 &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34; title=&#34;Bookinfo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bookinfo&lt;/a&gt; 的示例应用，其中包括用 Python、Java、Node.js 和 Ruby 编写的微服务。&lt;/p&gt;
&lt;p&gt;每个 Bookinfo 部署都有两个副本，这些副本均匀分布在三个工作节点上。使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity&#34; title=&#34;pod anti-affinity rule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pod anti-affinity rule&lt;/a&gt;，我确保 Fortio 被放置在与 &lt;a href=&#34;https://github.com/istio/istio/tree/master/samples/bookinfo/src/details&#34; title=&#34;details&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;details&lt;/a&gt; 服务不同的节点上。&lt;/p&gt;
&lt;h2 id=&#34;初始测试结果&#34;&gt;初始测试结果&lt;/h2&gt;
&lt;p&gt;我从 Istio v1.22.3 版本安装了 Bookinfo 应用。使用 Fortio 工具对单个 Bookinfo 服务（例如 details）或完整的 Bookinfo 应用进行负载驱动，我注意到在将所有服务添加到 ambient 网格后，延迟影响 &lt;strong&gt;接近零&lt;/strong&gt;。大多数时间它们的增加范围在 0-5% 之间，用于平均值或 P90。我一致注意到 Istio 的 details 服务在 ambient 模式下稍微快一点，就像 Quentin 在他的博客中报告的那样。&lt;/p&gt;
&lt;h3 id=&#34;对-details-服务进行负载测试&#34;&gt;对 Details 服务进行负载测试&lt;/h3&gt;
&lt;p&gt;我进行了与 Quentin 相同的测试，通过 10 个连接发送 100 RPS 到 details 服务，并收集了无网格和 ambient 的结果。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f2.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f2.webp&#34; data-width=&#34;1024&#34; data-height=&#34;381&#34; alt=&#34;image&#34; data-caption=&#34;无网格：details 服务 100 RPS。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;无网格：details 服务 100 RPS。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f3.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f3.webp&#34; data-width=&#34;1024&#34; data-height=&#34;382&#34; alt=&#34;image&#34; data-caption=&#34;Ambient：details 服务 100 RPS。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ambient：details 服务 100 RPS。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;就像 Quentin 一样，我不得不进行多次测试以验证 ambient 模式比无网格模式略有性能提升——这很难让人相信！对于 Bookinfo 的 details 服务来说，加入 ambient 模式平均降低了 6-11% 的延迟——以及添加了 mTLS 和 L4 观测！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fortio 对 details&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;差异&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;无网格运行 1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.89ms&lt;/td&gt;
&lt;td&gt;0.64ms&lt;/td&gt;
&lt;td&gt;0.74ms&lt;/td&gt;
&lt;td&gt;0.85ms&lt;/td&gt;
&lt;td&gt;2.67ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平均慢 11%，P90 慢 5%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient 运行 1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.80ms&lt;/td&gt;
&lt;td&gt;0.6ms&lt;/td&gt;
&lt;td&gt;0.71ms&lt;/td&gt;
&lt;td&gt;0.81ms&lt;/td&gt;
&lt;td&gt;1.4ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;无网格运行 2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.86ms&lt;/td&gt;
&lt;td&gt;0.65ms&lt;/td&gt;
&lt;td&gt;0.75ms&lt;/td&gt;
&lt;td&gt;0.86ms&lt;/td&gt;
&lt;td&gt;1.71ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平均慢 6%，P90 慢 4%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient 运行 2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.81ms&lt;/td&gt;
&lt;td&gt;0.61ms&lt;/td&gt;
&lt;td&gt;0.72ms&lt;/td&gt;
&lt;td&gt;0.83ms&lt;/td&gt;
&lt;td&gt;1.56ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;无网格运行 3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.90ms&lt;/td&gt;
&lt;td&gt;0.65ms&lt;/td&gt;
&lt;td&gt;0.76ms&lt;/td&gt;
&lt;td&gt;0.88ms&lt;/td&gt;
&lt;td&gt;1.92ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平均慢 10%，P90 慢 5%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient 运行 3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.82ms&lt;/td&gt;
&lt;td&gt;0.63ms&lt;/td&gt;
&lt;td&gt;0.72ms&lt;/td&gt;
&lt;td&gt;0.84ms&lt;/td&gt;
&lt;td&gt;1.5ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;表 1: Fortio 对 details 服务 100 RPS 10 连接。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;为什么应用有时在-ambient-mesh-中更快&#34;&gt;为什么应用有时在 Ambient Mesh 中更快？&lt;/h2&gt;
&lt;p&gt;我们被教导说服务网格会增加延迟。Quentin 的结果，这里复制的结果，展示了一个工作负载在通过服务网格运行时&lt;em&gt;更快&lt;/em&gt;的案例。这是怎么回事？&lt;/p&gt;
&lt;h3 id=&#34;第一种理论&#34;&gt;第一种理论&lt;/h3&gt;
&lt;p&gt;当您的应用位于 ambient 模式 中时，负载请求首先通过一个轻量级的本地节点代理叫做 &lt;a href=&#34;https://istio.io/latest/docs/ambient/overview/#ztunnel&#34; title=&#34;ztunnel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ztunnel&lt;/a&gt;，然后传送到目的地 ztunnel，再向服务传送。details 服务使用带有 Webrick 库的 HTTP/1.1，我们已经看到旧的或配置不良的 HTTP 库中存在连接管理和保持活动状态的行为不佳。我的第一个假设是，当客户端和服务器位于不同节点时，通过客户端和服务器 ztunnels 代理实际上可能更快，如果应用没有使用高效的 HTTP/2 连接的话。Ztunnel 使用连接池和 &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_tunnel&#34; title=&#34;HTTP Connect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP Connect&lt;/a&gt; 建立节点之间的安全通道，以在负载下利用并行性和 HTTP/2 流多路复用。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f4.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f4.webp&#34; data-width=&#34;936&#34; data-height=&#34;558&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;然而，这个理论有一些挑战。为什么我只在 details 服务上一致观察到这个，而不是任何其他 Bookinfo 服务？&lt;/p&gt;
&lt;p&gt;进一步研究，我发现我们的 Fortio 负载工具默认启用了&lt;a href=&#34;https://github.com/fortio/fortio/blob/8a7d9112667e637139c788b68cb063f456d20cb4/bincommon/commonflags.go#L55&#34; title=&#34;连接保持活动&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;连接保持活动&lt;/a&gt;。使用 10 个来自 Fortio 的连接到 details 服务和 details 服务（使用 WEBrick Ruby 库）尊重连接保持活动设置，连接可以有效地被重用，无需 ambient。&lt;/p&gt;
&lt;h3 id=&#34;用-connection-close-进行负载测试&#34;&gt;用 Connection Close 进行负载测试&lt;/h3&gt;
&lt;p&gt;接下来，我探索了使用设置 &lt;code&gt;Connection: close&lt;/code&gt; 标头的同样负载测试。这强制禁用任何 HTTP 连接池，这是测试这个假设的好方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;url&amp;#34;:&amp;#34;http://details:9080/details/0&amp;#34;, &amp;#34;c&amp;#34;:&amp;#34;10&amp;#34;, &amp;#34;qps&amp;#34;: &amp;#34;100&amp;#34;, &amp;#34;n&amp;#34;: &amp;#34;2000&amp;#34;, &amp;#34;async&amp;#34;:&amp;#34;on&amp;#34;, &amp;#34;save&amp;#34;:&amp;#34;on&amp;#34;}}&amp;#39;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost:8081/fortio/rest/run?jsonPath=.metadata&amp;#34;&lt;/span&gt; -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Connection: close&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f5.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f5.webp&#34; data-width=&#34;1024&#34; data-height=&#34;397&#34; alt=&#34;image&#34; data-caption=&#34;无网格：details 服务 100 RPS 10 连接带有 connection close。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;无网格：details 服务 100 RPS 10 连接带有 connection close。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f6.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f6.webp&#34; data-width=&#34;1024&#34; data-height=&#34;393&#34; alt=&#34;image&#34; data-caption=&#34;Ambient：details 服务 100 RPS 10 连接带有 connection close。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ambient：details 服务 100 RPS 10 连接带有 connection close。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fortio 对&lt;/strong&gt; &lt;strong&gt;details&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;差异&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1.90ms&lt;/td&gt;
&lt;td&gt;1.72ms&lt;/td&gt;
&lt;td&gt;2.28ms&lt;/td&gt;
&lt;td&gt;2.77ms&lt;/td&gt;
&lt;td&gt;3.98ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2.06ms&lt;/td&gt;
&lt;td&gt;2.15ms&lt;/td&gt;
&lt;td&gt;2.65ms&lt;/td&gt;
&lt;td&gt;2.94ms&lt;/td&gt;
&lt;td&gt;4ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平均慢 8%，P90 慢 6%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;表 2: Fortio 对 details 服务 100 RPS 10 连接带有 connection close。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;与表 1 的结果相比，表 2 的响应时间明显更高，这是预期的，因为每个连接在 details 服务响应后立即关闭。考虑到 P50、P75、P90 和 P99 都从带有 connection close 的 ambient 运行中变慢，似乎可以安全排除第一理论中的 ztunnel 连接池可能使请求更快。&lt;/p&gt;
&lt;h3 id=&#34;第二种理论&#34;&gt;第二种理论&lt;/h3&gt;
&lt;p&gt;我注意到在我们新的 Istio v1.23 版本中的 details 和 productpage 服务中有一个与性能相关的 &lt;a href=&#34;https://github.com/istio/istio/pull/51428/files&#34; title=&#34;PR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PR&lt;/a&gt;。对于 details 服务，PR 为 details WEBrick 服务器启用了 &lt;a href=&#34;https://brooker.co.za/blog/2024/05/09/nagle.html&#34; title=&#34;TCP_NODELAY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP_NODELAY&lt;/a&gt; 标志，这将减少来自 details 服务响应时间的不必要延迟（高达 &lt;a href=&#34;https://vorner.github.io/2020/11/06/40-ms-bug.html&#34; title=&#34;40ms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;40ms&lt;/a&gt;）。对于 productpage 服务，PR 在传入请求上启用了保持活动状态，这将重用现有的传入连接，从而提高性能。&lt;/p&gt;
&lt;p&gt;包含修复的新更新的 details 部署中，我重复了通过 10 个连接发送 100 RPS 到 details 服务的相同测试。无网格和 ambient 的结果非常接近，所以我进行了三次测试以确保结果的一致性。下面是每个场景的第一次运行的截图：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f7.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f7.webp&#34; data-width=&#34;1024&#34; data-height=&#34;330&#34; alt=&#34;image&#34; data-caption=&#34;无网格：新 details 服务 100 RPS 10 连接。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;无网格：新 details 服务 100 RPS 10 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f8.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f8.webp&#34; data-width=&#34;1024&#34; data-height=&#34;332&#34; alt=&#34;image&#34; data-caption=&#34;Ambient：新 details 服务 100 RPS 10 连接。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ambient：新 details 服务 100 RPS 10 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我为每个场景的三次运行建立了一个表格：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/t1.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/t1.webp&#34; data-width=&#34;2064&#34; data-height=&#34;324&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;表 3: Fortio 对新 details 服务 100 RPS 10 连接。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;与表 1 的先前结果相比，表 3 的无网格数字有了相当大的改进（在更高百分比下更显著地超过 ambient 数字），现在接近于 ambient 数字。Ztunnel 默认启用了 &lt;a href=&#34;https://github.com/istio/ztunnel/pulls?q=is%3Apr&amp;#43;is%3Aclosed&amp;#43;TCP_NODELAY&#34; title=&#34;TCP_NODELAY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP_NODELAY&lt;/a&gt;，这有助于 ambient 性能在表 1 中超过无网格，当旧的 details 服务没有启用 TCP_NODELAY 时。当新的 details 服务启用了 TCP_NODELAY 时，它也稍微提高了 ambient 的响应时间。&lt;/p&gt;
&lt;p&gt;表 3 还显示，在此类型的负载测试中，无网格和 ambient 运行之间的平均、P50、P75 和 P90 几乎没有差异。这些运行之间的差异可能只是噪音，除了 P99，无网格始终比 ambient 慢 8% 或更多。&lt;/p&gt;
&lt;h3 id=&#34;第三种理论&#34;&gt;第三种理论&lt;/h3&gt;
&lt;p&gt;继续审查表 3 的测试结果，为什么在有额外跳转到 ztunnel pod 和 ambient 提供的如 mTLS 和 L4 观测等显著优势时，无网格和 ambient 之间的延迟相似？对于 P99 情况，为什么 details 服务在 ambient 模式下始终更快？&lt;/p&gt;
&lt;p&gt;Ztunnel 提供了出色的读写缓冲管理，并通过 HTTP/2 多路复用，可以有效地最小化或有时甚至消除通过客户端和服务器 ztunnel pod 的额外跳转所增加的开销。我决定通过在两个 Fortio 和 details 服务的 Kubernetes 工作节点上进入并附加 strace 来测量这一点，同时过滤掉无关的跟踪：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;strace -fp &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;pid&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; -e &lt;span class=&#34;nv&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;write,writev,read,recvfrom,sendto,readv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;无网格和 ambient 情况下的 details 服务的 strace 输出是相似的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;…read(9, &amp;#34;GET /details/0 HTTP/1.1\r\nHost: d&amp;#34;..., 8192) = 118write(9, &amp;#34;HTTP/1.1 200 OK\r\nContent-Type: a&amp;#34;..., 180) = 180write(9, &amp;#34;{&amp;#34;id&amp;#34;:0,&amp;#34;author&amp;#34;:&amp;#34;William Shakes&amp;#34;..., 178) = 178write(2, &amp;#34;192.168.239.19 - - [13/Aug/2024:&amp;#34;..., 80) = 80…
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;输出 1: 无网格或 ambient —— 附加 strace 到 details 服务的 PID。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;无网格和 ambient 情况下的 Fortio 服务的 strace 输出不同。在无网格情况下，我们看到 Fortio 执行了两次读取，一次用于 HTTP 头部，另一次用于正文。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;…read(13, &amp;#34;HTTP/1.1 200 OK\r\nContent-Type: a&amp;#34;..., 4096) = 180read(13, &amp;#34;{&amp;#34;id&amp;#34;:0,&amp;#34;author&amp;#34;:&amp;#34;William Shakes&amp;#34;..., 4096) = 178…write(19, &amp;#34;GET /details/0 HTTP/1.1\r\nHost: d&amp;#34;..., 118) = 118 …
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;输出 2: 无网格 —— 附加 strace 到 Fortio 的 PID。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在 ambient 情况下，我们始终只看到一个读取，用于同时获取头部和正文。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;…read(19, &amp;#34;HTTP/1.1 200 OK\r\nContent-Type: a&amp;#34;..., 4096) = 358…write(19, &amp;#34;GET /details/0 HTTP/1.1\r\nHost: d&amp;#34;..., 118) = 118…
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;输出 3: Ambient 模式 —— 附加 strace 到 Fortio 的 PID。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;为什么会这样？这是有道理的，因为 write 调用完全基于应用行为，而这在这种情况下没有变化。Ambient 将这些多个应用写入合并为单个网络写入，并隐含地在对等端进行单个读取。&lt;/p&gt;
&lt;p&gt;在上述测试场景中，我观察到 Fortio 服务在启用 ambient 时系统调用总数减少了 60%。这非常&lt;strong&gt;重要&lt;/strong&gt;，并解释了在 peak 时 Fortio pod 的延迟和 CPU 使用量减少约 25% 的大部分原因。系统调用的减少超过了 mTLS 和 ztunnel 的其他功能的成本。我预计这种模式在企业中会相当常见，因为一些 HTTP 库和应用在缓冲和刷新方面做得更好，而一些则不太好。这通常与应用的年龄和它们构建时使用的 SDK 相关。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f9.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f9.webp&#34; data-width=&#34;1024&#34; data-height=&#34;504&#34; alt=&#34;image&#34; data-caption=&#34;无网格和 ambient 运行：details 服务 100 QPS 10 连接。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;无网格和 ambient 运行：details 服务 100 QPS 10 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;整个-bookinfo-应用怎么样&#34;&gt;整个 Bookinfo 应用怎么样？&lt;/h2&gt;
&lt;p&gt;在更新了 details 和 productpage 部署之后，我开始通过 100 个连接发送 1000 RPS 到 Bookinfo 应用，并观察到无网格和 ambient 的优异结果。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f10.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f10.webp&#34; data-width=&#34;1024&#34; data-height=&#34;318&#34; alt=&#34;image&#34; data-caption=&#34;无网格：新 Bookinfo 应用 1000 RPS 100 连接。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;无网格：新 Bookinfo 应用 1000 RPS 100 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f11.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f11.webp&#34; data-width=&#34;1024&#34; data-height=&#34;316&#34; alt=&#34;image&#34; data-caption=&#34;无网格：新 Bookinfo 应用 1000 RPS 100 连接。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;无网格：新 Bookinfo 应用 1000 RPS 100 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fortio 对 Bookinfo&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均差异&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1.39ms&lt;/td&gt;
&lt;td&gt;1.32ms&lt;/td&gt;
&lt;td&gt;1.42ms&lt;/td&gt;
&lt;td&gt;1.67ms&lt;/td&gt;
&lt;td&gt;2.19ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1.40ms&lt;/td&gt;
&lt;td&gt;1.34ms&lt;/td&gt;
&lt;td&gt;1.48ms&lt;/td&gt;
&lt;td&gt;1.68ms&lt;/td&gt;
&lt;td&gt;2.94ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平均和 P90 均慢不到 1%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;表 4: Fortio 对新 Bookinfo 应用 1000 RPS 100 连接。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;作为对比，我还针对 v1.22.3 版本中附带的旧 Bookinfo 示例进行了同样的测试，你可以看到新 Bookinfo 在响应时间上取得了 &lt;strong&gt;5-10 倍&lt;/strong&gt; 的提升，无论是无网格还是 ambient！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fortio 对 Bookinfo&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均差异&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;6.35ms&lt;/td&gt;
&lt;td&gt;4.68ms&lt;/td&gt;
&lt;td&gt;7.44ms&lt;/td&gt;
&lt;td&gt;11.4ms&lt;/td&gt;
&lt;td&gt;36.63ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;6.74ms&lt;/td&gt;
&lt;td&gt;4.9ms&lt;/td&gt;
&lt;td&gt;7.79ms&lt;/td&gt;
&lt;td&gt;12.12ms&lt;/td&gt;
&lt;td&gt;41.14ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;慢 6%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;表 5: Fortio 对旧 Bookinfo 应用 1000 RPS 100 连接。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;将负载增加到 4000 RPS 和 400 连接，并使用新 Bookinfo 部署：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f12.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f12.webp&#34; data-width=&#34;1024&#34; data-height=&#34;317&#34; alt=&#34;image&#34; data-caption=&#34;Ambient：新 Bookinfo 应用 4000 RPS 400 连接。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ambient：新 Bookinfo 应用 4000 RPS 400 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f13.webp&#34; data-img=&#34;/trans/ambient-mesh-can-sidecar-less-istio-make-applications-faster/f13.webp&#34; data-width=&#34;1024&#34; data-height=&#34;315&#34; alt=&#34;image&#34; data-caption=&#34;Ambient：新 Bookinfo 应用 4000 RPS 400 连接。&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ambient：新 Bookinfo 应用 4000 RPS 400 连接。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;响应时间依然很好，远远优于只有 1000 RPS 和 100 连接的旧 Bookinfo 应用（表 5）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fortio 对 Bookinfo&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P50&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P75&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P90&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;P99&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;平均差异&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;无网格&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1.54ms&lt;/td&gt;
&lt;td&gt;1.33ms&lt;/td&gt;
&lt;td&gt;1.54ms&lt;/td&gt;
&lt;td&gt;2.25ms&lt;/td&gt;
&lt;td&gt;3.98ms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1.58ms&lt;/td&gt;
&lt;td&gt;1.37ms&lt;/td&gt;
&lt;td&gt;1.57ms&lt;/td&gt;
&lt;td&gt;2.33ms&lt;/td&gt;
&lt;td&gt;4.9ms&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平均慢 3%，P90 慢 4%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;表 6: Fortio 对新 Bookinfo 应用 4000 RPS 400 连接。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;很高兴看到 Bookinfo 能够在 4000 RPS 下无错误地运行，而且 ambient 模式比无网格慢 3-4%，但带来了传输中加密的 mTLS 和 L4 观测的所有好处。我记得我之前只能在旧 Bookinfo 应用中达到最高 1200 RPS，这已经导致了少量的错误。现在我可以增加到 4000 或更高 RPS 而不出现错误。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在 L4 上，Ambient 模式只引入了非常微小的影响——偶尔甚至可以自动&lt;strong&gt;改善&lt;/strong&gt;！— 用户应用的延迟。结合简单的用户体验，通过标记命名空间以将您的应用注册到 ambient 而无需重启任何工作负载，它为用户提供了我们初衷中预期的愉快体验。&lt;/p&gt;
&lt;p&gt;我想感谢所有 Istio 维护者，他们构建了这样一个令人愉快的项目，以及为 Istio 项目提供测试基础设施的 &lt;a href=&#34;https://www.cncf.io/community-infrastructure-lab/&#34; title=&#34;CNCF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt;。我还要感谢 Quentin Joly 和许多提供了“ambient 有时比无网格稍快”的反馈的用户，这促使我进行了上述基准测试，亲身体验了在负载下的改善或微小的延迟影响。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

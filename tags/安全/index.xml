<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 安全</title>
    <link>https://jimmysong.io/tags/%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in 安全 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>rootsongjc@gmail.com (Jimmy Song)</managingEditor>
    <webMaster>rootsongjc@gmail.com (Jimmy Song)</webMaster>
    <lastBuildDate>Thu, 08 Aug 2024 18:01:48 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
      
         
        
                                                         
                                                         
                           
    <item>
      <title>解密 Cilium 原生认证功能</title>
      <link>https://jimmysong.io/trans/cilium-native-authentication/</link>
      <pubDate>Thu, 08 Aug 2024 18:01:48 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/cilium-native-authentication/</guid>
      <description>
        
        
        &lt;p&gt;我们已经讨论了 Cilium 一段时间了，但是这个话题有很多值得关注的地方，我们知道我们会再次回到这个话题。今天，我建议我们探索一个用于认证工作负载的功能。在讨论这个话题之前，我们需要一些定义。&lt;/p&gt;
&lt;p&gt;我们的议程将按照以下顺序进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解 Cilium 认证功能&lt;/li&gt;
&lt;li&gt;尝试认证功能&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cilium-认证功能&#34;&gt;Cilium 认证功能&lt;/h2&gt;
&lt;h3 id=&#34;为什么我们需要认证&#34;&gt;为什么我们需要认证&lt;/h3&gt;
&lt;p&gt;在基于微服务的架构中，安全是一个巨大的话题。在 Kubernetes 环境中，我们可以查看网络，并通过限制只允许必要端口和协议的流量来实施最小权限原则。在这种情况下，我们可以依赖网络策略。例如，这个策略拒绝 &lt;code&gt;basic&lt;/code&gt; 命名空间中的所有入站流量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default-deny-all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;basics&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个策略仅允许标有 &lt;code&gt;app=userprofile&lt;/code&gt; 标签的 pod 在端口 &lt;code&gt;8082&lt;/code&gt; 上从带有标签 &lt;code&gt;tier=front&lt;/code&gt; 和 &lt;code&gt;app=tripsinsights&lt;/code&gt; 的命名空间中的 pod 接收流量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;allow-tripviewer-ingress-apiprofile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;userprofile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tripinsights&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8082&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这可能还不够，全局管理也相当困难，这是分布式安全的悖论。&lt;/p&gt;
&lt;p&gt;我们在之前的文章中谈到了服务网格，其目的是为网络流量提供一个集中的控制平面。我们还看到，在标准化的倡议中，我们有一些特定的流量控制对象，其中包括了认证功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;access.smi-spec.io/v1alpha4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IdentityBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service-a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schemes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podLabelSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service-a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spiffeIdentities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;cluster.local/ns/default/sa/service-a&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;federated.trustdomain/boundary/boundaryName/identifierType/identifier&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service-a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们将在 Cilium 服务网格中，尤其是基于身份的安全性方面探讨这一点。在基础设施层拥有这样的功能是有趣的，因为应用层不总是能够包含认证功能，尤其是当我们考虑多服务时。最多，不幸的是，我们可能在前端获得认证，但不会更多。这里，我们提出了增加基于身份的安全性的建议。&lt;/p&gt;
&lt;p&gt;让我们看看它是如何工作的。&lt;/p&gt;
&lt;h3 id=&#34;cilium-认证功能的底层原理&#34;&gt;Cilium 认证功能的底层原理&lt;/h3&gt;
&lt;p&gt;认证意味着，某种程度上，身份。正如之前在 smi 规范中暗示的，并在 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/mutual-authentication/mutual-authentication/#identity-management&#34; title=&#34;Cilium 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 文档&lt;/a&gt;中记录的，所使用的技术是 &lt;a href=&#34;https://spiffe.io/&#34; title=&#34;SPIFFE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt;，即每个人的安全生产身份框架。它也是 &lt;a href=&#34;https://www.cncf.io/projects/spiffe/&#34; title=&#34;CNCF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt; 中的一个毕业项目，自 2022 年 8 月以来。Spiffe 规范在一个 &lt;a href=&#34;https://github.com/spiffe/spiffe&#34; title=&#34;专用的 github&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;专用的 github&lt;/a&gt;上定义。&lt;/p&gt;
&lt;p&gt;此时，我们将在 github 仓库中描述的 SPIFFE 标准的高层概述，其中包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPIFFE ID，一个结构化的字符串（表示为 URI），用作实体的“名称”。&lt;/li&gt;
&lt;li&gt;SPIFFE 可验证身份文档（SVID）是携带 SPIFFE ID 的文档。它是护照的功能等同物 - 一个携带提供者身份的文档。&lt;/li&gt;
&lt;li&gt;工作负载 API 是工作负载或计算过程获取其 SVID 的方法。它通常在本地暴露（例如，通过 Unix 域套接字），并且明确不包括来自工作负载的认证握手或认证令牌。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，重要的是要提到信任域，这是一个身份命名空间，由一组加密密钥支持的发行机构支持。这些密钥共同作为居住在信任域中的所有身份的加密锚点。&lt;/p&gt;
&lt;p&gt;再次强调，由于 SPIFFE 是一组规范，所有这些概念/标准实际上都在 &lt;a href=&#34;https://github.com/spiffe/spiffe/tree/main/standards&#34; title=&#34;github 仓库&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github 仓库&lt;/a&gt;中详细说明。&lt;/p&gt;
&lt;p&gt;现在我们知道了规范和标准，但还有很多工作要做，因为，毕竟，这只是规范。幸运的是，还有 &lt;a href=&#34;https://spiffe.io/docs/latest/spire-about/spire-concepts/&#34; title=&#34;SPIRE 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 项目&lt;/a&gt;，&lt;a href=&#34;https://www.cncf.io/projects/spire/&#34; title=&#34;另一个毕业的 CNCF 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;另一个毕业的 CNCF 项目&lt;/a&gt;，这是 SPIFFE 规范的一个生产就绪实现。&lt;/p&gt;
&lt;p&gt;在 Cilium 中，SPIFFE 的实现基于 SPIRE 中央服务器。这个 SPIRE 服务器扮演我们之前在规范和标准中提到的信任域的角色。它与每个节点的 SPIRE 代理一起工作，这些代理从服务器获取自己的身份，然后验证工作负载的身份请求。&lt;/p&gt;
&lt;p&gt;要了解 SPIRE 是如何工作的，我们需要再次一些概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工作负载注册&lt;/strong&gt;是 SPIRE 将能够识别所述工作负载的过程。它告诉 SPIRE 如何识别工作负载以及给它分配哪个 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;SPIRE 实现工作负载的&lt;strong&gt;认证&lt;/strong&gt;，即断言其身份，通过收集来自工作负载和运行 SPIRE 代理的节点的属性。还值得注意的是，认证是由称为 &lt;em&gt;认证器&lt;/em&gt; 的软件完成的。在我们的案例中，我们将有一个 Kubernetes 认证器用于托管在 Kubernetes 上的工作负载，但也有节点认证器用于需要首先注册的 SPIRE 代理，然后才能进行工作负载认证。在 Azure 上，节点认证/注册依赖于具有托管身份的 Azure VMs。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;节点认证遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代理节点认证器插件查询平台以获取节点身份的证明，并将该信息提供给代理。&lt;/li&gt;
&lt;li&gt;代理将这个身份证明传递给服务器。服务器将这些数据传递给其节点认证器。&lt;/li&gt;
&lt;li&gt;服务器节点认证器通过调用平台 API 验证身份证明，使用它在第 2 步中获得的信息。节点认证器还为代理创建一个 SPIFFE ID，并将此 ID 以及它发现的任何节点选择器一起传回服务器进程。&lt;/li&gt;
&lt;li&gt;服务器为代理节点发送回一个 SVID。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/cilium-native-authentication/nodeattestation.webp&#34; data-img=&#34;/trans/cilium-native-authentication/nodeattestation.webp&#34; data-width=&#34;1068&#34; data-height=&#34;624&#34; alt=&#34;image&#34; data-caption=&#34;图 1：节点认证流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：节点认证流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;一个请求身份的工作负载遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它调用代理公开的工作负载 API 请求一个 SVID。&lt;/li&gt;
&lt;li&gt;代理询问调用工作负载认证器插件，向其提供有关工作负载的信息。&lt;/li&gt;
&lt;li&gt;工作负载认证器通过查询邻近的平台特定组件（如 Kubernetes kubelet）发现有关工作负载的额外信息。&lt;/li&gt;
&lt;li&gt;认证器将发现的信息以选择器的形式返回给代理。&lt;/li&gt;
&lt;li&gt;代理通过将发现的选择器与注册条目进行比较来确定工作负载的身份，并将正确的缓存 SVID 返回给工作负载。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/trans/cilium-native-authentication/wlattest.webp&#34; data-img=&#34;/trans/cilium-native-authentication/wlattest.webp&#34; data-width=&#34;615&#34; data-height=&#34;723&#34; alt=&#34;image&#34; data-caption=&#34;图 2：工作负载认证流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：工作负载认证流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;好了，这就是这个概述的全部内容。SPIFFE 规范中还有更多细节，我只能建议进行更彻底的阅读以获得更好的理解。让我们看看当我们在 AKS 集群中部署时情况如何。&lt;/p&gt;
&lt;h2 id=&#34;尝试-cilium-认证&#34;&gt;尝试 Cilium 认证&lt;/h2&gt;
&lt;h3 id=&#34;准备环境&#34;&gt;准备环境&lt;/h3&gt;
&lt;p&gt;为了尝试这个功能，我们将使用一个仅包含 AKS 集群及其默认节点池的环境，位于虚拟网络中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shcemainfra&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;认证需要在安装 Cilium 时指定，参数 &lt;code&gt;authentication.mutual.spire.enabled&lt;/code&gt; 和 &lt;code&gt;authentication.mutual.spire.install.enabled&lt;/code&gt; 必须设置为 true。&lt;/p&gt;
&lt;p&gt;我们使用的 Helm 参数的完整列表如下所示&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Helm 参数&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hubble.relay.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;启用 Hubble Relay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hubble.ui.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;是否启用 Hubble UI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aksbyocni.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;启用 AKS BYOCNI 集成。注意，这与未在 BYOCNI 模式下创建的 AKS 集群不兼容：改用 Azure 集成（azure.enabled）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nodeinit.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;启用节点初始化 DaemonSet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubeProxyReplacement&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;替换 kubeproxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8sServiceHost&lt;/td&gt;
&lt;td&gt;“&amp;quot;&lt;/td&gt;
&lt;td&gt;Kubernetes 服务主机 - 使用“auto”从集群信息 ConfigMap 中自动查找（仅限基于 kubeadm 的集群）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8sServicePort&lt;/td&gt;
&lt;td&gt;443&lt;/td&gt;
&lt;td&gt;Kubernetes 服务端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cluster.id&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;集群的唯一 ID。必须在所有连接的集群中是唯一的，并且在 1 到 255 的范围内。只有在使用 Cluster Mesh 时才需要，如果不使用 Cluster Mesh 可以为 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cluster.name&lt;/td&gt;
&lt;td&gt;“&amp;quot;&lt;/td&gt;
&lt;td&gt;集群的名称。只有在使用 Cluster Mesh 和与 SPIRE 的互相认证时才需要。它必须满足以下限制：* 最多包含 32 个字符；* 必须以小写字母或数字字符开头和结尾；* 之间可以包含小写字母或数字字符和破折号。如果集群 ID 不同于 0，则不能使用“default”名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azure.resourceGroup&lt;/td&gt;
&lt;td&gt;“&amp;quot;&lt;/td&gt;
&lt;td&gt;AKS 资源组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ipam.operator.clusterPoolIPv4PodCIDRList&lt;/td&gt;
&lt;td&gt;“{Ip_Range}”&lt;/td&gt;
&lt;td&gt;PoolIPv4PodCIDRList 列表 [“10.0.0.0/8”] IPv4 CIDR 范围列表，分配给单个节点用于 IPAM。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prometheus.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;启用 prometheus 指标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;operator.prometheus.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;启用以 OpenMetrics 格式导出 hubble 指标。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hubble.metrics.enableOpenMetrics&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;启用以 OpenMetrics 格式导出 hubble 指标。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hubble.metrics.enabled&lt;/td&gt;
&lt;td&gt;“{dns,drop,tcp,flow,port-distribution,icmp,httpV2:exemplars=true;labelsContext=source_ip,source_namespace,source_workload,destination_ip,destination_namespace,destination_workload,traffic_direction}”&lt;/td&gt;
&lt;td&gt;配置要收集的指标列表。如果为空或 null，则禁用指标。示例：enabled: - dns:query;ignoreAAAA - drop - tcp - flow - icmp - http 您可以从 helm CLI 指定指标列表：–set hubble.metrics.enabled=”{dns:query;ignoreAAAA,drop,tcp,flow,icmp,http}”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;authentication.mutual.spire.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;mutual.spire.enabled bool false 启用 SPIRE 集成（beta）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;authentication.mutual.spire.install.enabled&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;ion.mutual.spire.install.enabled bool true 启用 SPIRE 安装。这将仅在 authentication.mutual.spire.enabled 为 true 时生效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;安装完成后，我们可以查看 Cilium 的状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ cilium status
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    /¯¯&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; /¯¯&lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;   Cilium:             OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;_/    Operator:           OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; /¯¯&lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;   Envoy DaemonSet:    OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;_/¯¯&lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;_/    Hubble Relay:       OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;se&#34;&gt;\_&lt;/span&gt;_/       ClusterMesh:        disabled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deployment             hubble-ui          Desired: 1, Ready: 1/1, Available: 1/1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DaemonSet              cilium-envoy       Desired: 3, Ready: 3/3, Available: 3/3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DaemonSet              cilium             Desired: 3, Ready: 3/3, Available: 3/3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deployment             hubble-relay       Desired: 1, Ready: 1/1, Available: 1/1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deployment             cilium-operator    Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Containers:            cilium             Running: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       hubble-ui          Running: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       cilium-envoy       Running: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       cilium-operator    Running: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       hubble-relay       Running: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cluster Pods:          29/29 managed by Cilium
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Helm chart version:    1.16.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Image versions         cilium             quay.io/cilium/cilium:v1.16.0@sha256:46ffa4ef3cf6d8885dcc4af5963b0683f7d59daa90d49ed9fb68d3b1627fe058: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       hubble-ui          quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       hubble-ui          quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       cilium-envoy       quay.io/cilium/cilium-envoy:v1.29.7-39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51@sha256:bd5ff8c66716080028f414ec1cb4f7dc66f40d2fb5a009fff187f4a9b90b566b: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       cilium-operator    quay.io/cilium/operator-generic:v1.16.0@sha256:d6621c11c4e4943bf2998af7febe05be5ed6fdcf812b27ad4388f47022190316: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       hubble-relay       quay.io/cilium/hubble-relay:v1.16.0@sha256:33fca7776fc3d7b2abe08873319353806dc1c5e07e12011d7da4da05f836ce8d: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还可以查看其他 Kubernetes 对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 SPIRE 服务器的部署&lt;/li&gt;
&lt;li&gt;在每个节点上运行的代理的守护进程集。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ k get all -n cilium-spire 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                    READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pod/spire-agent-65sh2   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          7h2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pod/spire-agent-hqnsm   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          7h2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pod/spire-agent-lcqrz   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          7h2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pod/spire-server-0      2/2     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          24h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                   TYPE        CLUSTER-IP    EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;    AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/spire-server   ClusterIP   100.65.61.5   &amp;lt;none&amp;gt;        8081/TCP   27h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                         DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;daemonset.apps/spire-agent   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;           &amp;lt;none&amp;gt;          27h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                            READY   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;statefulset.apps/spire-server   1/1     27h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在进行一些测试之前，让我们看看我们的 SPIRE 服务器。我们可以在&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/mutual-authentication/mutual-authentication-example/&#34; title=&#34;相应文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;相应文档&lt;/a&gt;中找到查看它的命令。&lt;/p&gt;
&lt;p&gt;首先我们可以检查 SPIRE 服务器的健康状况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n cilium-spire spire-server-0 -c spire-server -- /opt/spire/bin/spire-server healthcheck
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server is healthy.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们可以看看 SPIRE 代理及其认证状态。因为我们有 3 个节点，所以在守护进程集中有 3 个 pod&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ k get ds -n cilium-spire 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-agent   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;           &amp;lt;none&amp;gt;          27h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n cilium-spire spire-server-0 -c spire-server -- /opt/spire/bin/spire-server agent list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Found &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; attested agents:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID         : spiffe://spiffe.cilium/spire/agent/k8s_psat/cluster1/c0c6afc3-1e0a-4ffb-b61e-18442b04123d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Attestation &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;  : k8s_psat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Expiration &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;   : 2024-07-30 17:27:15 +0000 UTC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Serial number     : &lt;span class=&#34;m&#34;&gt;8338212869267325996294354393424215766&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Can re-attest     : &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID         : spiffe://spiffe.cilium/spire/agent/k8s_psat/cluster1/08af80d6-0166-4f46-b575-0aa0dc6a5152
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Attestation &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;  : k8s_psat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Expiration &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;   : 2024-07-30 17:27:15 +0000 UTC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Serial number     : &lt;span class=&#34;m&#34;&gt;317183292034746089049553637864798125627&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Can re-attest     : &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID         : spiffe://spiffe.cilium/spire/agent/k8s_psat/cluster1/bdd0dfa9-20ec-4f24-a82f-c646754588ce
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Attestation &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;  : k8s_psat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Expiration &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;   : 2024-07-30 17:27:15 +0000 UTC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Serial number     : &lt;span class=&#34;m&#34;&gt;215301213544348190052950735212628656167&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Can re-attest     : &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来我们可以检查 SPIFFE 身份。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n cilium-spire spire-server-0 -c spire-server -- /opt/spire/bin/spire-server entry show -parentID spiffe://spiffe.cilium/ns/cilium-spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Found &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; entries
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 53b6506b-ebe3-4cd8-89b4-9647fa535c37
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://spiffe.cilium/cilium-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://spiffe.cilium/ns/cilium-spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X509-SVID TTL    : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID TTL     : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:ns:kube-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:sa:cilium
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 8c361104-31a1-480e-b97d-83673a63ce72
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://spiffe.cilium/cilium-operator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://spiffe.cilium/ns/cilium-spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X509-SVID TTL    : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID TTL     : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:ns:kube-system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用相互认证&#34;&gt;使用相互认证&lt;/h3&gt;
&lt;p&gt;现在让我们部署一些工作负载。为了简单起见，我们将创建一系列基于 nginx 的部署：&lt;/p&gt;
&lt;p&gt;一个目标应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loadBalancer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及客户端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;client2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们查看 Cilium 端点，我们应该能看到关联身份的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ k get ciliumendpoint -o wide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                             SECURITY IDENTITY   INGRESS ENFORCEMENT   EGRESS ENFORCEMENT   VISIBILITY POLICY   ENDPOINT STATE   IPV4           IPV6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client1-599c487979-dqm4v         &lt;span class=&#34;m&#34;&gt;76513&lt;/span&gt;                                                                              ready            100.64.1.197   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client1-599c487979-qqzvl         &lt;span class=&#34;m&#34;&gt;76513&lt;/span&gt;                                                                              ready            100.64.0.206   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client1-599c487979-t8728         &lt;span class=&#34;m&#34;&gt;76513&lt;/span&gt;                                                                              ready            100.64.2.214   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client2-d64dd865b-cj56m          &lt;span class=&#34;m&#34;&gt;77602&lt;/span&gt;                                                                              ready            100.64.0.77    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client2-d64dd865b-kb7cs          &lt;span class=&#34;m&#34;&gt;77602&lt;/span&gt;                                                                              ready            100.64.1.51    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client2-d64dd865b-qskqc          &lt;span class=&#34;m&#34;&gt;77602&lt;/span&gt;                                                                              ready            100.64.2.25    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demodeployment-bf5d895b5-6s4xn   &lt;span class=&#34;m&#34;&gt;108597&lt;/span&gt;                                                                             ready            100.64.0.124   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demodeployment-bf5d895b5-pmzkm   &lt;span class=&#34;m&#34;&gt;108597&lt;/span&gt;                                                                             ready            100.64.1.244   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demodeployment-bf5d895b5-vz4gq   &lt;span class=&#34;m&#34;&gt;108597&lt;/span&gt;                                                                             ready            100.64.2.127   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用安全身份值，我们可以在 SPIRE 服务器上检查相应的身份。我们将使用 &lt;code&gt;&#39;{.items[0].status.identity.id}&#39;&lt;/code&gt; 作为 jsonpath 值来提取安全身份作为变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ k get deployment --show-labels 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME             READY   UP-TO-DATE   AVAILABLE   AGE   LABELS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client1          3/3     &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;           14h   &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;client1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client2          3/3     &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;           14h   &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;client2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demodeployment   3/3     &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;           15h   &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demodeployment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;client1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;k get ciliumendpoints.cilium.io -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;client1 -o&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].status.identity.id}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;id&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;yumemaru@azure:~$ export client2Id=$(k get ciliumendpoints.cilium.io -l app=client2 -o=jsonpath=&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;.items&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.status.identity.id&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;yumemaru@azure:~$ export demoId=$(k get ciliumendpoints.cilium.io -l app=demodeployment -o=jsonpath=&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;.items&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.status.identity.id&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 SPIRE 服务器 pod 内部，我们现在可以检查每个工作负载对应的身份：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n cilium-spire spire-server-0 -c spire-server -- /opt/spire/bin/spire-server entry show -spiffeID spiffe://spiffe.cilium/identity/&lt;span class=&#34;nv&#34;&gt;$client1Id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Found &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; entry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 7bf9a3b0-a06c-480e-8f0c-1fd654d3ec56
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://spiffe.cilium/identity/76513
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://spiffe.cilium/cilium-operator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X509-SVID TTL    : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID TTL     : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : cilium:mutual-auth
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n cilium-spire spire-server-0 -c spire-server -- /opt/spire/bin/spire-server entry show -spiffeID spiffe://spiffe.cilium/identity/&lt;span class=&#34;nv&#34;&gt;$client2Id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Found &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; entry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 62b158d0-c90b-449a-9b30-a8a24ba012ba
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://spiffe.cilium/identity/77602
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://spiffe.cilium/cilium-operator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X509-SVID TTL    : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID TTL     : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : cilium:mutual-auth
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemaru@azure:~$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n cilium-spire spire-server-0 -c spire-server -- /opt/spire/bin/spire-server entry show -spiffeID spiffe://spiffe.cilium/identity/&lt;span class=&#34;nv&#34;&gt;$demoId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Found &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; entry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 07f27f3c-7a94-450b-aecc-bb006f57b97e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://spiffe.cilium/identity/108597
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://spiffe.cilium/cilium-operator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X509-SVID TTL    : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID TTL     : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : cilium:mutual-auth
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但也可以直接作为 cilium api 对象查看身份。以下是 &lt;code&gt;client1&lt;/code&gt; 应用的结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemary@azure:~$ k describe ciliumidentities.cilium.io &lt;span class=&#34;nv&#34;&gt;$client1Id&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Name:         &lt;span class=&#34;m&#34;&gt;76513&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Namespace:    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Labels:       &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;client1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              io.cilium.k8s.policy.cluster&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              io.cilium.k8s.policy.serviceaccount&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              io.kubernetes.pod.namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Annotations:  &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;API Version:  cilium.io/v2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Kind:         CiliumIdentity
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Creation Timestamp:  2024-07-30T16:46:43Z
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Generation:          &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Resource Version:    &lt;span class=&#34;m&#34;&gt;224640&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  UID:                 433dd70b-58ba-41c0-abef-c9d5785eaddb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Security - Labels:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  k8s:app:                                                         client1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name:  default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  k8s:io.cilium.k8s.policy.cluster:                                cluster1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  k8s:io.cilium.k8s.policy.serviceaccount:                         default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  k8s:io.kubernetes.pod.namespace:                                 default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Events:                                                            &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们会注意到 Cilium 身份名称、Cilium 端点上显示的安全身份和我们在 SPIRE 服务器上得到的 SPIFFE ID &lt;code&gt;spiffe://spiffe.cilium/identity/76513&lt;/code&gt; 之间的对应关系。&lt;/p&gt;
&lt;p&gt;那很好。现在，我们如何强制执行相互认证呢？实际上很简单，我们只需要在 Cilium 网络策略中添加适当的参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;authentication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们编写 3 个网络策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，按应有的方式，一个拒绝所有策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo1-default-deny&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Default-deny ingress policy for demo app&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demodeployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- {}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其次，一个允许 app1 流量到 demo 应用的策略。&lt;/li&gt;
&lt;li&gt;第三，一个网络策略允许 app2 到 demo 应用，但这次需要认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们仅应用第一个策略，我们应该无法再访问 demo 应用。这可以通过 &lt;code&gt;hubble observe&lt;/code&gt; 命令看到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemary@azure:~$ k &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; deployments/client1 -- curl -i -X GET http://demodeployment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                 Dload  Upload   Total   Spent    Left  Speed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; --:--:--  0:02:09 --:--:--     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;28&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Failed to connect to demodeployment port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; after &lt;span class=&#34;m&#34;&gt;129180&lt;/span&gt; ms: Couldn&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t connect to server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; terminated with &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; code &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemary@azure:~$ hubble observe --to-label &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demodeployment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 09:54:42.541: default/client1-599c487979-t8728:54548 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:76513&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; default/demodeployment-bf5d895b5-pmzkm:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to-overlay FORWARDED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，我们仍然可以访问 client2 部署的一个 pod，因为我们只针对其标签的 demo 应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemary@azure:~$ k get pod -o custom-columns&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Name:.metadata.name,PodIp:.status.podIP,HostIp:.status.hostIP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Name                             PodIp          HostIp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client1-599c487979-dqm4v         100.64.1.197   172.21.14.69
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client1-599c487979-qqzvl         100.64.0.206   172.21.14.68
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client1-599c487979-t8728         100.64.2.214   172.21.14.70
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client2-d64dd865b-cj56m          100.64.0.77    172.21.14.68
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client2-d64dd865b-kb7cs          100.64.1.51    172.21.14.69
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client2-d64dd865b-qskqc          100.64.2.25    172.21.14.70
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client3-6fbfd96c6f-bwhqh         100.64.1.150   172.21.14.69
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client3-6fbfd96c6f-cfhhv         100.64.0.91    172.21.14.68
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client3-6fbfd96c6f-wldx5         100.64.2.95    172.21.14.70
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demodeployment-bf5d895b5-6s4xn   100.64.0.124   172.21.14.68
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demodeployment-bf5d895b5-pmzkm   100.64.1.244   172.21.14.69
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demodeployment-bf5d895b5-vz4gq   100.64.2.127   172.21.14.70
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemary@azure:~$ k &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; deployments/client1 -- curl -i -X GET http://100.64.2.25
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                 Dload  Upload   Total   Spent    Left  Speed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;615&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;615&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   499k      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:--  600k
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: nginx/1.27.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Wed, &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2024&lt;/span&gt; 10:01:58 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: &lt;span class=&#34;m&#34;&gt;615&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last-Modified: Tue, &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt; May &lt;span class=&#34;m&#34;&gt;2024&lt;/span&gt; 13:22:30 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ETag: &lt;span class=&#34;s2&#34;&gt;&amp;#34;6655da96-267&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Ranges: bytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;style&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;html &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; color-scheme: light dark&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;body &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; width: 35em&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; margin: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; auto&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/style&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;working. Further configuration is required.&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;p&amp;gt;For online documentation and support please refer to
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;a &lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://nginx.org/&amp;#34;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Commercial support is available at
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;a &lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://nginx.com/&amp;#34;&lt;/span&gt;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;实施策略-2-和-3&#34;&gt;实施策略 2 和 3&lt;/h3&gt;
&lt;p&gt;现在我们来从客户端 1 和客户端 2 使用命令 &lt;code&gt;kubectl exec deployments/&amp;lt;deploymentname&amp;gt; -- curl -i -X GET http://demodeployment&lt;/code&gt; 访问 demo 应用，我们可以通过 hubble 观察到客户端 1 的流量被授权：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemary@azure:~$ hubble observe --to-label &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demodeployment --from-label &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;client1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:33:48.647: default/client1-599c487979-t8728:54594 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:76513&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;lt;&amp;gt; default/demodeployment-bf5d895b5-vz4gq &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pre-xlate-rev TRACED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:33:48.647: default/client1-599c487979-t8728 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:76513&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;lt;&amp;gt; default/demodeployment-bf5d895b5-vz4gq:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; post-xlate-fwd TRANSLATED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:33:48.647: default/client1-599c487979-t8728:54594 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:76513&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; default/demodeployment-bf5d895b5-vz4gq:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; policy-verdict:L3-L4 INGRESS ALLOWED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:33:48.647: default/client1-599c487979-t8728:54594 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:76513&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; default/demodeployment-bf5d895b5-vz4gq:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to-endpoint FORWARDED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:33:48.647: default/client1-599c487979-t8728:54594 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:76513&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; default/demodeployment-bf5d895b5-vz4gq:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to-endpoint FORWARDED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: ACK&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及客户端 2 的认证步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yumemary@azure:~$ hubble observe --to-label &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demodeployment --from-label &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;client2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:35:18.651: default/client2-d64dd865b-qskqc &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:77602&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;lt;&amp;gt; default/demodeployment-bf5d895b5-6s4xn:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; post-xlate-fwd TRANSLATED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:35:18.651: default/client2-d64dd865b-qskqc:50986 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:77602&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; default/demodeployment-bf5d895b5-6s4xn:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to-overlay FORWARDED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:35:18.651: default/client2-d64dd865b-qskqc:50986 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:77602&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;lt;&amp;gt; default/demodeployment-bf5d895b5-6s4xn:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; policy-verdict:L3-L4 INGRESS DENIED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; Auth: SPIRE&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:35:18.651: default/client2-d64dd865b-qskqc:50986 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:77602&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;lt;&amp;gt; default/demodeployment-bf5d895b5-6s4xn:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Authentication required DROPPED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:35:19.661: default/client2-d64dd865b-qskqc:50986 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:77602&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; default/demodeployment-bf5d895b5-6s4xn:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; policy-verdict:L3-L4 INGRESS ALLOWED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; Auth: SPIRE&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jul &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 11:35:19.661: default/client2-d64dd865b-qskqc:50986 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:77602&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; default/demodeployment-bf5d895b5-6s4xn:80 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ID:108597&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to-endpoint FORWARDED &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TCP Flags: SYN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到此为止就是所有的内容了。让我们来总结一下。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在本文中，我们更深入地探讨了 Cilium 的功能，特别是它从服务网格获得的相互认证功能。这一功能依赖于实现 SPIFFE 框架的 SPIRE 服务器部署。之后，实际上非常简单。网络策略中的简单规范确保了工作负载间的身份验证。而且在 hubble 上也很容易看到这一点。下一步应该是在 hubble 部分以及 SPIRE 服务器上配置更多的监控。这就是为什么在图表配置中添加了与指标相关的值。目前这对我来说还不起作用，所以我稍后还得回来处理这个问题。还需要对 SPIRE 服务器的可观测性进行一些思考。可能查看 loki 或类似工具的日志会很不错。但那将是下一次的内容。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio 配置安全：如何避免错误配置</title>
      <link>https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/</link>
      <pubDate>Tue, 06 Aug 2024 11:03:02 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/</guid>
      <description>
        
        
        &lt;p&gt;Istio 是一个功能强大的服务网格解决方案，提供零信任安全性、可观测性和高级流量管理等功能，且无需修改代码即可实现。然而，由于配置错误，我们经常会遇到意料之外的行为。本文将介绍几种常见的 Istio 配置错误，解析其背后的原理，并通过示意图展示如何识别和解决这些问题。我们还将介绍 Tetrate 提供的工具——&lt;a href=&#34;https://docs.tetrate.io/istio-subscription/dashboard/analyzers/config&#34; title=&#34;TIS Config Analyzer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TIS Config Analyzer&lt;/a&gt;，这是一种优化 Istio 操作效率和安全性的工具。&lt;/p&gt;
&lt;h2 id=&#34;配置错误导致的事故案例&#34;&gt;配置错误导致的事故案例&lt;/h2&gt;
&lt;p&gt;以下是两个由于配置错误导致的典型事故案例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.theverge.com/2017/3/2/14792442/amazon-s3-outage-cause-typo-internet-server&#34; title=&#34;Amazon Web Services 2017 年停机事件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon Web Services 2017 年停机事件&lt;/a&gt;&lt;/strong&gt;：一次简单的输入错误导致了广泛的服务中断，影响了数千个在线服务和应用，突显了即使在成熟的云基础设施中，一个小小的配置错误也会引发严重后果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://about.gitlab.com/blog/2017/02/01/gitlab-dot-com-database-incident/&#34; title=&#34;GitLab 2017 年数据丢失事故&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitLab 2017 年数据丢失事故&lt;/a&gt;&lt;/strong&gt;：由于配置错误，GitLab 在进行数据库维护时误删除了大量生产数据。尽管备份机制被配置好，但错误的配置阻止了数据的及时恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些案例表明，正确的配置管理对于防止服务中断和数据丢失至关重要。&lt;/p&gt;
&lt;h2 id=&#34;常见的-istio-配置错误类型&#34;&gt;常见的 Istio 配置错误类型&lt;/h2&gt;
&lt;p&gt;Istio 配置错误主要分为以下几大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;AuthorizationPolicy（授权策略）&lt;/strong&gt;：命名空间不存在、仅允许 HTTP 方法和完全限定的 gRPC 名称、主机没有匹配的服务注册表条目、字段需要启用 mTLS、未找到服务帐户等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DestinationRule（目标规则）&lt;/strong&gt;：同一主机子集组合的多个目标规则、主机在服务注册表中没有匹配条目、子集标签在任何匹配主机中未找到等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gateway（网关）&lt;/strong&gt;：同一主机端口组合的多个网关、网关选择器在命名空间中未找到匹配的工作负载等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Port（端口）&lt;/strong&gt;：端口名称必须遵循特定格式、端口的应用协议必须遵循特定格式等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service（服务）&lt;/strong&gt;：未找到暴露与服务相同端口的部署等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VirtualService（虚拟服务）&lt;/strong&gt;：目标权重的路由没有有效的服务、指向不存在网关的虚拟服务等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常见的-istio-配置错误示例&#34;&gt;常见的 Istio 配置错误示例&lt;/h2&gt;
&lt;p&gt;在 Istio 的日常使用中，以下是一些最常见的配置错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟服务指向不存在的网关：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;non-existent-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，&lt;code&gt;details&lt;/code&gt; 虚拟服务试图通过一个不存在的 &lt;code&gt;non-existent-gateway&lt;/code&gt; 进行路由，导致流量管理失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟服务引用不存在的服务子集：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 &lt;code&gt;details&lt;/code&gt; 服务没有定义相应的子集，请求将因无法找到正确的服务实例而被拒绝。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网关找不到指定的服务器凭证：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-not-found-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIMPLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;credentialName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;not-exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会导致 TLS 握手失败，因为指定的凭证 &lt;code&gt;not-exist&lt;/code&gt; 不存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置验证&#34;&gt;配置验证&lt;/h2&gt;
&lt;p&gt;为了减少由于配置错误而导致的服务中断风险，配置验证成为了一个不可或缺的步骤。配置验证可以分为以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态配置验证&lt;/strong&gt;：在配置应用到系统之前进行验证。这包括检查语法错误、完整性以及配置项的有效性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需配置验证&lt;/strong&gt;：在配置已经应用但可能需要根据实时数据进行调整时进行验证。这种类型的验证有助于适应动态环境中的变化，确保配置的持续正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;推荐的配置验证工具&#34;&gt;推荐的配置验证工具&lt;/h3&gt;
&lt;h4 id=&#34;istioctl-validate&#34;&gt;&lt;code&gt;istioctl validate&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;istioctl validate&lt;/code&gt; 用于验证 Istio 配置文件（如 YAML 文件）的语法和基本结构，确保配置文件符合 Istio API 的规范。它可以在配置应用到集群之前检测出语法错误和格式问题，是一个静态分析工具，通常结合 CI 流程使用，防止无效配置文件应用到集群中。&lt;/p&gt;
&lt;h4 id=&#34;istioctl-analyze&#34;&gt;&lt;code&gt;istioctl analyze&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/diagnostic-tools/istioctl-analyze/&#34; title=&#34;&amp;lt;code&amp;gt;istioctl analyze&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;istioctl analyze&lt;/code&gt;&lt;/a&gt; 是一个强大的诊断工具，用于分析 Istio 集群的运行状态和配置一致性。它不仅检查配置文件的语法，还可以检查集群中实际应用的配置，找出潜在的问题和冲突。&lt;code&gt;istioctl analyze&lt;/code&gt; 提供动态分析功能，能够识别集群运行时的配置错误和潜在问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istioctl analyze&lt;/code&gt; 的配置流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;收集配置数据&lt;/strong&gt;：首先，&lt;code&gt;istioctl analyze&lt;/code&gt; 收集来自指定源的 Istio 配置数据。这些源可以是活动的 Kubernetes 集群，也可以是本地的配置文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析和构建模型&lt;/strong&gt;：工具解析收集的配置数据，构建一个内部表示 Istio 配置的模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用分析规则&lt;/strong&gt;：随后，它应用一系列预定义的规则来分析这个模型，检测潜在的配置问题。这些规则涵盖从安全漏洞到性能问题的各种潜在问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成报告&lt;/strong&gt;：分析完成后，&lt;code&gt;istioctl analyze&lt;/code&gt; 输出一个包含所有发现问题的详细报告。如果没有发现问题，它会通知用户配置看起来没有问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是 &lt;code&gt;istioctl analyze&lt;/code&gt; 的工作流程图：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/4eb4d5bbb7c8856d609944835aa03993.svg&#34; data-img=&#34;/blog/istio-configuration-safety-common-misconfigurations/4eb4d5bbb7c8856d609944835aa03993.svg&#34; alt=&#34;image&#34; data-caption=&#34;istioctl analyze 的工作流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;istioctl analyze 的工作流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h4 id=&#34;kiali&#34;&gt;Kiali&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://kiali.io&#34; title=&#34;Kiali&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kiali&lt;/a&gt; 是管理和可视化 Istio 服务网格的重要工具，提供对网格健康状况、性能和配置状态的实时洞察。通过将 Kiali 集成到 Istio 环境中，可以通过以下方式增强配置安全性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可视化&lt;/strong&gt;：Kiali 提供服务网格的图形表示，更容易发现配置错误，如路由错误或缺失的策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证&lt;/strong&gt;：有助于验证 Istio 配置，突出显示如配置错误的网关或目标规则等问题，以防这些问题引起麻烦。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全洞察&lt;/strong&gt;：Kiali 提供对安全策略的可见性，确保 mTLS 和授权设置正确实施。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将 Kiali 与 &lt;code&gt;istioctl validate&lt;/code&gt; 和 &lt;code&gt;istioctl analyze&lt;/code&gt; 等工具结合使用，能确保更为稳健的方法来预防和解决 Istio 配置错误，进而提升服务网格的安全性和效率。&lt;/p&gt;
&lt;h2 id=&#34;tetrate-的-tis-中的-config-analyzer-工具介绍&#34;&gt;Tetrate 的 TIS 中的 Config Analyzer 工具介绍&lt;/h2&gt;
&lt;p&gt;为了帮助开发者和运维人员避免常见的配置失误，Tetrate 开发了 TIS Dashboard 中的 &lt;a href=&#34;https://docs.tetrate.io/istio-subscription/dashboard/analyzers/config&#34; title=&#34;Config Analyzer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Config Analyzer&lt;/a&gt; 工具。该工具能够自动验证 Istio 的配置，根据最佳实践分析服务网格的配置问题，并提供优化建议。Config Analyzer 可以自动检测 Istio 服务网格中的配置问题，提供解释及解决方案，支持按需检测配置中的错误。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/config-validate_hu9267e306a03ef8d651bae9c5231990b1_427425_3358x1812_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/istio-configuration-safety-common-misconfigurations/config-validate.png&#34; data-img=&#34;/blog/istio-configuration-safety-common-misconfigurations/config-validate.png&#34; data-width=&#34;3358&#34; data-height=&#34;1812&#34; alt=&#34;image&#34; data-caption=&#34;TIS Config Analyzer 可以按需检测配置中的问题&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;TIS Config Analyzer 可以按需检测配置中的问题&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;正确配置 Istio 是确保服务网格健康运行的关键。通过了解和避免常见配置错误，以及利用如 Tetrate 的 TIS Config Analyzer 这样的高级工具，您可以确保 Istio 环境的稳定性和安全性。记住，一个小小的配置错误可能导致整个服务网格的故障，因此持续监控和审核配置是非常必要的。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kiali.io/docs/features/validations/&#34; title=&#34;Validation - kiali.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Validation - kiali.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>保障 Istio 安全：解决关键安全漏洞及最佳实践</title>
      <link>https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/</link>
      <pubDate>Thu, 25 Jul 2024 14:09:37 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/</guid>
      <description>
        
        
        &lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;近期，Wiz 研究团队发布了&lt;a href=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/&#34; title=&#34;博客&#34;&gt;博客&lt;/a&gt;，揭示了 AI 服务中的租户隔离漏洞，引起了广泛关注。该研究详细阐述了多个 AI 服务供应商存在的安全缺陷，特别是 SAP AI Core 平台。通过合法的 AI 训练过程，研究人员能够绕过 Istio 服务网格中的流量劫持，进而横向移动并接管服务，获取客户的私人文件和云环境凭证。这些发现凸显了当今云服务和管理平台在确保隔离和沙盒环境方面面临的挑战。&lt;/p&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    关于 UID 1337
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    Istio 选择 UID 1337（leet 的变体）作为 &lt;code&gt;istio-proxy&lt;/code&gt; 容器中的用户 ID 是为了便于配置并避免权限冲突。这个数字在技术和游戏文化中象征“精英”（elite），有助于防止与其他常规用户 ID 冲突，确保流量管理操作不受权限问题干扰。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在这个背景下，Istio 作为一个重要的服务网格解决方案，同样面临着类似的安全问题，尤其是在 sidecar 注入和流量管理等关键功能上。这篇博客旨在探讨如何保护 Istio 服务网格的安全，并提供一套全面的缓解措施。我们还将讨论多层安全策略如何有效增强 Istio 的安全性，以应对类似 Wiz 报告中提到的挑战。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;Istio 主要用于管理 Kubernetes 中的东西向流量，提供详细的流量管理功能，如请求路由、负载均衡和故障恢复策略。虽然 Istio 提供了流量加密、认证和授权等安全功能，但它本身不应被视为防火墙。为了确保 Istio 网格中的服务安全，除了使用 Istio 自身的安全功能，还需要结合底层网络和基础设施的安全措施，比如 CNI 和安全容器。此外，微分段技术可以用来实现更细粒度的隔离，提高安全性。&lt;/p&gt;
&lt;p&gt;不论是 Sidecar 模式还是 Ambient 模式，都是通过劫持应用程序 Pod 的流量到数据平面代理中进行处理和转发的。如果没有成功拦截到应用程序流量或者被仿冒程序冒充了 Istio 而执行操作，就会有安全漏洞出现。&lt;/p&gt;
&lt;p&gt;下图展示了通过绕过或仿冒 Istio 系统用户而造成的安全漏洞存在的位置。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/bypass-sidecar-traffic-hijack.svg&#34; data-img=&#34;/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/bypass-sidecar-traffic-hijack.svg&#34; alt=&#34;image&#34; data-caption=&#34;能够绕过 Istio 中流量劫持的“安全漏洞&amp;#34;&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;能够绕过 Istio 中流量劫持的“安全漏洞&#34;&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;接下来，我们将探讨“安全漏洞”产生的具体情况及应对策略。&lt;/p&gt;
&lt;h2 id=&#34;绕过-istio-sidecar-注入&#34;&gt;绕过 Istio Sidecar 注入&lt;/h2&gt;
&lt;h3 id=&#34;在命名空间级别禁用注入&#34;&gt;在命名空间级别禁用注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用命名空间标签，在命名空间级别禁用 Istio Sidecar 注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队抽象化应用部署，限制对原始 Kubernetes 命名空间资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：使用策略引擎（如 OPA Gatekeeper）来确保命名空间标签的合规性，定期审查命名空间的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在-pod-级别禁用注入&#34;&gt;在 Pod 级别禁用注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 Pod 标签，在 Pod 级别禁用 Istio Sidecar 注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队抽象化应用部署，限制对原始 Kubernetes Pod 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：使用 Admission Webhook 强制启用 Sidecar 注入，禁止使用排除标签，定期扫描和审计所有 Pod，确保所有需要的 Pod 都注入了 Sidecar。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过流量重定向到-istio-sidecar&#34;&gt;绕过流量重定向到 Istio Sidecar&lt;/h2&gt;
&lt;h3 id=&#34;滥用流量重定向注解&#34;&gt;滥用流量重定向注解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 Pod 注解，排除特定的入站或出站端口或 IP 地址，从而绕过流量重定向。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队抽象化应用部署，限制对原始 Kubernetes Pod 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：使用策略引擎来检测和警告不合规的注解使用，定期审查 Pod 注解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-pod-的-uid&#34;&gt;滥用 Pod 的 UID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 UID 1337（sidecar 代理的 ID），绕过 Istio Iptables 重定向规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;强制所有 Pod 指定非 1337 的 UID。&lt;/li&gt;
&lt;li&gt;检查所有容器镜像以检查 UID 1337 并拒绝这些镜像。此检查可以使用准入 Webhook 或由管理镜像注册表的中央团队来执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：禁用或限制 UID 1337 的使用，定期审计 Pod 的 UID 配置，确保没有绕过行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-pod-能力net_adminnet_raw&#34;&gt;滥用 Pod 能力（NET_ADMIN、NET_RAW）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队滥用 NET_ADMIN 和 NET_RAW 能力，移除 Istio Iptables 规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队启用 Istio CNI（以避免授予应用团队提升的权限），并限制对原始 Kubernetes Pod 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查和监控 Pod 的权限配置，确保没有越权行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过入站流量约束&#34;&gt;绕过入站流量约束&lt;/h2&gt;
&lt;h3 id=&#34;滥用-peerauthentication&#34;&gt;滥用 PeerAuthentication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个针对每个命名空间/每个工作负载的 PeerAuthentication 资源，启用 PERMISSIVE 认证模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio PeerAuthentication 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 PeerAuthentication 配置，确保所有入站流量都按照要求加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过出站流量约束&#34;&gt;绕过出站流量约束&lt;/h2&gt;
&lt;h3 id=&#34;滥用-serviceentry&#34;&gt;滥用 ServiceEntry&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个 ServiceEntry，直接访问外部服务，而无需经过 Egress 网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio ServiceEntry 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 ServiceEntry 配置，确保没有绕过行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-externalname-服务&#34;&gt;滥用 ExternalName 服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个类型为 ExternalName 的 Kubernetes Service，直接访问外部服务，而无需经过 Egress 网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Kubernetes Service 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 Kubernetes Service 的类型配置，确保没有绕过行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;无法控制地更改-istio-sidecar-配置&#34;&gt;无法控制地更改 Istio Sidecar 配置&lt;/h2&gt;
&lt;h3 id=&#34;滥用-sidecar-资源&#34;&gt;滥用 Sidecar 资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建一个针对每个工作负载的 Istio Sidecar 资源，并将 &lt;code&gt;outboundTrafficPolicy&lt;/code&gt; 字段设置为 &lt;code&gt;ALLOW_ANY&lt;/code&gt;（覆盖可能的全局值 &lt;code&gt;REGISTRY_ONLY&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio Sidecar 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 Sidecar 资源配置，确保没有覆盖全局设置的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滥用-envoyfilter&#34;&gt;滥用 EnvoyFilter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：应用团队创建 EnvoyFilter，导致与现有 Istio 对象冲突，从而引发 DoS 攻击或违反安全策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓解策略&lt;/strong&gt;：平台团队限制对原始 Istio EnvoyFilter 资源的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：定期审查 EnvoyFilter 配置，确保没有不当使用行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格应作为分层防御的一部分&#34;&gt;服务网格应作为分层防御的一部分&lt;/h2&gt;
&lt;p&gt;服务网格被描述为现有安全模型的一个补充层，通过在传统安全控制之上添加更细粒度的安全策略来增强微服务的安全性。然而，文章强调了服务网格无法独立保障微服务的全面安全，而是应当作为整体安全策略的一部分。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/security-layers.svg&#34; data-img=&#34;/blog/securing-istio-addressing-critical-security-gaps-and-best-practices/security-layers.svg&#34; alt=&#34;image&#34; data-caption=&#34;微服务安全分层架构&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;微服务安全分层架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;服务网格主要通过在每个服务实例旁部署一个轻量级的代理（sidecar），来管理和控制网络流量。这使得它能够在网络层面上实现精细的流量控制和策略执行，如流量加密、身份认证和授权。尽管服务网格能够提供诸如流量控制、服务发现和断路器等功能，这些功能本质上是对网络流量的管理，无法解决所有安全问题。例如，它不能替代应用层防火墙、入侵检测系统和数据安全等更传统的安全措施。&lt;/p&gt;
&lt;p&gt;此外，服务网格依赖于正确的配置和管理，配置不当可能导致安全漏洞。因此，尽管服务网格是现代微服务架构中不可或缺的一部分，它应该与传统的安全措施相结合，共同构成一个全面的、多层次的安全策略框架。参考&lt;a href=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/&#34; title=&#34;如何通过服务网格增强微服务的安全性&#34;&gt;如何通过服务网格增强微服务的安全性&lt;/a&gt;以进一步了解如何加强服务网格的安全。&lt;/p&gt;
&lt;h2 id=&#34;长期解决方案和社区合作&#34;&gt;长期解决方案和社区合作&lt;/h2&gt;
&lt;p&gt;Istio 社区每年都会进行一次安全审计，见 &lt;a href=&#34;https://istio.io/latest/blog/2021/ncc-security-assessment/&#34; title=&#34;2021 年&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021 年&lt;/a&gt;、&lt;a href=&#34;https://istio.io/latest/blog/2023/ada-logics-security-assessment/&#34; title=&#34;2022 年&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022 年&lt;/a&gt; 的安全审计结果。从结果中我们可以看到，Istio 的安全态势有了很大的提升。确保你的 Istio 服务网格符合&lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/security/&#34; title=&#34;安全最佳实践&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全最佳实践&lt;/a&gt;。另外，你还需要关注 &lt;a href=&#34;https://istio.io/latest/news/security/&#34; title=&#34;Istio CVE 公告栏&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio CVE 公告栏&lt;/a&gt;，或者使用如 &lt;a href=&#34;https://tetrate.io/tetrate-istio-subscription/&#34; title=&#34;Tetrate Istio Subscription&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Subscription&lt;/a&gt; 这类工具来扫描 Istio 服务网格的各种 CVE，部署符合 FIPS 并经过 FIPS 验证的 Istio 发行版。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;服务网格通过在应用程序外部管理控制流，为微服务架构提供了额外的安全层。这允许在不影响应用程序性能的前提下，加强服务之间的通信安全。在部署服务网格时，推荐使用 Istio 的 Egress Gateway 来管理出口流量，结合 Kubernetes 的 NetworkPolicy，确保所有出口流量都必须经过网关，从而防止潜在的数据泄露和其他安全威胁。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/istio-how-to-enforce-egress-traffic-using-istios-authorization-policies/&#34; title=&#34;How to enforce egress traffic using Istio’s authorization policies - tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to enforce egress traffic using Istio’s authorization policies - tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/security/&#34; title=&#34;Istio Security Best Practice - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Security Best Practice - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/optimize-traffic-management-and-security-with-these-service-mesh-best-practices/&#34; title=&#34;Optimize Traffic Management and Security with These Service Mesh Best Practices - tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Optimize Traffic Management and Security with These Service Mesh Best Practices - tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2023/ada-logics-security-assessment/&#34; title=&#34;Istio publishes results of 2022 security audit - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio publishes results of 2022 security audit - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/blog/2021/ncc-security-assessment/&#34; title=&#34;Announcing the results of Istio’s first security assessment - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Announcing the results of Istio’s first security assessment - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>SAPwned：SAP AI 漏洞暴露客户云环境和私有 AI 工件</title>
      <link>https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/</link>
      <pubDate>Thu, 18 Jul 2024 19:23:50 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/</guid>
      <description>
        
        
        &lt;h2 id=&#34;ai-是否存在隔离问题&#34;&gt;AI 是否存在隔离问题？&lt;/h2&gt;
&lt;p&gt;在过去的几个月里，我们 Wiz 研究团队对多个 AI 服务提供商进行了广泛的租户隔离研究。我们认为这些服务更容易受到租户隔离漏洞的影响，因为它们允许用户运行 AI 模型和应用程序，这等同于执行任意代码。随着 AI 基础设施越来越成为许多商业环境的标配，这些攻击的影响正变得越来越重要。&lt;/p&gt;
&lt;p&gt;我们将在即将举行的 Black Hat 会议上展示这个研究项目的发现，在我们的会议“隔离还是幻觉？为乐趣和权重黑客攻击 AI 基础设施提供商”。&lt;/p&gt;
&lt;p&gt;在这个项目的最新一期中，我们研究了 SAP 的 AI 产品，恰当地命名为“SAP AI Core”。这是我们系列中的第三份报告，继我们对 Hugging Face 和 Replicate 平台的研究之后。本博客将探索漏洞链并详细介绍我们的发现，称为“SAPwned”，同时也将观察到确保管理 AI 平台安全的潜在影响和更广泛的启示。&lt;/p&gt;
&lt;h2 id=&#34;执行摘要&#34;&gt;执行摘要&lt;/h2&gt;
&lt;p&gt;AI 训练过程需要访问大量敏感客户数据，这使 AI 训练服务成为攻击者的诱人目标。SAP AI Core 提供与 HANA 及其他云服务的集成，通过云访问密钥访问客户的内部数据。这些凭据非常敏感，我们的研究目标是确定潜在的恶意行为者是否能够访问这些客户秘密。&lt;/p&gt;
&lt;p&gt;我们对 SAP AI Core 的研究始于使用 SAP 的基础设施执行合法的 AI 训练程序。通过执行任意代码，我们能够横向移动并接管服务——获取客户的私有文件以及客户云环境的凭据：AWS、Azure、SAP HANA Cloud 等。我们发现的漏洞可能允许攻击者访问客户数据并污染内部工件——蔓延到相关服务和其他客户环境。&lt;/p&gt;
&lt;p&gt;具体来说，我们获得的访问权限允许我们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 SAP 的内部容器注册表上读取和修改 Docker 镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Google 容器注册表上读取和修改 SAP 的 Docker 镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 SAP 的内部 Artifactory 服务器上读取和修改工件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得 SAP AI Core 的 Kubernetes 集群的集群管理员权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问客户的云凭证和私有 AI 工件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f1_hub9d8780c6754b3a0d40e93c0eae1d68f_78308_1920x1080_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f1.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f1.png&#34; data-width=&#34;1920&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;我们研究发现的逐步插图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;我们研究发现的逐步插图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们发现这些问题的根本原因是攻击者可以运行恶意 AI 模型和训练程序，这本质上是代码。在审查了几个主要 AI 服务之后，我们认为行业必须改进其在运行 AI 模型时的隔离和沙箱标准。&lt;/p&gt;
&lt;p&gt;所有漏洞已报告给 SAP 的安全团队，并由 SAP 修复，如其网站所确认。我们感谢他们的合作。没有客户数据受到泄露。&lt;/p&gt;
&lt;h2 id=&#34;介绍研究开始&#34;&gt;介绍：研究开始&lt;/h2&gt;
&lt;p&gt;SAP AI Core 是一项服务，允许用户以可扩展和管理的方式在 SAP 的庞大云资源上开发、训练和运行 AI 服务。类似于其他云提供商（和 AI 基础设施提供商），客户的代码在 SAP 的共享环境中运行——构成跨租户访问的风险。&lt;/p&gt;
&lt;p&gt;我们的研究始于作为 SAP 客户，基本权限允许我们创建 AI 项目。因此，我们首先在 SAP AI Core 上创建了一个常规 AI 应用程序。SAP 的平台允许我们提供一个 Argo Workflow 文件，该文件反过来生成了一个根据我们的配置的新 Kubernetes Pod。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f2_hu39f9c0b1e6c59d292e0aa1d5f0beb587_36980_1020x692_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f2.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f2.png&#34; data-width=&#34;1020&#34; data-height=&#34;692&#34; alt=&#34;image&#34; data-caption=&#34;SAP AI Core 上的 Argo 工作流配置示例&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;SAP AI Core 上的 Argo 工作流配置示例&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这允许我们在 Pod 中按设计运行我们自己的任意代码——不需要任何漏洞。然而，我们的环境受到了相当大的限制。我们很快意识到，我们的 Pod 的网络访问非常有限，这是由 Istio 代理 sidecar 强制执行的——因此，扫描内部网络对我们来说不是一个选项。至少现在不是。&lt;/p&gt;
&lt;h2 id=&#34;bug-1-通过-1337-的力量绕过网络限制&#34;&gt;Bug #1: 通过 1337 的力量绕过网络限制&lt;/h2&gt;
&lt;p&gt;我们首先尝试的是为我们的 Pod 配置“有趣”的权限。然而，SAP 的准入控制器阻止了我们尝试的所有危险安全选项——例如，以&lt;code&gt;root&lt;/code&gt;身份运行我们的容器。&lt;/p&gt;
&lt;p&gt;尽管如此，我们发现准入控制器未能阻止两种有趣的配置。&lt;/p&gt;
&lt;p&gt;第一个是&lt;code&gt;shareProcessNamespace&lt;/code&gt;，它允许我们与我们的 sidecar 容器共享进程命名空间。由于我们的 sidecar 是 Istio 代理，我们获得了对 Istio 的配置的访问权限，包括对集群的集中式 Istiod 服务器的访问令牌。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f3_hu1ee113232a286767b6011a348f43de62_113240_1678x616_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f3.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f3.png&#34; data-width=&#34;1678&#34; data-height=&#34;616&#34; alt=&#34;image&#34; data-caption=&#34;通过我们的 sidecar 容器访问 Istio 令牌&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;通过我们的 sidecar 容器访问 Istio 令牌&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;另一个是&lt;code&gt;runAsUser&lt;/code&gt;（和&lt;code&gt;runAsGroup&lt;/code&gt;）。虽然我们不能成为 root，但所有其他 UID 都是允许的——包括 Istio 的 UID，讽刺的是，这个 UID 是&lt;code&gt;1337&lt;/code&gt;（是的，真的）。我们将我们的 UID 设置为 1337，并成功地以 Istio 用户的身份运行。由于 Istio 本身是&lt;a href=&#34;https://istio.io/latest/docs/reference/config/analysis/ist0144/&#34; title=&#34;从 Istio 的 iptables 规则中排除的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从 Istio 的 iptables 规则中排除的&lt;/a&gt;——我们现在运行时没有任何流量限制！&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f4_hucce2eb2cef516eb1fd2e6e83f17027c7_49702_1732x548_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f4.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f4.png&#34; data-width=&#34;1732&#34; data-height=&#34;548&#34; alt=&#34;image&#34; data-caption=&#34;发送请求到内部网络——在 UID 1337 之前和之后&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;发送请求到内部网络——在 UID 1337 之前和之后&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们摆脱了流量束缚，开始扫描我们 Pod 的内部网络。使用我们的 Istio 令牌，我们能够从 Istiod 服务器读取配置并了解内部环境——这引导我们进行了以下发现。&lt;/p&gt;
&lt;h2 id=&#34;bug-2-loki-泄露-aws-令牌&#34;&gt;Bug #2: Loki 泄露 AWS 令牌&lt;/h2&gt;
&lt;p&gt;我们在集群中找到了一个 Grafana Loki 的实例，因此我们请求了&lt;code&gt;/config&lt;/code&gt;端点以查看 Loki 的配置。API 响应了完整的配置，包括 Loki 用来访问 S3 的 AWS 密钥：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f5_huaa2897b5e4e63de34faf7b73f9936593_32228_1232x506_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f5.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f5.png&#34; data-width=&#34;1232&#34; data-height=&#34;506&#34; alt=&#34;image&#34; data-caption=&#34;来自 SAP 的 Loki 服务器的配置摘录&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;来自 SAP 的 Loki 服务器的配置摘录&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这些密钥授予访问 Loki 的 S3 存储桶的权限，其中包含 AI Core 服务（SAP 称其不敏感）和客户 Pods 的大量日志。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f6_hue0d7f5178b763587af7cc81e3901c0b6_112876_1542x768_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f6.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f6.png&#34; data-width=&#34;1542&#34; data-height=&#34;768&#34; alt=&#34;image&#34; data-caption=&#34;Loki 的 S3 存储桶中的部分文件列表&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Loki 的 S3 存储桶中的部分文件列表&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;bug-3-未经身份验证的-efs-共享暴露用户文件&#34;&gt;Bug #3: 未经身份验证的 EFS 共享暴露用户文件&lt;/h2&gt;
&lt;p&gt;在内部网络中，我们发现了 6 个 AWS Elastic File System（EFS）实例，监听端口 2049。EFS 实例的一个&lt;a href=&#34;https://youtu.be/HcNmkCRXFdE&#34; title=&#34;常见问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;常见问题&lt;/a&gt;是它们默认配置为公共的——这意味着只要您可以访问其 NFS 端口，就不需要凭据即可查看或编辑文件。这些实例也不例外，我们使用简单的开源 NFS 工具，可以自由访问共享的内容。&lt;/p&gt;
&lt;p&gt;列出这些 EFS 实例上存储的文件，揭示了大量 AI 数据，包括代码和训练数据集，按客户 ID 分类：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f7_huea1d2ef8950240b7f27f8b35c438c3aa_141444_2628x1332_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f7.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f7.png&#34; data-width=&#34;2628&#34; data-height=&#34;1332&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f8_hu92afd2164e054e4a3f21b88e3a95ca03_137606_2067x1266_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f8.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f8.png&#34; data-width=&#34;2067&#34; data-height=&#34;1266&#34; alt=&#34;image&#34; data-caption=&#34;两个 EFS 共享的部分文件列表；每个文件夹代表一个不同的客户 ID&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;两个 EFS 共享的部分文件列表；每个文件夹代表一个不同的客户 ID&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;bug-4-未经身份验证的-helm-服务器危及内部-docker-注册表和-artifactory&#34;&gt;Bug #4: 未经身份验证的 Helm 服务器危及内部 Docker 注册表和 Artifactory&lt;/h2&gt;
&lt;p&gt;我们在网络上最有趣的发现是一个名为 Tiller 的服务，这是 Helm 包管理器的服务器组件（版本 2）。&lt;/p&gt;
&lt;p&gt;与 Tiller 的通信是通过其 gRPC 接口在端口 44134 进行的，该端口默认是未经身份验证的。&lt;/p&gt;
&lt;p&gt;在我们的内部网络上查询这个服务器，揭示了对 SAP 的 Docker 注册表以及其 Artifactory 服务器的高权限密钥：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f9_hue182f914ce24aa3f7eae562a9f261657_63094_1356x1176_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f9.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f9.png&#34; data-width=&#34;1356&#34; data-height=&#34;1176&#34; alt=&#34;image&#34; data-caption=&#34;通过 Helm 服务器查询暴露的容器注册表和 Artifactory 凭据&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;通过 Helm 服务器查询暴露的容器注册表和 Artifactory 凭据&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;使用这些密钥的读取权限，潜在的攻击者可以读取内部图像和构建，提取商业秘密，可能还包括客户数据。&lt;/p&gt;
&lt;p&gt;使用这些密钥的写权限，攻击者可以篡改图像和构建，对 SAP AI Core 服务进行供应链攻击。&lt;/p&gt;
&lt;h2 id=&#34;bug-5-未经身份验证的-helm-服务器危及-k8s-集群暴露-google-访问令牌和客户秘密&#34;&gt;Bug #5: 未经身份验证的 Helm 服务器危及 K8s 集群，暴露 Google 访问令牌和客户秘密&lt;/h2&gt;
&lt;p&gt;Helm 服务器暴露了读写操作。尽管读取权限暴露了敏感的秘密（如上所示），但服务器的写权限允许完全接管集群。&lt;/p&gt;
&lt;p&gt;Tiller 的&lt;code&gt;install&lt;/code&gt;命令接受一个 Helm 包并将其部署到 K8s 集群。我们创建了一个恶意 Helm 包，生成了一个具有&lt;code&gt;cluster-admin&lt;/code&gt;权限的新 Pod，并运行了安装命令。&lt;/p&gt;
&lt;p&gt;现在我们在集群上运行具有完全权限！&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f10_hu9184e1f80f877f573b2c4ce097c4c906_116018_2403x1357_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f10.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f10.png&#34; data-width=&#34;2403&#34; data-height=&#34;1357&#34; alt=&#34;image&#34; data-caption=&#34;通过 Helm 获得的 K8s 权限的部分列表&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;通过 Helm 获得的 K8s 权限的部分列表&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;使用这种访问级别，攻击者可以直接访问其他客户的 Pods 并窃取敏感数据，如模型、数据集和代码。这种访问还允许攻击者干扰客户的 Pods，污染 AI 数据并操纵模型的推理。&lt;/p&gt;
&lt;p&gt;此外，这种访问级别还将允许我们查看客户自己的秘密——甚至超出 SAP AI Core 范围的秘密。例如，我们的 AI Core 账户包含了我们的 AWS 账户（用于 S3 数据访问）、我们的 SAP HANA 账户（用于 Data Lake 访问）和我们的 Docker Hub 账户（用于拉取我们的镜像）的秘密。使用我们新获得的访问级别，我们查询了这些秘密，并设法以纯文本形式访问它们所有：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f11_huec839c8f43cf8fccb415f390cea691f8_73710_1632x1102_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/sapwned-sap-ai-vulnerabilities-ai-security/f11.png&#34; data-img=&#34;/trans/sapwned-sap-ai-vulnerabilities-ai-security/f11.png&#34; data-width=&#34;1632&#34; data-height=&#34;1102&#34; alt=&#34;image&#34; data-caption=&#34;使用我们的 K8s 权限访问客户秘密&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;使用我们的 K8s 权限访问客户秘密&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;同样的查询还揭示了一个名为&lt;code&gt;sap-docker-registry-secret&lt;/code&gt;的 SAP 访问 Google 容器注册表的密钥。我们已经确认这个密钥授予了读写权限——进一步扩大了潜在供应链攻击的范围。&lt;/p&gt;
&lt;h2 id=&#34;启示&#34;&gt;启示&lt;/h2&gt;
&lt;p&gt;我们对 SAP AI Core 的研究表明，深度防御的重要性。我们面临的主要安全障碍是 Istio 阻止我们的流量到达内部网络。一旦我们能够绕过这个障碍，我们就获得了对几个内部资产的访问权限，这些资产不需要任何其他身份验证——这意味着内部网络被视为可信的。加固这些内部服务本可以将这次攻击的影响降至最低，将其从完全服务接管降级为轻微的安全事件。&lt;/p&gt;
&lt;p&gt;符合我们之前与 K8s 相关的漏洞，这项研究还展示了在管理服务中使用 K8s 的租户隔离陷阱。控制平面（服务逻辑）和数据平面（客户计算）之间的关键分离受到了 K8s 架构的影响，该架构通过 API、身份、共享计算和软件分段网络允许它们之间的逻辑连接。&lt;/p&gt;
&lt;p&gt;此外，这项研究表明，AI R&amp;amp;D 过程引入的独特挑战。AI 培训本质上需要运行任意代码；因此，应该有适当的保护措施，确保不受信任的代码与内部资产和其他租户正确分离。&lt;/p&gt;
&lt;h2 id=&#34;披露时间线&#34;&gt;披露时间线&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 1 月 25 日&lt;/strong&gt; – Wiz 研究报告安全发现给 SAP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 1 月 27 日&lt;/strong&gt; – SAP 回复并分配了一个案件编号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 2 月 16 日&lt;/strong&gt; – SAP 修复了第一个漏洞并旋转了相关的秘密&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 2 月 28 日&lt;/strong&gt; – Wiz 研究绕过补丁使用 2 个新漏洞，报告给 SAP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 5 月 15 日&lt;/strong&gt; – SAP 部署修复了所有报告的漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2024 年 7 月 17 日&lt;/strong&gt; – 公开披露&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;保持联系&#34;&gt;保持联系！&lt;/h2&gt;
&lt;p&gt;嗨，我们是 Wiz 研究团队的 Hillai Ben-Sasson（&lt;a href=&#34;https://twitter.com/hillai&#34; title=&#34;@hillai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hillai&lt;/a&gt;），Shir Tamari（&lt;a href=&#34;https://twitter.com/shirtamari&#34; title=&#34;@shirtamari&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@shirtamari&lt;/a&gt;），Nir Ohfeld（&lt;a href=&#34;https://twitter.com/nirohfeld&#34; title=&#34;@nirohfeld&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@nirohfeld&lt;/a&gt;），Sagi Tzadik（&lt;a href=&#34;https://twitter.com/sagitz_&#34; title=&#34;@sagitz_&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sagitz_&lt;/a&gt;) 和 Ronen Shustin（&lt;a href=&#34;https://twitter.com/ronenshh&#34; title=&#34;@ronenshh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ronenshh&lt;/a&gt;）。我们是一群资深白帽黑客，我们的目标是让云成为每个人更安全的地方。我们主要关注在云中找到新的攻击向量并揭露云供应商的隔离问题。&lt;/p&gt;
&lt;p&gt;我们很想听听您的意见！欢迎通过 Twitter 或电子邮件与我们联系：&lt;a href=&#34;mailto:research@wiz.io&#34; title=&#34;research@wiz.io&#34;&gt;research@wiz.io&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>使用相互 TLS 和 Istio 保护应用程序通信</title>
      <link>https://jimmysong.io/trans/secure-apps-with-istio/</link>
      <pubDate>Mon, 06 Nov 2023 18:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/secure-apps-with-istio/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;摘要：本文讨论了使用相互 TLS (mTLS) 和 Istio 保护应用程序通信的重要性。mTLS 提供了端到端的安全性，只有源和目标可以解密数据，从而防止中间人攻击。然而，如果源或目标的身份没有加密，可能会出现问题。Istio 中的 mTLS 可以简单地启用，并为每个应用程序 pod 提供身份证书。为了强制执行严格的 mTLS，可以使用 Istio 的 PeerAuthentication 策略和 AuthorizationPolicy。最后，TLS 协议是最广泛审查、专家批准、经过战斗测试的数据安全协议之一，Istio 默认在内网应用程序通信中使用 TLS 1.3 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户采用服务网格的最大原因之一是使用相互 TLS（mTLS）基于可通过加密验证的身份来启用应用程序之间的安全通信。在此博客中，我们将讨论应用程序之间安全通信的要求，以及 mTLS 如何实现并满足所有这些要求，以及使用 Istio 启用应用程序之间 mTLS 的简单步骤。&lt;/p&gt;
&lt;h2 id=&#34;您需要什么来保护应用程序之间的通信&#34;&gt;您需要什么来保护应用程序之间的通信？&lt;/h2&gt;
&lt;p&gt;现代云原生应用程序经常分布在多个 Kubernetes 集群或虚拟机中。新版本经常进行阶段性部署，它们可以根据用户请求快速扩展和缩小。由于现代应用程序通过不依赖共同定位来提高资源利用效率，因此能够应用访问策略并保护这些分布式应用程序之间的通信至关重要，因为增加的多个入口点导致了更大的攻击面。忽视这一点将邀请数据丢失、数据盗窃、伪造数据或简单处理等巨大的业务风险。&lt;/p&gt;
&lt;p&gt;以下是应用程序之间安全通信的常见关键要求：&lt;/p&gt;
&lt;h3 id=&#34;身份&#34;&gt;身份&lt;/h3&gt;
&lt;p&gt;身份是任何安全架构的基本组成部分。在您的应用程序可以安全地发送数据之前，必须为应用程序建立&lt;strong&gt;身份&lt;/strong&gt;。这个建立身份的过程被称为&lt;strong&gt;身份验证&lt;/strong&gt; - 它涉及由某个知名的，受信任的&lt;strong&gt;权威机构&lt;/strong&gt;对应用程序工作负载进行一次或多次检查，以确认它是它所声称的那样。一旦权威机构满意，它就会授予工作负载一个身份。&lt;/p&gt;
&lt;p&gt;考虑出示护照的行为 - 你会向某个权威机构请求一个，那个权威机构可能会要求你提供几个不同的身份验证证明你是你所说的那个人 - 出生证明、现住址、医疗记录等。一旦你满足了所有的身份验证要求，你将（希望）被授予身份证件。你可以将那个身份证件给别人作为你已经满足了发证机构的所有身份验证要求的证据，如果他们信任发证机构（和身份证件本身），他们就可以信任关于你的所有内容（或者他们可以联系受信任的权威机构并验证该文件）。&lt;/p&gt;
&lt;p&gt;身份可以采取任何形式，但是，就像任何形式的身份证明一样，身份验证越弱，伪造就越容易，身份证明对于使用它进行决策的任何人来说就越无用。这就是为什么在计算中，密码可验证的身份非常重要 - 它们由可验证的权威机构签署，类似于您的护照和驾驶执照。基于任何较少的身份都是一个可以相对容易地利用的安全弱点。&lt;/p&gt;
&lt;p&gt;您的系统可能具有源自网络属性（例如 IP 地址）的身份，具有分布式身份缓存，跟踪身份与这些网络属性之间的映射。这些身份不像密码可验证的身份那样具有强大的保证，因为 IP 地址可能被重新分配给不同的工作负载，并且身份缓存可能并不总是更新到最新的状态。&lt;/p&gt;
&lt;p&gt;您希望应用程序使用密码可验证的身份，因为在建立连接时交换应用程序的密码可验证身份本质上比依赖于将 IP 地址映射到身份的系统更可靠，更安全。这些系统依赖于具有最终一致性和过时问题的分布式身份缓存，这可能在 Kubernetes 中创建结构性弱点，其中高频率的自动 pod 转换是常态。&lt;/p&gt;
&lt;h3 id=&#34;机密性&#34;&gt;机密性&lt;/h3&gt;
&lt;p&gt;加密应用程序之间传输的数据至关重要 - 因为在破坏常见、成本高昂和实际上微不足道的世界中，完全依赖于&lt;em&gt;安全的&lt;/em&gt;内部环境或其他安全边界早已不再适用。为了防止&lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34; title=&#34;中间人攻击&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中间人攻击&lt;/a&gt;，你需要为源 - 目标对创建一个唯一的加密通道，因为你希望有强大的身份唯一性保证以避免&lt;a href=&#34;https://en.wikipedia.org/wiki/Confused_deputy_problem&#34; title=&#34;混淆副手问题&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;混淆副手问题&lt;/a&gt;。换句话说，仅仅加密通道是不够的 - 它必须使用直接从唯一源和目标身份派生的唯一密钥进行加密，以便只有源和目标可以解密数据。此外，您可能需要根据安全团队的要求定制加密，例如通过选择特定的密码。&lt;/p&gt;
&lt;h3 id=&#34;完整性&#34;&gt;完整性&lt;/h3&gt;
&lt;p&gt;从源发送到目标的加密数据在发送后不能被除源和目标之外的任何身份修改。换句话说，接收到的数据与发送的数据相同。如果你没有&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_integrity&#34; title=&#34;data integrity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data integrity&lt;/a&gt;，那么中间的人可能在源和目标之间的通信过程中修改一些位或整个数据的内容。&lt;/p&gt;
&lt;h3 id=&#34;访问策略执行&#34;&gt;访问策略执行&lt;/h3&gt;
&lt;p&gt;应用程序所有者需要对其应用程序应用访问策略，并正确、一致且不含糊地执行它们。为了对通信渠道的两端应用策略，我们需要为每一端确定一个应用程序身份。一旦我们为可能的通信渠道的两端都有了一个可以通过密码验证的身份，并且来源链条明确，我们就可以开始确定谁可以与何物进行通信的策略。标准的 TLS，这是一种广泛使用的密码协议，用于保护客户端（例如，Web 浏览器）和服务器（例如，Web 服务器）之间的通信，只真正验证并要求一方的身份 - 服务器。但是，对于全面的端到端策略执行，对双方 - 客户端和服务器都有一个可靠、可验证、明确的身份至关重要。这对内部应用程序来说是一个共同的需求 - 想象一下，只有一个 &lt;code&gt;frontend&lt;/code&gt; 应用程序应该调用后端 &lt;code&gt;checkout&lt;/code&gt; 应用程序的 &lt;strong&gt;GET&lt;/strong&gt; 方法，但是不应该被允许调用 &lt;code&gt;POST&lt;/code&gt; 或 &lt;code&gt;DELETE&lt;/code&gt; 方法。或者，只有那些由特定 JWT 发行者发出 JWT 令牌的应用程序才能调用 &lt;code&gt;checkout&lt;/code&gt; 应用程序的 &lt;code&gt;GET&lt;/code&gt; 方法。通过利用双端的密码身份，我们可以确保强大的访问策略被正确地、安全地、可靠地执行，而且有可验证的审计轨迹。&lt;/p&gt;
&lt;h3 id=&#34;fips-合规性&#34;&gt;FIPS 合规性&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nist.gov/standardsgov/compliance-faqs-federal-information-processing-standards-fips&#34; title=&#34;联邦信息处理标准 (FIPS)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联邦信息处理标准 (FIPS)&lt;/a&gt; 是由 &lt;a href=&#34;https://www.nist.gov/&#34; title=&#34;国家标准与技术研究院 (NIST)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;国家标准与技术研究院 (NIST)&lt;/a&gt; 制定的联邦计算机系统的标准和指南。并非每个人都需要 FIPS 合规性，但 FIPS 合规性意味着满足了美国政府为保护敏感信息而设立的所有必要安全要求。与联邦政府合作时需要它。为了遵循美国政府制定的与网络安全相关的指南，许多私营部门都自愿使用这些 FIPS 标准。&lt;/p&gt;
&lt;p&gt;为了说明上述安全应用程序要求（身份、机密性和完整性），让我们使用 &lt;code&gt;frontend&lt;/code&gt; 应用程序调用 &lt;code&gt;checkout&lt;/code&gt; 应用程序的例子。记住，您可以把图中的 &lt;strong&gt;ID&lt;/strong&gt; 看作是任何类型的身份证明，比如政府颁发的护照、照片识别器：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/secure-apps-with-istio/requirements-flow_hu821d11a2a6c34a4d7299535bbd0ee6ee_167309_1000x625_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/secure-apps-with-istio/requirements-flow.png&#34; data-img=&#34;/trans/secure-apps-with-istio/requirements-flow.png&#34; data-width=&#34;1000&#34; data-height=&#34;625&#34; alt=&#34;image&#34; data-caption=&#34;前端调用结账应用程序时的要求&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;前端调用结账应用程序时的要求&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;mtls-如何满足上述要求&#34;&gt;mTLS 如何满足上述要求？&lt;/h2&gt;
&lt;p&gt;TLS 1.3（在撰写本文时的最新 TLS 版本） &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446&#34; title=&#34;规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;规范&lt;/a&gt; 的主要目标是在两个通信对等方之间提供一个安全通道。TLS 安全通道具有以下属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;验证：通道的服务器端始终被验证，客户端可选地被验证。当客户端也被验证时，安全通道成为一个相互的 TLS 通道。&lt;/li&gt;
&lt;li&gt;机密性：数据被加密且只对客户端和服务器可见。必须使用与源和目标身份证明无歧义地密码绑定的密钥来加密数据，以便可靠地保护应用程序层的流量。&lt;/li&gt;
&lt;li&gt;完整性：通过通道发送的数据无法在未被检测到的情况下进行修改。这是通过只有源和目标拥有给定会话的加密和解密密钥的事实来保证的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mtls-内部逻辑&#34;&gt;mTLS 内部逻辑&lt;/h3&gt;
&lt;p&gt;我们已经确定了，使用可以通过加密验证的身份标识对于保护通道和支持访问策略执行至关重要，我们也已经确定了，mTLS 是一种经过严密测试的协议，它为在通道的两端使用可以通过加密验证的身份标识提供了一些极其重要的保证 - 让我们深入了解一下 mTLS 协议在实际运行中是如何工作的。&lt;/p&gt;
&lt;h3 id=&#34;握手协议&#34;&gt;握手协议&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446#section-4&#34; title=&#34;握手协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;握手协议&lt;/a&gt; 验证了通信双方的身份，协商了加密模式和参数，并建立了共享的密钥材料。换句话说，握手的角色是验证通信双方的身份并协商会话密钥，以便连接的其余部分可以根据会话密钥进行加密。当您的应用程序建立 mTLS 连接时，服务器和客户端协商一个密码套件，该套件规定了您的应用程序将用于连接其余部分的加密算法，您的应用程序还协商了要使用的加密会话密钥。整个握手过程都被设计为能抵抗篡改 - 任何未持有与源和/或目标相同的独特，能够通过加密验证的身份文档的实体的干扰都会被拒绝。因此，在任何通信方继续进行应用程序数据之前，都有必要检查整个握手过程并验证其完整性。&lt;/p&gt;
&lt;p&gt;握手可以被认为是按照 TLS 1.3 规范中的&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446#section-2&#34; title=&#34;握手协议概述&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;握手协议概述&lt;/a&gt;有三个阶段 - 再次使用&lt;code&gt;frontend&lt;/code&gt;应用程序调用后端&lt;code&gt;checkout&lt;/code&gt;应用程序的例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一阶段：&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;协商可以用来保护握手和流量数据的加密参数和密钥。&lt;/li&gt;
&lt;li&gt;第二阶段：在此阶段和之后的所有内容都是加密的。在这个阶段，&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;建立其他握手参数，并确定是否也对客户端进行身份验证 - 也就是说，mTLS。&lt;/li&gt;
&lt;li&gt;第三阶段：&lt;code&gt;frontend&lt;/code&gt;通过其可通过加密验证的身份验证&lt;code&gt;checkout&lt;/code&gt;（在 mTLS 中，&lt;code&gt;checkout&lt;/code&gt;以相同的方式验证&lt;code&gt;frontend&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自 TLS 1.2 以来，与握手相关的有几个主要区别，有关更多详细信息，请参考 TLS 1.3 规范：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有握手消息（第二阶段和第三阶段）都使用在第一阶段协商的加密密钥进行加密。&lt;/li&gt;
&lt;li&gt;已经削减了遗留的对称加密算法。&lt;/li&gt;
&lt;li&gt;添加了零往返时间（0-RTT）模式，节省了连接设置的一个往返时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;记录协议&#34;&gt;记录协议&lt;/h3&gt;
&lt;p&gt;在握手阶段协商了 TLS 协议版本、会话密钥和&lt;a href=&#34;https://en.wikipedia.org/wiki/HMAC&#34; title=&#34;HMAC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HMAC&lt;/a&gt;后，双方现在可以通过&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8446#section-5&#34; title=&#34;记录协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;记录协议&lt;/a&gt;安全地交换被分块的加密数据。使用握手中协商的完全相同的参数对流量进行加密是至关重要的（并且是规范的一部分），以确保流量的机密性和完整性。&lt;/p&gt;
&lt;p&gt;将 TLS 1.3 规范中的两个协议放在一起，并使用&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;应用程序来说明以下流程：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/secure-apps-with-istio/mtls-flow_hu8ec90b8bb233e370e5a4eccd37afe29b_173241_1000x596_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/secure-apps-with-istio/mtls-flow.png&#34; data-img=&#34;/trans/secure-apps-with-istio/mtls-flow.png&#34; data-width=&#34;1000&#34; data-height=&#34;596&#34; alt=&#34;image&#34; data-caption=&#34;当前端调用结账应用程序时的 mTLS 流程&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;当前端调用结账应用程序时的 mTLS 流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;谁为&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;发出身份证书？它们通常由具有自己的&lt;a href=&#34;https://en.wikipedia.org/wiki/Root_certificate&#34; title=&#34;根证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;根证书&lt;/a&gt;或使用其根 CA 的中间证书的&lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority&#34; title=&#34;证书颁发机构（CA）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书颁发机构（CA）&lt;/a&gt;发出。根证书基本上是一份标识根 CA 的公钥证书，您的组织可能已经拥有此证书。根证书会与&lt;code&gt;frontend&lt;/code&gt;（或&lt;code&gt;checkout&lt;/code&gt;）的自己的根签名身份证书一起分发到&lt;code&gt;frontend&lt;/code&gt;。这就是基本的公钥基础设施（PKI）的工作方式 - CA 负责验证实体的身份文档，然后以证书的形式授予它一个无法伪造的身份文档。&lt;/p&gt;
&lt;p&gt;您可以依赖您的 CA 和中间 CA 作为身份&lt;strong&gt;真理&lt;/strong&gt;的来源，以一种维持高可用性并提供稳定、持久可验证的身份保证的结构化方式，而一个庞大的分布式 IP 和身份映射缓存则无法做到这一点。当&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;的身份证书由同一个根证书发出时，&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;checkout&lt;/code&gt;可以始终以一致且可靠的方式验证其对等身份，无论它们运行在哪个集群或节点或规模中。&lt;/p&gt;
&lt;p&gt;您了解了 mTLS 如何提供加密身份、机密性和完整性，那么当您的应用程序数量增长到数千个或更多，并且跨多个集群时，其可扩展性如何呢？如果您在多个集群中建立一个单一的根证书，那么只要它被根证书信任，系统就不需要在应用程序收到来自另一个集群的连接请求时进行处理 - 系统知道连接上的身份已经通过加密进行了验证。当您的应用程序 pod 更改 IP 或被重新部署到另一个集群或网络时，您的应用程序（或代表其行动的组件）只需使用其由 CA 铸造的受信任证书向目标发起流量即可。无论是 500+ 网络跳转还是直接连接，您的访问策略都会以相同的方式执行，无需跟踪身份缓存并计算哪个 IP 地址映射到哪个应用程序 pod。&lt;/p&gt;
&lt;p&gt;那么关于 FIPS 合规性呢？根据 TLS 1.3 规范，TLS 兼容的应用程序必须实现&lt;code&gt;TLS_AES_128_GCM_SHA256&lt;/code&gt;密码套件，并建议实现&lt;code&gt;TLS_AES_256_GCM_SHA384&lt;/code&gt;，这两者都在 NIST 的&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r2.pdf&#34; title=&#34;TLS 指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS 指南&lt;/a&gt;中。RSA 或 ECDSA 服务器证书也被 TLS 1.3 规范和 NIST 的 TLS 指南推荐。只要您为 mTLS 连接使用 FIPS 140-2 或 140-3 合规的加密模块，您就会走上&lt;a href=&#34;https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules&#34; title=&#34;FIPS 140-2 或 140-3 验证&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FIPS 140-2 或 140-3 验证&lt;/a&gt;的正确路径。&lt;/p&gt;
&lt;h2 id=&#34;可能出现的问题&#34;&gt;可能出现的问题&lt;/h2&gt;
&lt;p&gt;按照 TLS 1.3 规范正确实施 mTLS 至关重要。如果不按照 TLS 规范正确使用 mTLS，以下是一些可能在未被检测的情况下出现的问题：&lt;/p&gt;
&lt;h3 id=&#34;如果有人在连接中间静默地捕获加密数据会怎么样&#34;&gt;如果有人在连接中间静默地捕获加密数据会怎么样？&lt;/h3&gt;
&lt;p&gt;如果连接没有按照 TLS 规范中概述的握手和记录协议来进行，例如，连接遵循握手协议，但在记录协议中没有使用握手中协商的会话密钥和参数，您可能会发现您的连接的握手和记录协议之间没有关联，握手和记录协议之间的身份可能不同。TLS 要求握手和记录协议在同一连接中共享，因为将它们分开会增加中间人攻击的攻击面。&lt;/p&gt;
&lt;p&gt;mTLS 连接从握手开始到结束都具有一致的端到端安全性。加密数据是用证书中公钥协商的会话密钥加密的。只有源和目标可以使用私钥解密数据。换句话说，只有拥有私钥的证书所有者才能解密数据。除非黑客控制了证书的私钥，否则他或她没有办法搞乱 mTLS 连接以成功执行中间人攻击。&lt;/p&gt;
&lt;h3 id=&#34;如果源或目标身份没有加密安全怎么办&#34;&gt;如果源或目标身份没有加密安全怎么办？&lt;/h3&gt;
&lt;p&gt;如果身份基于网络属性，如 IP 地址，这些属性可能会重新分配给其他 pod，就无法使用加密技术验证该身份。由于此类身份不基于加密身份，因此您的系统可能有一个身份缓存，用于跟踪身份、pod 的网络标签、相应的 IP 地址和部署 pod 的 Kubernetes 节点信息之间的映射。使用身份缓存，您可能会遇到 pod IP 地址被重用和身份错误，当身份缓存在短时间内同步出现问题时，策略可能无法正确执行。例如，如果您的连接之间的对等方没有加密身份，您的系统将不得不从可能过时或不完整的身份缓存中获取身份。&lt;/p&gt;
&lt;p&gt;将身份映射到工作负载 IP 的这些身份缓存不是 ACID（原子性、一致性、隔离性和持久性），您希望您的安全系统应用于具有强保证的事物。考虑以下属性和您可能想要问自己的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过时：对等方如何验证缓存中的条目是否是&lt;strong&gt;当前&lt;/strong&gt;的？&lt;/li&gt;
&lt;li&gt;不完整：如果缓存未命中并且系统未能关闭连接，只有缓存&lt;strong&gt;同步器&lt;/strong&gt;失败时网络才会变得不稳定吗？&lt;/li&gt;
&lt;li&gt;如果某个东西根本没有 IP 怎么办？例如，默认情况下，AWS Lambda 服务没有公共 IP。&lt;/li&gt;
&lt;li&gt;非事务性：如果您读取两次身份，会看到相同的值吗？如果在访问策略或审计实施中不小心，这可能会导致真正的问题。&lt;/li&gt;
&lt;li&gt;谁将守护守护者自己？是否有既定的实践来保护缓存，就像 CA 有的那样？您有什么证据证明缓存没有被篡改吗？您是否被迫对一些不是您的 CA 的复杂基础设施的安全性进行推理（和审计）？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上问题中有些比其他问题更糟。您可以应用&lt;strong&gt;失败关闭&lt;/strong&gt;原则，但这并不能解决所有问题。&lt;/p&gt;
&lt;p&gt;身份也用于执行访问策略，例如授权策略，这些访问策略在请求路径中，您的系统必须快速做出决定，允许或拒绝访问。每当身份出现错误时，访问策略可能会被绕过，而无法被检测或审计。例如，您的身份缓存可能将您的&lt;code&gt;checkout&lt;/code&gt; pod 的先前分配的 IP 地址作为&lt;code&gt;checkout&lt;/code&gt;身份之一。如果&lt;code&gt;checkout&lt;/code&gt; pod 被回收，同一 IP 地址刚刚被分配给一个&lt;code&gt;frontend&lt;/code&gt; pod，那么在缓存更新之前，该&lt;code&gt;frontend&lt;/code&gt; pod 可能具有&lt;code&gt;checkout&lt;/code&gt;的身份，这可能导致错误的访问策略被执行。&lt;/p&gt;
&lt;p&gt;让我们假设以下大规模多集群部署，说明身份缓存过时问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;100 个集群，每个集群有 100 个节点，每个节点有 20 个 pod。总的 pod 数量是 200,000。&lt;/li&gt;
&lt;li&gt;0.25% 的 pod 一直在变动（滚动更新，重启，恢复，节点变动等），每次变动的窗口是 10 秒。&lt;/li&gt;
&lt;li&gt;每 10 秒有 500 个正在变动的 pod 分布到 10,000 个节点（缓存）。&lt;/li&gt;
&lt;li&gt;如果缓存同步器停滞，系统在 5 分钟后过时的%可能高达&lt;strong&gt;7.5%&lt;/strong&gt;！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上假设缓存同步器处于稳态。如果缓存同步器出现问题，会影响其健康检查，增加变动率，导致级联不稳定。&lt;/p&gt;
&lt;p&gt;CA 也可能被攻击者&lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority#CA_compromise&#34; title=&#34;攻击&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;攻击&lt;/a&gt;，攻击者假装是别人，欺骗 CA 发出证书。然后，攻击者可以使用该证书与其他对等方通信。这是&lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority#Certificate_revocation&#34; title=&#34;证书撤销&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书撤销&lt;/a&gt;可以通过撤销证书使其无效来解决问题。否则，攻击者可以利用被攻击的证书直到其过期。保持根证书的私钥在 HSM 中至关重要，该 HSM 应保持&lt;a href=&#34;https://en.wikipedia.org/wiki/Online_and_offline&#34; title=&#34;离线&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;离线&lt;/a&gt;，并使用中间证书签署工作负载证书。在 CA 停顿或停滞 5 分钟的情况下，您将无法获得新的或续期的工作负载证书，但之前发出的有效证书将继续为您的工作负载提供强大的身份保证。为了提高发行的可靠性，您可以将中间 CA 部署到不同的区域和地区。&lt;/p&gt;
&lt;h2 id=&#34;istio-中的-mtls&#34;&gt;Istio 中的 mTLS&lt;/h2&gt;
&lt;h3 id=&#34;启用-mtls&#34;&gt;启用 mTLS&lt;/h3&gt;
&lt;p&gt;在 Istio 中为内网应用程序启用 mTLS 非常简单。您需要做的就是将您的应用程序添加到网格中，这可以通过为您的命名空间标记侧车注入或环境来完成。在侧车的情况下，需要进行滚动重启，以便侧车被注入到您的应用程序 pod 中。&lt;/p&gt;
&lt;h3 id=&#34;加密身份&#34;&gt;加密身份&lt;/h3&gt;
&lt;p&gt;在 Kubernetes 环境中，&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#istio-identity&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;根据其服务帐户创建应用程序的身份。将应用程序添加到网格后，将向网格中的每个应用程序 pod 提供身份证书。&lt;/p&gt;
&lt;p&gt;默认情况下，您的 pod 的身份证书在 24 小时后过期，Istio 每 12 小时旋转一次 pod 身份证书，以便在出现妨害行为的情况下（例如，被攻击的 CA 或被盗的 pod 的私钥），被攻击的证书只能在证书过期并因此限制其可能造成的损害的非常有限的时间内工作。&lt;/p&gt;
&lt;h3 id=&#34;强制执行严格的-mtls&#34;&gt;强制执行严格的 mTLS&lt;/h3&gt;
&lt;p&gt;默认的 mTLS 行为是尽可能使用 mTLS，但并不强制执行。要严格强制您的应用程序只接受 mTLS 流量，您可以使用 Istio 的&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/peer_authentication/&#34; title=&#34;PeerAuthentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PeerAuthentication&lt;/a&gt;策略，对整个网格或每个命名空间或工作负载进行操作。此外，您还可以应用 Istio 的&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/&#34; title=&#34;AuthorizationPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AuthorizationPolicy&lt;/a&gt;来控制您的工作负载的访问。&lt;/p&gt;
&lt;h3 id=&#34;tls-版本&#34;&gt;TLS 版本&lt;/h3&gt;
&lt;p&gt;TLS 版本 1.3 是 Istio 在内网应用程序通信中的默认设置，使用 Envoy 的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto&#34; title=&#34;默认密码套件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;默认密码套件&lt;/a&gt;（例如，对于 Istio 1.19.0，为&lt;code&gt;TLS_AES_256_GCM_SHA384&lt;/code&gt;）。如果您需要旧的 TLS 版本，您可以为您的工作负载&lt;a href=&#34;https://istio.io/latest/docs/tasks/security/tls-configuration/workload-min-tls-version/&#34; title=&#34;配置不同的网格范围内的最小 TLS 协议版本&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置不同的网格范围内的最小 TLS 协议版本&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;结束语&#34;&gt;结束语&lt;/h2&gt;
&lt;p&gt;由互联网工程任务组（IETF）制定的 TLS 协议是存在的最广泛审查、专家批准、经过战斗测试的数据安全协议之一。TLS 也在全球广泛使用 - 每当您访问任何安全网站，您都可以放心购物，部分原因是因为锁定图标表明您正在使用 TLS 安全连接到受信任的网站。TLS 1.3 协议设计具有端到端的身份验证、保密性和完整性，以确保您的应用程序的身份和通信不被破坏，并防止中间人攻击。为了实现这一点（并被认为是符合标准的 TLS），正确验证通信对等方并使用从握手协商的密钥加密流量不仅重要，而且至关重要。现在您知道 mTLS 在满足您的安全应用程序通信要求（加密身份、保密性、完整性和访问策略执行）方面表现优秀，您可以简单地使用 Istio 将您的内网应用程序通信升级到 mTLS - 配置非常少！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;特别感谢 Louis Ryan、Ben Leggett、John Howard、Christian Posta、Justin Pettit 花费大量时间审查和提出博客的更新！&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>服务网格安全性优化最佳实践</title>
      <link>https://jimmysong.io/trans/optimize-traffic-management-and-security-with-these-service-mesh-best-practices/</link>
      <pubDate>Wed, 01 Feb 2023 11:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/optimize-traffic-management-and-security-with-these-service-mesh-best-practices/</guid>
      <description>
        
        
        &lt;p&gt;这是 &lt;a href=&#34;https://tetrate.io/blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/&#34; title=&#34;服务网格最佳实践系列文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格最佳实践系列文章&lt;/a&gt; 中的第三篇，摘自 Tetrate 创始工程师 Zack Butcher 即将出版的新书 Istio in Production。&lt;/p&gt;
&lt;p&gt;Istio 就像一组乐高积木：它具有许多功能，可以按照你想要的任何方式进行组装。出现的结构取决于你如何组装零件。在 &lt;a href=&#34;../service-mesh-deployment-best-practices-for-security-and-high-availability/&#34; title=&#34;上一篇中&#34;&gt;上一篇中&lt;/a&gt;，我们描述了一种运行时拓扑结构，用于构建健壮、有弹性且可靠的基础架构。在本文中，我们将描述一组网格配置，以帮助在运行时实现稳健性、弹性、可靠性和安全性。&lt;/p&gt;
&lt;p&gt;Istio 在其所谓的 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-root_namespace&#34; title=&#34;根命名空间&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;根命名空间&lt;/a&gt; 中支持全局默认配置 —— 默认在 &lt;code&gt;istio-system&lt;/code&gt;。在根命名空间中发布的配置默认适用于所有服务，但在本地命名空间中发布的任何配置都会覆盖它。因此，一些配置应该在根命名空间中发布，并且不允许在其他任何地方发布（例如用于在传输中强制加密的 PeerAuthentication 策略）。其他配置应该在每个服务自己的命名空间中编写（例如 VirtualService 控制它的弹性设置）。&lt;/p&gt;
&lt;p&gt;我们看到的最成功的网格采用将网格本身隐藏在另一个界面后面：例如 Helm 模板、Terraform 或更高级的解决方案，例如 &lt;a href=&#34;https://tetrate.io/tetrate-service-bridge/&#34; title=&#34;Tetrate Service Bridge (TSB)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge (TSB)&lt;/a&gt;。核心思想是只公开应用程序开发人员应该配置的一小部分网格功能，最好是使用他们理解的语言（例如，TSB 可以使用 &lt;a href=&#34;https://docs.tetrate.io/service-bridge/1.6.x/en-us/quickstart/apps&#34; title=&#34;带注释的 OpenAPI 规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;带注释的 OpenAPI 规范&lt;/a&gt; 进行配置）。首先，我们通常只向应用程序开发人员公开流量设置和授权。身份验证和遥测由各自的团队或代表他们的平台团队集中控制。&lt;a href=&#34;https://tetrate.io/blog/nist-standards-for-zero-trust-the-sp-800-204-series/&#34; title=&#34;NIST SP800-204 系列&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST SP800-204 系列&lt;/a&gt;，尤其是 &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-204a/final&#34; title=&#34;SP 800-204A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204A&lt;/a&gt; 和 &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-204b/final&#34; title=&#34;SP 800-204B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204B&lt;/a&gt;。Istio 项目站点也有一组 &lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/&#34; title=&#34;最佳实践&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最佳实践&lt;/a&gt;，也值得收藏。&lt;/p&gt;
&lt;h2 id=&#34;服务网格命名约定&#34;&gt;服务网格命名约定&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;：为 Istio 资源开发和维护一致的命名方案，最好基于它们配置的服务或主机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;：为跨集群的团队保持一致的名称。命名空间应该由一个团队拥有。&lt;/p&gt;
&lt;p&gt;Istio 资源应该根据它们配置的服务或主机来命名：&lt;code&gt;ServiceEntry&lt;/code&gt; 添加 &lt;code&gt;api.example.com&lt;/code&gt; 到网格的应该命名为 &lt;code&gt;external-api-example-com&lt;/code&gt;；服务的 &lt;code&gt;DestinationRule&lt;/code&gt;、&lt;code&gt;VirtualService&lt;/code&gt;、&lt;code&gt;PeerAuthentication&lt;/code&gt; 和 &lt;code&gt;Authorization&lt;/code&gt; 策略也都应该有相同的名称。PCI 命名空间中的内部服务 Payments（应用程序代码中的 hostname &lt;code&gt;payments.pci&lt;/code&gt;）应该被命名为 &lt;code&gt;payment-pci&lt;/code&gt;，其所有的网格配置名称也应该匹配。这些命名方案并不是硬性规定，但你应该在你的组织内建立并坚持一个一致的惯例。&lt;/p&gt;
&lt;p&gt;这些资源应该全部发布在它们配置的服务的命名空间中，或者发布在 &lt;code&gt;istio-system&lt;/code&gt; 命名空间中以进行网格范围的配置。外部服务通常发布到 &lt;code&gt;istio-system&lt;/code&gt; 中并由中心团队（平台或安全团队）管理。&lt;/p&gt;
&lt;p&gt;我们建议跨集群的团队使用一致的名称：无论集群租户模型如何，命名空间都应由单个团队拥有（请参阅下一节）。&lt;/p&gt;
&lt;h2 id=&#34;服务网格全局设置&#34;&gt;服务网格全局设置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;配置可见性&lt;/strong&gt;。Istio 有一个配置可见性的想法：配置可以默认应用于整个集群，或者它可以只应用于本地命名空间，甚至可以只应用于单个服务（选择对整个集群可见，或者只是特定的命名空间）。为了性能和安全，你应该将该字段默认为 &lt;code&gt;exportTo&lt;/code&gt; 本地名称空间（“.”）。你应该在安装时为 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-default_service_export_to&#34; title=&#34;&amp;lt;em&amp;gt;Services&amp;lt;/em&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Services&lt;/em&gt;&lt;/a&gt;、&lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-default_virtual_service_export_to&#34; title=&#34;&amp;lt;em&amp;gt;VirtualServices&amp;lt;/em&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;VirtualServices&lt;/em&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-default_destination_rule_export_to&#34; title=&#34;&amp;lt;em&amp;gt;DestinationRules&amp;lt;/em&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;DestinationRules&lt;/em&gt;&lt;/a&gt; 设置这个默认值。查看 Istio 的 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-default_service_export_to&#34; title=&#34;全局配置&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;全局配置&lt;/a&gt; 来配置这些默认值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IstioOperator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;controlplane&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# profile: default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultServiceExportTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# only the namespace the resource is published in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultVirtualServiceExportTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# equivalent, just different YAML syntax&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultDestinationRuleExportTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例 1：默认全局设置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个命名空间的 Sidecar 资源配置&lt;/strong&gt;。Istio 的 &lt;code&gt;Sidecar&lt;/code&gt; （API）资源控制 Istio 将哪些配置发送到每个命名空间中的 Sidecar。为了获得最佳性能和最低开销，你应该为每个命名空间管理一个配置，并管理 egress 部分以仅包括服务必须与之通信的主机。这将导致 Istio 向该命名空间中的 Envoy 实例发送更少的配置，从而减少它们的内存和 CPU 消耗。结合仅注册表出站流量策略（见下一条），Sidecar 资源还可以帮助限制攻击者通过 Envoy 的表面区域，因为不在 Sidecar 的 egress 部分的主机将是该 Envoy 实例的 &amp;ldquo;出站流量&amp;rdquo;。这本身并不是一个足够的安全策略（见下面的安全部分），而是增加了一个攻击者必须穿越的额外防御层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编写明确的出站（egress）流量策略&lt;/strong&gt;。Istio 提供了一些选项来配置它如何处理网格中的服务，该服务试图与 Istio 未知的端点进行通信：&lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode&#34; title=&#34;Outbound Traffic Policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Outbound Traffic Policy&lt;/a&gt;。Istio 可以允许所有流量，也可以将流量限制在网格已知的服务上。你应该在安装时配置 Istio，只允许连接到注册表中的服务。此外，你应该将所有需要与之通信的外部服务建模为 Mesh 中的 ServiceEntries（例如，SaaS 服务的 DNS 解析等），使用 DestinationRules 来配置与它们通信的 TLS。这些外部服务应该由安全团队集中管理，或者由平台团队代表他们管理。&lt;/p&gt;
&lt;h2 id=&#34;运行时流量管理配置&#34;&gt;运行时流量管理配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;为服务使用一致的全局名称，并使用 Istio 将它们映射到本地实例&lt;/strong&gt;。你应该使用一致的全局名称来访问服务。你可以使用 Istio 将这些全局名称映射到本地实例。例如，&lt;code&gt;payments.tetrate.internal&lt;/code&gt; 可以被所有内部应用程序使用，而 Istio 可以用来将该名称映射到服务实例，例如“在 &lt;code&gt;us-east-2&lt;/code&gt; Kubernetes 集群中的 &lt;code&gt;payments.default.svc.cluster.local&lt;/code&gt; 服务”。这种全局命名方案使开发人员可以像 SaaS 一样考虑所有服务，而无需仔细考虑运行时拓扑的细节，并且可以轻松地执行故障转移、金丝雀和跨集群路由等操作，作为你的网格使用成熟或组织需求演变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在根配置中定义粗略的默认弹性设置&lt;/strong&gt;。你应该为网格中的所有服务定义粗略的超时、重试、熔断和异常值检测设置。你可以在根配置命名空间中使用 &lt;code&gt;VirtualService&lt;/code&gt; 来实现此目的。各个团队应在其本地命名空间中指定自己的名称以覆盖默认值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为应用程序团队提供简化的“低 / 中 / 高”弹性设置&lt;/strong&gt;。将网格的底层 API 隐藏在更高级别接口后面的系统中，为配置默认断路和异常值检测设置的应用程序开发人员提供简化的“低 / 中 / 高”旋钮很有价值，因为很多领域容易配置错误，导致该应用程序性能不佳。&lt;/p&gt;
&lt;h2 id=&#34;运行时安全配置&#34;&gt;运行时安全配置&lt;/h2&gt;
&lt;p&gt;以下安全建议来自我们为微服务应用程序建立美国安全标准的工作，该标准由美国国家标准与技术研究院（NIST）在 &lt;a href=&#34;https://tetrate.io/blog/nist-standards-for-zero-trust-the-sp-800-204-series/&#34; title=&#34;SP 800-204 系列&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204 系列&lt;/a&gt; 中发布。&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;你可以在我们的综合指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;你可以在我们的综合指南&lt;/a&gt; 中阅读 NIST 针对微服务应用程序的所有安全建议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最小控制&lt;/strong&gt;。运行时的零信任至少需要以下五个控制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;加密传输中的所有内容&lt;/strong&gt;：提供消息真实性和窃听保护（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;SP 800-204，§MS-SS-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204，§MS-SS-4&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证服务到服务的通信&lt;/strong&gt;：每个应用程序都应验证与之通信的应用程序的身份（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;SP 800-204A，§SM-DR16；SP 800-204B，§APE-SR-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204A，§SM-DR16；SP 800-204B，§APE-SR-3&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;授权服务到服务访问&lt;/strong&gt;：每个应用程序都应使用其运行时身份授权与之通信的应用程序（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;SP 800-204B，§SAUZ-SR-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204B，§SAUZ-SR-1&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证最终用户身份&lt;/strong&gt;：每个请求都必须在服务调用图中的每个跃点进行身份验证（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;SP 800-204B，§EAUN-SR-1，§EUAZ-SR-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204B，§EAUN-SR-1，§EUAZ-SR-3&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;授权最终用户访问资源&lt;/strong&gt;：对每种资源的每次访问都应获得授权，而不仅仅是在前门访问一次（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;SP 800-204B，§EAUZ-SR-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204B，§EAUZ-SR-3&lt;/a&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio 提供传输中的加密（我们在上面讨论了全局启用），以及可验证的服务身份 (&lt;a href=&#34;https://tetrate.io/blog/why-would-you-need-spire-for-authentication-with-istio/&#34; title=&#34;SPIFFE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt; ) 和服务到服务的访问控制 (Istio &lt;code&gt;AuthorizationPolicy&lt;/code&gt;)。此外，它可以配置为代表应用程序（JWT、OIDC 令牌）验证某些形式的最终用户身份，最后 Istio 支持可插拔授权系统（Envoy 的 &lt;code&gt;ext_authz&lt;/code&gt;）以强制最终用户访问资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装限制性默认授权策略&lt;/strong&gt;。根据 &lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/security/#use-default-deny-patterns&#34; title=&#34;Istio 最佳实践&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 最佳实践&lt;/a&gt;，你应该安装一个不允许流量的默认授权策略，为每个服务发布对象创建 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 对象以管理允许它们与之通信的对象（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;SP 800-204B，SAUZ-SR-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204B，SAUZ-SR-1&lt;/a&gt;）。有助于实现这一目标的两个授权策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all-audit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AUDIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例 2：&lt;code&gt;IstioAuthorizationPolicy&lt;/code&gt;会拒绝所有流量，并审计记录它。你可能会运行这样的策略几周，以了解在启用强制执行之前你需要的策略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;{&lt;span class=&#34;nt&#34;&gt;} # or action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ALLOW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例 3：拒绝所有流量的 Istio AuthorizationPolicy。或者，你可以创建一个允许但具有空规则集的策略，这与空主体相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认情况下需要 mTLS 进行服务到服务通信&lt;/strong&gt;。通过在由安全或平台团队管理的根命名空间中配置 &lt;code&gt;PeerAuthentication&lt;/code&gt; 资源，应将传输中的加密设置为严格（即 &lt;a href=&#34;https://tetrate.io/blog/how-istios-mtls-traffic-encryption-works-as-part-of-a-zero-trust-security-posture/&#34; title=&#34;需要 mTLS 才能与服务通信&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;需要 mTLS 才能与服务通信&lt;/a&gt;）。网格外部的服务调用网格中的应用程序应该通过应用程序入口网关进行通信，它可以向外部服务提供简单的 TLS（甚至明文），因为它不太可能有证书来对网格执行 mTLS。网格内部的服务呼出应配置为使用简单的 TLS 或明文，并带有用于外部服务的 DestinationRule 的明文 (&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;NIST SP 800-204A, §SM-DR8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST SP 800-204A, §SM-DR8&lt;/a&gt; )。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLS 配置默认值&lt;/strong&gt;。Istio 开箱即用，具有良好的 TLS 设置（&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#mutual-tls-authentication&#34; title=&#34;TLS 最低版本 1.2，具有一组有限的密码套件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS 最低版本 1.2，具有一组有限的密码套件&lt;/a&gt;），但你可能需要根据你的环境对其进行调整（例如，在 &lt;a href=&#34;https://www.fedramp.gov/&#34; title=&#34;FedRAMP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FedRAMP&lt;/a&gt; 环境中遵守 &lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/140/3/final&#34; title=&#34;FIPS 140-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FIPS 140-3&lt;/a&gt; ）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy 支持通过配置 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/gateway/#ServerTLSSettings-cipher_suites&#34; title=&#34;网关&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网关&lt;/a&gt; 为每个服务配置最低 TLS 版本和一组受支持的密码套件。&lt;/li&gt;
&lt;li&gt;如果可能，我们建议将 &lt;strong&gt;TLS 1.3 作为最低版本&lt;/strong&gt; 执行（如果你只执行 mTLS Envoy-to-Envoy），并为需要较旧或安全性较低的 TLS 配置的外部流量使用网关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为每个服务分配一个唯一的运行时身份，以促进表达性强、细粒度的授权策略并限制暴露于攻击&lt;/strong&gt;。为你正在部署的每个服务分配一个唯一的运行时标识。在 Kubernetes 中，不要在每个命名空间中使用默认的 Kubernetes 服务帐户，而是为每个命名空间中的每个服务分配一个唯一的服务帐户。授权策略只能在身份的粒度上轻松管理。当多个运行时组件共享相同的身份时，很难管理一个访问控制策略来表达你的预期访问权限，同时不允许使用共享身份的某些组件进行过于广泛的访问。这导致更大的表面积暴露给可能危及系统的一个组件的攻击者（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;NIST SP 800-204A §SM-DR11，§SM-DR18&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST SP 800-204A §SM-DR11，§SM-DR18&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将服务到服务的通信限制在本地命名空间&lt;/strong&gt;。默认情况下，服务间通信应限制在本地名称空间内。不幸的是，这不能写为根配置命名空间中的单个 AuthorizationPolicy。相反，可以将仅允许在本地命名空间中访问的默认 AuthorizationPolicy 模板化为默认值，并且应允许应用程序团队编写他们自己的更专业（受限）的策略（&lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;NIST SP800-204B，§SAUZ-SR-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST SP800-204B，§SAUZ-SR-1&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;p&gt;我们希望从我们多年帮助客户构建成功的服务网格实践的经验中获得的这些最佳实践将有助于促进你的部署。如果你还没有，请查看服务网格最佳实践系列中的其他帖子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/&#34; title=&#34;第 1 部分：如何将服务网格作为安全模型的一部分，以分层形式将微服务安全与传统安全结合起来&#34;&gt;第 1 部分：如何将服务网格作为安全模型的一部分，以分层形式将微服务安全与传统安全结合起来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/&#34; title=&#34;第 2 部分：服务网格安全性和高可用性部署最佳实践&#34;&gt;第 2 部分：服务网格安全性和高可用性部署最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如需全面了解 NIST 微服务安全标准，请 &lt;a href=&#34;https://tetrate.io/tetrates-guide-to-federal-security-requirements-for-microservices/&#34; title=&#34;下载我们的免费指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载我们的免费指南&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;接下来多租户的服务网格最佳实践&#34;&gt;接下来：多租户的服务网格最佳实践&lt;/h3&gt;
&lt;p&gt;在我们关于服务网格最佳实践系列的下一篇文章中，我们将讨论我们看到客户正在努力解决的常见租赁决策点，并重点关注网格如何帮助促进这些决策。我们将涵盖的主题包括 Kubernetes 集群所有权、命名空间所有权、配置所有权，以及如何使用服务网格应用程序网关来缓解中断。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>服务网格安全性和高可用性部署最佳实践</title>
      <link>https://jimmysong.io/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/</link>
      <pubDate>Mon, 30 Jan 2023 11:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/</guid>
      <description>
        
        
        &lt;p&gt;这是 &lt;a href=&#34;https://tetrate.io/blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/&#34; title=&#34;服务网格最佳实践系列文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格最佳实践系列文章&lt;/a&gt; 中的第二篇，摘自 Tetrate 创始工程师 Zack Butcher 即将出版的书籍 Istio in Production。&lt;/p&gt;
&lt;p&gt;当涉及到在多集群的基础设施中部署服务网格时，有一些可移动的部分。这里主要想强调的是控制平面应该如何部署在应用程序附近，入口应该如何部署以促进安全性和敏捷性，如何使用 Envoy 促进跨集群负载均衡，以及网格内部如何使用证书。&lt;/p&gt;
&lt;h2 id=&#34;使服务网格控制平面与故障域保持一致&#34;&gt;使服务网格控制平面与故障域保持一致&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;建议：围绕故障域部署松散耦合的控制平面以实现高可用性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构建高可用性系统可能具有挑战性，而且通常成本很高。我们知道的一种经过验证的技术是围绕故障域构建。故障域是当关键系统发生故障时受影响的基础架构部分。我们构建可靠系统的基本方法是将系统跨越的故障域分组为多个独立的孤岛。最终系统的整体可靠性取决于我们可以使孤岛的独立程度。实际上，总是存在一些相互依赖性，将其最小化总是成本与可用性的权衡。&lt;/p&gt;
&lt;p&gt;在没有耦合故障域的情况下创建隔离孤岛的最简单方法是在每个孤岛中运行关键服务的独立副本。我们可以说这些副本是筒仓的本地副本 —— 它们共享相同的故障域。在云原生架构中，Kubernetes 集群形成了最自然的筒仓边界。Istio 是一项关键服务，因此我们在每个应用程序集群中运行一个 Istio 控制平面实例。换句话说，我们部署 Istio 使其故障域与你的应用程序的故障域保持一致。&lt;/p&gt;
&lt;p&gt;此外，我们确保 Istio 控制平面实例是松散耦合的，不需要直接与其他集群通信，从而最大限度地减少其与孤岛外部的通信。有关如何实现此目的的详细信息，请参阅下面的多集群部分。&lt;/p&gt;
&lt;h2 id=&#34;使用应用程序入口网关隔离每个应用程序的流量&#34;&gt;使用应用程序入口网关隔离每个应用程序的流量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;建议：从每个应用程序或应用程序团队的网关（应用程序入口网关）开始，以帮助缓解共享中断。随着时间的推移你操作经验的增加，将应用程序入口合并到共享网关以优化成本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然 Istio 默认附带共享 &lt;code&gt;istio-ingressgateway&lt;/code&gt;，但我们不建议使用共享网关。大多数采用网格的团队都需要时间来构建实施共享网关模型所需的审查实践和操作，而没有共享中断的风险。特别是在 Istio 实施的早期，我们建议每个团队部署一个 Envoy 网关。我们称这些为应用程序入口网关。随着你获得操作经验，你可以开始将应用程序合并到共享网关上以优化成本。&lt;/p&gt;
&lt;p&gt;使用共享网关模型实现每个团队隔离的捷径是为每个团队分配一个单独的主机名。按主机名隔离的团队可以更安全地配置共享网关实例。然而，其他共同命运的中断风险仍然存在，例如入口代理部署的错误配置、嘈杂的邻居消耗资源和增加所有应用程序的延迟等。根据我们的经验，每个团队一个网关的方法会产生最快的影响，并且失败的机会最少，并且总体成本相对较低。&lt;/p&gt;
&lt;p&gt;我们期望成熟部署的最终状态是 80-20 的比例：大多数应用程序将通过共享网关接收流量，而一小部分高度关键或敏感的应用程序将保留专用网关。&lt;/p&gt;
&lt;h2 id=&#34;使用应用程序边缘网关在多个集群之间分配入口流量&#34;&gt;使用应用程序边缘网关在多个集群之间分配入口流量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;建议：使用应用程序边缘网关为客户端提供单一地址，以供客户端使用并将流量分配到跨多个集群的应用程序入口网关。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/f1_hu4e0af13941a7213066b93c4df427cd8b_40712_744x680_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/f1.png&#34; data-img=&#34;/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/f1.png&#34; data-width=&#34;744&#34; data-height=&#34;680&#34; alt=&#34;image&#34; data-caption=&#34;图 1：基于 Envoy 的应用程序边缘网关。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：基于 Envoy 的应用程序边缘网关。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们经常看到客户需要跨多个集群分配入口流量。例如，他们可能希望启用蓝 / 绿基础设施升级，以促进跨区域故障转移，或者通过使用 Envoy 的 L7 功能将流量从单体迁移到微服务来实现扼杀模式。我们称这些为应用程序边缘网关。&lt;/p&gt;
&lt;p&gt;为了实现这个用例，我们将部署 Envoy—— 在专用的 Kubernetes 集群中或作为一组虚拟机 —— 来接收外部流量。这些 Envoy 实例将通过其 Kubernetes 入口或 VM VIP 将流量转发到你的应用程序。这与 ingress-per-team 方法协同工作：多集群网关为客户端提供一个单一地址以供使用，根据你的基础设施需要提供尽可能多的应用程序网关和集群。&lt;/p&gt;
&lt;p&gt;虽然此网关确实存在共享故障域，但其配置远比每个应用程序一个入口网关的配置简单。因此，作为共享基础架构运行起来更容易，也更安全。每个集群都有一个应用程序入口网关的共享应用程序边缘网关是一种强大而灵活的模型，用于在网格上部署和操作应用程序，还可以更轻松地操作底层基础设施。&lt;/p&gt;
&lt;h2 id=&#34;证书和公钥基础设施-pki-的建议&#34;&gt;证书和公钥基础设施 (PKI) 的建议&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;建议：从你现有的企业根目录为网格 mTLS 创建一个中间签名证书。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Istio 使用常规 X.509 证书进行身份验证并在网格中启用传输加密。我们建议为现有企业根目录中的所有网格 mTLS 创建一个网格中间签名证书。如果每个环境都有一个根，请为每个环境创建一个网格中间签名证书。使用该网格中间颁发证书为每个 Istio 安装创建一个签名证书。我们建议创建一个网格中间签名证书，以便在任何特定环境中网格的整个 PKI 是一棵树，如果需要可以一起失效。成本是一些额外的证书管理，与控制平面签名证书相比，在管理网格中间签名证书的生命周期时需要更加小心。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/f2_hu499f3b283f11a5f6c5b370fbb7ef2e62_57204_1152x696_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/f2.png&#34; data-img=&#34;/trans/service-mesh-deployment-best-practices-for-security-and-high-availability/f2.png&#34; data-width=&#34;1152&#34; data-height=&#34;696&#34; alt=&#34;image&#34; data-caption=&#34;图 2. Tetrate 推荐的将网格与现有 PKI 集成的方法：在环境（如 prod）中为 Istio 生成中间签名证书，使用它向该环境中的每个 Istio 控制平面实例颁发签名证书，并让 Istio 像往常一样向每个集群中的所有 pod 颁发工作负载（叶）证书。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2. Tetrate 推荐的将网格与现有 PKI 集成的方法：在环境（如 prod）中为 Istio 生成中间签名证书，使用它向该环境中的每个 Istio 控制平面实例颁发签名证书，并让 Istio 像往常一样向每个集群中的所有 pod 颁发工作负载（叶）证书。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Istio 监视文件系统，并在检测到文件更改时重新加载其签名证书。因此，只要你有一个批准的机制来将秘密加载到 &lt;em&gt;istiod&lt;/em&gt; pod 的文件系统中 —— 比如 &lt;em&gt;cert-manager&lt;/em&gt;、Vault 的 &lt;em&gt;init-agent&lt;/em&gt; 或 sidecar，或者只是存储在加密 &lt;em&gt;etcd&lt;/em&gt; 中的普通旧 Kubernetes Secret—— 集成 Istio 进入你的 PKI 应该很容易。控制平面签名证书的轮换应由你的 PKI 自动执行。&lt;/p&gt;
&lt;p&gt;Istio 使用众所周知的密码学库：Istio 的内部 CA 使用 Golang 的密码学套件，Envoy（sidecar 和 ingress）使用 BoringSSL 进行证书验证和传输中的加密。通过 Tetrate 的开源 Istio 发行版 &lt;a href=&#34;https://tetr8.io/tid&#34; title=&#34;Tetrate Istio Distro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro&lt;/a&gt; ，经过 FIPS 验证的控制平面和数据平面构建也作为 &lt;a href=&#34;https://tetr8.io/tis&#34; title=&#34;Tetrate Istio 订阅&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio 订阅&lt;/a&gt; 的一部分提供，因此你可能期望的所有 X.509 约束（基本约束，如 CA 和深度，开箱即用地支持和强制执行命名约束、策略约束等）。&lt;/p&gt;
&lt;h3 id=&#34;使用极短寿命的工作负载证书以轻松吊销&#34;&gt;使用极短寿命的工作负载证书以轻松吊销&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;建议：使用 Istio 来自动化证书管理，以便设置极短的工作负载证书 TTL 变得切实可行，从而使 &lt;a href=&#34;https://csrc.nist.gov/glossary/term/certificate_revocation_list&#34; title=&#34;证书撤销列表（CRL）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书撤销列表（CRL）&lt;/a&gt; 保持简短且易于管理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在证书颁发和轮换（Istio 为你自动执行）之后，PKI 中最大的挑战是证书吊销。证书吊销是通过证书吊销列表实现的，通常 CRL 具有 24 小时的强制执行 SLA：添加到列表中的证书在吊销后最多 24 小时内可能会被基础设施视为有效。此外，由于吊销的证书必须在其整个生命周期 (TTL) 内保留在列表中，因此吊销列表会变得庞大而笨拙。&lt;/p&gt;
&lt;p&gt;Istio 提供的一个更好的解决方案是自动化证书管理，以便设置极短的工作负载证书 TTL 是切实可行的。默认情况下，Istio 附带 24 小时的工作负载证书 TTL。这足够短，大多数安全组织可以选择让受损的证书过期，而不是明确地撤销它们。而且，当你向 CRL 添加证书时，它只需要在那里停留很短的时间（因为我们不需要在 CRL 上保留过期的证书）。通过这种方式，网格有助于解决大多数组织面临的最痛苦的 PKI 问题：它颁发和吊销短期证书，这意味着吊销列表可以在需要时保持简短且易于管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：由于网格使用 mTLS 证书作为身份，Istio 将 Envoy 配置为自动丢弃已建立的连接，以强制客户端和服务器在任何一方轮换证书时重新验证彼此。这是 Istio 实现中的设计决策，通常通过 Istio 的弹性功能对应用程序隐藏：对应用程序透明的自动重试重新建立连接。在网格中设置较短的证书 TTL 会强制这些重新连接更频繁地发生。值得注意的是，这种行为偶尔会中断一些期望长期 TCP 连接的应用程序。&lt;/p&gt;
&lt;h3 id=&#34;进一步的证书推荐&#34;&gt;进一步的证书推荐&lt;/h3&gt;
&lt;p&gt;你应该与你的安全团队协调，为你的网格颁发的证书建立适当的约束。我们推荐的一些常见约束如下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证书生命周期 (TTL)&lt;/strong&gt;。请注意，只要证书是从同一个根颁发的，Istio 就支持控制平面签名证书和工作负载证书的零停机轮换。我们建议每个级别的证书生命周期如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网格中间签名证书 1-3 年&lt;/li&gt;
&lt;li&gt;控制平面签名证书 3 个月&lt;/li&gt;
&lt;li&gt;工作负载证书需要 12-24 小时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 自动处理工作负载证书的轮换。这些证书上的短 TTL（少于 24 小时）有助于限制可能被盗的凭据进行时间限制攻击，还可以减少对 CRL 的需求。控制平面证书应按一个月的偏移轮换以确保平稳过渡 —— 换句话说，在 3 个月的 TTL 到期前 1 个月轮换控制平面签名证书。类似地，当网格中间签名证书还剩一半到三分之一的生命周期时轮换（一年 TTL 提前 3-4 个月，三年 TTL 提前 6-8 个月）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础（CA 和深度）&lt;/strong&gt;。控制平面签名证书应该只能颁发叶证书：用于工作负载识别的非签名证书。因此，应配置深度限制以防止控制平面签名证书颁发任何其他签名证书。&lt;/p&gt;
&lt;p&gt;网格中间签名证书需要创建控制平面签名证书，因此它应该配置一个深度，以便能够&lt;strong&gt;在它下面创建一个级别的签名证书，而不是更多&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;名称约束&lt;/strong&gt;。Istio 颁发的工作负载证书不会填充 X.509 主体名称 (SN) 字段；网格身份验证依赖于作为主体备用名称 (SAN) 字段携带的 SPIFFE 身份。阅读 &lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/X509-SVID.md#4-constraints-and-usage&#34; title=&#34;SPIFFE 规范以获取有关验证和身份验证工作的信息&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 规范以获取有关验证和身份验证工作的信息&lt;/a&gt;，以及 Istio 的 &lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#istio-identity&#34; title=&#34;文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt; 以了解 Istio 如何根据 SPIFFE 对身份进行编码。在为网格中间和控制平面签名证书编写名称约束时，请记住这一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;密钥用法&lt;/strong&gt;。 &lt;code&gt;keyCertSign&lt;/code&gt; 必须为网格中间签名证书和控制平面签名证书设置，但应为工作负载证书禁用。换句话说，网格中间和控制平面证书是签名证书，而工作负载证书不是。&lt;/p&gt;
&lt;p&gt;根据 SPIFFE 的建议，不应将签名证书用于传输中的加密，并且应配置密钥使用以防止它（通过加密约束）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展密钥用法&lt;/strong&gt;。虽然此处没有具体要求，但 SPIFFE X.509 SVID 规范说明 &lt;code&gt;id-kp-serverAuth&lt;/code&gt; 和 &lt;code&gt;id-kp-clientAuth&lt;/code&gt; 应针对叶（工作负载）证书进行配置。&lt;/p&gt;
&lt;p&gt;SPIFFE 规范还推荐了 &lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/X509-SVID.md#4-constraints-and-usage&#34; title=&#34;各种证书约束&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;各种证书约束&lt;/a&gt;，尽管其中大部分上面已经约束了。&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;p&gt;我们希望从多年帮助我们的客户充分利用服务网格的经验中收集的这些最佳实践将有助于促进你的部署。如果你还没有，请查看 &lt;a href=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/&#34; title=&#34;如何将服务网格作为安全模型的一部分，以分层形式将微服务安全与传统安全结合起来&#34;&gt;如何将服务网格作为安全模型的一部分，以分层形式将微服务安全与传统安全结合起来&lt;/a&gt; 这篇文章。&lt;/p&gt;
&lt;p&gt;接下来：服务网格运行时配置建议。在我们的下一篇文章中，我们将谈论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名约定&lt;/li&gt;
&lt;li&gt;全局设置&lt;/li&gt;
&lt;li&gt;流量管理&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;遥测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;敬请关注。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>深入探讨：ACME DNS 质询验证的自动化</title>
      <link>https://jimmysong.io/trans/technical-deep-dive-securing-automation-acme-dns-challenge-validation/</link>
      <pubDate>Tue, 10 Jan 2023 08:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/technical-deep-dive-securing-automation-acme-dns-challenge-validation/</guid>
      <description>
        
        
        &lt;p&gt;注：原文发布于 2018 年 2 月 26 日。&lt;/p&gt;
&lt;p&gt;2018 年 &lt;a href=&#34;https://www.letsencrypt.org/&#34; title=&#34;Let&amp;amp;rsquo;s Encrypt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; （免费、自动化、开放的证书颁发机构 EFF 在两年前帮助推出）达到了一个巨大的里程碑： &lt;a href=&#34;https://www.eff.org/deeplinks/2018/02/lets-encrypt-hits-50-million-active-certificates-and-counting&#34; title=&#34;颁发了超过 5000 万个有效证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;颁发了超过 5000 万个有效证书&lt;/a&gt;。而且这个数字只会继续增长，因为几周后 Let&amp;rsquo;s Encrypt 也将开始颁发“通配符”证书 —— 这是许多系统管理员一直要求的功能。&lt;/p&gt;
&lt;h2 id=&#34;什么是通配符证书&#34;&gt;什么是通配符证书？&lt;/h2&gt;
&lt;p&gt;为了验证 HTTPS 证书，用户的浏览器会检查以确保证书中实际列出了网站的域名。例如，来自 &lt;code&gt;www.eff.org&lt;/code&gt; 的证书实际上必须将 &lt;code&gt;www.eff.org&lt;/code&gt; 列为该证书的有效域。如果所有者只想对他的所有域使用一个证书，则证书还可以列出多个域（例如，&lt;code&gt;www.eff.org&lt;/code&gt;、&lt;code&gt;ssd.eff.org&lt;/code&gt;、&lt;code&gt;sec.eff.org&lt;/code&gt; 等）。通配符证书只是一个证书，上面写着“我对这个域中的所有子域都有效”，而不是明确地将它们全部列出。（在证书中，这是通过使用通配符来表示的，用星号表示。所以如果你今天检查 eff.org 的证书，它会说它对 *.eff.org 有效。）这样，&lt;/p&gt;
&lt;p&gt;为了颁发通配符证书，Let&amp;rsquo;s Encrypt 将要求用户通过使用基于 &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_Name_System&#34; title=&#34;DNS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DNS&lt;/a&gt; 的质询来证明他们对域的控制，DNS 是一种域名系统，可将 &lt;code&gt;www.eff.org&lt;/code&gt; 等域名转换为 69.50.232.54 等 IP 地址。从像 Let&amp;rsquo;s Encrypt 这样的证书颁发机构 (CA) 的角度来看，没有比修改其 DNS 记录更好的证明您控制域的方法，因为控制域是 DNS 的本质。&lt;/p&gt;
&lt;p&gt;但 Let&amp;rsquo;s Encrypt 背后的一个关键思想是获取证书应该是一个自动过程。但是，为了实现自动化，请求证书的软件还需要能够修改该域的 DNS 记录。为了修改 DNS 记录，该软件还需要能够访问 DNS 服务的凭据（例如登录名和密码，或加密令牌），并且这些凭据必须存储在自动化发生的任何地方。在许多情况下，这意味着如果处理该过程的机器受到威胁，DNS 凭据也会受到威胁，这才是真正的危险所在。在本文的其余部分，我们将深入探讨该过程中涉及的组件，以及使它更安全的选项。&lt;/p&gt;
&lt;h2 id=&#34;dns-质询如何运作&#34;&gt;DNS 质询如何运作？&lt;/h2&gt;
&lt;p&gt;在高层次上，DNS 质询的工作方式与作为 ACME 协议一部分的所有其他自动质询一样 —— 证书颁发机构 (CA)（如 Let&amp;rsquo;s Encrypt）和客户端软件（如 Certbot）使用该协议来就服务器请求的证书进行通信，以及服务器应该如何证明相应域名的所有权。在 DNS 质询中，用户使用支持 DNS 质询类型的 Certbot 等 ACME 客户端软件向 CA 申请证书。当客户端请求证书时，CA 要求客户端通过向其 DNS 区域添加特定的 TXT 记录来证明对该域的所有权。更具体地说，CA 向 ACME 客户端发送一个唯一的随机令牌，并且控制域的任何人都应该将此 TXT 记录放入其 DNS 区域，在名为 &lt;code&gt;_acme-challenge&lt;/code&gt; 的预定义记录中。当令牌值添加到 DNS 区域时，客户端告诉 CA 继续验证质询，之后 CA 将向域的权威服务器执行 DNS 查询。如果权威 DNS 服务器回复包含正确质询令牌的 DNS 记录，则证明域的所有权并且证书颁发过程可以继续。&lt;/p&gt;
&lt;h2 id=&#34;dns-控制数字身份&#34;&gt;DNS 控制数字身份&lt;/h2&gt;
&lt;p&gt;DNS 区域泄露之所以如此危险，是因为 DNS 是用户的浏览器所依赖的，以了解他们在尝试访问您的域时应该联系的 IP 地址。这适用于在您的域下使用可解析名称的每项服务，从电子邮件到 Web 服务。当 DNS 受到威胁时，恶意攻击者可以轻松拦截指向您的电子邮件或其他受保护服务的所有连接，终止 TLS 加密（因为他们现在可以证明对该域的所有权并为其获取自己的有效证书），阅读明文数据，然后重新加密数据并将连接传递到您的服务器。对于大多数人来说，这很难被发现。&lt;/p&gt;
&lt;h2 id=&#34;独立和有限的特权&#34;&gt;独立和有限的特权&lt;/h2&gt;
&lt;p&gt;严格来说，为了让 ACME 客户端以自动方式处理更新，客户端只需要访问可以更新 &lt;code&gt;_acme-challenge&lt;/code&gt; 子域的 TXT 记录的凭据。不幸的是，大多数 DNS 软件和 DNS 服务提供商不提供允许限制这些权限的精细访问控制，或者根本不提供 API 来处理基本 DNS 区域更新或传输之外的自动化。这使得可能的自动化方法无法使用或不安全。&lt;/p&gt;
&lt;p&gt;一个简单的技巧可以帮助克服这些限制：使用 &lt;a href=&#34;https://en.wikipedia.org/wiki/CNAME_record&#34; title=&#34;CNAME 记录&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNAME 记录&lt;/a&gt;。CNAME 记录本质上充当到另一个 DNS 记录的链接。Let&amp;rsquo;s Encrypt 遵循 CNAME 记录链，并将解析链中最后一条记录的质询验证令牌。&lt;/p&gt;
&lt;h2 id=&#34;缓解问题的方法&#34;&gt;缓解问题的方法&lt;/h2&gt;
&lt;p&gt;即使使用 CNAME 记录，潜在的问题仍然存在，即 ACME 客户端仍然需要访问允许它修改某些 DNS 记录的凭据。有不同的方法可以缓解这个潜在的问题，在泄露的情况下具有不同程度的复杂性和安全影响。在接下来的部分中，本文将介绍其中一些方法，同时尝试解释如果凭据被泄露可能产生的影响。除了一个例外，它们都使用 CNAME 记录。&lt;/p&gt;
&lt;h3 id=&#34;只允许更新-txt-记录&#34;&gt;只允许更新 TXT 记录&lt;/h3&gt;
&lt;p&gt;第一种方法是创建一组具有仅允许更新 TXT 记录的权限的凭证。在泄露的情况下，此方法将影响限制为攻击者能够为 DNS 区域内的所有域颁发证书（因为他们可以使用 DNS 凭据来获取自己的证书），以及中断邮件传递。对邮件传递的影响源于邮件特定的 TXT 记录，即 &lt;a href=&#34;https://en.wikipedia.org/wiki/Sender_Policy_Framework&#34; title=&#34;SPF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPF&lt;/a&gt;、 &lt;a href=&#34;https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail&#34; title=&#34;DKIM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DKIM&lt;/a&gt;、其扩展名 &lt;a href=&#34;https://en.wikipedia.org/wiki/Author_Domain_Signing_Practices&#34; title=&#34;ADSP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ADSP&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/DMARC&#34; title=&#34;DMARC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DMARC&lt;/a&gt;。泄露这些还可以很容易地发送网络钓鱼电子邮件，这些电子邮件冒充来自相关受感染域的发件人。&lt;/p&gt;
&lt;h3 id=&#34;使用一次性验证域&#34;&gt;使用“一次性”验证域&lt;/h3&gt;
&lt;p&gt;第二种方法是为 &lt;code&gt;_acme-challenge&lt;/code&gt; 子域手动创建 CNAME 记录，并将它们指向一个验证域，该验证域位于由一组不同的凭据控制的区域中。例如，如果您想获得涵盖 &lt;code&gt;yourdomain.tld&lt;/code&gt; 和 &lt;code&gt;www.yourdomain.tld&lt;/code&gt; 的证书，则必须创建两个 CNAME 记录 ——&lt;code&gt;_acme-challenge.yourdomain.tld&lt;/code&gt; 和 &lt;code&gt;_acme-challenge.www.yourdomain.tld&lt;/code&gt;—— 并将它们都指向外部域以进行验证。&lt;/p&gt;
&lt;p&gt;用于质询验证的域应位于外部 DNS 区域或具有自己的一组管理凭据的子委托 DNS 区域中。（子委托 DNS 区域是使用 NS 记录定义的，它有效地将对该区域的一部分的完全控制委托给外部机构。）&lt;/p&gt;
&lt;p&gt;这种方法的泄露影响相当有限。由于实际存储的凭据是针对外部 DNS 区域的，因此获得凭据的攻击者只能获得为指向该区域中的记录的所有域颁发证书的能力。&lt;/p&gt;
&lt;p&gt;然而，弄清楚哪些域确实指向那里是微不足道的：攻击者只需阅读 &lt;a href=&#34;https://www.certificate-transparency.org/&#34; title=&#34;证书透明度&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书透明度&lt;/a&gt; 日志并检查这些证书中的域是否具有指向受感染 DNS 区域的神奇子域。&lt;/p&gt;
&lt;h3 id=&#34;有限的-dns-区域访问&#34;&gt;有限的 DNS 区域访问&lt;/h3&gt;
&lt;p&gt;如果您的 DNS 软件或提供商允许创建绑定到子域的权限，这可以帮助您缓解整个问题。不幸的是，在发布时，我们发现唯一允许这样做的提供商是 &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/dns/dns-protect-zones-recordsets&#34; title=&#34;Microsoft Azure DNS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Azure DNS&lt;/a&gt;。据推测，Dyn 也有细粒度的权限，但我们无法在他们的服务中找到除“更新记录”之外的更低级别的权限，这仍然使该区域完全容易受到攻击。&lt;/p&gt;
&lt;p&gt;Route53 和其他可能允许他们的用户创建子委托区域、新用户凭据、将 NS 记录指向新区域，并使用 CNAME 记录将 &lt;code&gt;_acme-challenge&lt;/code&gt; 验证子域指向他们。使用这种方法正确地进行特权分离需要做很多工作，因为人们需要为他们想要使用 DNS 挑战的每个域完成所有这些步骤。&lt;/p&gt;
&lt;h3 id=&#34;使用-acme-dns&#34;&gt;使用 ACME-DNS&lt;/h3&gt;
&lt;p&gt;作为免责声明，下面讨论的软件由作者编写，并用作以安全方式处理 DNS 质询自动化所需凭据所需功能的示例。最后一种方法是一款名为 ACME-DNS 的软件，专为解决这个问题而编写，它能够完全缓解这个问题。一个缺点是它为您的基础设施增加了一项需要维护的东西，以及对公共互联网开放 DNS 端口 (53) 的要求。ACME-DNS 充当具有有限 HTTP API 的简单 DNS 服务器。API 本身只允许更新自动生成的随机子域的 TXT 记录。没有方法可以请求丢失的凭据、更新或添加其他记录。它提供了两个端点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/register：此端点生成一个新的子域供您使用，并附有用户名和密码。作为可选参数，注册端点采用 CIDR 范围列表，以从中进行白名单更新。&lt;/li&gt;
&lt;li&gt;/update：此端点用于将实际质询令牌更新到服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了使用 ACME-DNS，您首先必须为其创建 A/AAAA 记录，然后将 NS 记录指向它以创建委托节点。之后，您只需通过 /register 端点创建一组新的凭据，并将 CNAME 记录从原始区域的 &lt;code&gt;_acme-challenge&lt;/code&gt; 验证子域指向新生成的子域。&lt;/p&gt;
&lt;p&gt;唯一保存在本地的凭据是用于 ACME-DNS 的凭据，它们仅适用于更新验证子域的确切 TXT 记录。这有效地限制了可能的危害对攻击者能够为这些域颁发证书的影响。有关 ACME-DNS 的更多信息，请访问 &lt;a href=&#34;https://github.com/joohoi/acme-dns/&#34; title=&#34;https://github.com/joohoi/acme-dns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/joohoi/acme-dns/&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;为了缓解 ACME DNS 挑战验证的问题，已经讨论了向 IETF 的 ACME 工作组提出的&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/acme/6_j3fecaxIgwNTpJ3693U_n0Kec&#34; title=&#34;辅助 DNS 等提案，但目前仍未得到解决&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;辅助 DNS 等提案，但目前仍未得到解决&lt;/a&gt;。由于限制泄露的唯一方法是将 DNS 区域凭据权限限制为仅更改特定的 TXT 记录，因此当前安全地实现 DNS 验证自动化的可能性很小。唯一可持续的选择是让 DNS 软件和服务提供商要么实施方法来创建更细粒度的区域凭据，要么为这个确切的用例提供全新类型的凭据。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>使用 cert-manager ACME Issuer 为 Istio 中的入口网关设置证书</title>
      <link>https://jimmysong.io/blog/secure-ingress-gateway-of-istio/</link>
      <pubDate>Mon, 09 Jan 2023 20:18:40 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/secure-ingress-gateway-of-istio/</guid>
      <description>
        
        
        &lt;p&gt;本文将以 Bookinfo 应用为例，为 Istio 的入口网关设置一个真实的 TLS/SSL 证书。我们将使用 Let&amp;rsquo;s Encrypt、cert-manager 来管理 Istio 中入口网关的证书。&lt;/p&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;请先参考 &lt;a href=&#34;https://istio.io/latest/zh/docs/setup/&#34; title=&#34;Istio 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;安装 Istio 和 &lt;a href=&#34;https://istio.io/latest/zh/docs/examples/bookinfo/&#34; title=&#34;Bookinfo 应用&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bookinfo 应用&lt;/a&gt;，笔者在 GKE 中安装了 Istio 1.16。&lt;/p&gt;
&lt;p&gt;本文中安装的各组件版本信息如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 1.24.7&lt;/li&gt;
&lt;li&gt;Istio 1.16&lt;/li&gt;
&lt;li&gt;Gateway API 0.5.1&lt;/li&gt;
&lt;li&gt;cert-manager 1.10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arch&#34;&gt;架构&lt;/h2&gt;
&lt;p&gt;本实验中包含以下关键组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Cloudflare 提供 DNS 解析&lt;/li&gt;
&lt;li&gt;使用 Let&amp;rsquo;s Encrypt 创建证书&lt;/li&gt;
&lt;li&gt;使用 cert-manager 自动申请和续期证书&lt;/li&gt;
&lt;li&gt;使用 Gateway API 来创建入口网关&lt;/li&gt;
&lt;li&gt;所有组件部署在 GKE 中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图 1 展示了本实验的架构以及流量路由过程。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/secure-ingress-gateway-of-istio/arch.svg&#34; data-img=&#34;/blog/secure-ingress-gateway-of-istio/arch.svg&#34; alt=&#34;image&#34; data-caption=&#34;图 1：Istio 入口网关证书挂载模式&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：Istio 入口网关证书挂载模式&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;流量路由过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 Gateway 创建完成后通过 LoadBalancer 暴露网关 IP，将该 IP 配置在 DNS 解析记录中；&lt;/li&gt;
&lt;li&gt;Gateway 通过注解引用 &lt;a href=&#34;https://cert-manager.io/docs/configuration/acme/&#34; title=&#34;ACME Issuer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ACME Issuer&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;ACME Issuer 向 cert-manager 发送请求证书（&lt;a href=&#34;https://cert-manager.io/docs/concepts/acme-orders-challenges/&#34; title=&#34;order 和 challenge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;order 和 challenge&lt;/a&gt;），并使用 &lt;a href=&#34;https://cert-manager.io/docs/configuration/acme/dns01/&#34; title=&#34;DNS01 Challenge Provider&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DNS01 Challenge Provider&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;cert-manager 向 ACME 服务器 Let&amp;rsquo;s Encrypt 请求证书并创建 Kubernetes Secret；&lt;/li&gt;
&lt;li&gt;在 Gateway 中通过应用 Secret 挂载 TLS 证书；&lt;/li&gt;
&lt;li&gt;HTTPRoute 将入口流量路由到 productpage 服务；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;acme-issuer&#34;&gt;ACME Issuer&lt;/h2&gt;
&lt;p&gt;Istio 包含了开箱即用的 mTLS 支持，你也可以使用&lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/cert-management/plugin-ca-cert/&#34; title=&#34;自定义 CA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义 CA&lt;/a&gt; 或 &lt;a href=&#34;https://jimmysong.io/blog/cert-manager-spire-istio/&#34; title=&#34;SPIRE&#34;&gt;SPIRE&lt;/a&gt; 来管理集群内证书，但是对于入口网关的证书，就需要我们单独设置。你可以&lt;a href=&#34;https://istio.tetratelabs.io/zh/istio-in-practice/setting-up-ssl-certs/&#34; title=&#34;手动为入口网关配置证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;手动为入口网关配置证书&lt;/a&gt;，不过管理起来会比较麻烦，因为你需要负责证书的轮换以防止证书过期，或使用 &lt;a href=&#34;https://letsencrypt.org/&#34; title=&#34;Let&amp;amp;rsquo;s Encrypt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 这样的 ACME Issuer 来自动化管理证书。&lt;/p&gt;
&lt;p&gt;ACME (Automated Certificate Management Environment) Issuer 是一种认证机构，可以使用 ACME 协议为客户端申请和管理证书。ACME 是一种用于自动化 SSL/TLS 证书颁发和管理的开放协议。它通常用于网站或其他在线服务的证书管理，以确保安全连接。&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s Encrypt 是一个非营利性的 ACME Issuer，可以为网站提供免费的 SSL/TLS 证书。它的目标是使加密技术普及化，并帮助提升网络安全水平。Let&amp;rsquo;s Encrypt 使用 ACME 协议与客户端通信，可以为客户端申请和管理证书。ACME 协议是开放的，因此任何机构都可以成为 ACME Issuer，只要它们遵守 ACME 协议的规定。&lt;/p&gt;
&lt;h2 id=&#34;details-steps&#34;&gt;详细步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 Gateway API：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.5.1/standard-install.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 cert-manager&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://gist.githubusercontent.com/rootsongjc/78487acdea70a3c27c1a1b794546d031/raw/0df08b91dfaff6412bbd891ccedffaa882a9a99f/cert-manager.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它为 cert-manager Deployment 增加了以下启动项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;args:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  - --feature-gates&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ExperimentalGatewayAPISupport&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Cloudflare 中创建一个名为 &lt;code&gt;lets-encrypt-token&lt;/code&gt; 的 API token，自定义模板设置如下：&lt;/p&gt;
&lt;p&gt;Permissions：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Zone - DNS - Edit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Zone - Zone - Read&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zone Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Include - All Zones&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将该 token 存储在一个 Secret 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;kubectl apply -n default -f - &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cloudflare-api-token-secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Opaque&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stringData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api-token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;API Token&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    本次实验中该 Token 实际上并没起到作用，正常情况下 cert-manager 会通过 Cloudflare API 与 Cloudflare 交互，为我们配置 DNS 记录。该问题还需要进一步排查。
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 Let&amp;rsquo;s Encrypt  Issuer：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -n default -f - &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Issuer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: letsencrypt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  acme:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    email: rootsongjc@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    server: https://acme-v02.api.letsencrypt.org/directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    privateKeySecretRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      name: lets-encrypt-issuer-account-key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    solvers:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - dns01:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        cloudflare:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          apiTokenSecretRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            name: cloudflare-api-token-secret
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;            key: api-token
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      selector:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        dnsNames:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - &amp;#39;bookinfo.jimmysong.io&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 Gateway：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -n default -f - &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1beta1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: bookinfo-gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  annotations:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    cert-manager.io/issuer: letsencrypt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  gatewayClassName: istio
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  listeners:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  - name: http
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    hostname: bookinfo.jimmysong.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    port: 443
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    protocol: HTTPS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    allowedRoutes:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      namespaces:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        from: Same
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    tls:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      mode: Terminate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      certificateRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        kind: Secret
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        group: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        name: bookinfo-tls
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Gateway 创建完成后，会在 default 命名空间中创建一个网关 Pod 以及 LoadBalancer 资源的服务。&lt;/p&gt;
&lt;p&gt;查看 &lt;code&gt;default&lt;/code&gt; 命名空间中的 Secret，你会发现 &lt;code&gt;bookinfo-tls&lt;/code&gt;，它是由 cert-manager 创建的，查看该 Secret 中保存的证书，你将会看到由 Let&amp;rsquo;s Encrypt 颁发的证书信任链：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bookinfo.jimmysong.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ISRG Root X1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DST Root CA X3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 HTTPRoute：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -n default -f - &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1beta1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: HTTPRoute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: bookinfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  parentRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  - name: bookinfo-gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  rules:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  - matches:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        type: Exact
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        value: /productpage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        type: PathPrefix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        value: /static
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        type: Exact
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        value: /login
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        type: Exact
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        value: /logout
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - path:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        type: PathPrefix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        value: /api/v1/products
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    backendRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - name: productpage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      port: 9080
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Cloudflare 中配置域名记录：将网关服务的外网 IP 及域名 &lt;code&gt;bookinfo.jimmysong.io&lt;/code&gt; 添加到 Cloudflare 的 DNS 记录中就可以实现域名解析。&lt;/p&gt;



&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    本实验中发现网关 Pod 并没有挂载 &lt;code&gt;bookinfo-tls&lt;/code&gt;  Secret 中的证书，我们只好通过 Cloudflare 来配置 TLS 证书：为网站开启全（严格）SSL/TLS，这将使用 Cloudflare 颁发的 TLS 证书。
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在浏览器中访问 &lt;a href=&#34;https://bookinfo.jimmysong.io/productpage&#34; title=&#34;https://bookinfo.jimmysong.io/productpage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bookinfo.jimmysong.io/productpage&lt;/a&gt; 就可以访问 bookinfo 应用了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本次实验虽然实现了网关的 TLS 加密，也为网关生成了 TLS 证书，但实际上网关使用的是 Cloudflare 颁发的证书。这并不是我们最初的目标，即使用 ACME Server（Let&amp;rsquo;s Encrypt）为网关颁发的证书。为什么网关 Pod 没有挂载我们应用的 Secret 中的证书，Cloudflare DNS01 Challenge Provider 为什么没有生效，这两个问题还需要我们进一步调查。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thinktecture.com/en/kubernetes/ssl-certificates-with-cert-manager-in-kubernetes/&#34; title=&#34;Acquire SSL Certificates In Kubernetes From Let’s Encrypt With Cert-Manager - thinktecture.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Acquire SSL Certificates In Kubernetes From Let’s Encrypt With Cert-Manager - thinktecture.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getbetterdevops.io/k8s-ingress-with-letsencrypt/&#34; title=&#34;How To Secure Kubernetes NGINX Ingress With Cert-Manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Secure Kubernetes NGINX Ingress With Cert-Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cert-manager.io/docs/usage/gateway/&#34; title=&#34;Securing gateway.networking.k8s.io Gateway Resources - cert-manager.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Securing gateway.networking.k8s.io Gateway Resources - cert-manager.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>如何通过服务网格增强微服务的安全性</title>
      <link>https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/</link>
      <pubDate>Thu, 05 Jan 2023 14:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/</guid>
      <description>
        
        
        &lt;p&gt;本文是 Tetrate 即将出版的《Istio in Production》一书中摘录的服务网格最佳实践系列的第一篇，作者是 Tetrate 创始工程师 Zack Butcher。&lt;/p&gt;
&lt;p&gt;我们接到许多实施网格的企业的问题，其中之一是“我还需要哪些控制，而网格提供哪些控制？”换句话说，他们想知道网格如何适应现有的安全模型。我们发现，网格最适合作为一组安全控制的内圈，这些控制从物理网络到应用本身的每一层都被实施。&lt;/p&gt;
&lt;h2 id=&#34;服务网格作为通用策略执行点&#34;&gt;服务网格作为通用策略执行点&lt;/h2&gt;
&lt;p&gt;我们看到网格的 Sidecar 作为通用策略执行点（&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-204b/final&#34; title=&#34;NIST SP 800-204B：使用服务网格的基于属性的访问控制&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST SP 800-204B：使用服务网格的基于属性的访问控制&lt;/a&gt;）。由于它拦截了所有进出应用程序的流量，Sidecar 为我们提供了一个强大的位置来实现各种策略。我们可以实现传统的安全策略，如基于应用程序标识而非网络位置的更高保证的应用程序之间的授权。但我们也可以实施之前不切实际或需要与应用程序深度参与的策略。例如，网格允许你编写以下策略：“后端可以从数据库读取（使用应用级身份进行身份验证和授权），但前提是请求具有有效的最终用户凭证并具有读取范围（使用最终用户身份进行身份验证和授权）。”&lt;/p&gt;
&lt;p&gt;虽然服务网格提供了一个强大，动态和一致的安全基线，你可以在其上构建应用程序安全模型，但网格本身永远无法提供应用程序所需的 100% 运行时安全。例如，由于 Sidecar 位于用户空间中，网格在减轻许多类型的网络拒绝服务攻击方面不如传统防火墙机制。另一方面，由于同样的原因，网格在减轻许多应用级拒绝服务攻击方面比传统基础设施更有效。&lt;/p&gt;
&lt;h2 id=&#34;作为一个强大的中间层&#34;&gt;作为一个强大的中间层&lt;/h2&gt;
&lt;p&gt;网格作为基础架构的强大中间层：位于物理网络和所实施的 L3/L4 控制之上，但位于应用程序之下。这允许更脆弱和更难以改变的松散配置 —— 允许更高层的更大敏捷性 —— 因为控制体系在更高层被考虑。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f1_huae8a35f32b66687363b4bb0a6229c7fe_99227_1538x1273_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f1.png&#34; data-img=&#34;/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f1.png&#34; data-width=&#34;1538&#34; data-height=&#34;1273&#34; alt=&#34;image&#34; data-caption=&#34;图 1：增加细粒度策略层以增强传统安全。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 1：增加细粒度策略层以增强传统安全。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;网格提供的主要安全功能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为 X.509 证书的&lt;strong&gt;运行时身份&lt;/strong&gt;，用于在传输期间加密，以及服务之间通信的身份验证和授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略执行点&lt;/strong&gt;，用于在网格中的所有应用程序上实施一致的最终用户身份验证和授权。&lt;/li&gt;
&lt;li&gt;服务身份和最终用户身份的&lt;strong&gt;运行时策略执行&lt;/strong&gt;（例如，“A 只能使用具有读取范围的有效最终用户凭证与 B 进行通信”）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速率限制和弹性功能&lt;/strong&gt;，用于减轻常见的应用级拒绝服务攻击，并保护免受常见的级联故障模式的影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WAF&lt;/strong&gt; 和其他&lt;strong&gt;深层包检测&lt;/strong&gt;功能，用于内部流量，而不仅仅是在边缘。&lt;/li&gt;
&lt;li&gt;来自网格中所有应用程序的&lt;strong&gt;一致的操作遥测&lt;/strong&gt;，可用于理解、实施和审核安全策略。&lt;/li&gt;
&lt;li&gt;具有动态运行时更新的&lt;strong&gt;策略即代码&lt;/strong&gt;（Policy-as-code）模型，独立于应用程序生命周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格作为分层防御的一部分&#34;&gt;服务网格作为分层防御的一部分&lt;/h2&gt;
&lt;p&gt;考虑到网格的安全功能，我们认为，组织采用它作为分层防御方法的一部分是最合理的。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f2_hu51229ea213419ff3448aa105a91e4832_89514_1828x949_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f2.png&#34; data-img=&#34;/trans/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f2.png&#34; data-width=&#34;1828&#34; data-height=&#34;949&#34; alt=&#34;image&#34; data-caption=&#34;图 2：每层策略的示例以及一个示例部署拓扑。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;图 2：每层策略的示例以及一个示例部署拓扑。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;l3-层的敏捷性粗粒度的入口和出口策略以及-l7-的细粒度控制&#34;&gt;L3 层的敏捷性：粗粒度的入口和出口策略以及 L7 的细粒度控制&lt;/h2&gt;
&lt;p&gt;在边缘的 L3 控制（如防火墙）在粗粒度的入口和出口策略方面仍然有效，但通常会减慢应用程序开发敏捷性。由于网格提供了细粒度的服务间授权，所以可以在 L3 上设置更广泛的策略，为平台、安全和应用程序团队提供更多敏捷性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实施对外部服务的访问控制&lt;/strong&gt;。网格的出口代理特别适用于实施应用程序到外部服务的控制，而只有出口代理本身被外出防火墙 allow-listed：这为平台或安全团队在管理哪些应用程序允许与企业基础架构之外的通信提供了很多敏捷性，同时保持现有的基于周界的模型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用加密和动态访问控制代替“可达性即授权”&lt;/strong&gt;。网格可以开始有效地取代 VPN 和基于 IPSec 的网络“可达性即授权”模式，提供传输中的加密，以及每个应用而不是每个主机的认证和授权。&lt;/p&gt;
&lt;h2 id=&#34;l4-层的改进更扁平和易于管理的网络微分段&#34;&gt;L4 层的改进：更扁平和易于管理的网络微分段&lt;/h2&gt;
&lt;p&gt;微分段之类的控制可以通过网格进一步改进：尽管我们可能允许整个（小）子网在基于分段的策略中进行通信，但我们可以使用网格按方法和动词对单独的服务间通信进行控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充现有的微分段同时展平网络&lt;/strong&gt;。通过提供细粒度的服务间控制，网格往往会补充现有的微分段策略，同时使得组织更容易管理的较平的网络得以采用（例如，在云环境中）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用工作负载身份启用传输期间的加密（mTLS）和服务级别访问控制&lt;/strong&gt;。传输层几乎总是处理加密传输，网格通过根据 SPIFFE 规范发布和轮换短期（&amp;lt;24 小时）工作负载身份证书来为应用程序实现此功能，从而允许传输期间的加密以及服务级别的身份验证和授权。&lt;/p&gt;
&lt;h2 id=&#34;l7-层的增强无处不在的边缘和访问控制&#34;&gt;L7 层的增强：无处不在的边缘和访问控制&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;为所有流量提供边缘控制&lt;/strong&gt;。L7 控制，如 Web 应用程序防火墙（WAF）以及“API 网关功能”（如流量限制）几乎总是在边缘实施。网格可以通过为网格中所有流量（包括内部的“东西”通信）启用相同的功能来增强这些现有部署。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简化应用程序的访问控制&lt;/strong&gt;。除了使边缘控制无处不在之外，网格还可以在应用程序看到请求之前执行端用户身份验证和粗粒度授权，从而大大简化应用程序本身必须执行的访问控制。在未来，我们将看到越来越多的访问控制功能从应用程序迁移到网格中。&lt;/p&gt;
&lt;h2 id=&#34;总结和展望&#34;&gt;总结和展望&lt;/h2&gt;
&lt;p&gt;我们认为，服务网格最适合作为现有安全模型的一部分，通过在传统安全控制之上添加更细粒度的安全策略来实现。作为一个通用策略执行点，网格在更改最困难的较低层提供了更松散的策略，将敏捷性推向堆栈的顶部，其中更多的上下文允许在更高层实现更特定的控制。这种强大的安全层对于大多数组织来说都是采用分层防御深度方法的最佳选择。&lt;/p&gt;
&lt;h2 id=&#34;接下来服务网格部署最佳实践&#34;&gt;接下来：服务网格部署最佳实践&lt;/h2&gt;
&lt;p&gt;我们服务网格最佳实践系列博客文章的下一篇将讨论部署拓扑。在多个集群的真实基础架构中部署服务网格时存在一些移动部分。在下一篇文章中，我们将更详细地研究：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制平面应如何部署在应用程序附近。&lt;/li&gt;
&lt;li&gt;应该如何部署入口，以促进安全和敏捷性。&lt;/li&gt;
&lt;li&gt;如何使用 Envoy 促进跨集群的负载平衡。&lt;/li&gt;
&lt;li&gt;证书在网格中应该是什么样子的。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;如果你不熟悉服务网格和 Kubernetes 安全性，我们在 &lt;a href=&#34;https://tetr8.io/academy&#34; title=&#34;Tetrate Academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Academy&lt;/a&gt; 提供了一系列免费在线课程，可以让你快速了解 Istio 和 Envoy。&lt;/p&gt;
&lt;p&gt;如果你正在寻找一种快速将 Istio 投入生产的方法，请查看 &lt;a href=&#34;https://tetr8.io/tid&#34; title=&#34;Tetrate Istio Distribution (TID)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distribution (TID)&lt;/a&gt;。TID 是 Tetrate 的强化、完全上游的 Istio 发行版，具有经过 FIPS 验证的构建和支持。这是开始使用 Istio 的好方法，因为你知道你有一个值得信赖的发行版，有一个支持你的专家团队，并且如果需要，还可以选择快速获得 FIPS 合规性。&lt;/p&gt;
&lt;p&gt;一旦启动并运行 Istio，你可能需要更简单的方法来管理和保护你的服务，而不仅仅是 Istio 中可用的方法，这就是 Tetrate Service Bridge 的用武之地。你可以&lt;a href=&#34;https://tetr8.io/tsb&#34; title=&#34;在这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;详细了解 Tetrate Service Bridge 如何使服务网格更安全、更易于管理和弹性，或&lt;a href=&#34;https://tetr8.io/contact&#34; title=&#34;联系我们进行快速演示&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们进行快速演示&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>使用 cert-manager 和 SPIRE 管理 Istio 中的证书</title>
      <link>https://jimmysong.io/blog/cert-manager-spire-istio/</link>
      <pubDate>Tue, 27 Dec 2022 16:39:40 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/cert-manager-spire-istio/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    从 v1.5.4 版本开始，SPIRE 移除了 Kubernetes Workload Registrar 组件，改用 SPIRE Controller Manager，详见 &lt;a href=&#34;https://github.com/spiffe/spire/pull/3853&#34; title=&#34;spire/spire issue #3853&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire/spire issue #3853&lt;/a&gt;。根据我的测试，本文中的程序在 v1.5.4 或更高版本上无法执行，因为会遇到一系列身份验证失败的问题。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;a href=&#34;https://jimmysong.io/blog/istio-certificates-management/&#34; title=&#34;上一篇博客&#34;&gt;上一篇博客&lt;/a&gt;中我介绍了 Istio 中是如何管理证书的，这篇文章将指导你如何使用外置 CA，通过集成 &lt;a href=&#34;https://spiffe.io/&#34; title=&#34;SPIRE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE&lt;/a&gt; 和 &lt;a href=&#34;https://cert-manager.io/&#34; title=&#34;cert-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cert-manager&lt;/a&gt; 实现细粒度的证书管理和自动证书轮换。&lt;/p&gt;
&lt;p&gt;如果你还不了解什么是 SPIRE 以及为什么我们要使用 SPIRE，推荐你阅读以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/why-istio-need-spire/&#34; title=&#34;为什么 Istio 要使用 SPIRE 做身份认证？&#34;&gt;为什么 Istio 要使用 SPIRE 做身份认证？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/how-to-integrate-spire-with-istio/&#34; title=&#34;如何在 Istio 中集成 SPIRE？&#34;&gt;如何在 Istio 中集成 SPIRE？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/spiffe/&#34; title=&#34;零信任的基石：使用 SPIFFE 为基础设施创建通用身份&#34;&gt;零信任的基石：使用 SPIFFE 为基础设施创建通用身份&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;intro&#34;&gt;证书签发管理流程简介&lt;/h2&gt;
&lt;p&gt;下图展示了本文中使用的基于 cert-manager 和 SPIRE 的证书信任链：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cert-manager-spire-istio/spire-chain-tree.svg&#34; data-img=&#34;/blog/cert-manager-spire-istio/spire-chain-tree.svg&#34; alt=&#34;image&#34; data-caption=&#34;基于 cert-manager、SPIRE 的证书信任链&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;基于 cert-manager、SPIRE 的证书信任链&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;从图中你可以看出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cert-manager 作为根 CA 为 &lt;em&gt;istiod&lt;/em&gt; 和 SPIRE 颁发证书，我们使用了&lt;a href=&#34;https://cert-manager.io/docs/configuration/selfsigned/&#34; title=&#34;自签名 Issuer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自签名 Issuer&lt;/a&gt;，你还可以为其配置使用 Let&amp;rsquo;s Encrypt、Vault、Venafi 等内置 Issuer，或其他外置的 Issuer；另外你也可以选择使用其他 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; title=&#34;UpstreamAuthority&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UpstreamAuthority&lt;/a&gt;，例如 Vault、SPIRE 联邦等；&lt;/li&gt;
&lt;li&gt;SPIRE 为 Istio 网格内工作负载和 Ingress Gateway、Egress Gateway 颁发 SVID 证书，用于服务间 mTLS；&lt;/li&gt;
&lt;li&gt;其中网格外访问 Ingress Gateway 时的使用的证书及 Egress Gateway 访问网格外服务使用的证书需要额外配置；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图展示了在 Istio 中集成 SPIRE 和 cert-manger 后的证书颁发和更新流程。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cert-manager-spire-istio/cert-manager-spire-istio.svg&#34; data-img=&#34;/blog/cert-manager-spire-istio/cert-manager-spire-istio.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 集成 SPIRE 和 cert-manager 后的证书颁发和更新流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 集成 SPIRE 和 cert-manager 后的证书颁发和更新流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;SPIRE Server 中的 SPIRE Controller Manager 自动注册 Kubernetes 中的工作负载，为所有工作负载生成 SPIFFE 标准的身份；&lt;/li&gt;
&lt;li&gt;cert-manager 为 &lt;em&gt;istiod&lt;/em&gt; 颁发并管理 CA 证书；&lt;/li&gt;
&lt;li&gt;工作负载中的 Envoy 代理通过 UNIX Domain Socket（UDS）通过 SDS API 向同节点上的 SPIRE Agent 发送 CSR 请求；&lt;/li&gt;
&lt;li&gt;SPIRE Agent 向 SPIRE Server 发送 CSR；&lt;/li&gt;
&lt;li&gt;SPIRE Server 向 SPIRE Agent 返回签名后的证书；&lt;/li&gt;
&lt;li&gt;SPIRE Agent 向工作负载返回签名后的证书；&lt;/li&gt;
&lt;li&gt;SPIRE 负责工作负载的证书管理和更新；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在了解了大致流程后，下面我们将依次安装各个组件。各个组件版本如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cert-manager v1.15.1&lt;/li&gt;
&lt;li&gt;SPIRE v1.2.0&lt;/li&gt;
&lt;li&gt;Istio v1.21.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-cert-manager&#34;&gt;安装 cert-manager&lt;/h2&gt;
&lt;p&gt;运行下面的命令安装 cert-manager，我们将使用它来实现自动证书轮换：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.1/cert-manager.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根 CA 是用自签名证书，运行下面的命令配置根 CA：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;cat &amp;lt;&amp;lt; EOF | kubectl apply -f -&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Issuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfSigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Certificate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned-ca&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;isCA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;21600h&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned-ca&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commonName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;certmanager-ca&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;organizations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;cert-manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;issuerRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Issuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIssuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned-ca&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ca&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned-ca&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后为 &lt;em&gt;istiod&lt;/em&gt; 配置证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;kubectl create namespace istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cat &amp;lt;&amp;lt; EOF | kubectl apply -f -&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Certificate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cacerts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cacerts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1440h&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;renewBefore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;360h&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commonName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod.istio-system.svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;isCA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;usages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;digital signature&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;key encipherment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;cert sign&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dnsNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;istiod.istio-system.svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;issuerRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned-ca&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIssuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们已经安装好了 cert-manager，并创建了名为 &lt;code&gt;selfsigned-ca&lt;/code&gt; 的 &lt;code&gt;clusterIssuer&lt;/code&gt;，接下来，我们来安装 SPIRE 并将 cert-manager 作为 SPIRE 的  &lt;a href=&#34;https://github.com/spiffe/spire/blob/main/doc/plugin_server_upstreamauthority_cert_manager.md&#34; title=&#34;&amp;lt;code&amp;gt;UpstreamAuthority&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;UpstreamAuthority&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;install-spire&#34;&gt;安装 SPIRE&lt;/h2&gt;
&lt;p&gt;运行下面的命令快速安装 SPIRE：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://jimmysong.io/blog/cert-manager-spire-istio/manifests/spire-with-cert-manager-upstream-authority-quick-start.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该 YAML 文件比起 Istio 安装包中的 &lt;a href=&#34;https://raw.githubusercontent.com/istio/istio/release-1.22/samples/security/spire/spire-quickstart.yaml&#34; title=&#34;&amp;lt;code&amp;gt;samples/security/spire/spire-quickstart.yaml&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;samples/security/spire/spire-quickstart.yaml&lt;/code&gt;&lt;/a&gt; 文件增加了对 cert-manager 的适配，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为 &lt;code&gt;spire-server-cluster-role&lt;/code&gt; ClusterRole 增加了对 &lt;code&gt;cert-manager.io&lt;/code&gt; API 组的权限；&lt;/li&gt;
&lt;li&gt;在 SPIRE Server 的配置中增加了 &lt;code&gt;UpstreamAuthority &amp;quot;cert-manager&amp;quot;&lt;/code&gt; 配置；&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    SPIRE Server 配置中的 &lt;code&gt;trust_domain&lt;/code&gt; 应与安装 Istio 时指定的 &lt;code&gt;TRUST_DOMAIN&lt;/code&gt; 环境变量的值保持一致。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;该命令中会安装 SPIRE Controller Manager，自动注册 Kubernetes 中的工作负载。所有工作负载将根据其服务账户注册 SPIFFE 标准的服务身份格式 &lt;code&gt;spiffe://&amp;lt;trust-domain&amp;gt;/ns/&amp;lt;namespace&amp;gt;/sa/&amp;lt;service-account&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你想调整 SPIRE CA 和 SVID 证书的 TTL，可以在 SPIRE Server 的配置中修改 &lt;code&gt;ca_ttl&lt;/code&gt;（默认 24h）和 &lt;code&gt;default_svid_ttl&lt;/code&gt;（默认 1h），详见 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; title=&#34;SPIRE Server 配置&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server 配置&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;install-istio&#34;&gt;安装 Istio&lt;/h2&gt;
&lt;p&gt;Pod 中的 Envoy 代理将共享本地 SPIRE Agent 的 Unix Domain Socket，通过 Workload API 与 SPIRE Server 通信获取证书，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cert-manager-spire-istio/spire-agent.svg&#34; data-img=&#34;/blog/cert-manager-spire-istio/spire-agent.svg&#34; alt=&#34;image&#34; data-caption=&#34;SPIRE Agent 架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;SPIRE Agent 架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;运行下面的命令安装 Istio 并启用 CA 证书自动轮换：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;istioctl install --skip-confirmation -f - &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IstioOperator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 信任域应与 SPIRE Server 中配置的信任域相同&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trustDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;global&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义 sidecar 模板&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sidecarInjectorWebhook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;templates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            containers:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            - name: istio-proxy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              volumeMounts:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              - name: workload-socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                mountPath: /run/secrets/workload-spiffe-uds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                readOnly: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            volumes:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              - name: workload-socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                csi:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  driver: &amp;#34;csi.spiffe.io&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  readOnly: true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pilot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果启用，如果用户引入新的中间插件 CA，用户不需要重新启动 istiod 来获取证书。Istiod 会获取新添加的中间插件 CA 的证书并更新它。不支持插入新的 Root-CA。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AUTO_RELOAD_PLUGIN_CERTS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingressGateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.template.spec.volumes.[name:workload-socket]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;csi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;csi.spiffe.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.template.spec.containers.[name:istio-proxy].volumeMounts.[name:workload-socket]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/secrets/workload-spiffe-uds&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为我们要使用 Istio Operator 中声明的 &lt;code&gt;spire&lt;/code&gt; 模板来部署工作负载，因此我们运行下面的命令部署 Bookinfo 应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl kube-inject -f bookinfo-with-spire-template.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl apply -n default -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：上面命令中使用的 &lt;code&gt;bookinfo-with-spire-template.yaml&lt;/code&gt; 文件可以在&lt;a href=&#34;./manifests/bookinfo-with-spire-template.yaml&#34; title=&#34;这里&#34;&gt;这里&lt;/a&gt;找到，与 Istio 安装包中的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/samples/bookinfo/platform/kube/bookinfo.yaml&#34; title=&#34;&amp;lt;code&amp;gt;samples/bookinfo/platform/kube/bookinfo.yaml&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;samples/bookinfo/platform/kube/bookinfo.yaml&lt;/code&gt;&lt;/a&gt; 文件唯一的区别就是每个 Deployment 的 template 中都增加了以下注解：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inject.istio.io/templates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sidecar,spire&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;validate-spire&#34;&gt;验证 SPIRE&lt;/h2&gt;
&lt;p&gt;我们将通过检查 productpage 服务的身份和证书配置来验证 SPIRE 是否生效。&lt;/p&gt;
&lt;p&gt;使用下面的命令可以检查 SPIRE 是否给工作负载颁发了身份证明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -i -t spire-server-0 -n spire -c spire-server -- /bin/sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;bin/spire-server entry show -socketPath /run/spire/sockets/server.sock -spiffeID spiffe://example.org/ns/default/sa/bookinfo-productpage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以在输出结果中看到 protuctpage 服务的身份信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Found 1 entry
Entry ID         : 69fbf896-a296-4c3c-8179-44bf4e49e474
SPIFFE ID        : spiffe://example.org/ns/default/sa/bookinfo-productpage
Parent ID        : spiffe://example.org/k8s-workload-registrar/demo-cluster/node/gke-cluster-1-default-pool-18d66649-z1lm
Revision         : 1
TTL              : default
Selector         : k8s:node-name:gke-cluster-1-default-pool-18d66649-z1lm
Selector         : k8s:ns:default
Selector         : k8s:pod-uid:73347537-a3e5-4e43-b8c5-bd315c7385b7
DNS name         : productpage-v1-7f444fc4dd-rq47m
DNS name         : productpage.default.svc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看 &lt;code&gt;productpage&lt;/code&gt; pod 的证书信任链：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl -n default proxy-config secret deployment/productpage-v1 -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; chain.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看根证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl -n default proxy-config secret deployment/productpage-v1 -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[1].secret.validationContext.trustedCa.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; root.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;chain.pem&lt;/code&gt; 文件是证书信任链，其中包含两个证书，将它们保存到两个文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;split -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;-----BEGIN CERTIFICATE-----&amp;#34;&lt;/span&gt; chain.pem cert-
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后使用 OpenSSL 查看所有证书：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl x509 -noout -text -in cert-aa
openssl x509 -noout -text -in cert-ab
openssl x509 -noout -text -in root.pem
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你将看到如下的证书信任链 &lt;code&gt;root.pem&lt;/code&gt; -&amp;gt; &lt;code&gt;cert-aa&lt;/code&gt;  -&amp;gt; &lt;code&gt;cert-ab&lt;/code&gt;，如下图所示：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/cert-manager-spire-istio/spire-bookinfo-cert-chain.svg&#34; data-img=&#34;/blog/cert-manager-spire-istio/spire-bookinfo-cert-chain.svg&#34; alt=&#34;image&#34; data-caption=&#34;Productpage 服务的证书信任链&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Productpage 服务的证书信任链&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;查看 Istiod 的证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl -n istio-system proxy-config secret deployment/istiod -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; chain.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从证书信任链中我们可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cert-manager 做为 PKI 的根节点为 &lt;em&gt;istiod&lt;/em&gt; 颁发证书；&lt;/li&gt;
&lt;li&gt;SPIRE 作为中间 CA 再为各个工作负载颁发证书；&lt;/li&gt;
&lt;li&gt;Istio 网格中工作负载的 X509 v3 主体别名中的 URI 遵循了 SPIFF 身份规范；&lt;/li&gt;
&lt;li&gt;Istio 服务网格中的所有工作负载的身份和证书都由 SPIRE 来管理；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cert-auto-rotate&#34;&gt;设置证书自动轮换&lt;/h2&gt;
&lt;p&gt;如果你要修改 &lt;em&gt;istiod&lt;/em&gt; 证书的轮换周期，从 60 天（1440 小时）缩短到 30 天（720 小时），运行下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;cat &amp;lt;&amp;lt; EOF | kubectl apply -f -&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Certificate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cacerts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cacerts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;720h &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;renewBefore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;360h&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commonName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod.istio-system.svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;isCA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;usages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;digital signature&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;key encipherment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;cert sign&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dnsNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;istiod.istio-system.svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;issuerRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selfsigned-ca&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIssuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行下面的命令查看 &lt;em&gt;istiod&lt;/em&gt; 的日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl logs -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod -n istio-system -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;过两分钟后，你将看到类似如下的证书更改记录：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2022-12-23T03:48:42.697360Z	info	Update Istiod cacerts
2022-12-23T03:48:42.697503Z	info	Using kubernetes.io/tls secret type for signing ca files
2022-12-23T03:48:42.778241Z	info	Istiod has detected the newly added intermediate CA and updated its key and certs accordingly
2022-12-23T03:48:42.779459Z	info	x509 cert - Issuer: &amp;#34;CN=istiod.istio-system.svc&amp;#34;, Subject: &amp;#34;&amp;#34;, SN: d7acac2301045f741e5e30cff380deaf, NotBefore: &amp;#34;2022-12-23T03:46:42Z&amp;#34;, NotAfter: &amp;#34;2032-12-20T03:48:42Z&amp;#34;
2022-12-23T03:48:42.779561Z	info	x509 cert - Issuer: &amp;#34;CN=certmanager-ca,O=cert-manager&amp;#34;, Subject: &amp;#34;CN=istiod.istio-system.svc&amp;#34;, SN: 164bf045670a1716ed3f0f1c89b56122, NotBefore: &amp;#34;2022-12-23T03:48:14Z&amp;#34;, NotAfter: &amp;#34;2023-01-22T03:48:14Z&amp;#34;
2022-12-23T03:48:42.779642Z	info	x509 cert - Issuer: &amp;#34;CN=certmanager-ca,O=cert-manager&amp;#34;, Subject: &amp;#34;CN=certmanager-ca,O=cert-manager&amp;#34;, SN: 8533dbfe0b84ed1fc4e3c76be7ef612f, NotBefore: &amp;#34;2022-12-20T07:50:12Z&amp;#34;, NotAfter: &amp;#34;2025-06-07T07:50:12Z&amp;#34;
2022-12-23T03:48:42.779657Z	info	Istiod certificates are reloaded
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要修改工作负载证书的自动轮换周期，你可以设置 &lt;code&gt;pilot-agent&lt;/code&gt; 命令的环境变量 &lt;code&gt;SECRET_TTL&lt;/code&gt;，默认值为 &lt;code&gt;24h0m0s&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在本文中，我们使用了 cert-manager 作为 PKI，将 SPIRE 集成到我们的证书信任链中，并为 Istio 网格中的工作负载创建身份和证书。通过使用 cert-manager，你不用担心 &lt;em&gt;istiod&lt;/em&gt; 证书过期的问题，还可以根据需要更新证书。你还可以根据需要将 cert-manager 集成到其他证书供应商，如 &lt;a href=&#34;https://letsencrypt.org/&#34; title=&#34;Let&amp;amp;rsquo;s Encrypt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;、&lt;a href=&#34;https://www.vaultproject.io/&#34; title=&#34;HashiCorp Vault&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HashiCorp Vault&lt;/a&gt;、&lt;a href=&#34;https://www.venafi.com/&#34; title=&#34;Venafi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Venafi&lt;/a&gt; 等。你也可以使用 &lt;a href=&#34;https://github.com/cert-manager/istio-csr&#34; title=&#34;istio-csr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio-csr&lt;/a&gt; 直接让 cert-manager 来管理 Istio 中的证书，或&lt;a href=&#34;https://cloudnative.to/blog/how-to-use-hashicorp-vault-as-a-more-secure-way-to-store-istio-certificates/&#34; title=&#34;使用 Vault 来存储证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Vault 来存储证书&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/istio-trust/&#34; title=&#34;将 Istio 纳入信任链：使用现有 PKI 作为信任根 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 Istio 纳入信任链：使用现有 PKI 作为信任根 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/automate-istio-ca-rotation-in-production-at-scale/&#34; title=&#34;在生产中大规模自动化 Istio CA 轮换 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在生产中大规模自动化 Istio CA 轮换 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/how-to-use-hashicorp-vault-as-a-more-secure-way-to-store-istio-certificates/&#34; title=&#34;如何使用 Hashicorp Vault 作为一种更安全的方式来存储 Istio 证书 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何使用 Hashicorp Vault 作为一种更安全的方式来存储 Istio 证书 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/istio-spire-integration/&#34; title=&#34;如何在 Istio 中集成 SPIRE - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何在 Istio 中集成 SPIRE - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/#built-in-plugins&#34; title=&#34;SPIRE Server Configuration Reference - spiffe.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server Configuration Reference - spiffe.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.5.3/doc/plugin_server_upstreamauthority_cert_manager.md&#34; title=&#34;Server plugin: UpstreamAuthority &amp;amp;ldquo;cert-manager&amp;amp;rdquo; - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Server plugin: UpstreamAuthority &amp;ldquo;cert-manager&amp;rdquo; - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/configuring/&#34; title=&#34;Configuring SPIRE - spiffe.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Configuring SPIRE - spiffe.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>将 Istio 纳入信任链：使用现有 PKI 作为信任根</title>
      <link>https://jimmysong.io/trans/istio-trust/</link>
      <pubDate>Tue, 20 Dec 2022 11:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/istio-trust/</guid>
      <description>
        
        
        &lt;p&gt;当我们与想要使用 Istio 的客户或用户交流时，这一个问题时长会出现——Istio 中的证书信任如何工作的？Istio 有自己的证书颁发机构，而我们也有自己的证书颁发机构，如何确保它们相互信任？&lt;/p&gt;
&lt;p&gt;简而言之，通过中间签名证书将 Istio 纳入到您现有的信任链中。&lt;/p&gt;
&lt;p&gt;如果您使用 Istio 作为演示或开箱即用，它将拥有自己的自签名证书 —— 它是自己的根证书。对于在多个集群中运行 Istio 的用户来说，这是一个常见的痛点：他们无意中创建了两个互不不信任的孤岛，因此没有安全通信。&lt;/p&gt;
&lt;p&gt;以下是如何通过让 Istio 信任您现有的 PKI 的步骤。&lt;/p&gt;
&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;
&lt;p&gt;这是简短的版本：您应该通过为每个 Istio 部署创建一个中间签名证书来让 Istio 信任您现有的 PKI（并且每个集群应该有一个 Istio 部署）。然后你会：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用跨 Istio 部署的通信&lt;/li&gt;
&lt;li&gt;允许细粒度的证书撤销，而无需同时在整个基础架构中强制使用新证书（如果这听起来像是等待发生的重大中断，那么您是对的）。&lt;/li&gt;
&lt;li&gt;启用签名证书的轻松轮换。您需要做的就是创建一个新的中间件并使用新证书重新启动 Istio。因为它在同一个信任根中，所以一切都继续工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio 必须适应您现有的架构，以在组织内实现增量采用 —— 使网格适应您的组织，而不是让组织来适应网格。从了解对中间证书签名密钥的需求开始，将为您的成功做好准备，并使任何基础架构或环境更改更加顺利。&lt;/p&gt;
&lt;h2 id=&#34;详述&#34;&gt;详述&lt;/h2&gt;
&lt;p&gt;我们先来了解一下证书验证的过程。在基本证书中，证书检查从信任根开始，向下延伸到特定身份（叶子）。证书路径验证算法是我们确保证书可信的方式。当我们使用 TLS 等安全协议连接到另一台机器时，服务器会向我们提供部分或全部证书链以证明其身份。如果链中的证书被确定为无效，则证书链将被拒绝且不会建立信任。如果我们顺利到达链的末端，则路径（以及证书）是有效的。成功！我们可以信任服务器！&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-trust/f1_huec9d872c6d7b9744e61eee3d5c25daf4_47186_1024x576_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-trust/f1.jpg&#34; data-img=&#34;/trans/istio-trust/f1.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;576&#34; alt=&#34;image&#34; data-caption=&#34;带有叶证书、中间证书和根证书的证书链。服务器可以选择发送整个链，或者只发送一部分；只要有足够的链从根到叶，我们就可以验证证书。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;带有叶证书、中间证书和根证书的证书链。服务器可以选择发送整个链，或者只发送一部分；只要有足够的链从根到叶，我们就可以验证证书。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当 TLS 握手时，路径验证算法不关心有多少证书链驻留在我们的信任包中。基于我们带来的和他们提供的证书，它只关心我们能否构建一条从服务器的叶节点到我们的捆绑包中的信任根的链。上面的示例显示验证发生在证书交换中，这足以让叶子在证书颁发机构中找到它的位置。&lt;/p&gt;
&lt;p&gt;当您在生产环境中运行 Istio 时，您将拥有多个叶节点和中间节点，但&lt;strong&gt;只有一个根节点。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-trust/f2_hub07c1aca55232d4eaaa7450e9ad8d1b6_39066_1024x576_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-trust/f2.jpg&#34; data-img=&#34;/trans/istio-trust/f2.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;576&#34; alt=&#34;image&#34; data-caption=&#34;具有根、三个中间签名 CA 和四个叶证书（由树中的各种中间体颁发）的 PKI 证书树。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;具有根、三个中间签名 CA 和四个叶证书（由树中的各种中间体颁发）的 PKI 证书树。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这就是为什么要在现有 PKI 中建立信任，因为有以下三个主要好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以在 Istio 部署之间的交叉通信&lt;/li&gt;
&lt;li&gt;细粒度证书撤销&lt;/li&gt;
&lt;li&gt;轻松轮换证书&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;跨-istio-部署的通信&#34;&gt;跨 Istio 部署的通信&lt;/h3&gt;
&lt;p&gt;对于 Istio，有两种方法可以确保跨部署的通信 —— 简单的方法和困难的方法。&lt;/p&gt;
&lt;p&gt;困难的方法涉及 Istio 运维人员采取耗时、复杂且昂贵的步骤来确保两个根同时在另一个的证书颁发机构 (CA) 捆绑包中。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-trust/f3_hude18225d1ce4b392db5d8b58e87abe4b_41877_1024x576_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-trust/f3.jpg&#34; data-img=&#34;/trans/istio-trust/f3.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;576&#34; alt=&#34;image&#34; data-caption=&#34;我们可以通过确保所有参与方的根都在 CA 捆绑包中来确保跨不同根的信任。如果它们不是彼此信任包的一部分，则来自每个 Citadel 的证书不能用于跨集群通信。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;我们可以通过确保所有参与方的根都在 CA 捆绑包中来确保跨不同根的信任。如果它们不是彼此信任包的一部分，则来自每个 Citadel 的证书不能用于跨集群通信。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;简单的方法是为每个部署使用单独的中间签名证书部署 Istio，所有这些证书都共享相同的根。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-trust/f4_huea09a22d92f6268de8b161fb6b4726d3_47023_1024x576_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-trust/f4.jpg&#34; data-img=&#34;/trans/istio-trust/f4.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;576&#34; alt=&#34;image&#34; data-caption=&#34;当 Citadel 使用来自同一根 PKI 的中间证书时，最容易促进跨集群通信。我们看到与上面相同的 PKI 树，但中间 CA 被标记为不同集群中的 Citadel 实例。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;当 Citadel 使用来自同一根 PKI 的中间证书时，最容易促进跨集群通信。我们看到与上面相同的 PKI 树，但中间 CA 被标记为不同集群中的 Citadel 实例。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当涉及到细粒度撤销和证书轮换时，这一决定的连锁反应是巨大的。&lt;/p&gt;
&lt;h3 id=&#34;细粒度证书撤销&#34;&gt;细粒度证书撤销&lt;/h3&gt;
&lt;p&gt;撤销证书会将证书标记为不再受信任。当证书路径验证算法从叶节点走到根节点时，会对每个证书进行吊销状态检查。这使您能够撤销对单个组件或整个部署部分的信任。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/istio-trust/f5_hu92686c7061f8ad32642b37636ba403bb_46338_1024x576_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/istio-trust/f5.jpg&#34; data-img=&#34;/trans/istio-trust/f5.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;576&#34; alt=&#34;image&#34; data-caption=&#34;使用与之前相同的 PKI 树，我们展示了在树的一部分中撤销中间 CA 如何使该中间证书以及由它创建的叶证书无效。&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;使用与之前相同的 PKI 树，我们展示了在树的一部分中撤销中间 CA 如何使该中间证书以及由它创建的叶证书无效。&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这很重要，因为如果签名密钥被泄露，恶意行为者可能会通过出示您的客户认为是有效证书来冒充您的服务器。这在 Istio 中更为重要，因为我们使用证书来识别彼此的工作负载 —— 攻击者可以伪装成您网格中的任何服务！&lt;/p&gt;
&lt;p&gt;通常，处理撤销是管理任何 PKI 中最困难的部分。Istio 帮助降低这种风险的方法之一是颁发非常短暂的证书。典型的吊销列表最多可能需要 24 小时才能在整个组织中传播。Istio 颁发的证书有效期少于 12 小时，因此几乎不需要撤销 Istio 颁发的身份证书。您只需要担心为每个 Istio 部署创建的签名证书。&lt;/p&gt;
&lt;h3 id=&#34;轻松轮换证书&#34;&gt;轻松轮换证书&lt;/h3&gt;
&lt;p&gt;与吊销一样，中间证书的轮换更容易。优点包括，如果您能够按集群轮换证书而不是在根节点轮换证书，您将体验到更少的停机时间（以及相关的复杂性，即在任何地方发布一个带有新根的更新的 CA 包）。而且，就像任何好的 PKI 一样，这可以让您使根离线并安全地存储起来。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;用简单的方法来做！将 Istio 引入您现有的信任根中，以避免痛苦和心痛。中间签名证书的存在是为了让采用 Istio 更容易、更安全。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Istio 中的证书管理方式介绍</title>
      <link>https://jimmysong.io/blog/istio-certificates-management/</link>
      <pubDate>Tue, 20 Dec 2022 09:09:40 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/istio-certificates-management/</guid>
      <description>
        
        
        &lt;p&gt;我在&lt;a href=&#34;https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/&#34; title=&#34;如何理解 Istio 中的 mTLS 流量加密&#34;&gt;如何理解 Istio 中的 mTLS 流量加密&lt;/a&gt;这篇文章中提出流量加密的关键是证书管理。我们可以使用 Istio 中内置了 CA（证书授权机构）也可以使用自定义 CA 来管理网格内的证书。这篇博客将为你讲解 Istio 是如何进行证书管理的。&lt;/p&gt;
&lt;h2 id=&#34;certificates-introduction&#34;&gt;什么是证书？&lt;/h2&gt;
&lt;p&gt;在介绍 Istio 的证书管理方式之前，我们先来了解一下什么是证书。若你已了解证书的作用及原理，请直接跳到 Istio 中的证书管理部分。&lt;/p&gt;
&lt;p&gt;证书（Certificate），又称电子证书，是用于身份认证和加密通信的一种数字证明文件。在了解 Istio 的证书管理之前，我们先来了解一下什么是证书。如果你已经了解了证书，可以跳过这一节。&lt;/p&gt;
&lt;p&gt;证书有很多类别，本文中的证书特指的是 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5280&#34; title=&#34;X.509 V3 证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;X.509 V3 证书&lt;/a&gt;。X509 证书是一种常见的数字证书格式，用于在计算机网络中识别实体的身份。X509 是公钥基础设施（PKI）的国际标准，主要用于身份认证和信息加密，例如 TLS。X.509 证书中包含了个人、组织或计算机的身份信息和公钥。V3 是它的最新版本。它主要用于在客户端和服务器之间进行安全通信，例如在通过 HTTPS 访问网站时。x509 证书通常由 CA 颁发，该 CA 会验证实体的身份，并将这些信息编码到证书中。当客户端连接到服务器时，服务器会向客户端提供其 x509 证书，客户端会验证证书的有效性，并通过该证书来识别服务器的身份。通过这种方式，双方可以安全地进行通信，并确保数据传输的完整性和保密性。&lt;/p&gt;
&lt;h3 id=&#34;hash&#34;&gt;哈希函数&lt;/h3&gt;
&lt;p&gt;谈到证书就不得不提哈希（Hash）函数，因为证书的内容会使用哈希函数进行哈希处理，然后用证书颁发者的私钥进行签名。这样，当收到一份证书时，接收者就可以使用证书颁发者的公钥来验证证书的合法性。&lt;/p&gt;
&lt;p&gt;哈希函数是一种将任意长度的输入（也称为消息）映射为固定长度的输出的函数。这个输出也称为哈希值或消息摘要。&lt;/p&gt;
&lt;p&gt;哈希函数有许多用途，其中一个重要的用途是密码存储。当用户在系统中设置密码时，通常不会将真实的密码直接存储在系统中。相反，会将密码进行哈希处理，并将哈希值存储在系统中。当用户登录时，系统会将用户输入的密码进行哈希处理，然后与存储的哈希值进行比较。如果两者相同，则证明用户输入的密码正确，反之则错误。&lt;/p&gt;
&lt;p&gt;哈希函数有很多种类型，例如 MD5、SHA-1 等。这些函数都有一些共同的特点，比如输出固定长度、不可逆、散列冲突少等。&lt;/p&gt;
&lt;p&gt;哈希函数的安全性与其输出的长度有关。一般来说，输出长度越长，哈希函数就越安全。但是，输出长度越长，哈希处理的时间就越长，因此要在安全性和效率之间进行平衡。&lt;/p&gt;
&lt;h3 id=&#34;cert-works&#34;&gt;证书的作用&lt;/h3&gt;
&lt;p&gt;证书的用途广泛，凡是需要加密、认证、授权的场景都会用到它，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Kubernetes 中你需要给各个组件配置证书，你可以选择&lt;a href=&#34;https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/certificates/&#34; title=&#34;手动生成证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;手动生成证书&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;Istio 中为实现自动 mTLS 给各个工作负载颁发的证书；&lt;/li&gt;
&lt;li&gt;访问 HTTPS 网站所用到的证书等；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证书就像是由权威机构印发的名片，供使用者表明其身份，同时还可以为信息加密，保证通信的安全性和完整性。下图展示的是 TLS 通信的大概步骤，其中证书承担了证明服务器身份和加密通信的职责。&lt;/p&gt;
&lt;p&gt;下面以一个网站的 HTTP 链接为例，颁发数字证书、验证和加密通信的过程如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-certificates-management/tls.svg&#34; data-img=&#34;/blog/istio-certificates-management/tls.svg&#34; alt=&#34;image&#34; data-caption=&#34;TLS 证书颁发和校验过程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;TLS 证书颁发和校验过程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;详细步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器（网站所有者）向 CA 提交证书签名请求；&lt;/li&gt;
&lt;li&gt;CA  验证服务器的身份和网站的真实性后为服务器颁发数字证书，服务器安装该证书，以便访问者能够验证网站的安全性；&lt;/li&gt;
&lt;li&gt;用户通过浏览器（客户端）向网站发送请求；&lt;/li&gt;
&lt;li&gt;服务器向客户端返回 TLS 证书；&lt;/li&gt;
&lt;li&gt;客户端向 CA 验证证书的有效性，若有效则建立连接，若无效则提示用户拒绝连接；&lt;/li&gt;
&lt;li&gt;客户端生成一对随机的公钥和私钥；&lt;/li&gt;
&lt;li&gt;客户端将并将自己的公钥发送给服务端；&lt;/li&gt;
&lt;li&gt;服务端使用客户端的公钥加密消息；&lt;/li&gt;
&lt;li&gt;服务端将加密后的数据发送给客户端；&lt;/li&gt;
&lt;li&gt;客户端使用自己的私钥解密服务端发送的数据；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，双方建立了一个安全的通道，并可以通过该通道进行双向加密的数据传输。&lt;/p&gt;
&lt;h3 id=&#34;how-to-generate-certificates&#34;&gt;如何生成证书？&lt;/h3&gt;
&lt;p&gt;你可以通过以下开源工具生成 X.509 证书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenVPN/easy-rsa&#34; title=&#34;Easy-RSA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Easy-RSA&lt;/a&gt;：一个简单地命令行工具，由 OpenVPN 项目组维护，使用 EasyRSA 可以轻松地为 OpenVPN 网络生成安全的证书和密钥；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openssl/openssl&#34; title=&#34;OpenSSL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenSSL&lt;/a&gt;：由个人发起于 1995 年，现由独立组织维护，只提供命令行工具；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/cfssl&#34; title=&#34;CFSSL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CFSSL&lt;/a&gt;：由 CloudFlare 开发和维护，不仅仅是一个用于生成证书的命令行工具，还可以作为 PKI 服务器；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/boringssl&#34; title=&#34;BoringSSL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BoringSSL&lt;/a&gt;：Google 开发和维护的 OpenSSL 分支，已用于 Chrome 浏览器和安卓操作系统；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为可能大多数人都对 OpenSSL 比较熟悉，所以下文中我们将使用 OpenSSL 来创建证书。&lt;/p&gt;
&lt;h3 id=&#34;cert-component&#34;&gt;证书的组成&lt;/h3&gt;
&lt;p&gt;下面以 X.509 V3 证书为例，讲解数字证书的组成。下面是该证书的一个示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            fc:c6:18:2e:20:bd:27:b5:6b:60:bc:47:23:6b:8b:d9
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: O=cluster.local
        Validity
            Not Before: Dec 15 07:25:32 2022 GMT
            Not After : Dec 16 07:27:32 2022 GMT
        Subject:
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:eb:40:16:87:6c:17:5a:9c:b2:91:00:94:d1:31:
                    37:bb:d7:1e:e6:06:1c:a1:c1:35:64:54:82:54:af:
                    b8:4b:40:6f:e0:73:86:4e:c1:c6:75:b8:c8:30:ac:
                    69:16:e8:68:25:cb:dd:e8:53:55:ec:7a:bd:a9:d3:
                    42:44:7f:e5:f5:52:dd:99:ae:c2:1a:a2:06:1f:be:
                    1b:e6:3e:69:87:a3:fc:91:21:39:b0:a7:67:11:f2:
                    3c:55:c6:4b:04:15:1b:ff:49:14:88:c4:58:87:79:
                    96:5b:6e:00:1c:c1:e7:2c:53:0c:d1:77:dc:a8:82:
                    cc:fa:26:c1:bb:6c:df:a8:43:0c:b7:cc:f0:a2:11:
                    9b:e8:3f:8a:1d:ed:2a:ff:1f:d1:03:eb:8a:b9:98:
                    40:18:83:24:4f:14:95:a3:59:ef:67:0f:35:6d:ae:
                    91:81:b2:04:02:16:80:d1:39:bd:70:cf:0f:cb:9a:
                    81:39:d9:fe:52:a5:cf:79:4f:a3:69:d8:0d:39:6a:
                    48:24:8d:2b:88:04:fa:81:de:65:50:7d:1a:3d:cd:
                    f3:1c:42:63:29:75:a0:9b:8e:16:44:3a:89:d6:2b:
                    41:76:65:a5:2e:c8:b6:d2:89:42:5d:21:24:33:30:
                    f0:9d:0b:4d:cf:78:d5:45:2d:49:5a:55:50:98:93:
                    03:f5
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage:
                TLS Web Server Authentication, TLS Web Client Authentication
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Authority Key Identifier:
                keyid:BA:31:8A:9C:ED:EB:49:D2:54:09:98:D9:4C:3A:9C:42:D0:64:8D:B2

            X509v3 Subject Alternative Name: critical
                URI:spiffe://cluster.local/ns/default/sa/httpbin
    Signature Algorithm: sha256WithRSAEncryption
         90:7f:cb:6f:0b:16:cb:59:7d:f4:87:a7:5a:38:fa:0a:16:d8:
         83:0d:b1:36:77:a2:4a:fe:38:52:ab:49:e9:89:50:1a:4c:e9:
         94:07:37:7f:27:bc:2c:ce:c1:d2:33:75:5d:b6:ab:ae:cb:2e:
         71:f4:22:c0:40:15:27:02:75:c1:32:2e:83:49:73:6c:9a:ea:
         04:ef:55:2d:8d:71:30:9b:e4:30:dd:95:20:0d:7c:d2:f4:30:
         2f:07:2e:9f:53:37:e6:3d:14:c7:41:f4:09:8b:a3:76:56:c7:
         c7:92:0f:fc:17:5a:5a:32:6c:9e:87:18:2e:51:75:54:68:d8:
         01:c1:07:cc:b0:35:bf:0b:6c:62:a6:5b:23:61:35:c8:4f:7f:
         e7:1f:a0:e9:11:44:a6:17:52:4d:00:40:21:de:63:ee:02:c8:
         2b:5d:a1:7a:5d:7f:d5:d3:c1:7d:5f:00:40:e8:80:8d:cc:e9:
         8a:c6:b4:98:fe:7a:7d:37:0c:6f:4c:31:91:7a:79:30:84:cd:
         01:a7:14:f6:1b:33:8f:0f:50:1c:36:38:6b:24:da:cf:49:8a:
         5b:28:cf:27:76:e1:a5:c7:e6:d5:6e:d8:36:85:aa:1f:a5:ac:
         fa:f1:2e:a2:36:2e:25:b0:71:24:d1:3e:d5:e5:19:2b:0b:6f:
         b7:17:e4:75
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;证书中各个字段的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证书版本（Version）：表示证书的版本号。&lt;/li&gt;
&lt;li&gt;序列号（Serial Number）：表示证书的唯一序列号。&lt;/li&gt;
&lt;li&gt;签名算法（Signature Algorithm）：表示证书的签名算法，例如 RSA、DSA 或 ECDSA 等。&lt;/li&gt;
&lt;li&gt;证书颁发机构（Issuer）：表示颁发该证书的可信的第三方机构的名称。&lt;/li&gt;
&lt;li&gt;有效期（Validity）：表示证书的有效期，包括证书生效日期（Not Before）和证书失效日期（Not After）。&lt;/li&gt;
&lt;li&gt;使用者（Subject）：表示证书所有者的名称。&lt;/li&gt;
&lt;li&gt;公钥信息（Subject Public Key Info）：表示证书所有者的公钥以及公钥的算法。&lt;/li&gt;
&lt;li&gt;扩展（Extensions）：表示证书的扩展信息，包括：
&lt;ul&gt;
&lt;li&gt;密钥用法扩展（Key Usage Extension）：表示证书所有者的密钥可用于哪些操作，例如数字签名、密钥加密等。&lt;/li&gt;
&lt;li&gt;扩展密钥用法扩展（Extended Key Usage Extension）：表示证书所有者的密钥可用于哪些扩展的操作，例如 TLS Web Server Authentication、TLS Web Client Authentication 等。&lt;/li&gt;
&lt;li&gt;基本约束扩展（Basic Constraints Extension）：表示证书所有者是否是证书颁发机构的下级机构，以及是否允许其作为证书颁发机构颁发其他证书。&lt;/li&gt;
&lt;li&gt;主体密钥表示扩展（Authority Key Identifier）：包含一个或多个唯一的标识符，用于表示证书颁发机构的密钥。这些标识符可以是证书颁发机构的公钥哈希值，也可以是证书颁发机构的证书序列号。该扩展用于验证证书的合法性，例如在验证证书链时，用于验证证书颁发机构是否为可信的机构。这个扩展字段是可选的，但在许多情况下都会被使用。&lt;/li&gt;
&lt;li&gt;主体替代名称扩展（Subject Alternative Name Extension）：表示证书所有者的其他名称，例如域名、IP 地址、电子邮件地址等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;certificate-trust-chain&#34;&gt;证书信任链&lt;/h3&gt;
&lt;p&gt;证书的验证需要通过证书信任链（Certificate Trust Chain）。证书信任链是指用于身份验证的一系列证书，它们形成一条从一个可信任的根证书颁发机构开始，逐级向下连接，直到用于验证某个特定证书的中间证书或终端证书的一种方式。证书信任链允许数字证书的可信度随着证书级别的升高而提高。&lt;/p&gt;
&lt;p&gt;在下面的证书信任链示意图中，你可以看到四条信任链。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-certificates-management/certificate-trust-chain.svg&#34; data-img=&#34;/blog/istio-certificates-management/certificate-trust-chain.svg&#34; alt=&#34;image&#34; data-caption=&#34;证书信任链&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;证书信任链&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;证书的信任链是一个树形结构，每个 CA 都可以有一或多个子 CA，一共有三种角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根 CA：最顶层的 CA，可以颁发证书给中间 CA；&lt;/li&gt;
&lt;li&gt;中间 CA：除根 CA 以外的 CA，可颁发终端证书；&lt;/li&gt;
&lt;li&gt;终端实体：拥有终端证书的设备或服务；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根 CA 是数字证书的最顶级颁发机构，因此它所颁发的证书是最可信的。根证书颁发机构通常由政府机构或其他权威机构（如国际基础设施安全组织）经营和监管。常见的根 CA 包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Symantec/VeriSign&lt;/li&gt;
&lt;li&gt;Comodo&lt;/li&gt;
&lt;li&gt;DigiCert&lt;/li&gt;
&lt;li&gt;GlobalSign&lt;/li&gt;
&lt;li&gt;GoDaddy&lt;/li&gt;
&lt;li&gt;Entrust&lt;/li&gt;
&lt;li&gt;GeoTrust&lt;/li&gt;
&lt;li&gt;RapidSSL&lt;/li&gt;
&lt;li&gt;Baltimore CyberTrust Root&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，上述列表只是一个样例，实际上有许多其他根 CA。&lt;/p&gt;
&lt;p&gt;在 Chrome 浏览器中打开一个 HTTPS 网页，你可以通过点击地址栏左侧的锁图标查看证书信息，其中包括证书信任链，例如 &lt;a href=&#34;https://tetrate.io&#34; title=&#34;https://tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tetrate.io&lt;/a&gt; 的证书信任链如下图：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/istio-certificates-management/tetrate-cert_hu99e17f69260b8b8483b6de6702da287f_34429_800x979_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/istio-certificates-management/tetrate-cert.jpg&#34; data-img=&#34;/blog/istio-certificates-management/tetrate-cert.jpg&#34; data-width=&#34;800&#34; data-height=&#34;979&#34; alt=&#34;image&#34; data-caption=&#34;Tetrate.io 的证书信任链&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Tetrate.io 的证书信任链&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;证书信任链允许客户端（例如，Web 浏览器）在验证终端证书时，逐级向上验证每个证书，以确定它是否可信。数字证书签发的原理是 CA 将证书拥有者的公钥与身份信息绑定在一起，然后 CA 使用其专有的私钥生成正式的数字签名，用以表示这个证书是经 CA 签发的。在证书校验时使用 CA 的公钥对这个证书上的数字签字进行验证即可。&lt;/p&gt;
&lt;h2 id=&#34;istio-pki&#34;&gt;将 Istio 纳入 PKI 证书信任链&lt;/h2&gt;
&lt;p&gt;在使用 Istio 之前，企业通常有自己的内部 PKI（公钥基础设施），那么如何将 Istio 纳入到 PKI 的证书信任链中呢？&lt;/p&gt;
&lt;p&gt;我们知道 Istio 内置了证书管理功能，可以开箱即用，Istio 启动时会为 &lt;em&gt;istiod&lt;/em&gt; 创建自签名证书，作为网格内所有工作负载的根证书。这样做有个问题，如果你有多网格，内置的根证书无法做到网格间互信。正确的做法是不使用 Istio 自签名证书，而是将 Istio 纳入到你的证书信任链中，将 Istio 集成到你的 PKI，为 PKI 每个网格创建一个中间证书，这样两个网格拥有了共同的信任根，就可以做到网格间互信。&lt;/p&gt;
&lt;p&gt;通过为 Istio 网格创建中间 CA 使其纳入到企业内部 PKI 证书信任链中，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-certificates-management/cluster-ca.svg&#34; data-img=&#34;/blog/istio-certificates-management/cluster-ca.svg&#34; alt=&#34;image&#34; data-caption=&#34;为多网格创建中间 CA 使得 Istio 纳入到企业内部 PKI 证书信任链&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;为多网格创建中间 CA 使得 Istio 纳入到企业内部 PKI 证书信任链&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;将 Istio 纳入企业内部 PKI 证书信任链后有诸多好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以实现跨网格/集群之间的通信：有了共同的信任根，集群之间就可以互相验证身份，进而实现跨集群通信；&lt;/li&gt;
&lt;li&gt;更细粒度的证书撤销：你可以撤销某个实体或中间 CA 的证书来撤销某个服务或集群的证书；&lt;/li&gt;
&lt;li&gt;轻松实现证书轮换：你可以按集群/网格实现证书轮换，而不是轮换根节点证书，这样会减少停机时间，推荐您使用 &lt;a href=&#34;https://github.com/cert-manager/cert-manager&#34; title=&#34;cert-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cert-manager&lt;/a&gt; 来实现自动化的大规模 CA 证书轮换，详情请参考&lt;a href=&#34;https://cloudnative.to/blog/automate-istio-ca-rotation-in-production-at-scale/&#34; title=&#34;在生产中大规模自动化 Istio CA 轮换&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在生产中大规模自动化 Istio CA 轮换&lt;/a&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于将 Istio 纳入企业内部 PKI 的证书信任链的详细说明请参考&lt;a href=&#34;https://cloudnative.to/blog/istio-trust/&#34; title=&#34;这篇博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;istio-custom-ca&#34;&gt;Istio 中使用自定义 CA 的步骤&lt;/h2&gt;
&lt;p&gt;默认情况下，Istio CA 会生成一个自签名的根证书和密钥，并使用它们来签署工作负载证书。为了保护根 CA 密钥，你应该使用在安全机器上离线运行的根 CA，并使用根 CA 向运行在每个集群上的 Istio CA 签发中间证书。Istio CA 可以使用管理员指定的证书和密钥来签署工作负载证书，并将管理员指定的根证书作为信任根分配给工作负载。&lt;/p&gt;
&lt;p&gt;下图展示了 Istio 中的证书签发和挂载过程。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/istio-certificates-management/cert-process.svg&#34; data-img=&#34;/blog/istio-certificates-management/cert-process.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 中的证书签发和挂载过程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 中的证书签发和挂载过程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Istio 向 Pod 中注入的 Envoy 代理中有两个进程——&lt;code&gt;envoy&lt;/code&gt; 和 &lt;code&gt;pilot-agent&lt;/code&gt;。&lt;code&gt;pilot-agent&lt;/code&gt; 为 Envoy 生成私钥，通过 UNIX Domain Socekt（UDS）使用 Secret Discovery Service（SDS）向 CA 发起证书签名请求（CSR），如果你没有配置 CA 插件的话，Istio 默认向 &lt;em&gt;istiod&lt;/em&gt; 发起 CSR；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istiod&lt;/code&gt; 内置 CA 向 &lt;code&gt;pilot-agent&lt;/code&gt; 返回证书；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pilot-agent&lt;/code&gt; 将生成的私钥和 CA 返回的证书发送给 &lt;code&gt;envoy&lt;/code&gt; 挂载；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio 默认使用内置于 &lt;em&gt;istiod&lt;/em&gt; 中的 CA，也支持插入其他 CA，见 &lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/cert-management/plugin-ca-cert/&#34; title=&#34;Istio 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;。若想使用自定义的 CA 证书和密钥为服务创建身份，你需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 CA 配置文件并使用它来创建自签名的 CA 根证书和密钥；&lt;/li&gt;
&lt;li&gt;为服务创建私钥、签名请求配置文件；&lt;/li&gt;
&lt;li&gt;为服务创建证书签名请求（CSR）；&lt;/li&gt;
&lt;li&gt;使用根证书和密钥以及服务的签名请求文件为服务创建证书；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，我们将以为 Bookinfo 的 productpage 服务创建和挂载证书为例详述 Istio 内置 CA 签发证书的流程。&lt;/p&gt;
&lt;h2 id=&#34;istio-ca&#34;&gt;Istio 内置 CA 签发证书流程 &lt;/h2&gt;
&lt;p&gt;Istio 启动时将创建一个自签名的 CA 证书，然后再用该 CA 证书为网格内的服务颁发证书。下面我们手动模拟 Istio 内置 CA 签发证书的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建 CA 私钥 &lt;code&gt;ca.key&lt;/code&gt;；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl genrsa -out ca.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建 CA 配置文件 &lt;code&gt;ca.conf&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[ req ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;default_bits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;prompt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;no&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;utf8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;encrypt_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;no&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;distinguished_name&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;req_dn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;req_extensions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;req_ext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;x509_extensions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;req_ext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[ req_dn ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Istio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;CN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Root CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[ req_ext ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;subjectKeyIdentifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;hash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;basicConstraints&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;critical, CA:true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;keyUsage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 CA 私钥 &lt;code&gt;ca.key&lt;/code&gt; 生成自签名证书 &lt;code&gt;ca.pem&lt;/code&gt;，其中主题中包含 CA 的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -x509 -new -nodes -key ca.key -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -out ca.pem -config ca.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    关于 PEM 文件
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;p&gt;PEM 文件是一种用于存储证书、公钥或私钥的文件。它采用 Base64 编码的 ASCII 格式，并使用特定的文件扩展名，例如 &lt;code&gt;.pem&lt;/code&gt;、&lt;code&gt;.crt&lt;/code&gt;、&lt;code&gt;.cer&lt;/code&gt; 或 &lt;code&gt;.key&lt;/code&gt;。PEM 文件通常用于存储加密密钥、数字证书和公钥基础设施（PKI）证书。&lt;/p&gt;
&lt;p&gt;PEM 文件的内容通常以一组特定的标头和脚本开始，例如 &lt;code&gt;-----BEGIN RSA PRIVATE KEY-----&lt;/code&gt; 和 &lt;code&gt;-----END RSA PRIVATE KEY-----&lt;/code&gt;。这些标头和脚本指定了文件的类型和数据的开始和结束位置。&lt;/p&gt;
&lt;p&gt;PEM 文件可以通过文本编辑器直接打开，但并不可读，因为它是由二进制编码格式 DER（可分辨编码规则）转化而来，要想解析它需要使用特别的工具，例如 OpenSSL。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为工作负载创建私钥 &lt;code&gt;workload.key&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl genrsa -out workload.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建证书签名请求配置文件 &lt;code&gt;csr.conf&lt;/code&gt;，其中包含 CA 的地址及附加信息；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[ req ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;default_bits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;prompt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;no&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;utf8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;encrypt_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;no&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;distinguished_name&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;dn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;req_extensions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;req_ext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;x509_extensions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;req_ext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[ req_dn ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Istio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;CN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;productpage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[ req_ext ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;subjectKeyIdentifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;hash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;basicConstraints&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;critical, CA:true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;keyUsage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于工作负载的 CSR 配置文件 &lt;code&gt;csr.conf&lt;/code&gt; 和工作负载的私钥文件 &lt;code&gt;workload.key&lt;/code&gt; 创建证书签名请求 &lt;code&gt;workload.csr&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -new -key workload.key -out workload.csr -config csr.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 CA 的私钥 &lt;code&gt;ca.key&lt;/code&gt;、CA 的证书 &lt;code&gt;ca.pem&lt;/code&gt; 和工作负载的证书签名请求创建服务器证书 &lt;code&gt;workload.pem&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -req -in workload.csr -CA ca.pem -CAkey ca.key &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -CAcreateserial -out workload.pem -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -extensions req_ext -extfile csr.conf -sha256
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Istiod 在收到工作负载的 CSR 后将根证书 &lt;code&gt;ca.pem&lt;/code&gt; 和服务证书下发给工作负载；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看工作负载中 Envoy 代理挂载的证书链：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config secret deployment/productpage-v1 -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; chain.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;chain.pem&lt;/code&gt; 文件中保存着 &lt;code&gt;productpage&lt;/code&gt; 服务的证书链，因为我们使用的 Istio 内置 CA 作为根 CA，所以该文件中只保存有一个证书，可以运行下面的命令查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -noout -text -in chain.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 Envoy 代理挂载的根证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config secret deployment/productpage-v1 -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[1].secret.validationContext.trustedCa.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; root.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;root.pem&lt;/code&gt; 即为根证书，运行下面的命令查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -noout -text -in root.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    提示
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    &lt;code&gt;root.pem&lt;/code&gt; 中的内容与 &lt;code&gt;istiod-ca-cert&lt;/code&gt; ConfigMap 中的 &lt;code&gt;root-cert.pem&lt;/code&gt; 及 &lt;code&gt;istio-ca-secret&lt;/code&gt; 中的 &lt;code&gt;ca-cert.pem&lt;/code&gt; 是一样的，虽然现在 Envoy 已不在通过读取挂载卷来获得证书内容，但之所以保留了这些卷是为了向后兼容。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;证书挂载到 Envoy 代理之后，&lt;em&gt;istiod&lt;/em&gt; 将负责定期替换密钥证书，以及根据需要撤销密钥证书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文向你介绍了数字证书的作用、组成和证书信任链，以及 Istio 中内置的开箱即用的证书管理器运作的流程。但是 Istio 内置 CA 仍然有一定限制，在下一篇博客中我将向你介绍如何使用插件 SPIRE 和 cert-manager 来实现细粒度的证书管理和自动证书轮换。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/cert-management/plugin-ca-cert/&#34; title=&#34;插入 CA 证书 - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;插入 CA 证书 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.tetratelabs.io/zh/istio-in-practice/setting-up-ssl-certs/&#34; title=&#34;如何设置 SSL 证书 - istio.tetratelabs.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何设置 SSL 证书 - istio.tetratelabs.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/zh-cn/docs/tasks/tls/managing-tls-in-a-cluster/&#34; title=&#34;管理集群中的 TLS 认证 - kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;管理集群中的 TLS 认证 - kubernetes.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/certificates/&#34; title=&#34;手动生成证书 - kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;手动生成证书 - kubernetes.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/istio-trust/&#34; title=&#34;将 Istio 纳入信任链：使用现有 PKI 作为信任根 - jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 Istio 纳入信任链：使用现有 PKI 作为信任根 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/how-to-use-hashicorp-vault-as-a-more-secure-way-to-store-istio-certificates/&#34; title=&#34;如何使用 Hashicorp Vault 作为一种更安全的方式来存储 Istio 证书 - jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何使用 Hashicorp Vault 作为一种更安全的方式来存储 Istio 证书 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>如何使用 Hashicorp Vault 作为一种更安全的方式来存储 Istio 证书</title>
      <link>https://jimmysong.io/trans/how-to-use-hashicorp-vault-as-a-more-secure-way-to-store-istio-certificates/</link>
      <pubDate>Mon, 19 Dec 2022 13:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/how-to-use-hashicorp-vault-as-a-more-secure-way-to-store-istio-certificates/</guid>
      <description>
        
        
        &lt;p&gt;在本文中，我们将探讨如何使用 Hashicorp Vault 作为一种比使用 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret&#34; title=&#34;Secret&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Secret&lt;/a&gt; 更安全的方式来存储 Istio 证书。默认情况下，Secret 使用 base64 编码存储在 &lt;em&gt;etcd&lt;/em&gt; 中。在安全策略严格的环境中，这可能是不可接受的，因此需要额外的措施来保护它们。一种此类解决方案涉及将机密存储在外部机密存储提供程序中，例如 &lt;a href=&#34;https://www.vaultproject.io/&#34; title=&#34;HashiCorp Vault&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HashiCorp Vault&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Vault 可以托管在 Kubernetes 集群内部和外部。在本案例中，我们将探索使用托管在 Kubernetes 外部的 Vault，以便它可以同时为多个集群提供秘密。该设置也非常适合探索 Istio 的&lt;a href=&#34;https://istio.io/latest/docs/setup/install/multicluster&#34; title=&#34;多集群功能&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多集群功能&lt;/a&gt;，它需要一个共享的信任域。&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器，我们可以将证书和私钥材料注入实际的 Istio 控制平面 Pod，以便它们使用外部 CA 证书进行引导。这避免了依赖 Secret 来引导 Istio 控制平面。该技术也完全适用于入口和出口证书。&lt;/p&gt;
&lt;p&gt;有关如何在 Istio 中使用和管理证书的更多信息，请参见官方文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/concepts/security/#pki&#34; title=&#34;身份和证书管理&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;身份和证书管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/cert-management/plugin-ca-cert&#34; title=&#34;插入 CA 证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;插入 CA 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/cert-management/custom-ca-k8s&#34; title=&#34;使用 Kubernetes CSR 的自定义 CA 集成&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Kubernetes CSR 的自定义 CA 集成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关基于实际生产经验的最佳实践，另请查看以下 &lt;a href=&#34;https://tetrate.io/&#34; title=&#34;Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt; 的博客文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/trans/istio-trust/&#34; title=&#34;在 Istio 中构建证书信任链：将现有 PKI 作为信任根&#34;&gt;在 Istio 中构建证书信任链：将现有 PKI 作为信任根&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/trans/automate-istio-ca-rotation-in-production-at-scale&#34; title=&#34;在生产中大规模自动化 Istio CA 轮换&#34;&gt;在生产中大规模自动化 Istio CA 轮换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇博文附带的代码可以在以下存储库中找到：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs&#34; title=&#34;https://github.com/tetratelabs/istio-vault-ext-certs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tetratelabs/istio-vault-ext-certs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;istiod-证书处理&#34;&gt;&lt;strong&gt;Istiod 证书处理&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;尽管上述博文中解释了一些决策逻辑，但也值得参考&lt;a href=&#34;https://github.com/istio/istio/blob/master/pilot/pkg/bootstrap/istio_ca.go&#34; title=&#34;源代码&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;源代码&lt;/a&gt;以查找一些未记录的行为。&lt;/p&gt;
&lt;p&gt;在 Istio 的源码 &lt;code&gt;istio/pilot/pkg/bootstrap/istio_ca.go&lt;/code&gt; 文件中，你将看到：为了向后兼容，Istio 保留了对用于自签名证书 &lt;code&gt;cacerts&lt;/code&gt; Secret 的支持。它安装在相同的位置，如果发现了就会被使用——创建秘密就足够了，不需要额外的选项。在旧安装程序中，&lt;code&gt;LocalCertDir&lt;/code&gt; 被硬编码到 &lt;code&gt;/etc/cacerts&lt;/code&gt; 并使用 &lt;code&gt;cacerts&lt;/code&gt;  Secret 安装。已删除对签署其他根 CA 的支持——太危险，没有明确的用例。&lt;/p&gt;
&lt;p&gt;默认配置，用于向后兼容 Citadel：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;istio-system&lt;/code&gt; 中存在 &lt;code&gt;cacerts&lt;/code&gt; 秘密，将被挂载。它可能包含一个可选的 &lt;code&gt;root-cert.pem&lt;/code&gt;，
带有额外的根和可选的 &lt;code&gt;{ca-key, ca-cert, cert-chain}.pem&lt;/code&gt; 由用户提供的根 CA。&lt;/li&gt;
&lt;li&gt;如果未找到用户提供的根 CA，则使用 &lt;code&gt;istio-ca-secret&lt;/code&gt; Secret，以及 &lt;code&gt;ca-cert.pem&lt;/code&gt; 和 &lt;code&gt;ca-key.pem&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;如果两者均未找到，将创建 &lt;code&gt;istio-ca-secret&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;带有 &lt;code&gt;caTLSRootCert&lt;/code&gt; 文件的 &lt;code&gt;istio-security&lt;/code&gt; ConfigMap 将用于根证书，并在需要时创建。该 ConfigMap 由节点代理使用，不再可能在 sds-agent 中使用，但我们仍保留它以向后兼容。将与 node-agent 一起删除。sds-agent 使用 K8S root 直接调用 &lt;code&gt;NewCitadelClient&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了指示 Istio 从其他地方获取证书，而不是标准 Kubernetes Secret，我们将利用 &lt;em&gt;istio-pilot&lt;/em&gt;（又名 istiod 或 Istio 控制平面）的环境变量（&lt;a href=&#34;https://istio.io/latest/docs/reference/commands/pilot-discovery&#34; title=&#34;见此文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;见此文档&lt;/a&gt;），从 Kubernetes Pod 中的另一个位置获取证书。这是必需的，因为 &lt;code&gt;vault-agent-init&lt;/code&gt; 注入容器将创建一个新的挂载卷 &lt;code&gt;/vault/secrets&lt;/code&gt; ，以放置从外部 Vault 服务器拉出的证书和私钥。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名称&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ROOT_CA_DIR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/cacerts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;本地或安装的 CA 根目录的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pod-内的-vault-agent-init-容器注解&#34;&gt;Pod 内的 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器注解&lt;/h2&gt;
&lt;p&gt;我们将利用 Vault 注入器注解来指示 Sidecar 提取哪些数据以及在这样做时使用什么 Vault 角色。我们还确保容器在我们实际的主容器之前运行，因此后者可以获取证书和密钥材料以正确引导自身。&lt;a href=&#34;https://developer.hashicorp.com/vault/docs/platform/k8s/injector/annotations&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;列举并记录了 Vault 注解。我们将在本教程中使用的相关注释如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;注解&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;默认值&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-inject&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;配置是否为 Pod 显式启用或禁用注入。这应该设置为 true 或 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-init-first&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;如果为 true，则将 Pod 配置为首先运行 Vault Agent init 容器（如果为 false，则最后运行）。当其他 init 容器需要预填充的秘密时，这很有用。这应该设置为 true 或 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/role&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Vault 代理自动验证方法使用的 Vault 角色。&lt;code&gt;vault.hashicorp.com/agent-configmap&lt;/code&gt; 未设置时需要。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/auth-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Kubernetes 身份验证方法的身份验证路径。默认为 &lt;code&gt;auth/kubernetes&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-inject-secret-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Vault 代理以从容器所需的 Vault 中检索秘密。Secret 的名称是 &lt;code&gt;vault.hashicorp.com/agent-inject-secret-&lt;/code&gt; 之后的任意唯一字符串，例如 &lt;code&gt;vault.hashicorp.com/agent-inject-secret-foobar&lt;/code&gt; 该值是 secret 所在的 Vault 中的路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-inject-template-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Vault Agent 应该用于呈现秘密的模板。模板的名称是 v&lt;code&gt;ault.hashicorp.com/agent-inject-template-&lt;/code&gt; 之后的任何唯一字符串，例如 &lt;code&gt;vault.hashicorp.com/agent-inject-template-foobar&lt;/code&gt;。这应该映射到 &lt;code&gt;vault.hashicorp.com/agent-inject-secret-&lt;/code&gt; 中提供的相同唯一值。如果未提供，则使用默认的通用模板。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;vault-server-considerations&#34;&gt;Vault 服务器注意事项&lt;/h2&gt;
&lt;p&gt;Vault 支持多种客户端验证自己的方法。我们将利用 &lt;a href=&#34;https://developer.hashicorp.com/vault/docs/auth/kubernetes&#34; title=&#34;Kubernetes 身份验证后端&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 身份验证后端&lt;/a&gt;，这意味着我们将利用 Kubernetes ServiceAccount JWT 令牌验证。请注意，自 Kubernetes 1.24 以来，不再自动生成 ServiceAccount 令牌。您仍然可以手动创建这些 API 令牌，如&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#manually-create-an-api-token-for-a-serviceaccount&#34; title=&#34;此处所述&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处所述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;至于证书和私钥材料的存储，我们有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.hashicorp.com/vault/docs/secrets/pki&#34; title=&#34;PKI 秘密引擎&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PKI 秘密引擎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.hashicorp.com/vault/docs/secrets/kv&#34; title=&#34;KV 秘密引擎&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KV 秘密引擎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 PKI 秘密引擎不提供精简的 API 来检索我们需要的证书和私钥，并且因为 PKI 秘密引擎会为每次调用（例如，每次 &lt;em&gt;istiod&lt;/em&gt; 重启）生成一个新的中间证书，我们将使用通用的 KV 秘密引擎，将我们需要的所有值存储在一个简单的键值数据结构中。我们假设中间证书的更新是通过一些服务门户或 CI/CD 过程在外部处理的，这些过程也将更新的中间证书存储在 Vault 服务器中。&lt;/p&gt;
&lt;p&gt;Istio 的控制平面 Pod 需要以下文件才能在 CA 中正确引导其构建：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;值（PEM 编码）&lt;/th&gt;
&lt;th&gt;细节&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ca-key.pem&lt;/td&gt;
&lt;td&gt;私钥&lt;/td&gt;
&lt;td&gt;中间证书的私钥，用作 &lt;em&gt;istiod&lt;/em&gt; 的根 CA。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ca-cert.pem&lt;/td&gt;
&lt;td&gt;CA 公共证书&lt;/td&gt;
&lt;td&gt;中间证书，用作 &lt;em&gt;istiod&lt;/em&gt; 的根 CA。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;root-cert.pem&lt;/td&gt;
&lt;td&gt;CA 根证书&lt;/td&gt;
&lt;td&gt;我们新生成的中间证书的信任根。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cert-chain.pem&lt;/td&gt;
&lt;td&gt;完整的证书链&lt;/td&gt;
&lt;td&gt;中间证书在顶部，根证书在底部。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;设置&#34;&gt;设置&lt;/h2&gt;
&lt;p&gt;如果要遵循本地设置，则安装软件的先决条件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;kubectl&lt;/em&gt; 与 Kubernetes 集群交互（&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/#kubectl&#34; title=&#34;下载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;helm&lt;/em&gt; 安装 Vault injector 和 Istio chart（&lt;a href=&#34;https://helm.sh/docs/intro/install&#34; title=&#34;下载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;用于配置 Vault 服务器的 &lt;em&gt;vault cli&lt;/em&gt; 工具（&lt;a href=&#34;https://developer.hashicorp.com/vault/tutorials/getting-started/getting-started-install#install-vault&#34; title=&#34;下载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您想要本地演示环境，请按照&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/local-setup.md&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;的说明进行操作，该说明使用 &lt;code&gt;docker-compose&lt;/code&gt; 启动一个 Vault 服务器和两个独立的 k3s 集群。如果您使用自己的 Kubernetes 集群和外部托管的 Vault 实例，请跳至下一节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;docker-compose&lt;/em&gt; 启动本地环境（&lt;a href=&#34;https://github.com/docker/compose/releases&#34; title=&#34;下载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了取得进展，我们希望根据您的环境设置以下 shell 变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VAULT_SERVER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;K8S_API_SERVER_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;K8S_API_SERVER_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vault-kubernetes-身份验证后端&#34;&gt;&lt;strong&gt;Vault Kubernetes 身份验证后端&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;正如在有关 &lt;a href=&#34;#vault-server-considerations&#34; title=&#34;Vault 服务器注意事项&#34;&gt;Vault 服务器注意事项&lt;/a&gt;的介绍部分中提到的，我们将使用 &lt;a href=&#34;https://developer.hashicorp.com/vault/docs/auth/kubernetes&#34; title=&#34;Kubernetes 身份验证后端&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 身份验证后端&lt;/a&gt;。由于 &lt;em&gt;istiod&lt;/em&gt; 将从 Vault 服务器获取证书和私钥材料，让我们从在两个集群中创建相应的服务账户开始。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml create ns istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml create ns istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml apply -f istio-sa.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml apply -f istio-sa.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ServiceAccount、Secret 和 ClusterRoleBinding 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# istio-sa.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceAccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# added for istio helm installation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app.kubernetes.io/managed-by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Helm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# added for istio helm installation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta.helm.sh/release-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta.helm.sh/release-namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/service-account.name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes.io/service-account-token&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;role-tokenreview-binding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:auth-delegator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceAccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：&lt;em&gt;我们在 istiod ServiceAccount 上添加了 Helm 标签和注解，以免与稍后的 Istio Helm 部署发生冲突。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在两个集群中创建 ServiceAccount 后，让我们将它们的 Secret 令牌和 ca.cert 值存储在 output 文件夹中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p ./output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml get secret -n istio-system istiod -o go-template&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .data.token }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/istiod1.jwt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml config view --raw --minify --flatten -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.clusters[].cluster.certificate-authority-data}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/k8sapi-cert1.pem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml get secret -n istio-system istiod -o go-template&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .data.token }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/istiod2.jwt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml config view --raw --minify --flatten -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.clusters[].cluster.certificate-authority-data}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/k8sapi-cert2.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 Kubernetes API 证书和 istiod ServiceAccount JWT 令牌的详细内容的更多信息可以在&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/output&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;找到，在这里我们也更深入地描述了 Vault 的交互过程，即通过 REST API 调用来验证和获取秘密。在调试权限拒绝的问题时，这些可以派上用场。&lt;/p&gt;
&lt;p&gt;让我们根据刚刚检索到的 Kubernetes CA 证书和 JWT 令牌创建必要的 Vault 身份验证配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VAULT_ADDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://localhost:8200
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault login root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault auth &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; --path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster1 kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault auth &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; --path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster2 kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster1/config &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$K8S_API_SERVER_1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@output/k8sapi-cert1.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;token_reviewer_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;cat output/istiod1.jwt&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;disable_local_ca_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster2/config &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$K8S_API_SERVER_2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@output/k8sapi-cert2.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;token_reviewer_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;cat output/istiod2.jwt&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;disable_local_ca_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：如果您使用的是 &lt;em&gt;docker-compose&lt;/em&gt; 提供的环境，则 &lt;code&gt;VAULT_ADDR&lt;/code&gt; 设置为 localhost。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;vault-kv-secret-中的-istio-证书和私钥&#34;&gt;&lt;em&gt;Vault kv&lt;/em&gt; Secret 中的 Istio 证书和私钥&lt;/h2&gt;
&lt;p&gt;接下来我们将创建一个新的自签名根证书并为我们的两个集群生成中间证书。我们将在&lt;a href=&#34;https://github.com/istio/istio/tree/master/tools/certs&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;使用上游 Istio 提供的辅助 &lt;em&gt;Makefile&lt;/em&gt; 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; certs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make -f ../certs-gen/Makefile.selfsigned.mk root-ca
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make -f ../certs-gen/Makefile.selfsigned.mk istiod-cluster1-cacerts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make -f ../certs-gen/Makefile.selfsigned.mk istiod-cluster2-cacerts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有关实际内容和正在设置的 X509v3 扩展的更多详细信息，请参见&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/certs&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;。您可以通过&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/certs-gen&#34; title=&#34;此处&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;的 &lt;em&gt;Makefile&lt;/em&gt;文档和相应的 &lt;em&gt;Makefile&lt;/em&gt; 覆盖值微调证书。&lt;/p&gt;
&lt;p&gt;让我们将生成的证书和私钥添加到 Vault &lt;em&gt;kv&lt;/em&gt; secret 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VAULT_ADDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://localhost:8200
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault login root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault secrets &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; -path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster1-secrets kv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault secrets &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; -path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster2-secrets kv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault kv put kubernetes-cluster1-secrets/istiod-service/certs &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/ca-key.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/ca-cert.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cert_chain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/cert-chain.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;root_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/root-cert.pem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault kv put kubernetes-cluster2-secrets/istiod-service/certs &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/ca-key.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/ca-cert.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cert_chain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/cert-chain.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;root_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/root-cert.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过限制对每个集群的这些证书和私钥的访问，绑定到基于 Kubernetes &lt;em&gt;istiod&lt;/em&gt; ServiceAccount 的身份验证后端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;path &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  capabilities = [&amp;#34;read&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; vault policy write istiod-certs-cluster1 -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;path &amp;#34;kubernetes-cluster2-secrets/istiod-service/certs&amp;#34; {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  capabilities = [&amp;#34;read&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; vault policy write istiod-certs-cluster2 -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster1/role/istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_namespaces&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istio-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod-certs-cluster1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;24h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster2/role/istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_namespaces&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istio-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod-certs-cluster2  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;24h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署-vault-inject-和-istio-helm-charts&#34;&gt;部署 &lt;em&gt;vault-inject&lt;/em&gt; 和 Istio Helm Charts&lt;/h2&gt;
&lt;p&gt;为了部署 Vault 注入器，我们将利用官方 Vault &lt;a href=&#34;https://github.com/hashicorp/vault-helm&#34; title=&#34;Helm chart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm chart&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo add hashicorp https://helm.releases.hashicorp.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml create ns vault
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml create ns vault
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg1.yml install -n vault vault-inject hashicorp/vault --set &lt;span class=&#34;s2&#34;&gt;&amp;#34;injector.externalVaultAddr=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$VAULT_SERVER&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg2.yml install -n vault vault-inject hashicorp/vault --set &lt;span class=&#34;s2&#34;&gt;&amp;#34;injector.externalVaultAddr=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$VAULT_SERVER&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml -n vault get pods
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml -n vault get pods
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAME                                           READY   STATUS    RESTARTS   AGE
vault-inject-agent-injector-5776975795-9vt9w   1/1     Running   0          92s
NAME                                           READY   STATUS    RESTARTS   AGE
vault-inject-agent-injector-5776975795-9vjnx   1/1     Running   0          91s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要安装 Istio，我们将使用 Tetrate Istio Distro &lt;a href=&#34;https://github.com/tetratelabs/helm-charts&#34; title=&#34;Helm chart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm chart&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo add tetratelabs https://tetratelabs.github.io/helm-charts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg1.yml install -n istio-system istio-base tetratelabs/base
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg2.yml install -n istio-system istio-base tetratelabs/base
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg1.yml install -n istio-system istio-istiod tetratelabs/istiod --values&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./cluster1-values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg2.yml install -n istio-system istio-istiod tetratelabs/istiod --values&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./cluster2-values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml -n istio-system get pods
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml -n istio-system get pods
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意我们如何利用多个 Istio Helm chart 值覆盖来我们预期的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注入一个 pilot Pod 环境变量 &lt;code&gt;ROOT_CA_DIR&lt;/code&gt; 来告诉 &lt;em&gt;istiod&lt;/em&gt; 从哪里获取证书和私钥&lt;/li&gt;
&lt;li&gt;告诉 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器在 &lt;em&gt;istiod&lt;/em&gt; 容器之前运行，因此秘密安装在 &lt;code&gt;/vault/secrets&lt;/code&gt; 的卷中可用&lt;/li&gt;
&lt;li&gt;指示 Vault 注入器从正确的位置和数据密钥获取机密&lt;/li&gt;
&lt;li&gt;这样做时承担 Vault &lt;em&gt;istiod&lt;/em&gt; 角色&lt;/li&gt;
&lt;li&gt;覆盖默认的 Kubernetes auth-path，因为我们有多个集群&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;pilot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ROOT_CA_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/vault/secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podAnnotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-init-first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-ca-key.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-ca-key.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.ca_key }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-ca-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-ca-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.ca_cert }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-root-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-root-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.root_cert }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-cert-chain.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-cert-chain.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.cert_chain }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;istiod&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/auth-path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;auth/kubernetes-cluster1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当我们查看 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器日志时，我们应该看到类似这样的内容。我们的控制平面已经正确地获取了 Vault 注入的秘密。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml logs -n istio-system -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod -c vault-agent-init --tail&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;==&amp;gt; Vault agent started! Log data will stream in below:

  ==&amp;gt; Vault agent configuration:

                      Cgo: disabled
                Log Level: info
                  Version: Vault v1.12.0, built 2022-10-10T18:14:33Z
              Version Sha: 558abfa75702b5dab4c98e86b802fb9aef43b0eb

  2022-11-18T11:01:21.398Z [INFO]  sink.file: creating file sink
  2022-11-18T11:01:21.398Z [INFO]  sink.file: file sink configured: path=/home/vault/.vault-token mode=-rw-r-----
  2022-11-18T11:01:21.398Z [INFO]  template.server: starting template server
  2022-11-18T11:01:21.398Z [INFO]  sink.server: starting sink server
  2022-11-18T11:01:21.398Z [INFO]  auth.handler: starting auth handler
  2022-11-18T11:01:21.398Z [INFO]  auth.handler: authenticating
  2022-11-18T11:01:21.398Z [INFO] (runner) creating new runner (dry: false, once: false)
  2022-11-18T11:01:21.398Z [INFO] (runner) creating watcher
  2022-11-18T11:01:21.402Z [INFO]  auth.handler: authentication successful, sending token to sinks
  2022-11-18T11:01:21.402Z [INFO]  auth.handler: starting renewal process
  2022-11-18T11:01:21.402Z [INFO]  sink.file: token written: path=/home/vault/.vault-token
  2022-11-18T11:01:21.402Z [INFO]  sink.server: sink server stopped
  2022-11-18T11:01:21.402Z [INFO]  sinks finished, exiting
  2022-11-18T11:01:21.402Z [INFO]  template.server: template server received new token
  2022-11-18T11:01:21.402Z [INFO] (runner) stopping
  2022-11-18T11:01:21.402Z [INFO] (runner) creating new runner (dry: false, once: false)
  2022-11-18T11:01:21.402Z [INFO] (runner) creating watcher
  2022-11-18T11:01:21.402Z [INFO] (runner) starting
  2022-11-18T11:01:21.403Z [INFO]  auth.handler: renewed auth token
  2022-11-18T11:01:21.515Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/root-cert.pem&amp;#34;
  2022-11-18T11:01:21.515Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/ca-cert.pem&amp;#34;
  2022-11-18T11:01:21.515Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/cert-chain.pem&amp;#34;
  2022-11-18T11:01:21.516Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/ca-key.pem&amp;#34;
  2022-11-18T11:01:21.516Z [INFO] (runner) stopping
  2022-11-18T11:01:21.516Z [INFO]  template.server: template server stopped
  2022-11-18T11:01:21.516Z [INFO] (runner) received finish
  2022-11-18T11:01:21.516Z [INFO]  auth.handler: shutdown triggered, stopping lifetime watcher
  2022-11-18T11:01:21.516Z [INFO]  auth.handler: auth handler stopped
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我们查看 &lt;code&gt;discovery&lt;/code&gt; 容器日志时，我们应该看到如下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml logs -n istio-system -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod -c discovery --tail&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; info	Using istiod file format for signing ca files
  info	Use plugged-in cert at /vault/secrets/ca-key.pem
  info	x509 cert - Issuer: &amp;#34;CN=Intermediate CA,O=Istio,L=istiod-cluster1&amp;#34;, Subject: &amp;#34;&amp;#34;, SN: 39f67569f10d36a1fc91e9d82156b07d, NotBefore: &amp;#34;2022-11-18T11:11:59Z&amp;#34;, NotAfter: &amp;#34;2032-11-15T11:13:59Z&amp;#34;
  info	x509 cert - Issuer: &amp;#34;CN=Root CA,O=Istio&amp;#34;, Subject: &amp;#34;CN=Intermediate CA,O=Istio,L=istiod-cluster1&amp;#34;, SN: dedf298a147681d6, NotBefore: &amp;#34;2022-11-17T22:01:54Z&amp;#34;, NotAfter: &amp;#34;2024-11-16T22:01:54Z&amp;#34;
  info	x509 cert - Issuer: &amp;#34;CN=Root CA,O=Istio&amp;#34;, Subject: &amp;#34;CN=Root CA,O=Istio&amp;#34;, SN: f5bcd7e89bdb6248, NotBefore: &amp;#34;2022-11-17T22:01:52Z&amp;#34;, NotAfter: &amp;#34;2032-11-14T22:01:52Z&amp;#34;
  info	Istiod certificates are reloaded
  info	spiffe	Added 1 certs to trust domain cluster.local in peer cert verifier
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以看到我们的 Istio 控制平面已经正确地获取了我们的 Vault 注入证书和私钥。任务完成！&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;在本文中，我们已经使用外部 Vault 存储的证书和私钥成功引导了 Istio 控制平面。实现这一目标的步骤包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将证书和私钥存储在每个集群专用的 Vault 秘密安装路径中&lt;/li&gt;
&lt;li&gt;为每个集群设置 Kubernetes Vault 身份验证后端，链接到正确的 ServiceAccount&lt;/li&gt;
&lt;li&gt;定义适当的角色和策略以允许从 &lt;em&gt;istiod&lt;/em&gt; ServiceAccount 访问 Vault 机密&lt;/li&gt;
&lt;li&gt;将 Istio Pilot 引导程序参数调整为：
&lt;ul&gt;
&lt;li&gt;注入 &lt;em&gt;vault-agent-init&lt;/em&gt; sidecar&lt;/li&gt;
&lt;li&gt;获取包含我们的证书和私钥的正确 Vault 机密&lt;/li&gt;
&lt;li&gt;使用正确的角色和身份验证后端来这样做&lt;/li&gt;
&lt;li&gt;从正确的 vault secret 安装路径中获取证书和私钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以使用完全相同的技术来注入&lt;em&gt;入口网关&lt;/em&gt;和&lt;em&gt;出口网关&lt;/em&gt;证书。创建 Istio &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/gateway/#ServerTLSSettings&#34; title=&#34;Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway&lt;/a&gt; 对象时，请确保将 &lt;em&gt;serverCertificate&lt;/em&gt;、&lt;em&gt;privateKey&lt;/em&gt; 和 &lt;em&gt;caCertificates&lt;/em&gt; 指向 &lt;code&gt;/vault/secrets&lt;/code&gt; 挂载卷中的正确文件。我们将把它作为练习留给读者。&lt;/p&gt;
&lt;p&gt;通过将证书注入绑定到 Kubernetes ServiceAccount，我们现在已将证书生命周期管理委托给外部秘密 Vault 实例。现在可以使用专用角色和写入/更新策略创建服务门户或 CI/CD 管道等外部流程，以提供必要的证书生命周期管理安全性。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Kubernetes 安全的 6 大零信任原则</title>
      <link>https://jimmysong.io/trans/the-top-6-zero-trust-principles-for-kubernetes-security/</link>
      <pubDate>Tue, 13 Dec 2022 13:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/the-top-6-zero-trust-principles-for-kubernetes-security/</guid>
      <description>
        
        
        &lt;p&gt;传统的网络安全依赖于围绕可信内部网络的强大防御边界，以将不良行为者拒之门外，将敏感数据拒之门外。在日益复杂的网络环境中，维护强大的边界越来越困难。&lt;/p&gt;
&lt;p&gt;零信任安全正在成为企业保护其传统和现代云原生应用程序的首选方法。零信任网络架构颠覆了边界安全的假设。在零信任网络中，每个资源都在内部受到保护，就好像它暴露在开放的互联网中一样。&lt;/p&gt;
&lt;p&gt;为了为行业和美国联邦政府建立零信任安全指南，美国国家标准与技术研究院 (NIST) 在一系列出版物中建立了零信任安全指南，从 SP 800-207 开始，介绍一般的零信任架构及其配套&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; title=&#34;SP 800-204 微服务安全标准系列&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204 微服务安全标准系列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是 NIST 的核心零信任架构原则以及建议在实践中应用它们的 Kubernetes 和 Istio 参考架构。&lt;/p&gt;
&lt;h2 id=&#34;零信任网络的六项原则&#34;&gt;零信任网络的六项原则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;无论网络位置如何，所有通信都应该是安全的&lt;/strong&gt;。网络位置和可达性并不意味着信任。企业拥有或其他专用网络内部的访问请求必须满足与来自任何其他位置的通信相同的安全要求。零信任系统的一个标准是，您可以将它暴露在开放的互联网上，并且它仍然是安全的，没有未经授权的系统、数据或通信访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有通信都应加密&lt;/strong&gt;。线路上的加密可防止窃听，并确保消息真实且未被篡改。这意味着至少为所有通信实施 TLS，将&lt;a href=&#34;https://tetr8.io/3Na982k&#34; title=&#34;mTLS 和相关的安全工作负载身份作为服务间通信的最佳实践&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mTLS 和相关的安全工作负载身份作为服务间通信的最佳实践&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对每个资源的访问都应该根据动态策略进行身份验证和授权&lt;/strong&gt;。在允许任何访问之前，对服务身份和最终用户凭据进行动态身份验证和授权。访问请求的动态上下文应该是访问决策的一部分。这可能包括行为属性，如与观察到的使用模式的偏差或请求资产的状态，如安装的软件版本、网络位置和请求的时间 / 日期。授予访问权限时，应以所需的最低权限授予它。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对资源的访问应该在空间上有界&lt;/strong&gt;。围绕资源的信任范围应尽可能小 —— 理想情况下为零。访问应该由每个能够检索和执行访问决策的资源前面的策略执行点 (PEP) 进行调解。这应该适用于所有入站、出站和服务到服务的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应及时限制对资源的访问&lt;/strong&gt;。身份验证和授权绑定到一个短暂的会话，之后它们必须重新建立。这可确保频繁做出访问决策，并使用最新的可用上下文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对资源的访问应该是可观察的&lt;/strong&gt;。应收集并使用尽可能多的信息来改善安全态势。这允许持续监控所有资产的完整性和安全状况，并持续确保策略执行。此外，应反馈从观察中获得的见解以改进政策。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么零信任安全性更好&#34;&gt;为什么零信任安全性更好&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络可达性不是授权&lt;/strong&gt;。与边界安全性不同，对服务的访问不会仅仅因为该服务可访问而被授予。它也必须经过明确的身份验证和授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;周边突破口的有限爆炸半径可防止攻击者横向移动&lt;/strong&gt;。经过身份验证和授权的工作负载免受边界破坏。及时限制凭证泄露的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;细粒度策略&lt;/strong&gt;。空间边界允许高粒度的策略执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;频繁的政策评估&lt;/strong&gt;。通过在短期会话上执行动态策略来及时绑定可确保授权基于最新的策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全、真实的通信&lt;/strong&gt;。加密和强大的工作负载身份限制了侦察并提供了通信的真实性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全状况和合规性的实时和可审计保证&lt;/strong&gt;。细粒度的可观测性允许实时保证和政策实施的事后审计以及故障排除和分析所需的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何使用-istio-在-kubernetes-中实现零信任安全现代微服务应用程序的参考架构&#34;&gt;如何使用 Istio 在 Kubernetes 中实现零信任安全：现代微服务应用程序的参考架构&lt;/h2&gt;
&lt;p&gt;作为 NIST 的一般零信任架构标准的补充，NIST 还发布了如何将零信任原则专门应用于微服务应用程序的标准。这些标准由 Tetrate 创始工程师 Zack Butcher 共同编写，并编入&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; title=&#34;NIST 的 SP 800-204 系列&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST 的 SP 800-204 系列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在该标准中，NIST 建立了一个由 Kubernetes 组成的参考平台，用于编排和资源管理，并使用 Istio 服务网格提供核心安全功能。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-安全漏洞&#34;&gt;Kubernetes 安全漏洞&lt;/h2&gt;
&lt;p&gt;由于 Kubernetes 主要专注于编排、资源管理和基本连接，因此它将零信任网络安全问题留给其他方解决。Kubernetes 中的主要网络安全漏洞是（NIST SP 800-204B，§2.1.1）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下不安全的通信&lt;/li&gt;
&lt;li&gt;缺少在 pod 之间强制执行 TLS 所需的内置证书管理机制&lt;/li&gt;
&lt;li&gt;缺乏身份和访问管理机制&lt;/li&gt;
&lt;li&gt;在 OSI L3 而非 L7 运行的防火墙策略，因此无法窥视数据包或做出元数据驱动的决策&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格填补了-kubernetes-的安全漏洞微服务应用程序的安全内核&#34;&gt;服务网格填补了 Kubernetes 的安全漏洞：微服务应用程序的安全内核&lt;/h2&gt;
&lt;p&gt;为了增强 Kubernetes 的安全性，Istio 充当 NIST 参考架构中的安全内核。Istio 满足参考监视器的三个要求（NIST SP 800-204B，§5.1）。Istio 是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可旁路&lt;/li&gt;
&lt;li&gt;防止修改&lt;/li&gt;
&lt;li&gt;验证和测试是正确的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Envoy 数据平面通过每个服务前面以及每个入口和出口网关的不可绕过的策略执行点 (PEP) 提供参考监视器。服务网格代码独立于应用程序，因此它的生命周期可以独立管理，并且不能在运行时修改。而且，网格是系统的一个严格控制的元素，可以通过更多的眼睛和更仔细的检查来强化（NIST SP 800-204B，§5.1）。&lt;/p&gt;
&lt;p&gt;而且，作为专用的基础架构层，Istio 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决&lt;strong&gt;横切应用程序问题的&lt;/strong&gt;统一方法；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速解决这些问题的标准插件&lt;/strong&gt;和构建自定义插件的框架；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化&lt;/strong&gt;操作复杂性；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于管理&lt;/strong&gt;第三方开发人员和集成商；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;降低&lt;/strong&gt;开发和运营成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;要从联邦安全标准的合著者那里了解有关&lt;strong&gt;如何实施零信任架构的更多信息，&lt;/strong&gt;&lt;a href=&#34;https://tetr8.io/zta-wp&#34; title=&#34;请阅读 Zack Butcher 的零信任架构白皮书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请阅读 Zack Butcher 的零信任架构白皮书&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;有关 NIST 安全建议的深入指南以及 Tetrate 如何帮助您实施该标准，请查看&lt;a href=&#34;https://tetr8.io/3Ccg6Qt&#34; title=&#34;Tetrate 的微服务联邦安全要求指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 的微服务联邦安全要求指南&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您正在寻找使用 Istio 投入生产的最快方式，请查看我们的开源&lt;a href=&#34;https://istio.tetratelabs.io/&#34; title=&#34;Tetrate Istio Distro (TID)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro (TID)&lt;/a&gt;。TID 是经过审查的 Istio 上游发行版 ——Istio 的强化映像，具有持续支持，更易于安装、管理和升级。对于在联邦监管环境中运营的组织，Tetrate Istio Distro 是唯一&lt;a href=&#34;https://istio.tetratelabs.io/fips-request/&#34; title=&#34;具有可用 FIPS 验证构建&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;具有可用 FIPS 验证构建&lt;/a&gt;的 Istio 发行版。&lt;/p&gt;
&lt;p&gt;如果您需要一种统一且一致的方式来保护和管理一系列应用程序中的服务，请查看 &lt;a href=&#34;https://tetrate.io/tetrate-service-bridge/&#34; title=&#34;Tetrate Service Bridge (TSB)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge (TSB)&lt;/a&gt;，这是我们基于 Istio 和 Envoy 构建的全面的边缘到工作负载应用程序连接平台。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>零信任 Kubernetes 安全的三大 mTLS 最佳实践</title>
      <link>https://jimmysong.io/trans/top-3-mtls-best-practices-for-zero-trust-kubernetes-security/</link>
      <pubDate>Tue, 13 Dec 2022 10:00:00 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/top-3-mtls-best-practices-for-zero-trust-kubernetes-security/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 是编排现代云原生工作负载的事实标准。但是，它不提供开箱即用的安全通信。这意味着每个需要实施传输中加密以对其 Kubernetes 部署&lt;a href=&#34;https://tetr8.io/3FCXsDn&#34; title=&#34;采用零信任安全态势的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;采用零信任安全态势的&lt;/a&gt;人都需要自己解决这个问题。&lt;/p&gt;
&lt;p&gt;幸运的是，有很多易于理解的方法可以实现，在本文中，我们将介绍在 Kubernetes 中实现双向 TLS（mTLS）的三大最佳实践。&lt;/p&gt;
&lt;h2 id=&#34;什么是-mtls为什么对安全来说很重要&#34;&gt;什么是 mTLS，为什么对安全来说很重要？&lt;/h2&gt;
&lt;p&gt;传输层安全性（SSL 的后继者）是部署最广泛的安全通信标准，在 HTTPS 中最为明显。TLS 非常适合在需要向客户端证明其身份的服务器之间建立既保密（防窃听）又真实（防篡改）的安全通信。但是，在双方都需要向对方证明身份的情况下（例如在 Kubernetes 应用程序中的微服务之间），TLS 是不够的。&lt;/p&gt;
&lt;p&gt;这就是双向 TLS (mTLS) 的用武之地。mTLS 是 TLS，但双方在建立安全通信通道之前向对方证明自己的身份。这是 Kubernetes 中安全通信所需的必要部分。mTLS 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在线加密以确保机密性和防篡改&lt;/li&gt;
&lt;li&gt;相互的、加密的安全身份证明以确保真实性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要深入了解 mTLS 的工作原理，请参阅我们关于 &lt;a href=&#34;https://tetr8.io/3NEcL0Q&#34; title=&#34;mTLS 的文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mTLS 的文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;mtls-的困难部分证明身份&#34;&gt;mTLS 的困难部分：证明身份&lt;/h2&gt;
&lt;p&gt;困难的部分是为服务建立一个安全机制来向彼此证明它们的身份。&lt;/p&gt;
&lt;p&gt;对于常规 TLS，过去很难管理向其客户端证明服务器身份的证书。&lt;a href=&#34;https://letsencrypt.org/&#34; title=&#34;随着 Let&amp;amp;rsquo;s Encrypt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;随着 Let&amp;rsquo;s Encrypt&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34; title=&#34;ACME 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ACME 协议&lt;/a&gt;的出现，这变得容易多了。然而，在像 Kubernetes 这样的动态（并且主要是私有的）环境中管理服务身份和证书更加困难，因为有许多通常是短暂的服务需要强大的、可证明的身份，但实际上不能使用公共 ACME 服务。&lt;/p&gt;
&lt;p&gt;推出自己的自动化证书管理系统是不切实际且有风险的。正确管理 mTLS 证书很困难，错误的后果很严重。您需要一种可信赖的、经过验证的方法来做到这一点；这就是服务网格的用武之地。&lt;/p&gt;
&lt;h2 id=&#34;使用服务网格nist-微服务安全标准&#34;&gt;使用服务网格，NIST 微服务安全标准&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; title=&#34;微服务安全标准&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务安全标准&lt;/a&gt;中，美国国家标准与技术研究院 (NIST) 建议使用服务网格作为专用基础设施层来提供核心网络安全功能。这些核心功能之一是支持 mTLS 的强大服务身份和证书管理。而且，Istio——&lt;a href=&#34;https://tetr8.io/3UsARgY&#34; title=&#34;使用最广泛的服务网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用最广泛的服务网格&lt;/a&gt;—— 为您提供开箱即用的 mTLS 支持。Istio 透明地提供基础设施 —— 包括安全命名、强大的服务身份和证书管理 —— 用于 Kubernetes 工作负载之间的安全通信以及与外界的连接。&lt;/p&gt;
&lt;p&gt;如果您想详细了解 NIST 的微服务安全标准以及 Tetrate 如何帮助满足这些标准，请查看 &lt;a href=&#34;https://tetr8.io/3Ccg6Qt&#34; title=&#34;Tetrate 的微服务联邦安全要求指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 的微服务联邦安全要求指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践一不要使用自签名证书&#34;&gt;最佳实践一：不要使用自签名证书&lt;/h2&gt;
&lt;p&gt;虽然 Istio 将为您实施 mTLS，但它默认使用自签名证书，因此您可以立即看到网格工作，只需最少的配置。这使得初始用户体验变得简单，但它并非不适合生产环境。NIST 的指南（NIST SP 800-204A，SM-DR12）是完全禁用生成自签名证书的能力。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践二将-istio-的信任根植于现有-pki&#34;&gt;最佳实践二：将 Istio 的信任根植于现有 PKI&lt;/h2&gt;
&lt;p&gt;如果不应该使用 Istio 的默认自签名证书，还有什么选择？简短的回答是，您应该 &lt;a href=&#34;https://tetr8.io/3DDcAOJ&#34; title=&#34;将 Istio 的信任根植于您现有的公钥基础设施 (PKI) 中&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 Istio 的信任根植于您现有的公钥基础设施 (PKI) 中&lt;/a&gt;。这将通过确保它们都具有相同的信任根来实现跨其他集群中的 Istio 部署的通信。观看我们关于 &lt;a href=&#34;https://www.youtube.com/watch?v=4b3H7isIAnQ&#34; title=&#34;使用 Istio 的外部 CA 的视频，了解更多信息&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Istio 的外部 CA 的视频，了解更多信息&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践三使用中间证书&#34;&gt;最佳实践三：使用中间证书&lt;/h2&gt;
&lt;p&gt;确切地说，您如何让 Istio 信任您现有的 PKI？Tetrate 的创始工程师和 NIST 微服务安全标准的合著者 Zack Butcher &lt;a href=&#34;https://tetr8.io/3DDcAOJ&#34; title=&#34;在此处提供了所有详细信息&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处提供了所有详细信息&lt;/a&gt;。但是，简而言之，我们的建议是使用您组织的根证书颁发机构颁发的中间证书。这将：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许细粒度的证书撤销，而无需同时在整个基础架构中强制使用新证书。&lt;/li&gt;
&lt;li&gt;启用签名证书的轻松轮换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关如何自动化 Istio 证书颁发机构 (CA) 轮换的分步说明，请参阅我们关于 &lt;a href=&#34;https://tetrate.io/blog/automate-istio-ca-rotation-in-production-at-scale/&#34; title=&#34;在大规模生产中自动化 Istio CA 轮换的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在大规模生产中自动化 Istio CA 轮换的&lt;/a&gt;文章。&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;p&gt;如果您不熟悉服务网格和 Kubernetes 安全性，我们在 &lt;a href=&#34;https://tetr8.io/academy&#34; title=&#34;Tetrate Academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Academy&lt;/a&gt; 提供一系列免费在线课程，可以让您快速了解 Istio 和 Envoy。&lt;/p&gt;
&lt;p&gt;如果您正在寻找一种快速将 Istio 投入生产的方法，请查看 &lt;a href=&#34;https://tetr8.io/tid&#34; title=&#34;Tetrate Istio Distribution (TID)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distribution (TID)&lt;/a&gt;。TID 是 Tetrate 的强化、完全上游的 Istio 发行版，具有经过 FIPS 验证的构建和支持。这是开始使用 Istio 的好方法，因为您知道您有一个值得信赖的发行版，有一个支持您的专家团队，并且如果需要，还可以选择快速获得 FIPS 合规性。&lt;/p&gt;
&lt;p&gt;一旦启动并运行 Istio，您可能需要更简单的方法来管理和保护您的服务，而不仅仅是 Istio 中可用的方法，这就是 Tetrate Service Bridge 的用武之地。您可以&lt;a href=&#34;https://tetr8.io/tsb&#34; title=&#34;在这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;详细了解 Tetrate Service Bridge 如何使服务网格更安全、更易于管理和弹性，或&lt;a href=&#34;https://tetr8.io/contact&#34; title=&#34;联系我们进行快速演示&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们进行快速演示&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;更多资源&#34;&gt;更多资源&lt;/h2&gt;
&lt;p&gt;观看我们的视频：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4b3H7isIAnQ&#34; title=&#34;使用 Istio 的外部 CA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Istio 的外部 CA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nYJJ57WCkxE&#34; title=&#34;Istio Ingress Gateway 中的 SSL 证书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Ingress Gateway 中的 SSL 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o8AnLk4Da7M&#34; title=&#34;如何将服务网格用于混合云和遗留工作负载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何将服务网格用于混合云和遗留工作负载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mHR7rR83KjM&#34; title=&#34;如何将 VM 工作负载连接到网格&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何将 VM 工作负载连接到网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=E_D4bjvX8Xw&amp;amp;t=2s&#34; title=&#34;Tetrate 如何帮助美国国防部将 Istio 用于零信任架构&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 如何帮助美国国防部将 Istio 用于零信任架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>如何理解 Istio 中的 mTLS 流量加密？</title>
      <link>https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/</link>
      <pubDate>Mon, 28 Nov 2022 11:09:40 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/</guid>
      <description>
        
        
        &lt;p&gt;Istio 服务网格可以帮助云原生应用实现自动 mTLS，完成网格内的流量加密，有助于缩小云原生部署的攻击面，是构建零信任应用网络的关键框架。为了理解 Istio 中的 mTLS 流量加密，本文将包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍什么是 TLS、mTLS 和 TLS 终止&lt;/li&gt;
&lt;li&gt;介绍 Istio 中如何实现 TLS 加密&lt;/li&gt;
&lt;li&gt;如何使用 Istio 为 Kubernetes 中的服务实现 mTLS？&lt;/li&gt;
&lt;li&gt;何时需要 mTLS？何时不需要 mTLS？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-is-tls-and-mtls&#34;&gt;什么是 TLS 和 mTLS？&lt;/h2&gt;
&lt;p&gt;TLS（Transport Layer Security，传输层安全性）是一种广泛采用的安全协议，用于在联网计算机之间建立经过身份验证和加密的链接，旨在促进互联网通信的私密性和数据安全性。TLS 作为 &lt;a href=&#34;https://www.ssl.com/faqs/faq-what-is-ssl/&#34; title=&#34;SSL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSL&lt;/a&gt;（Secure Socket Layer，安全套接字层）的继任者，实际上是由 SSL 改名而来，因此人们经常将 TLS/SSL 混用，在本文中我们将统称为 TLS。TLS 1.0 发布于 1999 年，最新版本为 1.3（发布于 2018 年 8 月），1.0 和 1.1 版本已弃用。&lt;/p&gt;
&lt;p&gt;我们在浏览网页时看到的 HTTPS 实际上就使用了 TLS，如下图所示。TLS 是建立在 TCP 之上的，作为 OSI 模型中的会话层。为了保证兼容性，TLS 通常使用 443 端口，但是你也可以使用任意端口。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/http-vs-https.svg&#34; data-img=&#34;/blog/understanding-the-tls-encryption-in-istio/http-vs-https.svg&#34; alt=&#34;image&#34; data-caption=&#34;HTTP vs HTTPS&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;HTTP vs HTTPS&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当客户端需要验证服务端身份，以防中间人攻击同时保证通信安全的情况下，在和服务端通信时会要求 TLS 加密。下图展示了的是 TLS 加密通信的流程。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/tls-flow.svg&#34; data-img=&#34;/blog/understanding-the-tls-encryption-in-istio/tls-flow.svg&#34; alt=&#34;image&#34; data-caption=&#34;TLS 加密通信流程&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;TLS 加密通信流程&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;服务器向受信任的 CA（证书管理机构）申请并获得证书（X.509 证书）；&lt;/li&gt;
&lt;li&gt;客户端向服务端发起请求，其中包含客户端支持的 TLS 版本和密码组合等信息；&lt;/li&gt;
&lt;li&gt;服务器回应客户端请求并附上数字证书；&lt;/li&gt;
&lt;li&gt;客户端验证证书的状态、有效期和数字签名等信息，确认服务器的身份；&lt;/li&gt;
&lt;li&gt;客户端和服务器使用共享秘钥实现加密通信；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上仅是对 TLS 通信流程的一个概要描述，实际的 TLS 握手过程比较复杂，请参考&lt;a href=&#34;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&#34; title=&#34;这篇文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;从以上过程中你会发现，证书是代表服务器身份的关键要素，对于互联网公开服务，服务器需要使用权威认证的 CA 颁发的证书，而对于私有环境内部的服务，可以使用 PKI（Private Key Infrastructure，私钥基础设施）来管理证书。&lt;/p&gt;
&lt;p&gt;双向 TLS 或相互 TLS（Mutual TLS 或 mTLS）是指在服务端和客户端之间使用双向加密通道，需要双方相互提供证书并验证对方身份。关于如何在 Kubernetes 中使用 mTLS 请参考&lt;a href=&#34;https://cloudnative.to/blog/mtls-guide/&#34; title=&#34;这篇文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文章&lt;/a&gt;。关于 mTLS 的详细介绍请见&lt;a href=&#34;https://www.cloudflare.com/zh-cn/learning/access-management/what-is-mutual-tls/&#34; title=&#34;这篇文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;what-is-tls-termination&#34;&gt;什么是 TLS 终止？&lt;/h2&gt;
&lt;p&gt;TLS 终止（TLS Termination）指的是在将 TLS 加密流量传递给 Web 服务器之前对其进行解密的过程。将 TLS 流量卸载到入口网关或专用设备上，可以提高 Web 应用的性能，同时确保加密流量的安全性。一般运行在集群入口处，当流量到达入口处时实施 TLS 终止，入口与集群内服务器之间的通信将直接使用 HTTP 明文，这样可以提高服务性能。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/tls-termination.svg&#34; data-img=&#34;/blog/understanding-the-tls-encryption-in-istio/tls-termination.svg&#34; alt=&#34;image&#34; data-caption=&#34;TLS 终止&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;TLS 终止&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Istio 默认在入口网关处终止 TLS，然后再为网格内的服务开启 mTLS。你也可以让流量直通（passthrough）到后端服务处理，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sample-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PASSTHROUGH&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;详见&lt;a href=&#34;https://istio.io/latest/zh/docs/ops/configuration/traffic-management/tls-configuration/#gateways&#34; title=&#34;网关 TLS  配置&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网关 TLS  配置&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;istio-mtls&#34;&gt;Istio 中如何实现自动 mTLS？&lt;/h2&gt;
&lt;p&gt;下图中展示的是 Istio 安全架构图，从图中可以看到在入口处使用 JWS + TLS 认证和加密，在 Istio 网格内部的所有服务间都开启了 mTLS。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/blog/understanding-the-tls-encryption-in-istio/istio-security.svg&#34; data-img=&#34;/blog/understanding-the-tls-encryption-in-istio/istio-security.svg&#34; alt=&#34;image&#34; data-caption=&#34;Istio 安全架构图&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio 安全架构图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Istio 中内置了 CA，使用 xDS 中的 SDS（Secret Discovery Service，秘密发现服务）实现 SVID 证书的签发和轮换。Istio 网格内的 mTLS 流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sidecar 代替工作负载向 Istiod 申请证书，Istiod 签发 &lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/spiffe/#svid&#34; title=&#34;SVID&#34;&gt;SVID&lt;/a&gt; 证书（该过程比较复杂，我将在今后的博客中说明）；&lt;/li&gt;
&lt;li&gt;客户端请求被 Pod 内的 sidecar 拦截；&lt;/li&gt;
&lt;li&gt;客户端 sidecar 与服务端 sidecar 开始 mTLS 握手。在握手的同时，客户端 sidecar 中的 JWT 和认证过滤器将对请求的身份进行认证，认证通过后将身份存储在过滤器元数据中，然后请求经过授权过滤器，判断请求权限。&lt;/li&gt;
&lt;li&gt;若请求通过了认证与授权，则客户端和服务端开始建立连接进行通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio 中有三个资源对象可用于配置服务间的认证与授权：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RequestAuthentication&lt;/code&gt;：用于定义服务支持的请求级认证方式，目前只支持  JWT（&lt;a href=&#34;https://cloudnative.to/blog/jwt-components-explained/&#34; title=&#34;查看 JWT 组件详解&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;查看 JWT 组件详解&lt;/a&gt;）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PeerAuthentication&lt;/code&gt;：配置服务间的传输认证模式，如 &lt;code&gt;STRICT&lt;/code&gt;、&lt;code&gt;PERMISSIVE&lt;/code&gt; 或 &lt;code&gt;DISABLE&lt;/code&gt; 等，以开启 mTLS 或明文请求；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AuthorizationPolicy&lt;/code&gt;：用于授权服务间的流量，定义谁可以做什么？例如主体 A 允许（&lt;code&gt;ALLOW&lt;/code&gt;）或拒绝（&lt;code&gt;DENY&lt;/code&gt;）来自主体 B 的流量；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-setup-mtls&#34;&gt;如何使用 Istio 为服务开启自动 mTLS？&lt;/h2&gt;
&lt;p&gt;你可以在 &lt;code&gt;PeerAuthentication&lt;/code&gt; 中指定对目标工作负载实施的 mTLS 模式。对等认证支持以下模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PERMISSIVE&lt;/code&gt;：默认值，工作负载可接受双向 TLS 或纯文本流量；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STRICT&lt;/code&gt;：工作负载仅接受 mTLS 流量；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;：禁用 mTLS。从安全角度来看，除非你有自己的安全解决方案，否则不应禁用 mTLS；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNSET&lt;/code&gt;：从父级继承，优先级为服务特定 &amp;gt; 命名空间范围 &amp;gt; 网格范围的设置；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 的对等认证默认使用 &lt;code&gt;PERMISSIVE&lt;/code&gt; 模式，自动将 mTLS 流量发送到这些工作负载，将纯文本流量发送到没有 sidecar 的工作负载。在将 Kubernetes 服务纳入 Istio 网格后，为了防止服务无法通过 mTLS，我们可以先使用 &lt;code&gt;PERMISSIVE&lt;/code&gt; 模式。当我想为某些服务开启严格的 mTLS 模式时，可以使用以下两种方式之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;PeerAuthentication&lt;/code&gt; 定义流量如何在 sidecar 之间传输；&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;DestinationRule&lt;/code&gt; 定义流量路由策略中的 TLS 设置；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面以为 &lt;code&gt;default&lt;/code&gt; 命名空间下的 &lt;code&gt;reviews&lt;/code&gt; 服务设置 mTLS 为例说明。&lt;/p&gt;
&lt;h3 id=&#34;peerauthentication-tls-setting&#34;&gt;使用 PeerAuthentication 为工作负载设置 mTLS&lt;/h3&gt;
&lt;p&gt;你可以使用 &lt;code&gt;namespace&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 指定某个命名空间下的某个工作负载开启严格的 mTLS。例如下面的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PeerAuthentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo-peer-policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mtls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STRICT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以给安装 Istio  的命名空间 &lt;code&gt;istio-system&lt;/code&gt; 设置严格的 mTLS，那样会为网格中的所有服务开启严格的 mTLS，详细步骤请参考 &lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/authentication/mtls-migration/&#34; title=&#34;Istio 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;destinationrule-tls-setting&#34;&gt;使用 DestinationRule 为工作负载设置 mTLS&lt;/h3&gt;
&lt;p&gt;DestinationRule 用于设置流量路由策略，例如负载均衡、异常点检测、TLS 设置等。其中 TLS 设置中包含&lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/destination-rule/#ClientTLSSettings-TLSmode&#34; title=&#34;多种模式&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多种模式&lt;/a&gt;，使用 &lt;code&gt;ISTIO_MUTUAL&lt;/code&gt; 模式可以为工作负载开启 Istio 的自动 TLS，如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ISTIO_MUTUAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;when-use-mtls&#34;&gt;什么时候用 mTLS？&lt;/h2&gt;
&lt;p&gt;互联网客户端对 Web 服务的访问，一般使用单向 TLS，即只需要服务端提供身份证明，而不关心客户端的身份。当你需要验证客户端身份时，使用单向 TLS 可以使用密码、token、双因子认证等方式。不过这样的认证方式需要应用程序内部支持，而双向 TLS 是运行在应用程序之外的，不需要多应用逻辑进行修改。&lt;/p&gt;
&lt;p&gt;当你需要正如你在上文中看到的，实施 mTLS 的服务间需要交换证书，当服务数量变大时，就需要管理大量的证书，这需要消耗大量的精力，使用服务网格可以帮助你实现自动 mTLS，彻底解决证书管理的难题。&lt;/p&gt;
&lt;h2 id=&#34;when-not-use-mtls&#34;&gt;什么时候不用 mTLS？&lt;/h2&gt;
&lt;p&gt;虽然 mTLS 是确保云原生应用程序服务间通信安全的首选协议，但是应用 mTLS 需要完成复杂的对称加密、解密过程，这将非常耗时且消耗大量的 CPU 资源。对于某些安全级别不高的流量，如果我们在流量入口处终止 TLS，并网格内部仅对针对性的服务开启 mTLS，就可以加快请求响应和减少计算资源消耗。&lt;/p&gt;
&lt;p&gt;另外当有的服务无法获取证书，例如 Kubelet 上使用 HTTP 的健康检查，无法通过 TLS 访问服务内的健康检查端点，这时候就需要&lt;a href=&#34;https://istio.io/latest/zh/docs/ops/configuration/mesh/app-health-check/#disable-the-http-probe-rewrite-for-a-pod&#34; title=&#34;为 Pod 禁用探针重写&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为 Pod 禁用探针重写&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后当网格中的服务访问一些外部服务时，也不需要 mTLS。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;mTLS 实现了网格内流量的加密，是构建零信任应用网络的关键一步。借助 Istio 我们可以很方便的为 Kubernetes 中的服务开启自动 mTLS，省去管理证书的麻烦。同时，我们也可以针对性的为网格内的部分服务开启 mTLS，便于我们将 Kubernetes 中的服务迁移到网格内。关于 Istio 中的证书管理，我们将在今后的博客中再做说明。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/zh-cn/learning/ssl/transport-layer-security-tls/&#34; title=&#34;什么是 TLS（传输层安全性）？- cloudflare.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;什么是 TLS（传输层安全性）？- cloudflare.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/zh-cn/learning/access-management/what-is-mutual-tls/&#34; title=&#34;什么是相互 TLS（mTLS）？- cloudflare.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;什么是相互 TLS（mTLS）？- cloudflare.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&#34; title=&#34;What happens in a TLS handshake? | SSL handshake - cloudflare.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What happens in a TLS handshake? | SSL handshake - cloudflare.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/mtls-guide/&#34; title=&#34;写给 Kubernetes 工程师的 mTLS 指南 - jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;写给 Kubernetes 工程师的 mTLS 指南 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cncf/tag-security/blob/main/security-whitepaper/v1/cloud-native-security-whitepaper-simplified-chinese.md&#34; title=&#34;云原生安全白皮书中文版 - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生安全白皮书中文版 - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/concepts/security/&#34; title=&#34;Istio 安全 - istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 安全 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/jwt-components-explained/&#34; title=&#34;JWT 组件详解 - jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWT 组件详解 - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>如何在 Istio 中集成 SPIRE？</title>
      <link>https://jimmysong.io/blog/how-to-integrate-spire-with-istio/</link>
      <pubDate>Thu, 30 Jun 2022 18:27:49 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/how-to-integrate-spire-with-istio/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    读者须知
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    SPIRE 支持是 Istio 1.14 的新特性，请确保安装 1.14 及以上版本的 Istio。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;SPIRE 是 SPIFFE 规范的一个生产就绪的实现，它可以执行节点和工作负载证明，以便安全地将加密身份发给在异构环境中运行的工作负载。通过与 Envoy 的 SDS API 集成，SPIRE 可以被配置为 Istio 工作负载的加密身份来源。Istio 可以检测到 UNIX 域套接字的存在，该套接字在定义的套接字路径上实现了 Envoy SDS API，允许 Envoy 直接从它那里进行通信和获取身份。&lt;/p&gt;
&lt;p&gt;我在&lt;a href=&#34;https://jimmysong.io/blog/why-istio-need-spire/&#34; title=&#34;上一篇文章&#34;&gt;上一篇文章&lt;/a&gt;中介绍了为什么 Istio 要使用 SPIRE 做身份认证，在这篇博客中我将为你介绍如何在 Istio 中集成 SPIRE。&lt;/p&gt;
&lt;h2 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h2&gt;
&lt;p&gt;到 &lt;a href=&#34;https://github.com/istio/istio/releases&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; 上下载 Istio 安装包，解压后，建议使用 &lt;code&gt;istioctl&lt;/code&gt; 安装 Istio。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl install --set &lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你安装了低于 1.14 版本的 Istio，请先升级 Istio。&lt;/p&gt;
&lt;h2 id=&#34;安装-spire&#34;&gt;安装 SPIRE&lt;/h2&gt;
&lt;p&gt;我们使用 Istio 提供的快速安装方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f samples/security/spire/spire-quickstart.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将安装以下组件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace/spire created
csidriver.storage.k8s.io/csi.spiffe.io created
customresourcedefinition.apiextensions.k8s.io/spiffeids.spiffeid.spiffe.io created
clusterrolebinding.rbac.authorization.k8s.io/k8s-workload-registrar-role-binding created
clusterrole.rbac.authorization.k8s.io/k8s-workload-registrar-role created
configmap/k8s-workload-registrar created
serviceaccount/spire-server created
configmap/trust-bundle created
clusterrole.rbac.authorization.k8s.io/spire-server-trust-role created
clusterrolebinding.rbac.authorization.k8s.io/spire-server-trust-role-binding created
configmap/spire-server created
statefulset.apps/spire-server created
service/spire-server created
serviceaccount/spire-agent created
clusterrole.rbac.authorization.k8s.io/spire-agent-cluster-role created
clusterrolebinding.rbac.authorization.k8s.io/spire-agent-cluster-role-binding created
configmap/spire-agent created
daemonset.apps/spire-agent created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要给打 patch，这是为了让所有 sidecar 和 Ingress 都可以共享  SPIRE agent 的 UNIX Domain Socket。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;istioctl install --skip-confirmation -f - &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IstioOperator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trustDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;global&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This is used to customize the sidecar template&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sidecarInjectorWebhook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;templates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            containers:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            - name: istio-proxy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              volumeMounts:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              - name: workload-socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                mountPath: /run/secrets/workload-spiffe-uds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                readOnly: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            volumes:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              - name: workload-socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                csi:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  driver: &amp;#34;csi.spiffe.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingressGateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.template.spec.volumes.[name:workload-socket]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;csi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;csi.spiffe.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.template.spec.containers.[name:istio-proxy].volumeMounts.[name:workload-socket]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/secrets/workload-spiffe-uds&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装好 Istio 和 SPIRE 后，我们就可以注册负载了。&lt;/p&gt;
&lt;h2 id=&#34;自动注册-kubernetes-负载&#34;&gt;自动注册 Kubernetes 负载&lt;/h2&gt;
&lt;p&gt;在快速安装 SPIRE 的时候，我们已经安装了 SPRIE &lt;a href=&#34;https://github.com/spiffe/spire/blob/main/support/k8s/k8s-workload-registrar/README.md&#34; title=&#34;Kubernetes Workload Registrar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Workload Registrar&lt;/a&gt;，也就是说我们已经开启自动负载注册。现在检查一下 SPIRE 是否给负载颁发了身份证明。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -i -t spire-server-0 -n spire -c spire-server -- /bin/sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;bin/spire-server entry show -socketPath /run/spire/sockets/server.sock&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将看到例如下面这样的结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 3f17c8be-1379-4b7c-9a01-90805165d59f
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://example.org/k8s-workload-registrar/demo-cluster/node/gke-jimmy-cluster-default-pool-d5041909-3atb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://example.org/spire/server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL              : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s_psat:agent_node_uid:cbab5123-b32f-49d0-89f2-0a7e4d2b0edd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s_psat:cluster:demo-cluster
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Ingress gateway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : ffc76b2e-e602-4ad3-8069-993ffbf4440e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://example.org/ns/istio-system/sa/istio-ingressgateway-service-account
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://example.org/k8s-workload-registrar/demo-cluster/node/gke-jimmy-cluster-default-pool-d5041909-0ucb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL              : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:node-name:gke-jimmy-cluster-default-pool-d5041909-0ucb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:ns:istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:pod-uid:be32b10a-b5a4-4716-adaf-eab778f58c13
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : istio-ingressgateway-6989cbc776-87qb6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : istio-ingressgateway.istio-system.svc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# SPIRE Server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 54444848-95ec-4b4d-a7c5-902a4049c96a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://example.org/ns/spire/sa/spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://example.org/k8s-workload-registrar/demo-cluster/node/gke-jimmy-cluster-default-pool-d5041909-0ucb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL              : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:node-name:gke-jimmy-cluster-default-pool-d5041909-0ucb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:ns:spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:pod-uid:4917defc-9b5a-42d8-9b98-c0e0a48c0313
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : spire-server-0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : spire-server.spire.svc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个 node 的 parent ID 是 &lt;code&gt;spiffe://example.org/ns/spire/sa/spire-server&lt;/code&gt;，而 &lt;code&gt;spiffe://example.org/ns/spire/sa/spire-server&lt;/code&gt; 的 parent 是 &lt;code&gt;spiffe://example.org/k8s-workload-registrar/demo-cluster/node/gke-jimmy-cluster-default-pool-d5041909-0ucb&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;也就是说工作负载的层级是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SPIRE Server：&lt;code&gt;spiffe://example.org/spire/server&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 节点：&lt;code&gt;spiffe://example.org/k8s-workload-registrar/demo-cluster/node/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;普通服务账户：&lt;code&gt;spiffe://example.org/{namespace}/spire/sa/{service_acount}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SPIRE 通过标签选择器选择工作负载，为它们创建 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;工作负载的 SPIFEE ID 格式为 &lt;code&gt;spiffe://&amp;lt;trust.domain&amp;gt;/ns/&amp;lt;namespace&amp;gt;/sa/&amp;lt;service-account&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;部署应用&#34;&gt;部署应用&lt;/h2&gt;
&lt;p&gt;下面我们部署一个应用，然后检查下 SPIRE 为该应提供的身份。&lt;/p&gt;
&lt;p&gt;使用下面的命令部署 Istio 提供的示例应用 &lt;code&gt;sleep&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl kube-inject --filename samples/security/spire/sleep-spire.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为我们在安装 Istio 的时候打了补丁，做了 SPIRE 自动注入，然后所有 pod 都会共享 SPIRE Agent 中的 UNIX Domain Socket：&lt;code&gt;/run/secrets/workload-spiffe-uds/socket&lt;/code&gt;。获取正在运行的 &lt;code&gt;sleep&lt;/code&gt; pod 的 YAML，我们可以看到其中有 volume 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;csi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;csi.spiffe.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及 &lt;code&gt;volumeMounts&lt;/code&gt; 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/run/secrets/workload-spiffe-uds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/run/secrets/workload-spiffe-uds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-certs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/run/secrets/workload-spiffe-credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod-ca-cert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这都证实了 SPRIE Agent 与工作负载 pod 共享 UNIX Domain Socket。&lt;/p&gt;
&lt;p&gt;我们再查询下 Kubernetes 集群中的 SPIRE 条目，你将可以看到 sleep 的条目已注册。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Entry ID         : bd4457af-c55c-4d8c-aee2-4d477a79b465
SPIFFE ID        : spiffe://example.org/ns/default/sa/sleep
Parent ID        : spiffe://example.org/k8s-workload-registrar/demo-cluster/node/gke-jimmy-cluster-default-pool-d5041909-3atb
Revision         : 1
TTL              : default
Selector         : k8s:node-name:gke-jimmy-cluster-default-pool-d5041909-3atb
Selector         : k8s:ns:default
Selector         : k8s:pod-uid:81f116ce-6538-4492-a78a-98b163b58310
DNS name         : sleep-9df96d88-tvl49
DNS name         : sleep.default.svc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再检查下 sleep 的 SVID。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config secret &lt;span class=&#34;nv&#34;&gt;$SLEEP_POD&lt;/span&gt; -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; chain.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这条命令获取 sleep pod 中 Envoy 的 secret 并解析其中的 TLS 证书，将其 base64 解码后保存到 &lt;code&gt;chain.pem&lt;/code&gt; 文件中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -in chain.pem -text &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep SPIRE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 OpenSSL 解析其中的发行商，将得到如下的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Subject: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;US, &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;SPIRE, &lt;span class=&#34;nv&#34;&gt;CN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sleep-9df96d88-tvl49
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SPIFFE 还支持联邦，你可以为 SPIRE Agent SDS 配置 bundle，还需要为 pod 增加注解 &lt;code&gt;spiffe.io/federatesWith: &amp;quot;&amp;lt;trust.domain&amp;gt;&amp;quot;&lt;/code&gt;，然后 Envoy 就会向 SPRIE Server 获取 bundle 了，详细步骤请参考 &lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#verifying-that-identities-were-created-for-workloads&#34; title=&#34;Istio 官方文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以上就是在 Istio 中集成 SPIRE 的全过程。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/&#34; title=&#34;SPIRE -istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE -istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>什么是零信任？</title>
      <link>https://jimmysong.io/blog/what-is-zero-trust/</link>
      <pubDate>Wed, 22 Jun 2022 20:27:49 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/what-is-zero-trust/</guid>
      <description>
        
        
        &lt;p&gt;零信任（Zero Trust）是一种安全理念，而不是一种所有安全团队都要遵循的最佳实践。零信任概念的提出是为了给云原生世界带来更安全的网络。零信任是一种理论状态，即网络内的所有消费者都不仅没有任何权限，而且也不具备对周围网络的感知。&lt;/p&gt;
&lt;h2 id=&#34;零信任的基础&#34;&gt;零信任的基础&lt;/h2&gt;
&lt;p&gt;零信任网络中的所有用户，包括机器和人类，都需要通过一个密码学验证的身份。要是实践零信任，需要从引入用户身份开始，然后考虑限制用户的最小访问权限。零信任实践的基础是认证和授权，这是比起传统的安全策略来说，零信任中的认证变得更加严格，而授权将变得更加细化。举个例子，传统的授权是：“用户 A 可以访问数据中心 D 吗”，而在零信任的框架下将变成“在某个特定的时间点，在某个特定的地区，使用某个特定的设备的用户 A 可以访问某个特定应用中的某个特定文件吗？”&lt;/p&gt;
&lt;h2 id=&#34;越来越细化的授权&#34;&gt;越来越细化的授权&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，我们使用 RBAC 来管理权限。所有用户都是以组为基础来授予或拒绝访问权限，单个用户（服务账户）会被授予过多的访问权限。零信任的一个重要特征就是更细的粒度，基于角色来授予访问权限是不够安全的。我们需要细化用户对单一资源在限定时间内的访问权限。这正好与微服务背后的原则相契合——随着服务和数据被分解成更小的部分，就有可能允许我们细化地位服务授予访问权限。&lt;/p&gt;
&lt;h2 id=&#34;有时间限制的授权&#34;&gt;有时间限制的授权&lt;/h2&gt;
&lt;p&gt;关于授权，我们往往会存在一种误解，即一个用户一旦被认证和授权，他就成了一个“受信任”的用户，该用户就可以随时的对系统进行访问。然后，在零信任网络中，没有受信任的用户或设备。用户的每一次访问都需要经过认证和授权。而且，授权还会有一个时间窗口，用户只能在这个规定的实践窗口中执行规定的动作。&lt;/p&gt;
&lt;h2 id=&#34;如何在企业内实行零信任网络&#34;&gt;如何在企业内实行零信任网络&lt;/h2&gt;
&lt;p&gt;因为网络是企业系统的命脉之一，牵一发而动全身，要在企业内实行零信任网络，通常需要战略高层管理人员接纳零信任，通过自上而下的方式强加给安全团队。然后渐进式的改进你的网络，从一个关键业务开始，使其变成零信任的。&lt;/p&gt;
&lt;p&gt;在零信任网络里，默认是拒绝一切访问。需要在应用程序开发中，积极主动的允许来自应用程序的某些适当的请求。身份是零信任的基础，而不是网络。零信任的关注对象是访问点、身份认证与授权和攻击面。对于云原生应用，因为它们的生命周期短暂且是动态的，为了实现零信任，你必须为每个访问点配置一个规则，不断更新应用程序的证书和访问规则，这时候手动配置几乎是不可能的，你必须实现自动化。&lt;/p&gt;
&lt;p&gt;在 IstioCon 2022 的&lt;a href=&#34;https://events.istio.io/istiocon-2022/sessions/zero-trust-istio/&#34; title=&#34;主题演讲&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;主题演讲&lt;/a&gt; 有提到，&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 正在成为零信任的一个重要组成部分。其中最主要的是面向身份的控制，而不是面向网络的控制。这方面的核心原则在谷歌白皮书&lt;a href=&#34;https://cloud.google.com/blog/products/identity-security/beyondprod-whitepaper-discusses-cloud-native-security-at-google&#34; title=&#34;《BeyondProd：云原生安全的新方法》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《BeyondProd：云原生安全的新方法》&lt;/a&gt;上有描写。&lt;/p&gt;
&lt;p&gt;如果我们能将身份概念扩展到用户，并为我们提供灵活而丰富的策略机制来指定、监控和跟踪访问控制，我们就能达到一个可操作的零信任架构 —— 将用户、服务和数据统一到一个管理层。我所工作的公司 &lt;a href=&#34;https://tetrate.io&#34; title=&#34;Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt; 创建了 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34; title=&#34;Tetrate Service Bridge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge&lt;/a&gt; —— 可供大型组织使用的管理平面，也是践行了零信任的理念。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;零信任是一种安全理念，它的基础是认证和授权。但比起传统网络安全方法来说，零信任具有如下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统中的所有工作负载都有一个密码学验证的身份&lt;/li&gt;
&lt;li&gt;零信任网络默认拒绝所有访问&lt;/li&gt;
&lt;li&gt;具有更细粒度的访问授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了在云原生应用中实行零信任，你需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自上而下的推行&lt;/li&gt;
&lt;li&gt;从关键业务入口&lt;/li&gt;
&lt;li&gt;建立自动化工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;下面有一些资料你可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/mtls-guide/&#34; title=&#34;写给 Kubernetes 工程师的 mTLS 指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;写给 Kubernetes 工程师的 mTLS 指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/&#34; title=&#34;利用服务网格为基于微服务的应用程序实施 DevSecOps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用服务网格为基于微服务的应用程序实施 DevSecOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/istio-has-applied-to-join-the-cncf/&#34; title=&#34;Istio 捐献给 CNCF 意味着什么？&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 捐献给 CNCF 意味着什么？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>从 Gartner 的 2021 年云安全炒作周期报告中得到的启示</title>
      <link>https://jimmysong.io/trans/takeaways-from-gartners-2021-hype-cycle-for-cloud-security-report/</link>
      <pubDate>Sun, 15 Aug 2021 17:05:42 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/trans/takeaways-from-gartners-2021-hype-cycle-for-cloud-security-report/</guid>
      <description>
        
        
        &lt;p&gt;Gartner 在该集团的最新预测中称，2021 年全球公有云服务将增长 26.2%，见 Forecast: Public Cloud Services, Worldwide, 2019-2025, 2Q21 Update。&lt;/p&gt;
&lt;p&gt;2020 年，云计算使 IT 路线图和计划不断向前推进，同时支持不断增长的虚拟劳动力和破纪录的数字转型步伐。麦肯锡对全球高管的调查发现，数字化转型的步伐在 2020 年加快了 7 年。&lt;/p&gt;
&lt;p&gt;此外，61% 的企业将云计算作为其数字化转型工作的一部分，其收入增长了 25% 或更多。云基础设施还使 IT 部门能够满足新的应用程序和系统的紧迫的上市时间表。然而，当云基础设施为应对不可预测的工作负载而扩大和缩小规模时，IT 怀疑论者变成了信徒，而之前的预测数据又无法依赖。&lt;/p&gt;
&lt;p&gt;Gartner 引述了疫情之后企业对云计算的加速采用，预计这将推动五年的复合年增长率（CAGR）达到 21.5%。因此，全球公有云服务预计将从 2021 年的 3877 亿美元增长到 2025 年的 8055 亿美元。到 2023 年，所有企业工作负载的 70% 将部署在云基础设施和平台服务中，而 2020 年为 40%。&lt;/p&gt;
&lt;h2 id=&#34;复杂度等同于风险&#34;&gt;复杂度等同于风险&lt;/h2&gt;
&lt;p&gt;企业的云计算复杂性越大，网络安全风险也越大。云在企业中的主导地位带来了更复杂的网络安全风险和更多的潜在危险，需要相应的更高级别的安全技术。企业的云计算基础设施越复杂，其安全挑战就越大。Gartner 预测，到 2025 年，超过 99% 的云计算漏洞将被追溯到终端用户可预防的错误配置。Gartner 的最新云安全报告反映了企业在所有业务线和基础设施层面采用云优先战略的进展。&lt;/p&gt;
&lt;p&gt;最新的 Hype Cycle 介绍了 29 项技术，比去年的 33 项有所减少。Gartner 已经删除了云安全评估、云测试工具和服务、灾难恢复即服务（DRaaS）、以文件为中心的身份证明、OAuth 2.0 和 OpenID Connect。多云管理服务（MCMS）是今年炒作周期的一个新类别，以前被称为云服务代理（CSB）。Gartner 将 CSB 定义为一种 IT 角色和商业活动，其中公司或内部实体为一个或多个（公有或私有）云服务增加价值。&lt;/p&gt;
&lt;h2 id=&#34;主要启示&#34;&gt;主要启示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云原生应用保护平台（CNAPP）是今年炒作周期的新产品。CNAPP 通过整合多种云原生工具和数据源，包括基础设施即代码（IaC）扫描，帮助保护云原生应用。随着几乎所有的企业都在向多云战略迁移，公有云的部署速度继续加快，并将最终超过私有数据中心的工作负载。Gartner 创建新类别的逻辑是跟踪多云部署的主导地位如何迫使企业结合智能自动化，包括云安全态势管理（CSPM）和云工作负载保护平台（CWPP），以保护其 IaaS 部署的应用程序。&lt;/li&gt;
&lt;li&gt;安全服务边缘（SSE）也是今年炒作周期的新内容。虚拟劳动力、数字优先的销售、服务和客户体验正在推动安全服务边缘（SSE）技术的采用。事实证明，SSE 技术和解决方案能够有效降低保护端点的复杂性，同时在企业范围内提高云服务的安全性。SSE 通过访问控制、威胁保护、数据安全、安全监控和基于网络和 API 的集成执行可接受的使用控制来提供改进的端点安全，我们看到 SSE 正在快速增长，并作为基于云的服务提供，少数供应商也提供企业内部和基于代理的组件作为其架构的一部分。据 Gartner 称，基于身份和背景的零信任、最少特权的访问是领先的 SSE 产品的核心能力。今年，SSE 也出现在网络安全和应用安全的炒作周期中。&lt;/li&gt;
&lt;li&gt;支持虚拟工作团队的挑战正在推动云安全的创新。此外，企业对其虚拟工作团队的依赖性增加，为云网络安全供应商提高新产品开发的强度和速度创造了机会。Gartner 认为，这种态势推动了对 SaaS 安全态势管理（SSPM）、增强型身份保护工具（云交付的 IAM）和零信任网络访问（ZTNA）等领域的改进工具和创新需求，以取代传统的 VPN 技术。&lt;/li&gt;
&lt;li&gt;IT、安全和风险管理领导人今年优先考虑企业数字资产管理（EDRM）和能够消除错误配置的云工具。Gartner 认为，EDRM，也被称为信息权利管理（IRM），为敏感数据提供持久的保护，其中知识产权是公司高管的首要关注点。EDRM 还用于保留对通过伙伴关系在安全协作工作流程中传输的非结构化数据的控制。此外，IT 领导人正在寻找新的工具，以减少并可能消除云的错误配置，因为许多人在内部安全审计的基础上发现了新的改进领域。&lt;/li&gt;
&lt;li&gt;在过去的一年里，向 Gartner 提出的关于 CIEM 的询问增加了一倍多。据 Gartner 称，云基础设施权利管理（CIEM）工具帮助企业通过管理时间控制来管理混合和多云 IaaS 中的权利，从而管理云访问风险。CIEM 平台还依靠分析、机器学习和人工智能来识别账户定义和权限中的异常情况。CIEM 对于零信任网络访问（ZTNA）战略是不可或缺的，因为它提供了最小特权访问的执行和补救。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Gartner 最新的云安全炒作周期反映了当前疫情对网络安全领域秩序重建是多么迅速。IT、风险和管理专业人员最关心的是如何保持他们的知识产权（IP）的安全，并减少错误配置云基础设施的情况。内部审计对错误配置如何导致云基础设施的安全漏洞提供了宝贵的见解，特别是在混合云配置中。&lt;/p&gt;
&lt;p&gt;现在有很多机会来确保虚拟劳动力的安全，同时保护数字化转型战略取得成功所必需的混合和多云基础设施。这种压力给网络安全厂商带来了新的创新强度。这种强度体现在云原生应用保护平台（CNAPP）和安全服务边缘（SSE）在今年的云安全炒作周期中所起的关键作用。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>使用 Certbot 为网站设置永久免费的 HTTPS 证书</title>
      <link>https://jimmysong.io/blog/free-certificates-with-certbot/</link>
      <pubDate>Fri, 05 Jul 2019 21:10:57 +0800</pubDate>
      <author>rootsongjc@gmail.com (Jimmy Song)</author>
      <guid>https://jimmysong.io/blog/free-certificates-with-certbot/</guid>
      <description>
        
        
        &lt;p&gt;我的博客从上线第一天起就使用了 HTTPS，用的是 &lt;a href=&#34;https://www.cloudflare.com/zh-cn/&#34; title=&#34;Cloudflare&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloudflare&lt;/a&gt;，直接在其后台配置即可。如果你是用 nginx、apache、haproxy 等服务器来运行自己的网站，给大家推荐 &lt;a href=&#34;https://certbot.eff.org/&#34; title=&#34;Certbot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Certbot&lt;/a&gt;，可以自动化来配置 SSL 证书和定时更新。&lt;/p&gt;
&lt;p&gt;下面记录我自己为 &lt;code&gt;servicemesher.com&lt;/code&gt; 网站配置 HTTPS 证书的过程，全程不需要 5 分钟。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;网站的托管环境如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS：CentOS 7.6 阿里云&lt;/li&gt;
&lt;li&gt;网站服务器：Nginx，使用 yum 安装，版本 1.12&lt;/li&gt;
&lt;li&gt;提前配置好 Nginx，确保使用 HTTP 先可以访问到网站&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：请使用 &lt;code&gt;yum&lt;/code&gt; 命令安装 nginx，这样可以确保 nginx 安装在默认的位置，因为 certbot 会检测 &lt;code&gt;/etc/nginx/&lt;/code&gt; 目录下的配置文件。&lt;/p&gt;
&lt;h2 id=&#34;操作步骤&#34;&gt;操作步骤&lt;/h2&gt;
&lt;p&gt;执行下面的步骤可以直接为你的网站配置 HTTPS 证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yum -y install yum-utils
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yum install certbot python2-certbot-nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图是在 Certbot 中选择服务器和操作系统的页面。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/free-certificates-with-certbot/006tNc79ly1g4oqftr4fdj31e20u0gn8_hu6485f23e60e2e8e9568294bae27898e8_114235_1802x1080_resize_q75_h2_lanczos.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/free-certificates-with-certbot/006tNc79ly1g4oqftr4fdj31e20u0gn8.jpg&#34; data-img=&#34;/blog/free-certificates-with-certbot/006tNc79ly1g4oqftr4fdj31e20u0gn8.jpg&#34; data-width=&#34;1802&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;CertBot 页面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;CertBot 页面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;执行下面的命令，根据提示会自动配置 nginx。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;certbot --nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Saving debug log to /var/log/letsencrypt/letsencrypt.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Plugins selected: Authenticator nginx, Installer nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting new HTTPS connection &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: acme-v02.api.letsencrypt.org
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Which names would you like to activate HTTPS &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1：servicemesher.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2: www.servicemsher.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 这里直接回车选择所有的域名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Select the appropriate numbers separated by commas and/or spaces, or leave input
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;blank to &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; all options shown &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Enter &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; to cancel&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;You have an existing certificate that contains a portion of the domains you
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;requested &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ref: /etc/letsencrypt/renewal/servicemesher.com.conf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;It contains these names: servicemesher.com, www.servicemesher.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;You requested these names &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the new certificate: servicemesher.com,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prow.servicemesher.com, www.servicemesher.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Do you want to expand and replace this existing certificate with the new
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;certificate?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;E&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;xpand/&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;ancel: E
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Renewing an existing certificate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Performing the following challenges:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http-01 challenge &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; prow.servicemesher.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; verification...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cleaning up challenges
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deploying Certificate to VirtualHost /etc/nginx/nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deploying Certificate to VirtualHost /etc/nginx/nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deploying Certificate to VirtualHost /etc/nginx/nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1: No redirect - Make no further changes to the webserver configuration.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2: Redirect - Make all requests redirect to secure HTTPS access. Choose this &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;new sites, or &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; you&lt;span class=&#34;s1&#34;&gt;&amp;#39;re confident your site works on HTTPS. You can undo this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;change by editing your web server&amp;#39;&lt;/span&gt;s configuration.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Select the appropriate number &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1-2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;enter&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;press &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; to cancel&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 这里是为了扩展证书支持更多的域名，所有输入 2 回车&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; already redirecting to ssl in /etc/nginx/nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Redirecting all traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; to ssl in /etc/nginx/nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; already redirecting to ssl in /etc/nginx/nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your existing certificate has been successfully renewed, and the new certificate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;has been installed.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后重新加载配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nginx -t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;nginx -s reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置证书自动更新。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0 0,12 * * * root python -c &amp;#39;import random; import time; time.sleep(random.random() * 3600)&amp;#39; &amp;amp;&amp;amp; certbot renew&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/crontab &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了现在访问你的网站就可以看到 https 头部加了 HTTPS 锁了。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xs18952904/article/details/79262646&#34; title=&#34;让网站永久拥有 HTTPS - 申请免费 SSL 证书并自动续期&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;让网站永久拥有 HTTPS - 申请免费 SSL 证书并自动续期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;certbot - 免费的 https 证书&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

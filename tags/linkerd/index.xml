
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Linkerd</title>
    <link>https://jimmysong.io/tags/linkerd/</link>
    <description>Recent content in Linkerd on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    <lastBuildDate>Tue, 08 Jan 2019 20:50:44 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/linkerd/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>《Service Mesh 实战—基于 Linkerd 和 Kubernetes 的微服务实践》读后感</title>
      <link>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</link>
      <pubDate>Tue, 08 Jan 2019 20:50:44 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</guid>
      <description>
        
        
        &lt;p&gt;最近在回顾 Service Mesh 技术在 2018 年的发展，想再看看 Linkerd，正好&lt;strong&gt;杨彰显&lt;/strong&gt;的这本《Service Mesh 实战——基于 Linkerd 和 Kubernetes 的微服务实践》上市发售了，&lt;strong&gt;机械工业出版社&lt;/strong&gt;的编辑送了我一本，🙏&lt;strong&gt;杨福川&lt;/strong&gt;编辑，我看了下抽空写了点读后感，我看了下抽空写了点读后感，其实也说不上是读后感，就当是自己的一点感悟吧，就当拿此书借题发挥吧，这个知识爆炸的年代，技术发展如此迅速，可以说是 IT 人员的幸运，也是不幸！有多少写开源软件的书推出一版后能撑过三年的？如果软件红得发紫，持续迭代 N 个版本，例如 Kubernetes，最近两年以每三个月一个版本的速度迭代，之前的书早就跟不上节奏，要么就要不断推出新版，直到软件稳定后不再有大的改动。还有种可能就是软件推广和发展的不理想，无人问津，写这样软件的书就不会有再版了。&lt;/p&gt;
&lt;p&gt;拿到本书后我的第一反应就是看看这本书定稿的时候 Istio 是什么版本，Linkerd 又是什么版本。因为在这一年内两款开源软件都有较大的版本变动，如果书籍定稿的时候基于的软件版本太低，软件架构可能会有较大的变化，影响书中示例和部分章节的时效性。这也是大多技术书籍名短的症结所在，技术发展是在太快，传统的书籍出版流程往往过于繁琐和冗长，等到书籍出版后所介绍的软件都出了好几个版本。例如 Kubernetes 这种的软件，每三个月一个版本，而写一般书从策划到发行少说半年，一般也要一年的时间。&lt;/p&gt;
&lt;h2 id=&#34;关于书籍定稿时的软件版本&#34;&gt;关于书籍定稿时的软件版本&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Istio 0.8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书第一章「Service Mesh 简介」对 Service Mesh 相关开源产品介绍时提到本书定稿时 Istio 是 0.8 版本，而 Istio 在 2018 年 7 月 31 日发布了 1.0 版本。&lt;/p&gt;
&lt;p&gt;这本书定稿时，Istio 的最新版本是 0.8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linkerd 1.3.6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书从序言开始一直到第二章结束也没有提及写作时基于的 Linkerd 版本，我在第二章的安装步骤中看到了说明。&lt;/p&gt;
&lt;p&gt;可以看到本书写作时是基于 Linkerd 1.3.6 版本，而 Linkerd 在同年的 9 月 18 日发布了 &lt;a href=&#34;https://cloudnative.to/blog/linkerd-2-0-in-general-availability/&#34; title=&#34;2.0 GA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2.0 GA&lt;/a&gt;，这一版本跟 1.x 版本相比有重大变化——它还将项目从集群范围的 service mesh 转换为可组合的 &lt;em&gt;service sidecar&lt;/em&gt; ，旨在为开发人员和服务所有者提供在云原生环境中成功所需的关键工具。&lt;/p&gt;
&lt;h2 id=&#34;linkerd-vs-envoy&#34;&gt;Linkerd vs Envoy&lt;/h2&gt;
&lt;p&gt;Linkerd 2.0 的 service sidecar 设计使开发人员和服务所有者能够在他们的服务上运行 Linkerd，提供自动可观测性、可靠性和运行时诊断，而无需更改配置或代码。通过提供轻量级的增量路径来获得平台范围的遥测、安全性和可靠性的传统 service mesh 功能，service sidecar 方法还降低了平台所有者和系统架构师的风险。该版本还用 Rust 重写了代理部分，在延迟，吞吐量和资源消耗方面产生了数量级的改进。&lt;/p&gt;
&lt;p&gt;而 Linkerd 1.x 继承自 Twitter 开源的 Finagle 高性能 RPC，所有想要深度学习 Linkerd 1.x 还需要了解 Finagle，这就跟 Istio 将 Envoy 作为默认的数据平面一样，要想深度学习 Istio 必须了解 Envoy。&lt;/p&gt;
&lt;p&gt;二者几乎使用了完全不同的术语，假如你已经了解了 &lt;a href=&#34;https://envoyproxy.io&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 想要再切换到 Linkerd 上，那么就要再费很多心力来学习它的概念和原理，例如如下这些术语或配置（Linkerd 中独有的配置）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dtab（委托表）&lt;/strong&gt;：由一系列路由组成，由一系列路由规则组成，以逻辑路径为输入，然后经过路由规则做一系列转换生成具体名字。这是 Linkerd 路由机制的根本，就像 Envoy 中的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;一样，本书的第四章「深入 Linkerd 数据访问流」专门讲解了 dtab 的实现机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dentry（委托表记录）&lt;/strong&gt;：委托表的每条路由规则称为 dentry，如 /consul =&amp;gt; /#/io.l5d.consul/dc1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namer&lt;/strong&gt;：配置 Linkerd 支持的服务发现工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namerd&lt;/strong&gt;：Linkerd 的控制平面，相当于 Istio 中的 Pilot，对接各种服务发现。当然 Linkerd 也可以直接与某个服务发现平台对接如 consul，而不使用 namerd 这个集中路由和配置管理组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interpreter&lt;/strong&gt;：interpreter 决定如何解析服务名字和客户端名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 Linkerd 也是 &lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;CNCF 中的项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 中的项目&lt;/a&gt;，但它目前还处于孵化阶段，而 Envoy 的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;已经被众多开源项目所支持，如 &lt;a href=&#34;https://istio.io/zh&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https://github.com/alipay/sofa-mesh&#34; title=&#34;SOFAMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SOFAMesh&lt;/a&gt;、&lt;a href=&#34;https://github.com/nginxinc/nginmesh&#34; title=&#34;NginxMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NginxMesh&lt;/a&gt; 等，且 Envoy 已经从 CNCF 中毕业，以后可能成为 Service Mesh 领域的标准协议，Linkerd 的生存状况堪忧。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书中所有示例都提供了虚拟机的快速上手环境，只要使用 Vagrant 即可创建虚拟机和应用，所以在本书的&lt;a href=&#34;https://github.com/yangzhares/linkerd-in-action&#34; title=&#34;示例代码&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例代码&lt;/a&gt;有大量的 Vagrantfile。&lt;/p&gt;
&lt;p&gt;本书第三部分「实战篇」花了大量篇幅（本书一半的页数）来讲解如何使用 Linkerd 和 Kubernetes 来管理微服务，可以参考我 2017 年 8 月 1 日写的这篇&lt;a href=&#34;https://jimmysong.io/posts/linkerd-user-guide/&#34; title=&#34;微服务管理框架 service mesh——Linkerd 安装试用笔记&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务管理框架 service mesh——Linkerd 安装试用笔记&lt;/a&gt;，那时候还是基于 Linkerd 1.1.2，还有 &lt;a href=&#34;https://github.com/linkerd/linkerd-examples/&#34; title=&#34;Linkerd 官方示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd 官方示例&lt;/a&gt;，这些示例基本都不怎么更新了。&lt;/p&gt;
&lt;p&gt;因为该书定稿时所基于的 Linkerd 版本距离本书发售时的 Linkerd 已经落后一个大版本（最新版本是 &lt;a href=&#34;https://blog.linkerd.io/2018/12/06/announcing-linkerd-2-1/&#34; title=&#34;Linkerd 2.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd 2.1&lt;/a&gt;），所以读者一定要注意这一点，老实说我只花了两个夜晚快速过了一下本书，无法对本书内容给出具体评论，所以本书是否是你所需要的就要你自己去思考了。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Linkerd</title>
    <link>https://jimmysong.io/tags/linkerd/</link>
    <description>Recent content in Linkerd on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    <lastBuildDate>Mon, 09 Sep 2024 11:45:58 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/linkerd/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>服务网格架构：Sidecar vs. Sidecarless，谁才是未来？</title>
      <link>https://jimmysong.io/blog/service-mesh-sidecar-vs-sidecarless-debate/</link>
      <pubDate>Mon, 09 Sep 2024 11:45:58 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/service-mesh-sidecar-vs-sidecarless-debate/</guid>
      <description>
        
        
        &lt;p&gt;服务网格已经成为现代云原生应用架构中至关重要的一部分，帮助团队在大规模分布式系统中管理微服务通信、提高安全性并优化性能。然而，随着技术的不断演进，关于服务网格架构的最佳实践出现了激烈的争论，尤其是关于 sidecar 与 sidecarless 模式的选择问题。这场争论的核心在于如何在性能、资源利用、安全性和操作复杂性之间取得最佳平衡。近年来，Cilium 引入了无 sidecar 架构的 eBPF 技术，而 Istio 也推出了 Ambient 模式，结合了传统 sidecar 与无 sidecar 的优点。与此同时，Linkerd 则坚守 sidecar 架构，并对新兴的无 sidecar 方法持保守态度。这篇文章将深入探讨这些服务网格架构的主要观点和争议，并分析每种方法的优势与挑战。&lt;/p&gt;
&lt;h2 id=&#34;关于服务网格有无-sidecar-的争论&#34;&gt;关于服务网格有无 sidecar 的争论&lt;/h2&gt;
&lt;p&gt;关于服务网格的 sidecar 与无 sidecar 的争论是随着 Cilium 的推出和各大服务网格技术的演变而逐渐加剧的，尤其是在 2021 年之后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cilium Service Mesh 的推出（2021 年 12 月）&lt;/strong&gt;  ：Cilium 通过 eBPF 技术引入了无 sidecar 的服务网格架构，开始引发对传统 sidecar 模式的讨论。这一概念的提出标志着无 sidecar 架构的兴起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linkerd 与 Istio 的反应（2021 年 12 月至 2022 年初）&lt;/strong&gt; ：Linkerd 的创始人 William Morgan 及其团队对 Cilium 的无 sidecar 方法表示担忧，认为这种方法可能会带来安全和性能上的问题。这一讨论逐渐演变为对 sidecar 与无 sidecar 架构的更广泛争辩。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Istio 的 Ambient 概念（2022 年 5 月）&lt;/strong&gt; ：Istio 提出了 Ambient Mesh，尝试结合 sidecar 和主机级代理的优势，这进一步加剧了各方对服务网格架构的讨论。此时，业界对不同服务网格架构的看法开始分化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;专家观点的发表（2021 年 12 月至 2023 年）&lt;/strong&gt;  ：多位行业专家如 Thomas Graf 和 William Morgan 等在不同场合发表了对 sidecar 与无 sidecar 架构的看法，形成了更为系统的争论。这些观点在多个会议和文章中被广泛讨论，推动了对服务网格架构的深入理解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;各方观点&#34;&gt;各方观点&lt;/h2&gt;
&lt;p&gt;下表摘录了各服务网格提供商及用户的公开观点。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;人物&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;职位/公司&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;观点&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Andrey Rybka&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Bloomberg&lt;/td&gt;
&lt;td&gt;倾向于选择成熟度更高的 Istio，特别是在有 Google 等大公司支持的情况下。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ara Pulido&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Datadog 开发者关系专家&lt;/td&gt;
&lt;td&gt;认为 eBPF 工具（如 Cilium）是 Kubernetes 网络扩展问题的解决方案，使用 Cilium 可以完全替代 kube-proxy，实现更细粒度的容器安全特性；移除 kube-proxy 后，操作简化，性能提升。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dale Ragan&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;SAP Concur Technologies 首席软件设计工程师&lt;/td&gt;
&lt;td&gt;认为 eBPF 在安全方面提供了更好的优势，可同时应用于整个集群和各个服务；正在使用 Cilium 替代 Flannel 作为其生产环境中的容器网络接口（CNI）插件，并测试 Isovalent 的专有 SecOps 插件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dan Wendlandt&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Isovalent CEO&lt;/td&gt;
&lt;td&gt;认为 eBPF 和服务网格是互补的技术，eBPF 可作为服务网格的基础，为服务网格代理（如 Envoy）提供高效的数据进出服务。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;David Ortiz&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Constant Contact 首席软件工程师&lt;/td&gt;
&lt;td&gt;对 Istio 的 Ambient Mesh 非常感兴趣，认为其显著简化了 Istio 的操作流程，尤其是在升级方面，计划尽快采用这一技术。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Filip Nikolic&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;PostFinance&lt;/td&gt;
&lt;td&gt;认为 eBPF 基础的无 sidecar 服务网格具有更高的网络性能和效率，并且安全实践也在不断进化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Greg Otto&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Comcast 云服务执行董事&lt;/td&gt;
&lt;td&gt;对 Istio Ambient Mesh 感兴趣，计划在其成熟后进行评估；希望能够分别扩展和服务第 7 层（L7）和第 4 层（L4）功能，认为减少不必要的 L7 过滤可以减少安全暴露面和漏洞风险。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;John Mitchell&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;独立数字化转型顾问&lt;/td&gt;
&lt;td&gt;认为 eBPF 正经历一个炒作周期，但它确实有潜力为 Kubernetes 提供高级网络安全特性，而无需改变应用程序代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Kasper Nissen&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Lunar 的首席平台架构师&lt;/td&gt;
&lt;td&gt;支持 sidecar 架构，认为它简单易用，并与其他容器技术相同；在全面部署服务网格后，资源消耗增加不多但功能增多；指出 sidecar 同步问题源于 Kubernetes 网络层的问题，建议在 Kubernetes 层面进行修复。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Louis Ryan&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Solo.io CTO&lt;/td&gt;
&lt;td&gt;强调 Istio 1.23 版引入的 Ambient Mesh 的优势，包括减少 sidecar 的使用，简化架构，提高性能，降低复杂性，并增强了灵活性与可扩展性。他认为，Ambient Mesh 能够帮助团队更轻松地管理微服务架构。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Thomas Graf&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Isovalent CTO&lt;/td&gt;
&lt;td&gt;主张通过 eBPF 和 Cilium 提供无边车的服务网格，优化 mTLS 认证，消除 sidecar 的使用，从而提高性能和安全性。认为分离认证握手和数据传输的模式能够实现更高效、更灵活的服务间认证，同时减少管理复杂性，并提供对多种网络协议的支持。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;William Morgan&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Linkerd 创始人兼 Buoyant CEO&lt;/td&gt;
&lt;td&gt;强烈批评无 sidecar 的 eBPF 方法，认为 sidecar 提供了更好的安全隔离和性能预测性，指出 sidecarless 架构可能重蹈 Linkerd 1 的覆辙。他认为，eBPF 和 sidecar 不是对立的，eBPF 可以用于网络优化，但不应替代 sidecar。主张继续使用更轻量的 sidecar 代理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Zachary Butcher&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Tetrate 创始工程师&lt;/td&gt;
&lt;td&gt;对 Ambient Mesh 持审慎乐观态度，认为它有助于降低服务网格的采用难度，但当前性能表现较差、功能有限，距离生产就绪还有很长的路要走。他建议用户暂时不要在生产环境中使用 Ambient Mesh，直到其成熟度提高。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    关于服务网格技术选型的公开观点
    
&lt;/figcaption&gt;

&lt;h2 id=&#34;个人观点&#34;&gt;个人观点&lt;/h2&gt;
&lt;p&gt;近年来，我有幸见证并参与了许多关于服务网格架构选择的讨论和实践。我认为服务网格选择不应仅仅基于技术特性的比较，更应考虑到团队的具体需求、现有技术栈的兼容性以及未来的扩展性。&lt;/p&gt;
&lt;p&gt;在 sidecar 与 sidecarless 的选择问题上，我的看法是两者各有千秋。Sidecar 模型虽然在某些情况下可能会带来资源占用和管理复杂性的增加，但它提供了更细粒度的流量控制和安全策略实施，这对于需要高度精细化管理的企业环境是非常宝贵的。与此同时，sidecarless 模型，尤其是通过 eBPF 技术实现的，为服务网格带来了前所未有的性能优化和资源利用率提升，它对于构建高效率的大规模服务网格同样具有重要价值。&lt;/p&gt;
&lt;p&gt;因此，我的建议是，企业在选择服务网格架构时，应该从自身的业务需求出发，综合考虑安全性、性能、成本以及团队的运维能力，选择最适合自己的服务网格解决方案。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总结下目前关于这三个流行的服务网格项目的主流看法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Linkerd&lt;/strong&gt;：强调 sidecar 的安全隔离和性能稳定性，对 eBPF 无 sidecar 模式持批评态度，认为其复杂性和安全风险增加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio&lt;/strong&gt;：引入 Ambient Mesh，部分采用无 sidecar 方法，以降低复杂性和提高性能，但仍保留 sidecar 的部分功能，体现出对现有 sidecar 架构的保留与创新。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium&lt;/strong&gt;：主张通过 eBPF 无 sidecar 模式来优化网络性能和安全性，简化操作，同时保持对多种协议的支持，推动服务网格功能集成到 Linux 内核中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同的观点反映了各自对服务网格架构设计的偏好与关注点，不同企业应根据自身需求和技术背景选择合适的服务网格方案。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.techtarget.com/searchitoperations/news/365535362/Sidecarless-eBPF-service-mesh-sparks-debate&#34; title=&#34;Sidecarless eBPF service mesh sparks debate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecarless eBPF service mesh sparks debate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/ebpf-or-not-sidecars-are-the-future-of-the-service-mesh/&#34; title=&#34;eBPF or not: Sidecars are the future of the service mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF or not: Sidecars are the future of the service mesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2021-12-08-ebpf-servicemesh/&#34; title=&#34;eBPF Service Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF Service Mesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.techtarget.com/searchitoperations/news/252483517/Linux-kernel-utility-could-solve-Kubernetes-networking-woes&#34; title=&#34;Linux kernel utility could solve Kubernetes networking woes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux kernel utility could solve Kubernetes networking woes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/2022-05-03-servicemesh-security/&#34; title=&#34;Service Mesh Security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh Security&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/istio-1-23-drops-the-sidecars-for-a-simpler-ambient-mesh&#34; title=&#34;Istio 1.23 drops the sidecars for a simpler ambient mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.23 drops the sidecars for a simpler ambient mesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tetrate.io/blog/ambient-mesh-what-you-need-to-know-about-this-experimental-new-deployment-model-for-istio/&#34; title=&#34;Ambient Mesh: What you need to know about this experimental new deployment model for Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient Mesh: What you need to know about this experimental new deployment model for Istio&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.techtarget.com/searchitoperations/news/252526651/Sidecarless-service-mesh-fad-or-the-future&#34; title=&#34;Sidecarless service mesh: fad or the future?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecarless service mesh: fad or the future?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>《Service Mesh 实战—基于 Linkerd 和 Kubernetes 的微服务实践》读后感</title>
      <link>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</link>
      <pubDate>Tue, 08 Jan 2019 20:50:44 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/service-mesh-in-action-by-yangzhangxian-review/</guid>
      <description>
        
        
        &lt;p&gt;最近在回顾 Service Mesh 技术在 2018 年的发展，想再看看 Linkerd，正好&lt;strong&gt;杨彰显&lt;/strong&gt;的这本《Service Mesh 实战——基于 Linkerd 和 Kubernetes 的微服务实践》上市发售了，&lt;strong&gt;机械工业出版社&lt;/strong&gt;的编辑送了我一本，🙏&lt;strong&gt;杨福川&lt;/strong&gt;编辑，我看了下抽空写了点读后感，我看了下抽空写了点读后感，其实也说不上是读后感，就当是自己的一点感悟吧，就当拿此书借题发挥吧，这个知识爆炸的年代，技术发展如此迅速，可以说是 IT 人员的幸运，也是不幸！有多少写开源软件的书推出一版后能撑过三年的？如果软件红得发紫，持续迭代 N 个版本，例如 Kubernetes，最近两年以每三个月一个版本的速度迭代，之前的书早就跟不上节奏，要么就要不断推出新版，直到软件稳定后不再有大的改动。还有种可能就是软件推广和发展的不理想，无人问津，写这样软件的书就不会有再版了。&lt;/p&gt;
&lt;p&gt;拿到本书后我的第一反应就是看看这本书定稿的时候 Istio 是什么版本，Linkerd 又是什么版本。因为在这一年内两款开源软件都有较大的版本变动，如果书籍定稿的时候基于的软件版本太低，软件架构可能会有较大的变化，影响书中示例和部分章节的时效性。这也是大多技术书籍名短的症结所在，技术发展是在太快，传统的书籍出版流程往往过于繁琐和冗长，等到书籍出版后所介绍的软件都出了好几个版本。例如 Kubernetes 这种的软件，每三个月一个版本，而写一般书从策划到发行少说半年，一般也要一年的时间。&lt;/p&gt;
&lt;h2 id=&#34;关于书籍定稿时的软件版本&#34;&gt;关于书籍定稿时的软件版本&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Istio 0.8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书第一章「Service Mesh 简介」对 Service Mesh 相关开源产品介绍时提到本书定稿时 Istio 是 0.8 版本，而 Istio 在 2018 年 7 月 31 日发布了 1.0 版本。&lt;/p&gt;
&lt;p&gt;这本书定稿时，Istio 的最新版本是 0.8。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linkerd 1.3.6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本书从序言开始一直到第二章结束也没有提及写作时基于的 Linkerd 版本，我在第二章的安装步骤中看到了说明。&lt;/p&gt;
&lt;p&gt;可以看到本书写作时是基于 Linkerd 1.3.6 版本，而 Linkerd 在同年的 9 月 18 日发布了 &lt;a href=&#34;https://cloudnative.to/blog/linkerd-2-0-in-general-availability/&#34; title=&#34;2.0 GA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2.0 GA&lt;/a&gt;，这一版本跟 1.x 版本相比有重大变化——它还将项目从集群范围的 service mesh 转换为可组合的 &lt;em&gt;service sidecar&lt;/em&gt; ，旨在为开发人员和服务所有者提供在云原生环境中成功所需的关键工具。&lt;/p&gt;
&lt;h2 id=&#34;linkerd-vs-envoy&#34;&gt;Linkerd vs Envoy&lt;/h2&gt;
&lt;p&gt;Linkerd 2.0 的 service sidecar 设计使开发人员和服务所有者能够在他们的服务上运行 Linkerd，提供自动可观测性、可靠性和运行时诊断，而无需更改配置或代码。通过提供轻量级的增量路径来获得平台范围的遥测、安全性和可靠性的传统 service mesh 功能，service sidecar 方法还降低了平台所有者和系统架构师的风险。该版本还用 Rust 重写了代理部分，在延迟，吞吐量和资源消耗方面产生了数量级的改进。&lt;/p&gt;
&lt;p&gt;而 Linkerd 1.x 继承自 Twitter 开源的 Finagle 高性能 RPC，所有想要深度学习 Linkerd 1.x 还需要了解 Finagle，这就跟 Istio 将 Envoy 作为默认的数据平面一样，要想深度学习 Istio 必须了解 Envoy。&lt;/p&gt;
&lt;p&gt;二者几乎使用了完全不同的术语，假如你已经了解了 &lt;a href=&#34;https://envoyproxy.io&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 想要再切换到 Linkerd 上，那么就要再费很多心力来学习它的概念和原理，例如如下这些术语或配置（Linkerd 中独有的配置）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dtab（委托表）&lt;/strong&gt;：由一系列路由组成，由一系列路由规则组成，以逻辑路径为输入，然后经过路由规则做一系列转换生成具体名字。这是 Linkerd 路由机制的根本，就像 Envoy 中的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;一样，本书的第四章「深入 Linkerd 数据访问流」专门讲解了 dtab 的实现机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dentry（委托表记录）&lt;/strong&gt;：委托表的每条路由规则称为 dentry，如 /consul =&amp;gt; /#/io.l5d.consul/dc1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namer&lt;/strong&gt;：配置 Linkerd 支持的服务发现工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namerd&lt;/strong&gt;：Linkerd 的控制平面，相当于 Istio 中的 Pilot，对接各种服务发现。当然 Linkerd 也可以直接与某个服务发现平台对接如 consul，而不使用 namerd 这个集中路由和配置管理组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interpreter&lt;/strong&gt;：interpreter 决定如何解析服务名字和客户端名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 Linkerd 也是 &lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;CNCF 中的项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 中的项目&lt;/a&gt;，但它目前还处于孵化阶段，而 Envoy 的 &lt;a href=&#34;https://jimmysong.io/istio-handbook/data-plane/envoy-xds.html&#34; title=&#34;xDS 协议&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;已经被众多开源项目所支持，如 &lt;a href=&#34;https://istio.io/zh&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https://github.com/alipay/sofa-mesh&#34; title=&#34;SOFAMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SOFAMesh&lt;/a&gt;、&lt;a href=&#34;https://github.com/nginxinc/nginmesh&#34; title=&#34;NginxMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NginxMesh&lt;/a&gt; 等，且 Envoy 已经从 CNCF 中毕业，以后可能成为 Service Mesh 领域的标准协议，Linkerd 的生存状况堪忧。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书中所有示例都提供了虚拟机的快速上手环境，只要使用 Vagrant 即可创建虚拟机和应用，所以在本书的&lt;a href=&#34;https://github.com/yangzhares/linkerd-in-action&#34; title=&#34;示例代码&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例代码&lt;/a&gt;有大量的 Vagrantfile。&lt;/p&gt;
&lt;p&gt;本书第三部分「实战篇」花了大量篇幅（本书一半的页数）来讲解如何使用 Linkerd 和 Kubernetes 来管理微服务，可以参考我 2017 年 8 月 1 日写的这篇&lt;a href=&#34;https://jimmysong.io/posts/linkerd-user-guide/&#34; title=&#34;微服务管理框架 service mesh——Linkerd 安装试用笔记&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务管理框架 service mesh——Linkerd 安装试用笔记&lt;/a&gt;，那时候还是基于 Linkerd 1.1.2，还有 &lt;a href=&#34;https://github.com/linkerd/linkerd-examples/&#34; title=&#34;Linkerd 官方示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd 官方示例&lt;/a&gt;，这些示例基本都不怎么更新了。&lt;/p&gt;
&lt;p&gt;因为该书定稿时所基于的 Linkerd 版本距离本书发售时的 Linkerd 已经落后一个大版本（最新版本是 &lt;a href=&#34;https://blog.linkerd.io/2018/12/06/announcing-linkerd-2-1/&#34; title=&#34;Linkerd 2.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd 2.1&lt;/a&gt;），所以读者一定要注意这一点，老实说我只花了两个夜晚快速过了一下本书，无法对本书内容给出具体评论，所以本书是否是你所需要的就要你自己去思考了。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

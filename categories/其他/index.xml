<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - 云原生|开源|社区 – 其他</title>
    <link>https://jimmysong.io/categories/%E5%85%B6%E4%BB%96/</link>
    <description>Recent content in 其他 on Jimmy Song - 云原生|开源|社区</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright &amp;copy; 2021 Jimmy Song 保留所有权利；&lt;/br&gt;基于 Hugo [educenter](https://github.com/themefisher/educenter-hugo)  主题构建</copyright>
    <lastBuildDate>Tue, 25 May 2021 22:22:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/categories/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Zoom &#43; OBS &#43; B 站直播配置手册</title>
      <link>https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/</link>
      <pubDate>Tue, 25 May 2021 22:22:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/</guid>
      <description>
        
        
        &lt;p&gt;今晚我第一次使用 Zoom + OBS 和马若飞在 B 站上进行了&lt;a href=&#34;https://space.bilibili.com/1698576814&#34;&gt;《Istio 大咖说》&lt;/a&gt;栏目的第一期分享——「Istio 开源四周年回顾与展望」。考虑到很多社区、大咖会有在 B 站上直播的需求，特别将我的个人经验分享给大家，欢迎大家补充，我会不断优化直播体验。&lt;/p&gt;
&lt;p&gt;下图是我直播时桌面的情况，使用的设备有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Pro，这个自不必说&lt;/li&gt;
&lt;li&gt;USB 麦克风博雅 BY-500，作为音频输入麦克风&lt;/li&gt;
&lt;li&gt;海康威视外接摄像头，用作第二机位&lt;/li&gt;
&lt;li&gt;iPad，作为直播监视器，同时回答观众的弹幕&lt;/li&gt;
&lt;li&gt;环形补光灯，直播通常是在晚上，光线太暗需要补光&lt;/li&gt;
&lt;li&gt;AirPods Pro，用于监听声音的，不作为音频输入&lt;/li&gt;
&lt;li&gt;静音蓝牙键盘，防止键盘敲击声音影响直播的声音体验&lt;/li&gt;
&lt;li&gt;iPhone，用于和直播讲师私下沟通，这样不会被直播出去&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;desktop.jpg&#34; alt=&#34;我的桌面&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面是直播时的桌面（请忽略我杂乱的被各种设备占满空间的桌面），下面是我的配置参考。&lt;/p&gt;
&lt;h2 id=&#34;硬件准备&#34;&gt;硬件准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电脑：macOS、Windows 都可以，我是用的是Macbook Pro 2016 年产，配置如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0t9gubjj30wk0jiwl1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外接麦克风：切勿直接使用电脑机身上自带的麦克风，那样会收录电脑风扇的声音，我使用的是博雅 BY-500（400 多块钱） 麦克风，电容式麦克风，指向性比较好，基本没有噪音。&lt;/li&gt;
&lt;li&gt;摄像头：保证电脑上的摄像头可用，因为会议的时候需要开摄像头，或者用外接摄像头也可以。&lt;/li&gt;
&lt;li&gt;网络：确保网速至少 100MB/s 的宽带，因为推流还是比较占用带宽的，而且还需要同时查看直播效果，对下行带宽也有要求。&lt;/li&gt;
&lt;li&gt;另一台可联网设备：用来监控直播效果，可以是手机、iPad 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件准备&#34;&gt;软件准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Zoom：需要 Pro 版，这样才可以举行超过 45 分钟的线上会议，否则会在超时后打断再重新加入，需要准备好账号，中国大陆用户貌似不能再注册？&lt;/li&gt;
&lt;li&gt;OBS：用来做推流，到官网下载最新的版本&lt;/li&gt;
&lt;li&gt;音频插件 Sunflower：&lt;a href=&#34;https://github.com/mattingalls/Soundflower/releases&#34;&gt;点击跳转到下载页面&lt;/a&gt;，如果安装时遇到系统权限问题，请在命令行中执行 &lt;code&gt;sudo spctl --master-disable&lt;/code&gt; 并在电脑的 &lt;code&gt;系统首选项&lt;/code&gt; 的 &lt;code&gt;安全与隐私&lt;/code&gt; 中批准来自任意途径的软件安装，如果看到有详情页面，点击进去批准软件发行商&lt;/li&gt;
&lt;li&gt;Bilibili：需要一个 B 站账号，并开通直播间，经过实名认证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;obs-配置&#34;&gt;OBS 配置&lt;/h2&gt;
&lt;p&gt;下面是在 Macbook 中安装的 OBS 配置截图。&lt;/p&gt;
&lt;p&gt;需要注意的是输出、音频和视频的配置。请参考图中的配置，尤其注意编码控制、比特率的配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0t9tppnj312t0u0gpv.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0tbb4g8j313m0u0jv1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意分辨率的配置，同时调整电脑屏幕的分辨率为 1440x900，&lt;strong&gt;不要使用太大的分辨率，否则可能导致直播画面黑屏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0tarnvoj31is0p276g.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0tbrclhj31140pkjxy.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;音频配置&#34;&gt;音频配置&lt;/h2&gt;
&lt;p&gt;安装 sunflower 后，在 Midi 设备中创建一个多输出设备，如图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;008i3skNly1gqv0ta93jfj31060q0n28.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择 Sunflower（2ch）和你想要用来监听系统声音的设备，我是用的是 AirPods，你也可以选择其他耳机，总之不要让麦克风录到这个系统输出的即可。&lt;/p&gt;
&lt;p&gt;还要在 OBS 的麦克风配置里增加下新创建的这个输出设备，这样直播的时候就可以收录你的系统，也就是你的耳机听到的声音了，比如在视频会议中，所有人讲话的声音都会被直播出去。&lt;/p&gt;
&lt;h2 id=&#34;直播效果&#34;&gt;直播效果&lt;/h2&gt;
&lt;p&gt;下面是当晚直播的 zoom 录制的视频直出，已上传到 &lt;a href=&#34;https://www.bilibili.com/video/BV1jK4y1R7Tk&#34;&gt;B 站&lt;/a&gt;，大家可以感受下画面的清晰度还有声音效果，我还是比较满意的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;bilibili.jpg&#34; alt=&#34;Bilibili&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中只有几个小插曲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为我是用的是 AirPods 蓝牙耳机，戴上耳机的时候我无法确定它要连那个设备（我有两个 iPhone、1 个 iPad、1 个 MacBook 都有可能被脸上）活动开始的时候总是连不上 MacBook，一气之下把其他的苹果设备的蓝牙全关掉，只留下 MacBook 的蓝牙开启，这样可以保证连上 MacBook&lt;/li&gt;
&lt;li&gt;说话的时候忘记了把麦克风静音了&lt;/li&gt;
&lt;li&gt;直播大概进行了 1 个小时的时候，zoom 突然断开了 10 几秒钟后又自动重连，总体来说 zoom 会议还是比较稳定的，1 个小时左右的会议应该不会断连&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;直播开始前的检查&#34;&gt;直播开始前的检查&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电脑屏幕分辨率调整为 1440 x 900&lt;/li&gt;
&lt;li&gt;关闭与直播无关的 APP，减少系统资源占用&lt;/li&gt;
&lt;li&gt;电脑设置为勿扰模式&lt;/li&gt;
&lt;li&gt;使用外接麦克风，切勿直接使用电脑内置的麦克风，会收录风扇及键盘杂音，影响音质&lt;/li&gt;
&lt;li&gt;使用外接耳机，如 AirPods&lt;/li&gt;
&lt;li&gt;音频输出调整为多设备输出，其中包括 Sunflower（2ch）和耳机&lt;/li&gt;
&lt;li&gt;Zoom 会议开始前记得点击录像&lt;/li&gt;
&lt;li&gt;会议开始后检查 B 站直播间，确保声音和画质没有问题&lt;/li&gt;
&lt;li&gt;OBS 推流的时候不用录像，因为 zoom 已经在录了&lt;/li&gt;
&lt;li&gt;直播完成后检查 zoom 生成的视频文件并备份&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最后&#34;&gt;最后&lt;/h2&gt;
&lt;p&gt;直播是除了在线下面对面交流以外，可以跟社区及开源爱好者交流最直接最友好的方式，我会时常发起，感谢大家的关注我主持的直播间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://live.bilibili.com/22230973&#34;&gt;云原生社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://live.bilibili.com/23095515&#34;&gt;Istio Service Mesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关注上面的 B 站账号，获取直播推送提醒。关于 B 站直播，如果你有任何问题或者建议请在下面留言。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>新的开始——告别蚂蚁，加入 Tetrate</title>
      <link>https://jimmysong.io/blog/moving-on-from-ant-group/</link>
      <pubDate>Mon, 31 Aug 2020 08:27:17 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/moving-on-from-ant-group/</guid>
      <description>
        
        
        &lt;p&gt;今天是我加入蚂蚁的第 914 天，也是在&lt;a href=&#34;https://www.antgroup.com/&#34;&gt;蚂蚁&lt;/a&gt;的最后一天，明天就是 9 月 1 日了，这一天通常都是学校开学的日子，在阿里巴巴大家都以”同学”相称，明天我将加入 &lt;a href=&#34;https://tetrate.io&#34;&gt;Tetrate&lt;/a&gt;，这也算开始我的新学期吧！&lt;/p&gt;
&lt;h2 id=&#34;蚂蚁阿里巴巴与云原生社区&#34;&gt;蚂蚁/阿里巴巴与云原生社区&lt;/h2&gt;
&lt;p&gt;迄今为止，蚂蚁/阿里巴巴集团对我的职业生涯产生了深远影响，尤其是它的企业文化和价值观，阿里巴巴招聘的理念的“寻找同路人”，在创建云原生社区的过程，不也是寻找同路人的过程吗？&lt;a href=&#34;https://cloudnative.to&#34;&gt;云原生社区&lt;/a&gt;就像一个小型社会，我不求它有多大的社会价值，只求它可以对个人、对企业、对社会带来微小而美好的改变。我不断得思考作为个人、员工。尤其是社区的发起人，我的使命到底是什么？我在公司中应该担当什么样的角色？这个社区要走向何方？我在摸索中前进，但是因为有你们的支持，使我更加坚定，致力于云原生技术在中国的普及和应用，以外我一个人可能走得更快，但现在与社区在一起，我们将走得更远！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/v1598752226/images/20190624.jpg&#34; alt=&#34;2019 年 6 月 24 日，上海，KubeCon China 2019&#34;&gt;
&lt;em&gt;2019 年 6 月 24 日，上海，KubeCon China 2019&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;加入-tetrate&#34;&gt;加入 Tetrate&lt;/h2&gt;
&lt;p&gt;在过去的两年里，我一直在着力推广 Istio 和 Service Mesh 技术，在蚂蚁集团的资助下，我创办了 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;ServiceMesher 社区&lt;/a&gt;，将 Service Mesh 技术带到了中国，接下来我希望将中国实践带到世界。当然还有今年疫情期间成立的&lt;a href=&#34;https://cloudnative.to&#34;&gt;云原生社区&lt;/a&gt;，向开发者和大众普及云原生知识和应用。&lt;/p&gt;
&lt;p&gt;作为 Developer Advocate，最重要的一点是不要停止学习，同时要善于倾听和总结。在过去的两年里，我看到无数人对 Service Mesh 表现出浓厚的兴趣，但因对新技术的风险了解的不足及知识匮乏而无从下手。我十分兴奋加入这家专注于 Service Mesh 的初创公司 &lt;a href=&#34;https://tetrate.io&#34;&gt;Tetrate&lt;/a&gt;，这是一家全球化远程办公的初创公司，公司的产品围绕开源 &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt;、&lt;a href=&#34;https://envoyproxy.io&#34;&gt;Envoy&lt;/a&gt; 和 &lt;a href=&#34;https://skywalking.apache.org/&#34;&gt;Apache SkyWalking&lt;/a&gt; 等开源项目构建，致力于打造云原生的网络基础设施。这里有这些开源项目的多位 Maintainer，如 &lt;a href=&#34;https://twitter.com/wusheng1108&#34;&gt;吴晟&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/ZackButcher&#34;&gt;Zack Butcher&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/zlizan&#34;&gt;周礼赞&lt;/a&gt; 等，我相信跟他们一起，可以帮助大家快速、有效的了解和应用 Service Mesh，跨向云原生。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;今年年初在筹备云原生社区的时候，我就确定了未来三年内的工作方向——云原生、开源和社区。在追求梦想的道路上充满荆棘，不仅需要勇气和毅力，还需要你们做我坚强的后盾，我一定披荆斩棘，一往无前。开源是世界的，要想让世界更理解我们，我们必须更加主动地融入这个世界。希望中国开源的明天会更好，希望 Service Mesh 技术在中国更好的落地，希望云原生能够普惠大众，希望大家都可以找到自己的使命。&lt;/p&gt;
&lt;p&gt;Tetrate 目前也在&lt;a href=&#34;https://jimmysong.io/job/tetrate&#34;&gt;招聘&lt;/a&gt;中，欢迎投递简历。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用 GitHub Webhook 实现静态网站自动化部署</title>
      <link>https://jimmysong.io/blog/github-webhook-website-auto-deploy/</link>
      <pubDate>Wed, 10 Jul 2019 13:13:15 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/github-webhook-website-auto-deploy/</guid>
      <description>
        
        
        &lt;p&gt;本文介绍如何为 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;ServiceMesher.com&lt;/a&gt; 网站配置自动化部署的详细说明，通过本文你将了解到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何使用 GitHub Webhook 来自动化发布您的网站&lt;/li&gt;
&lt;li&gt;如何配置 Nginx 代理根据 URI 请求转发到本地服务器的指定端口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自动发布脚本&#34;&gt;自动发布脚本&lt;/h2&gt;
&lt;p&gt;使用名为 &lt;code&gt;deploy.sh&lt;/code&gt; 的 Shell 脚本编译 Hugo 生成 HTML 文件，并放到 Nginx 配置的目录下。该脚本位于 &lt;a href=&#34;https://github.com/servicemesher/website&#34;&gt;ServiceMesher 官网 GitHub 仓库&lt;/a&gt;同级目录下，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 网站的代码仓库目录&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;website&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Nginx 中配置的网站的 HTML 根目录&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/home/admin/servicemesher.com&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;
git pull
hugo
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
cp -r &lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;/public/* &lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;依赖安装&#34;&gt;依赖安装&lt;/h2&gt;
&lt;p&gt;该网站部署在阿里云上，操作系统为 CentOS 7.6.1810，并配置好了 &lt;a href=&#34;https://jimmysong.io/posts/free-certificates-with-certbot&#34;&gt;HTTPS&lt;/a&gt;	。&lt;/p&gt;
&lt;p&gt;安装后端服务配置所需的组件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install -y npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 NPM 包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm i -S github-webhook-handler
npm i -g pm2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建-webhook-服务后端&#34;&gt;创建 webhook 服务后端&lt;/h2&gt;
&lt;p&gt;我们使用 NodeJS 创建 webhook 服务后端，后端代码保存在 &lt;code&gt;webhook.js&lt;/code&gt;文件中，调用 &lt;code&gt;deploy.sh&lt;/code&gt; 来发布，因此需要与 &lt;code&gt;deploy.sh&lt;/code&gt; 文件在同一级目录中，监听 &lt;code&gt;http://127.0.0.1:6666/webhook&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;当前的所有文件的结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls -1
deploy.sh
node_modules
package.json
sofastack.tech
webhook.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;webhook.js&lt;/code&gt; 文件内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;spawn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;github-webhook-handler&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 注意将 secret 修改你自己的
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/webhook&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;yourwebhooksecret&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;no such location&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6666&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Error:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;push&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Received a push event for %s to %s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;runCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./deploy.sh&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;spawn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Deploy OK&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;webhook.js&lt;/code&gt; 所在目录下启动后端服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pm2 start webhook.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看服务状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pm2 status
┌──────────┬────┬─────────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐
│ App name │ id │ version │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │
├──────────┼────┼─────────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤
│ webhook  │ &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  │ 1.0.0   │ fork │ &lt;span class=&#34;m&#34;&gt;30366&lt;/span&gt; │ online │ &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       │ 6h     │ 0%  │ 30.8 MB   │ root │ disabled │
└──────────┴────┴─────────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘
 Use &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;pm2 show &amp;lt;id&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;name&amp;gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; to get more details about an app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;pm2 logs webhook&lt;/code&gt; 可以查看后端服务日志。&lt;/p&gt;
&lt;h2 id=&#34;nginx-配置&#34;&gt;Nginx 配置&lt;/h2&gt;
&lt;p&gt;在 nginx 配置中增加转发设置，将对网站 &lt;code&gt;/webhook&lt;/code&gt; URI 的访问转发到服务器本地的 6666 端口，即 webhook 后端服务商。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# GitHub auto deploy webhook&lt;/span&gt;
        location /webhook &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            proxy_pass http://127.0.0.1:6666&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;github-webhook-配置&#34;&gt;GitHub Webhook 配置&lt;/h2&gt;
&lt;p&gt;在 GitHub 仓库的 &lt;code&gt;Settings&lt;/code&gt; - &lt;code&gt;webhooks&lt;/code&gt; 设置中创建一个新的 webhook。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g4uxl5ioq4j312q0u0ac3.jpg&#34; alt=&#34;GitHub Webhook 配置&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意选择 Content Type 为 &lt;code&gt;application/json&lt;/code&gt;，secret 设置成与 &lt;code&gt;webhook.js&lt;/code&gt; 中的相同。&lt;/p&gt;
&lt;p&gt;配置完成后 GitHub 将自动调用 Webhook 以验证有效性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g4uxnir7ckj316a0ke3zd.jpg&#34; alt=&#34;GitHub 自动触发 Webhook&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果看到 200 响应表示成功调用 Webhook 后端服务，这样每次我们的仓库合并后就会触发网站自动部署。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;为了加强 GitHub 自动化，还有更多 GitHub App 可以使用，推荐：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apps/auto-assign&#34;&gt;auto-assigin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apps/mergify&#34;&gt;mergify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些已经在 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;servicemesher.com&lt;/a&gt; 网站上集成了，感兴趣的读者可以访问 &lt;a href=&#34;https://github.com/servicemesher/website&#34;&gt;ServiceMesher 官网的代码仓库&lt;/a&gt;查看配置。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/index.html&#34;&gt;使用Github的webhooks进行网站自动化部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>使用 Certbot 为网站设置永久免费的 HTTPS 证书</title>
      <link>https://jimmysong.io/blog/free-certificates-with-certbot/</link>
      <pubDate>Fri, 05 Jul 2019 21:10:57 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/free-certificates-with-certbot/</guid>
      <description>
        
        
        &lt;p&gt;我的博客从上线第一天起就使用了 HTTPS，用的是 &lt;a href=&#34;https://www.cloudflare.com/zh-cn/&#34;&gt;Cloudflare&lt;/a&gt;，直接在其后台配置即可。如果你是用 nginx、apache、haproxy 等服务器来运行自己的网站，给大家推荐 &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;Certbot&lt;/a&gt;，可以自动化来配置 SSL 证书和定时更新。&lt;/p&gt;
&lt;p&gt;下面记录我自己为 &lt;a href=&#34;https://www.servicemesher.com&#34;&gt;servicemesher.com&lt;/a&gt; 网站配置 HTTPS 证书的过程，全程不需要 5 分钟。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;网站的托管环境如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS：CentOS 7.6 阿里云&lt;/li&gt;
&lt;li&gt;网站服务器：Nginx，使用 yum 安装，版本 1.12&lt;/li&gt;
&lt;li&gt;提前配置好 Nginx，确保使用 HTTP 先可以访问到网站&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：请使用 &lt;code&gt;yum&lt;/code&gt; 命令安装 nginx，这样可以确保 nginx 安装在默认的位置，因为 certbot 会检测 &lt;code&gt;/etc/nginx/&lt;/code&gt; 目录下的配置文件。&lt;/p&gt;
&lt;h2 id=&#34;操作步骤&#34;&gt;操作步骤&lt;/h2&gt;
&lt;p&gt;执行下面的步骤可以直接为你的网站配置 HTTPS 证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y install yum-utils
yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
yum install certbot python2-certbot-nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下图是在 Certbot 中选择服务器和操作系统的页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;006tNc79ly1g4oqftr4fdj31e20u0gn8.jpg&#34; alt=&#34;CertBot 页面&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行下面的命令，根据提示会自动配置 nginx。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;certbot --nginx
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator nginx, Installer nginx
Starting new HTTPS connection &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: acme-v02.api.letsencrypt.org

Which names would you like to activate HTTPS &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;?
1：servicemesher.com
2: www.servicemsher.com
&lt;span class=&#34;c1&#34;&gt;# 这里直接回车选择所有的域名&lt;/span&gt;
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; all options shown &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Enter &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; to cancel&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
You have an existing certificate that contains a portion of the domains you
requested &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ref: /etc/letsencrypt/renewal/servicemesher.com.conf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

It contains these names: servicemesher.com, www.servicemesher.com

You requested these names &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the new certificate: servicemesher.com,
prow.servicemesher.com, www.servicemesher.com.

Do you want to expand and replace this existing certificate with the new
certificate?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;E&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;xpand/&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;C&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;ancel: E
Renewing an existing certificate
Performing the following challenges:
http-01 challenge &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; prow.servicemesher.com
Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; verification...
Cleaning up challenges
Deploying Certificate to VirtualHost /etc/nginx/nginx.conf
Deploying Certificate to VirtualHost /etc/nginx/nginx.conf
Deploying Certificate to VirtualHost /etc/nginx/nginx.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;
new sites, or &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; you&lt;span class=&#34;s1&#34;&gt;&amp;#39;re confident your site works on HTTPS. You can undo this
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;change by editing your web server&amp;#39;&lt;/span&gt;s configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1-2&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;enter&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;press &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; to cancel&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;span class=&#34;c1&#34;&gt;# 这里是为了扩展证书支持更多的域名，所有输入 2 回车&lt;/span&gt;
Traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; already redirecting to ssl in /etc/nginx/nginx.conf
Redirecting all traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; to ssl in /etc/nginx/nginx.conf
Traffic on port &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; already redirecting to ssl in /etc/nginx/nginx.conf

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Your existing certificate has been successfully renewed, and the new certificate
has been installed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后重新加载配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nginx -t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置证书自动更新。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0 0,12 * * * root python -c &amp;#39;import random; import time; time.sleep(random.random() * 3600)&amp;#39; &amp;amp;&amp;amp; certbot renew&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/crontab &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了现在访问你的网站就可以看到 https 头部加了 HTTPS 锁了。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xs18952904/article/details/79262646&#34;&gt;让网站永久拥有HTTPS - 申请免费SSL证书并自动续期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://certbot.eff.org/lets-encrypt/centosrhel7-nginx&#34;&gt;certbot - 免费的 https 证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>软件定义交付（SDD）宣言</title>
      <link>https://jimmysong.io/blog/software-defined-delivery-manifesto/</link>
      <pubDate>Fri, 30 Nov 2018 19:06:35 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/software-defined-delivery-manifesto/</guid>
      <description>
        
        
        &lt;p&gt;今天给大家分享的是《软件定义交付宣言》，该宣言发出已经有一周多时间了，目前该宣言的官方网站（&lt;a href=&#34;https://sdd-manifesto.org/&#34;&gt;https://sdd-manifesto.org/&lt;/a&gt;）还在联署签名中。&lt;/p&gt;
&lt;p&gt;云原生通过不可变基础设施与声明式配置，作为了软件定义交付的基础，再假以持续交付工具可以极大的提高软件交付效率，本宣言的起草者中包含众多云原生理念的鉴定拥护者如 Kenny Bastani、Matt Stine 等。&lt;/p&gt;
&lt;p&gt;该宣言通过 GitHub 协作草拟（&lt;a href=&#34;https://github.com/sdd-manifesto/manifesto&#34;&gt;https://github.com/sdd-manifesto/manifesto&lt;/a&gt;），仍未达到1.0版本。下面是《软件定义交付宣言》的中文版。&lt;/p&gt;
&lt;h2 id=&#34;软件定义交付宣言&#34;&gt;软件定义交付宣言&lt;/h2&gt;
&lt;p&gt;我们从日常生产和实践中认识到软件塑造了我们的世界。我们认识到代码才是指定精确操作的最佳方式。我们认识到代码仅在被交付时才有用。&lt;/p&gt;
&lt;p&gt;开发的软件被能够被交付出去就软件本身存在的目的。现在是时候将我们的核心技能应用到实际的工作中去了。是时候对交付去做出 &lt;em&gt;设计&lt;/em&gt; 了。我们将区别人类和计算机在交付工作中承担的作用：人类做决策，计算机来完成自动化任务。&lt;/p&gt;
&lt;p&gt;每一次交付工作本质上都是独一无二的。应用程序、组织、部署环境和团队组合千差万别。我们认识到每个团队都需要能够理解这种交付的独特性和对交付做自动化。我们认识到，虽然持续交付对满足业务需求至关重要，但自动执行所有重复任务也非常重要。&lt;/p&gt;
&lt;p&gt;我们使用与加速应用程序开发类似的方式来加速软件交付：使用现代架构和编程语言，通用功能的框架、库和服务。&lt;/p&gt;
&lt;p&gt;交付基础设施现在是可编程的，我们将对其进行编程。&lt;/p&gt;
&lt;h2 id=&#34;软件定义交付是指&#34;&gt;软件定义交付是指&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;核心&lt;/strong&gt;：交付是每个软件团队和组织的基础和战略能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优先&lt;/strong&gt;：交付的代码是生产代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;战略&lt;/strong&gt;：决定团队和组织层面的策略；在代码中实现精确控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不断发展&lt;/strong&gt;：不断改进交付。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工程设计&lt;/strong&gt;：强大，可测试的代码。70年代的脚本语言是不够的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现代软件架构&lt;/strong&gt;：事件驱动和可扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现代编程语言&lt;/strong&gt;：逻辑最好用代码指定，而不是图片或GUI。脚本不好扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于模型&lt;/strong&gt;：由软件领域的模型支持，具有对代码的理解。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可测试&lt;/strong&gt;：在生产之前启用小规模应用以发现错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;协作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从群众中来&lt;/strong&gt;：所有人都可以在代码中表述自己的专业知识，这对大家都有利。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;到软件中去&lt;/strong&gt;：使用最好的工具，但将它们结合起来之后就是独一无二的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在人与软件之间&lt;/strong&gt;：协同自动化可以增强我们的感知和帮助我们做决策。将信息落实到行动，使我们能够体察软件的自动化行为。通过代码来区分团队的共享交付目标集及其实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加速&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过自动化&lt;/strong&gt;：自动执行重复任务，加快了工作速度还可以避免错误发生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过重用&lt;/strong&gt;：在开发人员、团队和组织之间共享通用功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可观察性&lt;/strong&gt;：通常用于观察和排除作为生产系统的交付过程中发生的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跟踪&lt;/strong&gt;：观察系统中的活动并跟踪操作之间的关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试&lt;/strong&gt;：检查和与交付流程交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指标&lt;/strong&gt;：在整个交付流程的活动中获取指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：(姓氏按字母顺序排列）：本宣言由 Kenny Bastani、Marc Holmes、Rod Johnson、Jessica Kerr、Mik Kersten、Russ Miles、Erin Schnabel、Matt Stine 及其他社区成员草拟。&lt;/p&gt;
&lt;p&gt;©2018，上述作者和本声明可以任何形式自由复制，但需全文复制本声明。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>KubeCon&amp;CloudNativeCon China 2018</title>
      <link>https://jimmysong.io/blog/kubecon-cloudnativecon-china-2018/</link>
      <pubDate>Fri, 16 Nov 2018 13:40:38 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/kubecon-cloudnativecon-china-2018/</guid>
      <description>
        
        
        &lt;p&gt;本次大会光面基了，很多 topic 都没来得及听。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kubecon-shanghai-2018-group.jpg&#34; alt=&#34;KubeCon&amp;CloudNativeCon China 上海 2018&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图中由上自下的大合影是：ServiceMesher 社区上海聚首合影；中美日的Kubernetes、Envoy、Istio、Apache Skywalking、ServiceMesher社区在KubeCon上海；Yahoo Japan 与蚂蚁集团团队在上海中心办公室合影。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;活动&#34;&gt;活动&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Meet the Ambassadors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参加了一场 &lt;strong&gt;Meet the Ambassadors&lt;/strong&gt; 采访，第一次参加英文的采访，本来准备的英文回答没用上，现场反而还紧张了。。。工作人员的摄像机又没就位，我还充当了摄影师（本色出演）。一共采访了四位中国的 Ambassador。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jiayao (Julia) Han, Caicloud&lt;/li&gt;
&lt;li&gt;Jia Xuan, China Mobile Research Institute&lt;/li&gt;
&lt;li&gt;Jimmy Song, Ant Group&lt;/li&gt;
&lt;li&gt;Jessie Qian, Alauda&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的名字不约而同的都是 J 字头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service Mesh Roundtable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后参加了一场 Service Mesh Roundtable，参加人员有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jimmy Song, Developer Advocate on Cloud Native at Ant Group&lt;/li&gt;
&lt;li&gt;Yulin Son, Principal Architect at Huawei&lt;/li&gt;
&lt;li&gt;George Miranda, PagerDuty&lt;/li&gt;
&lt;li&gt;Nic Jackson, Developer Advocate at HashiCorp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们就 Service Mesh 的现状，存在的问题后未来进行了广泛的探讨。&lt;/p&gt;
&lt;h2 id=&#34;ppt&#34;&gt;PPT&lt;/h2&gt;
&lt;p&gt;KubeCon China 会议的很多 PPT 在&lt;a href=&#34;https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2018/schedule-chinese/&#34;&gt;大会的官网&lt;/a&gt;上都可以下载，或者通过&lt;a href=&#34;https://pan.baidu.com/s/1oihwETA063WSFyigWsn8Mw&#34;&gt;百度网盘&lt;/a&gt;下载 zip 包，提取码：&lt;strong&gt;5vn0&lt;/strong&gt;。或者通过&lt;a href=&#34;https://github.com/bbotte/cncf-presentations/tree/master/KubeCon%2BCloudNativeCon-2018&#34;&gt;GitHub&lt;/a&gt;下载单个 PPT。&lt;/p&gt;
&lt;h2 id=&#34;飞行&#34;&gt;飞行&lt;/h2&gt;
&lt;p&gt;在会场随便一坐，就能遇到熟人。还有很多我都叫不上名字的人来打招呼，不能一一道谢了，感谢晚餐以及收到的Prometheus飞行袜。&lt;/p&gt;
&lt;p&gt;11月12日晚在上海静安寺上空飞行，航拍的南京西路夜景。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

      </description>
    </item>
    
    <item>
      <title>如何翻译一本外文书</title>
      <link>https://jimmysong.io/blog/how-to-translate-a-book/</link>
      <pubDate>Fri, 27 Oct 2017 22:55:43 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/how-to-translate-a-book/</guid>
      <description>
        
        
        &lt;p&gt;截止本文发稿时，笔者是以下两本云原生图书的译者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go&#34;&gt;Cloud Native Go&lt;/a&gt;：已由电子工业出版社出版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-python&#34;&gt;Cloud Native Python&lt;/a&gt;：正在翻译中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时我还参与了 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;、&lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; 的文档翻译，撰写了开源电子书 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook&#34;&gt;kubernetes-handbook&lt;/a&gt;，下面是我本人在翻译过程中的的一些心得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：本文中使用的方法仅供参考，机器翻译有助您快速了解全书或文章的梗概，请勿直接使用机器翻译结果输出。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;图书引进&#34;&gt;图书引进&lt;/h2&gt;
&lt;h3 id=&#34;1-联系出版社&#34;&gt;1. 联系出版社&lt;/h3&gt;
&lt;p&gt;假如您看到一本很好的外文书籍想要翻译，首先需要联系出版社，询问该书是否已被引进，因为每年国内引进的外文书籍是有数量控制的，而且有的书也不是你先给引进就可以引进的，每年都有版权引进会议，国内的出版社统一参加确定引进的书籍，哪家引进多少本，哪一本分给哪一家等。可以与出版社编辑沟通，查看该书是否可以引进，是否已经有别的出版社引进且在翻译中，这个过程基本不需要你与原作者沟通。&lt;/p&gt;
&lt;h3 id=&#34;2-取得图书引进的版权&#34;&gt;2. 取得图书引进的版权&lt;/h3&gt;
&lt;p&gt;如果很幸运的，这本书可以引进到国内，而且还没有人来翻译，可以跟出版社编辑要求翻译这本书，如果书籍内容适当可以一个人翻译，如果内容较多可以分多个人翻译，建议人数不要超过 4 人。&lt;/p&gt;
&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;/h2&gt;
&lt;p&gt;首先需要准备如下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;：用户版本管理，也方便在线查看，我使用 &lt;a href=&#34;https://gitee.com&#34;&gt;码云&lt;/a&gt; 私有代码库管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown 编辑器&lt;/strong&gt;：我推荐使用 &lt;a href=&#34;https://typora.io&#34;&gt;typora&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gitbook&lt;/strong&gt;：使用 &lt;a href=&#34;https://gitbook.com&#34;&gt;Gitbook&lt;/a&gt; 生成 web 页面便于阅读和查看，注意不要公开发布到 Github 上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word&lt;/strong&gt;：虽然我们使用 markdown 编辑器来编辑，但是 word 还是需要的，因为编辑会在 word 中批注，再返回给你修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Translation-shell&lt;/strong&gt;：命令行翻译工具，见 &lt;a href=&#34;https://github.com/soimort/translate-shell&#34;&gt;Github&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;翻译过程&#34;&gt;翻译过程&lt;/h2&gt;
&lt;p&gt;以下是我个人总结的图书翻译流程，仅供参考。&lt;/p&gt;
&lt;h3 id=&#34;1-分析原版压缩包的结构&#34;&gt;1. 分析原版压缩包的结构&lt;/h3&gt;
&lt;p&gt;以 &lt;a href=&#34;https://jimmysong.io/book/cloud-native-python&#34;&gt;Cloud Native Python&lt;/a&gt; 这本书为例，原文的压缩包里包含以下目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt;：书中的代码示例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cover&lt;/strong&gt;：本书的封面图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E-Book&lt;/strong&gt;：本书的完成 PDF 文档（一个文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graphics&lt;/strong&gt;：书中的图片，按照章节和顺序编号，放在一个目录下，不一定与图片在书中出现的顺序相同，有些后来补充的图片会另外编号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Printers&lt;/strong&gt;：用于印刷的 PDF 文档，分为封面和正文&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-初始化翻译项目&#34;&gt;2. 初始化翻译项目&lt;/h3&gt;
&lt;p&gt;我们使用 Git 来管理，使用 Gitbook 来预览，需要先初始化一些目录结构和 gitbook 配置。&lt;/p&gt;
&lt;p&gt;初始化的目录和文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LANGS.md&lt;/strong&gt;：语言配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;README.md&lt;/strong&gt;：项目说明&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;book.json&lt;/strong&gt;：gitbook 配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cn&lt;/strong&gt;：中文翻译（按章节划分成不同的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;corrigendum.md&lt;/strong&gt;：勘误表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cover.jpg&lt;/strong&gt;：书籍封面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;en&lt;/strong&gt;：英文原文（按章节划分成不同的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;glossary.md&lt;/strong&gt;：术语表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images&lt;/strong&gt;：保存书中的图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让 Gitbook 支持多语言的 &lt;code&gt;book.json&lt;/code&gt; 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cloud Native Python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cloud Native Python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zh-hans&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Jimmy Song&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;links&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;sidebar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://jimmysong.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;codesnippet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;splitter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;page-toc-button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;back-to-top-button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-lunr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-search&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;search-plus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;tbfed-pagefooter@^0.0.1&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;pluginsConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;tbfed-pagefooter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Copyright © jimmysong.io 2017&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;modify_label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Updated:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;modify_format&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YYYY-MM-DD HH:mm:ss&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;​&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;文&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;件&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;定&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;义&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;不&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;同&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;言&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;文&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;件&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;目&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;录&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;​&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;文&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-原文-markdown-化&#34;&gt;3. 原文 Markdown 化&lt;/h3&gt;
&lt;p&gt;之所以将原文 Markdown 化一是便于我们后续翻译的时候对照英文和引用其中的原文，二是为了生成 gitbook 便于浏览。将每一章的内容都划分成一个 Markdown 文件，按照章节的名字为文档命名，分别在 &lt;code&gt;cn&lt;/code&gt; 和 &lt;code&gt;en&lt;/code&gt; 目录下都放一份。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cloud-native-python-cn-en.jpg&#34; alt=&#34;中英文目录&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-开始正文的翻译&#34;&gt;4. 开始正文的翻译&lt;/h3&gt;
&lt;p&gt;建议从头开始按顺序翻译，如果前后章节联系不大的可以跳跃翻译，翻译的过程中将一些关键的术语，包括翻译不明确的，需要后续参考的数据记录在 &lt;code&gt;glossary.md&lt;/code&gt; 文档中。&lt;/p&gt;
&lt;p&gt;格式如下所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;English&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;是否翻译&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cross-Origin Resource Sharing&lt;/td&gt;
&lt;td&gt;跨源资源共享&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP header&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Observable&lt;/td&gt;
&lt;td&gt;观察者&lt;/td&gt;
&lt;td&gt;可以不翻译，中文翻译比较模糊&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cookies&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不翻译，保持复数&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module&lt;/td&gt;
&lt;td&gt;模块&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;origin&lt;/td&gt;
&lt;td&gt;源&lt;/td&gt;
&lt;td&gt;有争议&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;会话&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以不断向其中追加新的术语。&lt;/p&gt;
&lt;p&gt;翻译的过程中需要用到翻译工具，我使用的是 &lt;a href=&#34;https://github.com/soimort/translate-shell&#34;&gt;translation-shell&lt;/a&gt;，一款基于命令行的翻译工具，可以使用 Google、bing 或者 Yandex 翻译，十分方便快捷。也推荐大家使用 &lt;a href=&#34;https://www.deepl.com/&#34;&gt;DeepL&lt;/a&gt;，翻译效果更好。&lt;/p&gt;
&lt;p&gt;注：使用翻译工具是为了将书籍快速汉化，减少大量的人工输入，但是因为机器翻译比较生硬，而且其中难免有错误，需要译者投入大量心思去优化。&lt;/p&gt;
&lt;h4 id=&#34;translation-shell&#34;&gt;Translation-shell&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;trans :zh -b -shell&lt;/code&gt; 进入 translation-shell 交互式界面，拷贝英文段落进去翻译成中文。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;translation-trans-terminal.jpg&#34; alt=&#34;Translation-shell&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用-typora-编辑中文翻译&#34;&gt;使用 Typora 编辑中文翻译&lt;/h4&gt;
&lt;p&gt;同时打开 &lt;code&gt;en&lt;/code&gt; 和 &lt;code&gt;cn&lt;/code&gt; 目录下的同一章节开始翻译。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;translation-typora-multi-language.jpg&#34; alt=&#34;中英文翻译界面&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;在-gitbook-中查看&#34;&gt;在 Gitbook 中查看&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;gitbook serve&lt;/code&gt; 启用 gitbook 服务，在 http://localhost:4000 页面上查看内容。&lt;/p&gt;
&lt;p&gt;首先会出来语言选择页面，我们可以分别选择中文和英文内容浏览，语言是在 &lt;code&gt;LAGNS.md&lt;/code&gt; 文件中定义的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;translation-gitbook-cn-en.jpg&#34; alt=&#34;Gitbook&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;导出为不同格式&#34;&gt;导出为不同格式&lt;/h4&gt;
&lt;p&gt;使用 typora 编辑完中文翻译后，可以导出为 pdf、word 等其它格式，我们导出为 word 格式后发送给编辑批阅。&lt;/p&gt;
&lt;p&gt;生成的 word 内容格式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;translation-word-cn.jpg&#34; alt=&#34;word 文档格式&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到生产的 word 文档仍然保留了代码的高亮，而且可读性也很好。&lt;/p&gt;
&lt;h3 id=&#34;5-审校&#34;&gt;5. 审校&lt;/h3&gt;
&lt;p&gt;每当翻译完一章内容后就发送给编辑，编辑会使用 word 进行审校批注，根据编辑的批注修改后再发回给编辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;translation-word-review.jpg&#34; alt=&#34;word review 界面&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-二审&#34;&gt;6. 二审&lt;/h3&gt;
&lt;p&gt;当所有的章节分别翻译和审校完成后，需要在通读一遍全书，更正前后不一致和翻译中的谬误，然后交给编辑等待排版。这时候还要准备写译者序，还要找人写推荐序。翻译版的图书封面会沿用原书的封面。&lt;/p&gt;
&lt;h3 id=&#34;7-印刷&#34;&gt;7. 印刷&lt;/h3&gt;
&lt;p&gt;当正文、译者序、推荐序都完成后就可以交给出版社印刷了，一般初次会印刷几千本。&lt;/p&gt;
&lt;h3 id=&#34;8-后续事宜&#34;&gt;8. 后续事宜&lt;/h3&gt;
&lt;p&gt;书籍印刷后后续事宜主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社支付稿费：翻译图书稿费 = 图书销量 x 定价 x4%，著作一般为 8%&lt;/li&gt;
&lt;li&gt;配合图书宣传：一些 meetup、大会、线上交流时推荐图书&lt;/li&gt;
&lt;li&gt;读者交流：可以开设社区、微信群、网站等交流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;贴士&#34;&gt;贴士&lt;/h2&gt;
&lt;p&gt;图书翻译耗时费力，倾注了原作者和译者的很多心力，打击盗版，维护正版！&lt;/p&gt;
&lt;h2 id=&#34;有用的链接&#34;&gt;有用的链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.termonline.cn/index.htm&#34;&gt;术语在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1289408/&#34;&gt;非文学翻译理论与实践 - 王长栓&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>记Kubernetes中国用户大会KEUC2017</title>
      <link>https://jimmysong.io/blog/keuc-china-2017/</link>
      <pubDate>Sat, 14 Oct 2017 19:32:46 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/keuc-china-2017/</guid>
      <description>
        
        
        &lt;p&gt;今天有幸受k8smeetup社区邀请来到杭州，参加Kubernetes中国用户大会简称&lt;a href=&#34;http://keuc.k8smeetup.com/&#34;&gt;KEUC&lt;/a&gt;，这已经是我第三次来杭州了，算是再续前缘吧！&lt;/p&gt;
&lt;p&gt;其实今年6月19日LinuxCon + ContainerCon + CloudOpen简称&lt;a href=&#34;https://www.bagevent.com/event/561769&#34;&gt;L3大会&lt;/a&gt;在北京国家会议中心召开，那是我跟&lt;a href=&#34;https://cncf.io&#34;&gt;CNCF&lt;/a&gt; 首次相会，也获得了我的首批sticker，该社区的一系列活动吸引了我浓浓的兴趣，自那以后开始持续关注CNCF 的社区活动。&lt;/p&gt;
&lt;p&gt;借用孙中山先生在黄埔军校的训词，愿Kubernetes携手云原生应用，让IT基础设施和软件开发流程进入新的纪元。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生主义歌&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;库巴内提，吾辈所宗；携云原生，以进大同。&lt;/p&gt;
&lt;p&gt;咨尔多士，为民前锋；夙夜匪懈，主义是从。&lt;/p&gt;
&lt;p&gt;创业维艰，矢勤矢勇；同心共德，贯彻始终。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;祝愿明天的大会圆满成功！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天不小心获得了k8smeetup最佳技术专栏作者和社区最佳译者奖，感谢CNCF和k8smeetup社区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/kubc-translator.jpg&#34; alt=&#34;k8smeetup译者&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后跟CNCF执行副总裁探讨了下Cloud Native在中国的推广，明年在中国会有Cloud Native相关大会。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/keuc-with-dan-kohn.JPG&#34; alt=&#34;with Dan Kohn&#34;&gt;&lt;/p&gt;
&lt;p&gt;欢迎大家持续关注Cloud Native的发展。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>使用API blueprint创建API文档</title>
      <link>https://jimmysong.io/blog/creating-api-document-with-api-blueprint/</link>
      <pubDate>Fri, 23 Jun 2017 12:24:12 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/creating-api-document-with-api-blueprint/</guid>
      <description>
        
        
        &lt;p&gt;在进行微服务开发的过程中，为了保证最终开发的系统跟最初的设计保持一致，约定RESTful接口之间的调用方法，我们需要将API设计文档化，因此我们引入了API Blueprint。&lt;/p&gt;
&lt;h2 id=&#34;api-blueprint-是什么&#34;&gt;API Blueprint 是什么&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://apiblueprint.org/&#34;&gt;API Blueprint&lt;/a&gt; 用来编写API文档的一种标记语言，类似于Markdown，因为是纯文本的，所以方便共享编辑，具体的语法规则可以在 &lt;a href=&#34;https://apiblueprint.org/documentation/&#34;&gt;API Blueprint documentation&lt;/a&gt; 查看，配合一些开源的工具可以把接口文档渲染成 html 再搭配一个静态服务器，方便于分享。&lt;/p&gt;
&lt;p&gt;另外，配合一些工具，可以直接生成一个 mock data 数据，这样只要和后端的同学约定好接口格式，那么前端再开发的时候可以使用 mock data 数据来做测试，等到后端写好接口之后再做联调就可以了。&lt;/p&gt;
&lt;p&gt;我们以&lt;a href=&#34;https://jimmysong.io/cloud-native-go&#34;&gt;Cloud Native Go&lt;/a&gt;书中的&lt;a href=&#34;https://github.com/rootsongjc/gogo-service&#34;&gt;gogo-service&lt;/a&gt;示例里的&lt;code&gt;apiary.apib&lt;/code&gt;文件为例。&lt;/p&gt;
&lt;p&gt;该文件实际上是一个Markdown格式的文件，Github中原生支持该文件，使用&lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt;打开后是这样子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/apiary-api-blueprint.jpg&#34; alt=&#34;apiary.apib文件&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Visual Studio Code中有个API Element extension对于API Blueprint文件的支持也比较好。&lt;/p&gt;
&lt;h2 id=&#34;生成静态页面和进行冒烟测试&#34;&gt;生成静态页面和进行冒烟测试&lt;/h2&gt;
&lt;p&gt;我们分别使用开源的&lt;a href=&#34;https://github.com/danielgtaylor/aglio&#34;&gt;aglio&lt;/a&gt;和&lt;a href=&#34;https://github.com/Aconex/drakov&#34;&gt;drakov&lt;/a&gt;来生成静态页面和进行冒烟测试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/danielgtaylor/aglio&#34;&gt;aglio&lt;/a&gt; 是一个可以根据 api-blueprint 的文档生成静态 HTML 页面的工具。&lt;/p&gt;
&lt;p&gt;其生成的工具不是简单的 markdown 到 html 的转换, 而是可以生成类似 rdoc 这样的拥有特定格式风格的查询文档。&lt;/p&gt;
&lt;p&gt;在本地安装有node环境的情况下，使用下面的命令安装和使用aglio。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ npm install -g aglio
$ aglio -i apiary.apib -o api.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开api.html文件后，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/api-blueprint-html.jpg&#34; alt=&#34;使用aglio生成的API文档&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装和使用drakov。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ npm install -g drakov
$ drakov -f apiary.apib -p &lt;span class=&#34;m&#34;&gt;3000&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;INFO&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; No configuration files found
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;INFO&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Loading configuration from CLI
   DRAKOV STARTED   
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches List All Matches
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: POST /matches Start a New Match
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id Get Match Details
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id Get Current Liberties &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Match
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id Get Current Chains &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Match
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: GET /matches/:match_id/moves Get a Sequential List of All Moves Performed in a Match
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;LOG&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Setup Route: POST /matches/:match_id/moves Make a Move
   Drakov 1.0.4      Listening on port &lt;span class=&#34;m&#34;&gt;3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;http://localhost:3000&lt;/code&gt;就可以对该应用进行冒烟测试了。&lt;/p&gt;
&lt;p&gt;例如查询有哪些match：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl http://localhost:3000/matches
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span class=&#34;s2&#34;&gt;&amp;#34;5a003b78-409e-4452-b456-a6f0dcee05bd&amp;#34;&lt;/span&gt;,
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;started_at&amp;#34;&lt;/span&gt;: 13231239123391,
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;turn&amp;#34;&lt;/span&gt; : 27,
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;gridsize&amp;#34;&lt;/span&gt; : 19,
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;playerWhite&amp;#34;&lt;/span&gt; : &lt;span class=&#34;s2&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;,
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;playerBlack&amp;#34;&lt;/span&gt; : &lt;span class=&#34;s2&#34;&gt;&amp;#34;alfred&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外通过&lt;a href=&#34;https://apiary.io&#34;&gt;Apiary&lt;/a&gt;这个网站，我们可以直接以上的所有功能，还可以同时在页面上进行mock test，生成多种语言的code example。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/apiary-gogo-service.jpg&#34; alt=&#34;Apiary页面&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>开源微服务管理平台fabric8简介</title>
      <link>https://jimmysong.io/blog/fabric8-introduction/</link>
      <pubDate>Mon, 10 Apr 2017 21:39:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/fabric8-introduction/</guid>
      <description>
        
        
        &lt;p&gt;无意中发现&lt;a href=&#34;https://github.com/fabric8io/fabric8&#34;&gt;Fabric8&lt;/a&gt;这个&lt;strong&gt;对于Java友好的开源微服务管理平台&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实这在这里发现的&lt;a href=&#34;http://blog.sonatype.com/achieving-ci/cd-with-kubernetes&#34;&gt;Achieving CI/CD with Kubernetes&lt;/a&gt;（by Ramit Surana,on February 17, 2017），其实是先在&lt;a href=&#34;https://www.slideshare.net/ramitsurana/achieving-cicd-with-kubernetes&#34;&gt;slideshare&lt;/a&gt;上看到的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://fabric8.io/images/fabric8_logo.svg&#34; alt=&#34;fabric8&#34;&gt;&lt;/p&gt;
&lt;p&gt;大家可能以前听过一个叫做&lt;a href=&#34;https://github.com/fabric/fabric/&#34;&gt;fabric&lt;/a&gt;的工具，那是一个 Python (2.5-2.7) 库和命令行工具，用来流水线化执行 SSH 以部署应用或系统管理任务。所以大家不要把fabric8跟fabric搞混，虽然它们之间有一些共同点，但两者完全不是同一个东西，&lt;strong&gt;fabric8不是fabric的一个版本&lt;/strong&gt;。Fabric是用python开发的，fabric8是java开发的。&lt;/p&gt;
&lt;p&gt;如果你想了解简化Fabric可以看它的&lt;a href=&#34;http://fabric-docs-cn.readthedocs.io/zh_CN/latest/tutorial.html&#34;&gt;中文官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;fabric8简介&#34;&gt;Fabric8简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;fabric8&lt;/strong&gt;是一个开源&lt;strong&gt;集成开发平台&lt;/strong&gt;，为基于&lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;和&lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;的微服务提供&lt;a href=&#34;http://fabric8.io/guide/cdelivery.html&#34;&gt;持续发布&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用fabric可以很方便的通过&lt;a href=&#34;http://fabric8.io/guide/cdelivery.html&#34;&gt;Continuous Delivery pipelines&lt;/a&gt;创建、编译、部署和测试微服务，然后通过Continuous Improvement和&lt;a href=&#34;http://fabric8.io/guide/chat.html&#34;&gt;ChatOps&lt;/a&gt;运行和管理他们。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://fabric8.io/guide/fabric8DevOps.html&#34;&gt;Fabric8微服务平台&lt;/a&gt;提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/console.html&#34;&gt;Developer Console&lt;/a&gt;，是一个&lt;a href=&#34;http://www.infoq.com/cn/news/2014/11/seven-principles-rich-web-app&#34;&gt;富web应用&lt;/a&gt;，提供一个单页面来创建、编辑、编译、部署和测试微服务。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/cdelivery.html&#34;&gt;Continuous Integration and Continous Delivery&lt;/a&gt;，使用 &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt; with a &lt;a href=&#34;http://fabric8.io/guide/jenkinsWorkflowLibrary.html&#34;&gt;Jenkins Workflow Library&lt;/a&gt;更快和更可靠的交付软件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/management.html&#34;&gt;Management&lt;/a&gt;，集中式管理&lt;a href=&#34;http://fabric8.io/guide/logging.html&#34;&gt;Logging&lt;/a&gt;、&lt;a href=&#34;http://fabric8.io/guide/metrics.html&#34;&gt;Metrics&lt;/a&gt;, &lt;a href=&#34;http://fabric8.io/guide/chat.html&#34;&gt;ChatOps&lt;/a&gt;、&lt;a href=&#34;http://fabric8.io/guide/chaosMonkey.html&#34;&gt;Chaos Monkey&lt;/a&gt;，使用&lt;a href=&#34;http://hawt.io/&#34;&gt;Hawtio&lt;/a&gt;和&lt;a href=&#34;http://jolokia.org/&#34;&gt;Jolokia&lt;/a&gt;管理Java Containers。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/ipaas.html&#34;&gt;Integration&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;em&gt;Integration Platform As A Service&lt;/em&gt;&lt;!-- raw HTML omitted --&gt; with &lt;a href=&#34;http://fabric8.io/guide/console.html&#34;&gt;deep visualisation&lt;/a&gt; of your &lt;a href=&#34;http://camel.apache.org/&#34;&gt;Apache Camel&lt;/a&gt; integration services, an &lt;a href=&#34;http://fabric8.io/guide/apiRegistry.html&#34;&gt;API Registry&lt;/a&gt; to view of all your RESTful and SOAP APIs and &lt;a href=&#34;http://fabric8.io/guide/fabric8MQ.html&#34;&gt;Fabric8 MQ&lt;/a&gt; provides &lt;!-- raw HTML omitted --&gt;&lt;em&gt;Messaging As A Service&lt;/em&gt;&lt;!-- raw HTML omitted --&gt; based on &lt;a href=&#34;http://activemq.apache.org/&#34;&gt;Apache ActiveMQ&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/tools.html&#34;&gt;Java Tools&lt;/a&gt; 帮助Java应用使用&lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/mavenPlugin.html&#34;&gt;Maven Plugin&lt;/a&gt; for working with &lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; ，这真是极好的&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/testing.html&#34;&gt;Integration and System Testing&lt;/a&gt; of &lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; resources easily inside &lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt; with &lt;a href=&#34;http://arquillian.org/&#34;&gt;Arquillian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/javaLibraries.html&#34;&gt;Java Libraries&lt;/a&gt; and support for &lt;a href=&#34;http://fabric8.io/guide/cdi.html&#34;&gt;CDI&lt;/a&gt; extensions for working with &lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fabric8微服务平台&#34;&gt;Fabric8微服务平台&lt;/h2&gt;
&lt;p&gt;Fabric8提供了一个完全集成的开源微服务平台，可在任何的&lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;和&lt;a href=&#34;http://www.openshift.org/&#34;&gt;OpenShift&lt;/a&gt;环境中开箱即用。&lt;/p&gt;
&lt;p&gt;整个平台是基于微服务而且是模块化的，你可以按照微服务的方式来使用它。&lt;/p&gt;
&lt;p&gt;微服务平台提供的服务有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者控制台，这是一个富Web应用程序，它提供了一个单一的页面来创建、编辑、编译、部署和测试微服务。&lt;/li&gt;
&lt;li&gt;持续集成和持续交付，帮助团队以更快更可靠的方式交付软件，可以使用以下开源软件：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;：CI／CD pipeline&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sonatype.org/nexus/&#34;&gt;Nexus&lt;/a&gt;： 组件库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gogs.io/&#34;&gt;Gogs&lt;/a&gt;：git代码库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt;：代码质量维护平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/jenkinsWorkflowLibrary.html&#34;&gt;Jenkins Workflow Library&lt;/a&gt;：在不同的项目中复用&lt;a href=&#34;https://github.com/fabric8io/jenkins-workflow-library&#34;&gt;Jenkins Workflow scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/fabric8YmlFile.html&#34;&gt;Fabric8.yml&lt;/a&gt;：为每个项目、存储库、聊天室、工作流脚本和问题跟踪器提供一个配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/chat.html&#34;&gt;ChatOps&lt;/a&gt;：通过使用&lt;a href=&#34;https://hubot.github.com/&#34;&gt;hubot&lt;/a&gt;来开发和管理，能够让你的团队拥抱DevOps，通过聊天和系统通知的方式来&lt;a href=&#34;https://github.com/fabric8io/fabric8-jenkins-workflow-steps#hubotapprove&#34;&gt;approval of release promotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/chaosMonkey.html&#34;&gt;Chaos Monkey&lt;/a&gt;：通过干掉&lt;a href=&#34;http://fabric8.io/guide/pods.html&#34;&gt;pods&lt;/a&gt;来测试系统健壮性和可靠性&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/management.html&#34;&gt;管理&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/logging.html&#34;&gt;日志&lt;/a&gt; 统一集群日志和可视化查看状态&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/metrics.html&#34;&gt;metris&lt;/a&gt; 可查看历史metrics和可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hao.jobbole.com/fabric8/&#34;&gt;fabric8：容器集成平台——伯乐在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI0NjI4MDg5MQ==&amp;amp;mid=2715290731&amp;amp;idx=1&amp;amp;sn=f1fcacb9aa4f1f3037918f03c29c0465&amp;amp;chksm=cd6d0bbffa1a82a978ccc0405afa295bd9265bd9f89f2217c80f48e1c497b25d1f24090108af&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0410RTk3PKkxlFlLbCVlOKMK#rd&#34;&gt;Kubernetes部署微服务速成指南——&lt;em&gt;2017-03-09&lt;/em&gt; &lt;em&gt;徐薛彪&lt;/em&gt; 容器时代微信公众号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fabric8.io/&#34;&gt;fabric8官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fabric8.io/guide/getStarted/gofabric8.html&#34;&gt;fabric8 get started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;我在自己笔记本上装了个minikube，试玩感受将在后续发表。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;试玩时需要科学上网。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$gofabric8&lt;/span&gt; start
using the executable /usr/local/bin/minikube
minikube already running
using the executable /usr/local/bin/kubectl
Switched to context &lt;span class=&#34;s2&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt;.
Deploying fabric8 to your Kubernetes installation at https://192.168.99.100:8443 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; domain  in namespace default

Loading fabric8 releases from maven repository:https://repo1.maven.org/maven2/
Deploying package: platform version: 2.4.24

Now about to install package https://repo1.maven.org/maven2/io/fabric8/platform/packages/fabric8-platform/2.4.24/fabric8-platform-2.4.24-kubernetes.yml
Processing resource kind: Namespace in namespace default name user-secrets-source-admin
Found namespace on kind Secret of user-secrets-source-adminProcessing resource kind: Secret in namespace user-secrets-source-admin name default-gogs-git
Processing resource kind: Secret in namespace default name jenkins-docker-cfg
Processing resource kind: Secret in namespace default name jenkins-git-ssh
Processing resource kind: Secret in namespace default name jenkins-hub-api-token
Processing resource kind: Secret in namespace default name jenkins-master-ssh
Processing resource kind: Secret in namespace default name jenkins-maven-settings
Processing resource kind: Secret in namespace default name jenkins-release-gpg
Processing resource kind: Secret in namespace default name jenkins-ssh-config
Processing resource kind: ServiceAccount in namespace default name configmapcontroller
Processing resource kind: ServiceAccount in namespace default name exposecontroller
Processing resource kind: ServiceAccount in namespace default name fabric8
Processing resource kind: ServiceAccount in namespace default name gogs
Processing resource kind: ServiceAccount in namespace default name jenkins
Processing resource kind: Service in namespace default name fabric8
Processing resource kind: Service in namespace default name fabric8-docker-registry
Processing resource kind: Service in namespace default name fabric8-forge
Processing resource kind: Service in namespace default name gogs
...
-------------------------

Default GOGS admin username/password &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; gogsadmin/RedHat&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;

Checking &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; PersistentVolumeClaims &lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; to a PersistentVolume ....
Downloading images and waiting to open the fabric8 console...

-------------------------
.....................................................
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动了半天一直是这种状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Waiting, endpoint &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; service is not ready yet...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我一看下载下来的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;err&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件，真是&lt;strong&gt;蔚为壮观&lt;/strong&gt;啊，足足有&lt;strong&gt;24712行&lt;/strong&gt;(这里面都是实际配置，没有配置充行数)，使用了如下这些docker镜像，足足有&lt;strong&gt;53个docker镜像&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;fabric8/alpine-caddy:2.2.311
fabric8/apiman-gateway:2.2.168
fabric8/apiman:2.2.168
fabric8/chaos-monkey:2.2.311
fabric8/configmapcontroller:2.3.5
fabric8/eclipse-orion:2.2.311
fabric8/elasticsearch-k8s:2.3.4
fabric8/elasticsearch-logstash-template:2.2.311
fabric8/elasticsearch-v1:2.2.168
fabric8/exposecontroller:2.3.2
fabric8/fabric8-console:2.2.199
fabric8/fabric8-forge:2.3.88
fabric8/fabric8-kiwiirc:2.2.311
fabric8/fluentd-kubernetes:v1.19
fabric8/gerrit:2.2.311
fabric8/git-collector:2.2.311
fabric8/gogs:v0.9.97
fabric8/grafana:2.6.1
fabric8/hubot-irc:2.2.311
fabric8/hubot-letschat:v1.0.0
fabric8/hubot-notifier:2.2.311
fabric8/hubot-slack:2.2.311
fabric8/jenkins-docker:2.2.311
fabric8/jenkinshift:2.2.199
fabric8/kafka:2.2.153
fabric8/kibana-config:2.2.311
fabric8/kibana4:v4.5.3
fabric8/lets-chat:2.2.311
fabric8/maven-builder:2.2.311
fabric8/message-broker:2.2.168
fabric8/message-gateway:2.2.168
fabric8/nexus:2.2.311
fabric8/taiga-back:2.2.311
fabric8/taiga-front:2.2.311
fabric8/turbine-server:1.0.28
fabric8/zookeeper:2.2.153
fabric8/zookeeper:2.2.168
funktion/funktion-nodejs-runtime:1.0.3
funktion/funktion:1.0.9
gitlab/gitlab-ce
jboss/keycloak:2.2.0.Final
jfrog-docker-registry.bintray.io/artifactory/artifactory-oss
jimmidyson/configmap-reload:v0.1
manageiq/manageiq:latest
mongo
mysql:5.7
nginxdemos/nginx-ingress:0.3.1
openzipkin/zipkin:1.13.0
postgres
prom/blackbox-exporter:master
prom/node-exporter
prom/prometheus:v1.3.1
registry:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你们感受下吧，我果断放弃了在自己笔记本上安装的念头。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>两款开源图片处理工具对比</title>
      <link>https://jimmysong.io/blog/picture-process/</link>
      <pubDate>Sun, 02 Apr 2017 20:27:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/picture-process/</guid>
      <description>
        
        
        &lt;p&gt;如果你看过美剧「硅谷」会记得剧中主角们所在的创业公司&lt;a href=&#34;www.piedpiper.com&#34;&gt;PiedPipper&lt;/a&gt;，他们就是靠自己发明的视频压缩算法来跟大公司Hooli竞争的，这部剧现在已经发展到第4季，在&lt;a href=&#34;http://v.qq.com/detail/d/dr2zn76oez8tyt4.html?ptag=baidu.aladdin.tv&#34;&gt;腾讯视频&lt;/a&gt;上可以免费观看。&lt;/p&gt;
&lt;p&gt;最近关注了两个&lt;strong&gt;图像处理&lt;/strong&gt;的Open Source Projects。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guetzli&#34;&gt;Google Guetzli&lt;/a&gt; 图像压缩工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer&#34;&gt;Luan Fujun&#39;s Deep Photo Style Transfer&lt;/a&gt; 图像style转换工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外对于图像处理还处于Photoshop、Lightroom这种摄影后期和图像处理命令行工具&lt;a href=&#34;https://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt;的我来说，图像压缩，智能图像风格转换实乃上乘武功，不是我等凡夫俗子驾驭的了，但是乘兴而来，总不能败兴而归吧，下面我们来一探究竟。&lt;/p&gt;
&lt;h2 id=&#34;google-guetzli&#34;&gt;Google Guetzli&lt;/h2&gt;
&lt;p&gt;聊聊架构微信公众号上有一篇介绍&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;amp;mid=2659599074&amp;amp;idx=1&amp;amp;sn=a26ae2a8becdc1f2cfbddf44d8ca1495&amp;amp;chksm=8be997f0bc9e1ee6e33f3e33c73d11884ad66085c0aedc9dd5e482063482887d0733d8e7d187#rd&#34;&gt;Google开源新算法，可将JPEG文件缩小35%&lt;/a&gt;文章。&lt;/p&gt;
&lt;p&gt;我在Mac上试用了一下，安装很简单，只要一条命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;brew install guetzli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是当我拿一张&lt;code&gt;22M&lt;/code&gt;大小的照片使用guetzli压缩的时候，我是绝望的，先后三次kill掉了进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为实在是太慢了&lt;/strong&gt;，也能是我软件对内存和CPU的利用率不高，效果你们自己看看。&lt;/p&gt;
&lt;p&gt;原图是这个样子的，拍摄地点在景山上的，俯瞰紫禁城的绝佳位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/IMG_5430.JPG&#34; alt=&#34;原图&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;guetzli --quality &lt;span class=&#34;m&#34;&gt;84&lt;/span&gt; --verbose 20160403052.jpg output.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么quality要设置成84呢？因为只能设置为84+的quality，如果要设置的更低的话需要自己修改代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/IMG_5429.JPG&#34; alt=&#34;process&#34;&gt;&lt;/p&gt;
&lt;p&gt;耗时了一个小时，后台进程信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/IMG_5428.JPG&#34; alt=&#34;后台进程&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个是使用&lt;strong&gt;Squash&lt;/strong&gt;压缩后的大小效果，压缩每张照片差不多只要3秒钟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Squash的logo就是个正在被剥皮的🍊，这是&lt;a href=&#34;http://xclient.info/s/squash.html&#34;&gt;下载地址&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩比分别为&lt;code&gt;70%&lt;/code&gt;和&lt;code&gt;30%&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/IMG_5434.JPG&#34; alt=&#34;Img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩比70%后的细节放大图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/IMG_5432.JPG&#34; alt=&#34;70&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩比30%的细节放大图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/IMG_5433.JPG&#34; alt=&#34;30&#34;&gt;&lt;/p&gt;
&lt;p&gt;你看出什么区别了吗？反正我是没有。&lt;/p&gt;
&lt;p&gt;下面再来看看耗时一个小时，千呼万唤始出来的guetzli压缩后的效果和使用squash压缩比为30%的效果对比。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/FullSizeRender.jpg&#34; alt=&#34;对比&#34;&gt;&lt;/p&gt;
&lt;p&gt;左面是使用guetzli压缩后（4.1M），右面使用的squash压缩后（3.1M）的照片。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;似乎还是没有什么区别啊？你看出来了吗？&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;guetzli总结&#34;&gt;Guetzli总结&lt;/h3&gt;
&lt;p&gt;可能是我使用Guetzli的方式不对，但是命令行里确实没有设置CPU和内存资源的选项啊，为啥压缩照片会这么慢呢？效果也并不出彩，不改代码的话照片质量只能设置成84以上，但是这个是&lt;strong&gt;Open Source&lt;/strong&gt;的，使用的C++开发，可以研究下它的图像压缩算法。&lt;/p&gt;
&lt;h1 id=&#34;deep-photo-style-transfer&#34;&gt;Deep Photo Style Transfer&lt;/h1&gt;
&lt;p&gt;来自康奈尔大学的Luan Fujun开源的图像sytle转换工具，看了&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer&#34;&gt;README&lt;/a&gt;的介绍，上面有很多图像风格转换的例子，真的很惊艳，市面上好像还没有这种能够在给定任意一张照片的情况下，自动将另一张照片转换成该照片的style。&lt;/p&gt;
&lt;p&gt;这个工具使用Matlab和Lua开发，基于&lt;a href=&#34;https://github.com/torch/torch7&#34;&gt;Torch&lt;/a&gt;运行的时候需要&lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA&lt;/a&gt;，&lt;a href=&#34;https://developer.nvidia.com/cudnn&#34;&gt;cudnn&lt;/a&gt;，&lt;a href=&#34;https://www.mathworks.com/&#34;&gt;Matlab&lt;/a&gt;，环境实在太复杂，就没折腾，启动有人发布&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer/issues/29&#34;&gt;Docker镜像&lt;/a&gt;，已经有人提了issue。&lt;/p&gt;
&lt;p&gt;如果它能够被商用，绝对是继&lt;strong&gt;Prisma&lt;/strong&gt;后又一人工智能照片处理应用利器。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;是不是有了照片风格转换这个东西就不需要做照片后期了？只要选几张自己喜欢的风格照片，再鼠标点几下就可以完成照片处理了？摄影师要失业了？非也！照片风格东西本来就是很主观性的，每个人都有自己喜欢的风格，照相机发明后就有人说画家要失业了，其实不然，画画依然是创造性地劳动，只能说很多写实风格的画家要失业了。Deep Photo Style Transfer也许会成为Lightroom或者手机上一款app的功能，是一个不错的工具。也许还会成为像Prisma一样的现象级产品，who knows?🤷‍♂️&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Pivotal Cloud foundry快速开始指南</title>
      <link>https://jimmysong.io/blog/cloud-foundry-tryout/</link>
      <pubDate>Thu, 23 Mar 2017 22:54:18 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/cloud-foundry-tryout/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近研究了下&lt;strong&gt;Pivotal&lt;/strong&gt;的&lt;strong&gt;Cloud foundry&lt;/strong&gt;，CF本身是一款开源软件，很多PAAS厂商都加入了CF，我们用的是的&lt;strong&gt;PCF Dev&lt;/strong&gt;（PCF Dev是一款可以在工作站上运行的轻量级PCF安装）来试用的，因为它可以部署在自己的环境里，而&lt;strong&gt;Pivotal Web Services&lt;/strong&gt;只免费两个月，之后就要收费。&lt;a href=&#34;https://pivotal.io/cn/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry-dev/introduction&#34;&gt;这里&lt;/a&gt;有官方的详细教程。&lt;/p&gt;
&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;
&lt;p&gt;根据官网的示例，我们将运行一个Java程序示例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装命令行终端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pivotal.io/cn/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry-dev/install-the-cf-cli&#34;&gt;下载&lt;/a&gt;后双击安装即可，然后执行&lt;code&gt;cf help&lt;/code&gt;能够看到帮助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装PCF Dev&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先&lt;a href=&#34;https://network.pivotal.io/products/pcfdev&#34;&gt;下载&lt;/a&gt;，如果你没有Pivotal network账号的话，还需要注册个用户，然后用以下命令安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
$./pcfdev-VERSION-osx &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;cf dev start
Less than &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; MB of free memory detected, &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;y/N&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &amp;gt; y
Please sign in with your Pivotal Network account.
Need an account? Join Pivotal Network: https://network.pivotal.io

Email&amp;gt; 849122844@qq.com

Password&amp;gt; 
Downloading VM...
Progress: &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;+++++++++++++&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 100% 
VM downloaded.
Allocating &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; MB out of &lt;span class=&#34;m&#34;&gt;16384&lt;/span&gt; MB total system memory &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3514&lt;/span&gt; MB free&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
Importing VM...
Starting VM...
Provisioning VM...
Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; services to start...
&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; out of &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; running
&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; out of &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; running
&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; out of &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; running
&lt;span class=&#34;m&#34;&gt;46&lt;/span&gt; out of &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; running
&lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; out of &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; running
 _______  _______  _______    ______   _______  __   __
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    _  &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;    ___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  _    &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;    ___&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;___   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;___ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    ___&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;      _&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;    ___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;    ___&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;___  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_______&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;______&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_______&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
is now running.
To begin using PCF Dev, please run:
   cf login -a https://api.local.pcfdev.io --skip-ssl-validation
Apps Manager URL: https://local.pcfdev.io
Admin &lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Email: admin / Password: admin
Regular &lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Email: user / Password: pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动过程中还需要&lt;strong&gt;Sign In&lt;/strong&gt;，所以注册完后要记住用户名（邮箱地址）和密码（必须超过8位要有特殊字符和大写字母）。这个过程中还要下载VM，对内存要求至少4G。而且下载速度比较慢，我下载的了大概3个多小时吧。&lt;/p&gt;
&lt;p&gt;下面部署一个应用到PCF Dev上试一试。&lt;/p&gt;
&lt;h2 id=&#34;部署应用&#34;&gt;部署应用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;下载代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$git&lt;/span&gt; clone https://github.com/cloudfoundry-samples/spring-music
&lt;span class=&#34;nv&#34;&gt;$cd&lt;/span&gt; ./spring-music
&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; login -a api.local.pcfdev.io --skip-ssl-validation
API endpoint: api.local.pcfdev.io

Email&amp;gt; user

Password&amp;gt; pass
Authenticating...
OK

Targeted org pcfdev-org

Targeted space pcfdev-space


                
API endpoint:   https://api.local.pcfdev.io &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;API version: 2.65.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
User:           user
Org:            pcfdev-org
Space:          pcfdev-space
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;编译应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用gradle来编译。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$./gradlew assemble
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:findMainClass
:jar
:bootRepackage
Download https://repo1.maven.org/maven2/com/sun/jersey/jersey-client/1.13/jersey-client-1.13.jar
Download https://repo1.maven.org/maven2/com/sun/jersey/jersey-json/1.13/jersey-json-1.13.jar
Download https://repo1.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4.5/httpcore-4.4.5.jar
Download https://repo1.maven.org/maven2/com/nimbusds/oauth2-oidc-sdk/4.5/oauth2-oidc-sdk-4.5.jar
Download https://repo1.maven.org/maven2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar
Download https://repo1.maven.org/maven2/com/sun/jersey/jersey-core/1.13/jersey-core-1.13.jar
Download https://repo1.maven.org/maven2/org/codehaus/jackson/jackson-core-asl/1.9.2/jackson-core-asl-1.9.2.jar
Download https://repo1.maven.org/maven2/org/codehaus/jackson/jackson-mapper-asl/1.9.2/jackson-mapper-asl-1.9.2.jar
Download https://repo1.maven.org/maven2/org/codehaus/jackson/jackson-jaxrs/1.9.2/jackson-jaxrs-1.9.2.jar
Download https://repo1.maven.org/maven2/org/codehaus/jackson/jackson-xc/1.9.2/jackson-xc-1.9.2.jar
Download https://repo1.maven.org/maven2/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar
Download https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.3.1/commons-lang3-3.3.1.jar
Download https://repo1.maven.org/maven2/net/minidev/json-smart/1.1.1/json-smart-1.1.1.jar
Download https://repo1.maven.org/maven2/com/nimbusds/lang-tag/1.4/lang-tag-1.4.jar
Download https://repo1.maven.org/maven2/com/nimbusds/nimbus-jose-jwt/3.1.2/nimbus-jose-jwt-3.1.2.jar
Download https://repo1.maven.org/maven2/stax/stax-api/1.0.1/stax-api-1.0.1.jar
Download https://repo1.maven.org/maven2/org/bouncycastle/bcprov-jdk15on/1.51/bcprov-jdk15on-1.51.jar
Download https://repo1.maven.org/maven2/javax/mail/mail/1.4.7/mail-1.4.7.jar
:assemble

BUILD SUCCESSFUL

Total time: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; mins 25.649 secs

This build could be faster, please consider using the Gradle Daemon: https://docs.gradle.org/2.14/userguide/gradle_daemon.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;上传应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置应用的主机名为spring-music。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; push --hostname spring-music
Using manifest file /Users/jimmy/Workspace/github/cloudfoundry-samples/spring-music/manifest.yml

Creating app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

Creating route spring-music.local.pcfdev.io...
OK

Binding spring-music.local.pcfdev.io to spring-music...
OK

Uploading spring-music...
Uploading app files from: /var/folders/61/f7mqkyjn1nz5mfmfvdztgzjw0000gn/T/unzipped-app139680305
Uploading 38.9M, &lt;span class=&#34;m&#34;&gt;234&lt;/span&gt; files
Done uploading               
OK

Starting app spring-music in org pcfdev-org / space pcfdev-space as user...
Downloading dotnet-core_buildpack...
Downloading go_buildpack...
Downloading python_buildpack...
Downloading php_buildpack...
Downloading staticfile_buildpack...
Downloaded staticfile_buildpack
Downloading binary_buildpack...
Downloaded binary_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;9.3K&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Downloading java_buildpack...
Downloaded java_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;249.1M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Downloaded dotnet-core_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;169.3M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Downloading ruby_buildpack...
Downloading nodejs_buildpack...
Downloaded python_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;255.3M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Downloaded nodejs_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;109.4M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Downloaded go_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;392M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Downloaded php_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;310.4M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Downloaded ruby_buildpack &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;260.8M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Creating container
Successfully created container
Downloading app package...
Downloaded app package &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;38.8M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Staging...
-----&amp;gt; Java Buildpack Version: v3.10 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;offline&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; https://github.com/cloudfoundry/java-buildpack.git#193d6b7
-----&amp;gt; Downloading Open Jdk JRE 1.8.0_111 from https://java-buildpack.cloudfoundry.org/openjdk/trusty/x86_64/openjdk-1.8.0_111.tar.gz &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;found in cache&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
       Expanding Open Jdk JRE to .java-buildpack/open_jdk_jre &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1.4s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
-----&amp;gt; Downloading Open JDK Like Memory Calculator 2.0.2_RELEASE from https://java-buildpack.cloudfoundry.org/memory-calculator/trusty/x86_64/memory-calculator-2.0.2_RELEASE.tar.gz &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;found in cache&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
       Memory Settings: -Xss349K -Xmx681574K -XX:MaxMetaspaceSize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;104857K -Xms681574K -XX:MetaspaceSize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;104857K
-----&amp;gt; Downloading Spring Auto Reconfiguration 1.10.0_RELEASE from https://java-buildpack.cloudfoundry.org/auto-reconfiguration/auto-reconfiguration-1.10.0_RELEASE.jar &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;found in cache&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Exit status &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
Staging &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
Uploading droplet, build artifacts cache...
Uploading build artifacts cache...
Uploading droplet...
Uploaded build artifacts cache &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;108B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Uploaded droplet &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;83.9M&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Uploading &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;
Destroying container
Successfully destroyed container

&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running

App started


OK

App spring-music was started using this &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java-buildpack-memory-calculator-2.0.2_RELEASE -memorySizes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metaspace:64m..,stack:228k.. -memoryWeights&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:65,metaspace:10,native:15,stack:10 -memoryInitials&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:100%,metaspace:100% -stackThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;300&lt;/span&gt; -totMemory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MEMORY_LIMIT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-Djava.io.tmpdir=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPDIR&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -XX:OnOutOfMemoryError=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.java-buildpack/open_jdk_jre/bin/killjava.sh &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SERVER_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java &lt;span class=&#34;nv&#34;&gt;$JAVA_OPTS&lt;/span&gt; -cp &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/. org.springframework.boot.loader.JarLauncher&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

Showing health and status &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

requested state: started
instances: 1/1
usage: 1G x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances
urls: spring-music.local.pcfdev.io
last uploaded: Thu Mar &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; 14:29:46 UTC &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;
stack: cflinuxfs2
buildpack: java-buildpack&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v3.10-offline-https://github.com/cloudfoundry/java-buildpack.git#193d6b7 java-main open-jdk-like-jre&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.8.0_111 open-jdk-like-memory-calculator&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.0.2_RELEASE spring-auto-reconfiguration&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.10.0_RELEASE

     state     since                    cpu      memory       disk             details
&lt;span class=&#34;c1&#34;&gt;#0   running   2017-03-23 10:31:36 PM   160.7%   442M of 1G   165.6M of 512M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;在浏览器中访问app&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;spring-music.local.pcfdev.io&#34;&gt;spring-music.local.pcfdev.io&lt;/a&gt;页面如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pivotal-cloudfoundry-spring-music.jpg&#34; alt=&#34;spring-music&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;requested state: started
instances: 1/1
usage: 512M x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances
urls: spring-music.local.pcfdev.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;查看日志&#34;&gt;查看日志&lt;/h2&gt;
&lt;p&gt;PCF提供应用的日志聚合功能，你可以查看HTTP请求、对应用操作时候的output，如扩容、重启等。&lt;/p&gt;
&lt;p&gt;每行日志中都包括如下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Timestamp&lt;/li&gt;
&lt;li&gt;Log type&lt;/li&gt;
&lt;li&gt;Channel&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看刚才那个应用的日志信息：&lt;/p&gt;
&lt;p&gt;查看最近输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; logs spring-music --recent
2017-03-23T22:34:05.17+0800 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;RTR/0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;      OUT spring-music.local.pcfdev.io - &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;23/03/2017:14:34:05.163 +0000&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET /templates/albumForm.html HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2518&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://spring-music.local.pcfdev.io/&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36&amp;#34;&lt;/span&gt; 192.168.11.1:52097 10.0.2.15:60012 x_forwarded_for:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; x_forwarded_proto:&lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; vcap_request_id:c6b5f34d-bc5a-4c66-77aa-cb768b273f21 response_time:0.007390127 app_id:fdc7a43e-61b8-40e9-b1dc-38b858037da9 app_index:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看实时输出流：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; logs spring-music
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;连接数据库&#34;&gt;连接数据库&lt;/h2&gt;
&lt;p&gt;在上面的那个例子中用的是内存数据库。我们可以改用mysql数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看可用的数据&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; marketplace -s p-mysql
Getting service plan information &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; service p-mysql as user...
OK

service plan   description            free or paid
512mb          PCF Dev MySQL Server   free
1gb            PCF Dev MySQL Server   free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;创建数据库&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; create-service p-mysql 512mb my-spring-db
Creating service instance my-spring-db in org pcfdev-org / space pcfdev-space as user...
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将它与我们上面的示例应用程序绑定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; bind-service spring-music my-spring-db
Binding service my-spring-db to app spring-music in org pcfdev-org / space pcfdev-space as user...
OK
TIP: Use &lt;span class=&#34;s1&#34;&gt;&amp;#39;cf restage spring-music&amp;#39;&lt;/span&gt; to ensure your env variable changes take effect
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启app&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; restart spring-music
Stopping app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

Starting app spring-music in org pcfdev-org / space pcfdev-space as user...

&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances running

App started


OK

App spring-music was started using this &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java-buildpack-memory-calculator-2.0.2_RELEASE -memorySizes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metaspace:64m..,stack:228k.. -memoryWeights&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:65,metaspace:10,native:15,stack:10 -memoryInitials&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:100%,metaspace:100% -stackThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;300&lt;/span&gt; -totMemory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MEMORY_LIMIT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-Djava.io.tmpdir=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPDIR&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -XX:OnOutOfMemoryError=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.java-buildpack/open_jdk_jre/bin/killjava.sh &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SERVER_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java &lt;span class=&#34;nv&#34;&gt;$JAVA_OPTS&lt;/span&gt; -cp &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/. org.springframework.boot.loader.JarLauncher&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

Showing health and status &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

requested state: started
instances: 1/1
usage: 1G x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; instances
urls: spring-music.local.pcfdev.io
last uploaded: Thu Mar &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; 14:29:46 UTC &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;
stack: cflinuxfs2
buildpack: java-buildpack&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v3.10-offline-https://github.com/cloudfoundry/java-buildpack.git#193d6b7 java-main open-jdk-like-jre&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.8.0_111 open-jdk-like-memory-calculator&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.0.2_RELEASE spring-auto-reconfiguration&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.10.0_RELEASE

     state     since                    cpu      memory         disk             details
&lt;span class=&#34;c1&#34;&gt;#0   running   2017-03-23 10:44:18 PM   150.4%   461.6M of 1G   165.6M of 512M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们再查看下自己的service。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; services
Getting services in org pcfdev-org / space pcfdev-space as user...
OK

name           service   plan    bound apps     last operation
my-spring-db   p-mysql   512mb   spring-music   create succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;应用扩容&#34;&gt;应用扩容&lt;/h2&gt;
&lt;p&gt;扩展应用的示例数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; scale spring-music -i &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
Scaling app spring-music in org pcfdev-org / space pcfdev-space as user...
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再查看下&lt;code&gt;spring-music&lt;/code&gt;应用的信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; app spring-music
Showing health and status &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

requested state: started
instances: 2/2
usage: 1G x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances
urls: spring-music.local.pcfdev.io
last uploaded: Thu Mar &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; 14:29:46 UTC &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;
stack: cflinuxfs2
buildpack: java-buildpack&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v3.10-offline-https://github.com/cloudfoundry/java-buildpack.git#193d6b7 java-main open-jdk-like-jre&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.8.0_111 open-jdk-like-memory-calculator&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.0.2_RELEASE spring-auto-reconfiguration&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.10.0_RELEASE

     state      since                    cpu    memory         disk             details
&lt;span class=&#34;c1&#34;&gt;#0   running    2017-03-23 10:44:18 PM   0.5%   451.4M of 1G   165.6M of 512M&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#1   starting   2017-03-23 10:46:19 PM   0.0%   348.3M of 1G   165.6M of 512M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以对内存进行扩容。这个操作会重启应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; scale spring-music -m 1G
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down

App started


OK

App spring-music was started using this &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java-buildpack-memory-calculator-2.0.2_RELEASE -memorySizes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metaspace:64m..,stack:228k.. -memoryWeights&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:65,metaspace:10,native:15,stack:10 -memoryInitials&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:100%,metaspace:100% -stackThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;300&lt;/span&gt; -totMemory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MEMORY_LIMIT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-Djava.io.tmpdir=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPDIR&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -XX:OnOutOfMemoryError=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.java-buildpack/open_jdk_jre/bin/killjava.sh &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SERVER_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java &lt;span class=&#34;nv&#34;&gt;$JAVA_OPTS&lt;/span&gt; -cp &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/. org.springframework.boot.loader.JarLauncher&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

Showing health and status &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

requested state: started
instances: 1/2
usage: 1G x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances
urls: spring-music.local.pcfdev.io
last uploaded: Thu Mar &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; 14:29:46 UTC &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;
stack: cflinuxfs2
buildpack: java-buildpack&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v3.10-offline-https://github.com/cloudfoundry/java-buildpack.git#193d6b7 java-main open-jdk-like-jre&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.8.0_111 open-jdk-like-memory-calculator&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.0.2_RELEASE spring-auto-reconfiguration&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.10.0_RELEASE

     state     since                    cpu      memory         disk             details
&lt;span class=&#34;c1&#34;&gt;#0   running   2017-03-23 10:48:43 PM   145.1%   412.2M of 1G   165.6M of 512M&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#1   down      2017-03-23 10:48:14 PM   0.7%     436.2M of 1G   165.6M of 512M   insufficient resources: memory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以增加应用的磁盘大小。这个操作也会重启应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cf&lt;/span&gt; scale spring-music -k 512M
This will cause the app to restart. Are you sure you want to scale spring-music?&amp;gt; y

Scaling app spring-music in org pcfdev-org / space pcfdev-space as user...
OK
Stopping app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

Starting app spring-music in org pcfdev-org / space pcfdev-space as user...

&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; starting, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; of &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances running, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; down

App started


OK

App spring-music was started using this &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java-buildpack-memory-calculator-2.0.2_RELEASE -memorySizes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metaspace:64m..,stack:228k.. -memoryWeights&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:65,metaspace:10,native:15,stack:10 -memoryInitials&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heap:100%,metaspace:100% -stackThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;300&lt;/span&gt; -totMemory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MEMORY_LIMIT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-Djava.io.tmpdir=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TMPDIR&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -XX:OnOutOfMemoryError=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.java-buildpack/open_jdk_jre/bin/killjava.sh &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CALCULATED_MEMORY&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SERVER_PORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/.java-buildpack/open_jdk_jre/bin/java &lt;span class=&#34;nv&#34;&gt;$JAVA_OPTS&lt;/span&gt; -cp &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/. org.springframework.boot.loader.JarLauncher&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

Showing health and status &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; app spring-music in org pcfdev-org / space pcfdev-space as user...
OK

requested state: started
instances: 1/2
usage: 1G x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; instances
urls: spring-music.local.pcfdev.io
last uploaded: Thu Mar &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; 14:29:46 UTC &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;
stack: cflinuxfs2
buildpack: java-buildpack&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v3.10-offline-https://github.com/cloudfoundry/java-buildpack.git#193d6b7 java-main open-jdk-like-jre&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.8.0_111 open-jdk-like-memory-calculator&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.0.2_RELEASE spring-auto-reconfiguration&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.10.0_RELEASE

     state     since                    cpu      memory         disk             details
&lt;span class=&#34;c1&#34;&gt;#0   running   2017-03-23 10:50:57 PM   130.8%   376.2M of 1G   165.6M of 512M&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#1   down      2017-03-23 10:50:32 PM   0.6%     438.5M of 1G   165.6M of 512M   insufficient resources: memory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上面的操作中可以看到，连续性特别强，所有的操作都可以在几秒钟内完成，特别适合&lt;strong&gt;微服务&lt;/strong&gt;的部署和&lt;strong&gt;Cloud Native&lt;/strong&gt; APP。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pivotal.io/cn/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry-dev/next-steps&#34;&gt;更多关于&lt;strong&gt;Pivotal Cloud Foundry&lt;/strong&gt;的文档&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>零基础使用Hugo和GitHub Pages创建自己的博客</title>
      <link>https://jimmysong.io/blog/building-github-pages-with-hugo/</link>
      <pubDate>Fri, 17 Mar 2017 22:08:25 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/building-github-pages-with-hugo/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;亲，你还在为虚拟主机、域名、空间而发愁吗？你想拥有自己的网站吗？你想拥有一个分享知识、留住感动，为开源事业而奋斗终身吗？那么赶快拿起你手中的📱拨打&lt;del&gt;16899168&lt;/del&gt;，不对，是看这篇文章吧，不用998，也不用168，这一切都是免费的，是的&lt;strong&gt;你没看错，真的不要钱！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;当然还是需要你有一点电脑基础的，会不会编程不要紧，还要会一点英文，你需要先申请一下几个账号和安装一些软件环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.github.com&#34;&gt;GitHub&lt;/a&gt; &lt;strong&gt;这是必需的&lt;/strong&gt;，因为你需要使用&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;来托管你的网站。而且你还需要安装git工具。创建一个以自己用户名命名的username.github.io的project。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.qiniu.com/&#34;&gt;七牛云存储&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，为了存储文件方便，建议申请一个，免费10G的存储空间，存储照片和一些小文件是足够的，可以用来做外链，方便存储和管理，这样你就不用把图片也托管到Github上了。流量也是不限的。我没有收七牛的一点好处，以为是我自己用的，所以推荐给大家，七牛还有命令行客户端，方便你上传和同步文件。如上的题图都是存储在七牛云中的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;tongji.baidu.com&#34;&gt;百度统计&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，基本的网站数据分析，免费的，质量还行。还有微信公众号可以查看，这一点我发现腾讯分析居然都没有微信公众号，自家的产品咋都不推出微信客户端呢。顺便提一下，这个统计账号跟你的百度账号不是同一个东西，两者是两套体系，当然你可以和自己的百度账号关联。只需要在Web的Header中植入一段JS代码即可。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; &lt;strong&gt;必需的&lt;/strong&gt;，静态网站生成工具，用来编译静态网站的。跟Hexo比起来我更喜欢这个工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://typora.io/&#34;&gt;Typro&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，但是强烈推荐，我最喜欢的免费的Markdown编辑器，hugo可以编译markdown格式为HTML，所以用它来写博客是最合适不过了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了注册好Github后你现在可以尽情的玩耍了！😄&lt;/p&gt;
&lt;h2 id=&#34;lets-rockroll&#34;&gt;Let&#39;s rock&amp;amp;roll!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;首先介绍下Hugo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hugo是一种通用的网站框架。严格来说，Hugo应该被称作静态网站生成器。&lt;/p&gt;
&lt;p&gt;静态网站生成器从字面上来理解，就是将你的内容生成静态网站。所谓“静态”的含义其实反映在网站页面的生成的时间。一般的web服务器（WordPress, Ghost, Drupal等等）在收到页面请求时，需要调用数据库生成页面（也就是HTML代码），再返回给用户请求。而静态网站则不需要在收到请求后生成页面，而是在整个网站建立起之前就将所有的页面全部生成完成，页面一经生成便称为静态文件，访问时直接返回现成的静态页面，不需要数据库的参与。&lt;/p&gt;
&lt;p&gt;采用静态网站的维护也相当简单，实际上你根本不需要什么维护，完全不用考虑复杂的运行时间，依赖和数据库的问题。再有也不用担心安全性的问题，没有数据库，网站注入什么的也无从下手。&lt;/p&gt;
&lt;p&gt;静态网站最大好处就是访问快速，不用每次重新生成页面。当然，一旦网站有任何更改，静态网站生成器需要重新生成所有的与更改相关的页面。然而对于小型的个人网站，项目主页等等，网站规模很小，重新生成整个网站也是非常快的。Hugo在速度方面做得非常好，Dan Hersam在他这个&lt;a href=&#34;https://www.udemy.com/build-static-sites-in-seconds-with-hugo/&#34;&gt;Hugo教程&lt;/a&gt;里提到，5000篇文章的博客，Hugo生成整个网站只花了6秒，而很多其他的静态网站生成器则需要几分钟的时间。我的博客目前文章只有几十篇，用Hugo生成整个网站只需要0.1秒。官方文档提供的数据是每篇页面的生成时间不到1ms。&lt;/p&gt;
&lt;p&gt;认为对于个人博客来说，应该将时间花在内容上而不是各种折腾网站。Hugo会将Markdown格式的内容和设置好模版一起，生成漂亮干净的页面。挑选折腾好一个喜爱的模版，在Sublime Text里用Markdown写博客，再敲一行命令生成同步到服务器就OK了。整个体验是不是非常优雅简单还有点geek的味道呢？&lt;/p&gt;
&lt;h3 id=&#34;了解hugo&#34;&gt;了解Hugo&lt;/h3&gt;
&lt;p&gt;首先建立自己的网站，mysite是网站的路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new site mysite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后进入该路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; mysite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在该目录下你可以看到以下几个目录和&lt;code&gt;config.toml&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; ▸ archetypes/ 
 ▸ content/
 ▸ layouts/
 ▸ static/
   config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;是网站的配置文件，包括&lt;code&gt;baseurl&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;copyright&lt;/code&gt;等等网站参数。&lt;/p&gt;
&lt;p&gt;这几个文件夹的作用分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;archetypes：包括内容类型，在创建新内容时自动生成内容的配置&lt;/li&gt;
&lt;li&gt;content：包括网站内容，全部使用markdown格式&lt;/li&gt;
&lt;li&gt;layouts：包括了网站的模版，决定内容如何呈现&lt;/li&gt;
&lt;li&gt;static：包括了css, js, fonts, media等，决定网站的外观&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo提供了一些完整的主题可以使用，下载这些主题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时现成的主题存放在&lt;code&gt;themes/&lt;/code&gt;文件夹中。&lt;/p&gt;
&lt;p&gt;现在我们先熟悉一下Hugo，创建新页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入&lt;code&gt;content/&lt;/code&gt;文件夹可以看到，此时多了一个markdown格式的文件&lt;code&gt;about.md&lt;/code&gt;，打开文件可以看到时间和文件名等信息已经自动加到文件开头，包括创建时间，页面名，是否为草稿等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
date: &amp;#34;2015-02-01T18:19:54+08:00&amp;#34;
draft: true
title: &amp;#34;about&amp;#34;
categories: &amp;#34;github-pages&amp;#34;
tag: [&amp;#34;blog&amp;#34;,&amp;#34;post&amp;#34;]
---

&lt;span class=&#34;gh&#34;&gt;# About me
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Jimmy Song
&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; rootsongjc@gmail.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我在页面中加入了一些内容，然后运行Hugo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo server -t hyde --buildDrafts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;参数的意思是使用hyde主题渲染我们的页面，注意到&lt;code&gt;about.md&lt;/code&gt;目前是作为草稿，即&lt;code&gt;draft&lt;/code&gt;参数设置为&lt;code&gt;true&lt;/code&gt;，运行Hugo时要加上&lt;code&gt;--buildDrafts&lt;/code&gt;参数才会生成被标记为草稿的页面。 在浏览器输入localhost:1313，就可以看到我们刚刚创建的页面。&lt;/p&gt;
&lt;p&gt;注意观察当前目录下多了一个文件夹&lt;code&gt;public/&lt;/code&gt;，这里面是Hugo生成的整个静态网站，如果使用Github pages来作为博客的Host，你只需要将&lt;code&gt;public/&lt;/code&gt;里的文件上传就可以，这相当于是Hugo的输出。&lt;/p&gt;
&lt;p&gt;详细说明请看这位朋友的文章：&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;Nanshu Wang - Hugo静态网站生成器中文教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;hugo new&lt;/code&gt;命令生成的文章前面的加号中包括的那几行，是用来设置文章属性的，这些属性使用的是yaml语法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt; 自动增加时间标签，页面上默认显示n篇最新的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;draft&lt;/strong&gt; 设置为false的时候会被编译为HTML，true则不会编译和发表，在本地修改文章时候用true。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; 设置文章标题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt; 数组，可以设置多个标签，都好隔开，hugo会自动在你博客主页下生成标签的子URL，通过这个URL可以看到所有具有该标签的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;categories&lt;/strong&gt; 文章分类，跟Tag功能差不多，只能设置一个字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天先说到这里，再次声明下，&lt;a href=&#34;https://jimmysong.io&#34;&gt;Jimmy Song&#39;s blog&lt;/a&gt;就是用👆的步骤建立的。&lt;/p&gt;
&lt;p&gt;Jimmy Song&#39;s blog的页面比较简陋，你可以在&lt;a href=&#34;http://themes.gohugo.io&#34;&gt;这里&lt;/a&gt;找到更多可爱的模版。另外我给自己翻译的书&lt;a href=&#34;https://jimmysong.io/talks/cloud-native-go/&#34;&gt;Cloude Native Go&lt;/a&gt;做一个静态页面，&lt;a href=&#34;https://jimmysong.io/cloud-native-go/&#34;&gt;点此查看&lt;/a&gt;，欢迎大家关注。🙏&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下 2017年8月31日更新&lt;/p&gt;
&lt;p&gt;如果你对GitHub的域名不满意，想要用自己的域名，那么申请域名的地方有很多，比如万网、GoDaddy、Namecheap，我的域名 &lt;a href=&#34;http://jimmysong.io&#34;&gt;jimmysong.io&lt;/a&gt; 就是在 Namecheap 上申请的，申请完域名后还需要做域名解析，我使用的是 DNSPod，免费的，然后在 GitHub 中配置下 CNAME 即可。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>微服务设计读书笔记</title>
      <link>https://jimmysong.io/blog/microservice-reading-notes/</link>
      <pubDate>Sat, 11 Mar 2017 15:45:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/microservice-reading-notes/</guid>
      <description>
        
        
        &lt;p&gt;最近在看 &lt;strong&gt;《微服务设计（Sam Newman著）》&lt;/strong&gt; 这本书。作者是 &lt;strong&gt;ThoughtWorks&lt;/strong&gt; 的Sam Newman。这本书中包括很多业界是用案例，比如 &lt;strong&gt;Netflix&lt;/strong&gt; 和 &lt;strong&gt;亚马逊&lt;/strong&gt;。有兴趣的话大家一起看看讨论一下。😄&lt;/p&gt;
&lt;p&gt;P.S 这本书比较偏理论，另外还有一本中国人写的书，&lt;strong&gt;《微服务架构与实践，王磊著，电子工业出版社》&lt;/strong&gt; ，&lt;a href=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/docs/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E7%8E%8B%E7%A3%8A%E8%91%97-%E7%94%B5%E5%AD%90%E5%B7%A5%E4%B8%9A%E5%87%BA%E7%89%88%E7%A4%BE.pdf&#34;&gt;下载本书的pdf&lt;/a&gt;，文字版，大小28.08M。这个人同样也是 &lt;strong&gt;ThoughtWorks&lt;/strong&gt; 的，两个人的观点不谋而合，依然是便理论的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cloud Native Go - 基于Go和React的web云服务构建指南&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这本书是我最近在翻译的，将由 &lt;strong&gt;电子工业出版社&lt;/strong&gt; 出版，本书根据实际案例教你如何构建一个web微服务，是实践为服务架构的很好的参考。&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34;&gt;查看本书介绍&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;1微服务初探&#34;&gt;1.微服务初探&lt;/h2&gt;
&lt;h3 id=&#34;什么是微服务&#34;&gt;什么是微服务？&lt;/h3&gt;
&lt;p&gt;微服务（Microservices）这个词比较新颖，但是其实这种架构设计理念早就有了。微服务是一种分布式架构设计理念，为了推动细粒度服务的使用，这些服务要能协同工作，每个服务都有自己的生命周期。一个微服务就是一个独立的实体，可以独立的部署在PAAS平台上，也可以作为一个独立的进程在主机中运行。服务之间通过API访问，修改一个服务不会影响其它服务。&lt;/p&gt;
&lt;h3 id=&#34;微服务的好处&#34;&gt;微服务的好处&lt;/h3&gt;
&lt;p&gt;微服务的好处有很多，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助你更快的采用新技术&lt;/li&gt;
&lt;li&gt;解决技术异构的问题，因为是用API网络通信，可以使用不同的语言和技术开发不同的服务&lt;/li&gt;
&lt;li&gt;增强系统弹性，服务的边界比较清晰，便于故障处理&lt;/li&gt;
&lt;li&gt;方便扩展，比如使用容器技术，可以很方便的一次性启动很多个微服务&lt;/li&gt;
&lt;li&gt;方便部署，因为微服务之间彼此独立，所以能够独立的部署单个服务而不影响其它服务，如果部署失败的话还可以回滚&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别忘了康威定律，微服务可以很好契合解决组织架构问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可重用，可随意组合&lt;/li&gt;
&lt;li&gt;便于维护，可以随时重写服务，不必担心历史遗留问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与面向服务架构soa的关系&#34;&gt;与面向服务架构SOA的关系&lt;/h3&gt;
&lt;p&gt;可以说微服务架构师SOA的一种，但是目前的大多数SOA做的都不好，在&lt;code&gt;通信协议的选择&lt;/code&gt;、&lt;code&gt;第三方中间件的选择&lt;/code&gt;、&lt;code&gt;服务力度如何划分&lt;/code&gt;方面做的都不够好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务与SOA的共同点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都使用共享库，比如可重用的代码库&lt;/li&gt;
&lt;li&gt;模块化，比如Java中的OSGI(Open Source Gateway Initiative)、Erlang中的模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2架构师的职责&#34;&gt;2.架构师的职责&lt;/h2&gt;
&lt;h3 id=&#34;架构师应该关心是什么&#34;&gt;架构师应该关心是什么&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;架构师（Architect）&lt;strong&gt;在英文中和&lt;/strong&gt;建筑师&lt;/strong&gt;是同一个词，他们之间也有很多相同之处，架构师构建的是软件，而建筑师构建的是建筑。&lt;/p&gt;
&lt;p&gt;终于看到了我翻译的&lt;em&gt;Cloud Native Go&lt;/em&gt;第14章中引用的这本书的原话了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/building-microservices-reference.jpg&#34; alt=&#34;原话&#34;&gt;&lt;/p&gt;
&lt;p&gt;软件的需求变更是&lt;strong&gt;来的那么快来的那么直接&lt;/strong&gt;，不像建筑那样可以在设计好后按照设计图纸一步步的去建设。&lt;/p&gt;
&lt;p&gt;架构师应该关心的是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证系统适合开发人员在上面工作&lt;/li&gt;
&lt;li&gt;关注服务之间的交互，不需要过于关注各个服务内部发生的事情，比如服务之间互相调用的接口，是使用&lt;code&gt;protocol buffer&lt;/code&gt;呢，还是使用&lt;code&gt;RESTful API&lt;/code&gt;，还是使用&lt;code&gt;Java RMI&lt;/code&gt;，这个才是架构师需要关注的问题，至于服务内部究竟使用什么，那就看开发人员自己了，&lt;strong&gt;架构师更需要关注系统的边界和分区&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;架构师应该与团队在一起，&lt;strong&gt;结对编程&lt;/strong&gt; 🤓🤓 了解普通工作，知道普通的工作是什么样子，做一个&lt;em&gt;代码架构师&lt;/em&gt; 😂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构师应该做什么&#34;&gt;架构师应该做什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供原则指导实践，比如Heroku的&lt;a href=&#34;https://jimmysong.io/posts/12-factor-app/&#34;&gt;12因素法则&lt;/a&gt;用来指导SAAS应用架构一样，微服务架构设计也要有一套原则。&lt;/li&gt;
&lt;li&gt;提供要求标准，通过日志功能和监控对服务进行集中式管理，明确接口标准，提供安全性建议。&lt;/li&gt;
&lt;li&gt;代码治理。为开发人员提供范例和服务代码模板。&lt;/li&gt;
&lt;li&gt;解决技术债务。&lt;/li&gt;
&lt;li&gt;集中治理和领导。维持良好的团队关系，当团队跑偏的时候及时纠正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3服务建模&#34;&gt;3.服务建模&lt;/h2&gt;
&lt;p&gt;以&lt;strong&gt;MusicCorp&lt;/strong&gt;这家公司的服务为例子讲解。&lt;/p&gt;
&lt;p&gt;服务建模的两个指导原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高内聚：关键是找出问题的边界，把相关的问题放在同一个服务中。&lt;/li&gt;
&lt;li&gt;松耦合：修改一个服务不需要修改另一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;strong&gt;限定上下文&lt;/strong&gt;（一个由显示边界限定的特定指责）的方法将服务拆分，比如MusicCorp的服务可以拆分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;财务部门&lt;/li&gt;
&lt;li&gt;仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们都不需要知道各自的具体实现，只要给它们提供特定的输入就会有你想要的产出。&lt;/p&gt;
&lt;p&gt;过早的将一个系统划分成微服务的代价非常高，尤其是在面对新领域时，将一个已有的代码库划分成微服务会比葱头开始建设微服务要简单的多。&lt;/p&gt;
&lt;h2 id=&#34;4集成&#34;&gt;4.集成&lt;/h2&gt;
&lt;p&gt;使用共享数据库，为用户创建好接口，可以使用RPC（protocol buffer、thrift）或者REST。服务端和客户端消息格式可以用Json或XML。当然每种技术都有各自的适用场景，结合自己的业务选择。&lt;/p&gt;
&lt;p&gt;微服务的协作方式是什么样的呢？基于事件的异步通信，使用消息中间件来实现事件发布和消费者接收机制。比如用Kafka或RabbitMQ。&lt;/p&gt;
&lt;h2 id=&#34;5分解单块系统&#34;&gt;5.分解单块系统&lt;/h2&gt;
&lt;p&gt;分解巨大无比没人感动的单块系统，首先要做的是理清代码库，找到&lt;strong&gt;接缝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;分解系统带来的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加快以后系统开发速度&lt;/li&gt;
&lt;li&gt;划清了团队结构（又是康威定律）&lt;/li&gt;
&lt;li&gt;增加安全审计功能后，保障安全性&lt;/li&gt;
&lt;li&gt;利于开展新技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-部署&#34;&gt;6. 部署&lt;/h2&gt;
&lt;p&gt;这一块跟传统服务的部署并没有太大的不同，无非是微服务的短平快，加快了CI（持续集成）的速度。如果将微服务打包为docker镜像，使用Jenkins、ansible、puppet等技术来部署微服务可以实现部署自动和效率的显著提高。&lt;/p&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;
&lt;p&gt;该书的后面还讲了&lt;strong&gt;测试&lt;/strong&gt;、&lt;strong&gt;监控&lt;/strong&gt;、&lt;strong&gt;安全&lt;/strong&gt;、&lt;strong&gt;康威定律&lt;/strong&gt;、最后还上升到&lt;strong&gt;人本&lt;/strong&gt;，给予广大的软件开发人员强烈的人文关怀，可见提倡架构师要融入团队，最一个&lt;strong&gt;代码架构师&lt;/strong&gt;和&lt;strong&gt;结对编程&lt;/strong&gt;的作者是多么博爱❤️。&lt;/p&gt;
&lt;p&gt;该书的核心部分是&lt;strong&gt;第11章规模化微服务&lt;/strong&gt;，为将在下篇中来探讨一下。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Vagrant从使用到放弃再到掌握完全指南</title>
      <link>https://jimmysong.io/blog/vagrant-intro/</link>
      <pubDate>Wed, 08 Mar 2017 20:40:08 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/vagrant-intro/</guid>
      <description>
        
        
        &lt;h2 id=&#34;起源&#34;&gt;起源&lt;/h2&gt;
&lt;p&gt;久闻&lt;strong&gt;Vagrant&lt;/strong&gt;大名，之前经常看到有开源项目使用它作为分布式开发的环境配置。&lt;/p&gt;
&lt;p&gt;因为今天在看&lt;a href=&#34;https://github.com/contiv/netplugin&#34;&gt;contiv&lt;/a&gt;正好里面使用vagrant搭建的开发测试环境，所以顺便了解下。它的&lt;a href=&#34;https://github.com/contiv/netplugin/blob/master/Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;文件中定义了三台主机。并安装了很多依赖软件，如consul、etcd、docker、go等，整的比较复杂。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  netplugin git:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ✗ vagrant status
Current machine states:

netplugin-node1           running &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;virtualbox&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
netplugin-node2           running &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;virtualbox&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
netplugin-node3           running &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;virtualbox&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;vagrant status NAME&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vagrant是&lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;hashicorp&lt;/a&gt;这家公司的产品，这家公司主要做数据中心PAAS和虚拟化，其名下大名鼎鼎的产品有&lt;code&gt;Consul&lt;/code&gt;、&lt;code&gt;Vault&lt;/code&gt;、&lt;code&gt;Nomad&lt;/code&gt;、&lt;code&gt;Terraform&lt;/code&gt;。他们的产品都是基于&lt;strong&gt;Open Source&lt;/strong&gt;的&lt;a href=&#34;https://github.com/hashicorp&#34;&gt;Github地址&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;
&lt;p&gt;Vagrant是用来管理虚拟机的，如VirtualBox、VMware、AWS等，主要好处是可以提供一个可配置、可移植和复用的软件环境，可以使用shell、chef、puppet等工具部署。所以vagrant不能单独使用，如果你用它来管理自己的开发环境的话，必须在自己的电脑里安装了虚拟机软件，我使用的是&lt;strong&gt;virtualbox&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Vagrant提供一个命令行工具&lt;code&gt;vagrant&lt;/code&gt;，通过这个命令行工具可以直接启动一个虚拟机，当然你需要提前定义一个Vagrantfile文件，这有点类似Dockerfile之于docker了。&lt;/p&gt;
&lt;p&gt;跟docker类比这来看vagrant就比较好理解了，vagrant也是用来提供一致性环境的，vagrant本身也提供一个镜像源，使用&lt;code&gt;vagrant init hashicorp/precise64&lt;/code&gt;就可以初始化一个Ubuntu 12.04的镜像。&lt;/p&gt;
&lt;h2 id=&#34;用法&#34;&gt;用法&lt;/h2&gt;
&lt;p&gt;你可以下载安装文件来安装vagrant，也可以使用RubyGem安装，它是用Ruby开发的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vagrantfile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vagrantfile是用来定义vagrant project的，使用ruby语法，不过你不必了解ruby就可以写一个Vagrantfile。&lt;/p&gt;
&lt;p&gt;看个例子，选自https://github.com/fenbox/Vagrantfile&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# vi: set ft=ruby :&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# All Vagrant configuration is done below. The &amp;#34;2&amp;#34; in Vagrant.configure&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# configures the configuration version (we support older styles for&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# backwards compatibility). Please don&amp;#39;t change it unless you know what&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# you&amp;#39;re doing.&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;Vagrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# The most common configuration options are documented and commented below.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# For a complete reference, please see the online documentation at&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# https://docs.vagrantup.com.&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Every Vagrant development environment requires a box. You can search for&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# boxes at https://atlas.hashicorp.com/search.&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ubuntu/trusty64&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Disable automatic box update checking. If you disable this, then&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# boxes will only be checked for updates when the user runs&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# `vagrant box outdated`. This is not recommended.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# config.vm.box_check_update = false&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Create a forwarded port mapping which allows access to a specific port&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# within the machine from a port on the host machine. In the example below,&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# accessing &amp;#34;localhost:8080&amp;#34; will access port 80 on the guest machine.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 8080&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Create a private network, which allows host-only access to the machine&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# using a specific IP.&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;private_network&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;192.168.33.10&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Create a public network, which generally matched to bridged network.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Bridged networks make the machine appear as another physical device on&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# your network.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# config.vm.network &amp;#34;public_network&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Share an additional folder to the guest VM. The first argument is&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# the path on the host to the actual folder. The second argument is&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# the path on the guest to mount the folder. And the optional third&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# argument is a set of non-required options.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# config.vm.synced_folder &amp;#34;../data&amp;#34;, &amp;#34;/vagrant_data&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Provider-specific configuration so you can fine-tune various&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# backing providers for Vagrant. These expose provider-specific options.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Example for VirtualBox:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# config.vm.provider &amp;#34;virtualbox&amp;#34; do |vb|&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   # Display the VirtualBox GUI when booting the machine&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   vb.gui = true&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   # Customize the amount of memory on the VM:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   vb.memory = &amp;#34;1024&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# end&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# View the documentation for the provider you are using for more&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# information on available options.&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Define a Vagrant Push strategy for pushing to Atlas. Other push strategies&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# such as FTP and Heroku are also available. See the documentation at&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# https://docs.vagrantup.com/v2/push/atlas.html for more information.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# config.push.define &amp;#34;atlas&amp;#34; do |push|&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   push.app = &amp;#34;YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# end&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Enable provisioning with a shell script. Additional provisioners such as&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# documentation for more information about their specific syntax and use.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# config.vm.provision &amp;#34;shell&amp;#34;, inline: &amp;lt;&amp;lt;-SHELL&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   apt-get update&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   apt-get install -y apache2&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# SHELL&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;provision&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;bootstrap.sh&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Boxes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vagrant的基础镜像，相当于docker images。可以在这些基础镜像的基础上制作自己的虚拟机镜像。&lt;/p&gt;
&lt;p&gt;添加一个box&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ vagrant box add hashicorp/precise64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Vagrantfile中指定box&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;Vagrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;hashicorp/precise64&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;1.1.0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用ssh进入vagrant&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vagrant up&lt;/code&gt;后就可以用&lt;code&gt;vagrant ssh $name&lt;/code&gt;进入虚拟机内，如果主机上就一个vagrant可以不指定名字。默认进入的用户是vagrant。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件同步&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vagrant up&lt;/code&gt;后在虚拟机中会有一个&lt;code&gt;/vagrant&lt;/code&gt;目录，这跟你定义&lt;code&gt;Vagrantfile&lt;/code&gt;是同一级目录。&lt;/p&gt;
&lt;p&gt;这个目录跟你宿主机上的目录文件是同步的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Vagrantfile中定义要安装的软件和操作。&lt;/p&gt;
&lt;p&gt;例如安装apache&lt;/p&gt;
&lt;p&gt;在与Vagrantfile同级的目录下创建一个&lt;code&gt;bootstrap.sh&lt;/code&gt;文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
apt-get update
apt-get install -y apache2
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; ! &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -L /var/www &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  rm -rf /var/www
  ln -fs /vagrant /var/www
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在Vagrantfile中使用它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;Vagrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;hashicorp/precise64&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;1.1.0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;端口转发&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;Vagrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;hashicorp/precise64&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;provision&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;bootstrap.sh&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;network&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:forwarded_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;guest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4567&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;code&gt;vagrant reload&lt;/code&gt;或者&lt;code&gt;vagrant up&lt;/code&gt;可以生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你自己做的vagrant是可以分享给别人的用的，只要你有一个hashicorp账号，&lt;code&gt;vagrant login&lt;/code&gt;后就可以执行&lt;code&gt;vagrant share&lt;/code&gt;分享，会生成一个URL，其它人也可以访问到你的vagrant里的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中止&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vagrant suspend&lt;/li&gt;
&lt;li&gt;Vagrant halt&lt;/li&gt;
&lt;li&gt;Vagrant destroy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;重构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再次执行&lt;code&gt;vagrant up&lt;/code&gt;即可。&lt;/p&gt;
&lt;h2 id=&#34;分布式环境&#34;&gt;分布式环境&lt;/h2&gt;
&lt;p&gt;开发分布式环境下的应用时往往需要多个虚拟机用于测试，这时候才是vagrant显威力的时候。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义多个主机&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;Vagrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;provision&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;inline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;echo Hello&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;apache&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个比较复杂，&lt;a href=&#34;https://www.vagrantup.com/docs/multi-machine/&#34;&gt;详见 multi-machine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有一些其它功能，如push、plugins、providers按下不表。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说说Vagrant没有Docker好用，但是对于协同开发，用它来定义分布式开发环境还可以，ruby的语法看着有点不习惯，好在也不复杂，如果是团队几个人开发，弄几个虚拟机大家互相拷贝一下也没那么复杂吧？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上内容写于2017年3月8日，下面是更新。&lt;/p&gt;
&lt;p&gt;一年前初次接触Vagrant感觉它很繁琐，为了创建几个隔离的环境要费好大的功夫，要直接从启动虚拟机起开始安装各种软件，跟docker比自然是不能比的，但是最近我又需要一个kubernetes的分布式开发环境：&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&lt;/a&gt;，因此又把vagrant捡起来了，用了也有几个月，有一点心得分享给大家。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先Vagrant并不是那么难用，对于需要一个纯粹的隔离的从纯净的操作系统级别开始部署的分布式应用来说，用它来启动和做虚拟机配置还是比较方便的。&lt;/li&gt;
&lt;li&gt;Vagrantfile中支持多种格式的脚本，我使用的是shell，在写脚本的时候要特别注意格式，比如用&lt;code&gt;cat&lt;/code&gt;或者&lt;code&gt;echo&lt;/code&gt;输入文本命令内容到文件中时候一定要注意每行开头不要有空格。&lt;/li&gt;
&lt;li&gt;Vagrant会把&lt;code&gt;Vagrantfile&lt;/code&gt;文件所在目录下的所有文件同步复制到虚拟机中的&lt;code&gt;/vagrant&lt;/code&gt;目录下，所有命令都是使用vagrant用户执行的。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;更新于2018年3月18日&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

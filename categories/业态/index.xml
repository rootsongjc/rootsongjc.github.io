
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 业态</title>
    <link>https://jimmysong.io/categories/%E4%B8%9A%E6%80%81/</link>
    <description>Recent content in 业态 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Mon, 15 Jul 2024 11:17:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/categories/%E4%B8%9A%E6%80%81/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>你可能不需要微服务</title>
      <link>https://jimmysong.io/trans/you-probably-dont-need-microservices/</link>
      <pubDate>Mon, 15 Jul 2024 11:17:49 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/you-probably-dont-need-microservices/</guid>
      <description>
        
        
        &lt;p&gt;撰写这篇博客非常有趣，虽然它可能不受某些人欢迎，但这是一个必须讨论的话题。&lt;/p&gt;
&lt;p&gt;亲爱的开发者朋友们，我们需要开诚布公地讨论一下微服务以及某些不适宜的使用场景。这个过程可能不会轻松，但我们必须进行这样的探讨，否则我们无法取得成功。&lt;/p&gt;
&lt;p&gt;如今，微服务极为流行，它是一种优秀的架构风格，有助于扩展系统和组织架构。许多成功的公司都在使用微服务（例如 Netflix、Spotify 等），因此，大多数公司正在使用或计划使用微服务并不令人意外。然而，一些公司忽视了它带来的额外成本。&lt;/p&gt;
&lt;p&gt;在深入讨论之前，让我分享一下我与微服务的经历。&lt;/p&gt;
&lt;h2 id=&#34;起始---是微服务吗&#34;&gt;起始 - 是微服务吗？&lt;/h2&gt;
&lt;p&gt;2012 年，在我当时的公司，我们面临一个挑战：如何使公司扩展到数千名工程师和增加 1000 倍的交易量。这篇文章不关注招聘、入职等方面，而是关注架构。&lt;/p&gt;
&lt;p&gt;当时我在阅读《Scalability Rules: 50 Principles for Scaling Web Sites》，这本书介绍了 AKF Scale Cube。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/you-probably-dont-need-microservices/f1_hu4044467529268307799.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/you-probably-dont-need-microservices/f1.jpg&#34; data-img=&#34;/trans/you-probably-dont-need-microservices/f1.jpg&#34; data-width=&#34;445&#34; data-height=&#34;305&#34; alt=&#34;image&#34; data-caption=&#34;来自《Scalability Rules: 50 Principles for Scaling Web Sites》的 AKF Scale Cube&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;来自《Scalability Rules: 50 Principles for Scaling Web Sites》的 AKF Scale Cube&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我发现这个模型非常容易理解。因此，我用它来向其他人解释为什么我们需要在生产环境中运行不同的二进制文件。搜索模块的流量模式与购物车模块的流量模式完全不同。将这些组件分开是有道理的。此外，这也允许我们拥有多个独立、自主的团队。这将有助于我们面对公司扩大到数千名工程师的挑战。&lt;/p&gt;
&lt;p&gt;当时我们并没有称之为微服务，只是服务。&amp;ldquo;微服务&amp;quot;这个术语还没有出现在我们的雷达上。在这一过程中，我们犯了很多错误。但从问题出发做出的决定，回顾起来，是正确的。&lt;/p&gt;
&lt;p&gt;因此，你现在知道我对这个话题相当熟悉，而且在这 10 多年中，我在实施众多服务和进行大量重新架构方面有过很多经验。&lt;/p&gt;
&lt;h2 id=&#34;那么问题出在哪里&#34;&gt;那么，问题出在哪里？&lt;/h2&gt;
&lt;p&gt;从本质上说，微服务没有错。单体架构也没有错。但我们的行业似乎忘记了没有银弹。有时候，某些选择实际上可能会带来伤害。不相信？让我给你举几个例子。&lt;/p&gt;
&lt;h4 id=&#34;示例-1---你得到一个服务他也得到一个服务大家都得到一个服务&#34;&gt;示例 1 - 你得到一个服务，他也得到一个服务，大家都得到一个服务&lt;/h4&gt;
&lt;p&gt;我喜欢与行业中的其他人交流，了解他们正在做什么并分享我的经验。这些对话是拓展人脉和从聪明人那里获得洞察的好方法。&lt;/p&gt;
&lt;p&gt;我记得特别是和一家拥有约 200 人技术部门的创业公司的两位工程总监的一次对话。他们是令人难以置信的人物，非常聪明，也很好交流。&lt;/p&gt;
&lt;p&gt;我通常喜欢深入了解技术领域，了解公司正在做什么以及主要的挑战是什么。因此，不出所料，我询问他们是否可以告诉我更多关于架构和团队组织方式的信息。&lt;/p&gt;
&lt;p&gt;其中一位说他们在生产中使用了一个复杂的微服务系统。然后说他们在生产中运行了大约 350 个微服务。他们说的最大挑战是确保所有这些微服务得到维护——过时的依赖项，过时的运行时版本，对一些服务的内部了解不足等。&lt;/p&gt;
&lt;p&gt;公司的微服务数量超过了开发人员数量。在那些为客户提供许多功能的以产品为中心的公司中，跟上所有这些微服务的步伐是很困难的。&lt;/p&gt;
&lt;h4 id=&#34;示例-2---你变我也变大家都变&#34;&gt;示例 2 - 你变我也变，大家都变&lt;/h4&gt;
&lt;p&gt;低耦合和高内聚很难做到正确。在微服务架构中做到这一点更是难上加难。你可能最终会得到一些非常小的微服务（也称为纳米服务），它们耦合紧密，内聚性低。&lt;/p&gt;
&lt;p&gt;我记得在之前的公司中，一个“有界上下文”有许多小服务，任何变更都需要许多团队共同努力才能实现。更糟糕的是，性能非常差。&lt;/p&gt;
&lt;p&gt;这个例子非常好，因为在此基础上，团队希望建立另一个服务来整合所有信息以提高性能。将小服务合并以增加内聚力的想法被认为是不好的，因为它看起来，我引用一下，&amp;ldquo;像一个单体&amp;rdquo;。&lt;/p&gt;
&lt;h4 id=&#34;示例-3---一切都好直到不好&#34;&gt;示例 3 - 一切都好，直到不好&lt;/h4&gt;
&lt;p&gt;随着技术行业裁员的增多，我越来越多地听到公司在大幅裁员后还拥有太多服务的情况。&lt;/p&gt;
&lt;p&gt;这可能不是一个公平的例子，因为谁能猜到公司会开始裁减其技术部门的 40% 或 60% 呢？问题是，简单是我们行业中最难的事情之一。但我们应该力求将事物保持在尽可能简单的状态，但又不能过于简单。&lt;/p&gt;
&lt;p&gt;拥有简单系统的公司在生产中拥有更多的灵活性。他们可以削减成本和减少人员而不必过多担心运营负担。&lt;/p&gt;
&lt;h4 id=&#34;示例-4---让我们使用微服务开始我们的创业项目&#34;&gt;示例 4 - 让我们使用微服务开始我们的创业项目&lt;/h4&gt;
&lt;p&gt;这将是最后一个例子，我保证。这实际上来自一个我正在努力寻找的讲座——如果你知道我所指的是哪个讲座，请在评论中告诉我，以便我可以给予适当的致谢。&lt;/p&gt;
&lt;p&gt;绿地项目很棒，对吧？它就像一块等待创意艺术家开始绘画的空白画布。在这种情况下，艺术家选择绘制一幅多彩的画作。艺术家挑选了所有主要颜色，Ruby、Golang 和 Java。他们将这些颜色与一些 Postgresql、Elasticsearch 和 Cassandra 混合在一起。&lt;/p&gt;
&lt;p&gt;这幅画？如果他们能找到时间完成的话，它本可以成为一幅毕加索作品。&lt;/p&gt;
&lt;p&gt;是否总是不好的？&lt;/p&gt;
&lt;p&gt;我并不是说它不好。我相信 Jet.com 实际上是从使用微服务开始的，并且成功地被沃尔玛收购。我只是说我们作为工程师，需要进行批判性思考并选择最佳方案。&lt;/p&gt;
&lt;h2 id=&#34;好的但为什么&#34;&gt;好的，但为什么？&lt;/h2&gt;
&lt;p&gt;有些人读到这里可能会想，“这是技能问题”。其实不是。在前两个例子中，我认识涉及的人。他们都是非常聪明的优秀工程师。我相信其他例子中的人也同样聪明。&lt;/p&gt;
&lt;p&gt;我们可能已经内化了微服务的思维方式。这也许就是为什么我们看到如此多的小团队采用微服务的原因。这种思维方式深深地植入了我们的大脑。&lt;/p&gt;
&lt;p&gt;零利率政策 (ZIRP) 也可能是罪魁祸首。ZIRP 可能确实促进了这一现象。公司希望增长，并且聘请大量开发人员成为大多数公司的标准选择。&lt;/p&gt;
&lt;p&gt;在后 ZIRP 时代，我预期人们会更加意识到微服务的隐藏成本。即使微服务是解决手头问题的好方法，管理层可能也会更加不愿采用它。&lt;/p&gt;
&lt;h2 id=&#34;你还有时间&#34;&gt;你还有时间&lt;/h2&gt;
&lt;p&gt;如果上述任何例子反映了你的现实，请不要担心。软件的好处是你几乎总是可以改变它。如果你将其视为一个“问题”，试着将“问题”一词替换为“机会”——就像笑话中说的，我有一个喝酒的“机会”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你是否处于服务数量影响你创新能力的位置？&lt;/strong&gt; 制定一个策略，让你的公司可以减少运营开销。也许你可以放松对可靠性的要求，或者你可以投资简化系统架构，以便在未来拥有更多的创新能力。&lt;/p&gt;
&lt;p&gt;第二个例子中的团队就是这样做的。他们提出了一个以节约成本和改善客户体验为重点的合并服务的策略。利益相关者非常满意。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你是否正在创办一家公司？&lt;/strong&gt; 如果你正在创办一家公司并考虑使用微服务，请撰写一份设计文档，解释什么挑战，为什么选择微服务，以及你考虑过的替代方案。如果你有信任的人，分享这份设计文档并征求他们的反馈——如果你可以合法地这样做的话。这可能有助于澄清你的思路并清晰地了解微服务是否适合你的创业项目的正确架构风格。&lt;/p&gt;
&lt;p&gt;微服务很棒，但它增加了你的系统和组织的复杂性。工作方式发生变化，架构变得更加复杂，如果你正从单体架构迁移到微服务，要理解这将需要多年时间。你需要在急于采用微服务之前停下来思考，它们将如何帮助你，又将如何伤害你&amp;hellip;&lt;/p&gt;
&lt;p&gt;而且相信我，它会同时带来伤害和喜悦，即使它是最佳的架构风格。就像生活中的每一件好事一样。&lt;/p&gt;
&lt;p&gt;所以，亲爱的开发者们，我之所以开始这场对话，是因为我关心。我关心我们行业的未来。我希望我们的行业能长久、持续、可持续地建立能抵御时间考验的软件。我希望我们的行业能做出务实的决策，将技术作为手段，而不是目的。&lt;/p&gt;
&lt;p&gt;有时候微服务很棒……但你可能并不需要微服务。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Weaveworks 倒闭：云原生行业的变革与挑战</title>
      <link>https://jimmysong.io/trans/end-of-an-era-weaveworks-closes-shop-amid-cloud-native-turbulence/</link>
      <pubDate>Wed, 07 Feb 2024 09:05:42 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/end-of-an-era-weaveworks-closes-shop-amid-cloud-native-turbulence/</guid>
      <description>
        
        
        &lt;p&gt;Weaveworks 的首席执行官兼联合创始人 Alexis Richardson 在 LinkedIn 上分享了公司关闭的沉重消息。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.weave.works/&#34; title=&#34;Weaveworks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weaveworks&lt;/a&gt;，曾经在云原生容器管理领域是创新的先驱，如今宣布停止运营，这一举动反映了科技初创公司行业不稳定的本质。&lt;/p&gt;
&lt;p&gt;在周一发布的令人惊讶的&lt;a href=&#34;https://www.linkedin.com/posts/richardsonalexis_hi-everyone-i-am-very-sad-to-announce-activity-7160295096825860096-ZS67/&#34; title=&#34;LinkedIn 帖子&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkedIn 帖子&lt;/a&gt;中，Weaveworks 首席执行官宣布公司即将停止运营。&lt;/p&gt;
&lt;p&gt;Weaveworks 的故事是一个典型的初创公司与市场动态和资金约束的潮起潮落的故事。尽管在 2023 年取得了两位数的增长，但公司面临着“波动”的销售和资金不足的局面，加剧了失败的收购谈判，这是许多初创公司都害怕但不可避免地会遇到的情况。&lt;/p&gt;
&lt;p&gt;成立于 2014 年，当时“云原生”这个词更多地是一个噱头而不是一个商业现实时，Weaveworks 立志于用他们的新概念&lt;a href=&#34;https://www.weave.works/technologies/gitops/&#34; title=&#34;GitOps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitOps&lt;/a&gt;来塑造未来的云基础设施管理。然而，尽管有着开拓精神和早期进入市场的优势，但该公司仍然与一个司空见惯的敌人搏斗：财务可持续性。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/weaveworks/weave-gitops&#34; title=&#34;Weave GitOps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weave GitOps&lt;/a&gt;是一个开源软件包，旨在简化从 Git 存储库到 Kubernetes 集群的连续交付（CD）过程中部署应用程序和更新的过程，对公司未来的光明有所期待。然而，这一切都成为了泡影。&lt;/p&gt;
&lt;p&gt;云原生领域的竞争在多年来不断加剧，竞争对手如&lt;a href=&#34;https://circleci.com/&#34; title=&#34;CircleCI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CircleCI&lt;/a&gt;和&lt;a href=&#34;https://www.harness.io/&#34; title=&#34;Harness Labs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Harness Labs&lt;/a&gt;吸引了注意力和资金。Weaveworks 与这些资金更充裕的竞争对手的斗争凸显了初创公司生态系统的残酷现实，即单靠创新并不能保证成功。&lt;/p&gt;
&lt;p&gt;在其生命周期内，&lt;a href=&#34;https://www.crunchbase.com/organization/weaveworks&#34; title=&#34;Weaveworks 筹集了超过 6100 万美元&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weaveworks 筹集了超过 6100 万美元&lt;/a&gt;。但是，该公司 2020 年的最后一轮融资金额为 3600 万美元。这是不错的，但在风险投资界，四年已经是一段漫长的时间了。随着 2022 年经济的下滑，该公司 —— 像许多其他公司一样 —— 首先无法获得更多的投资，然后未能达成一项合并协议，这将为其提供前进的道路。&lt;/p&gt;
&lt;h2 id=&#34;短暂的科技&#34;&gt;短暂的科技&lt;/h2&gt;
&lt;p&gt;Richardson 的公告不仅是告别，也是对科技创业的暂时性提醒。他对公司的结局感到遗憾，但也指出了行业面临的更广泛挑战。这是许多初创公司都能够共鸣的情感，突显了即使是最有前景的企业在面对财务不稳定和市场饱和的现实时也可能失败。&lt;/p&gt;
&lt;p&gt;然而，Weaveworks 的遗产将永存。公司对开源社区的贡献，特别是通过&lt;a href=&#34;https://www.cncf.io/projects/flux/&#34; title=&#34;CNCF Flux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Flux&lt;/a&gt;，证明了其致力于推动云原生技术发展的承诺。Richardson 希望 Flux 能够继续下去。&lt;/p&gt;
&lt;p&gt;“故事并没有就此结束 —— 我们的开源软件被广泛使用。我正在与几个大型组织合作，确保 CNCF Flux 处于最健康的状态，”Richardson 写道。&lt;/p&gt;
&lt;p&gt;在我们回顾 Weaveworks 的关闭时，很明显，科技生态系统既是机遇的乐土，也是耐力的战场。该公司的故事是对驱动科技行业向前发展的创业精神的感人提醒，即使在面对变革的必然性和商业运营的严酷现实时也是如此。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生软件的关键用例安全保障之道</title>
      <link>https://jimmysong.io/trans/securing-cloud-natives-most-important-use-cases/</link>
      <pubDate>Wed, 10 Jan 2024 08:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/securing-cloud-natives-most-important-use-cases/</guid>
      <description>
        
        
        &lt;p&gt;摘要：云原生软件开发意味着为公有云和私有云的特性优化应用和环境。Chainguard 旨在提供不影响开发者体验的软件供应链安全工具，通过提供最小化、强化的容器镜像，让用户能够准确地扫描漏洞并消除 CVE 警报。本文介绍了 Chainguard Images 为 Istio 和 Cilium 这两个云原生基础技术提供的安全增强方案。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;从根本上说，构建云原生软件意味着构建针对公共和私有云特性进行优化的应用程序和环境。开发云原生软件意味着管理一定程度的混乱，这不是所有类型的软件都需要的。&lt;/p&gt;
&lt;p&gt;这在新的一年尤其重要，我们可以预期产品将趋向于优先考虑开发者体验，并且平台工程的崛起。良好的工程和工具使开发者可以专注于构建和创新。已经构建的所有内部开发者平台和即将推出的平台都需要尽量将基础设施管理从开发者那里抽象出来。&lt;/p&gt;
&lt;p&gt;这正是 Chainguard 想要解决的问题领域，特别是在安全性和漏洞管理方面。我们致力于提供不妨碍开发者体验的工具，以确保软件供应链的安全。我们通过提供最小化、加固的容器镜像来实现这一目标，这使我们的用户可以获得准确的扫描结果，并将 CVE 收件箱警报降至零。&lt;/p&gt;
&lt;h3 id=&#34;推出新的-chainguard-images-捆绑包适用于-cilium-和-istio&#34;&gt;推出新的 Chainguard Images 捆绑包，适用于 Cilium 和 Istio&lt;/h3&gt;
&lt;p&gt;为了实现这一目标，我们密切关注最受欢迎的开源项目，但也关注那些如果经过加固，将为整个开源生态系统提供重要的安全改进的项目。为了在整个生态系统中产生最大的影响，我们应该帮助加固那些作为云原生软件基石的技术。Istio 和 Cilium 正是这样的明显示例，它们是云原生软件生态系统的基础构建模块之一。通过提供新的 Chainguard Images Istio 和 Cilium 捆绑包，我们为这些项目的用户提供了一个安全地将它们引入其构建流程的简便方法。&lt;/p&gt;
&lt;p&gt;在任何给定的供应链中，有些原材料比其他原材料更为基础。如果这些原材料得到了妥善保护，那么这将对后续工作产生连锁效应（或者如果你愿意的话，可以说是对整个堆栈产生上下游影响）。&lt;/p&gt;
&lt;p&gt;Cilium 和 Istio 技术都涵盖了对 Kubernetes 环境具有基础作用的各种用例。Cilium 和 Istio 是两个流行的工具，通过提供流量路由、负载平衡、服务发现等功能来帮助解决这些挑战。这些功能对于确保 Kubernetes 和其他云原生软件部署的顺利、高效和安全运行至关重要。最终，构建云原生软件意味着创建专为云设计的应用程序，而 Cilium 和 Istio 在帮助开发者实现这一目标方面发挥了关键作用。&lt;/p&gt;
&lt;h3 id=&#34;istio-和-cilium-在云计算中不可或缺的作用&#34;&gt;Istio 和 Cilium 在云计算中不可或缺的作用&lt;/h3&gt;
&lt;p&gt;根据 2022 年的 &lt;a href=&#34;https://www.cncf.io/reports/cncf-annual-survey-2022/&#34; title=&#34;CNCF 年度调查&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 年度调查&lt;/a&gt;，Istio 是受访者中使用最广泛的服务网格，73% 的受访公司使用它。这种广泛的采用证明了 Istio 在解决各种服务管理挑战方面的有效性，使其成为现代企业寻求构建强大、安全和可扩展的微服务架构的重要工具。Istio 在 GitHub 上拥有超过 34,000 颗星星，使其成为 CNCF 中最受欢迎的项目之一。&lt;/p&gt;
&lt;p&gt;从同一份 CNCF 调查中，有 47% 的受访者将 Cilium 作为他们容器编排平台（如 Kubernetes）的首选网络插件。它也受欢迎于网络安全领域，有 43% 的受访者将其用于此目的。eBPF 的未来和力量是不可思议的，所有人都同意这一点。&lt;/p&gt;
&lt;p&gt;最近，我们推出了我们的新的 &lt;a href=&#34;https://images.chainguard.dev/&#34; title=&#34;Chainguard Images 目录&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chainguard Images 目录&lt;/a&gt;，这是一个公开可用的网站，用户可以在其中浏览我们库存中的所有镜像。在每个 Chainguard&lt;/p&gt;
&lt;p&gt;Image 列表中，你将找到有关安装、基础设施、签名和 SBOM 的源数据的相关信息，以及更多其他相关信息。Chainguard Images 目录还包括一个新的&lt;a href=&#34;https://images.chainguard.dev/security&#34; title=&#34;安全通报&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全通报&lt;/a&gt;页面，显示用户已知的 CVE，修复的状态等信息。&lt;/p&gt;
&lt;p&gt;如果你正在寻找更多关于如何在本地环境中启动 Chainguard Images Cilium 或 Istio 捆绑包的技术指导，请查看 Chainguard 工程师&lt;a href=&#34;https://www.linkedin.com/in/tcnghia/&#34; title=&#34;Nghia Tran&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nghia Tran&lt;/a&gt;在 Chainguard Academy 上提供的这些方便入门的指南。非常感谢我们的朋友&lt;a href=&#34;https://www.linkedin.com/in/feroz-salam-372a4113/&#34; title=&#34;Isovalent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Isovalent&lt;/a&gt;的 Feroz Salam 在 Cilium Images 方面给了我们帮助，以及多年来帮助我们的 Istio 的&lt;a href=&#34;https://www.linkedin.com/in/-johnhoward/&#34; title=&#34;John Howard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Howard&lt;/a&gt;！以下是指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://edu.chainguard.dev/chainguard/chainguard-images/getting-started/getting-started-istio/&#34; title=&#34;开始使用 Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开始使用 Istio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://edu.chainguard.dev/chainguard/chainguard-images/getting-started/getting-started-cilium/&#34; title=&#34;开始使用 Cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开始使用 Cilium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chainguard Developer Images 提供了带有 &lt;code&gt;:latest&lt;/code&gt; 和 &lt;code&gt;:latest-dev&lt;/code&gt; 标签的免费镜像，供你在开发和测试环境中使用。在新的目录中，每个镜像页面还包括重要的特定于镜像的详细信息，例如版本标签和其他变体，如 FIPS 和长期支持（LTS），这些都适用于购买了这些解决方案的 Chainguard Images 客户。如果你想了解有关我们的 Production Images 中面向企业的功能的更多信息，请&lt;a href=&#34;https://www.chainguard.dev/contact&#34; title=&#34;联系我们的团队&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们的团队&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>2024 年 API 管理趋势预测</title>
      <link>https://jimmysong.io/trans/what-will-be-the-api-management-trends-for-2024/</link>
      <pubDate>Mon, 01 Jan 2024 11:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/what-will-be-the-api-management-trends-for-2024/</guid>
      <description>
        
        
        &lt;p&gt;我们已经审视了 2023 年的发展，并确定了几个可能在明年主导 API 管理领域的关键趋势。&lt;/p&gt;
&lt;p&gt;根据一个想法：API 完全控制了数字世界，预测到本十年结束时，API 管理市场将增长六倍。&lt;/p&gt;
&lt;p&gt;随着越来越多的公司转向 API 为先的架构，API 管理的需求变得至关重要。一家组织可能会管理数百甚至数千个微服务，它们需要工具来有效地编排和监控这些 API。&lt;/p&gt;
&lt;p&gt;因此，随着这种增长的开始，API 管理在未来会带来什么？我们已经审视了 2023 年的发展，并确定了几个可能在 2024 年主导 API 管理领域的关键趋势。&lt;/p&gt;
&lt;h2 id=&#34;是时候实行零信任了这并不是坏事&#34;&gt;是时候实行零信任了（这并不是坏事！）&lt;/h2&gt;
&lt;p&gt;随着 API 的不断增加，安全漏洞、黑客和 API 问题的风险也在增加。将零信任安全概念与你的 API 战略结合起来，倡导一种安全模型，其中不管交互发生在网络边界内还是外部，都不会假定信任。&lt;/p&gt;
&lt;p&gt;这种方法要求对每个试图访问网络内资源的个人和设备进行严格的身份验证，有效地消除了传统的受信任的内部网络概念。在数据泄露和恶意行为者变得越来越复杂的时代，采用零信任框架对于全面的安全至关重要，包括 API、云服务和网络基础设施在内的所有技术方面。&lt;/p&gt;
&lt;p&gt;在 API 管理领域，API 网关在实施零信任架构中起着关键作用。作为第一道防线，这些网关对每个 API 请求执行严格的身份验证和授权策略。它们负责验证凭据，管理访问令牌，并确保每个请求，无论来自组织内部还是外部，都要经过相同严格的安全检查。&lt;/p&gt;
&lt;p&gt;在这个框架中，API 网关不仅仅是流量管理器；它们是安全姿态的一部分，将零信任原则嵌入到 API 交互的核心。它们帮助构建适应持续风险评估、基于上下文的访问控制和深度监控 API 使用模式的动态安全策略。&lt;/p&gt;
&lt;p&gt;在零信任模型中，API 网关演变为安全执行者，对流经 API 的数据的完整性和机密性至关重要。这种演变强调了高级 API 管理工具在维护零信任原则和确保安全和弹性基础设施方面的重要性。&lt;/p&gt;
&lt;h2 id=&#34;多体验架构将成为常态&#34;&gt;“多体验架构”将成为常态&lt;/h2&gt;
&lt;p&gt;随着 2024 年 Gartner 的“多体验架构”概念变得越来越普遍，API 管理的复杂性将升级。组织不再只处理一种类型的 API；他们在同一应用生态系统中处理多种协议和架构。这种情况是现代应用多样性的结果，这些应用不仅包括基于 Web 的门户和本机移动应用，还包括扩展，如手表应用、实时对话界面和人工智能集成。&lt;/p&gt;
&lt;p&gt;每个组件都需要特定的 API 方法。通常情况下，REST API 在外部通信中因其简单性和通用性而受欢迎，而 gRPC 由于其效率和速度而可能被选择用于内部服务通信。与此同时，GraphQL 因其创建联合图和子图的能力而越来越多地用于高度灵活和高效的数据检索，这对于复杂的客户端应用程序是必不可少的。此外，消息代理对于实现需要立即数据更新和交互的应用程序的实时通信至关重要。&lt;/p&gt;
&lt;p&gt;在这种环境下，API 管理的挑战是多方面的。它涉及编排不同类型的 API 并确保在这些不同的架构中实现无缝集成、一致的安全执行和有效的性能监控。解决方案在于高级 API 管理工具和网关，它们能够处理这种多样性。这些工具必须提供复杂的功能，如协议转换、统一的安全策略和可以适应每种 API 类型的独特需求的分析。&lt;/p&gt;
&lt;p&gt;因此，2024 年的 API 管理将涉及到拥抱和管理这种复杂性，提供一个有凝聚力和高效率的框架，支持多体验架构的各种需求。&lt;/p&gt;
&lt;h2 id=&#34;api-管理正在变成组织管理&#34;&gt;API 管理正在变成组织管理&lt;/h2&gt;
&lt;p&gt;有一个著名的故事，来自前亚马逊和谷歌工程师 Steve Yegge，讲述了 Jeff Bezos 在 2002 年在亚马逊网络服务（AWS）制定的一项核心任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;所有团队将通过服务接口公开其数据和功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;团队必须通过这些接口相互通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不允许其他形式的进程间通信：不允许直接链接，不允许直接读取另一个团队的数据存储，不允许共享内存模型，也不允许任何后门。唯一允许的通信是通过网络上的服务接口调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论他们使用什么技术。HTTP、Corba、Pubsub、自定义协议——都无所谓。贝佐斯不关心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有服务接口，没有例外，必须从头开始设计，以便能够将接口暴露给外部世界的开发人员。不允许例外。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不这样做的人将被解雇。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;贝佐斯正在为亚马逊的面向服务的体系结构打下基础。二十二年后，这一框架在技术领域普及。这意味着 API 管理实际上是团队在组织内部进行通信和操作的方式。&lt;/p&gt;
&lt;p&gt;API 已经成为组织过程的生命线，代表了从孤立的功能到集成系统的转变。这种转变将 API 管理从技术任务转变为组织领导的核心方面。这带来了几个具体的变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;战略对齐&lt;/strong&gt;。API 管理与业务战略密切对齐。它涉及理解 API 如何能够实现业务目标，如进入新市场、提升客户体验或简化运营。这种战略对齐要求 API 倡议与组织的方向和目标同步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨职能合作&lt;/strong&gt;。API 不再仅仅是 IT 部门的责任。它们需要跨各种功能领域的合作，包括营销、销售、客户服务和业务发展。这种合作确保 API 以支持多样化的组织需求和机会的方式开发和管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将 API 作为产品的思维方式&lt;/strong&gt;。API 越来越被视为产品，有专门的团队负责它们的生命周期，从构思到淘汰。这种方法涉及定期更新、用户反馈集成和持续改进，就像公司提供的任何其他产品或服务一样。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能指标和分析&lt;/strong&gt;。API 的成功不仅通过技术性能来衡量，还通过其对业务结果的影响来衡量。诸如 API 使用趋势、用户参与度和对收入增长的贡献等指标成为 API 有效性的重要指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，API 的管理不再仅仅关于技术规范或协议，而是关于管理信息分享和服务交付的方式，跨整个组织。这种方法促进了敏捷性、可扩展性和创新，这在今天不断发展的技术领域中是必不可少的。&lt;/p&gt;
&lt;h2 id=&#34;gitops-已经在-api-中使用&#34;&gt;GitOps 已经在 API 中使用&lt;/h2&gt;
&lt;p&gt;将 GitOps 集成到 API 管理中标志着 API 是如何更高效、透明和可靠地开发、部署和维护的一种显著转变。GitOps 是一种将 git 的版本控制原则应用于操作工作流程的方法，对于以更高效、透明和可靠的方式管理 API 的生命周期至关重要。&lt;/p&gt;
&lt;p&gt;在这个框架中，API 的每个方面，从其设计文档和配置到代码和部署清单，都存储在 git 存储库中。这种方法确保了整个 API 生命周期都受到版本控制，允许详细跟踪更改，以及在出现问题时轻松回滚，增强了团队成员之间的协作。&lt;/p&gt;
&lt;p&gt;自动化部署流程是使用 GitOps 管理 API 的一个关键优势。通过利用 git 作为唯一的真相来源，可以设置自动化流水线，以在提交更改时部署 API。这种自动化不仅限于简单的部署，还包括配置和策略的更新，确保 API 的所有方面都得到一致和可靠的更新。团队可以创建与 GitOps 工作流程直接集成的分散的声明性工作流，用于复杂的自定义配置。&lt;/p&gt;
&lt;p&gt;GitOps 还为 API 管理带来了更高级别的安全性。关于更改的拉取请求鼓励同行审查和批准，为引入修改提供了更健壮的流程。此外，git 存储库的不可变性增加了额外的安全性层，因为每个更改都是被跟踪和可审计的。&lt;/p&gt;
&lt;p&gt;GitOps 有望通过引入版本控制、自动化、安全和协作原则来改变 API 管理，从而使 API 开发和管理更加与现代敏捷实践相符，提高了效率和可靠性。&lt;/p&gt;
&lt;h2 id=&#34;开发者体验将成为标配&#34;&gt;开发者体验将成为标配&lt;/h2&gt;
&lt;p&gt;在 2024 年，提供卓越的开发者体验（DevX）将不再是奢侈；它将成为一项必需。未将 DevX 置于优先位置的 API 管理系统越来越有被淘汰的风险，因为以开发者为中心的模式正在成为标准。&lt;/p&gt;
&lt;p&gt;这一变革的基石在于认识到开发者需要与其工作流程相一致并增强生产力的工具和系统。这其中的一个关键方面是采用&lt;a href=&#34;https://thenewstack.io/why-use-infrastructure-as-code/&#34; title=&#34;基础设施即代码&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基础设施即代码&lt;/a&gt;（IaC）实践。IaC 允许开发者通过代码而不是手动流程来管理和配置基础设施。&lt;/p&gt;
&lt;p&gt;另一个关键因素是 API 管理系统支持各种部署环境的能力。随着部署模型的多样化，从本地部署到&lt;a href=&#34;https://www.getambassador.io/kubernetes-glossary/cloud-native&#34; title=&#34;云原生&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生&lt;/a&gt;等，一个灵活的 API 管理解决方案，能够适应不同的环境至关重要。&lt;/p&gt;
&lt;p&gt;API 管理系统必须不断发展，以满足现代软件开发实践的需求。未能提供以开发者为中心的体验的系统，其特点包括 IaC、与标准工具的集成、易用性、灵活性和强大的分析功能，将在开发者体验至关重要的环境中难以保持相关性。&lt;/p&gt;
&lt;h2 id=&#34;捆绑随后的解绑&#34;&gt;捆绑随后的解绑&lt;/h2&gt;
&lt;p&gt;API 管理工具的演变正在见证回归到捆绑解决方案，这是与最近的点对点解决方案的趋势相反。与旧的企业捆绑解决方案不同，这些新一代捆绑解决方案适用于更广泛的组织范围，提供了综合的、集成的解决方案。&lt;/p&gt;
&lt;p&gt;API 生态系统的不断复杂和规模的增加推动了这一转变。现代 API 管理需要一种全面的方法，包括强大的身份验证机制、严格的安全协议和自助开发者工具。通过将这些功能整合到&lt;a href=&#34;https://www.getambassador.io/products/edge-stack/api-gateway&#34; title=&#34;单一的、连贯的包中&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;单一的、连贯的包中&lt;/a&gt;，捆绑解决方案提供了一种更简化和高效的 API 管理方式。&lt;/p&gt;
&lt;p&gt;在这些捆绑解决方案中包括网关对于流量管理至关重要，提供了速率限制、请求路由和协议转换等功能。身份验证是另一个关键组成部分，确保通过 OAuth 和 JSON Web Tokens（JWT）等机制安全访问 API。这些捆绑解决方案中的安全功能不仅限于身份验证，还提供了全面的保护，防止 SQL 注入、DDoS 攻击和数据泄露等威胁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.getambassador.io/products/telepresence&#34; title=&#34;自助开发者工具&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自助开发者工具&lt;/a&gt;是这些捆绑解决方案的重要组成部分。它们赋予开发者独立创建、测试和部署 API 的能力，减少了对 IT 团队的依赖，加速了开发。这些工具必须包括用户友好的界面、详细的文档和自动化的测试功能。&lt;/p&gt;
&lt;p&gt;API 管理中捆绑解决方案的再次出现代表着对现代 API 景观需求的适应。通过在一个统一的包中提供网关、身份验证、安全和开发者工具，这些捆绑解决方案提供了适用于各种组织需求的多功能和高效的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;未知的人工智能&#34;&gt;未知的人工智能&lt;/h2&gt;
&lt;p&gt;人工智能正在颠覆数十个行业的规则，并以意想不到的方式重塑它们。&lt;/p&gt;
&lt;p&gt;“意想不到”是描述人工智能/机器学习技术将如何扰乱 API 管理生态系统的好方式。KubeCon North America 2023 与 OpenAI Dev Day 同时举行，但两者似乎天差地别。在 KubeCon 上，AI 只轻微&lt;a href=&#34;https://danielbryantuk.medium.com/kubecon-chicago-key-takeaways-3de5ca13b375&#34; title=&#34;提及&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;提及&lt;/a&gt;，似乎 DevOps 和 API 管理行业对人工智能没有太多（尚未！）言论。&lt;/p&gt;
&lt;p&gt;但是，将 AI 排除在外将严重低估 AI 发展的范围和速度。去年这个时候，ChatGPT 才两周大。那时没有人知道它将如何彻底改变技术的各个方面。&lt;/p&gt;
&lt;p&gt;因此，AI/机器学习与 API 战略的融合是不可避免的，可能会彻底改变 API 的开发、管理和优化方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AI 驱动的分析可以提供对 API 使用模式的更深入洞察，从而实现更有效的资源管理和优化。&lt;/li&gt;
&lt;li&gt;AI 可以自动化和增强安全协议，比传统方法更有效地检测异常和潜在威胁。&lt;/li&gt;
&lt;li&gt;AI 可以显着简化 API 开发过程。通过使用机器学习算法，API 可以变得更加自适应和智能，能够以更高的准确性和效率处理复杂请求。这种集成可能导致自我优化的 API，根据实时反馈调整其行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI 与 API 管理的交汇是即将到来的现实。随着 AI 继续渗透各个领域，其融入 API 生态系统将提供前所未有的效率、安全性和适应性水平，宣告了 API 管理和使用方式的新时代。&lt;/p&gt;
&lt;h2 id=&#34;未知的未知&#34;&gt;未知的未知&lt;/h2&gt;
&lt;p&gt;还有什么在未来？随着技术进步的极速和 API 已经吞噬了整个世界的方式，预测 API 管理的未来就像试图绘制未知领域一样困难。&lt;/p&gt;
&lt;p&gt;这个领域正在迅速发展，受新兴技术和 Paradigm 转变的推动，这使得难以预见未来的变化的全部范围。就像 API 已经改变了数字基础设施一样，未来的创新和方法将进一步重新定义我们今天对 API 管理的理解。&lt;/p&gt;
&lt;p&gt;请告诉我们你认为 2024 年将为 API 管理带来什么，以及你认为明年我们将使用什么令人兴奋的技术。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>HashiCorp 创始人 Mitchell Hashimoto 宣布离职</title>
      <link>https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/</link>
      <pubDate>Fri, 15 Dec 2023 08:13:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/</guid>
      <description>
        
        
        &lt;p&gt;云原生社区报道：Mitchell Hashimoto 的离职意味着 HashiCorp 这一领先的云原生工具和解决方案提供商将迎来新的篇章。他在离开之际分享了对过去的回顾和对未来的展望。HashiCorp 社区和生态系统将继续发展壮大，我们期待看到他们在云原生领域取得更多的成功。&lt;/p&gt;
&lt;p&gt;下文是 Mitchell Hashimoto 在 Hashicorp 官网上发布的&lt;a href=&#34;https://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp&#34; title=&#34;离职感言&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;离职感言&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;在经过超过 11 年的时光后，HashiCorp 共同创始人 Mitchell Hashimoto 写下了一封深情的告别信，向他所帮助创立的公司告别。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2023 年 12 月 14 日，作者：&lt;a href=&#34;https://www.hashicorp.com/blog/authors/mitchell-hashimoto&#34; title=&#34;Mitchell Hashimoto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mitchell Hashimoto&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本周早些时候，我向 HashiCorp 的员工发送了这封信，并在这里发布，以让整个 HashiCorp 社区了解我的计划：&lt;/p&gt;
&lt;p&gt;今天，我有一些双重情感要与大家分享：我决定离开 HashiCorp，不久后将不再是该公司的员工。我刚刚庆祝了自从开始 HashiCorp 以来的 11 年，回顾过去的十年，我认为自己无法找到更好的方式来度过我生命的这一部分。&lt;/p&gt;
&lt;p&gt;我离开 HashiCorp 是我长时间以来一直在思考和策划的事情。自从创立 HashiCorp 以来，我一直觉得有必要建立一个公司，我不必参与日常运营，其他领导者可以随着时间推移继续前进。随着时间的推移，我对此非常有意识：2016 年辞去首席执行官职务，随着时间的推移，不断改进领导层自治文化，不需要我的参与来做出决策，最终在 2021 年&lt;a href=&#34;https://www.hashicorp.com/blog/mitchell-s-new-role-at-hashicorp&#34; title=&#34;离开了领导团队和董事会&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;离开了领导团队和董事会&lt;/a&gt;。从那时起，我有幸全职从事我最喜欢的工作——作为一名全职的、亲自动手的工程师。&lt;/p&gt;
&lt;p&gt;作为一名工程师，我的激情不仅限于基础架构，我一直知道，某个时候——当公司和我准备好的时候——我会继续前进，承担新的、不同的挑战。我的家庭最近迎来了我们的第一个孩子，休息期间，我觉得现在是完成这个过渡的合适时机。云自动化和基础架构工具领域仍然充满了机遇和增长，但在专门从事这个领域的工具近 15 年后，我已经准备尝试新的领域。&lt;/p&gt;
&lt;p&gt;尽管我离开 HashiCorp 正是我计划的，但这仍然是一个令人难以忘怀的时刻。几乎我整个成年生活都与这家公司有关。我最具有决定性的记忆中有许多不容忽视的瞬间。在这里无法一一列举，但我想突出几个。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/f1_hu2807248127420643252.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/mitchell-reflects-as-he-departs-hashicorp/f1.jpg&#34; data-img=&#34;/trans/mitchell-reflects-as-he-departs-hashicorp/f1.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;638&#34; alt=&#34;image&#34; data-caption=&#34;Mitchell 和 Armon，2013 年&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Mitchell 和 Armon，2013 年&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;早在我们创办 HashiCorp 之前，我和 Armon [Dadgar，HashiCorp 共同创始人兼首席技术官] 经常讨论云、自动化和分布式系统。那时我们还是青少年，我们曾玩笑地——并非认真——说过类似的话：“如果有一天最大的公司使用我们的软件会怎么样？”然而，有一天，我们迈出了第一步，将一些想法变成了实际的代码。接下来，我们意识到我们拥有了成千上万的用户。然后，我们又迈出了一步，创办了一家公司。再过一段时间，我们又迈出了下一步，决定筹集资金。这就是 HashiCorp 今天的样子：我们像这样迈出了许多小小的步骤，直到我们发现那种玩味十足的、青少年的理想主义已经成为现实。&lt;/p&gt;
&lt;p&gt;正式开始后，我觉得一些“第一次”尤为重要。&lt;a href=&#34;https://www.hashicorp.com/blog/hashiconf-2015-wrap-up&#34; title=&#34;2015 年的第一届 HashiConf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015 年的第一届 HashiConf&lt;/a&gt; 将永远是一个特殊的回忆。这是数字世界真正跨足物理世界的第一次，很难相信其中的任何一部分是真实的。我知道我们的下载量很高，我知道我每天都与社区成员在线互动，但看到数百人愿意亲自出席却是一种完全不同的体验。我感到非常自豪，但那也是我第一次感到责任的沉重。我感到内心挣扎，一方面想要建设，但另一方面需要引导我和 Armon 创建的这家公司。我非常感谢那些早期采用者和员工们参加了这次活动。&lt;/p&gt;
&lt;p&gt;几年后，我们的第一次全公司内部外出活动是我下一个重大的“哇”的经历。出席的人数比第一届 HashiConf 还要多！我和 Armon 一起创办了这家公司，专注于我对技术的激情，但像这样的时刻教会了我人员也同样重要。人和我们共享的经历是我现在最怀念的东西。&lt;/p&gt;
&lt;p&gt;在我与 HashiCorp 的历史中，还有许多类似的影响深远的时刻，我为其中每一个经验（甚至是艰难的经验）都感到感激，因为它是实现每个个体里程碑的必要步骤之一。&lt;/p&gt;
&lt;p&gt;我与 Armon 已经一起工作了将近 15 年（甚至在 HashiCorp 之前就开始了！），与 Dave [McJannet，HashiCorp CEO] 已经合作了 7 年多。我们一起领导了公司，直到我在 2021 年退出了领导团队。除了是同事，我们已经成为亲密的朋友。我继续信任他们的领导才能，将非常怀念与他们一起工作的时光。&lt;/p&gt;
&lt;p&gt;我们创办这家公司的多云等有争议的世界观现在已经成为主流，&lt;a href=&#34;https://www.hashicorp.com/state-of-the-cloud/2021&#34; title=&#34;得到广泛接受&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;得到广泛接受&lt;/a&gt;。我帮助创办的软件被从业者广泛使用，从世界上最大的公司的业余爱好者到专业人士。最近，&lt;a href=&#34;https://solutionshub.epam.com/blog/post/programming-language-popularity-on-github&#34; title=&#34;GitHub Octoverse 报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Octoverse 报告&lt;/a&gt; 发现 HashiCorp 配置语言（HCL）再次成为开源项目中使用最多的语言之一。这些只是一些例子，显示了 HashiCorp 在行业中持续产生的影响、增长和光明未来。这已经超出了我所能期望的，我离开时为自己在实现这一切中扮演的小角色感到自豪。&lt;/p&gt;
&lt;p&gt;正如我之前所说，几乎我整个成年生活都与 HashiCorp 有关。这家公司不仅对我的生活产生了巨大的影响，也对许多人的生活产生了巨大的影响，包括我们充满激情的社区、珍贵的客户、众多亲密的生态伙伴和我们了不起的员工。感谢大家的支持和信任。最后，我衷心祝愿整个公司一切顺利。我将为你们加油打气，感激我为塑造 HashiCorp 的旅程做出的贡献，期待看到你们接下来将要做的事情。&lt;/p&gt;
&lt;h2 id=&#34;评价&#34;&gt;评价&lt;/h2&gt;
&lt;p&gt;Mitchell Hashimoto 的离职标志着他个人职业生涯的新篇章，同时也对 HashiCorp 公司和云原生领域带来了重大影响。作为公司的共同创始人之一，他在 HashiCorp 中度过了 11 年，为公司成功发展做出了巨大贡献。离开公司，他追求新的挑战，反映了公司文化演进，强调了领导力的重要性。他的工作对云原生社区和生态系统产生了深远影响，HashiCorp 的工具广泛应用于云原生领域。他的离职不会改变 HashiCorp 在该领域的地位，同时为他提供了继续成长和探索新领域的机会，也让公司有机会吸引新领导者和推动创新。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Envoy 创始人 Matt Klein 领衔 Bitdrift 创业，推出创新移动可观测性产品并获得 1500 万美元 A 轮融资</title>
      <link>https://jimmysong.io/trans/matt-created-bitdrift/</link>
      <pubDate>Tue, 05 Dec 2023 16:13:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/matt-created-bitdrift/</guid>
      <description>
        
        
        &lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/image-20231205162037349_hu6070751679951337844.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/image-20231205162037349.png&#34; data-img=&#34;/trans/matt-created-bitdrift/image-20231205162037349.png&#34; data-width=&#34;1172&#34; data-height=&#34;528&#34; alt=&#34;image&#34; data-caption=&#34;Matt Klein 的推文宣布推出公司第一个产品及完成 A 轮融资&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Matt Klein 的推文宣布推出公司第一个产品及完成 A 轮融资&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;云原生社区报道：&lt;/p&gt;
&lt;p&gt;近期，Matt Klein——Envoy 代理的创造者——领导下的创业公司 Bitdrift 发布了他们的首款产品：Capture。这款专注于移动端可观测性的产品获得了 1500 万美元 A 轮融资，由 Amplify Partners 领投。这标志着 Bitdrift 在解决移动和服务器端可观测性问题方面迈出了重要的一步。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/team-photo_hu13214078186408856934.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/team-photo.jpg&#34; data-img=&#34;/trans/matt-created-bitdrift/team-photo.jpg&#34; data-width=&#34;1120&#34; data-height=&#34;510&#34; alt=&#34;image&#34; data-caption=&#34;Bitdrift 初创团队&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Bitdrift 初创团队&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Bitdrift 的创始缘起于团队在规模化构建互联网基础设施时的挑战和挫折。公司团队来自 Twitter、AWS、Square、Google、Microsoft、Netflix 等知名企业，他们认为当前的可观测性生态系统存在供应商和消费者之间的不匹配问题。Bitdrift 旨在通过实时动态控制，仅发出可能用于解决客户问题的遥测数据，以改变这一现状。&lt;/p&gt;
&lt;p&gt;目前，移动端可观测性被认为是浪费、无序且远落后于服务器端。大约 95% 用于监控系统健康的数据从未被阅读。与此同时，移动工程师在生产中拥有的分析事件集合通常是静态的，而且调整这些事件以调试正在进行的问题可能需要数周甚至数月的时间。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/workflows_hu847034088010550336.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/workflows.png&#34; data-img=&#34;/trans/matt-created-bitdrift/workflows.png&#34; data-width=&#34;800&#34; data-height=&#34;660&#34; alt=&#34;image&#34; data-caption=&#34;Capture workflow&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Capture workflow&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Capture 通过在 iOS 和 Android 上实现发出会话遥测数据的动态实时控制，改变了可观测性游戏的规则。这个系统允许对设备进行即时定位，从所有客户端到特定群体，甚至个别设备。结合先进的本地存储和实时配置，Capture 支持分布式搜索和遥测数据，使得数据仅在解决客户问题时才被请求和发送。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/matt-created-bitdrift/ring_buffer_hu12029864523777570025.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/matt-created-bitdrift/ring_buffer.png&#34; data-img=&#34;/trans/matt-created-bitdrift/ring_buffer.png&#34; data-width=&#34;604&#34; data-height=&#34;558&#34; alt=&#34;image&#34; data-caption=&#34;Ring buffer&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ring buffer&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Capture 的本地存储解决方案核心是所谓的“环形缓冲区”，一种高性能的子系统，使用有界且实时可配置的 RAM 和磁盘空间。数据首先被刷新到 RAM，然后在后台级联到磁盘。Capture 还包括高效且注重隐私的会话回放实现，可以捕获移动屏幕状态的 2D 和 3D 表示。&lt;/p&gt;
&lt;p&gt;Capture 已在 Lyft 应用中部署到数百万设备上，并在大规模下经过战斗测试。它已准备好为全球的组织解决现实世界的挑战【18†source】。&lt;/p&gt;
&lt;p&gt;Bitdrift 的愿景是开创可观测性的未来。通过 Capture，Bitdrift 开始了一段旅程，将本地遥测存储与实时控制和分布式搜索相结合，这不仅适用于移动端，而且适用于整个分布式系统——从每个服务器到移动边缘。&lt;/p&gt;
&lt;p&gt;作为云原生社区，我们对 Matt Klein 和 Bitdrift 团队在改善可观测性生态系统方面的努力表示赞赏。他们的创新不仅对移动工程师，而且对整个分布式系统的健康和效率具有深远影响。欢迎来到可观测性的未来。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bitdrift.io/about&#34; title=&#34;Bitdrift 介绍&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bitdrift 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.bitdrift.io/post/honey-i-shrunk-the-telemetry&#34; title=&#34;Honey, I shrunk the telemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honey, I shrunk the telemetry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>创业指南</title>
      <link>https://jimmysong.io/trans/startup-playbook/</link>
      <pubDate>Sun, 05 Nov 2023 18:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/startup-playbook/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;摘要：创业指南强调了几个关键方面：首先，创业公司应快速解雇对文化有毒的员工，忽略竞争对手，特别是当他们筹集大量资金或在媒体上制造大量噪音时。其次，创业公司需要找到盈利的方法，尽快达到“拉面盈利”的状态，即赚足够的钱让创始人可以靠拉面度日。最后，筹资是大多数创业公司在某个时候都会面临的问题，成功筹资的秘诀是拥有一家好公司，而不是过度优化流程。创业公司应该在需要资金或者在条件好的情况下筹资，但要小心不要失去节俭精神，或者开始通过投钱来解决问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者 Sam Altman 是一位知名的企业家和投资人，他是 OpenAI 的创始人，Y Combinator（一家著名的创业孵化器）的前任主席。&lt;/p&gt;
&lt;p&gt;我们花了很多时间为创业公司提供咨询。虽然一对一的建议一直是至关重要的，但我们认为，如果我们能将这些建议中最能普遍化的部分提炼成一种可以给 YC 和 YC Fellowship 公司的指南，可能会帮助我们扩大 YC 的规模。&lt;/p&gt;
&lt;p&gt;然后我们想，我们应该把它给所有人。&lt;/p&gt;
&lt;p&gt;这本指南主要是为创业世界的新人准备的。对于已经阅读过很多 YC 合作伙伴所写的内容的人来说，这里的大部分内容可能并不新鲜——我们的目标是把它们都集中在一个地方。&lt;/p&gt;
&lt;p&gt;关于如何扩大创业公司的第二部分可能会在以后发布——这部分主要涵盖了如何启动一个创业公司。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;引言&lt;/p&gt;
&lt;p&gt;我们花了很多时间为创业公司提供咨询。虽然一对一的建议一直是至关重要的，但我们认为，如果我们能将这些建议中最能普遍化的部分提炼成一种可以给 YC 和 YC Fellowship 公司的指南，可能会帮助我们扩大 YC 的规模。&lt;/p&gt;
&lt;p&gt;想法&lt;/p&gt;
&lt;p&gt;我们首先询问 YC 公司他们正在做什么以及为什么要做。我们在此处寻找清晰、简洁的答案。这既是为了评估你作为创始人的能力，也是为了评估想法本身。能够清晰地思考和沟通对于创始人来说非常重要。&lt;/p&gt;
&lt;p&gt;优秀的团队&lt;/p&gt;
&lt;p&gt;平庸的团队无法建立伟大的公司。我们最关注的事情之一就是创始人的实力。当我过去进行后期投资时，我同样关注创始人所雇佣的员工的实力。&lt;/p&gt;
&lt;p&gt;优秀的产品&lt;/p&gt;
&lt;p&gt;这是成功的秘诀：拥有一个优秀的产品。这是所有伟大公司共有的唯一特点。如果你没有制造出用户喜爱的产品，你最终将失败。然而，创始人总是在寻找其他的秘诀。创业公司是你生活中停止使用小把戏的时期。&lt;/p&gt;
&lt;p&gt;优秀的执行&lt;/p&gt;
&lt;p&gt;虽然建立一个伟大的产品是必要的，但这还不够。你还需要把它变成一家伟大的公司，而且你必须亲自去做——雇佣一个“有经验的管理者”来完成所有这些工作是一种非常普遍的幻想，也是失败公司的墓地。你不能将这项工作外包给其他人很长一段时间。&lt;/p&gt;
&lt;p&gt;增长&lt;/p&gt;
&lt;p&gt;增长和动力是执行工作的关键。增长（只要不是以 90 美分的价格卖一美元钞票的增长）能解决所有问题，而缺乏增长除了增长之外，不能被任何东西解决。如果你在增长，你会感觉到你正在赢，人们会感到快乐。&lt;/p&gt;
&lt;p&gt;专注与强度&lt;/p&gt;
&lt;p&gt;如果我必须把我关于如何运作的建议简化到只有两个词，我会选择专注和强度。这些词似乎真的适用于我所认识的最好的创始人。&lt;/p&gt;
&lt;p&gt;CEO 的职务&lt;/p&gt;
&lt;p&gt;我前面提到，CEO 的唯一普遍的工作描述是确保公司取胜。虽然这是真的，我想更具体地谈谈 CEO 应该如何分配他或她的时间。&lt;/p&gt;
&lt;p&gt;招聘与管理&lt;/p&gt;
&lt;p&gt;招聘是你最重要的工作之一，也是建立一家伟大公司（而不仅仅是一款伟大的产品）的关键。我关于招聘的第一条建议是不要去做。我们在 YC 工作过的最成功的公司在开始雇佣员工之前都等了相当长的时间。&lt;/p&gt;
&lt;p&gt;竞争对手&lt;/p&gt;
&lt;p&gt;关于竞争对手的一句快速的话：竞争对手是创业公司的鬼故事。首次创业的人认为竞争对手是 99% 的创业公司死亡的原因。但是，99% 的创业公司是自杀，而不是他杀。相反，你应该担心你所有的内部问题。如果你失败，很可能是因为你没有做出一个伟大的产品和/或没有做出一个伟大的公司。&lt;/p&gt;
&lt;p&gt;赚钱&lt;/p&gt;
&lt;p&gt;哦，是的，赚钱。你需要找出如何做到这一点。这个问题的简短版本是，你必须让人们付给你的钱多于你提供商品/服务的成本。出于某种原因，人们总是忘记考虑提供商品/服务的成本部分。&lt;/p&gt;
&lt;p&gt;筹资&lt;/p&gt;
&lt;p&gt;大多数创业公司在某个时候都会筹集资金。当你需要资金或者能以优惠条件获得资金时，你应当筹集资金。小心不要丧失你的节俭观念，或者开始通过抛钱解决问题。资金不足可能会导致问题，但是资金过多几乎总是会带来问题。&lt;/p&gt;
&lt;p&gt;结束语&lt;/p&gt;
&lt;p&gt;记住，每个伟大的想法都有至少一千个人想到过。其中有一人实际上获得了成功。区别在于执行。这是一个磨人的过程，每个人都希望有其他的方式将“想法”转化为“成功”，但是至今还没有人找到。&lt;/p&gt;
&lt;p&gt;作为一家创业公司，你的目标是创造用户喜爱的东西。如果你做到了这一点，那么你就必须想办法获得更多的用户。但是这个第一步是至关重要的——想想今天的那些非常成功的公司。他们都是从一个早期用户非常喜欢并向其他人推荐的产品开始的。如果你做不到这一点，你就会失败。如果你欺骗自己，认为用户喜欢你的产品但实际上他们并不喜欢，你仍然会失败。&lt;/p&gt;
&lt;p&gt;创业公司的墓地上散落着认为他们可以跳过这一步的人们的尸体。&lt;/p&gt;
&lt;p&gt;与大量用户喜欢的产品相比，首先制作出一小部分用户喜爱的产品要好得多。尽管总体上的积极感觉是一样的，但是获取更多用户要比从喜欢变为喜爱容易得多。&lt;/p&gt;
&lt;p&gt;关于选择创业的警告：这真的很糟糕！我们从 YC 创始人那里得到的最一致的反馈就是，它比他们想象中的要难，因为他们没有一个框架来理解创业需要的工作和强度。加入一个初创阶段、发展势头强劲的创业公司通常是一个更好的财务选择。&lt;/p&gt;
&lt;p&gt;另一方面，创业对你的职业生涯实际上并不冒险——如果你真的擅长科技，即使你失败了，你也还有工作机会。大多数人非常不擅长评估风险。我个人认为，更冒险的选项是拥有一个你非常热衷的想法或项目，但是选择在一个安全、轻松、没有成就感的工作中工作。&lt;/p&gt;
&lt;p&gt;要成功的创业公司需要：一个伟大的想法（包括一个伟大的市场）、一个伟大的团队、一个伟大的品，和伟大的执行力。&lt;/p&gt;
&lt;h2 id=&#34;理念&#34;&gt;理念&lt;/h2&gt;
&lt;p&gt;我们首先询问 YC 公司的是他们正在做什么以及为什么。&lt;/p&gt;
&lt;p&gt;我们在这里寻找清晰，简洁的答案。这既是为了评估你作为创始人，也是为了评估想法本身。作为创始人，能够清晰地思考和交流很重要 - 你需要用它来招聘，筹集资金，销售等。一般来说，想法需要清晰才能传播，复杂的想法几乎总是混乱思维或者问题的标志。如果想法第一次听到时并未真正激发起至少一些人的兴趣，那就糟糕了。&lt;/p&gt;
&lt;p&gt;我们还会问谁迫切需要这个产品。&lt;/p&gt;
&lt;p&gt;最好的情况是，你自己就是目标用户。其次是你非常了解目标用户。&lt;/p&gt;
&lt;p&gt;如果公司已经有用户，我们会询问有多少用户，以及这个数字正在如何增长。我们试图弄清楚为什么它没有增长得更快，我们特别试图弄清楚用户是否真的喜欢这个产品。通常，这意味着他们在公司没有提示的情况下告诉他们的朋友使用产品。我们还会问公司是否正在创收，如果没有，为什么没有。&lt;/p&gt;
&lt;p&gt;如果公司尚无用户，我们会试图搞清楚首先要建立的最小事物 - 即，如果我们从完美的体验反向工作，我们试图搞清楚从哪个核心开始。&lt;/p&gt;
&lt;p&gt;测试一个想法的方式是启动它并看看会发生什么，或者尝试销售它（例如，在你编写一行代码之前尝试获得意向书。）前者更适合消费者想法（用户可能会告诉你他们会使用它，但实际上可能无法脱颖而出），后者更适合企业想法（如果一家公司告诉你他们会购买某物，那么就去建造它。）具体来说，如果你是一家企业公司，我们会首先问你的问题之一是，你是否有一份来自客户的意向书，称他们会购买你正在建造的东西。对于大多数生物技术和硬科技公司，测试想法的方法是首先与潜在客户交谈，然后搞清楚首先可以建造的技术的最小子集。&lt;/p&gt;
&lt;p&gt;当你从用户那里得到反馈时，让你的想法进化是非常重要的。并且你真的需要非常了解你的用户 - 你需要这个来评估一个想法，打造一个伟大的产品，并建立一个伟大的公司。&lt;/p&gt;
&lt;p&gt;如前所述，创业是非常艰难的。它需要很长的时间和持续的强烈努力。创始人和员工需要有共享的使命感来支持他们。所以我们询问创始人为什么想要创办这个特定的公司。&lt;/p&gt;
&lt;p&gt;我们还会问这家公司将如何成为一家垄断公司。这有很多不同的术语，但我们使用彼得·蒂尔（Peter Thiel）的。显然，我们不希望你的公司对竞争对手采取不道德的行为。相反，我们正在寻找随着规模的扩大变得更强大且难以复制的企业。&lt;/p&gt;
&lt;p&gt;最后，我们提问关于市场。我们询问市场今天的规模，增长速度有多快，以及为什么在十年后它会变得很大。我们试图理解为什么市场将快速增长，以及为什么这是一个创业公司应该追求的好市场。我们喜欢在大多数人还没有意识到的时候，主要的技术转变刚刚开始——大公司在处理这些问题上不擅长。而且有点反直觉的是，最好的答案是去追求一个小市场的大部分。&lt;/p&gt;
&lt;p&gt;关于想法的一些其他想法：&lt;/p&gt;
&lt;p&gt;我们更喜欢新的东西而不是衍生的东西。大多数真正的大公司都从一些根本新的东西开始（新的一个可接受的定义是比原来好 10 倍）。如果有十个其他公司同时开始实施同样的计划，并且听起来很像已经存在的东西，我们会持怀疑态度。&lt;/p&gt;
&lt;p&gt;这其中一个重要的反直觉原因是，做一些新的和困难的事情比做一些衍生的和容易的事情更容易。如果是前者，人们会想要帮助你和加入你；如果是后者，他们不会。&lt;/p&gt;
&lt;p&gt;好的想法听起来不好，但实际上是好的。所以，你不需要对你的想法过于保密——如果它实际上是个好主意，那么它可能看起来不值得偷。即使它听起来值得偷，有好想法的人至少比愿意付出将伟大的想法变成伟大公司所需的工作的人多一千倍。而且，如果你告诉人们你在做什么，他们可能会帮助。&lt;/p&gt;
&lt;p&gt;说到告诉人们你的想法——虽然这个想法第一次听到时真的让一些人很兴奋是很重要的，但几乎每个人都会告诉你，你的想法很糟糕。也许他们是对的。也许他们不擅长评估创业公司，或者也许他们只是&lt;/p&gt;
&lt;p&gt;在讨论你的创意时，你需要知道的是，尽管你的创意在人们第一次听到时，可能会让一些人感到非常兴奋，但几乎所有人都会告诉你，你的创意太糟糕了。也许他们是对的，也许他们不擅长评估创业公司，或者他们只是嫉妒。无论原因是什么，这种情况都会经常发生，会让你感到痛苦，即使你认为自己不会受到它的影响，你还是会受到影响。你能够越快地建立自我信念，不被憎恨者拖累，你就会越好。无论你有多成功，憎恨者永远不会消失。&lt;/p&gt;
&lt;p&gt;如果你没有创意，但想要创业，也许你不应该这么做。首先有创意，然后创业是将创意推向世界的方式，这样做会更好。&lt;/p&gt;
&lt;p&gt;我们曾经尝试过一个实验，我们资助一批没有创意的有前途的创始团队，希望他们在我们资助他们后能找到一个有前途的创意。&lt;/p&gt;
&lt;p&gt;他们都失败了。我认为问题的一部分是，好的创始人通常有很多好的创意（通常是太多）。但更大的问题是，一旦你有了一个创业公司，你就必须赶快想出一个创意，而且因为它已经是一个正式的公司，所以创意不能太疯狂。你最终会得到看起来合理但是衍生的创意。这就是转型的危险。&lt;/p&gt;
&lt;p&gt;所以，最好不要过于积极地强迫自己想出创业创意。相反，学习不同的东西。练习注意问题，看起来效率低的事情，以及重大的技术转变。&lt;a href=&#34;http://blog.samaltman.com/projects-and-companies&#34; title=&#34;做你感兴趣的项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;做你感兴趣的项目&lt;/a&gt;。尽可能地和聪明、有趣的人在一起。在某个时候，创意就会出现。&lt;/p&gt;
&lt;h2 id=&#34;优秀的团队&#34;&gt;优秀的团队&lt;/h2&gt;
&lt;p&gt;平庸的团队不会建立伟大的公司。我们最关注的事情之一是创始人的实力。当我过去做后期投资的时候，我也十分关注创始人所雇佣的员工的实力。&lt;/p&gt;
&lt;p&gt;什么才是优秀的创始人呢？最重要的特性是坚不可摧，决心，坚实可靠，和足智多谋。智力和热情也非常重要。这些都比经验和语言 X 框架 Y 的“专业知识”更重要。&lt;/p&gt;
&lt;p&gt;我们注意到最成功的创始人是那种与之合作压力较小的人，因为你觉得“无论什么事，他/她都能完成”。有时候，你可以通过 sheer force of will 来取得成功。&lt;/p&gt;
&lt;p&gt;好的创始人具有许多看似矛盾的特质。一个重要的例子是刚柔并济。你想要有关于公司核心和其使命的强烈信念，但是在几乎所有其他事情上，你还需要非常灵活并愿意学习新事物。&lt;/p&gt;
&lt;p&gt;最好的创始人反应非常敏捷。这是果断，专注，热情和执行力的指示器。&lt;/p&gt;
&lt;p&gt;与之交谈困难的创始人几乎总是糟糕的。沟通是创始人非常重要的技能 - 实际上，我认为这是最重要的一种鲜为人知的创始人技能。&lt;/p&gt;
&lt;p&gt;科技创业公司至少需要一个能够构建公司产品或服务的创始人，以及至少一个在销售和与用户交谈方面是（或可以成为）擅长的创始人。这可以是同一个人。&lt;/p&gt;
&lt;p&gt;在选择联合创始人时考虑这些标准 - 这是你将做出的最重要的决定之一，而这通常是相当随机的。你需要了解你的人，而不是你刚在创始人约会上遇到的人。你可以使用更多的数据来评估你可能与之合作的任何人，并且你真的不想得到这个错误的答案。此外，在某个时刻，创业公司的预期价值可能会低于 X 轴。如果你与你的联合创始人有预先存在的关系，你们都不会希望让对方失望，你们会继续前进。创始人分手是早期创业公司死亡的主要原因之一，我们在创始人为了创办公司而见面的情况下看到这种情况发生得非常非常频繁。&lt;/p&gt;
&lt;p&gt;最好的情况，无疑是，拥有一个好的联合创始人。其次是成为单打独斗的创始人。最糟糕的情况，无疑是，有一个糟糕的联合创始人。如果事情没有进展，你应该尽快分道扬镳。&lt;/p&gt;
&lt;p&gt;关于股权的一个快速提示：关于股权分配的谈话随着时间的推移并没有变得更容易 - 最好早点设置。几乎平等是最好的，尽管在两个创始人的情况下，最好有一个人拥有额外的股份以防止在创始人有分歧时出现僵局。&lt;/p&gt;
&lt;h2 id=&#34;优秀的产品&#34;&gt;优秀的产品&lt;/h2&gt;
&lt;p&gt;成功的秘诀就是拥有一个优秀的产品。这是所有伟大公司的共同点。&lt;/p&gt;
&lt;p&gt;如果你没有开发出用户喜爱的产品，你最终将会失败。然而，创始人总是在寻找其他的策略。创业是你人生中不能再依赖技巧的时期。&lt;/p&gt;
&lt;p&gt;优秀的产品是长期增长的唯一方式。最终，你的公司会变得如此庞大，以至于所有的增长黑客都无法运作，你必须依靠人们想要使用你的产品来发展。这是理解超级成功公司最重要的事情。没有其他方式。想想所有非常成功的科技公司——他们都这么做。&lt;/p&gt;
&lt;p&gt;你需要在你的公司中建立一个“产品改进引擎”。你应该与你的用户交谈，观察他们如何使用你的产品，找出哪些部分表现不佳，然后改进你的产品。然后再做一次。这个周期应该是公司的首要关注点，它应该推动所有其他事情。如果你每周改进你的产品 5%，它将会产生真正的复利效果。&lt;/p&gt;
&lt;p&gt;这个周期的重复速率越快，公司通常会变得越好。在 YC 期间，我们告诉创始人他们应该构建产品，与用户交谈，除了吃饭、睡觉、锻炼和与他们爱的人共度时光之外，他们不应该做其他太多的事情。&lt;/p&gt;
&lt;p&gt;要做好这个周期，你必须非常了解你的用户。真正观察他们如何使用你的产品。如果可以的话，坐在他们的办公室里。既要重视他们告诉你的内容，也要重视他们实际做的事情。你不应该让任何人在创始人和用户之间，尽可能长的时间——这意味着创始人需要做销售、客户支持等工作。&lt;/p&gt;
&lt;p&gt;尽你所能了解你的用户。真正了解他们需要什么，在哪里找他们，以及什么驱动他们。&lt;/p&gt;
&lt;p&gt;“做不易扩展的事情”已经成为创业公司的口头禅。你通常需要一个接一个地招募初始用户（Ben Silbermann 过去常常在 Palo Alto 的咖啡店里接触陌生人，让他们试试 Pinterest），然后构建他们要求的东西。许多创始人讨厌这个部分，只想在媒体上宣布他们的产品。但这几乎永远不会有效。手动招募用户，使产品如此优秀以至于你招募的用户会告诉他们的朋友。&lt;/p&gt;
&lt;p&gt;你还需要将事情分解成非常小的部分，然后在进行的过程中进行迭代和适应。不要试图&lt;/p&gt;
&lt;p&gt;你需要将事情分解成很小的部分，然后边做边调整。不要试图过早规划，绝对不要把所有事情都堆积到一个大的公开发布中。你需要从非常简单的东西开始——尽可能少的接触面——然后比你预期的更早去发布。事实上，简单总是好的，你应该始终保持你的产品和公司尽可能地简单。&lt;/p&gt;
&lt;p&gt;我们经常向遇到问题的创业公司提出一些常见的问题：用户是否会多次使用你的产品？你们的用户对你们的产品是否狂热？如果你的公司消失了，你的用户会真的很难过吗？你的用户是否会在你没有要求他们这样做的情况下推荐你给其他人？如果你是一个 B2B 公司，你是否至少有 10 个付费客户？&lt;/p&gt;
&lt;p&gt;如果没有，那通常就是根本的问题，我们会告诉这些公司去改进他们的产品。我对大多数关于为什么公司不增长的借口都持怀疑态度——非常常见的真正原因是产品还不够好。&lt;/p&gt;
&lt;p&gt;当创业公司对他们的产品下一步该做什么，或者他们的产品还不够好的时候，我们会让他们去和他们的用户交谈。这在每个案例中都不一定管用——毫无疑问，人们本来会要求福特生产更快的马车——但是它通常还是有效的。事实上，更普遍的是，当公司中有任何争议的时候，去和你的用户交谈。&lt;/p&gt;
&lt;p&gt;最好的创始人对产品质量似乎过于在乎，甚至对看似不重要的细节也是如此。但是它似乎有效。顺便说一句，“产品”包括用户与公司的所有互动。你需要提供优质的支持，优质的销售互动等等。&lt;/p&gt;
&lt;p&gt;请记住，如果你没有做出一个伟大的产品，那么其他一切都无法拯救你。&lt;/p&gt;
&lt;h2 id=&#34;执行力&#34;&gt;执行力&lt;/h2&gt;
&lt;p&gt;虽然你需要打造一个出色的产品，但这还远远不够。你还需要把它变成一个出色的公司，并且你需要自己去做&amp;ndash;雇佣一个“有经验的管理者”来做所有这些工作的幻想是非常普遍的，也是许多失败公司的坟墓。你长时间内不能把工作外包给别人。&lt;/p&gt;
&lt;p&gt;这听起来很明显，但你必须要赚钱。现在是开始思考如何实现的好时机。&lt;/p&gt;
&lt;p&gt;CEO 的唯一普遍职责就是确保公司成功。即使你有许多缺点，通常会让你无法胜任 CEO 的职位，只要你雇佣能弥补你自身技能的人，并让他们做好自己的工作，作为创始人，你就能做到这一点。那些有经验的 CEO，有华丽的 MBA 学位，可能没有你所拥有的技能缺口，但他或她不会像你那样理解用户，不会有同样的产品直觉，也不会那么在乎。&lt;/p&gt;
&lt;h2 id=&#34;成长&#34;&gt;成长&lt;/h2&gt;
&lt;p&gt;成长和动力是执行力的关键。只要不是以“90 美分卖出 1 美元的方式”获得的成长，成长就能解决所有问题，而缺乏成长则只能通过成长来解决。如果你在成长，感觉就像你在赢，人们会感到快乐。如果你在成长，新的角色和责任会不断出现，人们会感到他们的职业生涯在进步。如果你没有成长，就感觉你在输，人们会不快乐并离开。如果你没有成长，人们只会为责任斗争和归责。&lt;/p&gt;
&lt;p&gt;创始人和员工在没有动力的创业公司中几乎都会疲惫不堪。这种情况的消沉程度是难以言喻的。&lt;/p&gt;
&lt;p&gt;执行力的首要准则是“永不失去动力”。但是如何做到呢？&lt;/p&gt;
&lt;p&gt;最重要的方式就是把它当作你的首要任务。公司做的是 CEO 所衡量的。对公司进行优化的单一指标是有价值的，找到正确的成长指标是值得花时间的。如果你关心成长，并设定了执行标准，公司的其他部分都会集中精力去实现。&lt;/p&gt;
&lt;p&gt;这里有几个例子。&lt;/p&gt;
&lt;p&gt;Airbnb 的创始人画了一幅他们想要达到的增长图，展望未来。他们把这画放在各处——冰箱上，桌子上，浴室的镜子上。如果他们那周达到了这个数字，那就好。如果没有，那就是他们唯一会谈论的事情。&lt;/p&gt;
&lt;p&gt;马克·扎克伯格曾经说过，Facebook 最重要的创新之一是他们在增长放缓时建立了一个增长小组。这个小组是公司中最有声望的小组之一——每个人都知道它的重要性。&lt;/p&gt;
&lt;p&gt;保持一个阻碍增长的事情的列表。作为一个公司来讨论你们如何能够更快地增长。如果你知道什么是限制因素，你就会自然地思考如何解决它们。&lt;/p&gt;
&lt;p&gt;对于你考虑做的任何事情，问自己“这是优化增长的最好方式吗？”例如，去参加一个会议通常不是优化增长的最好方式，除非你期望在那里卖出很多产品。&lt;/p&gt;
&lt;p&gt;对于度量（以及财务）有极端的内部透明度是一件好事。出于某种原因，创始人总是对此感到非常害怕。但是，这对于让整个公司专注于增长是非常有益的。似乎公司员工对度量的关注度与他们的表现之间存在直接的关联。如果你隐藏度量，人们就很难专注于它们。&lt;/p&gt;
&lt;p&gt;说到度量，不要用虚荣度量来欺骗自己。这里的常见错误是专注于注册并忽略保留。但是，保留对于增长来说与新用户获取一样重要。&lt;/p&gt;
&lt;p&gt;建立内部节奏以保持动力也很重要。你想有一个可以在内外谈论的“节拍”——新的特性，客户，雇员，收入里程碑，合作伙伴等。&lt;/p&gt;
&lt;p&gt;你应该设定激进但边界可达的目标，并每月检查进度。庆祝胜利！一直在内部讨论策略，告诉每个人你从客户那里听到的事情等等。你在内部分享的信息越多——无论是好的还是坏的——你就会越好。&lt;/p&gt;
&lt;p&gt;有一些陷阱是创始人经常会掉入的。其中一个是，如果公司的增长如火如荼，但是一切都看起来非常破碎和低效，每个人都会担心事情会解体。实际上，这种情况似乎很少发生（Friendster 是我能指出的最近一个由于技术债务而死亡的创业公司的例子。）违反直觉的是，如果你的增长速度很快，但是没有任何优化——你只需要修复它&lt;/p&gt;
&lt;p&gt;创业者往往会陷入几个常见的陷阱。其中之一就是，如果公司的增长疯狂，但一切似乎都非常破烂和低效，所有人都会担心事情会破裂。实际上，这种情况很少发生（Friendster 是我能举出的最近一个因技术债务而死去的创业公司的例子）。事实证明，如果你的增长速度很快，但是没有任何东西是优化的，这是好事——你只需要修复它就可以获得更多的增长！我的最喜欢的投资就是那些增长非常快但是非常未优化的公司——它们被严重低估了。&lt;/p&gt;
&lt;p&gt;一个相关的陷阱是过多的考虑未来的问题——比如，“我们如何在大规模的情况下做到这一点？”答案是，等你到达那里的时候再去解决。因为在辩论这个问题的时候死掉的创业公司比因为没有足够思考这个问题而死掉的创业公司要多。一个好的经验法则是只考虑在你目前规模的 10 倍的情况下，事情会如何运作。大多数早期的创业公司应该将“做一些不可扩展的事情”挂在墙上，并按照它来生活。举个例子，伟大的创业公司在早期总是有很好的客户服务，而糟糕的创业公司担心对单位经济的影响以及它不会扩展。但是，优秀的客户服务会让早期的用户充满热情，而且当产品变得更好的时候，你需要的支持会更少，因为你会知道客户常常在哪些地方挣扎，并在那些地方改善产品/体验。（顺便说一下，这是一个非常重要的例子——要有优秀的客户支持。）&lt;/p&gt;
&lt;p&gt;这里有一个大的陷阱——“做一些不可扩展的事情”并不意味着你不需要最终赚钱。在早期，你的单位经济状况不好是可以的，但是你必须要有一个好的理由，解释为什么单位经济会在后期变好。&lt;/p&gt;
&lt;p&gt;另一个陷阱是因为增长在绝对数值上很差，即使在百分比上很好，也会让人感到沮丧。人们对于指数增长的直觉是非常差的。提醒你的团队这一点，所有的大公司都是从小数目开始增长的。&lt;/p&gt;
&lt;p&gt;创始人常常陷入一些陷阱，他们认为这些陷阱会带来增长，但实际上几乎从未成功，却浪费了大量的时间。常见的例子包括与其他公司的交易和“大新闻发布”。对这些要警惕，并且明白它们实际上永远不会起作用。相反，像所有伟大的公司一样，通过打造用户喜爱的产品、先手动招募用户，然后测试各种增长策略（如广告、推荐计划、销售和营销等），并做更多有效果的事情。向你的客户询问你可以在哪里找到更多像他们一样的人。&lt;/p&gt;
&lt;p&gt;记住，销售和营销并不是坏词。虽然如果你没有一个伟大的产品，它们都无法拯救你，但它们都可以帮助你大幅加速增长。如果你是一家企业公司，你的公司可能需要在这些方面做得好。&lt;/p&gt;
&lt;p&gt;不要害怕销售。至少有一个创始人必须擅长要求人们使用你的产品并给你钱。&lt;/p&gt;
&lt;p&gt;Alex Schultz&lt;a href=&#34;http://startupclass.samaltman.com/courses/lec06/&#34; title=&#34;对消费产品的增长给出了一个讲座&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;对消费产品的增长给出了一个讲座&lt;/a&gt;，值得一看。对于 B2B 产品，我认为几乎总是要追踪每月的收入增长，记住销售周期较长意味着前几个月可能看起来很难看（尽管有时把创业公司作为初始客户可以解决这个问题）。&lt;/p&gt;
&lt;h2 id=&#34;聚焦与高强度&#34;&gt;聚焦与高强度&lt;/h2&gt;
&lt;p&gt;如果我必须将我的建议精简为两个词，我会选择聚焦和高强度。这两个词似乎真的适用于我所知道的最好的创始人。&lt;/p&gt;
&lt;p&gt;他们对自己的产品和增长保持坚定不移的关注。他们不试图做所有的事情——实际上，他们经常说“不”，这很困难，因为开始创业的人往往喜欢尝试新事物。&lt;/p&gt;
&lt;p&gt;作为一个普遍的原则，不要让你的公司开始做下一件事，除非你已经在第一件事上取得了主导地位。我所知道的所有伟大的公司都没有一开始就做很多事情——他们从对一件事充满信念开始，然后一路看下去。你可以做的事情比你想象的要少。做太多错误的事情是创业公司死亡的一个非常、非常常见的原因。优先级的设定是关键，也是困难的。（设定公司的优先级和设定你自己的战术优先级同样重要。我发现对我个人来说最有效的方法是为每一天制定一份包含大约 3 个主要任务和大约 30 个次要任务的纸质清单，以及一份列出整体目标的年度待办事项清单。）&lt;/p&gt;
&lt;p&gt;虽然伟大的创始人不做很多大项目，但他们做任何事都非常高强度。他们非常快地完成事情。他们果断，这在你经营创业公司时很困难——你会得到很多相互矛盾的建议，这既因为有多种方式可以做事情，也因为存在很多糟糕的建议。伟大的创始人会倾听所有的建议，然后迅速做出自己的决定。&lt;/p&gt;
&lt;p&gt;请注意，这并不意味着要对所有事情都保持高强度——这是不可能的。你必须选择正确的事情。正如 Paul Buchheit 所说，找到用 10% 的努力获得 90% 价值的方法。市场不关心你工作多么辛苦——它只关心你是否做了正确的事情。&lt;/p&gt;
&lt;p&gt;在对产品质量痴迷和非常快速地移动之间取得平衡非常困难。但这是伟大创始人的最明显特点之一。&lt;/p&gt;
&lt;p&gt;我从未见过一个行动缓慢的创始人能够取得真正的成功。&lt;/p&gt;
&lt;p&gt;你和其他创业公司没有什么两样。你依然需要保持专注并且快速行动。那些构建火箭和核反应堆的公司仍然设法做到这一点。所有失败的公司都有一个宠物解释，为什么他们与众不同，不需要快速行动。&lt;/p&gt;
&lt;p&gt;当你发现有效的方法，继续这样做。不要分心去做其他事情。不要松懈。&lt;/p&gt;
&lt;p&gt;不要被初期的成功所迷惑——你不是通过参加大量的网络活动和发表大量的演讲才取得了初步的成功。创业公司的创始人在初步取得成功后有两条路径可选：要么他们继续做他们正在做的事情，要么他们开始花大量的时间思考他们的“个人品牌”并享受作为创始人的地位。&lt;/p&gt;
&lt;p&gt;参加会议和接受媒体报道的诱惑很难抵挡——他们让人感觉很好，尤其是在看到你所在领域的其他创始人得到关注时。但是这种情况不会持续很久。最终，新闻媒体会弄清楚谁才是真正的赢家，如果你的公司真的成功了，你会得到比你期望的更多的关注。极端的情况——初创阶段的创始人有自己的公关——你可能认为这只会在电视节目中出现，但实际上真的存在，而且他们几乎总是失败。&lt;/p&gt;
&lt;p&gt;长期来看，专注和强度将取得胜利。 (Charlie Rose 曾经说过，世界上的事情是通过专注和人际关系的结合来完成的，这一点一直让我记忆犹新。)&lt;/p&gt;
&lt;h2 id=&#34;ceo-的职责&#34;&gt;CEO 的职责&lt;/h2&gt;
&lt;p&gt;我之前提到过，CEO 唯一的职责就是确保公司取得胜利。尽管这是事实，但我想更具体地谈谈 CEO 应该如何安排他或她的时间。&lt;/p&gt;
&lt;p&gt;一个 CEO 需要 1）为公司设定愿景和戈略；2）向所有人宣扬公司；3）招聘和管理团队，尤其是在你自己有空白的领域；4）筹集资金；以及 5）设定执行质量标准。&lt;/p&gt;
&lt;p&gt;除此之外，还要找出你最喜欢的商业部分，并保持参与。&lt;/p&gt;
&lt;p&gt;正如我一开始提到的，这是一份繁重的工作。如果你成功了，它会在你无法想象的程度上接管你的生活——你会一直在思考公司的事情。极度的专注和强度意味着它并不是工作生活平衡的最佳选择。你可以有另一件大事——你的家庭，做很多铁人三项比赛，等等——但可能不会有比这更多的事情。你必须时刻保持警惕，有很多决策只有你可以做，无论你如何善于委托。&lt;/p&gt;
&lt;p&gt;你应该目标明确，对你的团队和外界总是反应迅速，总是清楚地说明战略和优先事项，参加所有重要的事情，并快速执行（尤其是在别人因为等待你的决定而被阻碍时）。你还应该采取一种“不择手段”的态度——会有很多令人不愉快的疲劳。如果团队看到你在做这些事情，他们也会这么做。&lt;/p&gt;
&lt;p&gt;管理你自己的心理是既困难又重要的。这在现在已经成为陈词滥调，但实际上是真的——情绪的高低起伏非常剧烈，如果你没有找到在它们中间保持平衡的方法，你会遇到困难。做 CEO 是孤独的。当一切都在崩溃时，你可以打电话给其他 CEO 的关系是很重要的（YC 的一个重要的意外发现就是为创始人提供了一个可以有同行的方式）。&lt;/p&gt;
&lt;p&gt;一个成功的创业公司需要很长的时间——当然比大多数创始人在开始时想的要长。你不能把它当作通宵达旦的事情。你必须吃好，睡好，做运动。你必须花时间和你的家人和朋友在一起。你还需要在你真正热衷的领域工作——没有别的事情能支持你十年。&lt;/p&gt;
&lt;p&gt;一切都会感觉像是破碎的——灾难的多样性和程度会让你惊讶。你的工作就是面带微笑地修复它们，并向你的团队保证一切都会好的。通常事情没有看起来那么糟，但有时候它们实际上真的很糟。无论如何，继续前进。继续成长。&lt;/p&gt;
&lt;p&gt;CEO 不能找借口。会有很多坏事和不公平的事情发生。但不要让自己说，尤其是对团队说，“如果我们有更多的钱”或者“如果我们有另一个工程师”。要么找出一种方法来实现，要么找出不需要它的方法做事。让自己找很多借口的人通常会失败，做创业公司的 CEO 这样做几乎总是会失败。让自己对不公感到沮丧 1 分钟，然后意识到找出解决方案取决于你。努力让人们在谈论你时说“X 总是能够完成事情”。&lt;/p&gt;
&lt;p&gt;没有一个第一次做创始人的人知道他或她在做什么。你以多大的程度理解这一点，并寻求帮助，你就会更好。花时间学习成为一个好的领导和管理者是值得的。做这件事的最好方法是找一个导师——读书似乎不太管用。&lt;/p&gt;
&lt;p&gt;我们在 YC 给出的很多建议都是“直接问他们”或“直接去做”。第一次做创始人的人认为当你需要别人的东西或者你想做一些新的事情时，一定有一些秘密。但是再次强调，创业公司是骗术停止工作的地方。只要直接点，愿意要求你想要的，不要做一个混蛋。&lt;/p&gt;
&lt;p&gt;你需要为他人扭曲现实，但不是为你自己。你必须让其他人相信你的公司有望成为本十年最重要的创业公司，但你自己应该对可能出错的事情保持警惕。&lt;/p&gt;
&lt;p&gt;坚持到底。大多数创始人放弃得太快，或者太快地转向下一个产品。如果事情通常不顺利，找出问题的根本原因，并确保你解决了这个问题。做一个成功的创业公司 CEO 的很大一部分就是不放弃（虽然你也不想在所有的理由都被否定后还固执地坚持——这是另一个明显的矛盾，也是一个很难做出的判断）。&lt;/p&gt;
&lt;p&gt;保持乐观。尽管可能世界上有一位伟大的悲观主义 CEO，但我还没遇到过他或她。CEO 需要有一种未来会变得更好的信念，并且公司将在使未来变得更好的过程中发挥重要作用，这对于 CEO 来说很重要，他们需要将这种信念传染给公司的其他成员。在理论上这很简单，但在面对短期挑战的现实中却很困难。不要忽视长期愿景，相信日复一日的挑战终将被遗忘，被年复一年的进步所取代。&lt;/p&gt;
&lt;p&gt;你最重要的工作之一是定义使命和价值观。这可能感觉有点做作，但在初期就开始做这件事是值得的。无论你在一开始设置的是什么，几年后通常仍然有效，随着你的成长，每一个新加入的人都需要首先接受并然后向其他人推销公司的使命和价值观。所以尽早将你的文化价值观和使命写下来。&lt;/p&gt;
&lt;p&gt;我认为值得重复的一个老生常谈的观点是：建立一个公司有点像建立一个宗教。如果人们不能将他们日常的工作与他们关心的更高目标联系起来，他们就无法做好自己的工作。我认为在 YC 网络中，Airbnb 在这方面做得最好，我强烈建议大家去看看他们的文化价值观。&lt;/p&gt;
&lt;p&gt;CEO 经常犯的一个错误是在商业的老路上创新，而不是在新产品和解决方案上创新。例如，许多创始人认为他们应该花时间去发现新的人力资源、营销、销售、融资、公关等方法。这几乎总是不好的。在已经有定式的领域里，做已经被证明有效的事情，将你的创新精力集中在你正在构建的产品或服务上。&lt;/p&gt;
&lt;h2 id=&#34;招聘和管理&#34;&gt;招聘和管理&lt;/h2&gt;
&lt;p&gt;招聘是你最重要的工作之一，也是打造一家伟大公司（而非伟大产品）的关键。&lt;/p&gt;
&lt;p&gt;我对招聘的第一条建议就是不要去做。我们在 YC 合作过的最成功的公司都等待了相对较长的时间才开始雇佣员工。员工很贵。员工会增加组织复杂性和沟通开销。有些你可以对创始人说的事情，你在员工面前就不能说。员工还会增加惯性——随着团队人数的增加，改变方向就会变得越来越困难。抵制从你的员工数量中寻求自我价值的冲动。&lt;/p&gt;
&lt;p&gt;最优秀的人有很多机会。他们想加入火箭般的公司。如果你一无所有，你很难聘请到他们。一旦你明显得胜，他们就会想加入你。&lt;/p&gt;
&lt;p&gt;值得重申的是，优秀的人有很多选择，而你需要优秀的人来打造一家伟大的公司。请慷慨地给予股权、信任和责任。愿意去追求那些你认为你可能无法得到的人。记住，你想聘请的那种人如果愿意的话，他们可以自己创办公司。&lt;/p&gt;
&lt;p&gt;当你处于招聘模式（即从你获得产品市场契合度到 T 无穷大的时候），你应该花大约 25% 的时间在这上面。至少有一位创始人，通常是 CEO，需要在招聘上变得很棒。这是大多数 CEO 的时间消耗最大的活动。每个人都说 CEO 应该花大量的时间招聘，但实际上，除了最好的 CEO，没有人这么做。这可能有一些道理。&lt;/p&gt;
&lt;p&gt;不要妥协于你雇佣的人的质量。每个人都知道这一点，然而每个人在某个绝望的时刻都妥协过。每个人都会后悔，有时这几乎会杀死公司。好人和坏人都有感染力，如果你从一开始就雇佣了平庸的人，平均水平通常不会上升。刚开始就雇佣了平庸的早期员工的公司几乎永远无法恢复。对人的直觉要有信心。如果你有疑虑，那么答案就是不。&lt;/p&gt;
&lt;p&gt;不要雇佣长期消极的人。他们不适合早期创业公司的需求——世界其他地方每天都会预测你的失败，公司内部需要团结一致，相信反其道而行之。&lt;/p&gt;
&lt;p&gt;对于几乎所有的角色，都应优先考虑能力而非经验。寻找具有原始智力并且有完事业成果的人。寻找你喜欢的人——你们会一起度过很多时间，而且经常处于紧张的情况。对于你不熟悉的人，尝试在他们全职加入之前一起做一个项目。&lt;/p&gt;
&lt;p&gt;投入时间成为一个好的管理者。这对大多数创始人来说都很困难，而且肯定是反直觉的。但这是非常重要的。找到可以在这方面帮助你的导师。如果你在这方面做得不好，你会很快失去员工，如果你不能留住员工，你无论你是世界上最好的招聘者，都没关系。关于如何做一个好的管理者的原则已经讨论得很多了，但我从未看到过讨论“不要进入英雄模式”的。大多数初次当管理者的人在某个时候都会成为这种模式的受害者，尝试自己做所有的事情，并对他们的员工不可接近。这通常以崩溃告终。抵制任何进入这种模式的诱惑，并愿意接受项目延期以有一个运作良好的团队。&lt;/p&gt;
&lt;p&gt;说到管理，尽力让所有人都在同一个办公室。不知为何，创业公司总是在这方面妥协。但几乎所有最成功的创业公司开始的时候都在一起。我认为远程工作对于大公司可能很好，但对于创业公司来说，它并不是成功的秘诀。&lt;/p&gt;
&lt;p&gt;最后，快速解雇。每个人都知道这一点，但没人会做。但我还是想说一下。另外，无论他们在做什么事情上有多好，只要他们对文化有毒，就解雇他们。文化是由你雇佣、解雇和提升的人来定义的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.samaltman.com/how-to-hire&#34; title=&#34;我写了一篇更详细的博客文章。&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我写了一篇更详细的博客文章。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;竞争对手&#34;&gt;竞争对手&lt;/h2&gt;
&lt;p&gt;关于竞争对手的一句话：竞争对手是创业公司的鬼故事。创业公司认为它们是杀死 99% 的创业公司的原因。但 99% 的创业公司是自杀，而非他杀。你应该更担心你所有的内部问题。如果你失败，很可能是因为你没能制造出一个伟大的产品，和/或没能打造出一个伟大的公司。&lt;/p&gt;
&lt;p&gt;99% 的时间，你应该忽略竞争对手。特别是当他们筹集大量资金或在媒体上制造大量噪音时，更应该忽略他们。在他们用一个真实的，已经发布的产品击败你之前，不要担心竞争对手。新闻发布比写代码更容易，写代码又比制作伟大的产品更容易。用亨利·福特的话来说：“应当害怕的竞争者是那些完全不理会你，只是一直在改善他们自己的业务的人。”&lt;/p&gt;
&lt;p&gt;每一个巨头公司在他们小时候都面对过比你现在面临的更严重的竞争威胁，而他们都很好的度过了。总是有对策。&lt;/p&gt;
&lt;h2 id=&#34;赚钱&#34;&gt;赚钱&lt;/h2&gt;
&lt;p&gt;哦，赚钱。你需要弄清楚如何去做。&lt;/p&gt;
&lt;p&gt;这个的简短版本是，你必须让人们支付给你的钱超过你提供商品/服务的成本。不知为何，人们总是忘记考虑提供服务的成本部分。&lt;/p&gt;
&lt;p&gt;如果你有一个免费的产品，不要计划通过购买用户来增长。对于依赖广告的业务来说，这真的很难。你需要制作一些人们会和朋友分享的东西。&lt;/p&gt;
&lt;p&gt;如果你有一个付费产品，但客户生命周期价值 (LTV) 小于 500 美元，你通常无法负担销售。试验不同的用户获取方法，如 SEO/SEM，广告，邮件等，但尽量在 3 个月内回收你的客户获取成本 (CAC)。&lt;/p&gt;
&lt;p&gt;如果你有一个付费产品，其 LTV（净收入）超过 500 美元，你通常可以负担得起直销。尝试先自己销售产品，了解什么是有效的。《Hacking Sales》是一本有用的书。&lt;/p&gt;
&lt;p&gt;无论如何，尽快达到“拉面盈利”——即，赚足够的钱让创始人可以靠拉面度日——的状态。当你到达这里，你就掌握了自己的命运，不再受投资者和金融市场的摆布。&lt;/p&gt;
&lt;p&gt;一直关注你的现金流。虽然这听起来难以置信，但我们已经看到过创始人在没有意识到的情况下用光了资金（并且&lt;a href=&#34;http://paulgraham.com/aord.html&#34; title=&#34;阅读 Paul Graham 的文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阅读 Paul Graham 的文章&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;筹资&#34;&gt;筹资&lt;/h2&gt;
&lt;p&gt;大多数创业公司在某个时候都会筹资。&lt;/p&gt;
&lt;p&gt;在你需要资金或者在条件好的情况下可以获得资金时，你应该筹资。小心不要失去你的节俭精神，或者开始通过投钱来解决问题。没有足够的钱可能会很糟糕，但是有太多的钱几乎总是糟糕的。&lt;/p&gt;
&lt;p&gt;成功筹资的秘诀是拥有一家好公司。所有其他的创始人试图过度优化流程的东西可能只在 5% 的时间里有用。投资者正在寻找的是那些无论他们是否投资，都会非常成功，但有了外部资本可以更快发展的公司。“非常成功”的部分很重要——因为投资者的回报主要是由大成功驱动的，如果一个投资者认为你有 100% 的机会创造一个 1000 万美元的公司，但几乎没有机会建立一个更大的公司，他/她即使在非常低的估值下也可能不会投资。总是解释为什么你可能会获得巨大的成功。&lt;/p&gt;
&lt;p&gt;投资者受到错过下一个谷歌和害怕在看起来明显愚蠢的事情上损失钱的双重恐惧的驱动。（对于最好的公司，他们同时害怕这两个。）&lt;/p&gt;
&lt;p&gt;在你的公司处于不足以吸引资本的状态时，试图筹资是个坏主意。你会烧钱并浪费时间。&lt;/p&gt;
&lt;p&gt;如果你在筹资方面挣扎，不要失去信心。许多最好的公司都曾在这方面挣扎，因为最好的公司通常在一开始看起来很糟糕（而且他们几乎总是看起来不合时宜）。当投资者对你说不的时候，相信他们说的“不”，但不要相信他们的理由。并记住，除了“是”，任何东西都是“不”——投资者有一种让“不”听起来像“可能是”的能力。&lt;/p&gt;
&lt;p&gt;进行筹款谈判时，你需要并行进行，而不是顺序地按照你最喜欢的投资者名单进行。让投资者采取行动的途径，就是害怕其他投资者会抢走他们的机会。&lt;/p&gt;
&lt;p&gt;把筹款看作是一种必要的恶，尽快完成。有些创始人热衷于筹款；这总是不好的。最好将这项任务交给一位创始人，这样公司就不会停滞不前。&lt;/p&gt;
&lt;p&gt;请记住，大多数风险投资人对大多数行业了解不深。数据永远是最有说服力的。&lt;/p&gt;
&lt;p&gt;这种情况开始有所改变，但不幸的是，大多数投资者（尤其是 Y Combinator）仍然需要你们共同认识的人的介绍，他们才会认真对待你。&lt;/p&gt;
&lt;p&gt;坚持使用简洁的条款（复杂的条款会累积并在每一轮投资中变得更糟），但不要过度优化，特别是在估值方面。估值是可以量化竞争的东西，所以创始人喜欢争夺最高估值。但中等估值并不重要。&lt;/p&gt;
&lt;p&gt;第一笔资金最难获得，所以应该集中精力获取，这通常意味着你需要将注意力集中在最喜欢你的人身上。始终要有多个计划，其中一个是不筹集任何资金，根据兴趣灵活调整——如果你能更好地使用更多的资金，并且它在合理的条款下可用，那么请考虑接受。&lt;/p&gt;
&lt;p&gt;擅长推销的一个重要秘诀是，让你的故事尽可能清晰、易懂。当然，最重要的秘诀是，你真的需要有一个好公司。关于推销内容有很多想法，但至少你需要包括：使命、问题、产品/服务、商业模式、团队、市场和市场增长率、财务。&lt;/p&gt;
&lt;p&gt;要记住，每一轮筹资的标准都会更高。如果你在种子轮时只是一个引人注目的演讲者，那么在 A 轮筹资时可能就没有效果了。&lt;/p&gt;
&lt;p&gt;好的投资者确实能带来很大的价值。坏的投资者会带来很大的负面影响。大多数投资者处于中间地位，既没有增加也没有减少。只投资少量资金的投资者通常不会对你有任何帮助（即，要警惕聚会轮投资）。&lt;/p&gt;
&lt;p&gt;优秀的董事会成员是公司外部驱动力中最好的一种，除了用户之外，外部驱动力比大多数创始人想象的更有价值。愿意接受较低的估值，以获取愿意积极参与的优秀董事会成员。&lt;/p&gt;
&lt;p&gt;我认为&lt;a href=&#34;http://paulgraham.com/fr.html&#34; title=&#34;Paul Graham 的这篇文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paul Graham 的这篇文章&lt;/a&gt; 是关于筹款的最好的文章。&lt;/p&gt;
&lt;h2 id=&#34;结束语&#34;&gt;结束语&lt;/h2&gt;
&lt;p&gt;要记住，每一个伟大的想法都有至少一千人有。其中有一个人会成功。区别在于执行。这是一种磨磨蹭蹭的过程，每个人都希望有其他方式将“想法”转化为“成功”，但是还没有人找到方法。&lt;/p&gt;
&lt;p&gt;所以你需要的就是一个伟大的想法，一个伟大的团队，一个伟大的产品，以及伟大的执行力。那么简单！;)&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>O&#39;Reilly：值得关注的雷达趋势（2023 年 8 月）</title>
      <link>https://jimmysong.io/trans/radar-trends-to-watch-august-2023/</link>
      <pubDate>Thu, 10 Aug 2023 13:05:42 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/radar-trends-to-watch-august-2023/</guid>
      <description>
        
        
        &lt;p&gt;人工智能依然是新闻头条。在过去的一个月中，我们看到了许多语言模型的重大更新：Claude 2，其上下文限制为 10 万个令牌；LLaMA 2，限制相对较宽松；以及 Stable Diffusion XL，是 Stable Diffusion 的一个功能更强大的版本。Claude 2 的巨大上下文是否真的改变了模型的能力？开放访问和开源语言模型在商业应用发展中将扮演什么角色？&lt;/p&gt;
&lt;h2 id=&#34;人工智能&#34;&gt;人工智能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stability.ai/blog/stable-diffusion-sdxl-1-announcement&#34; title=&#34;Stable Diffusion XL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stable Diffusion XL&lt;/a&gt; 是一个新的生成模型，扩展了 Stable Diffusion 的能力。它承诺更短、更容易的提示；正确地在图像内生成文本的能力；能够在私有数据上进行训练；以及更高质量的输出。在 &lt;a href=&#34;https://clipdrop.co/stable-diffusion&#34; title=&#34;clipdrop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;clipdrop&lt;/a&gt; 上试用它。&lt;/li&gt;
&lt;li&gt;OpenAI &lt;a href=&#34;https://arstechnica.com/information-technology/2023/07/openai-discontinues-its-ai-writing-detector-due-to-low-rate-of-accuracy/&#34; title=&#34;撤回了 OpenAI Classifier&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;撤回了 OpenAI Classifier&lt;/a&gt;，这是一个用于检测 AI 生成文本的工具，因为它的准确性不够高。&lt;/li&gt;
&lt;li&gt;ChatGPT 添加了一个名为“&lt;a href=&#34;https://openai.com/blog/custom-instructions-for-chatgpt&#34; title=&#34;Custom Instructions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Custom Instructions&lt;/a&gt;”的新功能。这个功能允许用户在任何其他用户生成的提示之前指定一个初始提示；实际上，它是一个个人的“系统提示”。这样可以让 Prompt Injection 更有趣。&lt;/li&gt;
&lt;li&gt;高通正与 Facebook/Meta 合作，在像手机这样的小型设备上运行 &lt;a href=&#34;https://www.qualcomm.com/news/releases/2023/07/qualcomm-works-with-meta-to-enable-on-device-ai-applications-usi&#34; title=&#34;LLaMA 2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LLaMA 2&lt;/a&gt;，使得 AI 应用可以在本地运行。目标机器的大小将比开源和其他许可证的区别更少。&lt;/li&gt;
&lt;li&gt;StabilityAI 发布了两个新的大型语言模型，&lt;a href=&#34;https://stability.ai/blog/freewilly-large-instruction-fine-tuned-models&#34; title=&#34;FreeWilly1 和 FreeWilly2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FreeWilly1 和 FreeWilly2&lt;/a&gt;。它们分别基于 LLaMA 和 LLaMA 2。它们被称为开放访问（而不是开源），声称某些任务的性能类似于 GPT 3.5。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chat.lmsys.org/?arena&#34; title=&#34;Chatbot Arena&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chatbot Arena&lt;/a&gt; 让 &lt;a href=&#34;https://arxiv.org/abs/2306.05685&#34; title=&#34;聊天机器人互相对战&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;聊天机器人互相对战&lt;/a&gt;。用户输入提示，然后将其发送给两个未知（随机选择？）的语言模型。在生成响应后，用户可以宣布获胜者，并了解竞争的模型。&lt;/li&gt;
&lt;li&gt;GPT-4 解决问题的能力可能在过去几个月中 &lt;a href=&#34;https://arxiv.org/pdf/2307.09009.pdf&#34; title=&#34;有所下降&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有所下降&lt;/a&gt;，特别是它解决数学问题和生成正确的 Python 代码的能力似乎有所下降。另一方面，它对越狱攻击更加稳健。&lt;/li&gt;
&lt;li&gt;Facebook/Meta 发布了 &lt;a href=&#34;https://ai.meta.com/llama/&#34; title=&#34;Llama 2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Llama 2&lt;/a&gt;。虽然对其使用的限制较少，但它并不是 &lt;a href=&#34;https://blog.opensource.org/metas-llama-2-license-is-not-open-source/&#34; title=&#34;开源的&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开源的&lt;/a&gt;，尽管 Facebook 声称它是。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Forethought-Technologies/AutoChain&#34; title=&#34;Autochain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Autochain&lt;/a&gt; 是 Langchain 的一种轻量级、简化的替代品。它允许开发人员在大型语言模型和数据库之上构建复杂的应用程序。&lt;/li&gt;
&lt;li&gt;Elon Musk &lt;a href=&#34;https://techxplore.com/news/2023-07-musk-xai-rival-openai-google.html&#34; title=&#34;宣布了&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布了&lt;/a&gt; 他的新人工智能公司 xAI。这是否真正有助于人工智能或成为另一个花边，还有待观察。&lt;/li&gt;
&lt;li&gt;Anthropic 宣布了 &lt;a href=&#34;https://www.anthropic.com/index/claude-2&#34; title=&#34;Claude 2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Claude 2&lt;/a&gt;，这是他们大型语言模型的新版本。在 &lt;a href=&#34;https://claude.ai/login&#34; title=&#34;claude.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;claude.ai&lt;/a&gt; 上提供了聊天界面，API 访问也可用。Claude 2 允许多达 10 万个令牌的提示，比其他 LLM 大得多，并且可以生成长度为“几千个令牌”的输出。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zelikman.me/parselpaper/&#34; title=&#34;parsel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;parsel&lt;/a&gt; 是一个框架，帮助大型语言模型在涉及分层多步推理和问题解决的任务上做得更好。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mshumer/gpt-prompt-engineer&#34; title=&#34;gpt-prompt-engineer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpt-prompt-engineer&lt;/a&gt; 是一个工具，它读取您希望 AI 执行的任务的描述，以及若干个测试用例。然后，它生成关于一个主题的大量提示，测试提示，然后对结果进行评分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jerryjliu/llama_index&#34; title=&#34;LlamaIndex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LlamaIndex&lt;/a&gt; 是一个面向语言模型的 &lt;a href=&#34;https://www.llamaindex.ai/&#34; title=&#34;数据框架&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据框架&lt;/a&gt;（有时被称为“编排框架”），简化了对用户数据进行索引并使用该数据构建复杂提示的过程。它可以与 Langchain 一起用于构建复杂的 AI 应用程序。&lt;/li&gt;
&lt;li&gt;OpenAI 正在逐步发布其 &lt;a href=&#34;https://openai.com/blog/chatgpt-plugins&#34; title=&#34;代码解释器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;代码解释器&lt;/a&gt;，它将允许 ChatGPT 执行它创建的任何代码，使用用户提供的数据，并将输出发送回用户。代码解释器可以减少幻觉、错误和错误的数学。&lt;/li&gt;
&lt;li&gt;人类现在可以通过 &lt;a href=&#34;https://goattack.far.ai/pdfs/go_attack_paper.pdf&#34; title=&#34;找到并利用 AI 系统的游戏弱点&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;找到并利用 AI 系统的游戏弱点&lt;/a&gt;，诱导 AI 犯下严重错误，从而打败 AI 的围棋。&lt;/li&gt;
&lt;li&gt;时间到了提出存在性问题的时候：单个香蕉存在吗？&lt;a href=&#34;https://www.digital-science.com/tldr/article/the-lone-banana-problem-or-the-new-programming-speaking-ai/&#34; title=&#34;Midjourney 不这么认为&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Midjourney 不这么认为&lt;/a&gt;。说真的，这是一篇关于设计适当的提示以提供适当结果的困难的优秀文章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theregister.com/2023/07/03/jolly_roger_telephone_company/&#34; title=&#34;Jolly Roger Telephone Company&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jolly Roger Telephone Company&lt;/a&gt; 开发了基于 GPT-4 的语音机器人，可以雇佣它来回答电话，当推销员打电话时。如果你想听听，结果可能会很有趣。&lt;/li&gt;
&lt;li&gt;Apache Spark 现在有了一个 &lt;a href=&#34;https://www.databricks.com/blog/introducing-english-new-programming-language-apache-spark&#34; title=&#34;English SDK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;English SDK&lt;/a&gt;。它比 CoPilot 等工具更进一步，允许您在编写代码时直接使用英语。&lt;/li&gt;
&lt;li&gt;人类可能会更愿意相信由 AI 生成的错误信息，可能是因为 AI 生成的文本比大多数人类文本更好结构化。或者，可能是因为 AI 很擅长说服。&lt;/li&gt;
&lt;li&gt;OpenOrca是另一个基于 LLaMA 的开源语言模型和数据集。它的目标是复制 Microsoft 的&lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/orca-progressive-learning-from-complex-explanation-traces-of-gpt-4/&#34; title=&#34;Orca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Orca&lt;/a&gt;的训练数据，该模型是使用 GPT-4 的链式思考提示和响应进行训练的。Orca 模型的主张是它可以复制 GPT-4 的“推理”过程。&lt;/li&gt;
&lt;li&gt;在其&lt;a href=&#34;https://thenewstack.io/snowflake-pushes-range-of-new-ai-developer-capabilities/&#34; title=&#34;开发者峰会&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开发者峰会&lt;/a&gt;上，Snowflake 宣布了 Document AI：对非结构化文档集合的自然语言查询。该产品基于他们自己的大型语言模型，而不是 AI 提供商。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程&#34;&gt;编程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;“它在我的机器上运行”已经变成了“&lt;a href=&#34;https://dwdraju.medium.com/how-it-works-in-my-machine-turns-it-works-in-my-container-1b9a340ca43d&#34; title=&#34;它在我的容器中运行&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;它在我的容器中运行&lt;/a&gt;”：这篇文章提供了一些关于如何避免困扰计算机用户数十年的问题的好建议。&lt;/li&gt;
&lt;li&gt;StackOverflow 正在将 AI 集成到其产品中。StackOverflow for Teams 现在有一个&lt;a href=&#34;https://stackoverflow.co/labs/slack/&#34; title=&#34;chatbot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chatbot&lt;/a&gt;来帮助解决技术问题，以及一个新的&lt;a href=&#34;https://genai.stackexchange.com/&#34; title=&#34;GenAI StackExchange&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GenAI StackExchange&lt;/a&gt;用于讨论生成 AI，提示编写和相关问题。&lt;/li&gt;
&lt;li&gt;GitHub 泄露私钥和身份验证密钥并不是新闻。但是对 DockerHub 上可用的容器进行的研究表明，Docker 容器也会泄露密钥和密码，其中许多密钥正在使用中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://firejail.wordpress.com/&#34; title=&#34;Firejail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firejail&lt;/a&gt;是一个 Linux 工具，可以在私有，安全的沙箱中运行任何进程。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2023/07/10/complexity-software-information/&#34; title=&#34;复杂和复杂&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;复杂和复杂&lt;/a&gt;：有什么区别？它与信息有关，在“复杂系统”的时代，了解它很重要。第一部分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/panki27/npm-manifest-check&#34; title=&#34;npm-manifest-check&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npm-manifest-check&lt;/a&gt;是一个工具，用于检查NPM 包中的内容与包的清单。这是解决 NPM 中恶意包问题的部分解决方案。&lt;/li&gt;
&lt;li&gt;Facebook 描述了他们的&lt;a href=&#34;https://engineering.fb.com/2023/06/27/developer-tools/meta-developer-tools-open-source/&#34; title=&#34;软件开发平台&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;软件开发平台&lt;/a&gt;，其中大部分已经开源。很少有开发人员需要使用这么大的软件项目，但是他们的工具（包括测试框架，版本控制和构建系统）值得探究。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dredozubov/polyrhythmix&#34; title=&#34;Polyrhythmix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polyrhythmix&lt;/a&gt;是一个命令行程序，用于生成多节奏鼓部。没有涉及 AI。&lt;/li&gt;
&lt;li&gt;Philip Guo 的“&lt;a href=&#34;https://www.oreilly.com/radar/real-real-world-programming-with-chatgpt/&#34; title=&#34;Real-Real-World Programming with ChatGPT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Real-Real-World Programming with ChatGPT&lt;/a&gt;”展示了使用 ChatGPT 执行真实编程任务的情况：哪些工作得很好，哪些不好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安全&#34;&gt;安全&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个研究小组发现了一种方法来&lt;a href=&#34;https://llm-attacks.org/&#34; title=&#34;自动生成攻击字符串&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动生成攻击字符串&lt;/a&gt;，以迫使大型语言模型生成有害内容。这些攻击可针对开源和闭源模型。AI 提供商无法防御它们还不清楚。&lt;/li&gt;
&lt;li&gt;黑客集团 Lazarus Group 正在对 JavaScript 加密货币开发人员进行&lt;a href=&#34;https://socket.dev/blog/social-engineering-campaign-npm-malware&#34; title=&#34;社交工程攻击&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;社交工程攻击&lt;/a&gt;。开发人员被邀请在依赖于恶意 NPM 包的 Github 项目上进行合作。&lt;/li&gt;
&lt;li&gt;语言模型是网络犯罪的下一个大事。一个名为WormGPT的大型语言模型已经被开发用于网络犯罪。它基于 GPT-J。WormGPT 可在暗网上使用，以及成千上万的被盗 ChatGPT 凭据。&lt;/li&gt;
&lt;li&gt;根据 MITRE 的研究，&lt;a href=&#34;https://www.theregister.com/2023/06/29/cwe_top_25_2023/&#34; title=&#34;越界写入&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;越界写入&lt;/a&gt;是最危险的安全漏洞之一。它们也是最常见的，并且一直位列榜首。解决问题的简单方法是使用 Rust。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络&#34;&gt;网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;又一个 Web 框架？&lt;a href=&#34;https://enhance.dev/&#34; title=&#34;Enhance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enhance&lt;/a&gt;声称是 HTML 优先，只有在需要时才使用 JavaScript。实际情况可能并不那么简单，但如果没有其他东西，它证明了对复杂和臃肿的 Web 应用程序的不满正在增长。&lt;/li&gt;
&lt;li&gt;又一个新的浏览器？&lt;a href=&#34;https://arc.net/&#34; title=&#34;Arc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Arc&lt;/a&gt; &lt;a href=&#34;https://arstechnica.com/gadgets/2023/07/the-browsing-companys-unconventional-browser-arc-releases-publicly-on-mac/#p3&#34; title=&#34;重新思考&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重新思考&lt;/a&gt;浏览体验，具有在选项卡组之间切换和自定义单个网站的功能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34; title=&#34;HTMX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTMX&lt;/a&gt;提供一种使用 HTML 属性构建许多高级 Web 页面功能的方法，包括 WebSockets 和我们曾经称之为 Ajax。所有复杂性似乎都打包在一个 JavaScript 库中。&lt;/li&gt;
&lt;li&gt;在元宇宙中有一家&lt;a href=&#34;https://www.technologyreview.com/2023/06/28/1074338/future-job-metaverse-lawyer/&#34; title=&#34;律师事务所&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;律师事务所&lt;/a&gt;，以及一个新兴的元宇宙律师协会。这是一个很好的会议地点，尽管律师不能获得在元宇宙中执业的许可。&lt;/li&gt;
&lt;li&gt;欧洲法院（CJEU）裁定 Meta 的 GDPR 合规方法是非法的，Meta 可能不会在未经明确，自由授予的同意的情况下使用数据进行除核心功能之外的任何其他事情; 不在使用条款文件中隐藏的同意不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加密货币&#34;&gt;加密货币&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;谷歌已更新其关于 Android 应用程序的&lt;a href=&#34;https://android-developers.googleblog.com/2023/07/new-blockchain-based-content-opportunities-google-play.html&#34; title=&#34;政策&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;政策&lt;/a&gt;，允许应用程序提供基于区块链的资产，例如 NFT。&lt;/li&gt;
&lt;li&gt;ChatGPT 可以编程为&lt;a href=&#34;https://marginalrevolution.com/marginalrevolution/2023/07/teaching-gpt-to-send-bitcoin-payments.html&#34; title=&#34;发送比特币付款&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;发送比特币付款&lt;/a&gt;。正如第一个评论者指出的那样，这是 Langchain 的一个相当简单的应用。但这肯定会发生的事情。但问题是：我们何时会有基于 GPT 的加密货币套利？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生物学&#34;&gt;生物学&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google 开发了&lt;a href=&#34;https://arxiv.org/abs/2307.14334&#34; title=&#34;Med-PaLM M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Med-PaLM M&lt;/a&gt;，试图构建一个被训练用于生物医学应用程序的“通用”多模态 AI。Med-PaLM M 仍然是一个研究项目，但可能代表了将大型语言模型应用于医学的一步前进。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;材料&#34;&gt;材料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2307.12008&#34; title=&#34;室温常压超导体&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;室温常压超导体&lt;/a&gt;：这一说法引起了很多怀疑 - 但是一如既往，最好等到另一个团队成功或未能复制结果。如果这项研究成果成立，那么这是一个巨大的进步。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>WebAssembly 的采用受到了什么阻碍？</title>
      <link>https://jimmysong.io/trans/whats-holding-up-webassemblys-adoption/</link>
      <pubDate>Mon, 07 Aug 2023 13:05:42 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/whats-holding-up-webassemblys-adoption/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;译者注：WebAssembly 的采用情况受到了组件模型的阻碍，这是一个需要解决的关键问题。尽管 WebAssembly 已经被广泛部署以提高应用程序在浏览器或后端运行时的性能，但其全部潜力尚未得到实现。为了实现一次编写、多处部署范例，需要一个通用的标准来将不同语言与其特定的功能集和设计范式集成起来。许多公司和大学的工程师正在开发组件模型、WASI 提议和语言工具链，这些工程师的目标是将规范放入 W3C 中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WebAssembly 的承诺是：将应用程序放在 WebAssembly（Wasm）模块中，可以提高运行时性能和降低延迟速度，同时提高跨平台的兼容性。&lt;/p&gt;
&lt;p&gt;WebAssembly 只需要 CPU 指令集。这意味着在 WebAssembly 模块中部署一个应用程序理论上应该能够在不同的不同的设备上运行和更新，无论是服务器、边缘设备、多云、无服务器环境等等。&lt;/p&gt;
&lt;p&gt;因此，WebAssembly 已经被广泛部署以提高应用程序在浏览器或后端运行时的性能。然而，WebAssembly 的全部潜力尚未得到实现。&lt;/p&gt;
&lt;p&gt;尽管 &lt;a href=&#34;https://webassembly.github.io/spec/core/bikeshed/&#34; title=&#34;WebAssembly 核心规范&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 核心规范&lt;/a&gt; 已经成为标准，但服务器端 Wasm 仍然是一个正在进行中的工作。服务器端 Wasm 层有助于确保在部署 Wasm 应用程序的不同设备和服务器之间的端点兼容性。如果没有一个服务器端 WebAssembly 的标准化机制，那么将需要为每种语言构建导出和导入，以便每个运行时将以不同的方式理解导出/导入。&lt;/p&gt;
&lt;p&gt;截至今天，“Wasm 组件”是组件模型，但还有其他品种正在被研究；“&lt;a href=&#34;https://thenewstack.io/mozilla-extends-webassembly-beyond-the-browser-with-wasi/&#34; title=&#34;Wasi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasi&lt;/a&gt;”是一种为特定硬件配置 WASM 的方法。wasi-libc 是“posixlike kernel”组或“world”；wasi-cloud-core 是一个无服务器“world”的提议。因此，开发人员可以使用他们选择的语言创建应用程序，同时在任何环境中同时分发，无论是在 Kubernetes 集群、服务器、边缘设备等等。&lt;/p&gt;
&lt;p&gt;“超音速”性能、降低操作成本和平台中立性是 WebAssembly 的价值主张，但组件模型仍然是关键问题，Butcher 说。“性能是最容易解决的问题，我认为我们已经能够核对它了。在 Fermyon，我们看到成千上万的用户注册我们的云服务，使总拥有成本直线下降，”Butcher 说。“但是，平台中立性——在我们关心的层面上——需要组件模型。在这方面，明天来临得越快越好。”&lt;/p&gt;
&lt;p&gt;WebAssembly 设计成可以运行使用多种语言编写的应用程序。它现在可以容纳 Python、JavaScript、C++、Rust 等。使用不同编程语言编写的不同应用程序应该能够在单个模块内运行，但这种能力仍然在开发中。&lt;/p&gt;
&lt;p&gt;“在系统级别上使编程语言真正可互换可能是实现一次编写、多处部署范例的最后一个领域。但是为了使这项工作成功，我们需要一个通用的标准来将不同语言与其特定的功能集和设计范式集成起来，”Enterprise Management Associates（EMA）的分析师 Torsten Volk 表示。&lt;/p&gt;
&lt;p&gt;“这是一个经典的集体行动问题，其中单独的营利组织必须合作才能共同实现语言互操作的最终目标。此外，当涉及到在跨语言上标准化和完善功能集时，它们需要就务实妥协达成一致。”&lt;/p&gt;
&lt;h2 id=&#34;汇聚在一起&#34;&gt;汇聚在一起&lt;/h2&gt;
&lt;p&gt;与此同时，来自许多公司和大学的工程师正在开发组件模型、Wasi 提议和语言工具链，这些工程师的目标是将规范放入 World Wide Web Consortium (W3C) 中，Microsoft 的主要项目经理、Azure Core Upstream 的负责人 Ralph Squillace 表示。&lt;/p&gt;
&lt;p&gt;这些工程师通过为开源项目做出贡献或维护开源项目，参与 ByteCode Alliance 等工作，积极为知识共享做出贡献，或在会议上分享他们的知识和经验，例如在 KubeCon + CloudNativeCon Europe 的联合活动 Cloud Native Wasm Day 上。&lt;/p&gt;
&lt;p&gt;“当涉及到标准时，所有主要的相关方都需要能够告诉他们的利益相关者为什么有必要在这个努力上花费宝贵的开发人员时间。当不同的当事方遵循不同的激励结构时，这变得特别棘手，例如，云服务提供商有兴趣让客户在他们的服务上花费尽可能多的钱，而不会因移动到另一个云而感到不满，”Volk 表示。“这意味着需要某种程度的锁定，而企业软件供应商需要专注于高度可定制性和可移植性，从而将其产品开放给尽可能多的受众。所有这些组合显示了实现 Wasm 的互操作性的困难程度之高。我希望我们可以，因为回报肯定应该是值得的。”&lt;/p&gt;
&lt;p&gt;许多提供 PaaS 提供的工具成员继续不断涌现，以等待预期的 WebAssembly 时代的到来。参与者包括 Fermyon 和 Cosmonic。新的玩家 Dylibso 正在开发定制解决方案进行观察性分析；这些解决方案包括 Modsurfer，用于分析在您的环境中运行特定代码的复杂性和潜在风险。&lt;/p&gt;
&lt;p&gt;与此同时，大多数大型软件公司正在积极为 Wasm 做出贡献，而不一定创建正式的部门来支持 Wasm 相关的开源项目、开发、基础设施和网络拓扑的集成，或为 Wasm 开发应用程序，技术领袖几乎都在生产中或作为沙盒项目使用 Wasm。&lt;/p&gt;
&lt;p&gt;为了促进 WebAssembly（Wasm）的整合并弥合任何现有的差距，VMware 的 Wasm Labs 推出了 Wasm Language Runtimes 项目。主要目标是准备运行语言运行时、库和组件，供对 WebAssembly 感兴趣的开发人员使用，根据 VMware 的高级主管、Bitnami 的 CEO Daniel Lopez Ridruejo 表示。&lt;/p&gt;
&lt;p&gt;这些语言运行时可以与其他各种倡议结合使用，包括 mod_wasm（用于运行传统的 Web 应用程序，例如 WordPress）和 Wasm Workers Server（用于执行边缘/无服务器应用程序）。Ridruejo 还提到了 Language Runtime 项目与 Fermyon 的 Spin 等开源努力的兼容性。&lt;/p&gt;
&lt;p&gt;其他公司，如 Chronosphere 和 Microsoft，已经开始使用 WebAssembly 支持其操作，同时继续积极为社区的 Wasm 开发做出贡献。在 Microsoft 的情况下，它与 WebAssembly 的工作可以追溯到多年前。例如，Microsoft Flight Simulator 多年来一直在使用 WebAssembly 进行模块保护，例如当它被证明可以提高分发为 WebAssembly 模块的附加组件的安全性和可移植性时。Excel Online 使用 WebAssembly 计算 Lambda 函数。&lt;/p&gt;
&lt;p&gt;如今，Microsoft 的大部分工作都集中在即将到来的组件模型上，Microsoft 的 Squillace 表示。例如，Microsoft 正在扩大 Azure Kubernetes Service WASI NodePool 的预览，并在 Wasm 沙盒之上为其服务提供额外的超级监视保护，用于请求。这为非常小的裸机微型虚拟机非常快速地提供了用于 wasm 函数的使用。）&lt;/p&gt;
&lt;p&gt;在边缘浏览器之外，Microsoft 主要投资于基于服务器的 Wasm、系统接口（wasi）和围绕 Bytecode Alliance Foundation 的 Wasm 组件生态系统，以及基础设施和语言工具链，以实现有效的使用，Squillace 表示。“这意味着像 CNCF 的 Containerd runwasi shim 用于 Kubernetes 集成这样的开源投资，但也意味着与 TinyGo 兼容的 Wasm 组件工具、VSCode 扩展和 serverless 提案，例如 wasi-cloud-core，以及 Azure 投资于安全性，例如 hyperlight 和诸如 AKS WASI NodePool Preview 和 AKS Edge Essentials 等 Azure 服务。”&lt;/p&gt;
&lt;h2 id=&#34;大炒作&#34;&gt;大炒作&lt;/h2&gt;
&lt;p&gt;WebAssembly 的轨迹反映了类似技术（如 Java、容器等）发生的周期。Ridruejo 表示：“每一个都看到了一个围绕它的生态系统增长的周期，有了新的监控方式、安全等等。现在还太早，不知道它看起来是什么样子，”Ridruejo 表示。“问题是，在工具提供商和大型企业开始利用 WebAssembly 赚钱之前，需要发生什么。对此，Squillace 表示：&lt;/p&gt;
&lt;p&gt;“客户已经告诉我们，他们需要一个可理解的（如果不是伟大的）开发体验和一个稳固的部署和管理体验。他们还需要网络支持（在第二个预览版中推出）；没有网络支持意味着 IoT 中没有服务主机的运行时支持。最后，他们需要一致的交互式调试。这最后一个在所有语言和运行时上都很难。”&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>2023 年 WebAssembly 技术五大趋势预测</title>
      <link>https://jimmysong.io/trans/webassembly-5-predictions-for-2023/</link>
      <pubDate>Mon, 09 Jan 2023 11:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/webassembly-5-predictions-for-2023/</guid>
      <description>
        
        
        &lt;p&gt;2022 年，WebAssembly（通常缩写为 Wasm）成为了&lt;a href=&#34;https://thenewstack.io/yes-webassembly-can-replace-kubernetes/&#34; title=&#34;焦点&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;焦点&lt;/a&gt;。新的 Wasm 初创企业出现。老牌公司宣布支持 Wasm。Bytecode Alliance 发布了许多 Wasm 标准。Cloud Native Computing Foundation 举办了两次 WasmDay 活动。而其中最大的 Wasm 用户之一 Figma 被 Adobe 以惊人的 200 亿美元的价格收购。&lt;/p&gt;
&lt;p&gt;Wasm 是一种二进制格式。许多不同的语言都可以编译为相同的格式，并且该二进制格式可以在大量操作系统和体系结构上运行。Java 和 .NET 在这方面也很相似，但是 Wasm 有一个重要的区别：Wasm 运行时不信任执行的二进制文件。&lt;/p&gt;
&lt;p&gt;Wasm 应用程序被隔离在沙盒中，只能访问用户明确允许的资源（如文件或环境变量）。Wasm 还有许多其他理想的特性（例如非常出色的性能），但正是它的安全模型使 Wasm 在广泛的环境中使用，从浏览器到边缘和 IoT，甚至到云端。&lt;/p&gt;
&lt;p&gt;如果要在 2022 年发现 Wasm 趋势，那就是 Wasm 现在在浏览器之外也同样成功。这一趋势是 2023 年的基础。随着 Wasm 出现在嵌入式设备到大数据中心的各个地方，2023 年将成为 Wasm 的一年。以下是我对 2023 Wasm 生态系统的五个预测。&lt;/p&gt;
&lt;h2 id=&#34;1-组件模型将是分水岭时刻&#34;&gt;1. 组件模型将是分水岭时刻&lt;/h2&gt;
&lt;p&gt;标准很少是一个生态系统中最令人兴奋的部分。而且，随着“组件模型”这样的名字，激起兴奋感确实是一项艰巨的任务。但是，在这个乏味的名字背后是 Wasm 为软件世界带来的最重要的创新。&lt;/p&gt;
&lt;p&gt;组件模型描述了 Wasm 二进制文件之间如何交互的方式。更具体地说，两个组件可以告诉对方它们提供的服务以及需要履行的期望。然后，Wasm 模块可以利用彼此的能力。这为软件开发人员提供了一种新的建立应用程序的方式。开发人员可以声明应用程序所需的组件（或者更抽象地说，应用程序所需的功能），然后 Wasm 运行时可以代表用户组装正确的组件集合。&lt;/p&gt;
&lt;p&gt;Wasm 最多产的贡献者之一 &lt;a href=&#34;https://github.com/sunfishcode&#34; title=&#34;Dan Gohman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dan Gohman&lt;/a&gt; 写了一篇很好的&lt;a href=&#34;https://blog.sunfishcode.online/what-is-a-wasm-component/&#34; title=&#34;概述文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;概述文章&lt;/a&gt;。Fermyon 的 &lt;a href=&#34;https://github.com/dicej&#34; title=&#34;Joel Dice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Joel Dice&lt;/a&gt; 则为那些对内部更感兴趣的人写了一篇&lt;a href=&#34;https://www.fermyon.com/blog/webassembly-component-model&#34; title=&#34;技术概述&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技术概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;组件模型正在迅速成熟，已经出现了参考实现。2023 年将是组件模型开始重新定义我们如何编写软件的一年。&lt;/p&gt;
&lt;h2 id=&#34;2-serverless-将是-wasm-的最佳应用场景&#34;&gt;2. Serverless 将是 Wasm 的最佳应用场景&lt;/h2&gt;
&lt;p&gt;Serverless 的承诺已经在过去几年中显而易见。AWS Lambda 让我们看到了一种新的、简单的编程模型 —— 函数即服务（FaaS）。然而，尽管 Serverless 的概念的势头正在建立，但是底层技术的运行成本仍然很高。这种成本已经转嫁给用户。此外，虽然 FaaS 应用的启动速度比容器快，但仍然满足不了当前对于网络性能的期望。还有提升速度的空间。&lt;/p&gt;
&lt;p&gt;Wasm &lt;a href=&#34;https://www.fermyon.com/blog/serverless-reckoning&#34; title=&#34;改变了&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;改变了&lt;/a&gt; Serverless 的潜力。几乎立即的启动时间、小的二进制大小和平台和体系结构的中立性，使得 Wasm 二进制文件可以使用比运行今天的 Serverless 基础设施所需的资源少得多的资源来执行。&lt;/p&gt;
&lt;p&gt;如果全球经济正在进入一个不确定的时期，那么知道 Wasm 可以帮助我们控制成本，同时还能推进开发人员喜欢的 Serverless 函数模型，这是件好事。Wasm 的更快的启动时间和适度的资源消耗需要的计算能力比基于容器的系统少得多，并且比 Lambda 等 FaaS 系统更便宜。&lt;/p&gt;
&lt;p&gt;这种对 Wasm 可以改变 Serverless 环境的认识，促使 Fermyon 创建了 &lt;a href=&#34;https://developer.fermyon.com/spin/index&#34; title=&#34;Spin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spin&lt;/a&gt;。Spin 是一个面向开发者的工具，用于引导、构建、测试和部署 Serverless 功能。Spin 的核心是其基于 Wasm 运行时。它是开源的，已经得到 &lt;a href=&#34;https://www.fermyon.com/cloud&#34; title=&#34;Fermyon Cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fermyon Cloud&lt;/a&gt; 和微软 Azure 的 AKS 的支持，2023 年还会有更多的支持。&lt;/p&gt;
&lt;p&gt;小、快、便宜、更好。这就是 Wasm 在 2023 年为 Serverless 世界带来的组合。&lt;/p&gt;
&lt;h2 id=&#34;3-wasm-应用程序将存储在-dockerhub-和容器注册表中&#34;&gt;3. Wasm 应用程序将存储在 DockerHub 和容器注册表中&lt;/h2&gt;
&lt;p&gt;包管理——这是从编程语言到操作系统再到像 Kubernetes 这样的集群编排器的必要功能。每次我们发明一项新技术时，我们似乎注定要（重新）发明一个管理该技术资产的系统。&lt;/p&gt;
&lt;p&gt;早在 2022 年初，我们看到了几种管理 Wasm 对象的方法。没有一种方法流行起来。一小群工程师一直坚持把 OCI Registry（也称为 Docker Registry）作为存储 Wasm 的系统。但事实是，OCI Registry 格式不支持非容器工件。它是用来存储 Docker 镜像的。&lt;/p&gt;
&lt;p&gt;然后 OCI Registries 的一项重大变化改变了景观。OCI（&lt;a href=&#34;https://thenewstack.io/open-container-initiative-creates-a-distribution-specification-for-registries/&#34; title=&#34;Open Container Initiative&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Container Initiative&lt;/a&gt;）是一个小型标准机构，致力于管理围绕 OCI 容器（或我们过去所称的 Docker 容器）的标准。OCI 定义了容器格式、安全模型和运行时。它还定义了如何在注册表和客户端之间传输容器映像。&lt;/p&gt;
&lt;p&gt;在 2022 年底，OCI Registries 工作组宣布了一种官方方法来存储除容器映像之外的其他内容。这可能包括 Helm 图表、照片或（你猜到了）Wasm 应用程序。这项新功能被称为“工件存储”。&lt;/p&gt;
&lt;p&gt;当 DockerHub &lt;a href=&#34;https://www.docker.com/blog/announcing-docker-hub-oci-artifacts-support/&#34; title=&#34;宣布支持&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布支持&lt;/a&gt;这一新的工件存储规范时，Wasm 生态系统中传遍了信号：我们可以简单地将我们的应用程序存储在像 DockerHub 这样的 OCI 注册表中，而不是重新发明轮子。Wasm 生态系统必须进行新的工作，使这成为现实，但这项工作正在进行中。2023 年将是 Wasm 应用程序在 OCI 注册表中找到家的一年。&lt;/p&gt;
&lt;h2 id=&#34;4-所有大型编程语言都将支持-wasm&#34;&gt;4. 所有大型编程语言都将支持 Wasm&lt;/h2&gt;
&lt;p&gt;语言支持是 Wasm 成功的关键因素。随着能够将 Wasm 编译成 Wasm 的新语言的出现，新的开发人员群体可以获得 Wasm 的优势。几乎所有排名前 20 的编程语言都在&lt;a href=&#34;https://www.fermyon.com/wasm-languages/webassembly-language-support&#34; title=&#34;添加 Wasm 支持&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加 Wasm 支持&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在 2022 年，我们看到 Wasm 取得了三个巨大的进步。&lt;a href=&#34;https://pythondev.readthedocs.io/wasm.html&#34; title=&#34;Python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt; 添加了支持。然后是 &lt;a href=&#34;https://www.ruby-lang.org/en/news/2022/12/06/ruby-3-2-0-rc1-released/&#34; title=&#34;Ruby&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ruby&lt;/a&gt;。10 月，一直支持浏览器内的 Wasm 的 .NET 增加了更深入的 Wasm 支持，使其&lt;a href=&#34;https://www.fermyon.com/blog/dotnet-wasi&#34; title=&#34;能够在浏览器之外运行&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;能够在浏览器之外运行&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外三种语言在今年也取得了一些进展，但 2023 年将是这些语言可以使用的一年。这三种语言是 Kotlin、Dart 和当然是世界上最流行的编程语言：JavaScript。&lt;/p&gt;
&lt;p&gt;Kotlin 和 Dart 社区都一直积极参与构建 Wasm 编译目标。但是两者都在等待 Wasm 的一项标准成熟 —— 一项描述垃圾收集的标准，这是语言运行时中的一项功能，允许内存在程序执行时清理。我们的预测是 &lt;a href=&#34;https://github.com/WebAssembly/gc/blob/main/proposals/gc/Overview.md&#34; title=&#34;Wasm-GC 建议书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasm-GC 建议书&lt;/a&gt;将在 2023 年初可用并支持，因此 Kotlin 和 Dart 将很快发布 Wasm 编译器。&lt;/p&gt;
&lt;p&gt;我们的最后一种语言非常重要，因此它值得特别预测。&lt;/p&gt;
&lt;h2 id=&#34;5-javascript-将成为最受欢迎的-wasm-语言&#34;&gt;5. JavaScript 将成为最受欢迎的 Wasm 语言&lt;/h2&gt;
&lt;p&gt;JavaScript 与 Wasm 的关系最为复杂。在最初的设想中，Wasm 与浏览器中的 JavaScript 交互。事实上，Wasm 最初的承诺是，它将延伸浏览器语言支持超出 JavaScript。&lt;/p&gt;
&lt;p&gt;但实际使用情况会使假设渐渐淡化。&lt;/p&gt;
&lt;p&gt;由于 Wasm 在浏览器外，许多开发人员希望能够在任何可以运行 Wasm 的地方运行他们的 JavaScript 代码。最好的方法是使 JavaScript 在 Wasm 运行时内部运行（而不是浏览器中的下方）。在 2022 年，我们看到几个新的 Wasm 项目专注于将 JS 带入新的运行时。这些项目中的大多数使用了一个叫 &lt;a href=&#34;https://bellard.org/quickjs/&#34; title=&#34;QuickJS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QuickJS&lt;/a&gt; 的优秀开源项目。&lt;/p&gt;
&lt;p&gt;QuickJS 有许多优点，其中最重要的是它完全符合最新的 JavaScript 标准。但它不是设计成最快或最强大的 JavaScript 引擎的。它非常易于嵌入，许多早期的 Wasm 项目已经找到了将解释器编译到 Wasm 并在 Wasm 运行时内部运行 JavaScript 的方法。&lt;/p&gt;
&lt;p&gt;但是有一个主流的 JavaScript 运行时正在加入竞争。Mozilla 的 &lt;a href=&#34;https://spidermonkey.dev/&#34; title=&#34;SpiderMonkey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpiderMonkey&lt;/a&gt; 引擎以其性能和健壮性而闻名，正在进入 Wasm 世界。它最著名的用途是在 Mozilla Firefox 浏览器中使用，但也可以在浏览器外使用。作为一个可以不断优化执行的脚本的运行时，SpiderMonkey 引擎将是 Wasm 世界中最快的 JS 引擎。早期数据表明，由于在这种环境中可以进行的优化，JavaScript 在 Wasm 版本的 SpiderMonkey 中运行的速度可能&lt;a href=&#34;https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly&#34; title=&#34;比浏览器中的 JavaScript 快 13 倍&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;比浏览器中的 JavaScript 快 13 倍&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;JavaScript 是世界上最受欢迎的编程语言。随着 QuickJS 和 SpiderMonkey 等 Wasm 运行时的出现，Wasm 的潜力突然对巨大的开发人员社区开放。是的，C 是第一种支持 Wasm 的编程语言。是的，Rust 有相当大的红利。当然，我们也看到 Python 和 Ruby 在行动。但 JavaScript 将像火箭一样冲入 Wasm 宇宙。&lt;/p&gt;
&lt;h2 id=&#34;结论2023-年是-wasm-年&#34;&gt;结论：2023 年是 Wasm 年&lt;/h2&gt;
&lt;p&gt;我对 Wasm 生态系统内将发生什么做出了五个大胆的预测。随着这些里程碑的实现，Wasm 将作为浏览器以外的通用技术变得更加有用。在文章开头，我提出 2023 年有望成为 Wasm 的一年。考虑到这五个预测，很容易看出为什么：新功能、巧妙的用例、与 Docker Hub 的集成以及广泛的语言支持相结合，使得这种对开发人员友好的技术具有巨大的前途。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;Matt Butcher，他是 WebAssembly Cloud 公司 Fermyon 的联合创始人和 CEO。Matt 是 Helm、Brigade、CNAB、OAM、Glide 和 Krustlet 的原始创建者之一。他撰写和合作撰写了许多书籍，包括《学习 Helm》和《Go in Practice》。他是 &amp;ldquo;Kubernetes 插图儿童指南&amp;quot;系列的共同创造者。目前，他主要从事 WebAssembly 项目，如 Spin、Fermyon Cloud 和 Bartholomew。他拥有哲学博士学位，住在科罗拉多州。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>2022 年容器生态系统的 9 大趋势洞察</title>
      <link>https://jimmysong.io/trans/container-insights-2022/</link>
      <pubDate>Mon, 07 Nov 2022 10:16:27 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/container-insights-2022/</guid>
      <description>
        
        
        &lt;p&gt;这项研究建立在 Datadog 以前版本的&lt;a href=&#34;https://www.datadoghq.com/container-report-2021/&#34; title=&#34;容器使用报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器使用报告&lt;/a&gt;、&lt;a href=&#34;https://www.datadoghq.com/container-orchestration-2018/&#34; title=&#34;容器编排报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器编排报告&lt;/a&gt;和&lt;a href=&#34;https://www.datadoghq.com/docker-adoption/&#34; title=&#34;Docker 研究报告&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 研究报告&lt;/a&gt;的基础上。&lt;/p&gt;
&lt;p&gt;现代工程团队继续扩展他们对容器的使用，如今基于容器的微服务应用程序无处不在。不断增长的容器使用正在推动组织采用互补技术来简化他们操作集群的方式，而这种不断扩展的容器环境给组织带来了安全挑战。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在本报告中，我们检查了数万 Datadog 客户&lt;/strong&gt;运行的超过&lt;strong&gt;15 亿个容器&lt;/strong&gt;，以了解容器生态系统的状态。继续阅读，了解从最新的实际使用数据中收集的更多见解和趋势。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“这项调查表明，容器和 Kubernetes 革命正在不断发展壮大。结果揭示了使用容器和 Kubernetes 的云原生组织不仅发展得更快，而且获得了更大的信心——在比以往任何时候都更关键的生产环境中构建和部署更大型的应用程序和工作负载。&lt;/p&gt;
&lt;p&gt;得益于云原生生态系统中超过 175,000 名贡献者所推动的创新，云原生组织已为前进的道路做好了准备。他们正在创造可以让各种规模的工程团队都可以构建和运行应用程序的技术，以满足当今应用程序的需求。”&lt;/p&gt;
&lt;p&gt;— Priyanka Sharma，云原生计算基金会执行董事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;趋势-1kubernetes-继续成为最受欢迎的容器管理系统&#34;&gt;趋势 1：Kubernetes 继续成为最受欢迎的容器管理系统&lt;/h2&gt;
&lt;p&gt;Kubernetes 比以往任何时候都更受欢迎。如今，近一半的容器组织运行 Kubernetes 来在不断发展的生态系统中部署和管理容器。Amazon Elastic Kubernetes Services (Amazon EKS) Blueprints 和 Amazon EKS Anywhere 等工具以及其他托管 Kubernetes 服务使团队可以轻松地在云中和本地运行 Kubernetes 集群。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wbyje5nkj30ku0ce757_hu1112805345294683638.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wbyje5nkj30ku0ce757.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wbyje5nkj30ku0ce757.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;“在 AWS，我们致力于为客户提供简化的 Kubernetes 体验，以便他们可以轻松管理和扩展集群，同时受益于完全托管的 AWS 服务的安全性和弹性。Amazon EKS Blueprints 和 Amazon EKS Anywhere 等新功能使客户能够更快、更轻松地跨 AWS 和本地环境配置和部署 Kubernetes 集群，因此他们可以在任何需要的地方获得相同、一致的 Amazon EKS 体验，以最好地支持他们的应用程序和最终用户。”&lt;/p&gt;
&lt;p&gt;— Barry Cooks，Amazon Web Services Kubernetes 副总裁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;趋势-2无服务器容器技术在所有主要公共云中继续流行&#34;&gt;趋势 2：无服务器容器技术在所有主要公共云中继续流行&lt;/h2&gt;
&lt;p&gt;所有主要云提供商（包括 AWS App Runner、AWS Fargate、Azure Container Apps、Azure Container Instances (ACI) 和 Google Cloud Run）对无服务器容器技术的使用率从 2020 年的 21% 增加到 2022 年的 36%（年初至今）。这与我们在之前的研究中看到的增长相呼应，其中包括 Amazon ECS 用户转向 AWS Fargate。&lt;/p&gt;
&lt;p&gt;客户将减少配置和管理底层基础设施的需求列为容器采用无服务器技术的主要原因之一。那些不使用无服务器技术的客户更喜欢从管理自己的基础架构中获得的控制力和灵活性。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc0jp6mjj30ku0cewff_hu15847146681977651338.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc0jp6mjj30ku0cewff.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wc0jp6mjj30ku0cewff.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;趋势-3多个云提供商的使用随着组织规模的增加而增加&#34;&gt;趋势 3：多个云提供商的使用随着组织规模的增加而增加&lt;/h2&gt;
&lt;p&gt;我们的数据显示，超过 30% 的使用 1,000 台或更多主机的容器组织在多个云中工作，并且组织运行的容器越少，多云使用率最低。此外，我们发现多云组织平均拥有比单云组织更多的容器。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc690cy0j30ku0ce750_hu15946864826546565745.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc690cy0j30ku0ce750.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wc690cy0j30ku0ce750.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;趋势-4kubernetes-ingress-使用率正在上升&#34;&gt;趋势 4：Kubernetes Ingress 使用率正在上升&lt;/h2&gt;
&lt;p&gt;为了大规模管理来自集群外部的请求，管理员经常使用 Ingress 来配置到集群中多个服务的路由。如今，超过 35% 的组织使用 Ingress，自 2020 年 8 月 Kubernetes 1.19 版本发布以来，Ingress 已经普遍可用。&lt;/p&gt;
&lt;p&gt;随着我们的客户操作更多的集群和 Pod，他们在路由和网络管理方面面临着越来越复杂的问题。许多 Kubernetes 的早期采用者使用云提供的负载均衡器将流量路由到他们的服务。但 Ingress 通常更具成本效益，并且自发布以来其采用率稳步提高。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; title=&#34;Kubernetes Gateway API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt;（于 2022 年 7 月完成测试版）是容器网络管理发展的下一步。Gateway API 提供高级网络功能，包括使用自定义资源和使用 API 资源对组织角色建模的面向角色的设计。我们期待看到 Gateway API 是否会取代 Ingress，或者这两种技术是否并排使用。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc8i70cdj30ku0cemxs_hu6134349331553630121.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc8i70cdj30ku0cemxs.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wc8i70cdj30ku0cemxs.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;趋势-5服务网格仍处于早期阶段istio-主导使用&#34;&gt;趋势 5：服务网格仍处于早期阶段，Istio 主导使用&lt;/h2&gt;
&lt;p&gt;服务网格提供服务发现、负载均衡、超时和重试，并允许管理员管理集群的安全性并监控其性能。我们之前的研究说明了服务网格的早期采用，我们看到的初始模式基本上没有变化。在我们的客户中，我们主要看到 Istio 和 Linkerd，其中 Istio 的受欢迎程度是 Linkerd 的三倍多。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc9fn7llj30ku0cewf3_hu10769435947553115440.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wc9fn7llj30ku0cewf3.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wc9fn7llj30ku0cewf3.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;“服务网格已经证明了为企业中的流量提供一致的安全性、可观测性和控制的价值。Istio 已明确将自己确立为领先的网格解决方案，我为社区为实现这一目标所做的工作感到自豪。最近完成的对 CNCF 的 Istio 捐赠将在这一成功的基础上发展壮大我们的社区。”&lt;/p&gt;
&lt;p&gt;——Louis Ryan，Istio 的联合创始人兼谷歌首席工程师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;趋势-6大多数主机使用超过-18-个月的-kubernetes-版本&#34;&gt;趋势 6：大多数主机使用超过 18 个月的 Kubernetes 版本&lt;/h2&gt;
&lt;p&gt;Kubernetes 每年发布三个新版本，为用户提供新功能、安全改进和错误修复。我们在之前的研究中看到，用户通常更愿意等待一年多才能采用这些新版本。我们从轶事中了解到，一些客户延迟的原因是为了确保他们的集群的稳定性和与 API 版本的兼容性。如今，使用最多的版本是 v1.21，它于 2021 年 4 月发布，并于今年早些时候正式过了生命周期终结日。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcb5u0w5j30ku0cemy5_hu292296945437327998.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcb5u0w5j30ku0cemy5.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wcb5u0w5j30ku0cemy5.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;趋势-7超过-30-的运行-containerd-的主机使用不受支持的版本&#34;&gt;趋势 7：超过 30% 的运行 containerd 的主机使用不受支持的版本&lt;/h2&gt;
&lt;p&gt;先前的研究表明 containerd 的使用有所增加，这是组织可以采用的符合 CRI 的运行时之一，因为 Dockershim 正在被弃用。我们发现只有大约 69% 的 containerd 主机使用的是 1.5 或 1.6 版本，这是积极支持的版本。值得注意的是，大约 31% 的 containerd 主机正在使用 1.4 或更早的版本，这些版本已经过了生命周期的终结日。&lt;/p&gt;
&lt;p&gt;运行较旧的软件版本会带来有关安全性和合规性的问题，并且在容器运行时的情况下，会带来容器逃逸等漏洞的风险。许多主机使用不受支持的容器运行时版本这一事实凸显了组织在运行适当的工具以维护容器安全性和合规性方面面临的挑战。无服务器容器技术降低了过时运行时的风险和手动更新的负担，这可能是我们看到所有云都转向无服务器容器的原因之一。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcc9pjexj30ku0ce74y_hu9297096922906586071.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcc9pjexj30ku0ce74y.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wcc9pjexj30ku0ce74y.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;趋势-8访问管理正在改进但仍然是一个挑战&#34;&gt;趋势 8：访问管理正在改进，但仍然是一个挑战&lt;/h2&gt;
&lt;p&gt;Kubernetes 管理员使用基于角色的访问控制 (RBAC) 来允许主体（用户、组或服务账户）访问或修改集群中的资源。根据安全最佳实践，主体应该只有必要的权限，并且管理员在授予与升级风险相关的 RBAC 权限时必须谨慎。其中包括允许主体列出所有机密或创建工作负载、证书或令牌请求的权限，这些请求可以允许他们修改自己的权限。&lt;/p&gt;
&lt;p&gt;好消息是，随着组织部署更多集群，这些集群中使用过度宽松特权的百分比正在下降。我们怀疑随着组织采用权限审计等安全实践和自动化 RBAC 扫描仪等工具，这一数字正在下降。但是，我们发现大约 40% 的集群仍然使用宽松的权限，这会带来安全风险。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcdev59yj30ku0cet9l_hu5740461901553145809.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcdev59yj30ku0cet9l.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wcdev59yj30ku0cet9l.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;趋势-9nginxredis-和-postgres-再次成为最受欢迎的容器镜像&#34;&gt;趋势 9：NGINX、Redis 和 Postgres 再次成为最受欢迎的容器镜像&lt;/h2&gt;
&lt;p&gt;截至 2022 年 9 月，最流行的现成容器镜像是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NGINX：这又是最流行的容器镜像。NGINX 为近 50% 的使用容器的组织提供缓存、负载平衡和代理功能。&lt;/li&gt;
&lt;li&gt;Redis：组织可以在容器中部署 Redis，用作键值数据存储、缓存或消息代理。&lt;/li&gt;
&lt;li&gt;Postgres：这个关系数据库的使用比去年略有增长。&lt;/li&gt;
&lt;li&gt;Elasticsearch：这个高性能的文档存储和搜索引擎仍然是最流行的镜像之一。&lt;/li&gt;
&lt;li&gt;Kafka：组织可以通过在容器中部署 Kafka 轻松地将事件流功能添加到应用程序中。&lt;/li&gt;
&lt;li&gt;RabbitMQ：RabbitMQ 在基于微服务的应用程序中支持解耦架构。&lt;/li&gt;
&lt;li&gt;MongoDB：MongoDB 仍然是最流行的 NoSQL 数据库之一。&lt;/li&gt;
&lt;li&gt;MySQL：这个开源数据库的排名比以前低。但是 MySQL 的性能和可扩展性使其在最流行的容器镜像列表中持续占有一席之地。&lt;/li&gt;
&lt;li&gt;Calico：Calico 是一个网络提供商，让管理员可以管理其 Kubernetes 集群内网络的安全性。&lt;/li&gt;
&lt;li&gt;GitLab：为了帮助团队采用和维护 DevOps 实践，GitLab 提供了存储库管理、问题跟踪和 CI/CD 管道。&lt;/li&gt;
&lt;li&gt;Vault：团队可以使用 Vault 来简化机密管理并帮助维护安全的应用程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcim7nrxj30ku0cedgh_hu12643890304646640527.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wcim7nrxj30ku0cedgh.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wcim7nrxj30ku0cedgh.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;在 Kubernetes StatefulSets 中，我们发现 Redis、Postgres、Elasticsearch、RabbitMQ 和 Kafka 是最常部署的镜像。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wciyjri3j30ku0cet9d_hu1944301267502364044.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/container-insights-2022/008vxvgGgy1h7wciyjri3j30ku0cet9d.jpg&#34; data-img=&#34;/trans/container-insights-2022/008vxvgGgy1h7wciyjri3j30ku0cet9d.jpg&#34; data-width=&#34;750&#34; data-height=&#34;446&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;

      </description>
    </item>
                           
    <item>
      <title>2022 年云和 DevOps 趋势报告</title>
      <link>https://jimmysong.io/blog/cloud-and-devops-trend-2022/</link>
      <pubDate>Thu, 23 Jun 2022 11:27:49 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/cloud-and-devops-trend-2022/</guid>
      <description>
        
        
        &lt;p&gt;近日 InfoQ 发布了 &lt;a href=&#34;https://www.infoq.com/articles/devops-and-cloud-trends-2022/&#34; title=&#34;DevOps and Cloud InfoQ Trends Report – June 2022&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps and Cloud InfoQ Trends Report – June 2022&lt;/a&gt;，因为报告中所覆盖的技术领域过于宽泛，本文仅仅是对这篇报告的一点个人解读。我基本认同我关注的这些技术中「创新者」和「后期大众」阶段技术的划分。&lt;/p&gt;
&lt;h2 id=&#34;报告概括&#34;&gt;报告概括&lt;/h2&gt;
&lt;p&gt;下面这段节选自原文的 takeaways：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据可观测性将帮助企业更好地了解和排除其数据密集型系统的故障。&lt;/li&gt;
&lt;li&gt;云原生应用采用无服务器和分布式 SQL 数据库的情况也越来越多。&lt;/li&gt;
&lt;li&gt;FinOps 将走向成熟。&lt;/li&gt;
&lt;li&gt;eBPF 和 WASM 是令人振奋的新技术，它们被用来在服务网格内开启可观测性、监控和安全的新方法。我们认为这处于创新者阶段。&lt;/li&gt;
&lt;li&gt;低代码或无代码平台继续成熟，特别是用于内部工具和自动化用途。&lt;/li&gt;
&lt;li&gt;我们还看到「开发者体验作为决策驱动力」的趋势得到了更多的关注，特别是在云平台领域。「平台工程师」的角色正在许多规模的组织中出现，以支持相关平台抽象、API 和工具的建设。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;报告解读&#34;&gt;报告解读&lt;/h2&gt;
&lt;p&gt;这篇报告为什么命名为「DevOps 和云」我就不太清楚了，我觉得把名字换成「云计算」、「云原生」也是可以的，可能是为了延续之前的报告风格吧，毕竟 InfoQ 已经推出过很多期此类报告了。这类报告都是根据「鸿沟理论」将当前流行的技术分成以下阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者&lt;/li&gt;
&lt;li&gt;早期采用者&lt;/li&gt;
&lt;li&gt;早期大众&lt;/li&gt;
&lt;li&gt;后期大众&lt;/li&gt;
&lt;li&gt;落后者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 InfoQ 的报告中没有「落后者」这个阶段。&lt;/p&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    什么是鸿沟理论？
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    鸿沟理论指的就是高科技产品在市场营销过程中遭遇的最大障碍：高科技企业的早期市场和主流市场之间存在着一条巨大的鸿沟，能否顺利跨越鸿沟并进入主流市场，成功赢得实用主义者的支持，就决定了一项高科技产品的成败。实际上每项新技术都会经历鸿沟。关键在予采取适当的策略令高科技企业成功地“跨越鸿沟”，摩尔在这本书中就告诉了人们一些欠经考验的制胜秘诀。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;下图展示的是跨越鸿沟理论中不同阶段人群的分类及占比。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/chasm_hu5927790780296627922.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/chasm.jpg&#34; data-img=&#34;/blog/cloud-and-devops-trend-2022/chasm.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;900&#34; alt=&#34;image&#34; data-caption=&#34;跨越鸿沟理论中不同阶段人群的分类及占比&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;跨越鸿沟理论中不同阶段人群的分类及占比&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们来看下 InfoQ 6 月新出的「云和 DevOps」趋势报告。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/infoq_hu12333247981050968664.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/blog/cloud-and-devops-trend-2022/infoq.jpg&#34; data-img=&#34;/blog/cloud-and-devops-trend-2022/infoq.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;841&#34; alt=&#34;image&#34; data-caption=&#34;软件开发云和 DevOps 趋势图（2022 年 6 月）&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;软件开发云和 DevOps 趋势图（2022 年 6 月）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;我们可以看到像低代码、eBPF、Data Mesh、WASM 已经出现在创新者视线里了。Service Mesh 还在「早期采用者」阶段，这点比我预想的要慢好多，我以为服务网格已经跨越鸿沟了，你觉得呢？&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>疫情期间欧洲 IT 民工招聘趋势报告解读，DevOps、AI 和平台工程师最高年薪 9 万欧</title>
      <link>https://jimmysong.io/trans/europoe-it-hiring-report-2021/</link>
      <pubDate>Fri, 20 Aug 2021 10:05:42 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/europoe-it-hiring-report-2021/</guid>
      <description>
        
        
        &lt;h2 id=&#34;译者评论&#34;&gt;译者评论&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lhy8vkj60hj09ijsq02_hu16592250969416946813.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lhy8vkj60hj09ijsq02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lhy8vkj60hj09ijsq02.jpg&#34; data-width=&#34;631&#34; data-height=&#34;342&#34; alt=&#34;image&#34; data-caption=&#34;官方钦定：码农属于新生代农民工如今不再是程序员的调侃了&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;官方钦定：码农属于新生代农民工如今不再是程序员的调侃了&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;最近在社区里看到很多人在讨论国家开始不给大型互联网企业减税，互联网公司股价普跌，大部分距离年内最高点腰斩，个人所得税成为工薪税，程序员被划归为”新生代农名工“，”贫贱不能移“等话题。让我们一起来看看欧洲的 IT 招聘趋势还有薪资水平，是否国外的月亮就是圆呢？&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lkeyaqj610q0u0mzs02_hu7894145123513403340.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lkeyaqj610q0u0mzs02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lkeyaqj610q0u0mzs02.jpg&#34; data-width=&#34;1000&#34; data-height=&#34;817&#34; alt=&#34;image&#34; data-caption=&#34;昨天在社区群里传的一张「北京市运维工程师薪资水平」&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;昨天在社区群里传的一张「北京市运维工程师薪资水平」&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;报告解读&#34;&gt;报告解读&lt;/h2&gt;
&lt;p&gt;尽管新冠疫情正在逐渐消退，但其影响仍将持续一段时间。本文衡量了疫情对欧洲科技企业招聘的影响，展露了欧洲科技招聘的新趋势。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国家的经济规模不断扩大&lt;/li&gt;
&lt;li&gt;欧洲国家的失业率保持稳定&lt;/li&gt;
&lt;li&gt;招聘活动增加&lt;/li&gt;
&lt;li&gt;软件开发人员、程序员的需求量更大&lt;/li&gt;
&lt;li&gt;雇主寻求全面发展的技术人才&lt;/li&gt;
&lt;li&gt;雇主要求软技能作为主要技能的一部分&lt;/li&gt;
&lt;li&gt;39% 的招聘信息寻求具有 0-2 年经验的专业人士&lt;/li&gt;
&lt;li&gt;薪资范围从 36000 到 90000 欧元&lt;/li&gt;
&lt;li&gt;德国和法国在科技人员招聘方面领先&lt;/li&gt;
&lt;li&gt;信息和通信业、制造业引领科技招聘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在所有行业中，2020 年是一个促进招聘的年份，迫使招聘团队修改和改进他们的人才招聘模式，以满足对技术人才不断增长的需求，特别是在科技行业。与许多其他经济体一样，欧洲经济经历了疫情的冲击，并正在迅速从其影响中恢复。&lt;/p&gt;
&lt;p&gt;利用&lt;a href=&#34;https://www.burning-glass.com/?ref=thechiefio&#34; title=&#34;Burning Glass&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Burning Glass&lt;/a&gt;汇总的雇主职位发布数据，CompTIA 开发了&lt;a href=&#34;https://comptiacdn.azureedge.net/webcontent/docs/default-source/research-reports/comptia-european-tech-hiring-trends---q2-2021-release.pdf?sfvrsn=c441f76b_2?ref=thechiefio&#34; title=&#34;欧洲科技企业招聘趋势&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;欧洲科技企业招聘趋势&lt;/a&gt;，涵盖了 2020 年第一季度欧洲国家的科技招聘活动。该报告调查了十个欧洲国家。比利时、荷兰、捷克、波兰、法国、葡萄牙、德国、罗马尼亚、意大利和西班牙，将 2021 年第一季度的招聘活动与 2020 年进行比较，以衡量科技行业从 2020 年的衰退中恢复的程度。&lt;/p&gt;
&lt;p&gt;本文重述了这份报告，并强调了关键的发现，以帮助雇主、专业人士和科技界利益相关者了解欧洲科技就业市场的招聘趋势。&lt;/p&gt;
&lt;h2 id=&#34;国家的经济规模不断扩大&#34;&gt;国家的经济规模不断扩大&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lipq9aj60b40cvq3f02_hu2688826266538768310.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lipq9aj60b40cvq3f02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lipq9aj60b40cvq3f02.jpg&#34; data-width=&#34;400&#34; data-height=&#34;463&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;图片来源：https://comptiacdn.azureedge.net/webcontent/docs/default-source/research-reports/comptia-european-tech-hiring-trends&amp;mdash;q2-2021-release.pdf&lt;/p&gt;
&lt;p&gt;众所周知，新冠疫情在 2020 年对全球经济产生了破坏性影响。随着欧洲各国封锁的缓解，经济开始逐渐回升，商业活动重新活跃起来。预计西班牙的经济增长将达到 6.4%，为 11980 亿；罗马尼亚为 6.0%，为 2370 亿；法国为 5.8%，为 24090 亿；意大利和捷克分别为 4.2%，为 17270 亿和 2260 亿。其他预测增长缓慢的国家包括比利时（4.0%，4750 亿）、葡萄牙（3.9%，2110 亿）、德国（3.6%，35420 亿）、荷兰和波兰预测各 3.5% 的经济增长。&lt;/p&gt;
&lt;h2 id=&#34;欧洲国家的失业率保持稳定&#34;&gt;欧洲国家的失业率保持稳定&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lfrhmaj60bz0cldgb02_hu6823603249253533978.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lfrhmaj60bz0cldgb02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lfrhmaj60bz0cldgb02.jpg&#34; data-width=&#34;431&#34; data-height=&#34;453&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;图片来源：https://comptiacdn.azureedge.net/webcontent/docs/default-source/research-reports/comptia-european-tech-hiring-trends&amp;mdash;q2-2021-release.pdf&lt;/p&gt;
&lt;p&gt;与美国等其他国家相比，欧洲国家的失业率在新冠疫情的高峰期保持相对稳定，只有西班牙在 2020 年的失业率超过 15%。&lt;/p&gt;
&lt;p&gt;然而，尽管失业率稳定，经济活动的放缓导致整个欧洲国家的招聘活动放缓。&lt;/p&gt;
&lt;h2 id=&#34;招聘活动的增加&#34;&gt;招聘活动的增加&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lgf2mqj60bk0bv0t102_hu17944551116240463545.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lgf2mqj60bk0bv0t102.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lgf2mqj60bk0bv0t102.jpg&#34; data-width=&#34;416&#34; data-height=&#34;427&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;在从疫情和招聘活动放缓的影响中恢复，2021 年第一季度的招聘活动比 2020 年第四季度恢复了 9%，比 2020 年第三季度增加了 40%。2021 年第一季度，技术职位的发布经历了一个新高，超过 90 万个职位发布，而 2020 年第一季度为 60 万个，2020 年第二季度约为 40 万个，2020 年第三季度和第四季度分别超过 60 万个和约 80 万个。&lt;/p&gt;
&lt;h2 id=&#34;软件开发人员程序员的需求量更大&#34;&gt;软件开发人员、程序员的需求量更大&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7ljnvhoj60c30bx75202_hu7879138119149576797.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7ljnvhoj60c30bx75202.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7ljnvhoj60c30bx75202.jpg&#34; data-width=&#34;435&#34; data-height=&#34;429&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;在接受调查的十个欧洲国家中，软件开发人员、系统分析师和网络安全、系统管理员、网络开发人员、IT 专家、数据库、网络和应用程序员是招聘活动最多的技术职位。在 2021 年第一季度，有 249,017 个软件开发人员的招聘信息，231,464 个系统分析师和网络安全的招聘信息，以及超过 84,000 个系统管理员的招聘信息。进一步证实了技术的相互关联性，其他职业，如 IT 支持专家和技术员，IT 经理和首席信息官，应用程序员，数据库和网络人员的需求也很大。&lt;/p&gt;
&lt;h2 id=&#34;雇主寻求全面发展的技术人才&#34;&gt;雇主寻求全面发展的技术人才&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lklpyrj60bt0akjrq02_hu14717447589423156264.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lklpyrj60bt0akjrq02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lklpyrj60bt0akjrq02.jpg&#34; data-width=&#34;425&#34; data-height=&#34;380&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;随着技术的不断扩展和新范围、工具、硬件和方法的出现，对工作要求的分析表明，雇主对了解广泛技术技能的候选人更感兴趣。以软件开发人员的职位为例，一个典型的雇主更喜欢具有多种编程语言经验的候选人，具有网络安全知识，至少有一个云平台，并熟悉&lt;a href=&#34;https://thechief.io/c/editorial/demystifying-the-devops-career/&#34; title=&#34;DevOps 流程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps 流程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;办公室/电子表格、编程/面向对象的编程、商业IT系统、SQL、数据库和统一建模语言是技术职位招聘中最受欢迎的一些技术技能。&lt;/p&gt;
&lt;h2 id=&#34;雇主要求软技能作为主要技能的一部分&#34;&gt;雇主要求软技能作为主要技能的一部分&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lgvkm4j60b20aj74l02_hu16252856678998799598.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lgvkm4j60b20aj74l02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lgvkm4j60b20aj74l02.jpg&#34; data-width=&#34;398&#34; data-height=&#34;379&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;商业和软技能在技术岗位上不再被视为次要。招聘信息显示了这一点，技术雇主认为软技能，如批判性思维、团队合作、解决问题、项目和时间管理，与技术技能同等重要。&lt;/p&gt;
&lt;h2 id=&#34;39-的招聘信息寻求具有-0-2-年经验的专业人士&#34;&gt;39% 的招聘信息寻求具有 0-2 年经验的专业人士&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lhbac6j60dr07nglu02_hu11659907771874371042.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lhbac6j60dr07nglu02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lhbac6j60dr07nglu02.jpg&#34; data-width=&#34;495&#34; data-height=&#34;275&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;虽然现在大多数科技雇主根据专业知识、技能和业绩进行招聘，但在科技岗位招聘中，工作年限仍然是一个决定性的标准。在 2021 年第一季度，雇主寻求更多具有 0-2 年经验的初级专业人士。2021 年第一季度，14% 的科技职位招聘要求有 3-10 年的经验，11% 要求有 11 年以上的经验，而 36% 没有明确要求的经验年限。&lt;/p&gt;
&lt;h2 id=&#34;薪资范围从-36000-到-90000-欧元&#34;&gt;薪资范围从 36000 到 90000 欧元&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7ll8kkij60ep07ejrq02_hu603890135606586653.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7ll8kkij60ep07ejrq02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7ll8kkij60ep07ejrq02.jpg&#34; data-width=&#34;529&#34; data-height=&#34;266&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;雇主提供的工资在 36,000 左右，主要是针对初级职位的招聘信息，不包括其他副业收入。随着专业知识水平、工作年限和工作地点的不同，技术类职位的&lt;a href=&#34;https://thechief.io/c/editorial/salary-trends-for-devops-and-cloud-native-professionals/&#34; title=&#34;基本工资&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基本工资&lt;/a&gt;最高可达 9 万，不包括其他补偿和奖金。与疫情之前的时期相比，&lt;strong&gt;一些技术角色，如&lt;a href=&#34;https://thechief.io/c/news/devops-pros-salary-rise-despite-effect-pandemic/&#34; title=&#34;DevOps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps&lt;/a&gt;、平台工程师和 AI 工程师的工资在疫情之后也有所增加。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;德国和法国在科技人员招聘方面领先&#34;&gt;德国和法国在科技人员招聘方面领先&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lj87wyj60dc07djri02_hu11453841230294399712.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lj87wyj60dc07djri02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lj87wyj60dc07djri02.jpg&#34; data-width=&#34;480&#34; data-height=&#34;265&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;尽管比 2020 年第四季度减少了 4%，但德国在 2021 年第一季度以 421,109 名科技人员的招聘数在所有被调查的十个国家中处于领先地位。法国紧随其后，与 2020 年第四季度相比，增加了 16%，即 121,863 人，而波兰则以 105,921 人的科技人员招聘数紧随其后，与 2020 年第四季度相比，增加了 37%。意大利和荷兰在 2021 年第一季度也分别经历了 50%（60,082 人）和 43%（53,313 人）的技术招聘激增。&lt;/p&gt;
&lt;h2 id=&#34;信息和通信业制造业引领科技招聘&#34;&gt;信息和通信业、制造业引领科技招聘&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lg1qukj60ce066wen02_hu427992446942499023.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lg1qukj60ce066wen02.jpg&#34; data-img=&#34;/trans/europoe-it-hiring-report-2021/008i3skNly1gtn7lg1qukj60ce066wen02.jpg&#34; data-width=&#34;446&#34; data-height=&#34;222&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;随着各组织转向技术，以缓解疫情的影响并增加业务增长，信息和通信行业在招聘技术职位方面处于领先地位。其他行业，如制造业，物流和支持服务，专业、科学和技术服务，以及金融和工业行业也是招聘技术职位的主要行业之一。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>从 Gartner 的 2021 年云安全炒作周期报告中得到的启示</title>
      <link>https://jimmysong.io/trans/takeaways-from-gartners-2021-hype-cycle-for-cloud-security-report/</link>
      <pubDate>Sun, 15 Aug 2021 17:05:42 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/takeaways-from-gartners-2021-hype-cycle-for-cloud-security-report/</guid>
      <description>
        
        
        &lt;p&gt;Gartner 在该集团的最新预测中称，2021 年全球公有云服务将增长 26.2%，见 Forecast: Public Cloud Services, Worldwide, 2019-2025, 2Q21 Update。&lt;/p&gt;
&lt;p&gt;2020 年，云计算使 IT 路线图和计划不断向前推进，同时支持不断增长的虚拟劳动力和破纪录的数字转型步伐。麦肯锡对全球高管的调查发现，数字化转型的步伐在 2020 年加快了 7 年。&lt;/p&gt;
&lt;p&gt;此外，61% 的企业将云计算作为其数字化转型工作的一部分，其收入增长了 25% 或更多。云基础设施还使 IT 部门能够满足新的应用程序和系统的紧迫的上市时间表。然而，当云基础设施为应对不可预测的工作负载而扩大和缩小规模时，IT 怀疑论者变成了信徒，而之前的预测数据又无法依赖。&lt;/p&gt;
&lt;p&gt;Gartner 引述了疫情之后企业对云计算的加速采用，预计这将推动五年的复合年增长率（CAGR）达到 21.5%。因此，全球公有云服务预计将从 2021 年的 3877 亿美元增长到 2025 年的 8055 亿美元。到 2023 年，所有企业工作负载的 70% 将部署在云基础设施和平台服务中，而 2020 年为 40%。&lt;/p&gt;
&lt;h2 id=&#34;复杂度等同于风险&#34;&gt;复杂度等同于风险&lt;/h2&gt;
&lt;p&gt;企业的云计算复杂性越大，网络安全风险也越大。云在企业中的主导地位带来了更复杂的网络安全风险和更多的潜在危险，需要相应的更高级别的安全技术。企业的云计算基础设施越复杂，其安全挑战就越大。Gartner 预测，到 2025 年，超过 99% 的云计算漏洞将被追溯到终端用户可预防的错误配置。Gartner 的最新云安全报告反映了企业在所有业务线和基础设施层面采用云优先战略的进展。&lt;/p&gt;
&lt;p&gt;最新的 Hype Cycle 介绍了 29 项技术，比去年的 33 项有所减少。Gartner 已经删除了云安全评估、云测试工具和服务、灾难恢复即服务（DRaaS）、以文件为中心的身份证明、OAuth 2.0 和 OpenID Connect。多云管理服务（MCMS）是今年炒作周期的一个新类别，以前被称为云服务代理（CSB）。Gartner 将 CSB 定义为一种 IT 角色和商业活动，其中公司或内部实体为一个或多个（公有或私有）云服务增加价值。&lt;/p&gt;
&lt;h2 id=&#34;主要启示&#34;&gt;主要启示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云原生应用保护平台（CNAPP）是今年炒作周期的新产品。CNAPP 通过整合多种云原生工具和数据源，包括基础设施即代码（IaC）扫描，帮助保护云原生应用。随着几乎所有的企业都在向多云战略迁移，公有云的部署速度继续加快，并将最终超过私有数据中心的工作负载。Gartner 创建新类别的逻辑是跟踪多云部署的主导地位如何迫使企业结合智能自动化，包括云安全态势管理（CSPM）和云工作负载保护平台（CWPP），以保护其 IaaS 部署的应用程序。&lt;/li&gt;
&lt;li&gt;安全服务边缘（SSE）也是今年炒作周期的新内容。虚拟劳动力、数字优先的销售、服务和客户体验正在推动安全服务边缘（SSE）技术的采用。事实证明，SSE 技术和解决方案能够有效降低保护端点的复杂性，同时在企业范围内提高云服务的安全性。SSE 通过访问控制、威胁保护、数据安全、安全监控和基于网络和 API 的集成执行可接受的使用控制来提供改进的端点安全，我们看到 SSE 正在快速增长，并作为基于云的服务提供，少数供应商也提供企业内部和基于代理的组件作为其架构的一部分。据 Gartner 称，基于身份和背景的零信任、最少特权的访问是领先的 SSE 产品的核心能力。今年，SSE 也出现在网络安全和应用安全的炒作周期中。&lt;/li&gt;
&lt;li&gt;支持虚拟工作团队的挑战正在推动云安全的创新。此外，企业对其虚拟工作团队的依赖性增加，为云网络安全供应商提高新产品开发的强度和速度创造了机会。Gartner 认为，这种态势推动了对 SaaS 安全态势管理（SSPM）、增强型身份保护工具（云交付的 IAM）和零信任网络访问（ZTNA）等领域的改进工具和创新需求，以取代传统的 VPN 技术。&lt;/li&gt;
&lt;li&gt;IT、安全和风险管理领导人今年优先考虑企业数字资产管理（EDRM）和能够消除错误配置的云工具。Gartner 认为，EDRM，也被称为信息权利管理（IRM），为敏感数据提供持久的保护，其中知识产权是公司高管的首要关注点。EDRM 还用于保留对通过伙伴关系在安全协作工作流程中传输的非结构化数据的控制。此外，IT 领导人正在寻找新的工具，以减少并可能消除云的错误配置，因为许多人在内部安全审计的基础上发现了新的改进领域。&lt;/li&gt;
&lt;li&gt;在过去的一年里，向 Gartner 提出的关于 CIEM 的询问增加了一倍多。据 Gartner 称，云基础设施权利管理（CIEM）工具帮助企业通过管理时间控制来管理混合和多云 IaaS 中的权利，从而管理云访问风险。CIEM 平台还依靠分析、机器学习和人工智能来识别账户定义和权限中的异常情况。CIEM 对于零信任网络访问（ZTNA）战略是不可或缺的，因为它提供了最小特权访问的执行和补救。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Gartner 最新的云安全炒作周期反映了当前疫情对网络安全领域秩序重建是多么迅速。IT、风险和管理专业人员最关心的是如何保持他们的知识产权（IP）的安全，并减少错误配置云基础设施的情况。内部审计对错误配置如何导致云基础设施的安全漏洞提供了宝贵的见解，特别是在混合云配置中。&lt;/p&gt;
&lt;p&gt;现在有很多机会来确保虚拟劳动力的安全，同时保护数字化转型战略取得成功所必需的混合和多云基础设施。这种压力给网络安全厂商带来了新的创新强度。这种强度体现在云原生应用保护平台（CNAPP）和安全服务边缘（SSE）在今年的云安全炒作周期中所起的关键作用。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>社区不等于营销——为什么我们要社区化，而不仅是市场化？</title>
      <link>https://jimmysong.io/trans/community-marketing-why-we-need-go-to-community-not-just-go-to-market/</link>
      <pubDate>Fri, 18 Jun 2021 08:05:42 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/community-marketing-why-we-need-go-to-community-not-just-go-to-market/</guid>
      <description>
        
        
        &lt;h2 id=&#34;译者注&#34;&gt;译者注&lt;/h2&gt;
&lt;p&gt;本文作者 &lt;a href=&#34;https://twitter.com/patrickjwoods&#34; title=&#34;Patrick Woods&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Patrick Woods&lt;/a&gt; 是 Orbit 公司的创始人和 CEO。&lt;a href=&#34;https://orbit.love/&#34; title=&#34;Orbit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Orbit&lt;/a&gt; 是一个 SaaS 服务，可以为你的社区提供任务控制，在任何平台上发展和衡量你的社区。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/firstround/status/1207335261685702656&#34; title=&#34;有人说&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有人说&lt;/a&gt;社区是新的&lt;a href=&#34;https://a16z.com/2016/03/07/network-effects_critical-mass/&#34; title=&#34;护城河&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;护城河&lt;/a&gt;，这是真的：拥有一个社区有助于防止竞争对手的公司或产品进入你的领域。无论这个社区是一群强大的用户、开源贡献者、创造者，甚至只是一个品牌（或特许经营）的超级粉丝，它都能带来更大的品牌知名度、更高的转换成本和规模经济。&lt;/p&gt;
&lt;p&gt;在今天的市场上，买家有无尽的选择，所以公司不能只依靠功能和价格来赢得商业。这就是为什么像 Figma、Lululemon、Salesforce、Sephora 和 Twilio 这样的公司 —— 从开发者平台和 CRM 到消费者品牌 —— 都把社区放在他们战略的首位。还有无数其他公司的例子，他们也有社区，即使他们还没有积极地参与其中。&lt;/p&gt;
&lt;p&gt;不过，社区的好处不仅仅是捍卫自己的行业地位。在当今&lt;a href=&#34;https://orbit.love/blog/software-is-no-longer-sold-its-adopted&#34; title=&#34;软件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;软件&lt;/a&gt;不再被出售，而是被采用的世界里，比以往任何时候都有更多的公司正在拥抱他们以前所忽视的客户、贡献者和粉丝。但是，虽然他们中的一些人确实认识到了社区在他们的 Go To Market（市场化，下文中简称 &lt;code&gt;GTM&lt;/code&gt;）中的重要性，但我在这里要更进一步，认为他们需要一种相关但不同的能力：Go To Community（社区化，下文中简称 &lt;code&gt;GTC&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;在我与早期 B2B 公司、大型开源项目和全球消费者品牌的领导人进行的数百次对话中，所有试图定义或建立社区项目的人都清楚，通往社区的道路充满了危险。投资不足，缺乏内部协调，以及对社区本质的误解，导致许多公司在尝试了社区项目后又迅速关闭。但我所看到的最大挑战是，他们缺少一个 GTC 的战略。太多关于社区的讨论都集中在高层次的概念（如移情和归属感）或社区管理的战术方面（如职位或渠道）。&lt;/p&gt;
&lt;p&gt;那么，当我们考虑到 GTC，并使社区成为公司的一流能力时，会发生什么变化？&lt;/p&gt;
&lt;h2 id=&#34;什么是社区&#34;&gt;什么是社区？&lt;/h2&gt;
&lt;p&gt;“自下而上“的市场策略和以产品为主导的增长正在改变游戏规则，迫使企业在销售和其他方面重新思考以漏斗为重点的传统流程。在过去的世界里，软件工具被强加给没有什么发言权的工人，而在这个世界里，购买力已经分散；用户对工作产品的期望和对个人应用的期望一样高；付费墙和“给我们打电话“的定价已经被试用、免费层级和自助服务所取代。&lt;/p&gt;
&lt;p&gt;那么，社区的作用在哪里？强大的 GTC 能力不仅可以帮助公司在这个新环境中积极主动地竞争，而且还可以提供框架和工具，从自上而下转向自下而上。GTC 有助于建立超越销售的正和关系。也许最重要的是，它将社区的概念从纯粹的以公司为中心和交易性的东西（例如，“有利于转移支持票”）提升到影响组织的每个部分。&lt;/p&gt;
&lt;p&gt;换句话说，社区可以成为整个企业的力量倍增器。&lt;/p&gt;
&lt;p&gt;但首先，我说的“社区”是什么意思？这个词可以有很多含义 —— 一个支持论坛、一个网络小组、一个开源项目，甚至一个体育迷的部落都可以被视为社区。一个更有用的分类法是将社区分为以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;产品社区&lt;/strong&gt; ：这些社区的成员主要专注于讨论和学习特定的产品，比如丝芙兰的 &lt;a href=&#34;https://community.sephora.com/&#34; title=&#34;Beauty Insiders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beauty Insiders&lt;/a&gt;，Twilio 的 &lt;a href=&#34;https://www.twilio.com/champions&#34; title=&#34;Champions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Champions&lt;/a&gt; 计划，或者 Salesforce 的 &lt;a href=&#34;https://trailblazers.salesforce.com/&#34; title=&#34;Trailblazers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trailblazers&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实践社区&lt;/strong&gt; ：成员都是为了提高一个学科或工艺的水平，并与其他从业者联系，不受任何工具或平台影响。这方面的例子包括基于群组的学习社区 &lt;a href=&#34;https://www.beondeck.com/&#34; title=&#34;On Deck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;On Deck&lt;/a&gt;，或设计社区，如 &lt;a href=&#34;https://dribbble.com/&#34; title=&#34;Dribbble&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dribbble&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;游戏社区&lt;/strong&gt;：这一类的成员围绕共同的兴趣走到一起，如体育、游戏、竞技、艺术等等。可以想想 Discord 上的游戏社区，或 NBA 顶级球星。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们还可以更多不同的社区划分，但上述划分的关键&lt;a href=&#34;https://orbit.love/blog/classifying-communities-with-the-3ps-product-practice-and-play&#34; title=&#34;区别&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;区别&lt;/a&gt;是什么激励了社区成员？这个问题涉及到社区聚集的核心原因，这种理解将影响公司与这些社区成员的互动方式。请注意，他们互动或聚集的具体渠道 —— 论坛、Facebook 群组、个人聚会、Slack 群组，这些都没有社区的基本动机重要。渠道本身只是社区聚会地点的一种战术表现。&lt;/p&gt;
&lt;p&gt;还有一个方面是你信任谁，Corinne Riley 将其&lt;a href=&#34;https://corinneriley.medium.com/community-led-growth-the-product-led-growth-expansion-pack-b474ab9a7940&#34; title=&#34;区分&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;区分&lt;/a&gt;为在寻求指导或作出决定时信任销售人员（在销售驱动的世界中）、信任自己（在产品主导的世界中）或信任同行 / 朋友的社区（在社区主导的成长世界中）。正如我们将看到的，建立信任是 GTC 的一个基本要素。&lt;/p&gt;
&lt;p&gt;我在这篇文章中提供的大多数思维方式都集中在围绕特定公司或品牌形成的、与之相关的或由其赞助的社区。这些社区往往融合了产品和实践社区的动机 —— 你可以想象 Photoshop 社区的成员讨论 Photoshop 本身，以及设计趋势和原则，但下面分享的思维方式也可以帮助其他类型的社区。&lt;/p&gt;
&lt;h2 id=&#34;gtc-vs-gtm-对社区化和市场化的关注&#34;&gt;GTC vs GTM—— 对社区化和市场化的关注&lt;/h2&gt;
&lt;p&gt;每个企业都有一个 GTM 的战略，以指导他们的细分市场、目标定位、定价和包装、分销等等，他们的 GTM，从字面上看是这样的，然而，当涉及到他们公司的社区战略时，他们却没有采用任何接近这种水平的严格和纪律…… 即使上述社区对他们的业务至关重要。&lt;/p&gt;
&lt;p&gt;很多时候，公司把社区看作是一个很好的东西，是 GTM 工作的一个附加部分。在这种方法中，社区项目不是被提升到一个具有独特影响力的角色，而是经常被其他团队的目标所收编，并被期望影响核心业务成果。但是，商业指标的视角并不是看待社区成功的最好或唯一的方式。&lt;/p&gt;
&lt;p&gt;对于试图建立社区的公司来说，这是一个太过常见的失败案例。当公司把他们对社区活动的概念限制在“漏斗顶部 &amp;quot; 时 —— 我经常听到“社区 = 营销”，这意味着衡量社区成功的唯一方法是通过产生的线索或驱动的意识等指标，尽管其影响远远超出这些。我认为人们真正的意思是，“有时社区经理坐在营销部门里面，他们的活动看起来就像其他的意识生成战术”。&lt;/p&gt;
&lt;p&gt;它们在外表上看起来很相似，但社区和营销有不同的投入和产出。这就是为什么 GTC 的战略和战术应该被看作是它自己的系统，有它自己的过程、结果和不同于“走向市场“战略的激励机制。通过区分经典的 GTM 和 GTC 的概念，企业领导人不仅可以更准确地推理出社区在公司整体战略中的作用，还可以更有意识地界定哪些团队在为哪些成果而努力。&lt;/p&gt;
&lt;p&gt;例如，优化销售线索流程（在 GTM 项目中很典型）与举办聚会和创建教育内容（在 GTC 项目中很关键）是完全不同的 —— 然而今天，这些活动往往被归入同一个团队和战略，导致出现这样的情况：收入主管可以为聚会项目定义目标，或者公司将社区经理雇用到营销组织中，然后根据该团队中其他人的目标来衡量他们的成功。这些都是常见的失败模式。&lt;/p&gt;
&lt;p&gt;GTC 的结果需要通过社区本身的增长和保留来衡量，也需要通过不太明显但同样重要的品质来衡量，比如新关系的数量，发展的信任度，甚至是自我实现的程度。激励措施是一切的基础；“给我看激励措施，我就给你看结果”（引用查理・芒格的话）。&lt;strong&gt;GTM 和 GTC 战略中激励机制的关键区别可以概括为价值获取与价值创造之间的区别。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一切的逻辑含义是，GTC 和 GTM 之间的关系是协同的，而不是同义的。社区必须被视为一个独立的组织实体，有自己的举措和自己的人。但是，在社区和公司的其他部分之间也需要有可渗透的边界，这样社区就不会自生自灭，孤立无援，与业务没有联系。&lt;/p&gt;
&lt;h2 id=&#34;从漏斗到中心&#34;&gt;从漏斗到中心&lt;/h2&gt;
&lt;p&gt;经典的“漏斗”比喻定义了大多数 GTM 的策略。它专注于优化流程的每一步 —— 从认识和发现到评估、参与、转换 / 销售、忠诚度和宣传 —— 通过线性推送线索，在每个阶段提取价值。另一方面，社区并不是要把人们推向一个二元的终点，而是要创造一个非常有吸引力的环境，自然地吸引人们走向它的中心。&lt;/p&gt;
&lt;p&gt;换句话说，健康和活跃的社区有&lt;strong&gt;引力&lt;/strong&gt;一个“高引力 &amp;quot; 的社区是一个擅长吸引和保留社区成员的社区。社区战略是帮助建立和维持这种引力，同时将利益与公司目标联系起来。而且，对公司来说，有各种各样的好处。&lt;/p&gt;
&lt;h2 id=&#34;社区资产可以帮助推动认知采用和留存&#34;&gt;社区资产可以帮助推动认知、采用和留存&lt;/h2&gt;
&lt;p&gt;社区现在是”&lt;a href=&#34;https://orbit.love/blog/community-is-the-new-presales&#34; title=&#34;新的售前&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;新的售前&lt;/a&gt;&amp;quot;。更多的非雇员愿意在你的博客上发表客座文章，导致更多的思想领导力材料，从而推动知名度的提高。在社会上，现有用户与潜在用户交谈，导致有机的自我鉴定和异议处理，从而影响到用户的获取。如果你的社区有一个论坛，你的产品的用户以及潜在用户都聚集在这里，他们会自然地分享想法和最佳实践，有经验的用户会向新用户伸出援手。在这种情况下，成功的用户与陷入困境的用户交谈，导致了社区主导的支持讨论，这反过来又导致了产品采用和保留的改善。&lt;/p&gt;
&lt;p&gt;因此，一个参与社区的产出是对以产品为主导的 GTM 的完美补充。&lt;/p&gt;
&lt;p&gt;这里还有一个单独但相关的好处：增加社区成员和公司员工之间的信任。当员工围绕着为社区创造价值而保持一致时，他们就可以把精力放在正和互动上，做对每个人最有利的事情，而不是像产生的线索这样的目标。社区经理的角色是倾听、学习和联系成员，有时，适当的经验是介绍给销售人员。当时间到了，信任也建立起来了，这个潜在客户就会进入漏斗，与另一个线索来源相比，它更有资格，也更晚进入。&lt;/p&gt;
&lt;h2 id=&#34;社区可以降低-gtm-战略的风险&#34;&gt;社区可以降低 GTM 战略的风险&lt;/h2&gt;
&lt;p&gt;社区中出现的对话、内容和联系，揭示了对他们来说什么是重要的，他们在什么地方挣扎，他们需要什么来取得成功，以及在他们的世界中什么是重要的。如果你关注社区并与社区中的人交谈，你就会有一个明确的观点，可以使你公司中的其他人有能力以坚定和清晰的方式行事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但关键是将这些洞察力真正反馈到公司。&lt;/strong&gt; GTC 战略有助于将这些洞察力从社区反馈给产品、市场和销售团队。更好的是，这些见解是由社区更“自然的声音”提供的 —— 相比之下，沮丧的支持对话或通过礼品卡激励客户提供的反馈是有偏差的。这类似于评论，在那里只有讨厌的人或其他高度积极的人留下评论，而沉默的大多数人什么都不说。&lt;/p&gt;
&lt;p&gt;与更正式的反馈项目相比，社区的学习在整体上将更加频繁和一致，允许公司在扩大有效的想法和方法之前快速迭代。&lt;/p&gt;
&lt;h2 id=&#34;社区战略可以帮助团队调整&#34;&gt;社区战略可以帮助团队调整&lt;/h2&gt;
&lt;p&gt;社区战略有助于调整团队，因为它使组织的优先事项和谁拥有什么变得清晰 —— 谁在从事价值获取，谁在从事价值创造？今天，营销团队可能会有一些人同时从事这两方面的工作，这可能会导致活动与预期影响之间的不匹配。&lt;/p&gt;
&lt;p&gt;当每个人都对利害关系怀有不同的基本假设时，就很难定义成功。例如，你不会要求客户经理花时间在论坛上与社区成员聊天，因为他们应该专注于完成交易和获取价值。然而，有人问社区经理或开发者倡导者这样的问题并不罕见，“我们从昨晚的聚会中得到了多少线索？”这个人是在问一个关于价值创造活动的价值获取问题。&lt;/p&gt;
&lt;h2 id=&#34;要引金凤凰先栽梧桐树&#34;&gt;要引金凤凰，先栽梧桐树&lt;/h2&gt;
&lt;p&gt;正如我们所看到的，从一个充满活力的社区中产生的对话、内容和联系往往会导致认识的提高、采用、自我鉴定、保留，以及最终为公司带来收入。&lt;/p&gt;
&lt;p&gt;这一切听起来很好，但重要的是要注意，这些类型的结果只是建立一个高引力社区的二阶效应。你不能只是把收入、营销或产品指标直接与你的社区战略联系起来。相反，目标是培养和促进社区成员之间富有成效的讨论，创造价值，并了解这些活动对该业务的二阶影响。&lt;/p&gt;
&lt;p&gt;换句话说，你不能强迫一朵花生长，但你可以为其生长创造理想的环境。&lt;/p&gt;
&lt;p&gt;现在有人会问，为什么我们甚至需要 GTC？我们就不能叫它“社区”吗？&lt;/p&gt;
&lt;p&gt;社区这个词的挑战在于其广泛的范围。Kubernetes 和我当地的跑步俱乐部都可以被称为社区，但它们只是在最抽象的方面相似，这就是为什么我认为我们需要一个重新规划。GTC 的概念和术语（向 &lt;a href=&#34;https://twitter.com/sramji&#34; title=&#34;Sam Ramji&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sam Ramji&lt;/a&gt; 致敬，他是我的早期天使投资人之一，是他发明了这个短语）是有用的，有以下几个原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它借用了人们已经熟悉的 GTM 概念，并以商业影响为框架进行社区讨论。从历史上看，大多数社区团队都在努力争取预算和权力，解决社区项目资金不足，利用率不高的问题。如果你确信社区可以为你的客户和你的公司带来价值，那么将社区项目提升到 GTC 战略将有助于确定社区的战略重要性，并有助于防止资金不足和缺乏授权的常见失败案例。&lt;/li&gt;
&lt;li&gt;它为以前看似不同的想法和团队提供了一个概念性的包装，如社区、内容和活动。那么，社区功能的理想组织结构图的位置是什么？我们还没有看到一个明确的共识，但理想的情况是，社区团队 —— 就像运营部门一样，最好作为一个跨职能的乘数，而不是作为一个垂直的职能领域，在团队之间进行线性交接。&lt;/li&gt;
&lt;li&gt;它是精炼和直接的。GTC 是一个全公司都能团结起来的备忘录，甚至包括销售团队。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但 GTC 不仅仅是一个概念；它也是一个将社区纳入战略的路线图。它将“上周论坛产生了多少线索”这样的问题转变为“我们帮助了多少人”这样的问题。同样，&lt;strong&gt;GTC 和 GTM 的关键区别在于对价值创造和价值获取的关注。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;理想情况下，GTC 和 GTM 计划应该相互补充。通过将 GTC 与 GTM 同时明确，并详细描述这两个计划，公司可以减少协调成本，并享受两者的所有好处。&lt;/p&gt;
&lt;p&gt;虽然社区建设可能与人类一样古老，但在商业环境中的 GTC 实践相对较新；现代 GTM 已经有几十年的发展和完善，但 GTC 的旅程才刚刚开始。现在还没有什么游戏规则，所以我认为现在讨论它对大家是有帮助的。为了帮助使这个概念更加具体，这里有一些问题，可以围绕 GTC 在你公司的潜力，增加更多的细微差别和严谨性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谁在我们的社区里，他们为什么在这里？谁不在社区里？&lt;/li&gt;
&lt;li&gt;我们将为社区创造什么价值，无论他们是否是付费客户？&lt;/li&gt;
&lt;li&gt;成员之间将相互提供什么价值？&lt;/li&gt;
&lt;li&gt;我们将如何倾听、交谈并接受客户的指导？&lt;/li&gt;
&lt;li&gt;我们将如何以及在哪里将这些对话的见解传递给公司的其他部门？&lt;/li&gt;
&lt;li&gt;我们将如何激励、认可和奖励参与？&lt;/li&gt;
&lt;li&gt;我们将树立什么样的价值观和规范，我们对社区的期望是什么？&lt;/li&gt;
&lt;li&gt;我们怎样才能使我们的社区更智能、更快乐、更富有？通过哪些项目，哪些渠道？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于上述问题，下一步是定义和测试关于 GTC 计划如何影响 GTM 的假设。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们认为活跃的社区成员会比非成员保留 50% 的时间。&lt;/li&gt;
&lt;li&gt;我们认为，通过每月产生四篇由社区创建的文章，我们可以将现有博客的产出增加一倍，从而使试用注册人数增加 20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设是一个很好的开始，主要是因为社区应该被理解为复杂的系统，这意味着努力和结果之间的联系可能在很长一段时间内不会显现出来。但是，讨论和辩论这些假设和问题的行为，将使 GTC 和 GTM 团队的目的和影响更加清晰和一致，并使每个人参与到关于如何以不同形式创造价值的创造性讨论中。价值创造的思维方式对企业的每个领域都有影响，对客户、非客户和受众成员都有好处–这就是所有的社区，而社区从开始到结束跨越了客户旅程。&lt;/p&gt;
&lt;h2 id=&#34;非零和世界里的一流能力&#34;&gt;非零和世界里的一流能力&lt;/h2&gt;
&lt;p&gt;我相信公司和客户之间的关系正朝着正和的方向发展，而不是只关注单方面的价值提取。拥有 GTC 战略的公司将更有动力和能力参与这种关系，确保他们为社区提供持续的价值（同时也从二阶上升中受益）。&lt;/p&gt;
&lt;p&gt;在一个公司的轨道上，每个人都有好处，而不仅仅是“线索”。通过创造，而不仅仅是获取价值，公司赢得了信任，可以进入这些对话，并与任何对他们所建立的东西感兴趣的人建立关系：现有的客户、潜在的客户，或者只是进来学习新东西的人。通过首先提供价值，这些公司将自己定位为领导者，而不是那些仍然在玩只知获取的零和游戏的公司。&lt;/p&gt;
&lt;p&gt;那么，拥有一个 GTC 的战略是否意味着只有公司能从一个活跃的社区中受益？很难说。对社区来说，好消息是，当 GTC 被提升到公司层面的关注时，社区成员自己会看到更多的好处：更多定期和高质量的活动、教育、培训，以及与他人联系的机会。这也意味着社区成员自己更有能力去共同创造他们想要参与的社区和文化。公司也可以提供一个更高质量、更安全、更有活力的社区体验，因为社区团队将获得工具和人员资源，以接纳新成员，调节社区和处理有害行为，并促进成员之间的联系。&lt;/p&gt;
&lt;p&gt;这意味着 GTC 需要成为一种一流的能力：有团队、有预算、有工具，并且在领导层的桌子上有一个位置。当公司创造的价值超过他们所获取的价值时，人们就会学习新的东西，认识新的人，并发现新的机会 —— 当然，公司也会享受到这种好处。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Hadoop 时代或将落幕，Cloudera 将被私有化</title>
      <link>https://jimmysong.io/trans/cloudera-to-go-private-as-kkr-cdr-grab-it-for-5-3b/</link>
      <pubDate>Tue, 01 Jun 2021 11:50:46 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/trans/cloudera-to-go-private-as-kkr-cdr-grab-it-for-5-3b/</guid>
      <description>
        
        
        &lt;p&gt;北京时间 6 月 1 日晚，据 &lt;a href=&#34;https://techcrunch.com/2021/06/01/cloudera-to-go-private-as-kkr-cdr-grab-it-for-5-3b/&#34; title=&#34;TechCrunch 报道&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TechCrunch 报道&lt;/a&gt;，KKR 和 CD&amp;amp;R 将以 53 亿美元收购 Cloudera，Cloudera 将被私有化。截止到本文发稿，11 点 49 分，Cloudera 股票报价 15.94 美元，涨幅 23.95%。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/trans/cloudera-to-go-private-as-kkr-cdr-grab-it-for-5-3b/008i3skNly1gr379cnii9j30u01fh1ee_hu16371408002423688718.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/trans/cloudera-to-go-private-as-kkr-cdr-grab-it-for-5-3b/008i3skNly1gr379cnii9j30u01fh1ee.jpg&#34; data-img=&#34;/trans/cloudera-to-go-private-as-kkr-cdr-grab-it-for-5-3b/008i3skNly1gr379cnii9j30u01fh1ee.jpg&#34; data-width=&#34;583&#34; data-height=&#34;1000&#34; alt=&#34;image&#34; data-caption=&#34;Cloudera 股价&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cloudera 股价&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;http://cloudera.com/&#34; title=&#34;Cloudera&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloudera&lt;/a&gt;曾经是最热门的 Hadoop 初创公司之一，但是随着时间的推移，这个市场的光芒不再，今天它将被私有化，因为 KKR 和 Clayton Dubilier &amp;amp; Rice 这两家私募股权公司宣布他们打算以 53 亿美元收购 Cloudera。目前该公司的市值约为 37 亿美元。&lt;/p&gt;
&lt;p&gt;Cloudera 和 Hortonworks 是 Hadoop 领域的两家重要初创公司，于&lt;a href=&#34;https://techcrunch.com/2018/10/03/cloudera-and-hortonworks-announce-5-2-billion-merger/&#34; title=&#34;2018 年以 52 亿美元的价格合并&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018 年以 52 亿美元的价格合并&lt;/a&gt;。Cloudera 可能受到激进投资者 Carl Icahn 的压力，他在 2019 年持有该公司&lt;a href=&#34;https://siliconangle.com/2019/08/12/activist-investor-carl-icahn-shakes-cloudera/&#34; title=&#34;18% 的股份&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;18% 的股份&lt;/a&gt;，现在可以从这次出售中获益，该公司表示，每股 16 美元的价格对股东有 24% 的溢价。今早开市前，该公司的股价为 12.86 美元。&lt;/p&gt;
&lt;p&gt;早在十年前，当 Hadoop 成为处理大数据的方式时，风险资金就涌入了这个领域。随着时间的推移，它失去了一些光辉。因为它是高度劳动密集型的，公司开始转移到云端，并寻找能为他们做更多工作的软件服务。像数据湖这样的更现代的技术开始取代它，该公司认识到它必须改变其方法以在现代数据处理市场中生存。&lt;/p&gt;
&lt;p&gt;Cloudera 首席执行官 Rob Bearden 认为这项交易正是实现这一目标的一种方式。&amp;ldquo;Bearden 在一份声明中说：&amp;ldquo;我们相信，作为一家拥有 CD&amp;amp;R 和 KKR 等经验丰富的投资者的专业知识和支持的私营公司，Cloudera 将拥有资源和灵活性来推动以产品为主导的增长，并扩大我们的市场机会。&lt;/p&gt;
&lt;p&gt;虽然该声明中有很多行政术语，但它基本上意味着该公司希望这些私募股权公司能够给它一些额外的财政资源，以便向处理大量数据的更现代的方法前进。&lt;/p&gt;
&lt;p&gt;在此过程中，Cloudera 还宣布了自己的几项收购，以帮助其实现现代化的目标。首先，Cloudera 收购了&lt;a href=&#34;https://techcrunch.com/2018/11/08/datacoral-raises-10m-series-a-for-its-data-infrastructure-service/&#34; title=&#34;Datacoral&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Datacoral&lt;/a&gt;，这家初创公司将构建数据管道所需的基础设施抽象化，而无需使用代码。它还收购了&lt;a href=&#34;https://techcrunch.com/tag/cazena/&#34; title=&#34;Cazena&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cazena&lt;/a&gt;，一家帮助客户建立云数据湖的初创公司，为公司提供了处理大数据的更现代的方法。Bearden 认为这两项服务有助于 Cloudera 在大数据自助服务市场上重新定位。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;这两项业务将使我们合并后的客户享受到复杂性的降低和更快的数据计划价值实现时间，从而提高洞察力，加快创新，并与客户和合作伙伴进行更有力的合作，&amp;ldquo;Bearden 在一份声明中说。&lt;/p&gt;
&lt;p&gt;Cloudera 在&lt;a href=&#34;https://techcrunch.com/2017/04/28/cloudera-finishes-up-20-in-stock-market-debut/&#34; title=&#34;2018 年上市&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018 年上市&lt;/a&gt;，在筹集了 10 亿美元后以每股 18.09 美元的价格收盘。其中绝大部分是英特尔资本在 2014 年的&lt;a href=&#34;https://techcrunch.com/2014/03/31/intel-pours-740m-into-cloudera-in-exchange-for-an-18-stake/&#34; title=&#34;7.4 亿美元的投资&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;7.4 亿美元的投资&lt;/a&gt;。值得注意的是，Cloudera 在去年年底以 3.14 亿美元收购了英特尔在该公司的股份。&lt;/p&gt;
&lt;p&gt;Hortonworks 又筹集了 2.48 亿美元。第三家 Hadoop 创业公司，MapR 筹集了 2.8 亿美元。该公司的资产在 2019 年以低于 5000 万美元的价格相当惨淡地卖给了 HPE，这表明 Hadoop 市场&lt;a href=&#34;https://techcrunch.com/2019/08/07/with-mapr-fire-sale-hadoops-promise-has-fallen-on-hard-times/&#34; title=&#34;早已落幕&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;早已落幕&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Cloudera 的交易包括一个简短的 &amp;ldquo;go shop&amp;quot;条款，允许它继续寻找一个更好的交易。它是否能找到这样的交易值得怀疑，如果找不到，与 KKR 和 CD&amp;amp;R 的交易预计将在今年下半年完成，但需要经过监管审查。该公司将在今天晚些时候公布收益。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>软件定义交付（SDD）宣言</title>
      <link>https://jimmysong.io/blog/software-defined-delivery-manifesto/</link>
      <pubDate>Fri, 30 Nov 2018 19:06:35 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/blog/software-defined-delivery-manifesto/</guid>
      <description>
        
        
        &lt;p&gt;今天给大家分享的是《软件定义交付宣言》，该宣言发出已经有一周多时间了，目前该宣言的官方网站（&lt;code&gt;https://sdd-manifesto.org/&lt;/code&gt; 已停止维护）还在联署签名中。&lt;/p&gt;
&lt;p&gt;云原生通过不可变基础设施与声明式配置，作为了软件定义交付的基础，再假以持续交付工具可以极大的提高软件交付效率，本宣言的起草者中包含众多云原生理念的鉴定拥护者如 Kenny Bastani、Matt Stine 等。&lt;/p&gt;
&lt;p&gt;该宣言通过 GitHub 协作草拟（&lt;a href=&#34;https://github.com/sdd-manifesto/manifesto&#34; title=&#34;https://github.com/sdd-manifesto/manifesto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/sdd-manifesto/manifesto&lt;/a&gt;），仍未达到 1.0 版本。下面是《软件定义交付宣言》的中文版。&lt;/p&gt;
&lt;h2 id=&#34;软件定义交付宣言&#34;&gt;软件定义交付宣言&lt;/h2&gt;
&lt;p&gt;我们从日常生产和实践中认识到软件塑造了我们的世界。我们认识到代码才是指定精确操作的最佳方式。我们认识到代码仅在被交付时才有用。&lt;/p&gt;
&lt;p&gt;开发的软件被能够被交付出去就软件本身存在的目的。现在是时候将我们的核心技能应用到实际的工作中去了。是时候对交付去做出 &lt;em&gt;设计&lt;/em&gt; 了。我们将区别人类和计算机在交付工作中承担的作用：人类做决策，计算机来完成自动化任务。&lt;/p&gt;
&lt;p&gt;每一次交付工作本质上都是独一无二的。应用程序、组织、部署环境和团队组合千差万别。我们认识到每个团队都需要能够理解这种交付的独特性和对交付做自动化。我们认识到，虽然持续交付对满足业务需求至关重要，但自动执行所有重复任务也非常重要。&lt;/p&gt;
&lt;p&gt;我们使用与加速应用程序开发类似的方式来加速软件交付：使用现代架构和编程语言，通用功能的框架、库和服务。&lt;/p&gt;
&lt;p&gt;交付基础设施现在是可编程的，我们将对其进行编程。&lt;/p&gt;
&lt;h2 id=&#34;软件定义交付是指&#34;&gt;软件定义交付是指&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;核心&lt;/strong&gt;：交付是每个软件团队和组织的基础和战略能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优先&lt;/strong&gt;：交付的代码是生产代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;战略&lt;/strong&gt;：决定团队和组织层面的策略；在代码中实现精确控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不断发展&lt;/strong&gt;：不断改进交付。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工程设计&lt;/strong&gt;：强大，可测试的代码。70 年代的脚本语言是不够的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现代软件架构&lt;/strong&gt;：事件驱动和可扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现代编程语言&lt;/strong&gt;：逻辑最好用代码指定，而不是图片或 GUI。脚本不好扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于模型&lt;/strong&gt;：由软件领域的模型支持，具有对代码的理解。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可测试&lt;/strong&gt;：在生产之前启用小规模应用以发现错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;协作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从群众中来&lt;/strong&gt;：所有人都可以在代码中表述自己的专业知识，这对大家都有利。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;到软件中去&lt;/strong&gt;：使用最好的工具，但将它们结合起来之后就是独一无二的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在人与软件之间&lt;/strong&gt;：协同自动化可以增强我们的感知和帮助我们做决策。将信息落实到行动，使我们能够体察软件的自动化行为。通过代码来区分团队的共享交付目标集及其实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加速&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过自动化&lt;/strong&gt;：自动执行重复任务，加快了工作速度还可以避免错误发生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过重用&lt;/strong&gt;：在开发人员、团队和组织之间共享通用功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可观测性&lt;/strong&gt;：通常用于观察和排除作为生产系统的交付过程中发生的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跟踪&lt;/strong&gt;：观察系统中的活动并跟踪操作之间的关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试&lt;/strong&gt;：检查和与交付流程交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指标&lt;/strong&gt;：在整个交付流程的活动中获取指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：(姓氏按字母顺序排列）：本宣言由 Kenny Bastani、Marc Holmes、Rod Johnson、Jessica Kerr、Mik Kersten、Russ Miles、Erin Schnabel、Matt Stine 及其他社区成员草拟。&lt;/p&gt;
&lt;p&gt;©2018，上述作者和本声明可以任何形式自由复制，但需全文复制本声明。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

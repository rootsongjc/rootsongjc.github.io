
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 出版物</title>
    <link>https://jimmysong.io/categories/%E5%87%BA%E7%89%88%E7%89%A9/</link>
    <description>Recent content in 出版物 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Sat, 01 Jul 2023 00:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/categories/%E5%87%BA%E7%89%88%E7%89%A9/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>Istio 最佳实战</title>
      <link>https://jimmysong.io/book/istio-in-action/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/istio-in-action/</guid>
      <description>
        
        
        &lt;h2 id=&#34;编辑推荐&#34;&gt;编辑推荐&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;本书作者为全球服务网格技术专家，内容更加全面、翔实。&lt;/li&gt;
&lt;li&gt;本书译者为国内云原生社区技术专家，力求将内容准备传达表述，并且对于难以理解的内容进行了中文化处理。&lt;/li&gt;
&lt;li&gt;本书内容全面，覆盖 Istio 新版本及核心内容，示例代码丰富完善。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/istio-in-action/cover_hu6315194902053925235.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/istio-in-action/cover.jpg&#34; data-img=&#34;/book/istio-in-action/cover.jpg&#34; data-width=&#34;800&#34; data-height=&#34;772&#34; alt=&#34;image&#34; data-caption=&#34;Istio in Action 中文版（Istio 最佳实战）&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio in Action 中文版（Istio 最佳实战）&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;内容简介&#34;&gt;内容简介&lt;/h2&gt;
&lt;p&gt;Istio 作为服务网格技术拥有代表性的产品，历经多年发展已日渐成熟，并受到越来越多开发者的青睐。本书以 Istio 服务网格为核心，内容包括基本概念、核心功能、运维、企业级落地四大部分，从基本的安装部署到功能实践，从底层原理分析到故障排查，从进阶操作到企业级实战，由浅入深地介绍了 Istio 服务网格的各个方面。&lt;/p&gt;
&lt;p&gt;本书适合正在使用或关注 Istio 的开发工程师、运维工程师、架构师等云原生领域从业者阅读。无论你是服务网格技术的初学者，还是该领域的专家，都能从本书中寻找到有借鉴意义的理论及实践指导。&lt;/p&gt;
&lt;h2 id=&#34;作者简介&#34;&gt;作者简介&lt;/h2&gt;
&lt;p&gt;Christian Posta 是 Solo.io 公司副总裁，全球领域首席技术官。他在云原生社区中以作家、博主、演说家，以及服务网格和云原生生态中各种开源项目的贡献者身份而闻名。Christian 曾在传统企业和大型互联网公司工作过，现在帮助组织创建和部署大规模的、云原生的、弹性的分布式架构。他擅长指导、培训和领导团队在分布式系统概念、微服务、DevOps 和云原生应用程序设计方面取得成功。&lt;/p&gt;
&lt;p&gt;Rinor Maloku 是 Solo.io 公司的工程师。他为采用应用网络解决方案（如服务网格）的客户提供咨询服务。此前，他在 Red Hat 公司工作，在那里，他开发了中间件软件，使研发团队能够确保其服务的高可用性。作为一名自由职业者，他服务了多位 DAX 30 成员，以充分利用云计算技术的潜力。&lt;/p&gt;
&lt;h2 id=&#34;译者简介&#34;&gt;译者简介&lt;/h2&gt;
&lt;p&gt;马若飞，就职于飞维美地（FreeWheel）北京研发中心，担任首席工程师，主要负责微服务架构设计和云原生落地工作。《Istio 实战指南》作者，极客时间《Service Mesh 实战》专栏作者，《云原生应用架构：微服务开发最佳实践》主要作者，人民邮电出版社 IT 专业图书专家顾问，ServiceMesher 技术社区和云原生社区管理委员会成员。发表、翻译多篇云原生领域前沿技术文章，热衷于技术分享。&lt;/p&gt;
&lt;p&gt;宋净超（Jimmy Song），Tetrate 布道师，云原生社区创始人，蚂蚁集团前云原生布道师及开源管理负责人，电子工业出版社图书出品人，独立撰稿人。Kubernetes、Istio 等开源技术的早期使用及推广者。著有《未来架构：从服务化到云原生》《深入理解 Istio：云原生服务网格进阶实战》，参与过多部作品的翻译工作。&lt;/p&gt;
&lt;p&gt;罗广明，字节跳动服务框架团队架构师，云原生社区管理委员会成员、北京站站长。先后在爱立信、百度从事云原生、微服务及开源相关工作，后加入字节跳动，负责 CloudWeGo 等微服务项目开源相关工作。长期关注云原生 &amp;amp; 微服务领域前沿技术、架构演进及标准化进程。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>深入理解 Istio —— 云原生服务网格进阶实战</title>
      <link>https://jimmysong.io/book/istio-in-depth/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/istio-in-depth/</guid>
      <description>
        
        
        &lt;p&gt;《深入理解 Istio —— 云原生服务网格进阶实战》，云原生社区著，电子工业出版社出版，2022 年 6 月。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/istio-in-depth/istio-book_hu11701881230418468669.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/istio-in-depth/istio-book.jpg&#34; data-img=&#34;/book/istio-in-depth/istio-book.jpg&#34; data-width=&#34;2400&#34; data-height=&#34;1600&#34; alt=&#34;image&#34; data-caption=&#34;《深入理解 Istio —— 云原生服务网格进阶实战》&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;《深入理解 Istio —— 云原生服务网格进阶实战》&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;以社区之名成就开源&#34;&gt;以社区之名成就开源&lt;/h2&gt;
&lt;p&gt;2018 年 5 月，在蚂蚁金服的支持下，ServiceMesher 社区成立。随后，国内刮起了服务网格的旋风，由社区领导的 Istio 官方文档翻译工作也进入白热化阶段。&lt;/p&gt;
&lt;p&gt;随着时间的推移，我感受到系统介绍 Istio 的中文资料匮乏，于是在 2018 年 9 月开始构思写一本关于 Istio 的图书，并在 GitHub 上发起了 Istio Handbook 的开源电子书项目。几个月后，随着服务网格技术的推广及 ServiceMesher 社区规模的扩大，我在社区的线上线下活动中结识了很多同样热衷于 Istio 和服务网格技术的朋友。我们一致决定，一起写一本 Istio 的开源电子书，将社区积累的宝贵文章和经验集结成系统的文字，分享给广大开发者。&lt;/p&gt;
&lt;p&gt;2019 年 3 月，在社区管理委员会的组织下，几十位成员自愿参与并开始共同撰写此书。2020 年 5 月，为了更好地推广云原生技术，丰富社区分享的技术内容，我们成立了云原生社区，并将原有的 ServiceMesher 社区纳入其中，社区运营的内容也从服务网格技术扩展到更加全面的云原生技术。&lt;/p&gt;
&lt;p&gt;2020 年 10 月，这本书主要的内容贡献者组成了编委会，成员分别有我、马若飞、王佰平、王炜、罗广明、赵化冰、钟华和郭旭东。我们在出版社的指导与帮助下，对本书进行了后续的版本升级、完善、优化等工作。经过反复的迭代，这本《深入理解 Isito：云原生服务网格进阶实战》终于和大家见面了。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/istio-in-depth/cover_hu2861298886405444372.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/istio-in-depth/cover.jpg&#34; data-img=&#34;/book/istio-in-depth/cover.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;1569&#34; alt=&#34;image&#34; data-caption=&#34;《深入理解 Istio —— 云原生服务网格进阶实战》封面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;《深入理解 Istio —— 云原生服务网格进阶实战》封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;Istio 在 1.5 版本后有了重大的架构变化，同时引入或改进了多项功能，例如，引入了智能 DNS 代理、新的资源对象，改进了对虚拟机的支持等。&lt;/p&gt;
&lt;p&gt;本书以 Istio 新版本为基础编写而成，在持续追踪 Istio 社区最新动向的基础上，力求为读者提 供最新、最全面的内容。另外，本书的多位作者都是一线的开发或运维工程师，具有丰富的 Istio 实战经验，为本书提供了翔实、宝贵的参考案例。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Quarkus 实战</title>
      <link>https://jimmysong.io/book/quarkus-cookbook/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/quarkus-cookbook/</guid>
      <description>
        
        
        &lt;p&gt;《Quarkus 实战——专为 Kubernetes 而优化的 Java 解决方案》，Alex Soto Bueno、Jason Porter 著，张晓宇、刘岩、宋净超译，机械工业出版社出版，2021 年 3 月。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/quarkus-cookbook/quarkus-cookbook_hu5393398596993962917.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/quarkus-cookbook/quarkus-cookbook.jpg&#34; data-img=&#34;/book/quarkus-cookbook/quarkus-cookbook.jpg&#34; data-width=&#34;2000&#34; data-height=&#34;1259&#34; alt=&#34;image&#34; data-caption=&#34;Quarkus cookbook 实战&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Quarkus cookbook 实战&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;译者序&#34;&gt;译者序&lt;/h2&gt;
&lt;p&gt;Quarkus 是一款有别于传统 Java 架构的新技术框架，它是建立在我们熟知的技术栈上，使用了诸多成熟的技术，如 JPA，JAX-RS、Eclipse Vert.x、Eclipse MicroProfile 和 CDI 等，并将之和 Kubernetes 紧密融合在一起。用户可以借助 Kubernetes 的高效的调度运维能力，最大限度地节约资源。&lt;/p&gt;
&lt;p&gt;云原生的星星之火，自社区 Kubernetes 爆红之后，变成燎原之势。云原生相关的技术如雨后春笋般涌出。刘岩，宋净超和我都是云原生社区的成员，也钟爱布道各种相关技术，是这一领域的狂热爱好者。我们共同的爱好之一，就是时刻关注有好的国外技术或者成熟技术的优秀书籍发布。&lt;/p&gt;
&lt;p&gt;在这一过程中，我们机缘巧合地发现了这本书，恰好这本书在国内还没有进行翻译，满怀热情的我们就此踏上了研究 Quarkus 之旅。&lt;/p&gt;
&lt;p&gt;这本采用十分简单的抛出问题，提出解决方案，和引发讨论的方式，将 Quarkus 的技术点描绘的细致透彻。通过本书，用户可以自学相关内容，借助 Quarkus，提高 Java 相关研发的工作效率，让你在快节奏的微服务构建和基于云的应用程序开发领域立于不败之地。&lt;/p&gt;
&lt;p&gt;在整个翻译过程中，我们得到华章出版社和李忠明编辑的全力帮助，在此表示衷心感谢。&lt;/p&gt;
&lt;p&gt;最后，感谢大家有缘阅读到此书，希望我们三人的绵薄之力可以帮助到崇尚云原生技术的你，在 Quarkus 的技术道路上，能够享受到和我们一样的欣喜。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生模式</title>
      <link>https://jimmysong.io/book/cloud-native-patterns/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cloud-native-patterns/</guid>
      <description>
        
        
        &lt;p&gt;《云原生模式》，Cornelia Davis 著，张若飞、宋净超译，电子工业出版社出版，2020 年 8 月。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cloud-native-patterns/cloud-native-patterns_hu1266397483064570374.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cloud-native-patterns/cloud-native-patterns.jpg&#34; data-img=&#34;/book/cloud-native-patterns/cloud-native-patterns.jpg&#34; data-width=&#34;610&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;《云原生模式》图书封面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;《云原生模式》图书封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;当我们在讨论云原生时究竟在讨论什么？这些年来我一直在思索这个问题，大家的观点可能不尽相同。三年前从我翻译了第一本云原生领域书籍开始，陆续参与翻译和创作了一系列云原生作品，同时通过对云原生领域的开源项目、社区、基金会、应用云化过程的参与和观察，我得出了下面的结论：云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。云原生是云计算适应社会分工的必然结果，将系统资源、底层基础设施和应用编排交由云平台管理，让开发者专注于业务逻辑，这不正是云计算长久以来孜孜以求的吗？云原生应用追求的是快速构建高容错性、弹性的分布式应用，追求的极致的研发效率和友好的上线与运维体验，随云云原生的理念应运而生，它们天生适合部署在云上，可以最大限度利用云计算带来的红利。&lt;/p&gt;
&lt;p&gt;在此之前我曾翻译过几本云原生主题的图书，其中&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34; title=&#34;《Cloud Native Go》&#34;&gt;《Cloud Native Go》&lt;/a&gt;的作者 Kevin Hoffman，&lt;a href=&#34;https://jimmysong.io/book/cloud-native-java/&#34; title=&#34;《云原生 Java》&#34;&gt;《云原生 Java》&lt;/a&gt;的作者 Josh Long，他们都是来自 Pivotal 或曾在 Pivotal 工作多年，当看到此书时，我惊奇的发现，作者 Cornelia Davis 同样来自这家公司，Pivotal 真可谓是云原生的黄埔军校，此书的内容跟以往的云原生书籍有所不同，对于模式的梳理标新立异，因此我立马联系了电子工业出版社的张春雨编辑，经他了解到张若飞正在翻译此书，此前我已与他合作翻译了《云原生 Java》，本书算是我跟他的第二次合作，他翻译图书时的精准和高效着实让我佩服，我们各自翻译了本书一半的内容。
人人都在讨论云原生，但是究竟如何实现却莫衷一是。本书列举了构建云原生应用的 12 种模式，主要关注的是云原生应用的数据、服务与交互，即应用层面的设计模式，这些模式穿插于本书的第二部分各个章节中，基本覆盖了云原生应用的各个方面，并将理论结合实践，带领读者使用 Java 来实现一个云原生应用。&lt;/p&gt;
&lt;p&gt;同时还要感谢&lt;a href=&#34;https://cloudnative.to&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;的成员及志愿者们，对于云原生在中国的发展做出的贡献，你们的鼓励和支持是在云原生领域不断努力和探索的动力。本书在翻译过程中难免有一些纰漏，还望读者指正。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>未来架构——从服务化到云原生</title>
      <link>https://jimmysong.io/book/future-architecture/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/future-architecture/</guid>
      <description>
        
        
        &lt;p&gt;《未来架构 —— 从服务化到云原生》，张亮、吴晟、敖小剑、宋净超著，电子工业出版社出版，2019 年 4 月。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/future-architecture/future-architecture_hu5421295694142458023.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/future-architecture/future-architecture.jpg&#34; data-img=&#34;/book/future-architecture/future-architecture.jpg&#34; data-width=&#34;610&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;未来架构图书封面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;未来架构图书封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;这本书的第一作者是张亮，现就职于京东金融，为了丰富全书的内容，张亮要求了圈内的好友吴晟、敖小剑和我，共同创作了这本宏大命题的《未来架构》，下面引述的他介绍的成书原由。&lt;/p&gt;
&lt;h3 id=&#34;成书缘由&#34;&gt;成书缘由&lt;/h3&gt;
&lt;p&gt;身处互联网行业的我们一向处在变革的最前端，受到世界浪潮的洗礼，不停歇地追赶着这一波又一波的技术潮流，才不会落在时代脚步之后。特别是近几年来，互联网架构不断演化，经历了从集中式架构到分布式架构，再到云原生架构的过程。云原生因能解决传统应用升级缓慢、架构臃肿、不能快速迭代等问题而逐渐成为这个时代舞台的主角。&lt;/p&gt;
&lt;p&gt;身处在这个变化浪潮中，我看着它改变着互联网架构的航行方向，并给越来越多的公司和个人带来新的思想和发展，也用我这些年走过的路、积累的经验、沉淀的眼界去学习它、读懂它，并让它融入我的知识体系网，来更新大脑里那张探索不断、充满指南针意义的架构地图。&lt;/p&gt;
&lt;p&gt;2017、2018 年，我与这些变化同进同退，让 Elastic-Job、&lt;a href=&#34;https://github.com/apache/shardingsphere&#34; title=&#34;Sharding-Sphere&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sharding-Sphere&lt;/a&gt; 成为业界里大家认可的项目、让所负责的开源项目开始走向国际化、也认识了更多的良师益友…… 这种种的经历和发展，触动我开始将所闻、所见、所知、所感的珠玑落到了笔尖，串联成了这本书：《未来架构 —— 从服务化到云原生》。&lt;/p&gt;
&lt;p&gt;这本书里有你想认识的分布式、服务化、服务网格、容器、编排治理、云原生、云数据库……&lt;/p&gt;
&lt;p&gt;这本书里既有我多年深思熟虑的见解和沉淀良久的经验，也有我弃笔又拾笔的挣扎，因为我需要让书的内容对读者负责……&lt;/p&gt;
&lt;p&gt;这本书里更有这些资深大咖的精彩章节叙述：Apache 孵化器项目 SkyWalking 创始人 &amp;amp; APM 专家吴晟、CNCF Ambassador &amp;amp; 云原生布道师 &amp;amp; 云原生社区创始人&lt;a href=&#34;https://jimmysong.io/&#34; title=&#34;宋净超&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宋净超&lt;/a&gt;、Service Mesh 布道师&lt;a href=&#34;https://skyao.io/&#34; title=&#34;敖小剑&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;敖小剑&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第 1 章 云原生&lt;/li&gt;
&lt;li&gt;第 2 章 远程通信&lt;/li&gt;
&lt;li&gt;第 3 章 配置&lt;/li&gt;
&lt;li&gt;第 4 章 服务治理&lt;/li&gt;
&lt;li&gt;第 5 章 观察分布式服务&lt;/li&gt;
&lt;li&gt;第 6 章 侵入式服务治理方案&lt;/li&gt;
&lt;li&gt;第 7 章 云原生生态的基石 Kubernetes&lt;/li&gt;
&lt;li&gt;第 8 章 跨语言服务治理方案 Service Mesh&lt;/li&gt;
&lt;li&gt;第 9 章 云原生数据架构&lt;/li&gt;
&lt;li&gt;第 10 章 分布式数据库中间件生态圈 ShardingSphere&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;寄托期翼&#34;&gt;寄托期翼&lt;/h3&gt;
&lt;p&gt;书的封页是张亮老师选择的老特拉福德球场前矗立的曼联 Holy Trinity 雕像作为背景图。&lt;/p&gt;
&lt;p&gt;1958 年 2 月 6 日，曼联队在南斯拉夫参加欧冠杯获得半决赛权后，回程途中遭遇慕尼黑空难，曼联战队瞬间消失在夜空。为了曼联的复兴，幸存下来的曼联队的主帅马特・巴斯比强忍悲痛，用血泪和汗水重建曼联。1968 年 5 月 29 日，在慕尼黑空难整整 10 年后，巴斯比带领他的新战队终于捧起了欧洲冠军杯，告慰了那些故去的亡魂！这座 Holy Trinity 雕像变成了永恒的纪念！&lt;/p&gt;
&lt;p&gt;信仰、永不言弃、坚持不懈、创造奇迹、浴火重生…，是我从这座雕塑中感受到的力量。每个人的一生一定都会经历高峰和低谷，见过山川和沙漠，也希望这本书不仅仅能为大家带来互联网架构的干货知识，也能寄托我对大家的祝福：希望在这十万长征路上正在不懈拼搏的你，能够拥有自己的信仰和希望，即使要途径无数沙漠和海洋，也能在经历千帆后柳暗花明！&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Python 云原生</title>
      <link>https://jimmysong.io/book/cloud-native-python/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cloud-native-python/</guid>
      <description>
        
        
        &lt;p&gt;《Python 云原生》，Marish Sethi 著，宋净超译，电子工业出版社出版，2018 年 7 月。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cloud-native-python/cloud-native-python_hu14410373649051279843.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cloud-native-python/cloud-native-python.jpg&#34; data-img=&#34;/book/cloud-native-python/cloud-native-python.jpg&#34; data-width=&#34;610&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;《Python 云原生》图书封面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;《Python 云原生》图书封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;cloud-native-python-介绍&#34;&gt;Cloud Native Python 介绍&lt;/h2&gt;
&lt;p&gt;随着当今商业的迅速发展，企业为了支撑自身的迅速扩张，仅仅通过自有的基础设施是远远不够的。因此，他们一直在追求利用云的弹性来构建支持高度可扩展应用程序的平台。&lt;/p&gt;
&lt;p&gt;这本书能够帮助您一站式的了解使用 Python 构建云原生应用架构的所有信息。本书中我们首先向您介绍云原生应用架构和他们能够帮助您解决哪些问题。然后您将了解到如何使用 REST API 和 Python 构建微服务，通过事件驱动的方式构建 Web 层。接下来，您将了解到如何与数据服务进行交互，并使用 React 构建 Web 视图，之后我们将详细介绍应用程序的安全性和性能。然后，您还将了解到如何 Docker 容器化您的服务。最后，您将学习如何在 AWS 和 Azure 平台上部署您的应用程序。在您部署了应用程序后，我们将围绕关于应用程序故障排查的一系列概念和技术来结束这本书。&lt;/p&gt;
&lt;h2 id=&#34;本书中涵盖哪些内容&#34;&gt;本书中涵盖哪些内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第 1 章 介绍云原生应用架构和微服务，讨论云原生架构的基本概念和构建应用程序开发环境。&lt;/li&gt;
&lt;li&gt;第 2 章 使用 Python 构建微服务，构建自己的微服务知识体系并根据您的用例进行扩展。&lt;/li&gt;
&lt;li&gt;第 3 章 使用 Python 构建 Web 应用程序，构建一个初始的 Web 应用程序并与微服务集成。&lt;/li&gt;
&lt;li&gt;第 4 章 与数据服务交互，教您如何将应用程序迁移到不同的数据库服务。&lt;/li&gt;
&lt;li&gt;第 5 章 使用 React 构建 Web 视图。&lt;/li&gt;
&lt;li&gt;第 6 章 使用 Flux 创建可扩展 UI，帮助您理解如何使用 Flux 创建可扩展的应用程序。&lt;/li&gt;
&lt;li&gt;第 7 章 事件溯源和 CQRS，讨论如何以事件形式存储合约（transaction）。&lt;/li&gt;
&lt;li&gt;第 8 章 保护 Web 应用程序，让您的应用程序免于受到外部威胁。&lt;/li&gt;
&lt;li&gt;第 9 章 持续交付，应用程序频繁发布的相关知识。&lt;/li&gt;
&lt;li&gt;第 10 章 Docker 容器化您的服务，讨论容器服务和在 Docker 中运行应用程序。&lt;/li&gt;
&lt;li&gt;第 11 章 将应用程序部署到 AWS 平台上，教您如何在 AWS 上构建基础设施并建立应用程序的生产环境。&lt;/li&gt;
&lt;li&gt;第 12 章 将应用程序部署到 Azure 平台上，讨论如何在 Azure 上构建基础设施并建立应用程序的生产环境。&lt;/li&gt;
&lt;li&gt;第 13 章 监控云应用，了解不同的基础设施和应用的监控工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用本书您需要哪些工具和环境&#34;&gt;使用本书您需要哪些工具和环境&lt;/h2&gt;
&lt;p&gt;您需要在系统上安装 Python。一个文本编辑器，最好是 Vim、Sublime 或者 Notepad++。在有一个章节中您需要下载 POSTMAN，这是一个功能强大的 API 测试套件，可以作为作为 Chrome 扩展插件来安装。您可以从&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&#34; title=&#34;这里下载&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除此之外，如果您还有如下网站的账号那就更好了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Amazon Web Services&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标读者&#34;&gt;目标读者&lt;/h2&gt;
&lt;p&gt;本书适用于具有 Python 基础知识、熟悉命令行和基于 HTTP 的应用程序基本原理的开发人员。对于那些想要了解如何构建、测试和扩展 Python 开发的应用程序的人员来说本书是个理想选择。不需要有使用 Python 构建微服务的经验。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>云原生 Java</title>
      <link>https://jimmysong.io/book/cloud-native-java/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cloud-native-java/</guid>
      <description>
        
        
        &lt;p&gt;《云原生 Java》，Josh Long 著，张若飞、宋净超译，电子工业出版社出版，2017 年 7 月。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cloud-native-java/cloud-native-java_hu3225554164234463097.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cloud-native-java/cloud-native-java.jpg&#34; data-img=&#34;/book/cloud-native-java/cloud-native-java.jpg&#34; data-width=&#34;610&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;云原生 Java  图书封面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;云原生 Java  图书封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cloud-native-java/jimmy-song-with-josh-long_hu9991380716815370709.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cloud-native-java/jimmy-song-with-josh-long.jpg&#34; data-img=&#34;/book/cloud-native-java/jimmy-song-with-josh-long.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;Jimmy Song with Josh Long&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Jimmy Song with Josh Long&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;照片拍摄于 2018 年 11 月 3 日，北京&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;本书介绍&#34;&gt;本书介绍&lt;/h2&gt;
&lt;p&gt;传统企业与如亚马逊、Netflix 和 Etsy 这类企业之间的区别是什么？这些公司有完善云原生开发方法，这些方法使得他们能够保持优势并领先于竞争对手。本实践指南向 Java/JVM 开发人员展示如何使用 Spring Boot、Spring Cloud 和 Cloud Foundry 更快更好得构建软件。&lt;/p&gt;
&lt;p&gt;很多组织都已踏足云计算、测试驱动开发、微服务与持续集成和交付领域。本书作者 Josh Long 和 Kenny Bastani 将带您深入研究这些工具和方法，并帮助您将传统应用程序转变为真正的云原生应用程序。&lt;/p&gt;
&lt;p&gt;本书中包含以下四大部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基础知识&lt;/strong&gt;：了解云原生思维背后的动机；配置和测试 Spring Boot 应用程序；将您的传统应用程序迁移至云端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微服务&lt;/strong&gt;：使用 Spring 构建 HTTP 和 RESTful 服务；在分布式系统中路由请求；建立更接近数据的边缘服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据整合&lt;/strong&gt;：使用 Spring Data 管理数据，并将分布式服务与 Spring 支持的事件驱动的，以消息传递为中心的架构集成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生产&lt;/strong&gt;：让您的系统可观测；使用服务代理来连接有状态的服务；了解持续交付背后的重要思想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您正在构建云原生应用程序，这本书将是使用 Java 生态系统的基本指南。本书中包含了所有内容——构建弹性服务、管理数据流（通过 REST 和异步事件）、测试、部署和可观测性的关键任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——Daniel Bryant&lt;/strong&gt;，SpectoLabs 的软件开发者和 CTO&lt;/p&gt;
&lt;p&gt;我预测无论是刚开始云原生之旅还是已经接近云原生的目标，所有参与其中的人都将从这本云原生 Java 的洞察和经验中受益。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——Dava Syer 博士&lt;/strong&gt;，Spring 框架的贡献者，Spring Boot 和 Spring Cloud 的贡献者和联合创始人&lt;/p&gt;
&lt;h2 id=&#34;作者信息&#34;&gt;作者信息&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Josh Long&lt;/strong&gt;是一名 Spring 布道师，同时也是 InfoQ.com 的 Java queue 编辑，以及包括 Spring Recipes 第二版（Apress 出版社出版）在内的多本书籍的主要作者。Josh 在许多国际行业会议上发表过演讲，包括 TheServiceSide Java Symposium、SpringOne、OSCON、JavaZone、Devoxx、Java2Days 等。当他没在编写 SpringSource 的代码的时候，不是泡在 Java 用户组就是在咖啡店里喝咖啡。Josh 喜欢能够推动技术发展的解决方案。他的兴趣包括可扩展性、BPM、网格计算、移动计算和所谓的“智能”系统等。您可以在&lt;a href=&#34;http://blog.springsource.org/&#34; title=&#34;http://blog.springsource.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.springsource.org&lt;/a&gt;或&lt;a href=&#34;http://joshlong.com/&#34; title=&#34;http://joshlong.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://joshlong.com&lt;/a&gt;上浏览他的博客。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kenny Bastani&lt;/strong&gt;是 Pivotal 的 Spring 布道师。作为一名开源贡献者和博客作者，Kenny 关注图数据库、微服务等，并喜欢吸引一群充满热情的软件开发人员。Kenny 还是 OSCON、SpringOne Platform 和 GOTO 等行业会议的常客。他维护了一个关于软件架构的&lt;a href=&#34;http://kennybastani.com/&#34; title=&#34;个人博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;个人博客&lt;/a&gt;，并提供用于构建事件驱动的微服务和无服务器架构的教程和开源参考示例。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;序言（James Watters）xvii&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序言（Rod Johnson）xix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言 xxi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第Ⅰ部分 基础知识&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 章 云原生应用程序 3&lt;/li&gt;
&lt;li&gt;第 2 章 训练营：Spring Boot 和 Cloud Foundry 21&lt;/li&gt;
&lt;li&gt;第 3 章 符合十二要素程序风格的配置 67&lt;/li&gt;
&lt;li&gt;第 4 章 测试 85&lt;/li&gt;
&lt;li&gt;第 5 章 迁移遗留的应用程序 115&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第Ⅱ部分 Web 服务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 6 章 REST API 137&lt;/li&gt;
&lt;li&gt;第 7 章 路由 179&lt;/li&gt;
&lt;li&gt;第 8 章 边缘服务 197&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第Ⅲ部分 数据整合&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 9 章 数据管理 251&lt;/li&gt;
&lt;li&gt;第 10 章 消息系统 303&lt;/li&gt;
&lt;li&gt;第 11 章 批处理和任务 325&lt;/li&gt;
&lt;li&gt;第 12 章 数据集成 363&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第 IV 部分 生产&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 13 章 可观测的系统 411&lt;/li&gt;
&lt;li&gt;第 14 章 服务代理 469&lt;/li&gt;
&lt;li&gt;第 15 章 持续交付 497&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第 V 部分 附录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;附录 A 在 Java EE 中使用 Spring Boot 527&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Cloud Native Go</title>
      <link>https://jimmysong.io/book/cloud-native-go/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cloud-native-go/</guid>
      <description>
        
        
        &lt;p&gt;《Cloud Native Go》，Kevin Hoffman 著，宋净超、吴迎松、徐蓓、马超译，电子工业出版社出版，2017 年 8 月。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cloud-native-go/cloud-native-go_hu10347464848889689051.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cloud-native-go/cloud-native-go.jpg&#34; data-img=&#34;/book/cloud-native-go/cloud-native-go.jpg&#34; data-width=&#34;610&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;Cloud Native Go 图书封面&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cloud Native Go 图书封面&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;本书作者：Kevin Hoffman &amp;amp; Dan Nemeth&lt;/li&gt;
&lt;li&gt;译者：宋净超、吴迎松、徐蓓、马超译&lt;/li&gt;
&lt;li&gt;出版社：电子工业出版社&lt;/li&gt;
&lt;li&gt;全名：Cloud Native Go - 基于 Go 和 React 的 web 云原生应用构建指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书已由电子工业出版社出版，可以&lt;a href=&#34;https://item.m.jd.com/product/12123347.html&#34; title=&#34;在京东上购买&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在京东上购买&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cloud-native-go/jimmy-song-with-kevein-hoffman_hu11815492449796158785.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cloud-native-go/jimmy-song-with-kevein-hoffman.jpg&#34; data-img=&#34;/book/cloud-native-go/jimmy-song-with-kevein-hoffman.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;737&#34; alt=&#34;image&#34; data-caption=&#34;Jimmy Song with Kevin Hoffman&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Jimmy Song with Kevin Hoffman&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;照片拍摄于 2017 年 9 月 12 日，北京&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Cloud Native Go 向开发人员展示如何构建大规模云应用程序，在满足当今客户的强大需求的同时还可以动态扩展来处理几乎任何规模的数据量、流量或用户。&lt;/p&gt;
&lt;p&gt;Kevin Hoffman 和 Dan Nemeth 详细描述了现代云原生应用程序，阐明了与快速、可靠的云原生开发相关的因素、规则和习惯。他们还介绍了 Go 这种“简单优雅”的高性能语言，它特别适合于云开发。&lt;/p&gt;
&lt;p&gt;在本书中你将使用 Go 语言创建微服务，使用 ReactJS 和 Flux 添加前端 Web 组件，并掌握基于 Go 的高级云原生技术。Hoffman 和 Nemeth 展示了如何使用 Wercker、Docker 和 Dockerhub 等工具构建持续交付管道; 自动推送应用程序到平台上; 并系统地监控生产中的应用程序性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习“云之道”：为什么开发好的云软件基本上是关于心态和规则&lt;/li&gt;
&lt;li&gt;了解为什么使用 Go 语言是云本地微服务开发的理想选择&lt;/li&gt;
&lt;li&gt;规划支持持续交付和部署的云应用程序&lt;/li&gt;
&lt;li&gt;设计服务生态系统，然后以 test-first 的方式构建它们&lt;/li&gt;
&lt;li&gt;将正在进行的工作推送到云&lt;/li&gt;
&lt;li&gt;使用事件源和 CQRS 模式来响应大规模和高吞吐量&lt;/li&gt;
&lt;li&gt;安全的基于云的 Web 应用程序：做与不做的选择&lt;/li&gt;
&lt;li&gt;使用第三方消息传递供应商创建响应式云应用程序&lt;/li&gt;
&lt;li&gt;使用 React 和 Flux 构建大规模，云友好的 GUI&lt;/li&gt;
&lt;li&gt;监控云中的动态扩展，故障转移和容错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;章节简介如下图。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cloud-native-go/cloud-native-go-abstract_hu7304167964078148048.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cloud-native-go/cloud-native-go-abstract.png&#34; data-img=&#34;/book/cloud-native-go/cloud-native-go-abstract.png&#34; data-width=&#34;3676&#34; data-height=&#34;1854&#34; alt=&#34;image&#34; data-caption=&#34;Cloud Native Go 各章节简介&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cloud Native Go 各章节简介&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kevin Hoffman&lt;/strong&gt;通过现代化和以多种不同语言构建云原生服务的方式帮助企业将其应用程序引入云端。他 10 岁时开始编程，在重新组装的 CommodoreVIC-20 上自习 BASIC。从那时起，他已经沉迷于构建软件，并花了很多时间学习语言、框架和模式。他已经构建了从遥控摄影无人机、仿生性安全系统、超低延迟金融应用程序到移动应用程序等一系列软件。他在构建需要与 Pivotal Cloud Foundry 配合使用的自定义组件时爱上了 Go 语言。&lt;/p&gt;
&lt;p&gt;Kevin 是流行的幻想书系列（&lt;a href=&#34;http://amzn.to/2fc8iES&#34; title=&#34;The Sigilord Chronicles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Sigilord Chronicles&lt;/a&gt; ）的作者，他热切地期待着最终能够将自己对构建软件的热爱与对构建幻想世界的热爱结合起来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan Nemeth&lt;/strong&gt;目前在 Pivotal 担任咨询解决方案架构师，负责支持 Pivotal Cloud Foundry。他从 Commodore 64 开始就一直在开发软件，从 1995 年起开始专业编码，使用 ANSIC 编写了用于本地 ISP 的 CGI 脚本。从那时起，他职业生涯的大部分时间里是作为独立顾问为从金融到制药行业提供解决方案，并使用当时流行的各种语言和框架。Dan 最近接受了 Go 作为自己的归宿，并热情地将它用于所有的项目。&lt;/p&gt;
&lt;p&gt;如果你发现 Dan 没在电脑前，他很可能就是在靠近安纳波利斯的水域玩帆船或飞钓。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第 1 章 云之道&lt;/li&gt;
&lt;li&gt;第 2 章  开始&lt;/li&gt;
&lt;li&gt;第 3 章  Go 入门&lt;/li&gt;
&lt;li&gt;第 4 章  持续交付&lt;/li&gt;
&lt;li&gt;第 5 章  在 Go 中构建微服务&lt;/li&gt;
&lt;li&gt;第 6 章  运用后端服务&lt;/li&gt;
&lt;li&gt;第 7 章  构建数据服务&lt;/li&gt;
&lt;li&gt;第 8 章  事件溯源和 CQRS&lt;/li&gt;
&lt;li&gt;第 9 章  使用 Go 构建 web 应用程序&lt;/li&gt;
&lt;li&gt;第 10 章  云安全&lt;/li&gt;
&lt;li&gt;第 11 章  使用 WebSockets&lt;/li&gt;
&lt;li&gt;第 12 章  使用 React 构建 Web 视图&lt;/li&gt;
&lt;li&gt;第 13 章  使用 Flux 构建可扩展的 UI&lt;/li&gt;
&lt;li&gt;第 14 章  创建完整应用 World of FluxCraft&lt;/li&gt;
&lt;li&gt;第 15 章  结论&lt;/li&gt;
&lt;li&gt;附录 A  云应用的故障排查&lt;/li&gt;
&lt;li&gt;索引&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

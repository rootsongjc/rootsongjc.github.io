<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - 专注于探索后 Kubernetes 时代的云原生新范式 – 文化</title>
    <link>https://jimmysong.io/categories/%E6%96%87%E5%8C%96/</link>
    <description>Recent content in 文化 on Jimmy Song - 专注于探索后 Kubernetes 时代的云原生新范式</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2017-2022 Jimmy Song 保留所有权利</copyright>
    <lastBuildDate>Sun, 09 Jan 2022 10:43:27 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/categories/%E6%96%87%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>跨越鸿沟：理解鸿沟理论</title>
      <link>https://jimmysong.io/blog/crossing-the-chasm/</link>
      <pubDate>Sun, 09 Jan 2022 10:43:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/crossing-the-chasm/</guid>
      <description>
        
        
        &lt;p&gt;最近为某网站撰写服务网格技术的 2021 年总结，笔者关注该领域也有 4 年时间了，再结合自己最近这几年对云原生行业发展的观察，越发觉得《跨越鸿沟》（Crossing the chasm）这本书中所写的新技术的推广生命周期一一应验了。虽然该理论由 Jeffery Moore 于 1991 年提出，距今已有 30 年时间，但该理论至今依然奏效，另外该理论也在 &lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;CNCF 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 项目&lt;/a&gt;
的成熟度划分中得到应用，还有人指出过&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34; title=&#34;云原生技术需要跨越的鸿沟&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生技术需要跨越的鸿沟&lt;/a&gt;
。本文将为读者分享一些关于” 鸿沟理论 “有关的一些知识，希望能够引发大家对于新技术推广的一些思考。&lt;/p&gt;
&lt;h2 id=&#34;什么是鸿沟理论&#34;&gt;什么是鸿沟理论？&lt;/h2&gt;
&lt;p&gt;鸿沟理论指的就是高科技产品在市场营销过程中遭遇的最大障碍：高科技企业的早期市场和主流市场之间存在着一条巨大的鸿沟，能否顺利跨越鸿沟并进入主流市场，成功赢得实用主义者的支持，就决定了一项高科技产品的成败。实际上每项新技术都会经历鸿沟。关键在予采取适当的策略令高科技企业成功地 “跨越鸿沟”，摩尔在这本书中就告诉了人们一些欠经考验的制胜秘诀。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;基于经典的钟形曲线分布，“跨越鸿沟 &amp;quot; 是一个将新技术的采用随时间推移而可视化的概念：从一小撮早期采用者开始，经过大规模的中端市场，最终进入最抗拒变化的消费者手中。&lt;/p&gt;
&lt;p&gt;1962 年，社会学家 &lt;a href=&#34;https://en.wikipedia.org/wiki/Everett_Rogers&#34; title=&#34;Everett Rogers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Everett Rogers&lt;/a&gt;
 出版了 &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffusion_of_innovations&#34; title=&#34;Diffusion of Innovasions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Diffusion of Innovasions&lt;/a&gt;
（创新扩散） 一书。在这本书中，他根据消费者的购买行为，将他们分为不同的群体。他以 500 多项扩散研究的结果为基础进行分类。今天，这个模型被称为 “技术采用生命周期”。这个模型全面地描述了新技术产品或创新的采用或接受情况。在《跨越鸿沟》一书中，杰弗里・摩尔根据扩散生命周期中的客户群体，阐述了成功锁定主流消费者的营销技巧。&lt;/p&gt;
&lt;h2 id=&#34;客户群体&#34;&gt;客户群体&lt;/h2&gt;
&lt;p&gt;基于人口学和心理学特征，客户群保护以下五种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者&lt;/li&gt;
&lt;li&gt;早期采用者&lt;/li&gt;
&lt;li&gt;早期大众&lt;/li&gt;
&lt;li&gt;后期大众&lt;/li&gt;
&lt;li&gt;落后者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/crossing-the-chasm/crossing-the-chasm.jpg&#34; data-img=&#34;/blog/crossing-the-chasm/crossing-the-chasm.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;900&#34; alt=&#34;image&#34; data-caption=&#34;图：”鸿沟理论“客户分布情况&#34;&gt;
    
  
  &lt;figcaption&gt;图：”鸿沟理论“客户分布情况&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;分布情况&#34;&gt;分布情况&lt;/h2&gt;
&lt;p&gt;正如可以观察到的，技术采用的生命周期有一个钟形曲线。各个分界线大约相当于标准差的落点。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者约占总人口的 2.5%&lt;/li&gt;
&lt;li&gt;早期采用者约占 13.5%&lt;/li&gt;
&lt;li&gt;早期大众和后期大众均为 34%&lt;/li&gt;
&lt;li&gt;落后者占剩余的 16%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个群体都代表着一个独特的心理特征，即心理和人口特征的组合。因此，针对这些群体的营销需要与其他群体完全不同的策略。营销人员通过更好地了解这些群体之间的差异，可以通过正确的营销技术更好地锁定所有这些消费者。&lt;/p&gt;
&lt;h3 id=&#34;创新者&#34;&gt;创新者&lt;/h3&gt;
&lt;p&gt;创新者是技术爱好者。这是第一个有可能投资于你产品的消费者群体。创新者积极地追求新的产品和技术。有时，他们甚至在公司启动正式的营销计划之前就开始寻求创新。这是因为技术在他们的生活或业务中占据了核心利益。对于这个客户群体来说，产品功能组合的完整性或性能是次要的。&lt;/p&gt;
&lt;p&gt;不幸的是，在任何特定的细分市场中，都没有很多创新者（大约 2.5%）。通常情况下，他们不愿意为新产品付出很多。尽管如此，赢得他们是很重要的，因为他们的认可为市场上的其他消费者提供了必要的保证。此外，技术爱好者可以作为一个测试小组，在面向主流市场之前进行必要的修改。&lt;/p&gt;
&lt;h3 id=&#34;早期采用者&#34;&gt;早期采用者&lt;/h3&gt;
&lt;p&gt;和创新者一样，早期采用者也是有远见的人，他们在新产品的生命周期的早期就接受了新产品的概念。然而，与创新者不同，他们不是技术专家。相反，他们是有远见的人，不只是在寻找一种改进，而且是一种革命性的突破。因此，他们愿意承担高风险，尝试新事物。他们是对价格最不敏感的客户群体，对产品的功能设置和性能要求很高。&lt;/p&gt;
&lt;p&gt;早期采用者在做出购买决定时不依赖成熟的参考资料。相反，他们更愿意依靠自己的直觉和眼光。此外，他们愿意作为其他采用者群体的参考。由于有远见的人善于提醒其他人群，他们是最重要的争取对象。&lt;/p&gt;
&lt;h3 id=&#34;早期大众&#34;&gt;早期大众&lt;/h3&gt;
&lt;p&gt;这个客户群由实用主义者组成。前两个采用者群体属于早期市场。然而，为了获得真正的成功，一个公司必须从早期大众开始，赢得主流市场。这些实用主义者与早期采用者有一些相同的能力，能够与技术产生联系。然而，他们受到强烈的实用意识的驱动。他们知道，很多发明最终会成为过眼云烟。因此，在自己投资之前，他们更期望等待，看看其他客户对该技术的使用情况如何。他们希望在进行大量投资之前看到成熟的参考资料。因为这部分人很多（大约 34%），对于任何努力争取大量利润和增长的企业来说，赢得这些人的支持是最基本的。&lt;/p&gt;
&lt;h3 id=&#34;后期大众&#34;&gt;后期大众&lt;/h3&gt;
&lt;p&gt;这个群体主要由保守派组成。后期大众作为一个群体与早期大众一样大（占总人口的 34%）。他们与早期大众有着同样的担忧。此外，他们对传统的信仰远远多于对进步的信仰。早期大众的顾客如果决定购买新技术产品，他们对自己处理该产品的能力感到满意。相比之下，“后期大众 &amp;quot; 的成员则不然。因此，这些保守派更愿意等到某样东西已经成为一种惯例时才购买。&lt;/p&gt;
&lt;h3 id=&#34;落后者&#34;&gt;落后者&lt;/h3&gt;
&lt;p&gt;这个群体是由怀疑论者组成的。这一部分人占总数的 16%。这些人根本不希望与新技术有任何关系。他们唯一一次购买技术产品是当它被深埋在另一个产品中时。这些持怀疑态度的人强烈认为，颠覆性的创新很少能实现他们的承诺。他们总是担心意外的后果。从市场发展的角度来看，落后者通常被认为是不值得追求的。然而，他们对产品功能设置和性能的批评为技术公司提供了宝贵的反馈。&lt;/p&gt;
&lt;h2 id=&#34;鸿沟&#34;&gt;鸿沟&lt;/h2&gt;
&lt;p&gt;在技术采用生命周期中，你可以看到早期采用者和早期大众群体之间的差距。这个差距代表了技术必须跨越的鸿沟。它标志着将左边的群体作为右边的客户群的参考基础而产生的可信度差距。&lt;strong&gt;鸿沟的存在是因为消费者信任属于他们自己的采用者群体的人的推荐。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，这给技术公司带来了一个具有挑战性的困境。&lt;/p&gt;
&lt;p&gt;如果他们还没有从你这里买过东西，你怎么能利用首选参考群体的人呢？&lt;/p&gt;
&lt;p&gt;换句话说，将一个群体的客户作为其他群体的参考是无效的。因此，鸿沟就是这样产生的！&lt;/p&gt;
&lt;p&gt;由于从早期采用者到早期大众的飞跃意味着从早期市场到主流市场的过渡，跨越鸿沟对于新推出的产品 / 技术真正实现市场成功是最重要的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;根据摩尔的说法，成功跨越鸿沟可以通过首先瞄准早期大众中一个非常具体的利基市场来实现。组织试图跨越鸿沟的唯一目标应该是在主流市场上获得一个桥头堡，以创造一个可供参考的实用主义客户群。在这里，细分就是一切：将你所有的营销资源集中在一个特定的细分市场上，并确保你在这个特定的细分市场上成为领导者，然后再去做下一个细分市场。这就是所谓的 “大鱼小池 &amp;quot; 的方法。营销漏斗或 AIDA 模型是一个很好的营销框架，它可以帮助为潜在客户挑选正确的营销技术。此外，确保你的产品提供一个完整的解决方案，并且服务水平高（即整个产品解决方案）。实用主义者对你的产品的用户体验将最终决定他们是否也会激起他们的同行。一旦你在早期大众的不同部分建立了强大的口碑，你就成功地跨越了鸿沟。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;你觉得服务网格目前处于鸿沟理论的哪个阶段呢？你又是何种受众？&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/a305fa93580b&#34; title=&#34;《Crossing the Chasm》丨 NOTES - jianshu.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Crossing the Chasm》丨 NOTES - jianshu.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34; title=&#34;灵雀云 CTO 陈恺：从 “鸿沟理论” 看云原生，哪些技术能够跨越鸿沟？ - infoq.cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;灵雀云 CTO 陈恺：从 “鸿沟理论” 看云原生，哪些技术能够跨越鸿沟？ - infoq.cn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>什么是 Day-2 Operation？</title>
      <link>https://jimmysong.io/blog/what-is-day-2-operation/</link>
      <pubDate>Sat, 20 Mar 2021 21:56:04 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/what-is-day-2-operation/</guid>
      <description>
        
        
        &lt;p&gt;在 IstioCon 2021 上，Istio 社区确定了 2021 年的社区的工作重点是 Day-2 Operation，很多人问我这个词是什么意思。我查了下中文互联网上，没有对这个词的解释，我在网上找到了一些解释，我发现大部分文章的源头都指向了这篇 &lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34; title=&#34;Defining Day-2 Operations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Defining Day-2 Operations&lt;/a&gt;
。因此，在此我将问翻译一下，同时再加上一些我自己的见解。&lt;/p&gt;
&lt;p&gt;下面是笔者对 Day-2 Operation 的理解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;假如将开发一个系统比作种下一棵树，那么 Day-2 Operation 就是系统开花后结果的过程。我们要不断改进这颗树的基因，以实现效益最大化。Day-2 Operation 就是对这个系统优化改进的过程。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day-2-operation-的定义&#34;&gt;Day-2 Operation 的定义&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 不一定是指第 2 天的行动。一旦 “某物 “进入行动，“Day-2 Operation “是指在这个 “某物 “没有被杀死或被 “其他东西 “取代之前的剩余时间段。如下图中展示的软件的生命周期中，从软件被安装之后到被卸载之前的那段时间。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-day-2-operation/008eGmZEly1gorlqmukkij31im0kote7.jpg&#34; data-img=&#34;/blog/what-is-day-2-operation/008eGmZEly1gorlqmukkij31im0kote7.jpg&#34; data-width=&#34;1966&#34; data-height=&#34;744&#34; alt=&#34;image&#34; data-caption=&#34;Day-2 Operation&#34;&gt;
    
  
  &lt;figcaption&gt;Day-2 Operation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当我们审视一个业务流程、应用程序或 IT 基础设施生命中的各个阶段时，有些人喜欢把它们描绘成一个循环过程。我相信这是因为人们倾向于使用 “应用程序的生命周期 “这个词，并以某种方式陷于相信图中必须循环回到起点。各个阶段通常是在时间上向前推进的，而不是把你带回起点。&lt;/p&gt;
&lt;p&gt;假定 “X “称为一个组织或实体所需要的东西，可能是一个业务流程，一个应用程序，或者是一些 IT 基础设施。从技术上讲，每当有人设想 X 的时候，总会有一个起点 —— 我们称它为 “零日”（这是高中物理的管理，时间的起点通常是 T0）。 Day-Zero 可能不是一天：它是提出并记录一套完整的 X 需求所需的时间段，这些活动可能包括高层设计、记录并向某人推销利益、撰写商业案例、寻求资金等。&lt;/p&gt;
&lt;p&gt;这个过程的下一步是构建和部署。Day-1 包括所有活动，从详细（或底层）设计开始，到构建、测试、提出任何所需的流程和人员，以支持 X，使组织受益。在许多情况下，这里可能还涉及一些采购活动。一旦它被安装、设置、配置和批准（“好的开始”），X 就被认为是 “上线 “或 “开放业务”。&lt;/p&gt;
&lt;p&gt;从这一点开始，直到 X 退役、死亡或被替换，我们有 Day-2 操作。这包括保持 X 运行的一系列活动，照看和支持 X，使其以最佳状态运行，确保 X 的运行和交付结果符合最初的意图和期望。监控利用率、确保可用性和成本优化是在通常的内务管理活动基础上增加的，以保持 X 以 “最佳 “的方式运行。&lt;/p&gt;
&lt;p&gt;随着我们周围世界的要求发生变化，组织要决定对 X 的调整或升级，这些都是必然需要的，是被称为整个大修还是仅仅是升级。如果是整体大修，我们可以假设 X 已经退役并被新的系统 Y 所取代。如果新的 X 只是比以前的 X 有了更大的改进，那么 Day-2 Operation 将继续进行，并包含了所有的活动，以逐步改进 X。&lt;/p&gt;
&lt;p&gt;一个简短的补充说明：“不可变系统 “的概念，即人们倾向于通过不允许变化但总是部署新系统来提高可用性，这与上述概念并不冲突。管理不可变系统的过程成为 Day-2 Operation 的一部分。&lt;/p&gt;
&lt;p&gt;对于大多数企业来说，Day-2 Operation 是重复性的。但这是系统为组织产生结果的地方。因此，在 Day-2 Operation 中不断寻求改进，一个能带来最大效益的改进应该是很自然的。&lt;/p&gt;
&lt;h2 id=&#34;评论&#34;&gt;评论&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 目前在中文中暂无统一翻译，我暂且将其翻译为 “Day-2 运营”，这样可能会看起来更像是个敏捷词汇，跟 “精益运营” 比较像。这个命名方式可能来自物理（T0，T1，T2，这样来划分时间段），也可能是来自军事术语。&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34; title=&#34;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age&lt;/a&gt;
 这篇文章中对云时代的软件生命周期 Day0、Day1、Day2 做了比较完整的解释。&lt;/p&gt;
&lt;p&gt;在 IT 领域，Day0、Day1、Day2 指的是软件生命周期的不同阶段。在军事术语中，Day0 是训练的第一天，新兵进入成长阶段。在软件开发中，它代表着设计阶段，在这个阶段，项目需求被指定，解决方案的架构被决定。&lt;/p&gt;
&lt;p&gt;Day1 涉及开发和部署在 Day0 阶段设计的软件。在这个阶段，我们不仅要创建应用程序本身，还要创建它的基础设施、网络、外部服务，并实现这一切的初始配置。&lt;/p&gt;
&lt;p&gt;Day2 是产品发货或提供给客户的时间。在这里，大部分精力都集中在维护、监控和优化系统上。分析系统的行为并做出正确的反应是至关重要的，因为由此产生的反馈循环会一直应用到应用程序的寿命结束。在云时代这三个阶段跟云之前有很大的不同。&lt;/p&gt;
&lt;p&gt;软件准备好后，就开始上线，客户开始使用。Day2 从这里开始，介绍包括软件维护和客户支持在内的内容。软件本身要不断发展，以适应不断变化的需求和客户的要求。在 Day2，主要关注的是建立一个反馈循环。我们监控应用的运行情况，收集用户的反馈意见，并将其发送给开发团队，开发团队将在产品中实现并发布新版本。军事术语 Observe-Orient-Decid-Act 恰好能体现这一阶段的工作内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察：从监控系统中获取信息（资源使用和指标、应用性能监控）。&lt;/li&gt;
&lt;li&gt;定位：对问题进行根本原因分析。&lt;/li&gt;
&lt;li&gt;决定：找到解决出现的问题的方法。&lt;/li&gt;
&lt;li&gt;行动：实施解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如同在作战过程中，这个循环不断重复，正如下图中展示的那样。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-day-2-operation/008eGmZEly1gormccennnj31gi0u0nae.jpg&#34; data-img=&#34;/blog/what-is-day-2-operation/008eGmZEly1gormccennnj31gi0u0nae.jpg&#34; data-width=&#34;1890&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;Day 2 Operation 流程&#34;&gt;
    
  
  &lt;figcaption&gt;Day 2 Operation 流程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;监控程序是基于服务水平协议（SLA）中定义的要求。SLA基于服务水平目标（SLO），它代表了我们的服务水平指标（SLI）的状态。自动化和监控是解决第2天责任的关键。&lt;/p&gt;
&lt;p&gt;有几类工具可以帮助完成 Day2的工作。应用性能监控（APM）类组软件，帮助IT管理员监控应用性能，从而提供高质量的用户体验。在这里我们可以说出Datadog、Dynatrace、SignalFX或Nutanix Xi Epoch。还有一些自动化和编排工具，如Ansible或Kubernetes，它们有助于管理应用环境。这些工具的应用与Day1 的工作相重叠。最后，JIRA 或 GItHub 系统处理客户服务，使用户能够报告与他们正在运行的应用程序有关的问题。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34; title=&#34;Defining Day-2 Operations - ozone.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Defining Day-2 Operations - ozone.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/solutions/day-2-ops/&#34; title=&#34;What is &amp;amp;ldquo;Day-2&amp;amp;rdquo; - about.gitlab.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is &amp;ldquo;Day-2&amp;rdquo; - about.gitlab.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34; title=&#34;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age - codilime.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age - codilime.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - 专注于探索后 Kubernetes 时代的云原生新范式 – Wasm</title>
    <link>https://jimmysong.io/categories/wasm/</link>
    <description>Recent content in Wasm on Jimmy Song - 专注于探索后 Kubernetes 时代的云原生新范式</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2017-2023 Jimmy Song 保留所有权利</copyright>
    <lastBuildDate>Fri, 13 Jan 2023 12:09:40 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/categories/wasm/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>为什么要学习 WebAssembly？</title>
      <link>https://jimmysong.io/blog/why-you-should-learn-wasm/</link>
      <pubDate>Fri, 13 Jan 2023 12:09:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/why-you-should-learn-wasm/</guid>
      <description>
        
        
        &lt;p&gt;2023 年你有什么学习计划？我计划要学习一门新技术——WebAssembly！&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;为什么要学习 WebAssembly？&lt;/h2&gt;
&lt;p&gt;2019 年，Docker 创始人 Solomon Hykes 发布了一条推特在业界引起了轩然大波（见下面的推文），他说如果 2008 年 WebAssembly 和 WASI 就存在的话，他就没必要创建 Docker。一时间，关于 WebAssembly 取代 Docker 的讨论此起彼伏。也是从那时起，WebAssembly 正式进入我的视线。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;If WASM+WASI existed in 2008, we wouldn&amp;#39;t have needed to created Docker. That&amp;#39;s how important it is. Webassembly on the server is the future of computing. A standardized system interface was the missing link. Let&amp;#39;s hope WASI is up to the task! &lt;a href=&#34;https://t.co/wnXQg4kwa4&#34;&gt;https://t.co/wnXQg4kwa4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Solomon Hykes / @shykes@hachyderm.io (@solomonstre) &lt;a href=&#34;https://twitter.com/solomonstre/status/1111004913222324225?ref_src=twsrc%5Etfw&#34;&gt;March 27, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;到了 2021 年，网上突然多了很多关于 WebAssembly 的炒作文章，包括我长期关注的 Istio 也在当年发布的 1.12 版本开始支持 WebAssembly（见 &lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&lt;/a&gt;
），通过引入 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/&#34; title=&#34;WasmPlugin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmPlugin&lt;/a&gt;
 API，使开发人员更方便扩展服务网格和网关。&lt;/p&gt;
&lt;p&gt;最近我看到一篇介绍 WebAssembly 在 2023 年有哪些新趋势的&lt;a href=&#34;https://cloudnative.to/blog/webassembly-5-predictions-for-2023/&#34; title=&#34;文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;
，文章的作者 Matt Butcher 颇有来头，他是 WebAssembly Cloud 公司 Fermyon 的联合创始人和 CEO，也是 Helm、Brigade、CNAB、OAM、Glide 和 Krustlet 的原始创建者之一。通过他的介绍让我笃定，WebAssembly 是一门颇有前景的技术，是时候学习它了。&lt;/p&gt;
&lt;h2 id=&#34;prospect&#34;&gt;WebAssembly 的市场前景&lt;/h2&gt;
&lt;p&gt;更何况 WebAssembly 的应用领域越来越广，像 &lt;a href=&#34;https://wasmedge.org/&#34; title=&#34;WasmEdge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmEdge&lt;/a&gt;
 这样的公司正在使用 Tensorflow 来突破可以使用 Wasm 运行的边界。&lt;a href=&#34;https://www.fermyon.com/&#34; title=&#34;Fermyon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fermyon&lt;/a&gt;
 正在构建用于微服务的 WebAssembly 工具，而 &lt;a href=&#34;https://vercel.com/docs/concepts/functions/edge-functions/wasm&#34; title=&#34;Vercel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vercel&lt;/a&gt;
、&lt;a href=&#34;https://docs.fastly.com/products/compute-at-edge&#34; title=&#34;Fastly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fastly&lt;/a&gt;
、&lt;a href=&#34;https://shopify.engineering/shopify-webassembly&#34; title=&#34;Shopify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shopify&lt;/a&gt;
 和 &lt;a href=&#34;https://developers.cloudflare.com/workers/platform/languages/&#34; title=&#34;Cloudflare&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloudflare&lt;/a&gt;
 使用 WebAssembly 在边缘运行代码。&lt;a href=&#34;https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/&#34; title=&#34;Figma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Figma&lt;/a&gt;
（2022 年以 200 亿美元被 Adobe 公司收购）正在使用 WebAssembly 为其应用程序在浏览器中提供更高的性能，而他们的新母公司 &lt;a href=&#34;https://web.dev/ps-on-the-web/&#34; title=&#34;Adobe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Adobe&lt;/a&gt;
 正在使用 WebAssembly 将他们的桌面应用程序带到 Web。&lt;/p&gt;
&lt;h2 id=&#34;how-to-learn-wasm&#34;&gt;如何学习 WebAssembly？&lt;/h2&gt;
&lt;p&gt;为了学习 WebAssembly，我制定了以下学习目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;了解 WebAssembly 的基本概念，包括它是什么、为什么要使用它、如何在浏览器中运行它；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的语言，这是一种类似于汇编语言的低级语言，可以编译成二进制文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用工具将代码编译成 WebAssembly 格式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 JavaScript 中调用 WebAssembly 模块；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的其他特性，如内存管理、多线程和 WebAssembly System Interface（WASI）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;了解 WebAssembly 如何增强安全防护；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的最佳实践，如代码优化和调试；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Istio 中开发 WebAssembly 插件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习使用 WebAssembly 开发的开源项目；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;materials&#34;&gt;WebAssembly 参考资料&lt;/h2&gt;
&lt;p&gt;下面列出了一些有助于学习 WebAssembly 的参考资料，包括网站和图书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://webassembly.org/&#34; title=&#34;WebAssembly 官网&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 官网&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/WebAssembly&#34; title=&#34;WebAssembly 教程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 教程&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wasdk.github.io/WasmFiddle/&#34; title=&#34;WebAssembly 在线编译器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 在线编译器&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webassembly.org/getting-started/developers-guide/&#34; title=&#34;WebAssembly 学习资源&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 学习资源&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/WebAssembly-Definitive-Guide-Safe-Portable/dp/1492089842/&#34; title=&#34;《WebAssembly：权威指南：安全、快速和可移植的代码，第 1 版，2022 年 1 月》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《WebAssembly：权威指南：安全、快速和可移植的代码，第 1 版，2022 年 1 月》&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wazero.io/&#34; title=&#34;wazero: the zero dependency WebAssembly runtime for Go developers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wazero: the zero dependency WebAssembly runtime for Go developers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;WebAssembly 不仅是用于浏览器端有效弥补 JavaScript 缺陷的一门技术，凭借它的小巧、高效和可移植性在后端也会有很广泛的应用。2023 年，让我们一起来学习 WebAssembly 吧！我也会适时得在云原生社区中创建 Wasm 学习小组，欢迎大家&lt;a href=&#34;https://cloudnative.to/community/join/&#34; title=&#34;加入云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;加入云原生社区&lt;/a&gt;
共同交流学习。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态 - cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/importance-of-wasm-in-istio/&#34; title=&#34;在 Istio 中引入 Wasm 意味着什么？- cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Istio 中引入 Wasm 意味着什么？- cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/webassembly-5-predictions-for-2023/&#34; title=&#34;2023 年 WebAssembly 技术五大趋势预测 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023 年 WebAssembly 技术五大趋势预测 - cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

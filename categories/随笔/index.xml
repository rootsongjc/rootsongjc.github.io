<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song&#39;s Blog – 随笔</title>
    <link>https://jimmysong.io/categories/%E9%9A%8F%E7%AC%94/</link>
    <description>Recent content in 随笔 on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 29 Apr 2024 09:27:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/categories/%E9%9A%8F%E7%AC%94/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>电子书：Kubernetes 网络和 Cilium 网络工程师指南</title>
      <link>https://jimmysong.io/blog/ebook-cilium-for-network-engineer/</link>
      <pubDate>Mon, 29 Apr 2024 09:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/ebook-cilium-for-network-engineer/</guid>
      <description>
        
        
        &lt;p&gt;亲爱的云原生社区的朋友们，我很高兴向大家推荐 Isovalent 最新推出的电子书《&lt;a href=&#34;https://isovalent.com/blog/post/introducing-the-new-kubernetes-networking-and-cilium-for-the-network-engineer-ebook/&#34; title=&#34;Kubernetes 网络和 Cilium 网络工程师指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 网络和 Cilium 网络工程师指南&lt;/a&gt;
》。&lt;/p&gt;
&lt;p&gt;作为一名资深的云原生倡导者，我深知 Kubernetes 网络对于网络工程师来说是一个巨大的挑战。但是，随着 Kubernetes 在企业中的广泛应用，学习 Kubernetes 网络知识已经变得非常重要和紧迫。这本电子书正是为了帮助网络工程师们克服这些挑战而诞生的。&lt;/p&gt;
&lt;p&gt;这本 56 页的电子书由 &lt;em&gt;Isovalent 的 Senior Staff Technical Marketing Engineer&lt;/em&gt; Nico Vibert 撰写，内容涵盖了 Kubernetes 网络的方方面面，包括 Cilium 这个事实上的 Kubernetes 网络层。即使你不是网络工程师，相信你也能轻松理解和学习这本书的内容。&lt;/p&gt;
&lt;p&gt;这本电子书就像一本使用说明手册，为网络工程师们提供了一个循序渐进的学习路径。从 Kubernetes 网络的基础知识，到 Cilium 的高级功能，再到实际的部署和运维，应有尽有。相信这本书一定会成为网络工程师学习 Kubernetes 网络的必备资料。&lt;/p&gt;
&lt;p&gt;根据这本由 Isovalent 推出的电子书《Kubernetes Networking and Cilium: An Instruction Manual for the Network Engineer》的内容，我为大家总结了以下几点。&lt;/p&gt;
&lt;h2 id=&#34;本书亮点&#34;&gt;本书亮点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;全面介绍了 Kubernetes 网络的基础知识，包括容器网络接口 (CNI)、网络模型等，为网络工程师打下坚实的基础。&lt;/li&gt;
&lt;li&gt;深入探讨了 Cilium 这个事实上的 Kubernetes 网络层，详细讲解了它提供的各种功能，如路由、交换、负载均衡、防火墙、监控等。&lt;/li&gt;
&lt;li&gt;系统介绍了如何在 Kubernetes 中配置和管理网络，包括使用 kubectl 命令行工具、应用 YAML 配置文件等。&lt;/li&gt;
&lt;li&gt;重点阐述了 Cilium 的身份感知安全机制，以及如何使用网络策略进行精细化的网络访问控制。&lt;/li&gt;
&lt;li&gt;讲解了 Kubernetes 中的负载均衡机制，包括 ClusterIP、NodePort 和 Ingress 等服务类型。&lt;/li&gt;
&lt;li&gt;探讨了 Kubernetes 集群跨多个集群的联通方案，以及如何实现跨集群的负载均衡和安全策略。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;适读人群&#34;&gt;适读人群&lt;/h2&gt;
&lt;p&gt;这本电子书主要面向 Kubernetes 网络工程师，帮助他们全面掌握 Kubernetes 网络的方方面面知识。即使不是网络工程师，对云原生技术感兴趣的读者也能从中受益，学习 Kubernetes 网络的基础知识。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;笔者正在阅读这本电子书，读书心得将在后续博客中发布。另外我有个朋友正在翻译本书，中文版相信也将很会与大家见面，敬请期待。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>KubeCon EU 2024 巴黎见闻与回顾</title>
      <link>https://jimmysong.io/blog/kubecon-eu-paris-recap/</link>
      <pubDate>Wed, 27 Mar 2024 16:54:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/kubecon-eu-paris-recap/</guid>
      <description>
        
        
        &lt;p&gt;上周我在巴黎参加了 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/&#34; title=&#34;KubeCon EU 2024&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon EU 2024&lt;/a&gt;
，这也是我第一次参加中国以外的 KubeCon。本次大会可谓盛况空前，据说有 1.2 万人参加了会议。本文将为你分享我对本次 KubeCon 的一些观察，主要着重在我关注的服务网格与云原生基础架构领域。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/kubecon-eu-paris-recap/istio-day.jpg&#34; data-img=&#34;/blog/kubecon-eu-paris-recap/istio-day.jpg&#34; data-width=&#34;2499&#34; data-height=&#34;1666&#34; alt=&#34;image&#34; data-caption=&#34;Istio Contributor 在 KubeCon EU Istio 展台&#34;&gt;
    
  
  &lt;figcaption&gt;Istio Contributor 在 KubeCon EU Istio 展台&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;istiocilium-及服务网格&#34;&gt;Istio、Cilium 及服务网格&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
 和 Service Mesh 成为了热门讨论的话题，集中展示了在云原生生态系统中这两项技术的最新进展和应用。本次大会涵盖了从基础设施优化、数据本地化、分布式追踪到多集群部署等多个领域，反映了 Service Mesh 技术在实际应用中的广泛关注和持续创新。&lt;/p&gt;
&lt;h3 id=&#34;数据本地化和全局请求路由&#34;&gt;数据本地化和全局请求路由&lt;/h3&gt;
&lt;p&gt;Pigment 的 Arthur Busser 和 Baudouin Herlicq 分享了如何利用 Kubernetes 和 Istio 实现数据本地化的需求。他们介绍了利用 Istio 基于自定义头部进行请求路由的方法，这对于满足如 GDPR 和 CCPA 等法规的数据驻留要求至关重要。&lt;/p&gt;
&lt;h3 id=&#34;分布式跟踪和可观测性增强&#34;&gt;分布式跟踪和可观测性增强&lt;/h3&gt;
&lt;p&gt;ThousandEyes (part of Cisco) 的 Chris Detsicas 探讨了如何配置 Istio 以使用 OpenTelemetry 实现有效的分布式跟踪，这为微服务生态系统提供了宝贵的可见性，有助于问题诊断和性能优化。&lt;/p&gt;
&lt;h3 id=&#34;多集群部署和流量管理&#34;&gt;多集群部署和流量管理&lt;/h3&gt;
&lt;p&gt;China Mobile 的 Haiwen Zhang 和 Yongxi Zhang 介绍了一个简化 Istio 多集群部署的新方法，该方法使用一个全局唯一的 Istio 控制平面，通过主集群的 Apiserver 实现全局服务发现，自动连接多个集群的容器网络，为 Pod 提供直接网络连接。特别强调了 &lt;a href=&#34;https://github.com/kosmos-io/kosmos&#34; title=&#34;Kosmos 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kosmos 项目&lt;/a&gt;
，它提供了一种新的解决方案，以简化多集群环境下的服务网格部署和管理。&lt;/p&gt;
&lt;p&gt;Google 的 Ameer Abbas 和 John Howard 探讨了如何在基础设施可靠性为 99.9% 的情况下构建出 99.99% 可靠性的服务，并提出了一系列应用架构原型（Archetypes），这些原型可以帮助设计和实现高可靠性的多集群应用程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原型 1：活动 - 被动区域（Active Passive Zones）&lt;/strong&gt; - 在单个区域的两个区域部署所有服务，使用 SQL 数据库的只读副本，通过 L4 负载均衡器实现区域内的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 2：多区域（Multi Zonal）&lt;/strong&gt; - 在单个区域的三个区域部署所有服务，使用高可用性 SQL 数据库，通过全局或区域负载均衡器实现区域内的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 3：活动 - 被动区域（Active Passive Region）&lt;/strong&gt; - 在两个区域的三个区域部署所有服务，使用跨区域复制的 SQL 数据库，通过 DNS 和负载均衡器实现区域间的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 4：隔离区域（Isolated Regions）&lt;/strong&gt; - 在两个区域的三个区域部署所有服务，使用 Spanner 或 CockroachDB 等全局数据库，通过区域负载均衡器和 DNS 实现区域间的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 5：全局（Global）&lt;/strong&gt; - 在两个或更多区域的三个区域部署所有服务，使用 Spanner 或 CockroachDB 等全局数据库，通过全球负载均衡器实现全球范围内的故障转移。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全和零信任架构&#34;&gt;安全和零信任架构&lt;/h3&gt;
&lt;p&gt;多个议题，如 Microsoft 的 Niranjan Shankar 所介绍的，聚焦于在生产环境中加固 Istio 的重要性和方法。他讨论了利用 Istio 与网络策略、第三方 Kubernetes 工具和云提供的安全服务相结合，构建零信任和深层防御架构的步骤和策略。&lt;/p&gt;
&lt;h3 id=&#34;ambient-mesh-的基础设施兼容性及未来&#34;&gt;Ambient Mesh 的基础设施兼容性及未来&lt;/h3&gt;
&lt;p&gt;Benjamin Leggett 和 Yuval Kohavi 引入了一种创新的方法，使 Istio 的 Amibent mode 能够支持任意 Kubernetes CNI，详见 &lt;a href=&#34;https://istio.io/latest/zh/blog/2024/inpod-traffic-redirection-ambient/&#34; title=&#34;Istio 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 博客&lt;/a&gt;
。这一进步解决了 Ambient mesh 中 CNI 支持有限的问题，无需重启应用程序 Pod 即可将其纳入 Ambient mode，这对于简化操作和降低基础设施成本具有重要意义。&lt;/p&gt;
&lt;p&gt;Istio 社区宣布在即将到来的 Istio 1.22 版本，Ambient 模式将成为 beta，详见 &lt;a href=&#34;https://www.cncf.io/blog/2024/03/19/istio-announces-the-beta-release-of-ambient-mode/&#34; title=&#34;CNCF 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 博客&lt;/a&gt;
。多个演讲和讨论聚焦于 Istio Ambient Mesh 的未来，特别是其简化工作负载操作和降低基础设施成本的潜力。Istio Ambient Mesh 的介绍预示了服务网格技术的一个新方向，即无 sidecar 的数据平面架构，提供了更高的性能和更低的资源消耗。&lt;/p&gt;
&lt;h3 id=&#34;sidecar-less-服务网格的革新&#34;&gt;Sidecar-less 服务网格的革新&lt;/h3&gt;
&lt;p&gt;在 KubeCon EU 2024 上，关于 Sidecar 的讨论主要集中在评估和比较使用 Sidecar 与无 Sidecar（如 Istio 的 Ambient Mesh）服务网格模式的优缺点。特别是 Christian Posta 对 Cilium 和 Istio 在无 sidecar 服务网格实现方面的设计决策和权衡进行了深入分析，突出了这种模式在提高性能、降低资源消耗和简化运维操作方面的潜力。通过分析纽约时报从 Istio 过渡到 Cilium 的案例，进一步证明了无 sidecar 模式在处理复杂、多区域服务网格时的有效性，同时指出了在这一转变过程中的挑战和实施考虑。这些讨论预示着服务网格技术未来可能朝向更加灵活和高效的方向发展，其中无 Sidecar 架构可能成为优化云原生应用性能和资源使用的关键策略。&lt;/p&gt;
&lt;h3 id=&#34;cilium-与服务网格的交集&#34;&gt;Cilium 与服务网格的交集&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io&#34; title=&#34;Cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt;
 在 KubeCon EU 2024 上被广泛讨论，作为一种基于 eBPF 的技术，Cilium 不仅被看作是一个高效的容器网络接口（CNI），而且还展示了其在服务网格领域的强大潜力。通过 Isovalent 和其他组织的演讲，Cilium 被展示为一种能够提供连接、观测和保障服务网格安全的先进解决方案。特别是 Cilium 的无 Sidecar 服务网格实现方式被认为是未来方向，其利用 eBPF 技术在不增加传统 Sidecar 代理负担的情况下实现了微服务的安全通信和精细流量管理。此外，Cilium 在服务网格之外的扩展能力，例如在多云网络和负载平衡方面的应用，凸显了其作为云原生生态系统基础设施核心组件的地位。Cilium 的这些讨论和案例研究证明了其在推动服务网格和云原生技术创新方面的重要作用。&lt;/p&gt;
&lt;h2 id=&#34;云原生趋势&#34;&gt;云原生趋势&lt;/h2&gt;
&lt;p&gt;当前云原生领域的几个主要趋势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可持续性和环保意识的增强&lt;/strong&gt;：例如，Deutsche Bahn 将开发者引入其基础设施绿化过程，强调了在设计和运营云原生解决方案时，越来越多的公司开始考虑环境因素。这反映了一个趋势，即企业在追求技术进步的同时，也在努力减少对环境的影响，通过绿色计算和能效优化来实现可持续的技术生态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;人工智能与云原生技术的融合&lt;/strong&gt;：人工智能（AI）正在成为 Kubernetes 和云原生生态系统面临的下一个主要挑战。Nvidia 关于 AI 策略的讨论、CNCF 对 AI 在云原生未来中标准化工作的推动，以及各种关于 AI 和机器学习（ML）集成的工具和平台的更新，都突显了这一点。这一趋势表明，将 AI 和 ML 无缝集成到云原生架构中，不仅可以加速应用开发和部署，还能够提供更加智能和自动化的操作能力。同时 CNCF 还宣布成立 AI WG，并发布了&lt;a href=&#34;https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/&#34; title=&#34;人工智能白皮书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;人工智能白皮书&lt;/a&gt;
。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WebAssembly（Wasm）的兴起&lt;/strong&gt;：Cosmonic 对最新 Wasm 标准的支持，以及 Fermyon 将其开源 Wasm 平台 &lt;a href=&#34;https://www.spinkube.dev/&#34; title=&#34;SpinKube&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpinKube&lt;/a&gt;
 捐赠给 CNCF，显示了 WebAssembly 在云原生应用开发中日益增长的重要性。Wasm 提供了一种高效、安全的方式来运行在浏览器外的客户端和服务器端代码，这对于构建跨平台、高性能的云原生应用尤为重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云原生观测性的强化&lt;/strong&gt;：例如，New Relic 在其可观测性平台中添加了原生 Kubernetes 支持，凸显了对云原生应用的监控、日志记录和性能分析需求的增加。随着云原生架构的复杂性增加，企业需要更加强大的工具来保持系统的透明度和健康，从而优化性能和可靠性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云原生社区的协作和开源精神的强化&lt;/strong&gt;：CNCF 成立&lt;a href=&#34;https://www.cncf.io/people/end-user-technical-advisory-board/&#34; title=&#34;最终用户技术咨询委员会&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最终用户技术咨询委员会&lt;/a&gt;
、Red Hat 与 Docker 合作开发 Testcontainers Cloud 框架等举措，反映了云原生社区致力于促进协作和分享的文化。这种开放的协作精神不仅加速了新技术的发展和采纳，也为云原生生态系统的健康成长提供了坚实的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些趋势共同描绘了一个多元化、持续创新且日益成熟的云原生技术景观，其中可持续性、AI/ML 集成、WebAssembly、加强的可观测性和社区协作是推动这一领域前进的关键因素。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;KubeCon EU 2024 的见闻为我们揭示了云原生技术领域的多个重要进展和未来方向。从服务网格的持续创新到云原生生态系统对环境可持续性的关注，再到人工智能与机器学习技术的深度整合，以及 WebAssembly 在应用开发中的日益重要性，这些趋势共同构成了当前云原生技术的前沿。&lt;/p&gt;
&lt;p&gt;特别值得注意的是，Istio 和 Cilium 在服务网格领域的最新动态，展现了无 Sidecar 架构的潜力以及 eBPF 技术在提升性能、安全性和可观测性方面的作用。这些进展不仅为开发者提供了更为高效和灵活的工具，也为云原生应用的设计和运营提出了新的思路。&lt;/p&gt;
&lt;p&gt;同时，云原生社区的持续发展和对开源精神的坚持，为技术创新和知识共享提供了坚实的基础。通过强化观测性、推动环境可持续性和促进技术标准化，云原生生态正展现出其深厚的发展潜力和广阔的应用前景。&lt;/p&gt;
&lt;p&gt;作为一名观察者和参与者，我深感云原生技术的快速发展给我们带来了前所未有的机遇和挑战。未来，随着技术的不断演进和社区的共同努力，我们有理由相信，云原生技术将在推动数字化转型和创造更加智能、可持续的技术世界方面发挥更大的作用。让我们拭目以待，并积极参与这一令人兴奋的技术旅程。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>为什么要学习 WebAssembly？</title>
      <link>https://jimmysong.io/blog/why-you-should-learn-wasm/</link>
      <pubDate>Fri, 13 Jan 2023 12:09:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/why-you-should-learn-wasm/</guid>
      <description>
        
        
        &lt;p&gt;2023 年你有什么学习计划？我计划要学习一门新技术——WebAssembly！&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;为什么要学习 WebAssembly？&lt;/h2&gt;
&lt;p&gt;2019 年，Docker 创始人 Solomon Hykes 发布了一条推特在业界引起了轩然大波（见下面的推文），他说如果 2008 年 WebAssembly 和 WASI 就存在的话，他就没必要创建 Docker。一时间，关于 WebAssembly 取代 Docker 的讨论此起彼伏。也是从那时起，WebAssembly 正式进入我的视线。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;If WASM+WASI existed in 2008, we wouldn&amp;#39;t have needed to created Docker. That&amp;#39;s how important it is. Webassembly on the server is the future of computing. A standardized system interface was the missing link. Let&amp;#39;s hope WASI is up to the task! &lt;a href=&#34;https://t.co/wnXQg4kwa4&#34;&gt;https://t.co/wnXQg4kwa4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Solomon Hykes / @shykes@hachyderm.io (@solomonstre) &lt;a href=&#34;https://twitter.com/solomonstre/status/1111004913222324225?ref_src=twsrc%5Etfw&#34;&gt;March 27, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;到了 2021 年，网上突然多了很多关于 WebAssembly 的炒作文章，包括我长期关注的 Istio 也在当年发布的 1.12 版本开始支持 WebAssembly（见 &lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&lt;/a&gt;
），通过引入 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/&#34; title=&#34;WasmPlugin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmPlugin&lt;/a&gt;
 API，使开发人员更方便扩展服务网格和网关。&lt;/p&gt;
&lt;p&gt;最近我看到一篇介绍 WebAssembly 在 2023 年有哪些新趋势的&lt;a href=&#34;https://cloudnative.to/blog/webassembly-5-predictions-for-2023/&#34; title=&#34;文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;
，文章的作者 Matt Butcher 颇有来头，他是 WebAssembly Cloud 公司 Fermyon 的联合创始人和 CEO，也是 Helm、Brigade、CNAB、OAM、Glide 和 Krustlet 的原始创建者之一。通过他的介绍让我笃定，WebAssembly 是一门颇有前景的技术，是时候学习它了。&lt;/p&gt;
&lt;h2 id=&#34;prospect&#34;&gt;WebAssembly 的市场前景&lt;/h2&gt;
&lt;p&gt;更何况 WebAssembly 的应用领域越来越广，像 &lt;a href=&#34;https://wasmedge.org/&#34; title=&#34;WasmEdge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmEdge&lt;/a&gt;
 这样的公司正在使用 Tensorflow 来突破可以使用 Wasm 运行的边界。&lt;a href=&#34;https://www.fermyon.com/&#34; title=&#34;Fermyon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fermyon&lt;/a&gt;
 正在构建用于微服务的 WebAssembly 工具，而 &lt;a href=&#34;https://vercel.com/docs/concepts/functions/edge-functions/wasm&#34; title=&#34;Vercel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vercel&lt;/a&gt;
、&lt;a href=&#34;https://docs.fastly.com/products/compute-at-edge&#34; title=&#34;Fastly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fastly&lt;/a&gt;
、&lt;a href=&#34;https://shopify.engineering/shopify-webassembly&#34; title=&#34;Shopify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shopify&lt;/a&gt;
 和 &lt;a href=&#34;https://developers.cloudflare.com/workers/platform/languages/&#34; title=&#34;Cloudflare&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloudflare&lt;/a&gt;
 使用 WebAssembly 在边缘运行代码。&lt;a href=&#34;https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/&#34; title=&#34;Figma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Figma&lt;/a&gt;
（2022 年以 200 亿美元被 Adobe 公司收购）正在使用 WebAssembly 为其应用程序在浏览器中提供更高的性能，而他们的新母公司 &lt;a href=&#34;https://web.dev/ps-on-the-web/&#34; title=&#34;Adobe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Adobe&lt;/a&gt;
 正在使用 WebAssembly 将他们的桌面应用程序带到 Web。&lt;/p&gt;
&lt;h2 id=&#34;how-to-learn-wasm&#34;&gt;如何学习 WebAssembly？&lt;/h2&gt;
&lt;p&gt;为了学习 WebAssembly，我制定了以下学习目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;了解 WebAssembly 的基本概念，包括它是什么、为什么要使用它、如何在浏览器中运行它；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的语言，这是一种类似于汇编语言的低级语言，可以编译成二进制文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用工具将代码编译成 WebAssembly 格式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 JavaScript 中调用 WebAssembly 模块；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的其他特性，如内存管理、多线程和 WebAssembly System Interface（WASI）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;了解 WebAssembly 如何增强安全防护；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的最佳实践，如代码优化和调试；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Istio 中开发 WebAssembly 插件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习使用 WebAssembly 开发的开源项目；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;materials&#34;&gt;WebAssembly 参考资料&lt;/h2&gt;
&lt;p&gt;下面列出了一些有助于学习 WebAssembly 的参考资料，包括网站和图书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://webassembly.org/&#34; title=&#34;WebAssembly 官网&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 官网&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/WebAssembly&#34; title=&#34;WebAssembly 教程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 教程&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wasdk.github.io/WasmFiddle/&#34; title=&#34;WebAssembly 在线编译器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 在线编译器&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webassembly.org/getting-started/developers-guide/&#34; title=&#34;WebAssembly 学习资源&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 学习资源&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/WebAssembly-Definitive-Guide-Safe-Portable/dp/1492089842/&#34; title=&#34;《WebAssembly：权威指南：安全、快速和可移植的代码，第 1 版，2022 年 1 月》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《WebAssembly：权威指南：安全、快速和可移植的代码，第 1 版，2022 年 1 月》&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wazero.io/&#34; title=&#34;wazero: the zero dependency WebAssembly runtime for Go developers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wazero: the zero dependency WebAssembly runtime for Go developers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;WebAssembly 不仅是用于浏览器端有效弥补 JavaScript 缺陷的一门技术，凭借它的小巧、高效和可移植性在后端也会有很广泛的应用。2023 年，让我们一起来学习 WebAssembly 吧！我也会适时得在云原生社区中创建 Wasm 学习小组，欢迎大家&lt;a href=&#34;https://cloudnative.to/community/join/&#34; title=&#34;加入云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;加入云原生社区&lt;/a&gt;
共同交流学习。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态 - cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/importance-of-wasm-in-istio/&#34; title=&#34;在 Istio 中引入 Wasm 意味着什么？- cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Istio 中引入 Wasm 意味着什么？- cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/webassembly-5-predictions-for-2023/&#34; title=&#34;2023 年 WebAssembly 技术五大趋势预测 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023 年 WebAssembly 技术五大趋势预测 - cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>什么是 tproxy 透明代理？</title>
      <link>https://jimmysong.io/blog/what-is-tproxy/</link>
      <pubDate>Mon, 21 Nov 2022 11:09:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/what-is-tproxy/</guid>
      <description>
        
        
        &lt;p&gt;在 Istio 最新的 Ambient 模式中，使用了 tproxy 做透明流量劫持（&lt;a href=&#34;https://jimmysong.io/blog/ambient-mesh-l4-traffic-path/&#34; title=&#34;见此博客&#34;&gt;见此博客&lt;/a&gt;
），这与 Sidecar 模式中基于 IPtables 的流量劫持方式有些许不同，这篇文文章，我们就就一起来探究下什么是 tproxy。&lt;/p&gt;
&lt;h2 id=&#34;what-is-proxy&#34;&gt;什么是代理？&lt;/h2&gt;
&lt;p&gt;在介绍透明代理之前，我们先了解下什么是代理。&lt;/p&gt;
&lt;h3 id=&#34;proxy-functionalities&#34;&gt;代理的功能&lt;/h3&gt;
&lt;p&gt;代理在互联网中的用途非常广泛，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存请求：加快网络响应速度，作用类似于 CDN；&lt;/li&gt;
&lt;li&gt;请求过滤：用于网络监管，屏蔽或允许对某些主机、网站的访问；&lt;/li&gt;
&lt;li&gt;请求转发：用于负载均衡或作为网络中继；&lt;/li&gt;
&lt;li&gt;流量管理：对进出代理的流量进行细粒度的管理，例如按百分比发布到不同的后端、超时和重试设置、熔断等；&lt;/li&gt;
&lt;li&gt;安全审计：记录和限制客户端请求，用于计费或审计；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;proxies-types&#34;&gt;代理的分类&lt;/h3&gt;
&lt;p&gt;代理的分类方式有很多，下图根据代理的位置将其划分为了两类：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-tproxy/proxy.svg&#34; data-img=&#34;/blog/what-is-tproxy/proxy.svg&#34; alt=&#34;image&#34; data-caption=&#34;代理示意图&#34;&gt;
    
  
  &lt;figcaption&gt;代理示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前向代理（Forward Proxy）：运行在客户端侧，代替客户端想服务端发送请求，例如我们日常使用的各种科学上网代理；&lt;/li&gt;
&lt;li&gt;反向代理（Reverse Proxy）：代替服务端接受互联网或外部请求，然后将请求路由到对应的服务端，例如各种 Web 服务器，&lt;a href=&#34;https://jimmysong.io/awesome-cloud-native/#proxy&#34; title=&#34;在这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;
你可以看到一个代理列表；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代理可能与客户端或服务器位于同一节点（或网络空间，如 Kubernetes 中的 Pod），也可以位于远端。另外还可以根据代理对客户端或服务端是否可见（visible）来分为透明代理和非透明代理。下图展示了客户端（A）通过代理（B）向服务端（C）发送请求的过程。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-tproxy/transparent-proxy.svg&#34; data-img=&#34;/blog/what-is-tproxy/transparent-proxy.svg&#34; alt=&#34;image&#34; data-caption=&#34;非透明代理和透明代理&#34;&gt;
    
  
  &lt;figcaption&gt;非透明代理和透明代理&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非透明代理：客户端需要修改目的地址为代理服务器的地址，并使用代理协议连接代理服务器；&lt;/li&gt;
&lt;li&gt;透明代理：所谓透明代理，即客户端和服务端感知不到代理的存在，客户端无需修改目的地址，也不需要采用代理协议连接代理服务器，所有目的地址转换都是在透明代理中完成的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-use-tproxy&#34;&gt;使用 tproxy 透明代理&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tproxy&lt;/code&gt; 是 Linux 的内核模块（自 Linux 2.2 版本开始引入），用于实现透明代理，其名称中的字母 &lt;code&gt;t&lt;/code&gt; 即代表透明（transparent）。&lt;/p&gt;
&lt;p&gt;要使用透明代理首先需要把指定的数据包使用 iptables 拦截到指定的网卡上，然后在该网卡监听并转发数据包。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;tproxy&lt;/code&gt; 实现透明代理的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先需要实现流量拦截：在 iptables 的 &lt;code&gt;PREROUTING&lt;/code&gt; 链的 &lt;code&gt;mangle&lt;/code&gt; 表中创建一个规则，拦截流量发送给 tproxy 处理，例如 &lt;code&gt;iptables -t mangle -A PREROUTING -p tcp -dport 9080 -j TPROXY --on-port 15001 --on-ip 127.0.0.1 --tproxy-mark 0x1/0x1&lt;/code&gt;，给所有目的地为 &lt;code&gt;9080&lt;/code&gt; 端口的 TCP 数据包打上标记 &lt;code&gt;1&lt;/code&gt;，你还可以指定来源 IP 地址或者 &lt;a href=&#34;https://ipset.netfilter.org/&#34; title=&#34;IP 集&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IP 集&lt;/a&gt;
，进一步缩小标记范围，tproxy 监听在 &lt;code&gt;15001&lt;/code&gt; 端口；&lt;/li&gt;
&lt;li&gt;创建一个路由规则，将所有带有标记 &lt;code&gt;1&lt;/code&gt; 的数据包查找特定的路由表：例如 &lt;code&gt;ip rule add fwmark 1 lookup 100&lt;/code&gt;，让所有 &lt;code&gt;fwmark&lt;/code&gt; 为 1 的数据包查找 &lt;code&gt;100&lt;/code&gt; 路由表；&lt;/li&gt;
&lt;li&gt;将数据包映射到特定的本地地址：例如 &lt;code&gt;ip rule add local 0.0.0.0/0 dev lo table 100&lt;/code&gt;，在 &lt;code&gt;100&lt;/code&gt; 路由表中将所有 IPv4 地址声明为本地，当然这只是一个例子，实际使用时需要请将特定的 IP 的数据包转发到本地的 &lt;code&gt;lo&lt;/code&gt; 回环网卡；&lt;/li&gt;
&lt;li&gt;至此流量已被拦截到 tproxy 的监听端口 &lt;code&gt;15001&lt;/code&gt;（从 Linux 内核空间进入用户空间），你可以编写网络应用处理数据包或使用 &lt;a href=&#34;http://www.squid-cache.org/&#34; title=&#34;Squid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Squid&lt;/a&gt;
 或 &lt;a href=&#34;https://www.envoyproxy.io/&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;
 等支持 tproxy 的软件来处理数据包；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pros&#34;&gt;透明代理的优点&lt;/h2&gt;
&lt;p&gt;透明代理具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;透明代理提供更高的带宽并减少传输延迟，从而提高服务质量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户无需配置网络和主机；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;企业可以控制对其网络服务的访问；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户可以通过透明代理连接互联网以绕过一些监管；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cons&#34;&gt;透明代理的缺点&lt;/h2&gt;
&lt;p&gt;透明代理有以下缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果透明代理配置不当，可能导致用户无法连接互联网，而对于不知情的用户来说，他们无法排查和修改透明代理中的错误；&lt;/li&gt;
&lt;li&gt;透明代理的安全性无法得到保证，因为被拦截的用户流量可能被透明代理篡改；&lt;/li&gt;
&lt;li&gt;透明代理可能缓存用户信息，导致用户隐私泄露的风险；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;透明代理作为代理中的一类重要类型，它的用途广泛，不论是 xray、clash 等代理软件，还是 Istio 服务网格中得使用了应用。了解它的原理和工作方式有助于我们科学正确的使用代理，而是否使用透明代理取决于你对它的信任和了解程度。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kristrev/tproxy-example&#34; title=&#34;tproxy-example - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tproxy-example - github.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://powerdns.org/tproxydoc/tproxy.md.html&#34; title=&#34;Linux transparent proxy support - powerdns.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux transparent proxy support - powerdns.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.squid-cache.org/Features/Tproxy4&#34; title=&#34;Feature: TPROXY version 4.1&amp;#43; Support - wiki.squid-cache.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Feature: TPROXY version 4.1+ Support - wiki.squid-cache.org&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>什么是零信任？</title>
      <link>https://jimmysong.io/blog/what-is-zero-trust/</link>
      <pubDate>Wed, 22 Jun 2022 20:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/what-is-zero-trust/</guid>
      <description>
        
        
        &lt;p&gt;零信任（Zero Trust）是一种安全理念，而不是一种所有安全团队都要遵循的最佳实践。零信任概念的提出是为了给云原生世界带来更安全的网络。零信任是一种理论状态，即网络内的所有消费者都不仅没有任何权限，而且也不具备对周围网络的感知。&lt;/p&gt;
&lt;h2 id=&#34;零信任的基础&#34;&gt;零信任的基础&lt;/h2&gt;
&lt;p&gt;零信任网络中的所有用户，包括机器和人类，都需要通过一个密码学验证的身份。要是实践零信任，需要从引入用户身份开始，然后考虑限制用户的最小访问权限。零信任实践的基础是认证和授权，这是比起传统的安全策略来说，零信任中的认证变得更加严格，而授权将变得更加细化。举个例子，传统的授权是：“用户 A 可以访问数据中心 D 吗”，而在零信任的框架下将变成“在某个特定的时间点，在某个特定的地区，使用某个特定的设备的用户 A 可以访问某个特定应用中的某个特定文件吗？”&lt;/p&gt;
&lt;h2 id=&#34;越来越细化的授权&#34;&gt;越来越细化的授权&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，我们使用 RBAC 来管理权限。所有用户都是以组为基础来授予或拒绝访问权限，单个用户（服务账户）会被授予过多的访问权限。零信任的一个重要特征就是更细的粒度，基于角色来授予访问权限是不够安全的。我们需要细化用户对单一资源在限定时间内的访问权限。这正好与微服务背后的原则相契合——随着服务和数据被分解成更小的部分，就有可能允许我们细化地位服务授予访问权限。&lt;/p&gt;
&lt;h2 id=&#34;有时间限制的授权&#34;&gt;有时间限制的授权&lt;/h2&gt;
&lt;p&gt;关于授权，我们往往会存在一种误解，即一个用户一旦被认证和授权，他就成了一个“受信任”的用户，该用户就可以随时的对系统进行访问。然后，在零信任网络中，没有受信任的用户或设备。用户的每一次访问都需要经过认证和授权。而且，授权还会有一个时间窗口，用户只能在这个规定的实践窗口中执行规定的动作。&lt;/p&gt;
&lt;h2 id=&#34;如何在企业内实行零信任网络&#34;&gt;如何在企业内实行零信任网络&lt;/h2&gt;
&lt;p&gt;因为网络是企业系统的命脉之一，牵一发而动全身，要在企业内实行零信任网络，通常需要战略高层管理人员接纳零信任，通过自上而下的方式强加给安全团队。然后渐进式的改进你的网络，从一个关键业务开始，使其变成零信任的。&lt;/p&gt;
&lt;p&gt;在零信任网络里，默认是拒绝一切访问。需要在应用程序开发中，积极主动的允许来自应用程序的某些适当的请求。身份是零信任的基础，而不是网络。零信任的关注对象是访问点、身份认证与授权和攻击面。对于云原生应用，因为它们的生命周期短暂且是动态的，为了实现零信任，你必须为每个访问点配置一个规则，不断更新应用程序的证书和访问规则，这时候手动配置几乎是不可能的，你必须实现自动化。&lt;/p&gt;
&lt;p&gt;在 IstioCon 2022 的&lt;a href=&#34;https://events.istio.io/istiocon-2022/sessions/zero-trust-istio/&#34; title=&#34;主题演讲&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;主题演讲&lt;/a&gt;
 有提到，&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
 正在成为零信任的一个重要组成部分。其中最主要的是面向身份的控制，而不是面向网络的控制。这方面的核心原则在谷歌白皮书&lt;a href=&#34;https://cloud.google.com/blog/products/identity-security/beyondprod-whitepaper-discusses-cloud-native-security-at-google&#34; title=&#34;《BeyondProd：云原生安全的新方法》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《BeyondProd：云原生安全的新方法》&lt;/a&gt;
上有描写。&lt;/p&gt;
&lt;p&gt;如果我们能将身份概念扩展到用户，并为我们提供灵活而丰富的策略机制来指定、监控和跟踪访问控制，我们就能达到一个可操作的零信任架构 —— 将用户、服务和数据统一到一个管理层。我所工作的公司 &lt;a href=&#34;https://tetrate.io&#34; title=&#34;Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt;
 创建了 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34; title=&#34;Tetrate Service Bridge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge&lt;/a&gt;
 —— 可供大型组织使用的管理平面，也是践行了零信任的理念。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;零信任是一种安全理念，它的基础是认证和授权。但比起传统网络安全方法来说，零信任具有如下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统中的所有工作负载都有一个密码学验证的身份&lt;/li&gt;
&lt;li&gt;零信任网络默认拒绝所有访问&lt;/li&gt;
&lt;li&gt;具有更细粒度的访问授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了在云原生应用中实行零信任，你需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自上而下的推行&lt;/li&gt;
&lt;li&gt;从关键业务入口&lt;/li&gt;
&lt;li&gt;建立自动化工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;下面有一些资料你可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lib.jimmysong.io/translation/mtls-guide/&#34; title=&#34;写给 Kubernetes 工程师的 mTLS 指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;写给 Kubernetes 工程师的 mTLS 指南&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lib.jimmysong.io/service-mesh-devsecops/&#34; title=&#34;利用服务网格为基于微服务的应用程序实施 DevSecOps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用服务网格为基于微服务的应用程序实施 DevSecOps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/blog/istio-has-applied-to-join-the-cncf/&#34; title=&#34;Istio 捐献给 CNCF 意味着什么？&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 捐献给 CNCF 意味着什么？&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>开源项目千千万，如何发现好项目？</title>
      <link>https://jimmysong.io/blog/oss-insight/</link>
      <pubDate>Thu, 02 Jun 2022 10:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/oss-insight/</guid>
      <description>
        
        
        &lt;p&gt;不知道大家听说没有 PingCAP 推出的一个 OSSInsight.io 网站，可以根据 GitHub 上的事件，提供开源软件洞察，这个项目也开源在 &lt;a href=&#34;https://github.com/pingcap/ossinsight&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;
 上。它可以提供以下方面的洞察能力，有点类似于 Google Analytics、Trends：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较 GitHub 仓库历史 Star 趋势图&lt;/li&gt;
&lt;li&gt;开发者地理位置分布&lt;/li&gt;
&lt;li&gt;开发者贡献时间热力图&lt;/li&gt;
&lt;li&gt;编码活力，如每月 PR 数量、代码行数变化&lt;/li&gt;
&lt;li&gt;分类趋势排名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网站截图&#34;&gt;网站截图&lt;/h2&gt;
&lt;p&gt;以下图片来自 &lt;a href=&#34;https://ossinsight.io/blog/explore-deep-in-4.6-billion-github-events/&#34; title=&#34;OSSInsight 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OSSInsight 博客&lt;/a&gt;
，展示了该网站的一些功能。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/oss-insight/e6c9d24ely1h2trup1v5bj20k00c5my9.jpg&#34; data-img=&#34;/blog/oss-insight/e6c9d24ely1h2trup1v5bj20k00c5my9.jpg&#34; data-width=&#34;720&#34; data-height=&#34;437&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 和 Moby 的标记 star 的人员地理分布&#34;&gt;
    
  
  &lt;figcaption&gt;Kubernetes 和 Moby 的标记 star 的人员地理分布&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/oss-insight/e6c9d24ely1h2trw4iqpyj20wn0gvgnp.jpg&#34; data-img=&#34;/blog/oss-insight/e6c9d24ely1h2trw4iqpyj20wn0gvgnp.jpg&#34; data-width=&#34;1175&#34; data-height=&#34;607&#34; alt=&#34;image&#34; data-caption=&#34;K8s（上）和 Moby（下）的月度推送和提交&#34;&gt;
    
  
  &lt;figcaption&gt;K8s（上）和 Moby（下）的月度推送和提交&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/oss-insight/e6c9d24ely1h2ts5cig5kj21mw0u00xv.jpg&#34; data-img=&#34;/blog/oss-insight/e6c9d24ely1h2ts5cig5kj21mw0u00xv.jpg&#34; data-width=&#34;2120&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;分类排名&#34;&gt;
    
  
  &lt;figcaption&gt;分类排名&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;你可以在首页输入一个 GitHub 仓库，查看该仓库的一些洞察信息。我查看了我的 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/&#34; title=&#34;&amp;lt;code&amp;gt;rootsongjc/kubernetes-handbook&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;rootsongjc/kubernetes-handbook&lt;/code&gt;&lt;/a&gt;
 之后，发现它还以获得关注者的公司信息，如下图。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/oss-insight/e6c9d24ely1h2trz8bpqfj21di0u0gq4.jpg&#34; data-img=&#34;/blog/oss-insight/e6c9d24ely1h2trz8bpqfj21di0u0gq4.jpg&#34; data-width=&#34;1782&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;rootsongjc/kubernetes-handbook 关注者的公司分布&#34;&gt;
    
  
  &lt;figcaption&gt;rootsongjc/kubernetes-handbook 关注者的公司分布&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这个网站有点类似于 CNCF 推出的 &lt;a href=&#34;https://devstats.cncf.io/&#34; title=&#34;DevStats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevStats&lt;/a&gt;
，不过 DevStats 只能洞察 CNCF 托管的项目。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/oss-insight/e6c9d24ely1h2ts2o2rirj21mw0u00zv.jpg&#34; data-img=&#34;/blog/oss-insight/e6c9d24ely1h2ts2o2rirj21mw0u00zv.jpg&#34; data-width=&#34;2120&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;DevStats 页面&#34;&gt;
    
  
  &lt;figcaption&gt;DevStats 页面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;评论&#34;&gt;评论&lt;/h2&gt;
&lt;p&gt;OSSInsight 也可以算是 CHAOSS 类软件的一种，比如 Linux 基金会下的 CHAOSS（Community Health Analytics Open Source Software）工作组有一个开源项目 &lt;a href=&#34;https://chaoss.github.io/grimoirelab/&#34; title=&#34;GrimoireLab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GrimoireLab&lt;/a&gt;
 就是做软件开发分析的。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/oss-insight/e6c9d24ely1h2ts7e6aiuj21ml0u078o.jpg&#34; data-img=&#34;/blog/oss-insight/e6c9d24ely1h2ts7e6aiuj21ml0u078o.jpg&#34; data-width=&#34;2109&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;GrimoireLab 网站页面&#34;&gt;
    
  
  &lt;figcaption&gt;GrimoireLab 网站页面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果你关注开源和技术趋势的话，网上还有一些类似的 GitHub 趋势网站，大家可以根据自己的需要选用。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>再见 KataCoda！</title>
      <link>https://jimmysong.io/blog/goodbye-katacoda/</link>
      <pubDate>Wed, 01 Jun 2022 16:27:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/goodbye-katacoda/</guid>
      <description>
        
        
        &lt;figure class=&#34;mx-auto text-center&#34;&gt;
    &lt;img src=&#34;katacoda-logo.webp&#34; loading=&#34;lazy&#34; decoding=&#34;async&#34;
         alt=&#34;Katacoda Logo&#34;data-img=&#34;katacoda-logo.webp&#34;
         data-caption=&#34;Katacoda Logo&#34;
         
         
         data-width=&#34;512&#34;
         data-height=&#34;256&#34;
         
         
    /&gt;&lt;figcaption&gt;
            Katacoda Logo
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;近日听闻 O&amp;rsquo;Reilly 将永久关闭在线学习网站 KataCoda，对于广大程序员和学习者来说，这无疑是一件痛心疾首的事情，以后我们再也看不到那只会变成的功夫猫了。&lt;/p&gt;
&lt;h2 id=&#34;katacoda-简介&#34;&gt;KataCoda 简介&lt;/h2&gt;
&lt;p&gt;KataCoda 成立于 2016 年，它是一个在线学习平台，提供了上百个交互课程，用户可以登录免费学习。另外用户还可以基于 KataCoda 提供的基础镜像来构建和发布自己的在线课程，这一切都是免费的。&lt;/p&gt;
&lt;p&gt;你可以根据提示，在一个临时的容器环境中操作，输入命令、观察结果，这种实时的反馈式学习方式，让你不需要再为准备环境而操心，大大降低了众多技术的上手门槛，可以说这种方式对于计算机技术教育来说是一种“革命式”的。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/goodbye-katacoda/katacoda-ui.jpg&#34; data-img=&#34;/blog/goodbye-katacoda/katacoda-ui.jpg&#34; data-width=&#34;2122&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;KataCoda 网站界面&#34;&gt;
    
  
  &lt;figcaption&gt;KataCoda 网站界面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这些交互环境没有任何网络限制，你可以访问任何网站，还可以构建临时的公开网站让互联网中的所有用户访问。这种便利可以说是云原生或者容器时代赋予我们的，&lt;/p&gt;
&lt;h2 id=&#34;oreilly-为什么关闭-katacoda&#34;&gt;O&amp;rsquo;Reilly 为什么关闭 KataCoda？&lt;/h2&gt;
&lt;p&gt;O&amp;rsquo;Reilly 与 2019 年底收购了 KataCoda，如今关闭该网站应该也实属无奈。在 O&amp;rsquo;Reilly 官网发布的 &lt;a href=&#34;https://www.oreilly.com/online-learning/leveraging-katacoda-technology.html&#34; title=&#34;仅在 O&amp;amp;rsquo;Reilly 内部利用 Katacoda 技术以及关闭  katacoda.com 的决定&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;仅在 O&amp;rsquo;Reilly 内部利用 Katacoda 技术以及关闭  katacoda.com 的决定&lt;/a&gt;
 这篇博客中，我们可以获得以下数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KataCoda 有 28 万会员&lt;/li&gt;
&lt;li&gt;KataCoda 上有超过 387,866 名独立用户已花费超过 74,711 小时在平台上学习&lt;/li&gt;
&lt;li&gt;O&amp;rsquo;Reilly 有 280 万会员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上数据仍然无法支撑 KataCoda 高昂的运营成本，主要是因为免费课程被滥用，比如用来挖矿，发送不良信息（所有免费课程连接互联网没有任何限制而且网速极快）。&lt;/p&gt;
&lt;h2 id=&#34;katacoda-关闭之后怎么办&#34;&gt;KataCoda 关闭之后怎么办？&lt;/h2&gt;
&lt;p&gt;KataCoda 上的很多免费课程其实都有在 GitHub 上开源，只有有另一个平台来托管，这些课程就可以继续使用。KataCoda 关闭后，还有众多交互式课程平台可以选择，比如下面这两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://killercoda.com/&#34; title=&#34;Killercoda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Killercoda&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudyuga.guru/&#34; title=&#34;CloudYuga&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CloudYuga&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://instruqt.com/&#34; title=&#34;Instruqt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instruqt&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 O&amp;rsquo;Reilly 关闭 KataCoda 你有什么想法，欢迎在下面留言评论。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>跨越鸿沟：理解鸿沟理论</title>
      <link>https://jimmysong.io/blog/crossing-the-chasm/</link>
      <pubDate>Sun, 09 Jan 2022 10:43:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/crossing-the-chasm/</guid>
      <description>
        
        
        &lt;p&gt;最近为某网站撰写服务网格技术的 2021 年总结，笔者关注该领域也有 4 年时间了，再结合自己最近这几年对云原生行业发展的观察，越发觉得《跨越鸿沟》（Crossing the chasm）这本书中所写的新技术的推广生命周期一一应验了。虽然该理论由 Jeffery Moore 于 1991 年提出，距今已有 30 年时间，但该理论至今依然奏效，另外该理论也在 &lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;CNCF 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 项目&lt;/a&gt;
的成熟度划分中得到应用，还有人指出过&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34; title=&#34;云原生技术需要跨越的鸿沟&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生技术需要跨越的鸿沟&lt;/a&gt;
。本文将为读者分享一些关于”鸿沟理论“有关的一些知识，希望能够引发大家对于新技术推广的一些思考。&lt;/p&gt;
&lt;h2 id=&#34;什么是鸿沟理论&#34;&gt;什么是鸿沟理论？&lt;/h2&gt;
&lt;p&gt;鸿沟理论指的就是高科技产品在市场营销过程中遭遇的最大障碍：高科技企业的早期市场和主流市场之间存在着一条巨大的鸿沟，能否顺利跨越鸿沟并进入主流市场，成功赢得实用主义者的支持，就决定了一项高科技产品的成败。实际上每项新技术都会经历鸿沟。关键在予采取适当的策略令高科技企业成功地“跨越鸿沟”，摩尔在这本书中就告诉了人们一些欠经考验的制胜秘诀。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;基于经典的钟形曲线分布，“跨越鸿沟 &amp;quot; 是一个将新技术的采用随时间推移而可视化的概念：从一小撮早期采用者开始，经过大规模的中端市场，最终进入最抗拒变化的消费者手中。&lt;/p&gt;
&lt;p&gt;1962 年，社会学家 &lt;a href=&#34;https://en.wikipedia.org/wiki/Everett_Rogers&#34; title=&#34;Everett Rogers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Everett Rogers&lt;/a&gt;
 出版了 &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffusion_of_innovations&#34; title=&#34;Diffusion of Innovasions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Diffusion of Innovasions&lt;/a&gt;
（创新扩散）一书。在这本书中，他根据消费者的购买行为，将他们分为不同的群体。他以 500 多项扩散研究的结果为基础进行分类。今天，这个模型被称为“技术采用生命周期”。这个模型全面地描述了新技术产品或创新的采用或接受情况。在《跨越鸿沟》一书中，杰弗里・摩尔根据扩散生命周期中的客户群体，阐述了成功锁定主流消费者的营销技巧。&lt;/p&gt;
&lt;h2 id=&#34;客户群体&#34;&gt;客户群体&lt;/h2&gt;
&lt;p&gt;基于人口学和心理学特征，客户群保护以下五种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者&lt;/li&gt;
&lt;li&gt;早期采用者&lt;/li&gt;
&lt;li&gt;早期大众&lt;/li&gt;
&lt;li&gt;后期大众&lt;/li&gt;
&lt;li&gt;落后者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/crossing-the-chasm/crossing-the-chasm.jpg&#34; data-img=&#34;/blog/crossing-the-chasm/crossing-the-chasm.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;900&#34; alt=&#34;image&#34; data-caption=&#34;图：”鸿沟理论“客户分布情况&#34;&gt;
    
  
  &lt;figcaption&gt;图：”鸿沟理论“客户分布情况&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;分布情况&#34;&gt;分布情况&lt;/h2&gt;
&lt;p&gt;正如可以观察到的，技术采用的生命周期有一个钟形曲线。各个分界线大约相当于标准差的落点。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者约占总人口的 2.5%&lt;/li&gt;
&lt;li&gt;早期采用者约占 13.5%&lt;/li&gt;
&lt;li&gt;早期大众和后期大众均为 34%&lt;/li&gt;
&lt;li&gt;落后者占剩余的 16%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个群体都代表着一个独特的心理特征，即心理和人口特征的组合。因此，针对这些群体的营销需要与其他群体完全不同的策略。营销人员通过更好地了解这些群体之间的差异，可以通过正确的营销技术更好地锁定所有这些消费者。&lt;/p&gt;
&lt;h3 id=&#34;创新者&#34;&gt;创新者&lt;/h3&gt;
&lt;p&gt;创新者是技术爱好者。这是第一个有可能投资于你产品的消费者群体。创新者积极地追求新的产品和技术。有时，他们甚至在公司启动正式的营销计划之前就开始寻求创新。这是因为技术在他们的生活或业务中占据了核心利益。对于这个客户群体来说，产品功能组合的完整性或性能是次要的。&lt;/p&gt;
&lt;p&gt;不幸的是，在任何特定的细分市场中，都没有很多创新者（大约 2.5%）。通常情况下，他们不愿意为新产品付出很多。尽管如此，赢得他们是很重要的，因为他们的认可为市场上的其他消费者提供了必要的保证。此外，技术爱好者可以作为一个测试小组，在面向主流市场之前进行必要的修改。&lt;/p&gt;
&lt;h3 id=&#34;早期采用者&#34;&gt;早期采用者&lt;/h3&gt;
&lt;p&gt;和创新者一样，早期采用者也是有远见的人，他们在新产品的生命周期的早期就接受了新产品的概念。然而，与创新者不同，他们不是技术专家。相反，他们是有远见的人，不只是在寻找一种改进，而且是一种革命性的突破。因此，他们愿意承担高风险，尝试新事物。他们是对价格最不敏感的客户群体，对产品的功能设置和性能要求很高。&lt;/p&gt;
&lt;p&gt;早期采用者在做出购买决定时不依赖成熟的参考资料。相反，他们更愿意依靠自己的直觉和眼光。此外，他们愿意作为其他采用者群体的参考。由于有远见的人善于提醒其他人群，他们是最重要的争取对象。&lt;/p&gt;
&lt;h3 id=&#34;早期大众&#34;&gt;早期大众&lt;/h3&gt;
&lt;p&gt;这个客户群由实用主义者组成。前两个采用者群体属于早期市场。然而，为了获得真正的成功，一个公司必须从早期大众开始，赢得主流市场。这些实用主义者与早期采用者有一些相同的能力，能够与技术产生联系。然而，他们受到强烈的实用意识的驱动。他们知道，很多发明最终会成为过眼云烟。因此，在自己投资之前，他们更期望等待，看看其他客户对该技术的使用情况如何。他们希望在进行大量投资之前看到成熟的参考资料。因为这部分人很多（大约 34%），对于任何努力争取大量利润和增长的企业来说，赢得这些人的支持是最基本的。&lt;/p&gt;
&lt;h3 id=&#34;后期大众&#34;&gt;后期大众&lt;/h3&gt;
&lt;p&gt;这个群体主要由保守派组成。后期大众作为一个群体与早期大众一样大（占总人口的 34%）。他们与早期大众有着同样的担忧。此外，他们对传统的信仰远远多于对进步的信仰。早期大众的顾客如果决定购买新技术产品，他们对自己处理该产品的能力感到满意。相比之下，“后期大众 &amp;quot; 的成员则不然。因此，这些保守派更愿意等到某样东西已经成为一种惯例时才购买。&lt;/p&gt;
&lt;h3 id=&#34;落后者&#34;&gt;落后者&lt;/h3&gt;
&lt;p&gt;这个群体是由怀疑论者组成的。这一部分人占总数的 16%。这些人根本不希望与新技术有任何关系。他们唯一一次购买技术产品是当它被深埋在另一个产品中时。这些持怀疑态度的人强烈认为，颠覆性的创新很少能实现他们的承诺。他们总是担心意外的后果。从市场发展的角度来看，落后者通常被认为是不值得追求的。然而，他们对产品功能设置和性能的批评为技术公司提供了宝贵的反馈。&lt;/p&gt;
&lt;h2 id=&#34;鸿沟&#34;&gt;鸿沟&lt;/h2&gt;
&lt;p&gt;在技术采用生命周期中，你可以看到早期采用者和早期大众群体之间的差距。这个差距代表了技术必须跨越的鸿沟。它标志着将左边的群体作为右边的客户群的参考基础而产生的可信度差距。&lt;strong&gt;鸿沟的存在是因为消费者信任属于他们自己的采用者群体的人的推荐。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，这给技术公司带来了一个具有挑战性的困境。&lt;/p&gt;
&lt;p&gt;如果他们还没有从你这里买过东西，你怎么能利用首选参考群体的人呢？&lt;/p&gt;
&lt;p&gt;换句话说，将一个群体的客户作为其他群体的参考是无效的。因此，鸿沟就是这样产生的！&lt;/p&gt;
&lt;p&gt;由于从早期采用者到早期大众的飞跃意味着从早期市场到主流市场的过渡，跨越鸿沟对于新推出的产品 / 技术真正实现市场成功是最重要的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;根据摩尔的说法，成功跨越鸿沟可以通过首先瞄准早期大众中一个非常具体的利基市场来实现。组织试图跨越鸿沟的唯一目标应该是在主流市场上获得一个桥头堡，以创造一个可供参考的实用主义客户群。在这里，细分就是一切：将你所有的营销资源集中在一个特定的细分市场上，并确保你在这个特定的细分市场上成为领导者，然后再去做下一个细分市场。这就是所谓的“大鱼小池 &amp;quot; 的方法。营销漏斗或 AIDA 模型是一个很好的营销框架，它可以帮助为潜在客户挑选正确的营销技术。此外，确保你的产品提供一个完整的解决方案，并且服务水平高（即整个产品解决方案）。实用主义者对你的产品的用户体验将最终决定他们是否也会激起他们的同行。一旦你在早期大众的不同部分建立了强大的口碑，你就成功地跨越了鸿沟。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;你觉得服务网格目前处于鸿沟理论的哪个阶段呢？你又是何种受众？&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/a305fa93580b&#34; title=&#34;《Crossing the Chasm》丨 NOTES - jianshu.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Crossing the Chasm》丨 NOTES - jianshu.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34; title=&#34;灵雀云 CTO 陈恺：从“鸿沟理论”看云原生，哪些技术能够跨越鸿沟？ - infoq.cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;灵雀云 CTO 陈恺：从“鸿沟理论”看云原生，哪些技术能够跨越鸿沟？ - infoq.cn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>新疆北疆房车自驾之旅</title>
      <link>https://jimmysong.io/blog/xinjiang-trip/</link>
      <pubDate>Sat, 31 Jul 2021 12:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/xinjiang-trip/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/xinjiang-hasake.webp&#34; data-img=&#34;/blog/xinjiang-trip/xinjiang-hasake.webp&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;在琼库什台村与哈萨克族村民在一起&#34;&gt;
    
  
  &lt;figcaption&gt;在琼库什台村与哈萨克族村民在一起&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摄于新疆维吾尔自治区伊犁哈萨克自治州特克斯县琼库什台村，晓辉和我与哈萨克族村民在一起&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我欲乘风破浪，踏遍黄沙海洋&lt;/p&gt;
&lt;p&gt;与其误会一场，也要不负勇往&lt;/p&gt;
&lt;p&gt;——Jam，《七月上》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天是七月的最后的一天，从今天起我的博客将开通&lt;a href=&#34;https://jimmysong.io/categories/%e6%97%85%e8%a1%8c&#34; title=&#34;旅行&#34;&gt;旅行&lt;/a&gt;
专栏。距离我从新疆回到北京也快一个星期了，这篇博客用来记录我与&lt;a href=&#34;https://atbug.com/&#34; title=&#34;张晓辉（Addo Zhang&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;张晓辉（Addo Zhang&lt;/a&gt;
 在新疆的七日之旅。&lt;/p&gt;
&lt;h2 id=&#34;行程安排&#34;&gt;行程安排&lt;/h2&gt;
&lt;p&gt;因为晓辉最近处于工作变动空档期，而我又远程工作，今年元旦以来都没有到远游（上一次是元旦到云南大理、丽江），因此我们商议了为其七天的新疆北疆房车自驾之旅。&lt;/p&gt;
&lt;p&gt;我们将分别从北京和广州前往乌鲁木齐汇合然后提车出发，车是出发前就在网上预约好的，现场办手续，进行了 2 个小时的使用培训，然后就上路了。因为晓辉是老司机，而山路崎岖，房车又过于笨重，对于我这个新手难以驾驭，我就作为副驾，同时也会在路上工作。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/path.gif&#34; data-img=&#34;/blog/xinjiang-trip/path.gif&#34; data-width=&#34;800&#34; data-height=&#34;450&#34; alt=&#34;image&#34; data-caption=&#34;行程路线图&#34;&gt;
    
  
  &lt;figcaption&gt;行程路线图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们基本是按照出发前预定的路线走的，整个旅程最精彩的部分应该是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赛里木湖牧民家的烧烤晚餐&lt;/li&gt;
&lt;li&gt;琼库什台原生态草原&lt;/li&gt;
&lt;li&gt;独库公路&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;寄蜉蝣于天地，渺沧海之一粟。&lt;/p&gt;
&lt;p&gt;——苏轼，《前赤壁赋》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;夜宿在赛里木湖北门附近的牧民家旁边，夜晚可以看到璀璨的星空。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/stars.webp&#34; data-img=&#34;/blog/xinjiang-trip/stars.webp&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;赛里木湖的星空&#34;&gt;
    
  
  &lt;figcaption&gt;赛里木湖的星空&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果说有个地方我想再重走一遍的话，我会选择伊犁哈萨克自治州，如果一定要确定一个具体的村庄的话，那我会选择琼库什台。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/qiongkushitai.webp&#34; data-img=&#34;/blog/xinjiang-trip/qiongkushitai.webp&#34; data-width=&#34;1200&#34; data-height=&#34;675&#34; alt=&#34;image&#34; data-caption=&#34;琼库什台&#34;&gt;
    
  
  &lt;figcaption&gt;琼库什台&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们在草原上工作，到哈萨克族老乡家吃饭一起庆祝古尔邦节，教小朋友玩无人机，一起骑马、打篮球，不亦乐乎。大美新疆，我一定会再来的！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生处处知何似，恰似飞鸿踏雪泥。&lt;/p&gt;
&lt;p&gt;——苏轼，《和子由渑池怀旧》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在琼库什台草原上骑马，这也是我第一次骑马，骑着骑着，马自己就跑起来了。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/horse.webp&#34; data-img=&#34;/blog/xinjiang-trip/horse.webp&#34; data-width=&#34;800&#34; data-height=&#34;1199&#34; alt=&#34;image&#34; data-caption=&#34;琼库什台骑马&#34;&gt;
    
  
  &lt;figcaption&gt;琼库什台骑马&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;视频&#34;&gt;视频&lt;/h2&gt;
&lt;p&gt;下面是我为本次旅程所剪辑的&lt;a href=&#34;https://www.bilibili.com/video/BV1Ab4y1z7TW/&#34; title=&#34;视频&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;视频&lt;/a&gt;
，希望大家一键三连（点赞、投币、转发）。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/bilibili.webp&#34; data-img=&#34;/blog/xinjiang-trip/bilibili.webp&#34; data-width=&#34;800&#34; data-height=&#34;1017&#34; alt=&#34;image&#34; data-caption=&#34;Bilibili 点播&#34;&gt;
    
  
  &lt;figcaption&gt;Bilibili 点播&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;贴士&#34;&gt;贴士&lt;/h2&gt;
&lt;p&gt;对于去气候适宜或稳定的地域的短途旅行，建议租普通的 SUV 即可，如果想睡在野外可以搭帐篷，没必要租房车，因为在房车体积较大，大部分人没有驾驶过房车的经验，开起来会比较吃力，而且房车对于路况要求也比较高，很多沟沟坎坎、野路就没办法通过了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zoom &#43; OBS &#43; B 站直播配置手册</title>
      <link>https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/</link>
      <pubDate>Tue, 25 May 2021 22:22:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/</guid>
      <description>
        
        
        &lt;p&gt;今晚我第一次使用 Zoom + OBS 和马若飞在 B 站上进行了&lt;a href=&#34;https://space.bilibili.com/1698576814&#34; title=&#34;《Istio 大咖说》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Istio 大咖说》&lt;/a&gt;
栏目的第一期分享——「Istio 开源四周年回顾与展望」。考虑到很多社区、主播、调音台会有在 B 站或其他平台上直播的需求，特别将我的个人经验分享给大家，欢迎大家补充，我会不断优化直播体验。&lt;/p&gt;
&lt;p&gt;下图是我直播时桌面的情况，使用的设备有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Pro，这个自不必说&lt;/li&gt;
&lt;li&gt;USB 麦克风博雅 BY-500，作为音频输入麦克风&lt;/li&gt;
&lt;li&gt;海康威视外接摄像头，用作第二机位&lt;/li&gt;
&lt;li&gt;iPad，作为直播监视器，同时回答观众的弹幕&lt;/li&gt;
&lt;li&gt;环形补光灯，直播通常是在晚上，光线太暗需要补光&lt;/li&gt;
&lt;li&gt;AirPods Pro，用于监听声音的，不作为音频输入&lt;/li&gt;
&lt;li&gt;静音蓝牙键盘，防止键盘敲击声音影响直播的声音体验&lt;/li&gt;
&lt;li&gt;iPhone，用于和直播讲师私下沟通，这样不会被直播出去&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上这些不是全部都需要的，只要你有一台电脑和一个耳机就可以直播。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/desktop.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/desktop.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;744&#34; alt=&#34;image&#34; data-caption=&#34;我的桌面&#34;&gt;
    
  
  &lt;figcaption&gt;我的桌面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面是直播时的桌面（请忽略我杂乱的被各种设备占满空间的桌面），下面是我的配置参考。&lt;/p&gt;
&lt;h2 id=&#34;硬件准备&#34;&gt;硬件准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电脑：macOS、Windows 都可以，我是用的是 Macbook Pro 2016 年产，配置如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0t9gubjj30wk0jiwl1.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0t9gubjj30wk0jiwl1.jpg&#34; data-width=&#34;1172&#34; data-height=&#34;702&#34; alt=&#34;image&#34; data-caption=&#34;系统配置&#34;&gt;
    
  
  &lt;figcaption&gt;系统配置&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外接麦克风：切勿直接使用电脑机身上自带的麦克风，那样会收录电脑风扇的声音，我使用的是博雅 BY-500（400 多块钱）麦克风，电容式麦克风，指向性比较好，基本没有噪音。&lt;/li&gt;
&lt;li&gt;摄像头：保证电脑上的摄像头可用，因为会议的时候需要开摄像头，或者用外接摄像头也可以。&lt;/li&gt;
&lt;li&gt;网络：确保网速至少 100MB/s 的宽带，因为推流还是比较占用带宽的，而且还需要同时查看直播效果，对下行带宽也有要求。&lt;/li&gt;
&lt;li&gt;另一台可联网设备：用来监控直播效果，可以是手机、iPad 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件准备&#34;&gt;软件准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Zoom：需要 Pro 版，这样才可以举行超过 45 分钟的线上会议，否则会在超时后打断再重新加入，需要准备好账号，中国大陆用户貌似不能再注册？如果没有 zoom，换成其他任何一个会议软件都可以，比如腾讯会议。&lt;/li&gt;
&lt;li&gt;OBS：用来做推流，到&lt;a href=&#34;https://obsproject.com/&#34; title=&#34;官网&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官网&lt;/a&gt;
下载最新的版本。&lt;/li&gt;
&lt;li&gt;音频插件 Sunflower：&lt;a href=&#34;https://github.com/mattingalls/Soundflower/releases&#34; title=&#34;点击跳转到下载页面&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击跳转到下载页面&lt;/a&gt;
，如果安装时遇到系统权限问题，请在命令行中执行 &lt;code&gt;sudo spctl --master-disable&lt;/code&gt; 并在电脑的 &lt;code&gt;系统首选项&lt;/code&gt; 的 &lt;code&gt;安全与隐私&lt;/code&gt; 中批准来自任意途径的软件安装，如果看到有详情页面，点击进去批准软件发行商。&lt;/li&gt;
&lt;li&gt;Bilibili：需要一个 B 站账号，并开通直播间，经过实名认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;obs-配置&#34;&gt;OBS 配置&lt;/h2&gt;
&lt;p&gt;下面是在 Macbook 中安装的 OBS 配置截图。&lt;/p&gt;
&lt;p&gt;需要注意的是输出、音频和视频的配置。请参考图中的配置，尤其注意编码控制、比特率的配置。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0t9tppnj312t0u0gpv.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0t9tppnj312t0u0gpv.jpg&#34; data-width=&#34;1397&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;OBS 输出配置&#34;&gt;
    
  
  &lt;figcaption&gt;OBS 输出配置&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0tbb4g8j313m0u0jv1.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0tbb4g8j313m0u0jv1.jpg&#34; data-width=&#34;1426&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;OBS 音频配置&#34;&gt;
    
  
  &lt;figcaption&gt;OBS 音频配置&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;请注意分辨率的配置，同时调整电脑屏幕的分辨率为 1440x900，&lt;strong&gt;不要使用太大的分辨率，否则可能导致直播画面黑屏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0tarnvoj31is0p276g.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0tarnvoj31is0p276g.jpg&#34; data-width=&#34;1972&#34; data-height=&#34;902&#34; alt=&#34;image&#34; data-caption=&#34;OBS 视频配置&#34;&gt;
    
  
  &lt;figcaption&gt;OBS 视频配置&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0tbrclhj31140pkjxy.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0tbrclhj31140pkjxy.jpg&#34; data-width=&#34;1336&#34; data-height=&#34;920&#34; alt=&#34;image&#34; data-caption=&#34;Macbook 显示配置&#34;&gt;
    
  
  &lt;figcaption&gt;Macbook 显示配置&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;会议直播&#34;&gt;会议直播&lt;/h2&gt;
&lt;p&gt;以上场景是仅限于本机画面的直播，还有中场景就是现场会议直播，你还需要录制现场画面，这时候你最好制作一个直播底板，例如下图。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/diban.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/diban.jpg&#34; data-width=&#34;1000&#34; data-height=&#34;562&#34; alt=&#34;image&#34; data-caption=&#34;OBS 直播底板&#34;&gt;
    
  
  &lt;figcaption&gt;OBS 直播底板&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;该底板用于布局 PPT 和摄像头画面，同时底板上也包括了活动 logo 和主办方、赞助商信息。该图最好是 PNG 透明的格式，把图片放在布局最上层，这样就能很好地展示布局。&lt;/p&gt;
&lt;h2 id=&#34;音频配置&#34;&gt;音频配置&lt;/h2&gt;
&lt;p&gt;安装 sunflower 后，在 Midi 设备中创建一个多输出设备，如图。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0ta93jfj31060q0n28.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gqv0ta93jfj31060q0n28.jpg&#34; data-width=&#34;1302&#34; data-height=&#34;936&#34; alt=&#34;image&#34; data-caption=&#34;MacBook 音频配置&#34;&gt;
    
  
  &lt;figcaption&gt;MacBook 音频配置&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;选择 Sunflower（2ch）和你想要用来监听系统声音的设备，我是用的是 AirPods，你也可以选择其他耳机，总之不要让麦克风录到这个系统输出的即可。&lt;/p&gt;
&lt;p&gt;还要在 OBS 的麦克风配置里增加下新创建的这个输出设备，这样直播的时候就可以收录你的系统，也就是你的耳机听到的声音了，比如在视频会议中，所有人讲话的声音都会被直播出去。&lt;/p&gt;
&lt;h3 id=&#34;使用独立音频硬件&#34;&gt;使用独立音频硬件&lt;/h3&gt;
&lt;p&gt;如果安装 sunflower 有问题的话，你也可以购买一款独立的音频设备，要知道一台电脑是可以安装多块声卡的，这些声卡可以通过 USB 接口转接，而且价格都很便宜（只要几十块钱），一旦有了多个声卡，你就可以为不同的音频源选择不同的输出，而且可以对它们的音量进行单独单独控制。例如下面这款 USB 外置声卡（非利益相关），即插即用，不需要安装任何软件。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/ugreen.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/ugreen.jpg&#34; data-width=&#34;800&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;USB 外置声卡&#34;&gt;
    
  
  &lt;figcaption&gt;USB 外置声卡&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;你也可以用 USB 外置声卡来转接其他的无线麦克风，比如我就转接了 Rode Wireless Go（你还需要买一根转接的音频线，红色的那根，用于连接声卡）。&lt;/p&gt;
&lt;h2 id=&#34;多路推流多渠道同步直播&#34;&gt;多路推流（多渠道同步直播）&lt;/h2&gt;
&lt;p&gt;因为我们在直播时往往有多个渠道，比如多个 B 站直播间、微信视频号等，如何使用 OBS 同步推流到多个渠道呢？可以使用 &lt;a href=&#34;https://github.com/sorayuki/obs-multi-rtmp&#34; title=&#34;sorayuki/obs-multi-rtmp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sorayuki/obs-multi-rtmp&lt;/a&gt;
 插件（支持 Windows 和 macOS），注意需要将 OBS 升级到最新版本（至少 27.0.1 版本）。安装完插件，重启 OBS 后就可以看到一个窗口新建多路推流，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gu39v42dlkj60ia0hl0tj02.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gu39v42dlkj60ia0hl0tj02.jpg&#34; data-width=&#34;658&#34; data-height=&#34;633&#34; alt=&#34;image&#34; data-caption=&#34;OBS 新建多路推流&#34;&gt;
    
  
  &lt;figcaption&gt;OBS 新建多路推流&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果没有看到该窗口，请点击【视图】-【停靠部件】-【多路推流】即可显示。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/008i3skNly1gu39u3zpknj60f3096gmh02.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/008i3skNly1gu39u3zpknj60f3096gmh02.jpg&#34; data-width=&#34;543&#34; data-height=&#34;330&#34; alt=&#34;image&#34; data-caption=&#34;OBS 多路推流选项&#34;&gt;
    
  
  &lt;figcaption&gt;OBS 多路推流选项&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;直播效果&#34;&gt;直播效果&lt;/h2&gt;
&lt;p&gt;下面是当晚直播的 zoom 录制的视频直出，已上传到 &lt;a href=&#34;https://www.bilibili.com/video/BV1jK4y1R7Tk&#34; title=&#34;B 站&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B 站&lt;/a&gt;
，大家可以感受下画面的清晰度还有声音效果，我还是比较满意的。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/zoom-obs-bilibili-broadcast/bilibili.jpg&#34; data-img=&#34;/blog/zoom-obs-bilibili-broadcast/bilibili.jpg&#34; data-width=&#34;600&#34; data-height=&#34;763&#34; alt=&#34;image&#34; data-caption=&#34;Bilibili&#34;&gt;
    
  
  &lt;figcaption&gt;Bilibili&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中只有几个小插曲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为我是用的是 AirPods 蓝牙耳机，戴上耳机的时候我无法确定它要连那个设备（我有两个 iPhone、1 个 iPad、1 个 MacBook 都有可能被脸上）活动开始的时候总是连不上 MacBook，一气之下把其他的苹果设备的蓝牙全关掉，只留下 MacBook 的蓝牙开启，这样可以保证连上 MacBook&lt;/li&gt;
&lt;li&gt;说话的时候忘记了把麦克风静音了&lt;/li&gt;
&lt;li&gt;直播大概进行了 1 个小时的时候，zoom 突然断开了 10 几秒钟后又自动重连，总体来说 zoom 会议还是比较稳定的，1 个小时左右的会议应该不会断连&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;直播开始前的检查&#34;&gt;直播开始前的检查&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电脑屏幕分辨率调整为 1440 x 900&lt;/li&gt;
&lt;li&gt;关闭与直播无关的 APP，减少系统资源占用&lt;/li&gt;
&lt;li&gt;电脑设置为勿扰模式&lt;/li&gt;
&lt;li&gt;使用外接麦克风，切勿直接使用电脑内置的麦克风，会收录风扇及键盘杂音，影响音质&lt;/li&gt;
&lt;li&gt;使用外接耳机，如 AirPods&lt;/li&gt;
&lt;li&gt;音频输出调整为多设备输出，其中包括 Sunflower（2ch）和耳机&lt;/li&gt;
&lt;li&gt;Zoom 会议开始前记得点击录像&lt;/li&gt;
&lt;li&gt;会议开始后检查 B 站直播间，确保声音和画质没有问题&lt;/li&gt;
&lt;li&gt;OBS 推流的时候不用录像，因为 zoom 已经在录了&lt;/li&gt;
&lt;li&gt;直播完成后检查 zoom 生成的视频文件并备份&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优化项&#34;&gt;优化项&lt;/h2&gt;
&lt;p&gt;直接直播屏幕内容也会造成多重布局的问题，以上方案还是有可优化的地方。比如将视频会议中的共享桌面与摄像头画面分开布局到 OBS 上。&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;最后&lt;/h2&gt;
&lt;p&gt;直播是除了在线下面对面交流以外，可以跟社区及开源爱好者交流最直接最友好的方式，我会时常发起，感谢大家的关注我主持的直播间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://live.bilibili.com/22230973&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://live.bilibili.com/23095515&#34; title=&#34;Istio Service Mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Service Mesh&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关注上面的 B 站账号，获取直播推送提醒。关于 B 站直播，如果你有任何问题或者建议请在下面留言。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>什么是 Day-2 Operation？</title>
      <link>https://jimmysong.io/blog/what-is-day-2-operation/</link>
      <pubDate>Sat, 20 Mar 2021 21:56:04 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/what-is-day-2-operation/</guid>
      <description>
        
        
        &lt;p&gt;在 IstioCon 2021 上，Istio 社区确定了 2021 年的社区的工作重点是 Day-2 Operation，很多人问我这个词是什么意思。我查了下中文互联网上，没有对这个词的解释，我在网上找到了一些解释，我发现大部分文章的源头都指向了这篇 &lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34; title=&#34;Defining Day-2 Operations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Defining Day-2 Operations&lt;/a&gt;
。因此，在此我将问翻译一下，同时再加上一些我自己的见解。&lt;/p&gt;
&lt;p&gt;下面是笔者对 Day-2 Operation 的理解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;假如将开发一个系统比作种下一棵树，那么 Day-2 Operation 就是系统开花后结果的过程。我们要不断改进这颗树的基因，以实现效益最大化。Day-2 Operation 就是对这个系统优化改进的过程。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day-2-operation-的定义&#34;&gt;Day-2 Operation 的定义&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 不一定是指第 2 天的行动。一旦“某物“进入行动，“Day-2 Operation“是指在这个“某物“没有被杀死或被“其他东西“取代之前的剩余时间段。如下图中展示的软件的生命周期中，从软件被安装之后到被卸载之前的那段时间。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-day-2-operation/008eGmZEly1gorlqmukkij31im0kote7.jpg&#34; data-img=&#34;/blog/what-is-day-2-operation/008eGmZEly1gorlqmukkij31im0kote7.jpg&#34; data-width=&#34;1966&#34; data-height=&#34;744&#34; alt=&#34;image&#34; data-caption=&#34;Day-2 Operation&#34;&gt;
    
  
  &lt;figcaption&gt;Day-2 Operation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当我们审视一个业务流程、应用程序或 IT 基础设施生命中的各个阶段时，有些人喜欢把它们描绘成一个循环过程。我相信这是因为人们倾向于使用“应用程序的生命周期“这个词，并以某种方式陷于相信图中必须循环回到起点。各个阶段通常是在时间上向前推进的，而不是把你带回起点。&lt;/p&gt;
&lt;p&gt;假定“X“称为一个组织或实体所需要的东西，可能是一个业务流程，一个应用程序，或者是一些 IT 基础设施。从技术上讲，每当有人设想 X 的时候，总会有一个起点 —— 我们称它为“零日”（这是高中物理的管理，时间的起点通常是 T0）。Day-Zero 可能不是一天：它是提出并记录一套完整的 X 需求所需的时间段，这些活动可能包括高层设计、记录并向某人推销利益、撰写商业案例、寻求资金等。&lt;/p&gt;
&lt;p&gt;这个过程的下一步是构建和部署。Day-1 包括所有活动，从详细（或底层）设计开始，到构建、测试、提出任何所需的流程和人员，以支持 X，使组织受益。在许多情况下，这里可能还涉及一些采购活动。一旦它被安装、设置、配置和批准（“好的开始”），X 就被认为是“上线“或“开放业务”。&lt;/p&gt;
&lt;p&gt;从这一点开始，直到 X 退役、死亡或被替换，我们有 Day-2 操作。这包括保持 X 运行的一系列活动，照看和支持 X，使其以最佳状态运行，确保 X 的运行和交付结果符合最初的意图和期望。监控利用率、确保可用性和成本优化是在通常的内务管理活动基础上增加的，以保持 X 以“最佳“的方式运行。&lt;/p&gt;
&lt;p&gt;随着我们周围世界的要求发生变化，组织要决定对 X 的调整或升级，这些都是必然需要的，是被称为整个大修还是仅仅是升级。如果是整体大修，我们可以假设 X 已经退役并被新的系统 Y 所取代。如果新的 X 只是比以前的 X 有了更大的改进，那么 Day-2 Operation 将继续进行，并包含了所有的活动，以逐步改进 X。&lt;/p&gt;
&lt;p&gt;一个简短的补充说明：“不可变系统“的概念，即人们倾向于通过不允许变化但总是部署新系统来提高可用性，这与上述概念并不冲突。管理不可变系统的过程成为 Day-2 Operation 的一部分。&lt;/p&gt;
&lt;p&gt;对于大多数企业来说，Day-2 Operation 是重复性的。但这是系统为组织产生结果的地方。因此，在 Day-2 Operation 中不断寻求改进，一个能带来最大效益的改进应该是很自然的。&lt;/p&gt;
&lt;h2 id=&#34;评论&#34;&gt;评论&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 目前在中文中暂无统一翻译，我暂且将其翻译为“Day-2 运营”，这样可能会看起来更像是个敏捷词汇，跟“精益运营”比较像。这个命名方式可能来自物理（T0，T1，T2，这样来划分时间段），也可能是来自军事术语。&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34; title=&#34;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age&lt;/a&gt;
 这篇文章中对云时代的软件生命周期 Day0、Day1、Day2 做了比较完整的解释。&lt;/p&gt;
&lt;p&gt;在 IT 领域，Day0、Day1、Day2 指的是软件生命周期的不同阶段。在军事术语中，Day0 是训练的第一天，新兵进入成长阶段。在软件开发中，它代表着设计阶段，在这个阶段，项目需求被指定，解决方案的架构被决定。&lt;/p&gt;
&lt;p&gt;Day1 涉及开发和部署在 Day0 阶段设计的软件。在这个阶段，我们不仅要创建应用程序本身，还要创建它的基础设施、网络、外部服务，并实现这一切的初始配置。&lt;/p&gt;
&lt;p&gt;Day2 是产品发货或提供给客户的时间。在这里，大部分精力都集中在维护、监控和优化系统上。分析系统的行为并做出正确的反应是至关重要的，因为由此产生的反馈循环会一直应用到应用程序的寿命结束。在云时代这三个阶段跟云之前有很大的不同。&lt;/p&gt;
&lt;p&gt;软件准备好后，就开始上线，客户开始使用。Day2 从这里开始，介绍包括软件维护和客户支持在内的内容。软件本身要不断发展，以适应不断变化的需求和客户的要求。在 Day2，主要关注的是建立一个反馈循环。我们监控应用的运行情况，收集用户的反馈意见，并将其发送给开发团队，开发团队将在产品中实现并发布新版本。军事术语 Observe-Orient-Decid-Act 恰好能体现这一阶段的工作内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察：从监控系统中获取信息（资源使用和指标、应用性能监控）。&lt;/li&gt;
&lt;li&gt;定位：对问题进行根本原因分析。&lt;/li&gt;
&lt;li&gt;决定：找到解决出现的问题的方法。&lt;/li&gt;
&lt;li&gt;行动：实施解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如同在作战过程中，这个循环不断重复，正如下图中展示的那样。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-day-2-operation/008eGmZEly1gormccennnj31gi0u0nae.jpg&#34; data-img=&#34;/blog/what-is-day-2-operation/008eGmZEly1gormccennnj31gi0u0nae.jpg&#34; data-width=&#34;1890&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;Day 2 Operation 流程&#34;&gt;
    
  
  &lt;figcaption&gt;Day 2 Operation 流程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;监控程序是基于服务水平协议（SLA）中定义的要求。SLA 基于服务水平目标（SLO），它代表了我们的服务水平指标（SLI）的状态。自动化和监控是解决第 2 天责任的关键。&lt;/p&gt;
&lt;p&gt;有几类工具可以帮助完成 Day2 的工作。应用性能监控（APM）类组软件，帮助 IT 管理员监控应用性能，从而提供高质量的用户体验。在这里我们可以说出 Datadog、Dynatrace、SignalFX 或 Nutanix Xi Epoch。还有一些自动化和编排工具，如 Ansible 或 Kubernetes，它们有助于管理应用环境。这些工具的应用与 Day1 的工作相重叠。最后，JIRA 或 GItHub 系统处理客户服务，使用户能够报告与他们正在运行的应用程序有关的问题。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34; title=&#34;Defining Day-2 Operations - ozone.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Defining Day-2 Operations - ozone.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/solutions/day-2-ops/&#34; title=&#34;What is &amp;amp;ldquo;Day-2&amp;amp;rdquo; - about.gitlab.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is &amp;ldquo;Day-2&amp;rdquo; - about.gitlab.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34; title=&#34;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age - codilime.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age - codilime.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>新的开始——告别蚂蚁，加入 Tetrate</title>
      <link>https://jimmysong.io/blog/moving-on-from-ant-group/</link>
      <pubDate>Mon, 31 Aug 2020 08:27:17 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/moving-on-from-ant-group/</guid>
      <description>
        
        
        &lt;p&gt;今天是我加入蚂蚁的第 914 天，也是在&lt;a href=&#34;https://www.antgroup.com/&#34; title=&#34;蚂蚁&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;蚂蚁&lt;/a&gt;
的最后一天，明天就是 9 月 1 日了，这一天通常都是学校开学的日子，在阿里巴巴大家都以”同学”相称，明天我将加入 &lt;a href=&#34;https://tetrate.io&#34; title=&#34;Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt;
，这也算开始我的新学期吧！&lt;/p&gt;
&lt;h2 id=&#34;蚂蚁阿里巴巴与云原生社区&#34;&gt;蚂蚁/阿里巴巴与云原生社区&lt;/h2&gt;
&lt;p&gt;迄今为止，蚂蚁/阿里巴巴集团对我的职业生涯产生了深远影响，尤其是它的企业文化和价值观，阿里巴巴招聘的理念的“寻找同路人”，在创建云原生社区的过程，不也是寻找同路人的过程吗？&lt;a href=&#34;https://cloudnative.to&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;
就像一个小型社会，我不求它有多大的社会价值，只求它可以对个人、对企业、对社会带来微小而美好的改变。我不断得思考作为个人、员工。尤其是社区的发起人，我的使命到底是什么？我在公司中应该担当什么样的角色？这个社区要走向何方？我在摸索中前进，但是因为有你们的支持，使我更加坚定，致力于云原生技术在中国的普及和应用，以外我一个人可能走得更快，但现在与社区在一起，我们将走得更远！&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/moving-on-from-ant-group/20190624.jpg&#34; data-img=&#34;/blog/moving-on-from-ant-group/20190624.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;559&#34; alt=&#34;image&#34; data-caption=&#34;2019 年 6 月 24 日，上海，KubeCon China 2019&#34;&gt;
    
  
  &lt;figcaption&gt;2019 年 6 月 24 日，上海，KubeCon China 2019&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;em&gt;2019 年 6 月 24 日，上海，KubeCon China 2019&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;加入-tetrate&#34;&gt;加入 Tetrate&lt;/h2&gt;
&lt;p&gt;在过去的两年里，我一直在着力推广 Istio 和 Service Mesh 技术，在蚂蚁集团的资助下，我创办了 &lt;a href=&#34;https://www.servicemesher.com&#34; title=&#34;ServiceMesher 社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ServiceMesher 社区&lt;/a&gt;
，将 Service Mesh 技术带到了中国，接下来我希望将中国实践带到世界。当然还有今年疫情期间成立的&lt;a href=&#34;https://cloudnative.to&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;
，向开发者和大众普及云原生知识和应用。&lt;/p&gt;
&lt;p&gt;作为 Developer Advocate，最重要的一点是不要停止学习，同时要善于倾听和总结。在过去的两年里，我看到无数人对 Service Mesh 表现出浓厚的兴趣，但因对新技术的风险了解的不足及知识匮乏而无从下手。我十分兴奋加入这家专注于 Service Mesh 的初创公司 &lt;a href=&#34;https://tetrate.io&#34; title=&#34;Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt;
，这是一家全球化远程办公的初创公司，公司的产品围绕开源 &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
、&lt;a href=&#34;https://envoyproxy.io&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;
 和 &lt;a href=&#34;https://skywalking.apache.org/&#34; title=&#34;Apache SkyWalking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache SkyWalking&lt;/a&gt;
 等开源项目构建，致力于打造云原生的网络基础设施。这里有这些开源项目的多位 Maintainer，如 &lt;a href=&#34;https://twitter.com/wusheng1108&#34; title=&#34;吴晟&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;吴晟&lt;/a&gt;
、&lt;a href=&#34;https://twitter.com/ZackButcher&#34; title=&#34;Zack Butcher&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zack Butcher&lt;/a&gt;
、&lt;a href=&#34;https://twitter.com/zlizan&#34; title=&#34;周礼赞&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;周礼赞&lt;/a&gt;
 等，我相信跟他们一起，可以帮助大家快速、有效的了解和应用 Service Mesh，跨向云原生。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;今年年初在筹备云原生社区的时候，我就确定了未来三年内的工作方向——云原生、开源和社区。在追求梦想的道路上充满荆棘，不仅需要勇气和毅力，还需要你们做我坚强的后盾，我一定披荆斩棘，一往无前。开源是世界的，要想让世界更理解我们，我们必须更加主动地融入这个世界。希望中国开源的明天会更好，希望 Service Mesh 技术在中国更好的落地，希望云原生能够普惠大众，希望大家都可以找到自己的使命。&lt;/p&gt;
&lt;p&gt;Tetrate 目前也在&lt;a href=&#34;https://jimmysong.io/job/tetrate&#34; title=&#34;招聘&#34;&gt;招聘&lt;/a&gt;
中，欢迎投递简历。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>KubeCon&amp;CloudNativeCon China 2018</title>
      <link>https://jimmysong.io/blog/kubecon-cloudnativecon-china-2018/</link>
      <pubDate>Fri, 16 Nov 2018 13:40:38 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/kubecon-cloudnativecon-china-2018/</guid>
      <description>
        
        
        &lt;p&gt;本次大会是一个难得的机会，让我见到了很多朋友，很多都是第一次在线下见面。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/kubecon-cloudnativecon-china-2018/kubecon-shanghai-2018-group.webp&#34; data-img=&#34;/blog/kubecon-cloudnativecon-china-2018/kubecon-shanghai-2018-group.webp&#34; data-width=&#34;1000&#34; data-height=&#34;1774&#34; alt=&#34;image&#34; data-caption=&#34;KubeCon&amp;amp;CloudNativeCon China 上海 2018&#34;&gt;
    
  
  &lt;figcaption&gt;KubeCon&amp;amp;CloudNativeCon China 上海 2018&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图中由上自下的大合影是：ServiceMesher 社区上海聚首合影；中美日的 Kubernetes、Envoy、Istio、Apache Skywalking、ServiceMesher 社区在 KubeCon 上海；Yahoo Japan 与蚂蚁集团团队在上海中心办公室合影。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;活动&#34;&gt;活动&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Meet the Ambassadors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参加了一场 &lt;strong&gt;Meet the Ambassadors&lt;/strong&gt; 采访，第一次参加英文的采访，本来准备的英文回答没用上，现场反而还紧张了。。。工作人员的摄像机又没就位，我还充当了摄影师（本色出演）。一共采访了四位中国的 Ambassador。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jiayao (Julia) Han, Caicloud&lt;/li&gt;
&lt;li&gt;Jia Xuan, China Mobile Research Institute&lt;/li&gt;
&lt;li&gt;Jimmy Song, Ant Group&lt;/li&gt;
&lt;li&gt;Jessie Qian, Alauda&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的名字不约而同的都是 J 字头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service Mesh Roundtable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后参加了一场 Service Mesh Roundtable，参加人员有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jimmy Song, Developer Advocate on Cloud Native at Ant Group&lt;/li&gt;
&lt;li&gt;Yulin Son, Principal Architect at Huawei&lt;/li&gt;
&lt;li&gt;George Miranda, PagerDuty&lt;/li&gt;
&lt;li&gt;Nic Jackson, Developer Advocate at HashiCorp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们就 Service Mesh 的现状，存在的问题后未来进行了广泛的探讨。&lt;/p&gt;
&lt;h2 id=&#34;ppt&#34;&gt;PPT&lt;/h2&gt;
&lt;p&gt;KubeCon China 会议的很多 PPT 在&lt;a href=&#34;https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2018/schedule-chinese/&#34; title=&#34;大会的官网&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大会的官网&lt;/a&gt;
上都可以下载，或者通过&lt;a href=&#34;https://pan.baidu.com/s/1oihwETA063WSFyigWsn8Mw&#34; title=&#34;百度网盘&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;百度网盘&lt;/a&gt;
下载 zip 包，提取码：&lt;strong&gt;5vn0&lt;/strong&gt;。或者通过&lt;a href=&#34;https://github.com/bbotte/cncf-presentations/tree/master/KubeCon%2BCloudNativeCon-2018&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;
下载单个 PPT。&lt;/p&gt;
&lt;h2 id=&#34;飞行&#34;&gt;飞行&lt;/h2&gt;
&lt;p&gt;在会场随便一坐，就能遇到熟人。还有很多我都叫不上名字的人来打招呼，不能一一道谢了，感谢晚餐以及收到的 Prometheus 飞行袜。&lt;/p&gt;
&lt;p&gt;11 月 12 日晚在上海静安寺上空飞行，航拍的南京西路夜景。&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//player.bilibili.com/player.html?aid=36041724&amp;cid=63259487&amp;page=1&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;Jimmy Song 的航拍视频&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>如何翻译一本外文书</title>
      <link>https://jimmysong.io/blog/how-to-translate-a-book/</link>
      <pubDate>Fri, 27 Oct 2017 22:55:43 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/how-to-translate-a-book/</guid>
      <description>
        
        
        &lt;p&gt;截止本文发稿时，笔者是以下两本云原生图书的译者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go&#34; title=&#34;Cloud Native Go&#34;&gt;Cloud Native Go&lt;/a&gt;
：已由电子工业出版社出版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-python&#34; title=&#34;Cloud Native Python&#34;&gt;Cloud Native Python&lt;/a&gt;
：正在翻译中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时我还参与了 &lt;a href=&#34;https://kubernetes.io/&#34; title=&#34;Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt;
、&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
 的文档翻译，撰写了开源电子书 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook&#34; title=&#34;kubernetes-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubernetes-handbook&lt;/a&gt;
，下面是我本人在翻译过程中的的一些心得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：本文中使用的方法仅供参考，机器翻译有助您快速了解全书或文章的梗概，请勿直接使用机器翻译结果输出。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;图书引进&#34;&gt;图书引进&lt;/h2&gt;
&lt;h3 id=&#34;1-联系出版社&#34;&gt;1. 联系出版社&lt;/h3&gt;
&lt;p&gt;假如您看到一本很好的外文书籍想要翻译，首先需要联系出版社，询问该书是否已被引进，因为每年国内引进的外文书籍是有数量控制的，而且有的书也不是你先给引进就可以引进的，每年都有版权引进会议，国内的出版社统一参加确定引进的书籍，哪家引进多少本，哪一本分给哪一家等。可以与出版社编辑沟通，查看该书是否可以引进，是否已经有别的出版社引进且在翻译中，这个过程基本不需要你与原作者沟通。&lt;/p&gt;
&lt;h3 id=&#34;2-取得图书引进的版权&#34;&gt;2. 取得图书引进的版权&lt;/h3&gt;
&lt;p&gt;如果很幸运的，这本书可以引进到国内，而且还没有人来翻译，可以跟出版社编辑要求翻译这本书，如果书籍内容适当可以一个人翻译，如果内容较多可以分多个人翻译，建议人数不要超过 4 人。&lt;/p&gt;
&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;/h2&gt;
&lt;p&gt;首先需要准备如下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;：用户版本管理，也方便在线查看，我使用 &lt;a href=&#34;https://gitee.com&#34; title=&#34;码云&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;码云&lt;/a&gt;
 私有代码库管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown 编辑器&lt;/strong&gt;：我推荐使用 &lt;a href=&#34;https://typora.io&#34; title=&#34;typora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;typora&lt;/a&gt;
。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gitbook&lt;/strong&gt;：使用 &lt;a href=&#34;https://gitbook.com&#34; title=&#34;Gitbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitbook&lt;/a&gt;
 生成 web 页面便于阅读和查看，注意不要公开发布到 Github 上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word&lt;/strong&gt;：虽然我们使用 markdown 编辑器来编辑，但是 word 还是需要的，因为编辑会在 word 中批注，再返回给你修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Translation-shell&lt;/strong&gt;：命令行翻译工具，见 &lt;a href=&#34;https://github.com/soimort/translate-shell&#34; title=&#34;Github&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;
。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;翻译过程&#34;&gt;翻译过程&lt;/h2&gt;
&lt;p&gt;以下是我个人总结的图书翻译流程，仅供参考。&lt;/p&gt;
&lt;h3 id=&#34;1-分析原版压缩包的结构&#34;&gt;1. 分析原版压缩包的结构&lt;/h3&gt;
&lt;p&gt;以 &lt;a href=&#34;https://jimmysong.io/book/cloud-native-python&#34; title=&#34;Cloud Native Python&#34;&gt;Cloud Native Python&lt;/a&gt;
 这本书为例，原文的压缩包里包含以下目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt;：书中的代码示例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cover&lt;/strong&gt;：本书的封面图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E-Book&lt;/strong&gt;：本书的完成 PDF 文档（一个文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graphics&lt;/strong&gt;：书中的图片，按照章节和顺序编号，放在一个目录下，不一定与图片在书中出现的顺序相同，有些后来补充的图片会另外编号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Printers&lt;/strong&gt;：用于印刷的 PDF 文档，分为封面和正文&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-初始化翻译项目&#34;&gt;2. 初始化翻译项目&lt;/h3&gt;
&lt;p&gt;我们使用 Git 来管理，使用 Gitbook 来预览，需要先初始化一些目录结构和 gitbook 配置。&lt;/p&gt;
&lt;p&gt;初始化的目录和文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LANGS.md&lt;/strong&gt;：语言配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;README.md&lt;/strong&gt;：项目说明&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;book.json&lt;/strong&gt;：gitbook 配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cn&lt;/strong&gt;：中文翻译（按章节划分成不同的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;corrigendum.md&lt;/strong&gt;：勘误表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cover.jpg&lt;/strong&gt;：书籍封面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;en&lt;/strong&gt;：英文原文（按章节划分成不同的文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;glossary.md&lt;/strong&gt;：术语表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images&lt;/strong&gt;：保存书中的图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让 Gitbook 支持多语言的 &lt;code&gt;book.json&lt;/code&gt; 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cloud Native Python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cloud Native Python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zh-hans&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Jimmy Song&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;links&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;sidebar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://jimmysong.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;codesnippet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;splitter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;page-toc-button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;back-to-top-button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-lunr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-search&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;search-plus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;tbfed-pagefooter@^0.0.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;pluginsConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;tbfed-pagefooter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Copyright © jimmysong.io 2017&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;modify_label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Updated:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;modify_format&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YYYY-MM-DD HH:mm:ss&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;LANG.md&lt;/code&gt; 文件中定义不同语言的文件目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# Languages
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;*&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;中文&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;cn/&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;*&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;English&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;en/&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-原文-markdown-化&#34;&gt;3. 原文 Markdown 化&lt;/h3&gt;
&lt;p&gt;之所以将原文 Markdown 化一是便于我们后续翻译的时候对照英文和引用其中的原文，二是为了生成 gitbook 便于浏览。将每一章的内容都划分成一个 Markdown 文件，按照章节的名字为文档命名，分别在 &lt;code&gt;cn&lt;/code&gt; 和 &lt;code&gt;en&lt;/code&gt; 目录下都放一份。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/cloud-native-python-cn-en.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/cloud-native-python-cn-en.jpg&#34; data-width=&#34;1184&#34; data-height=&#34;629&#34; alt=&#34;image&#34; data-caption=&#34;中英文目录&#34;&gt;
    
  
  &lt;figcaption&gt;中英文目录&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;4-开始正文的翻译&#34;&gt;4. 开始正文的翻译&lt;/h3&gt;
&lt;p&gt;建议从头开始按顺序翻译，如果前后章节联系不大的可以跳跃翻译，翻译的过程中将一些关键的术语，包括翻译不明确的，需要后续参考的数据记录在 &lt;code&gt;glossary.md&lt;/code&gt; 文档中。&lt;/p&gt;
&lt;p&gt;格式如下所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;English&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;是否翻译&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cross-Origin Resource Sharing&lt;/td&gt;
&lt;td&gt;跨源资源共享&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP header&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Observable&lt;/td&gt;
&lt;td&gt;观察者&lt;/td&gt;
&lt;td&gt;可以不翻译，中文翻译比较模糊&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cookies&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不翻译，保持复数&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;module&lt;/td&gt;
&lt;td&gt;模块&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;origin&lt;/td&gt;
&lt;td&gt;源&lt;/td&gt;
&lt;td&gt;有争议&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;会话&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以不断向其中追加新的术语。&lt;/p&gt;
&lt;p&gt;翻译的过程中需要用到翻译工具，我使用的是 &lt;a href=&#34;https://github.com/soimort/translate-shell&#34; title=&#34;translation-shell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;translation-shell&lt;/a&gt;
，一款基于命令行的翻译工具，可以使用 Google、bing 或者 Yandex 翻译，十分方便快捷。也推荐大家使用 &lt;a href=&#34;https://www.deepl.com/&#34; title=&#34;DeepL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepL&lt;/a&gt;
，翻译效果更好。&lt;/p&gt;
&lt;p&gt;注：使用翻译工具是为了将书籍快速汉化，减少大量的人工输入，但是因为机器翻译比较生硬，而且其中难免有错误，需要译者投入大量心思去优化。&lt;/p&gt;
&lt;h4 id=&#34;translation-shell&#34;&gt;Translation-shell&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;trans :zh -b -shell&lt;/code&gt; 进入 translation-shell 交互式界面，拷贝英文段落进去翻译成中文。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-trans-terminal.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-trans-terminal.jpg&#34; data-width=&#34;1029&#34; data-height=&#34;393&#34; alt=&#34;image&#34; data-caption=&#34;Translation-shell&#34;&gt;
    
  
  &lt;figcaption&gt;Translation-shell&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;注：推荐使用翻译质量更高的工具 &lt;a href=&#34;https://deepl.com/&#34; title=&#34;DeepL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepL&lt;/a&gt;
（更新于 2022 年 02 月 22 日）。&lt;/p&gt;
&lt;h4 id=&#34;使用-typora-编辑中文翻译&#34;&gt;使用 Typora 编辑中文翻译&lt;/h4&gt;
&lt;p&gt;同时打开 &lt;code&gt;en&lt;/code&gt; 和 &lt;code&gt;cn&lt;/code&gt; 目录下的同一章节开始翻译。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-typora-multi-language.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-typora-multi-language.jpg&#34; data-width=&#34;1878&#34; data-height=&#34;1057&#34; alt=&#34;image&#34; data-caption=&#34;中英文翻译界面&#34;&gt;
    
  
  &lt;figcaption&gt;中英文翻译界面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;在-gitbook-中查看&#34;&gt;在 Gitbook 中查看&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;gitbook serve&lt;/code&gt; 启用 gitbook 服务，在 http://localhost:4000 页面上查看内容。&lt;/p&gt;
&lt;p&gt;首先会出来语言选择页面，我们可以分别选择中文和英文内容浏览，语言是在 &lt;code&gt;LAGNS.md&lt;/code&gt; 文件中定义的。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-gitbook-cn-en.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-gitbook-cn-en.jpg&#34; data-width=&#34;1878&#34; data-height=&#34;1055&#34; alt=&#34;image&#34; data-caption=&#34;Gitbook&#34;&gt;
    
  
  &lt;figcaption&gt;Gitbook&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;导出为不同格式&#34;&gt;导出为不同格式&lt;/h4&gt;
&lt;p&gt;使用 typora 编辑完中文翻译后，可以导出为 pdf、word 等其它格式，我们导出为 word 格式后发送给编辑批阅。&lt;/p&gt;
&lt;p&gt;生成的 word 内容格式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-word-cn.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-word-cn.jpg&#34; data-width=&#34;879&#34; data-height=&#34;1028&#34; alt=&#34;image&#34; data-caption=&#34;word 文档格式&#34;&gt;
    
  
  &lt;figcaption&gt;word 文档格式&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们可以看到生产的 word 文档仍然保留了代码的高亮，而且可读性也很好。&lt;/p&gt;
&lt;h3 id=&#34;5-审校&#34;&gt;5. 审校&lt;/h3&gt;
&lt;p&gt;每当翻译完一章内容后就发送给编辑，编辑会使用 word 进行审校批注，根据编辑的批注修改后再发回给编辑。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/how-to-translate-a-book/translation-word-review.jpg&#34; data-img=&#34;/blog/how-to-translate-a-book/translation-word-review.jpg&#34; data-width=&#34;978&#34; data-height=&#34;995&#34; alt=&#34;image&#34; data-caption=&#34;word review 界面&#34;&gt;
    
  
  &lt;figcaption&gt;word review 界面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;6-二审&#34;&gt;6. 二审&lt;/h3&gt;
&lt;p&gt;当所有的章节分别翻译和审校完成后，需要在通读一遍全书，更正前后不一致和翻译中的谬误，然后交给编辑等待排版。这时候还要准备写译者序，还要找人写推荐序。翻译版的图书封面会沿用原书的封面。&lt;/p&gt;
&lt;h3 id=&#34;7-印刷&#34;&gt;7. 印刷&lt;/h3&gt;
&lt;p&gt;当正文、译者序、推荐序都完成后就可以交给出版社印刷了，一般初次会印刷几千本。&lt;/p&gt;
&lt;h3 id=&#34;8-后续事宜&#34;&gt;8. 后续事宜&lt;/h3&gt;
&lt;p&gt;书籍印刷后后续事宜主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社支付稿费：翻译图书稿费 = 图书销量 x 定价 x4%，著作一般为 8%&lt;/li&gt;
&lt;li&gt;配合图书宣传：一些 meetup、大会、线上交流时推荐图书&lt;/li&gt;
&lt;li&gt;读者交流：可以开设社区、微信群、网站等交流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;贴士&#34;&gt;贴士&lt;/h2&gt;
&lt;p&gt;图书翻译耗时费力，倾注了原作者和译者的很多心力，打击盗版，维护正版！&lt;/p&gt;
&lt;h2 id=&#34;有用的链接&#34;&gt;有用的链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.termonline.cn/index.htm&#34; title=&#34;术语在线&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;术语在线&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1289408/&#34; title=&#34;非文学翻译理论与实践 - 王长栓&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;非文学翻译理论与实践 - 王长栓&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>记 Kubernetes 中国用户大会 KEUC 2017</title>
      <link>https://jimmysong.io/blog/keuc-china-2017/</link>
      <pubDate>Sat, 14 Oct 2017 19:32:46 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/keuc-china-2017/</guid>
      <description>
        
        
        &lt;p&gt;今天受 k8smeetup 社区邀请来到杭州，参加 Kubernetes 中国用户大会简称 &lt;a href=&#34;http://keuc.k8smeetup.com/&#34; title=&#34;KEUC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KEUC&lt;/a&gt;
，这已经是我第三次来杭州了，算是再续前缘吧！&lt;/p&gt;
&lt;p&gt;其实今年 6 月 19 日 LinuxCon + ContainerCon + CloudOpen 简称 &lt;a href=&#34;https://www.bagevent.com/event/561769&#34; title=&#34;L3 大会&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;L3 大会&lt;/a&gt;
在北京国家会议中心召开，那是我跟 &lt;a href=&#34;https://cncf.io&#34; title=&#34;CNCF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt;
 首次相会，也获得了我的首批贴纸，该社区的一系列活动吸引了我浓浓的兴趣，自那以后开始持续关注 CNCF 的社区活动。&lt;/p&gt;
&lt;p&gt;借用孙中山先生在黄埔军校的训词，愿 Kubernetes 携手云原生应用，让 IT 基础设施和软件开发流程进入新的纪元。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生主义歌&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;库巴内提，吾辈所宗；携云原生，以进大同。
咨尔多士，为民前锋；夙夜匪懈，主义是从。
创业维艰，矢勤矢勇；同心共德，贯彻始终。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;祝愿明天的大会圆满成功！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天不小心获得了 k8smeetup 最佳技术专栏作者和社区最佳译者奖，感谢 CNCF 和 k8smeetup 社区。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/keuc-china-2017/kubc-translator.jpg&#34; data-img=&#34;/blog/keuc-china-2017/kubc-translator.jpg&#34; data-width=&#34;1616&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;k8smeetup 译者合影&#34;&gt;
    
  
  &lt;figcaption&gt;k8smeetup 译者合影&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然后跟 CNCF 执行副总裁 Dan Kohn 探讨了下云原生技术在中国的推广，明年在中国会有云原生相关大会。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/keuc-china-2017/keuc-with-dan-kohn.JPG&#34; data-img=&#34;/blog/keuc-china-2017/keuc-with-dan-kohn.JPG&#34; data-width=&#34;1616&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;Jimmy 和 CNCF 执行副总裁 Dan Kohn 在一起&#34;&gt;
    
  
  &lt;figcaption&gt;Jimmy 和 CNCF 执行副总裁 Dan Kohn 在一起&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;欢迎大家持续关注云原生的发展。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>两款开源图片处理工具对比</title>
      <link>https://jimmysong.io/blog/picture-process/</link>
      <pubDate>Sun, 02 Apr 2017 20:27:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/picture-process/</guid>
      <description>
        
        
        &lt;p&gt;如果你看过美剧「硅谷」会记得剧中主角们所在的创业公司PiedPipper，他们就是靠自己发明的视频压缩算法来跟大公司 Hooli 竞争的，这部剧现在已经发展到第 4 季，在&lt;a href=&#34;http://v.qq.com/detail/d/dr2zn76oez8tyt4.html?ptag=baidu.aladdin.tv&#34; title=&#34;腾讯视频&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;腾讯视频&lt;/a&gt;
上可以免费观看。&lt;/p&gt;
&lt;p&gt;最近关注了两个&lt;strong&gt;图像处理&lt;/strong&gt;的 Open Source Projects。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guetzli&#34; title=&#34;Google Guetzli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Guetzli&lt;/a&gt;
 图像压缩工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer&#34; title=&#34;Luan Fujun&amp;amp;rsquo;s Deep Photo Style Transfer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Luan Fujun&amp;rsquo;s Deep Photo Style Transfer&lt;/a&gt;
 图像 style 转换工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外对于图像处理还处于 Photoshop、Lightroom 这种摄影后期和图像处理命令行工具&lt;a href=&#34;https://www.imagemagick.org/script/index.php&#34; title=&#34;ImageMagick&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ImageMagick&lt;/a&gt;
的我来说，图像压缩，智能图像风格转换实乃上乘武功，不是我等凡夫俗子驾驭的了，但是乘兴而来，总不能败兴而归吧，下面我们来一探究竟。&lt;/p&gt;
&lt;h2 id=&#34;google-guetzli&#34;&gt;Google Guetzli&lt;/h2&gt;
&lt;p&gt;聊聊架构微信公众号上有一篇介绍&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;amp;mid=2659599074&amp;amp;idx=1&amp;amp;sn=a26ae2a8becdc1f2cfbddf44d8ca1495&amp;amp;chksm=8be997f0bc9e1ee6e33f3e33c73d11884ad66085c0aedc9dd5e482063482887d0733d8e7d187#rd&#34; title=&#34;Google 开源新算法，可将 JPEG 文件缩小 35%&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google 开源新算法，可将 JPEG 文件缩小 35%&lt;/a&gt;
文章。&lt;/p&gt;
&lt;p&gt;我在 Mac 上试用了一下，安装很简单，只要一条命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install guetzli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是当我拿一张&lt;code&gt;22M&lt;/code&gt;大小的照片使用 guetzli 压缩的时候，我是绝望的，先后三次 kill 掉了进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为实在是太慢了&lt;/strong&gt;，也能是我软件对内存和 CPU 的利用率不高，效果你们自己看看。&lt;/p&gt;
&lt;p&gt;原图是这个样子的，拍摄地点在景山上的，俯瞰紫禁城的绝佳位置。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/picture-process/IMG_5430.JPG&#34; data-img=&#34;/blog/picture-process/IMG_5430.JPG&#34; data-width=&#34;2802&#34; data-height=&#34;1978&#34; alt=&#34;image&#34; data-caption=&#34;原图&#34;&gt;
    
  
  &lt;figcaption&gt;原图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;guetzli --quality &lt;span class=&#34;m&#34;&gt;84&lt;/span&gt; --verbose 20160403052.jpg output.jpg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么 quality 要设置成 84 呢？因为只能设置为 84+ 的 quality，如果要设置的更低的话需要自己修改代码。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/picture-process/IMG_5429.JPG&#34; data-img=&#34;/blog/picture-process/IMG_5429.JPG&#34; data-width=&#34;3254&#34; data-height=&#34;2034&#34; alt=&#34;image&#34; data-caption=&#34;process&#34;&gt;
    
  
  &lt;figcaption&gt;process&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;耗时了一个小时，后台进程信息。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/picture-process/IMG_5428.JPG&#34; data-img=&#34;/blog/picture-process/IMG_5428.JPG&#34; data-width=&#34;3254&#34; data-height=&#34;2034&#34; alt=&#34;image&#34; data-caption=&#34;后台进程&#34;&gt;
    
  
  &lt;figcaption&gt;后台进程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这个是使用&lt;strong&gt;Squash&lt;/strong&gt;压缩后的大小效果，压缩每张照片差不多只要 3 秒钟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Squash 的 logo 就是个正在被剥皮的🍊，这是&lt;a href=&#34;http://xclient.info/s/squash.html&#34; title=&#34;下载地址&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载地址&lt;/a&gt;
。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩比分别为&lt;code&gt;70%&lt;/code&gt;和&lt;code&gt;30%&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/picture-process/IMG_5434.JPG&#34; data-img=&#34;/blog/picture-process/IMG_5434.JPG&#34; data-width=&#34;1652&#34; data-height=&#34;314&#34; alt=&#34;image&#34; data-caption=&#34;Img&#34;&gt;
    
  
  &lt;figcaption&gt;Img&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩比 70% 后的细节放大图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/picture-process/IMG_5432.JPG&#34; data-img=&#34;/blog/picture-process/IMG_5432.JPG&#34; data-width=&#34;2802&#34; data-height=&#34;1978&#34; alt=&#34;image&#34; data-caption=&#34;70&#34;&gt;
    
  
  &lt;figcaption&gt;70&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩比 30% 的细节放大图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/picture-process/IMG_5433.JPG&#34; data-img=&#34;/blog/picture-process/IMG_5433.JPG&#34; data-width=&#34;2802&#34; data-height=&#34;1978&#34; alt=&#34;image&#34; data-caption=&#34;30&#34;&gt;
    
  
  &lt;figcaption&gt;30&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;你看出什么区别了吗？反正我是没有。&lt;/p&gt;
&lt;p&gt;下面再来看看耗时一个小时，千呼万唤始出来的 guetzli 压缩后的效果和使用 squash 压缩比为 30% 的效果对比。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/picture-process/FullSizeRender.jpg&#34; data-img=&#34;/blog/picture-process/FullSizeRender.jpg&#34; data-width=&#34;3269&#34; data-height=&#34;2100&#34; alt=&#34;image&#34; data-caption=&#34;对比&#34;&gt;
    
  
  &lt;figcaption&gt;对比&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;左面是使用 guetzli 压缩后（4.1M），右面使用的 squash 压缩后（3.1M）的照片。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;似乎还是没有什么区别啊？你看出来了吗？&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;guetzli-总结&#34;&gt;Guetzli 总结&lt;/h3&gt;
&lt;p&gt;可能是我使用 Guetzli 的方式不对，但是命令行里确实没有设置 CPU 和内存资源的选项啊，为啥压缩照片会这么慢呢？效果也并不出彩，不改代码的话照片质量只能设置成 84 以上，但是这个是&lt;strong&gt;Open Source&lt;/strong&gt;的，使用的 C++ 开发，可以研究下它的图像压缩算法。&lt;/p&gt;
&lt;h1 id=&#34;deep-photo-style-transfer&#34;&gt;Deep Photo Style Transfer&lt;/h1&gt;
&lt;p&gt;来自康奈尔大学的 Luan Fujun 开源的图像 sytle 转换工具，看了&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer&#34; title=&#34;README&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;README&lt;/a&gt;
的介绍，上面有很多图像风格转换的例子，真的很惊艳，市面上好像还没有这种能够在给定任意一张照片的情况下，自动将另一张照片转换成该照片的 style。&lt;/p&gt;
&lt;p&gt;这个工具使用 Matlab 和 Lua 开发，基于&lt;a href=&#34;https://github.com/torch/torch7&#34; title=&#34;Torch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Torch&lt;/a&gt;
运行的时候需要&lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34; title=&#34;CUDA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CUDA&lt;/a&gt;
，&lt;a href=&#34;https://developer.nvidia.com/cudnn&#34; title=&#34;cudnn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cudnn&lt;/a&gt;
，&lt;a href=&#34;https://www.mathworks.com/&#34; title=&#34;Matlab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Matlab&lt;/a&gt;
，环境实在太复杂，就没折腾，启动有人发布&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer/issues/29&#34; title=&#34;Docker 镜像&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 镜像&lt;/a&gt;
，已经有人提了 issue。&lt;/p&gt;
&lt;p&gt;如果它能够被商用，绝对是继&lt;strong&gt;Prisma&lt;/strong&gt;后又一人工智能照片处理应用利器。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;是不是有了照片风格转换这个东西就不需要做照片后期了？只要选几张自己喜欢的风格照片，再鼠标点几下就可以完成照片处理了？摄影师要失业了？非也！照片风格东西本来就是很主观性的，每个人都有自己喜欢的风格，照相机发明后就有人说画家要失业了，其实不然，画画依然是创造性地劳动，只能说很多写实风格的画家要失业了。Deep Photo Style Transfer 也许会成为 Lightroom 或者手机上一款 app 的功能，是一个不错的工具。也许还会成为像 Prisma 一样的现象级产品，who knows?🤷‍♂️&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>零基础使用 Hugo 和 GitHub Pages 创建自己的博客</title>
      <link>https://jimmysong.io/blog/building-github-pages-with-hugo/</link>
      <pubDate>Fri, 17 Mar 2017 22:08:25 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/building-github-pages-with-hugo/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;亲，你还在为虚拟主机、域名、空间而发愁吗？你想拥有自己的网站吗？你想拥有一个分享知识、留住感动，为开源事业而奋斗终身吗？那么赶快拿起你手中的📱拨打&lt;del&gt;16899168&lt;/del&gt;，不对，是看这篇文章吧，不用 998，也不用 168，这一切都是免费的，是的&lt;strong&gt;你没看错，真的不要钱！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;当然还是需要你有一点电脑基础的，会不会编程不要紧，还要会一点英文，你需要先申请一下几个账号和安装一些软件环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.github.com&#34; title=&#34;GitHub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;
 &lt;strong&gt;这是必需的&lt;/strong&gt;，因为你需要使用&lt;a href=&#34;https://pages.github.com/&#34; title=&#34;Github Pages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Pages&lt;/a&gt;
来托管你的网站。而且你还需要安装 git 工具。创建一个以自己用户名命名的 username.github.io 的 project。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qiniu.com/&#34; title=&#34;七牛云存储&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;七牛云存储&lt;/a&gt;
 &lt;strong&gt;非必需&lt;/strong&gt;，为了存储文件方便，建议申请一个，免费 10G 的存储空间，存储照片和一些小文件是足够的，可以用来做外链，方便存储和管理，这样你就不用把图片也托管到 Github 上了。流量也是不限的。我没有收七牛的一点好处，以为是我自己用的，所以推荐给大家，七牛还有命令行客户端，方便你上传和同步文件。如上的题图都是存储在七牛云中的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tongji.baidu.com&#34; title=&#34;百度统计&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;百度统计&lt;/a&gt;
 &lt;strong&gt;非必需&lt;/strong&gt;，基本的网站数据分析，免费的，质量还行。还有微信公众号可以查看，这一点我发现腾讯分析居然都没有微信公众号，自家的产品咋都不推出微信客户端呢。顺便提一下，这个统计账号跟你的百度账号不是同一个东西，两者是两套体系，当然你可以和自己的百度账号关联。只需要在 Web 的 Header 中植入一段 JS 代码即可。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34; title=&#34;Hugo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;
 &lt;strong&gt;必需的&lt;/strong&gt;，静态网站生成工具，用来编译静态网站的。跟 Hexo 比起来我更喜欢这个工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://typora.io/&#34; title=&#34;Typro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Typro&lt;/a&gt;
 &lt;strong&gt;非必需&lt;/strong&gt;，但是强烈推荐，我最喜欢的免费的 Markdown 编辑器，hugo 可以编译 markdown 格式为 HTML，所以用它来写博客是最合适不过了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了注册好 Github 后你现在可以尽情的玩耍了！😄&lt;/p&gt;
&lt;h2 id=&#34;lets-rockroll&#34;&gt;Let&amp;rsquo;s rock&amp;amp;roll!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;首先介绍下 Hugo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hugo 是一种通用的网站框架。严格来说，Hugo 应该被称作静态网站生成器。&lt;/p&gt;
&lt;p&gt;静态网站生成器从字面上来理解，就是将你的内容生成静态网站。所谓“静态”的含义其实反映在网站页面的生成的时间。一般的 web 服务器（WordPress, Ghost, Drupal 等等）在收到页面请求时，需要调用数据库生成页面（也就是 HTML 代码），再返回给用户请求。而静态网站则不需要在收到请求后生成页面，而是在整个网站建立起之前就将所有的页面全部生成完成，页面一经生成便称为静态文件，访问时直接返回现成的静态页面，不需要数据库的参与。&lt;/p&gt;
&lt;p&gt;采用静态网站的维护也相当简单，实际上你根本不需要什么维护，完全不用考虑复杂的运行时间，依赖和数据库的问题。再有也不用担心安全性的问题，没有数据库，网站注入什么的也无从下手。&lt;/p&gt;
&lt;p&gt;静态网站最大好处就是访问快速，不用每次重新生成页面。当然，一旦网站有任何更改，静态网站生成器需要重新生成所有的与更改相关的页面。然而对于小型的个人网站，项目主页等等，网站规模很小，重新生成整个网站也是非常快的。Hugo 在速度方面做得非常好，Dan Hersam 在他这个&lt;a href=&#34;https://www.udemy.com/build-static-sites-in-seconds-with-hugo/&#34; title=&#34;Hugo 教程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo 教程&lt;/a&gt;
里提到，5000 篇文章的博客，Hugo 生成整个网站只花了 6 秒，而很多其他的静态网站生成器则需要几分钟的时间。我的博客目前文章只有几十篇，用 Hugo 生成整个网站只需要 0.1 秒。官方文档提供的数据是每篇页面的生成时间不到 1ms。&lt;/p&gt;
&lt;p&gt;认为对于个人博客来说，应该将时间花在内容上而不是各种折腾网站。Hugo 会将 Markdown 格式的内容和设置好模版一起，生成漂亮干净的页面。挑选折腾好一个喜爱的模版，在 Sublime Text 里用 Markdown 写博客，再敲一行命令生成同步到服务器就 OK 了。整个体验是不是非常优雅简单还有点 geek 的味道呢？&lt;/p&gt;
&lt;h3 id=&#34;了解-hugo&#34;&gt;了解 Hugo&lt;/h3&gt;
&lt;p&gt;首先建立自己的网站，mysite 是网站的路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo new site mysite
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后进入该路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; mysite
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在该目录下你可以看到以下几个目录和&lt;code&gt;config.toml&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ▸ archetypes/ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ▸ content/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ▸ layouts/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ▸ static/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   config.toml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;是网站的配置文件，包括&lt;code&gt;baseurl&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;copyright&lt;/code&gt;等等网站参数。&lt;/p&gt;
&lt;p&gt;这几个文件夹的作用分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;archetypes：包括内容类型，在创建新内容时自动生成内容的配置&lt;/li&gt;
&lt;li&gt;content：包括网站内容，全部使用 markdown 格式&lt;/li&gt;
&lt;li&gt;layouts：包括了网站的模版，决定内容如何呈现&lt;/li&gt;
&lt;li&gt;static：包括了 css, js, fonts, media 等，决定网站的外观&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo 提供了一些完整的主题可以使用，下载这些主题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时现成的主题存放在&lt;code&gt;themes/&lt;/code&gt;文件夹中。&lt;/p&gt;
&lt;p&gt;现在我们先熟悉一下 Hugo，创建新页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo new about.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入&lt;code&gt;content/&lt;/code&gt;文件夹可以看到，此时多了一个 markdown 格式的文件&lt;code&gt;about.md&lt;/code&gt;，打开文件可以看到时间和文件名等信息已经自动加到文件开头，包括创建时间，页面名，是否为草稿等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: &amp;#34;2015-02-01T18:19:54+08:00&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;draft: true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title: &amp;#34;about&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;categories: &amp;#34;github-pages&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tag: [&amp;#34;blog&amp;#34;,&amp;#34;post&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# About me
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Jimmy Song
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; rootsongjc@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我在页面中加入了一些内容，然后运行 Hugo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo server -t hyde --buildDrafts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;参数的意思是使用 hyde 主题渲染我们的页面，注意到&lt;code&gt;about.md&lt;/code&gt;目前是作为草稿，即&lt;code&gt;draft&lt;/code&gt;参数设置为&lt;code&gt;true&lt;/code&gt;，运行 Hugo 时要加上&lt;code&gt;--buildDrafts&lt;/code&gt;参数才会生成被标记为草稿的页面。在浏览器输入 localhost:1313，就可以看到我们刚刚创建的页面。&lt;/p&gt;
&lt;p&gt;注意观察当前目录下多了一个文件夹&lt;code&gt;public/&lt;/code&gt;，这里面是 Hugo 生成的整个静态网站，如果使用 Github pages 来作为博客的 Host，你只需要将&lt;code&gt;public/&lt;/code&gt;里的文件上传就可以，这相当于是 Hugo 的输出。&lt;/p&gt;
&lt;p&gt;详细说明请看这位朋友的文章：&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34; title=&#34;Nanshu Wang - Hugo 静态网站生成器中文教程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nanshu Wang - Hugo 静态网站生成器中文教程&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;hugo new&lt;/code&gt;命令生成的文章前面的加号中包括的那几行，是用来设置文章属性的，这些属性使用的是 yaml 语法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt; 自动增加时间标签，页面上默认显示 n 篇最新的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;draft&lt;/strong&gt; 设置为 false 的时候会被编译为 HTML，true 则不会编译和发表，在本地修改文章时候用 true。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; 设置文章标题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt; 数组，可以设置多个标签，都好隔开，hugo 会自动在你博客主页下生成标签的子 URL，通过这个 URL 可以看到所有具有该标签的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;categories&lt;/strong&gt; 文章分类，跟 Tag 功能差不多，只能设置一个字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天先说到这里，再次声明下，&lt;a href=&#34;https://jimmysong.io&#34; title=&#34;Jimmy Song&amp;amp;rsquo;s blog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jimmy Song&amp;rsquo;s blog&lt;/a&gt;
就是用👆的步骤建立的。&lt;/p&gt;
&lt;p&gt;Jimmy Song&amp;rsquo;s blog 的页面比较简陋，你可以在&lt;a href=&#34;http://themes.gohugo.io&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;
找到更多可爱的模版。另外我给自己翻译的书&lt;a href=&#34;https://jimmysong.io/talks/cloud-native-go/&#34; title=&#34;Cloude Native Go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloude Native Go&lt;/a&gt;
做一个静态页面，&lt;a href=&#34;https://jimmysong.io/cloud-native-go/&#34; title=&#34;点此查看&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点此查看&lt;/a&gt;
，欢迎大家关注。🙏&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下 2017 年 8 月 31 日更新&lt;/p&gt;
&lt;p&gt;如果你对 GitHub 的域名不满意，想要用自己的域名，那么申请域名的地方有很多，比如万网、GoDaddy、Namecheap，我的域名 &lt;a href=&#34;http://jimmysong.io&#34; title=&#34;jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jimmysong.io&lt;/a&gt;
 就是在 Namecheap 上申请的，申请完域名后还需要做域名解析，我使用的是 DNSPod，免费的，然后在 GitHub 中配置下 CNAME 即可。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>微服务设计读书笔记</title>
      <link>https://jimmysong.io/blog/microservice-reading-notes/</link>
      <pubDate>Sat, 11 Mar 2017 15:45:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/microservice-reading-notes/</guid>
      <description>
        
        
        &lt;p&gt;最近在看 &lt;strong&gt;《微服务设计（Sam Newman 著）》&lt;/strong&gt; 这本书。作者是 &lt;strong&gt;ThoughtWorks&lt;/strong&gt; 的 Sam Newman。这本书中包括很多业界是用案例，比如 &lt;strong&gt;Netflix&lt;/strong&gt; 和 &lt;strong&gt;亚马逊&lt;/strong&gt;。有兴趣的话大家一起看看讨论一下。😄&lt;/p&gt;
&lt;p&gt;P.S 这本书比较偏理论，另外还有一本中国人写的书，&lt;strong&gt;《微服务架构与实践，王磊著，电子工业出版社》&lt;/strong&gt; 。这个人同样也是 &lt;strong&gt;ThoughtWorks&lt;/strong&gt; 的，两个人的观点不谋而合，依然是便理论的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cloud Native Go - 基于 Go 和 React 的 web 云服务构建指南&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这本书是我最近在翻译的，将由 &lt;strong&gt;电子工业出版社&lt;/strong&gt; 出版，本书根据实际案例教你如何构建一个 web 微服务，是实践为服务架构的很好的参考。&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34; title=&#34;查看本书介绍&#34;&gt;查看本书介绍&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;1微服务初探&#34;&gt;1.微服务初探&lt;/h2&gt;
&lt;h3 id=&#34;什么是微服务&#34;&gt;什么是微服务？&lt;/h3&gt;
&lt;p&gt;微服务（Microservices）这个词比较新颖，但是其实这种架构设计理念早就有了。微服务是一种分布式架构设计理念，为了推动细粒度服务的使用，这些服务要能协同工作，每个服务都有自己的生命周期。一个微服务就是一个独立的实体，可以独立的部署在 PAAS 平台上，也可以作为一个独立的进程在主机中运行。服务之间通过 API 访问，修改一个服务不会影响其它服务。&lt;/p&gt;
&lt;h3 id=&#34;微服务的好处&#34;&gt;微服务的好处&lt;/h3&gt;
&lt;p&gt;微服务的好处有很多，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助你更快的采用新技术&lt;/li&gt;
&lt;li&gt;解决技术异构的问题，因为是用 API 网络通信，可以使用不同的语言和技术开发不同的服务&lt;/li&gt;
&lt;li&gt;增强系统弹性，服务的边界比较清晰，便于故障处理&lt;/li&gt;
&lt;li&gt;方便扩展，比如使用容器技术，可以很方便的一次性启动很多个微服务&lt;/li&gt;
&lt;li&gt;方便部署，因为微服务之间彼此独立，所以能够独立的部署单个服务而不影响其它服务，如果部署失败的话还可以回滚&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别忘了康威定律，微服务可以很好契合解决组织架构问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可重用，可随意组合&lt;/li&gt;
&lt;li&gt;便于维护，可以随时重写服务，不必担心历史遗留问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与面向服务架构-soa-的关系&#34;&gt;与面向服务架构 SOA 的关系&lt;/h3&gt;
&lt;p&gt;可以说微服务架构师 SOA 的一种，但是目前的大多数 SOA 做的都不好，在&lt;code&gt;通信协议的选择&lt;/code&gt;、&lt;code&gt;第三方中间件的选择&lt;/code&gt;、&lt;code&gt;服务力度如何划分&lt;/code&gt;方面做的都不够好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务与 SOA 的共同点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都使用共享库，比如可重用的代码库&lt;/li&gt;
&lt;li&gt;模块化，比如 Java 中的 OSGI(Open Source Gateway Initiative)、Erlang 中的模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2架构师的职责&#34;&gt;2.架构师的职责&lt;/h2&gt;
&lt;h3 id=&#34;架构师应该关心是什么&#34;&gt;架构师应该关心是什么&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;架构师（Architect）&lt;strong&gt;在英文中和&lt;/strong&gt;建筑师&lt;/strong&gt;是同一个词，他们之间也有很多相同之处，架构师构建的是软件，而建筑师构建的是建筑。&lt;/p&gt;
&lt;p&gt;终于看到了我翻译的&lt;em&gt;Cloud Native Go&lt;/em&gt;第 14 章中引用的这本书的原话了。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/microservice-reading-notes/building-microservices-reference.jpg&#34; data-img=&#34;/blog/microservice-reading-notes/building-microservices-reference.jpg&#34; data-width=&#34;1916&#34; data-height=&#34;674&#34; alt=&#34;image&#34; data-caption=&#34;原话&#34;&gt;
    
  
  &lt;figcaption&gt;原话&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;软件的需求变更是&lt;strong&gt;来的那么快来的那么直接&lt;/strong&gt;，不像建筑那样可以在设计好后按照设计图纸一步步的去建设。&lt;/p&gt;
&lt;p&gt;架构师应该关心的是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证系统适合开发人员在上面工作&lt;/li&gt;
&lt;li&gt;关注服务之间的交互，不需要过于关注各个服务内部发生的事情，比如服务之间互相调用的接口，是使用&lt;code&gt;protocol buffer&lt;/code&gt;呢，还是使用&lt;code&gt;RESTful API&lt;/code&gt;，还是使用&lt;code&gt;Java RMI&lt;/code&gt;，这个才是架构师需要关注的问题，至于服务内部究竟使用什么，那就看开发人员自己了，&lt;strong&gt;架构师更需要关注系统的边界和分区&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;架构师应该与团队在一起，&lt;strong&gt;结对编程&lt;/strong&gt; 🤓🤓 了解普通工作，知道普通的工作是什么样子，做一个&lt;em&gt;代码架构师&lt;/em&gt; 😂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构师应该做什么&#34;&gt;架构师应该做什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供原则指导实践，比如 Heroku 的&lt;a href=&#34;https://jimmysong.io/posts/12-factor-app/&#34; title=&#34;12 因素法则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12 因素法则&lt;/a&gt;
用来指导 SAAS 应用架构一样，微服务架构设计也要有一套原则。&lt;/li&gt;
&lt;li&gt;提供要求标准，通过日志功能和监控对服务进行集中式管理，明确接口标准，提供安全性建议。&lt;/li&gt;
&lt;li&gt;代码治理。为开发人员提供范例和服务代码模板。&lt;/li&gt;
&lt;li&gt;解决技术债务。&lt;/li&gt;
&lt;li&gt;集中治理和领导。维持良好的团队关系，当团队跑偏的时候及时纠正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3服务建模&#34;&gt;3.服务建模&lt;/h2&gt;
&lt;p&gt;以&lt;strong&gt;MusicCorp&lt;/strong&gt;这家公司的服务为例子讲解。&lt;/p&gt;
&lt;p&gt;服务建模的两个指导原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高内聚：关键是找出问题的边界，把相关的问题放在同一个服务中。&lt;/li&gt;
&lt;li&gt;松耦合：修改一个服务不需要修改另一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;strong&gt;限定上下文&lt;/strong&gt;（一个由显示边界限定的特定指责）的方法将服务拆分，比如 MusicCorp 的服务可以拆分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;财务部门&lt;/li&gt;
&lt;li&gt;仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们都不需要知道各自的具体实现，只要给它们提供特定的输入就会有你想要的产出。&lt;/p&gt;
&lt;p&gt;过早的将一个系统划分成微服务的代价非常高，尤其是在面对新领域时，将一个已有的代码库划分成微服务会比葱头开始建设微服务要简单的多。&lt;/p&gt;
&lt;h2 id=&#34;4集成&#34;&gt;4.集成&lt;/h2&gt;
&lt;p&gt;使用共享数据库，为用户创建好接口，可以使用 RPC（protocol buffer、thrift）或者 REST。服务端和客户端消息格式可以用 Json 或 XML。当然每种技术都有各自的适用场景，结合自己的业务选择。&lt;/p&gt;
&lt;p&gt;微服务的协作方式是什么样的呢？基于事件的异步通信，使用消息中间件来实现事件发布和消费者接收机制。比如用 Kafka 或 RabbitMQ。&lt;/p&gt;
&lt;h2 id=&#34;5分解单块系统&#34;&gt;5.分解单块系统&lt;/h2&gt;
&lt;p&gt;分解巨大无比没人感动的单块系统，首先要做的是理清代码库，找到&lt;strong&gt;接缝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;分解系统带来的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加快以后系统开发速度&lt;/li&gt;
&lt;li&gt;划清了团队结构（又是康威定律）&lt;/li&gt;
&lt;li&gt;增加安全审计功能后，保障安全性&lt;/li&gt;
&lt;li&gt;利于开展新技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-部署&#34;&gt;6. 部署&lt;/h2&gt;
&lt;p&gt;这一块跟传统服务的部署并没有太大的不同，无非是微服务的短平快，加快了 CI（持续集成）的速度。如果将微服务打包为 docker 镜像，使用 Jenkins、ansible、puppet 等技术来部署微服务可以实现部署自动和效率的显著提高。&lt;/p&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;
&lt;p&gt;该书的后面还讲了&lt;strong&gt;测试&lt;/strong&gt;、&lt;strong&gt;监控&lt;/strong&gt;、&lt;strong&gt;安全&lt;/strong&gt;、&lt;strong&gt;康威定律&lt;/strong&gt;、最后还上升到&lt;strong&gt;人本&lt;/strong&gt;，给予广大的软件开发人员强烈的人文关怀，可见提倡架构师要融入团队，最一个&lt;strong&gt;代码架构师&lt;/strong&gt;和&lt;strong&gt;结对编程&lt;/strong&gt;的作者是多么博爱❤️。&lt;/p&gt;
&lt;p&gt;该书的核心部分是&lt;strong&gt;第 11 章规模化微服务&lt;/strong&gt;，为将在下篇中来探讨一下。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

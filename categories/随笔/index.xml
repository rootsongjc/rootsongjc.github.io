<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song&#39;s Blog – 随笔</title>
    <link>https://jimmysong.io/categories/%E9%9A%8F%E7%AC%94/</link>
    <description>Recent content in 随笔 on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 27 Mar 2024 16:54:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/categories/%E9%9A%8F%E7%AC%94/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>KubeCon EU 2024 巴黎见闻与回顾</title>
      <link>https://jimmysong.io/blog/kubecon-eu-paris-recap/</link>
      <pubDate>Wed, 27 Mar 2024 16:54:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/kubecon-eu-paris-recap/</guid>
      <description>
        
        
        &lt;p&gt;上周我在巴黎参加了 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/&#34; title=&#34;KubeCon EU 2024&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon EU 2024&lt;/a&gt;
，这也是我第一次参加中国以外的 KubeCon。本次大会可谓盛况空前，据说有 1.2 万人参加了会议。本文将为你分享我对本次 KubeCon 的一些观察，主要着重在我关注的服务网格与云原生基础架构领域。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/kubecon-eu-paris-recap/istio-day.jpg&#34; data-img=&#34;/blog/kubecon-eu-paris-recap/istio-day.jpg&#34; data-width=&#34;2499&#34; data-height=&#34;1666&#34; alt=&#34;image&#34; data-caption=&#34;Istio Contributor 在 KubeCon EU Istio 展台&#34;&gt;
    
  
  &lt;figcaption&gt;Istio Contributor 在 KubeCon EU Istio 展台&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;istiocilium-及服务网格&#34;&gt;Istio、Cilium 及服务网格&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
 和 Service Mesh 成为了热门讨论的话题，集中展示了在云原生生态系统中这两项技术的最新进展和应用。本次大会涵盖了从基础设施优化、数据本地化、分布式追踪到多集群部署等多个领域，反映了 Service Mesh 技术在实际应用中的广泛关注和持续创新。&lt;/p&gt;
&lt;h3 id=&#34;数据本地化和全局请求路由&#34;&gt;数据本地化和全局请求路由&lt;/h3&gt;
&lt;p&gt;Pigment 的 Arthur Busser 和 Baudouin Herlicq 分享了如何利用 Kubernetes 和 Istio 实现数据本地化的需求。他们介绍了利用 Istio 基于自定义头部进行请求路由的方法，这对于满足如 GDPR 和 CCPA 等法规的数据驻留要求至关重要。&lt;/p&gt;
&lt;h3 id=&#34;分布式跟踪和可观测性增强&#34;&gt;分布式跟踪和可观测性增强&lt;/h3&gt;
&lt;p&gt;ThousandEyes (part of Cisco) 的 Chris Detsicas 探讨了如何配置 Istio 以使用 OpenTelemetry 实现有效的分布式跟踪，这为微服务生态系统提供了宝贵的可见性，有助于问题诊断和性能优化。&lt;/p&gt;
&lt;h3 id=&#34;多集群部署和流量管理&#34;&gt;多集群部署和流量管理&lt;/h3&gt;
&lt;p&gt;China Mobile 的 Haiwen Zhang 和 Yongxi Zhang 介绍了一个简化 Istio 多集群部署的新方法，该方法使用一个全局唯一的 Istio 控制平面，通过主集群的 Apiserver 实现全局服务发现，自动连接多个集群的容器网络，为 Pod 提供直接网络连接。特别强调了 &lt;a href=&#34;https://github.com/kosmos-io/kosmos&#34; title=&#34;Kosmos 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kosmos 项目&lt;/a&gt;
，它提供了一种新的解决方案，以简化多集群环境下的服务网格部署和管理。&lt;/p&gt;
&lt;p&gt;Google 的 Ameer Abbas 和 John Howard 探讨了如何在基础设施可靠性为 99.9% 的情况下构建出 99.99% 可靠性的服务，并提出了一系列应用架构原型（Archetypes），这些原型可以帮助设计和实现高可靠性的多集群应用程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原型 1：活动 - 被动区域（Active Passive Zones）&lt;/strong&gt; - 在单个区域的两个区域部署所有服务，使用 SQL 数据库的只读副本，通过 L4 负载均衡器实现区域内的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 2：多区域（Multi Zonal）&lt;/strong&gt; - 在单个区域的三个区域部署所有服务，使用高可用性 SQL 数据库，通过全局或区域负载均衡器实现区域内的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 3：活动 - 被动区域（Active Passive Region）&lt;/strong&gt; - 在两个区域的三个区域部署所有服务，使用跨区域复制的 SQL 数据库，通过 DNS 和负载均衡器实现区域间的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 4：隔离区域（Isolated Regions）&lt;/strong&gt; - 在两个区域的三个区域部署所有服务，使用 Spanner 或 CockroachDB 等全局数据库，通过区域负载均衡器和 DNS 实现区域间的故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型 5：全局（Global）&lt;/strong&gt; - 在两个或更多区域的三个区域部署所有服务，使用 Spanner 或 CockroachDB 等全局数据库，通过全球负载均衡器实现全球范围内的故障转移。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全和零信任架构&#34;&gt;安全和零信任架构&lt;/h3&gt;
&lt;p&gt;多个议题，如 Microsoft 的 Niranjan Shankar 所介绍的，聚焦于在生产环境中加固 Istio 的重要性和方法。他讨论了利用 Istio 与网络策略、第三方 Kubernetes 工具和云提供的安全服务相结合，构建零信任和深层防御架构的步骤和策略。&lt;/p&gt;
&lt;h3 id=&#34;ambient-mesh-的基础设施兼容性及未来&#34;&gt;Ambient Mesh 的基础设施兼容性及未来&lt;/h3&gt;
&lt;p&gt;Benjamin Leggett 和 Yuval Kohavi 引入了一种创新的方法，使 Istio 的 Amibent mode 能够支持任意 Kubernetes CNI，详见 &lt;a href=&#34;https://istio.io/latest/zh/blog/2024/inpod-traffic-redirection-ambient/&#34; title=&#34;Istio 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 博客&lt;/a&gt;
。这一进步解决了 Ambient mesh 中 CNI 支持有限的问题，无需重启应用程序 Pod 即可将其纳入 Ambient mode，这对于简化操作和降低基础设施成本具有重要意义。&lt;/p&gt;
&lt;p&gt;Istio 社区宣布在即将到来的 Istio 1.22 版本，Ambient 模式将成为 beta，详见 &lt;a href=&#34;https://www.cncf.io/blog/2024/03/19/istio-announces-the-beta-release-of-ambient-mode/&#34; title=&#34;CNCF 博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 博客&lt;/a&gt;
。多个演讲和讨论聚焦于 Istio Ambient Mesh 的未来，特别是其简化工作负载操作和降低基础设施成本的潜力。Istio Ambient Mesh 的介绍预示了服务网格技术的一个新方向，即无 sidecar 的数据平面架构，提供了更高的性能和更低的资源消耗。&lt;/p&gt;
&lt;h3 id=&#34;sidecar-less-服务网格的革新&#34;&gt;Sidecar-less 服务网格的革新&lt;/h3&gt;
&lt;p&gt;在 KubeCon EU 2024 上，关于 Sidecar 的讨论主要集中在评估和比较使用 Sidecar 与无 Sidecar（如 Istio 的 Ambient Mesh）服务网格模式的优缺点。特别是 Christian Posta 对 Cilium 和 Istio 在无 sidecar 服务网格实现方面的设计决策和权衡进行了深入分析，突出了这种模式在提高性能、降低资源消耗和简化运维操作方面的潜力。通过分析纽约时报从 Istio 过渡到 Cilium 的案例，进一步证明了无 sidecar 模式在处理复杂、多区域服务网格时的有效性，同时指出了在这一转变过程中的挑战和实施考虑。这些讨论预示着服务网格技术未来可能朝向更加灵活和高效的方向发展，其中无 Sidecar 架构可能成为优化云原生应用性能和资源使用的关键策略。&lt;/p&gt;
&lt;h3 id=&#34;cilium-与服务网格的交集&#34;&gt;Cilium 与服务网格的交集&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io&#34; title=&#34;Cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt;
 在 KubeCon EU 2024 上被广泛讨论，作为一种基于 eBPF 的技术，Cilium 不仅被看作是一个高效的容器网络接口（CNI），而且还展示了其在服务网格领域的强大潜力。通过 Isovalent 和其他组织的演讲，Cilium 被展示为一种能够提供连接、观测和保障服务网格安全的先进解决方案。特别是 Cilium 的无 Sidecar 服务网格实现方式被认为是未来方向，其利用 eBPF 技术在不增加传统 Sidecar 代理负担的情况下实现了微服务的安全通信和精细流量管理。此外，Cilium 在服务网格之外的扩展能力，例如在多云网络和负载平衡方面的应用，凸显了其作为云原生生态系统基础设施核心组件的地位。Cilium 的这些讨论和案例研究证明了其在推动服务网格和云原生技术创新方面的重要作用。&lt;/p&gt;
&lt;h2 id=&#34;云原生趋势&#34;&gt;云原生趋势&lt;/h2&gt;
&lt;p&gt;当前云原生领域的几个主要趋势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可持续性和环保意识的增强&lt;/strong&gt;：例如，Deutsche Bahn 将开发者引入其基础设施绿化过程，强调了在设计和运营云原生解决方案时，越来越多的公司开始考虑环境因素。这反映了一个趋势，即企业在追求技术进步的同时，也在努力减少对环境的影响，通过绿色计算和能效优化来实现可持续的技术生态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;人工智能与云原生技术的融合&lt;/strong&gt;：人工智能（AI）正在成为 Kubernetes 和云原生生态系统面临的下一个主要挑战。Nvidia 关于 AI 策略的讨论、CNCF 对 AI 在云原生未来中标准化工作的推动，以及各种关于 AI 和机器学习（ML）集成的工具和平台的更新，都突显了这一点。这一趋势表明，将 AI 和 ML 无缝集成到云原生架构中，不仅可以加速应用开发和部署，还能够提供更加智能和自动化的操作能力。同时 CNCF 还宣布成立 AI WG，并发布了&lt;a href=&#34;https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/&#34; title=&#34;人工智能白皮书&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;人工智能白皮书&lt;/a&gt;
。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WebAssembly（Wasm）的兴起&lt;/strong&gt;：Cosmonic 对最新 Wasm 标准的支持，以及 Fermyon 将其开源 Wasm 平台 &lt;a href=&#34;https://www.spinkube.dev/&#34; title=&#34;SpinKube&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpinKube&lt;/a&gt;
 捐赠给 CNCF，显示了 WebAssembly 在云原生应用开发中日益增长的重要性。Wasm 提供了一种高效、安全的方式来运行在浏览器外的客户端和服务器端代码，这对于构建跨平台、高性能的云原生应用尤为重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云原生观测性的强化&lt;/strong&gt;：例如，New Relic 在其可观测性平台中添加了原生 Kubernetes 支持，凸显了对云原生应用的监控、日志记录和性能分析需求的增加。随着云原生架构的复杂性增加，企业需要更加强大的工具来保持系统的透明度和健康，从而优化性能和可靠性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云原生社区的协作和开源精神的强化&lt;/strong&gt;：CNCF 成立&lt;a href=&#34;https://www.cncf.io/people/end-user-technical-advisory-board/&#34; title=&#34;最终用户技术咨询委员会&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最终用户技术咨询委员会&lt;/a&gt;
、Red Hat 与 Docker 合作开发 Testcontainers Cloud 框架等举措，反映了云原生社区致力于促进协作和分享的文化。这种开放的协作精神不仅加速了新技术的发展和采纳，也为云原生生态系统的健康成长提供了坚实的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些趋势共同描绘了一个多元化、持续创新且日益成熟的云原生技术景观，其中可持续性、AI/ML 集成、WebAssembly、加强的可观测性和社区协作是推动这一领域前进的关键因素。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;KubeCon EU 2024 的见闻为我们揭示了云原生技术领域的多个重要进展和未来方向。从服务网格的持续创新到云原生生态系统对环境可持续性的关注，再到人工智能与机器学习技术的深度整合，以及 WebAssembly 在应用开发中的日益重要性，这些趋势共同构成了当前云原生技术的前沿。&lt;/p&gt;
&lt;p&gt;特别值得注意的是，Istio 和 Cilium 在服务网格领域的最新动态，展现了无 Sidecar 架构的潜力以及 eBPF 技术在提升性能、安全性和可观测性方面的作用。这些进展不仅为开发者提供了更为高效和灵活的工具，也为云原生应用的设计和运营提出了新的思路。&lt;/p&gt;
&lt;p&gt;同时，云原生社区的持续发展和对开源精神的坚持，为技术创新和知识共享提供了坚实的基础。通过强化观测性、推动环境可持续性和促进技术标准化，云原生生态正展现出其深厚的发展潜力和广阔的应用前景。&lt;/p&gt;
&lt;p&gt;作为一名观察者和参与者，我深感云原生技术的快速发展给我们带来了前所未有的机遇和挑战。未来，随着技术的不断演进和社区的共同努力，我们有理由相信，云原生技术将在推动数字化转型和创造更加智能、可持续的技术世界方面发挥更大的作用。让我们拭目以待，并积极参与这一令人兴奋的技术旅程。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>为什么要学习 WebAssembly？</title>
      <link>https://jimmysong.io/blog/why-you-should-learn-wasm/</link>
      <pubDate>Fri, 13 Jan 2023 12:09:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/why-you-should-learn-wasm/</guid>
      <description>
        
        
        &lt;p&gt;2023 年你有什么学习计划？我计划要学习一门新技术——WebAssembly！&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;为什么要学习 WebAssembly？&lt;/h2&gt;
&lt;p&gt;2019 年，Docker 创始人 Solomon Hykes 发布了一条推特在业界引起了轩然大波（见下面的推文），他说如果 2008 年 WebAssembly 和 WASI 就存在的话，他就没必要创建 Docker。一时间，关于 WebAssembly 取代 Docker 的讨论此起彼伏。也是从那时起，WebAssembly 正式进入我的视线。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;If WASM+WASI existed in 2008, we wouldn&amp;#39;t have needed to created Docker. That&amp;#39;s how important it is. Webassembly on the server is the future of computing. A standardized system interface was the missing link. Let&amp;#39;s hope WASI is up to the task! &lt;a href=&#34;https://t.co/wnXQg4kwa4&#34;&gt;https://t.co/wnXQg4kwa4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Solomon Hykes / @shykes@hachyderm.io (@solomonstre) &lt;a href=&#34;https://twitter.com/solomonstre/status/1111004913222324225?ref_src=twsrc%5Etfw&#34;&gt;March 27, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;到了 2021 年，网上突然多了很多关于 WebAssembly 的炒作文章，包括我长期关注的 Istio 也在当年发布的 1.12 版本开始支持 WebAssembly（见 &lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态&lt;/a&gt;
），通过引入 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/&#34; title=&#34;WasmPlugin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmPlugin&lt;/a&gt;
 API，使开发人员更方便扩展服务网格和网关。&lt;/p&gt;
&lt;p&gt;最近我看到一篇介绍 WebAssembly 在 2023 年有哪些新趋势的&lt;a href=&#34;https://cloudnative.to/blog/webassembly-5-predictions-for-2023/&#34; title=&#34;文章&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;
，文章的作者 Matt Butcher 颇有来头，他是 WebAssembly Cloud 公司 Fermyon 的联合创始人和 CEO，也是 Helm、Brigade、CNAB、OAM、Glide 和 Krustlet 的原始创建者之一。通过他的介绍让我笃定，WebAssembly 是一门颇有前景的技术，是时候学习它了。&lt;/p&gt;
&lt;h2 id=&#34;prospect&#34;&gt;WebAssembly 的市场前景&lt;/h2&gt;
&lt;p&gt;更何况 WebAssembly 的应用领域越来越广，像 &lt;a href=&#34;https://wasmedge.org/&#34; title=&#34;WasmEdge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmEdge&lt;/a&gt;
 这样的公司正在使用 Tensorflow 来突破可以使用 Wasm 运行的边界。&lt;a href=&#34;https://www.fermyon.com/&#34; title=&#34;Fermyon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fermyon&lt;/a&gt;
 正在构建用于微服务的 WebAssembly 工具，而 &lt;a href=&#34;https://vercel.com/docs/concepts/functions/edge-functions/wasm&#34; title=&#34;Vercel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vercel&lt;/a&gt;
、&lt;a href=&#34;https://docs.fastly.com/products/compute-at-edge&#34; title=&#34;Fastly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fastly&lt;/a&gt;
、&lt;a href=&#34;https://shopify.engineering/shopify-webassembly&#34; title=&#34;Shopify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shopify&lt;/a&gt;
 和 &lt;a href=&#34;https://developers.cloudflare.com/workers/platform/languages/&#34; title=&#34;Cloudflare&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloudflare&lt;/a&gt;
 使用 WebAssembly 在边缘运行代码。&lt;a href=&#34;https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/&#34; title=&#34;Figma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Figma&lt;/a&gt;
（2022 年以 200 亿美元被 Adobe 公司收购）正在使用 WebAssembly 为其应用程序在浏览器中提供更高的性能，而他们的新母公司 &lt;a href=&#34;https://web.dev/ps-on-the-web/&#34; title=&#34;Adobe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Adobe&lt;/a&gt;
 正在使用 WebAssembly 将他们的桌面应用程序带到 Web。&lt;/p&gt;
&lt;h2 id=&#34;how-to-learn-wasm&#34;&gt;如何学习 WebAssembly？&lt;/h2&gt;
&lt;p&gt;为了学习 WebAssembly，我制定了以下学习目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;了解 WebAssembly 的基本概念，包括它是什么、为什么要使用它、如何在浏览器中运行它；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的语言，这是一种类似于汇编语言的低级语言，可以编译成二进制文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用工具将代码编译成 WebAssembly 格式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 JavaScript 中调用 WebAssembly 模块；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的其他特性，如内存管理、多线程和 WebAssembly System Interface（WASI）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;了解 WebAssembly 如何增强安全防护；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习 WebAssembly 的最佳实践，如代码优化和调试；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Istio 中开发 WebAssembly 插件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习使用 WebAssembly 开发的开源项目；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;materials&#34;&gt;WebAssembly 参考资料&lt;/h2&gt;
&lt;p&gt;下面列出了一些有助于学习 WebAssembly 的参考资料，包括网站和图书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://webassembly.org/&#34; title=&#34;WebAssembly 官网&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 官网&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/WebAssembly&#34; title=&#34;WebAssembly 教程&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 教程&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wasdk.github.io/WasmFiddle/&#34; title=&#34;WebAssembly 在线编译器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 在线编译器&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webassembly.org/getting-started/developers-guide/&#34; title=&#34;WebAssembly 学习资源&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 学习资源&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/WebAssembly-Definitive-Guide-Safe-Portable/dp/1492089842/&#34; title=&#34;《WebAssembly：权威指南：安全、快速和可移植的代码，第 1 版，2022 年 1 月》&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《WebAssembly：权威指南：安全、快速和可移植的代码，第 1 版，2022 年 1 月》&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wazero.io/&#34; title=&#34;wazero: the zero dependency WebAssembly runtime for Go developers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wazero: the zero dependency WebAssembly runtime for Go developers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;WebAssembly 不仅是用于浏览器端有效弥补 JavaScript 缺陷的一门技术，凭借它的小巧、高效和可移植性在后端也会有很广泛的应用。2023 年，让我们一起来学习 WebAssembly 吧！我也会适时得在云原生社区中创建 Wasm 学习小组，欢迎大家&lt;a href=&#34;https://cloudnative.to/community/join/&#34; title=&#34;加入云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;加入云原生社区&lt;/a&gt;
共同交流学习。&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态 - cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/importance-of-wasm-in-istio/&#34; title=&#34;在 Istio 中引入 Wasm 意味着什么？- cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Istio 中引入 Wasm 意味着什么？- cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/webassembly-5-predictions-for-2023/&#34; title=&#34;2023 年 WebAssembly 技术五大趋势预测 - cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023 年 WebAssembly 技术五大趋势预测 - cloudnative.to&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>跨越鸿沟：理解鸿沟理论</title>
      <link>https://jimmysong.io/blog/crossing-the-chasm/</link>
      <pubDate>Sun, 09 Jan 2022 10:43:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/crossing-the-chasm/</guid>
      <description>
        
        
        &lt;p&gt;最近为某网站撰写服务网格技术的 2021 年总结，笔者关注该领域也有 4 年时间了，再结合自己最近这几年对云原生行业发展的观察，越发觉得《跨越鸿沟》（Crossing the chasm）这本书中所写的新技术的推广生命周期一一应验了。虽然该理论由 Jeffery Moore 于 1991 年提出，距今已有 30 年时间，但该理论至今依然奏效，另外该理论也在 &lt;a href=&#34;https://www.cncf.io/projects/&#34; title=&#34;CNCF 项目&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 项目&lt;/a&gt;
的成熟度划分中得到应用，还有人指出过&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34; title=&#34;云原生技术需要跨越的鸿沟&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生技术需要跨越的鸿沟&lt;/a&gt;
。本文将为读者分享一些关于”鸿沟理论“有关的一些知识，希望能够引发大家对于新技术推广的一些思考。&lt;/p&gt;
&lt;h2 id=&#34;什么是鸿沟理论&#34;&gt;什么是鸿沟理论？&lt;/h2&gt;
&lt;p&gt;鸿沟理论指的就是高科技产品在市场营销过程中遭遇的最大障碍：高科技企业的早期市场和主流市场之间存在着一条巨大的鸿沟，能否顺利跨越鸿沟并进入主流市场，成功赢得实用主义者的支持，就决定了一项高科技产品的成败。实际上每项新技术都会经历鸿沟。关键在予采取适当的策略令高科技企业成功地“跨越鸿沟”，摩尔在这本书中就告诉了人们一些欠经考验的制胜秘诀。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;基于经典的钟形曲线分布，“跨越鸿沟 &amp;quot; 是一个将新技术的采用随时间推移而可视化的概念：从一小撮早期采用者开始，经过大规模的中端市场，最终进入最抗拒变化的消费者手中。&lt;/p&gt;
&lt;p&gt;1962 年，社会学家 &lt;a href=&#34;https://en.wikipedia.org/wiki/Everett_Rogers&#34; title=&#34;Everett Rogers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Everett Rogers&lt;/a&gt;
 出版了 &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffusion_of_innovations&#34; title=&#34;Diffusion of Innovasions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Diffusion of Innovasions&lt;/a&gt;
（创新扩散）一书。在这本书中，他根据消费者的购买行为，将他们分为不同的群体。他以 500 多项扩散研究的结果为基础进行分类。今天，这个模型被称为“技术采用生命周期”。这个模型全面地描述了新技术产品或创新的采用或接受情况。在《跨越鸿沟》一书中，杰弗里・摩尔根据扩散生命周期中的客户群体，阐述了成功锁定主流消费者的营销技巧。&lt;/p&gt;
&lt;h2 id=&#34;客户群体&#34;&gt;客户群体&lt;/h2&gt;
&lt;p&gt;基于人口学和心理学特征，客户群保护以下五种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者&lt;/li&gt;
&lt;li&gt;早期采用者&lt;/li&gt;
&lt;li&gt;早期大众&lt;/li&gt;
&lt;li&gt;后期大众&lt;/li&gt;
&lt;li&gt;落后者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/crossing-the-chasm/crossing-the-chasm.jpg&#34; data-img=&#34;/blog/crossing-the-chasm/crossing-the-chasm.jpg&#34; data-width=&#34;1600&#34; data-height=&#34;900&#34; alt=&#34;image&#34; data-caption=&#34;图：”鸿沟理论“客户分布情况&#34;&gt;
    
  
  &lt;figcaption&gt;图：”鸿沟理论“客户分布情况&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;分布情况&#34;&gt;分布情况&lt;/h2&gt;
&lt;p&gt;正如可以观察到的，技术采用的生命周期有一个钟形曲线。各个分界线大约相当于标准差的落点。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创新者约占总人口的 2.5%&lt;/li&gt;
&lt;li&gt;早期采用者约占 13.5%&lt;/li&gt;
&lt;li&gt;早期大众和后期大众均为 34%&lt;/li&gt;
&lt;li&gt;落后者占剩余的 16%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个群体都代表着一个独特的心理特征，即心理和人口特征的组合。因此，针对这些群体的营销需要与其他群体完全不同的策略。营销人员通过更好地了解这些群体之间的差异，可以通过正确的营销技术更好地锁定所有这些消费者。&lt;/p&gt;
&lt;h3 id=&#34;创新者&#34;&gt;创新者&lt;/h3&gt;
&lt;p&gt;创新者是技术爱好者。这是第一个有可能投资于你产品的消费者群体。创新者积极地追求新的产品和技术。有时，他们甚至在公司启动正式的营销计划之前就开始寻求创新。这是因为技术在他们的生活或业务中占据了核心利益。对于这个客户群体来说，产品功能组合的完整性或性能是次要的。&lt;/p&gt;
&lt;p&gt;不幸的是，在任何特定的细分市场中，都没有很多创新者（大约 2.5%）。通常情况下，他们不愿意为新产品付出很多。尽管如此，赢得他们是很重要的，因为他们的认可为市场上的其他消费者提供了必要的保证。此外，技术爱好者可以作为一个测试小组，在面向主流市场之前进行必要的修改。&lt;/p&gt;
&lt;h3 id=&#34;早期采用者&#34;&gt;早期采用者&lt;/h3&gt;
&lt;p&gt;和创新者一样，早期采用者也是有远见的人，他们在新产品的生命周期的早期就接受了新产品的概念。然而，与创新者不同，他们不是技术专家。相反，他们是有远见的人，不只是在寻找一种改进，而且是一种革命性的突破。因此，他们愿意承担高风险，尝试新事物。他们是对价格最不敏感的客户群体，对产品的功能设置和性能要求很高。&lt;/p&gt;
&lt;p&gt;早期采用者在做出购买决定时不依赖成熟的参考资料。相反，他们更愿意依靠自己的直觉和眼光。此外，他们愿意作为其他采用者群体的参考。由于有远见的人善于提醒其他人群，他们是最重要的争取对象。&lt;/p&gt;
&lt;h3 id=&#34;早期大众&#34;&gt;早期大众&lt;/h3&gt;
&lt;p&gt;这个客户群由实用主义者组成。前两个采用者群体属于早期市场。然而，为了获得真正的成功，一个公司必须从早期大众开始，赢得主流市场。这些实用主义者与早期采用者有一些相同的能力，能够与技术产生联系。然而，他们受到强烈的实用意识的驱动。他们知道，很多发明最终会成为过眼云烟。因此，在自己投资之前，他们更期望等待，看看其他客户对该技术的使用情况如何。他们希望在进行大量投资之前看到成熟的参考资料。因为这部分人很多（大约 34%），对于任何努力争取大量利润和增长的企业来说，赢得这些人的支持是最基本的。&lt;/p&gt;
&lt;h3 id=&#34;后期大众&#34;&gt;后期大众&lt;/h3&gt;
&lt;p&gt;这个群体主要由保守派组成。后期大众作为一个群体与早期大众一样大（占总人口的 34%）。他们与早期大众有着同样的担忧。此外，他们对传统的信仰远远多于对进步的信仰。早期大众的顾客如果决定购买新技术产品，他们对自己处理该产品的能力感到满意。相比之下，“后期大众 &amp;quot; 的成员则不然。因此，这些保守派更愿意等到某样东西已经成为一种惯例时才购买。&lt;/p&gt;
&lt;h3 id=&#34;落后者&#34;&gt;落后者&lt;/h3&gt;
&lt;p&gt;这个群体是由怀疑论者组成的。这一部分人占总数的 16%。这些人根本不希望与新技术有任何关系。他们唯一一次购买技术产品是当它被深埋在另一个产品中时。这些持怀疑态度的人强烈认为，颠覆性的创新很少能实现他们的承诺。他们总是担心意外的后果。从市场发展的角度来看，落后者通常被认为是不值得追求的。然而，他们对产品功能设置和性能的批评为技术公司提供了宝贵的反馈。&lt;/p&gt;
&lt;h2 id=&#34;鸿沟&#34;&gt;鸿沟&lt;/h2&gt;
&lt;p&gt;在技术采用生命周期中，你可以看到早期采用者和早期大众群体之间的差距。这个差距代表了技术必须跨越的鸿沟。它标志着将左边的群体作为右边的客户群的参考基础而产生的可信度差距。&lt;strong&gt;鸿沟的存在是因为消费者信任属于他们自己的采用者群体的人的推荐。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，这给技术公司带来了一个具有挑战性的困境。&lt;/p&gt;
&lt;p&gt;如果他们还没有从你这里买过东西，你怎么能利用首选参考群体的人呢？&lt;/p&gt;
&lt;p&gt;换句话说，将一个群体的客户作为其他群体的参考是无效的。因此，鸿沟就是这样产生的！&lt;/p&gt;
&lt;p&gt;由于从早期采用者到早期大众的飞跃意味着从早期市场到主流市场的过渡，跨越鸿沟对于新推出的产品 / 技术真正实现市场成功是最重要的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;根据摩尔的说法，成功跨越鸿沟可以通过首先瞄准早期大众中一个非常具体的利基市场来实现。组织试图跨越鸿沟的唯一目标应该是在主流市场上获得一个桥头堡，以创造一个可供参考的实用主义客户群。在这里，细分就是一切：将你所有的营销资源集中在一个特定的细分市场上，并确保你在这个特定的细分市场上成为领导者，然后再去做下一个细分市场。这就是所谓的“大鱼小池 &amp;quot; 的方法。营销漏斗或 AIDA 模型是一个很好的营销框架，它可以帮助为潜在客户挑选正确的营销技术。此外，确保你的产品提供一个完整的解决方案，并且服务水平高（即整个产品解决方案）。实用主义者对你的产品的用户体验将最终决定他们是否也会激起他们的同行。一旦你在早期大众的不同部分建立了强大的口碑，你就成功地跨越了鸿沟。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;你觉得服务网格目前处于鸿沟理论的哪个阶段呢？你又是何种受众？&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/a305fa93580b&#34; title=&#34;《Crossing the Chasm》丨 NOTES - jianshu.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Crossing the Chasm》丨 NOTES - jianshu.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/hv5dft_bgjdfpqongzqx&#34; title=&#34;灵雀云 CTO 陈恺：从“鸿沟理论”看云原生，哪些技术能够跨越鸿沟？ - infoq.cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;灵雀云 CTO 陈恺：从“鸿沟理论”看云原生，哪些技术能够跨越鸿沟？ - infoq.cn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>新疆北疆房车自驾之旅</title>
      <link>https://jimmysong.io/blog/xinjiang-trip/</link>
      <pubDate>Sat, 31 Jul 2021 12:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/xinjiang-trip/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/xinjiang-hasake.webp&#34; data-img=&#34;/blog/xinjiang-trip/xinjiang-hasake.webp&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;在琼库什台村与哈萨克族村民在一起&#34;&gt;
    
  
  &lt;figcaption&gt;在琼库什台村与哈萨克族村民在一起&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摄于新疆维吾尔自治区伊犁哈萨克自治州特克斯县琼库什台村，晓辉和我与哈萨克族村民在一起&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我欲乘风破浪，踏遍黄沙海洋&lt;/p&gt;
&lt;p&gt;与其误会一场，也要不负勇往&lt;/p&gt;
&lt;p&gt;——Jam，《七月上》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天是七月的最后的一天，从今天起我的博客将开通&lt;a href=&#34;https://jimmysong.io/categories/%e6%97%85%e8%a1%8c&#34; title=&#34;旅行&#34;&gt;旅行&lt;/a&gt;
专栏。距离我从新疆回到北京也快一个星期了，这篇博客用来记录我与&lt;a href=&#34;https://atbug.com/&#34; title=&#34;张晓辉（Addo Zhang&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;张晓辉（Addo Zhang&lt;/a&gt;
 在新疆的七日之旅。&lt;/p&gt;
&lt;h2 id=&#34;行程安排&#34;&gt;行程安排&lt;/h2&gt;
&lt;p&gt;因为晓辉最近处于工作变动空档期，而我又远程工作，今年元旦以来都没有到远游（上一次是元旦到云南大理、丽江），因此我们商议了为其七天的新疆北疆房车自驾之旅。&lt;/p&gt;
&lt;p&gt;我们将分别从北京和广州前往乌鲁木齐汇合然后提车出发，车是出发前就在网上预约好的，现场办手续，进行了 2 个小时的使用培训，然后就上路了。因为晓辉是老司机，而山路崎岖，房车又过于笨重，对于我这个新手难以驾驭，我就作为副驾，同时也会在路上工作。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/path.gif&#34; data-img=&#34;/blog/xinjiang-trip/path.gif&#34; data-width=&#34;800&#34; data-height=&#34;450&#34; alt=&#34;image&#34; data-caption=&#34;行程路线图&#34;&gt;
    
  
  &lt;figcaption&gt;行程路线图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们基本是按照出发前预定的路线走的，整个旅程最精彩的部分应该是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赛里木湖牧民家的烧烤晚餐&lt;/li&gt;
&lt;li&gt;琼库什台原生态草原&lt;/li&gt;
&lt;li&gt;独库公路&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;寄蜉蝣于天地，渺沧海之一粟。&lt;/p&gt;
&lt;p&gt;——苏轼，《前赤壁赋》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;夜宿在赛里木湖北门附近的牧民家旁边，夜晚可以看到璀璨的星空。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/stars.webp&#34; data-img=&#34;/blog/xinjiang-trip/stars.webp&#34; data-width=&#34;1200&#34; data-height=&#34;800&#34; alt=&#34;image&#34; data-caption=&#34;赛里木湖的星空&#34;&gt;
    
  
  &lt;figcaption&gt;赛里木湖的星空&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果说有个地方我想再重走一遍的话，我会选择伊犁哈萨克自治州，如果一定要确定一个具体的村庄的话，那我会选择琼库什台。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/qiongkushitai.webp&#34; data-img=&#34;/blog/xinjiang-trip/qiongkushitai.webp&#34; data-width=&#34;1200&#34; data-height=&#34;675&#34; alt=&#34;image&#34; data-caption=&#34;琼库什台&#34;&gt;
    
  
  &lt;figcaption&gt;琼库什台&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们在草原上工作，到哈萨克族老乡家吃饭一起庆祝古尔邦节，教小朋友玩无人机，一起骑马、打篮球，不亦乐乎。大美新疆，我一定会再来的！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生处处知何似，恰似飞鸿踏雪泥。&lt;/p&gt;
&lt;p&gt;——苏轼，《和子由渑池怀旧》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在琼库什台草原上骑马，这也是我第一次骑马，骑着骑着，马自己就跑起来了。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/horse.webp&#34; data-img=&#34;/blog/xinjiang-trip/horse.webp&#34; data-width=&#34;800&#34; data-height=&#34;1199&#34; alt=&#34;image&#34; data-caption=&#34;琼库什台骑马&#34;&gt;
    
  
  &lt;figcaption&gt;琼库什台骑马&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;视频&#34;&gt;视频&lt;/h2&gt;
&lt;p&gt;下面是我为本次旅程所剪辑的&lt;a href=&#34;https://www.bilibili.com/video/BV1Ab4y1z7TW/&#34; title=&#34;视频&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;视频&lt;/a&gt;
，希望大家一键三连（点赞、投币、转发）。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/xinjiang-trip/bilibili.webp&#34; data-img=&#34;/blog/xinjiang-trip/bilibili.webp&#34; data-width=&#34;800&#34; data-height=&#34;1017&#34; alt=&#34;image&#34; data-caption=&#34;Bilibili 点播&#34;&gt;
    
  
  &lt;figcaption&gt;Bilibili 点播&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;贴士&#34;&gt;贴士&lt;/h2&gt;
&lt;p&gt;对于去气候适宜或稳定的地域的短途旅行，建议租普通的 SUV 即可，如果想睡在野外可以搭帐篷，没必要租房车，因为在房车体积较大，大部分人没有驾驶过房车的经验，开起来会比较吃力，而且房车对于路况要求也比较高，很多沟沟坎坎、野路就没办法通过了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>什么是 Day-2 Operation？</title>
      <link>https://jimmysong.io/blog/what-is-day-2-operation/</link>
      <pubDate>Sat, 20 Mar 2021 21:56:04 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/what-is-day-2-operation/</guid>
      <description>
        
        
        &lt;p&gt;在 IstioCon 2021 上，Istio 社区确定了 2021 年的社区的工作重点是 Day-2 Operation，很多人问我这个词是什么意思。我查了下中文互联网上，没有对这个词的解释，我在网上找到了一些解释，我发现大部分文章的源头都指向了这篇 &lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34; title=&#34;Defining Day-2 Operations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Defining Day-2 Operations&lt;/a&gt;
。因此，在此我将问翻译一下，同时再加上一些我自己的见解。&lt;/p&gt;
&lt;p&gt;下面是笔者对 Day-2 Operation 的理解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;假如将开发一个系统比作种下一棵树，那么 Day-2 Operation 就是系统开花后结果的过程。我们要不断改进这颗树的基因，以实现效益最大化。Day-2 Operation 就是对这个系统优化改进的过程。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;day-2-operation-的定义&#34;&gt;Day-2 Operation 的定义&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 不一定是指第 2 天的行动。一旦“某物“进入行动，“Day-2 Operation“是指在这个“某物“没有被杀死或被“其他东西“取代之前的剩余时间段。如下图中展示的软件的生命周期中，从软件被安装之后到被卸载之前的那段时间。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-day-2-operation/008eGmZEly1gorlqmukkij31im0kote7.jpg&#34; data-img=&#34;/blog/what-is-day-2-operation/008eGmZEly1gorlqmukkij31im0kote7.jpg&#34; data-width=&#34;1966&#34; data-height=&#34;744&#34; alt=&#34;image&#34; data-caption=&#34;Day-2 Operation&#34;&gt;
    
  
  &lt;figcaption&gt;Day-2 Operation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当我们审视一个业务流程、应用程序或 IT 基础设施生命中的各个阶段时，有些人喜欢把它们描绘成一个循环过程。我相信这是因为人们倾向于使用“应用程序的生命周期“这个词，并以某种方式陷于相信图中必须循环回到起点。各个阶段通常是在时间上向前推进的，而不是把你带回起点。&lt;/p&gt;
&lt;p&gt;假定“X“称为一个组织或实体所需要的东西，可能是一个业务流程，一个应用程序，或者是一些 IT 基础设施。从技术上讲，每当有人设想 X 的时候，总会有一个起点 —— 我们称它为“零日”（这是高中物理的管理，时间的起点通常是 T0）。Day-Zero 可能不是一天：它是提出并记录一套完整的 X 需求所需的时间段，这些活动可能包括高层设计、记录并向某人推销利益、撰写商业案例、寻求资金等。&lt;/p&gt;
&lt;p&gt;这个过程的下一步是构建和部署。Day-1 包括所有活动，从详细（或底层）设计开始，到构建、测试、提出任何所需的流程和人员，以支持 X，使组织受益。在许多情况下，这里可能还涉及一些采购活动。一旦它被安装、设置、配置和批准（“好的开始”），X 就被认为是“上线“或“开放业务”。&lt;/p&gt;
&lt;p&gt;从这一点开始，直到 X 退役、死亡或被替换，我们有 Day-2 操作。这包括保持 X 运行的一系列活动，照看和支持 X，使其以最佳状态运行，确保 X 的运行和交付结果符合最初的意图和期望。监控利用率、确保可用性和成本优化是在通常的内务管理活动基础上增加的，以保持 X 以“最佳“的方式运行。&lt;/p&gt;
&lt;p&gt;随着我们周围世界的要求发生变化，组织要决定对 X 的调整或升级，这些都是必然需要的，是被称为整个大修还是仅仅是升级。如果是整体大修，我们可以假设 X 已经退役并被新的系统 Y 所取代。如果新的 X 只是比以前的 X 有了更大的改进，那么 Day-2 Operation 将继续进行，并包含了所有的活动，以逐步改进 X。&lt;/p&gt;
&lt;p&gt;一个简短的补充说明：“不可变系统“的概念，即人们倾向于通过不允许变化但总是部署新系统来提高可用性，这与上述概念并不冲突。管理不可变系统的过程成为 Day-2 Operation 的一部分。&lt;/p&gt;
&lt;p&gt;对于大多数企业来说，Day-2 Operation 是重复性的。但这是系统为组织产生结果的地方。因此，在 Day-2 Operation 中不断寻求改进，一个能带来最大效益的改进应该是很自然的。&lt;/p&gt;
&lt;h2 id=&#34;评论&#34;&gt;评论&lt;/h2&gt;
&lt;p&gt;Day-2 Operation 目前在中文中暂无统一翻译，我暂且将其翻译为“Day-2 运营”，这样可能会看起来更像是个敏捷词汇，跟“精益运营”比较像。这个命名方式可能来自物理（T0，T1，T2，这样来划分时间段），也可能是来自军事术语。&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34; title=&#34;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age&lt;/a&gt;
 这篇文章中对云时代的软件生命周期 Day0、Day1、Day2 做了比较完整的解释。&lt;/p&gt;
&lt;p&gt;在 IT 领域，Day0、Day1、Day2 指的是软件生命周期的不同阶段。在军事术语中，Day0 是训练的第一天，新兵进入成长阶段。在软件开发中，它代表着设计阶段，在这个阶段，项目需求被指定，解决方案的架构被决定。&lt;/p&gt;
&lt;p&gt;Day1 涉及开发和部署在 Day0 阶段设计的软件。在这个阶段，我们不仅要创建应用程序本身，还要创建它的基础设施、网络、外部服务，并实现这一切的初始配置。&lt;/p&gt;
&lt;p&gt;Day2 是产品发货或提供给客户的时间。在这里，大部分精力都集中在维护、监控和优化系统上。分析系统的行为并做出正确的反应是至关重要的，因为由此产生的反馈循环会一直应用到应用程序的寿命结束。在云时代这三个阶段跟云之前有很大的不同。&lt;/p&gt;
&lt;p&gt;软件准备好后，就开始上线，客户开始使用。Day2 从这里开始，介绍包括软件维护和客户支持在内的内容。软件本身要不断发展，以适应不断变化的需求和客户的要求。在 Day2，主要关注的是建立一个反馈循环。我们监控应用的运行情况，收集用户的反馈意见，并将其发送给开发团队，开发团队将在产品中实现并发布新版本。军事术语 Observe-Orient-Decid-Act 恰好能体现这一阶段的工作内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察：从监控系统中获取信息（资源使用和指标、应用性能监控）。&lt;/li&gt;
&lt;li&gt;定位：对问题进行根本原因分析。&lt;/li&gt;
&lt;li&gt;决定：找到解决出现的问题的方法。&lt;/li&gt;
&lt;li&gt;行动：实施解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如同在作战过程中，这个循环不断重复，正如下图中展示的那样。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/what-is-day-2-operation/008eGmZEly1gormccennnj31gi0u0nae.jpg&#34; data-img=&#34;/blog/what-is-day-2-operation/008eGmZEly1gormccennnj31gi0u0nae.jpg&#34; data-width=&#34;1890&#34; data-height=&#34;1080&#34; alt=&#34;image&#34; data-caption=&#34;Day 2 Operation 流程&#34;&gt;
    
  
  &lt;figcaption&gt;Day 2 Operation 流程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;监控程序是基于服务水平协议（SLA）中定义的要求。SLA 基于服务水平目标（SLO），它代表了我们的服务水平指标（SLI）的状态。自动化和监控是解决第 2 天责任的关键。&lt;/p&gt;
&lt;p&gt;有几类工具可以帮助完成 Day2 的工作。应用性能监控（APM）类组软件，帮助 IT 管理员监控应用性能，从而提供高质量的用户体验。在这里我们可以说出 Datadog、Dynatrace、SignalFX 或 Nutanix Xi Epoch。还有一些自动化和编排工具，如 Ansible 或 Kubernetes，它们有助于管理应用环境。这些工具的应用与 Day1 的工作相重叠。最后，JIRA 或 GItHub 系统处理客户服务，使用户能够报告与他们正在运行的应用程序有关的问题。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/defining-day-2-operations&#34; title=&#34;Defining Day-2 Operations - ozone.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Defining Day-2 Operations - ozone.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/solutions/day-2-ops/&#34; title=&#34;What is &amp;amp;ldquo;Day-2&amp;amp;rdquo; - about.gitlab.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is &amp;ldquo;Day-2&amp;rdquo; - about.gitlab.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codilime.com/day-0-day-1-day-2-the-software-lifecycle-in-the-cloud-age/&#34; title=&#34;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age - codilime.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Day 0/Day 1/Day 2 - the software lifecycle in the cloud age - codilime.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>新的开始——告别蚂蚁，加入 Tetrate</title>
      <link>https://jimmysong.io/blog/moving-on-from-ant-group/</link>
      <pubDate>Mon, 31 Aug 2020 08:27:17 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/moving-on-from-ant-group/</guid>
      <description>
        
        
        &lt;p&gt;今天是我加入蚂蚁的第 914 天，也是在&lt;a href=&#34;https://www.antgroup.com/&#34; title=&#34;蚂蚁&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;蚂蚁&lt;/a&gt;
的最后一天，明天就是 9 月 1 日了，这一天通常都是学校开学的日子，在阿里巴巴大家都以”同学”相称，明天我将加入 &lt;a href=&#34;https://tetrate.io&#34; title=&#34;Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt;
，这也算开始我的新学期吧！&lt;/p&gt;
&lt;h2 id=&#34;蚂蚁阿里巴巴与云原生社区&#34;&gt;蚂蚁/阿里巴巴与云原生社区&lt;/h2&gt;
&lt;p&gt;迄今为止，蚂蚁/阿里巴巴集团对我的职业生涯产生了深远影响，尤其是它的企业文化和价值观，阿里巴巴招聘的理念的“寻找同路人”，在创建云原生社区的过程，不也是寻找同路人的过程吗？&lt;a href=&#34;https://cloudnative.to&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;
就像一个小型社会，我不求它有多大的社会价值，只求它可以对个人、对企业、对社会带来微小而美好的改变。我不断得思考作为个人、员工。尤其是社区的发起人，我的使命到底是什么？我在公司中应该担当什么样的角色？这个社区要走向何方？我在摸索中前进，但是因为有你们的支持，使我更加坚定，致力于云原生技术在中国的普及和应用，以外我一个人可能走得更快，但现在与社区在一起，我们将走得更远！&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/blog/moving-on-from-ant-group/20190624.jpg&#34; data-img=&#34;/blog/moving-on-from-ant-group/20190624.jpg&#34; data-width=&#34;1200&#34; data-height=&#34;559&#34; alt=&#34;image&#34; data-caption=&#34;2019 年 6 月 24 日，上海，KubeCon China 2019&#34;&gt;
    
  
  &lt;figcaption&gt;2019 年 6 月 24 日，上海，KubeCon China 2019&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;em&gt;2019 年 6 月 24 日，上海，KubeCon China 2019&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;加入-tetrate&#34;&gt;加入 Tetrate&lt;/h2&gt;
&lt;p&gt;在过去的两年里，我一直在着力推广 Istio 和 Service Mesh 技术，在蚂蚁集团的资助下，我创办了 &lt;a href=&#34;https://www.servicemesher.com&#34; title=&#34;ServiceMesher 社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ServiceMesher 社区&lt;/a&gt;
，将 Service Mesh 技术带到了中国，接下来我希望将中国实践带到世界。当然还有今年疫情期间成立的&lt;a href=&#34;https://cloudnative.to&#34; title=&#34;云原生社区&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;
，向开发者和大众普及云原生知识和应用。&lt;/p&gt;
&lt;p&gt;作为 Developer Advocate，最重要的一点是不要停止学习，同时要善于倾听和总结。在过去的两年里，我看到无数人对 Service Mesh 表现出浓厚的兴趣，但因对新技术的风险了解的不足及知识匮乏而无从下手。我十分兴奋加入这家专注于 Service Mesh 的初创公司 &lt;a href=&#34;https://tetrate.io&#34; title=&#34;Tetrate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt;
，这是一家全球化远程办公的初创公司，公司的产品围绕开源 &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;
、&lt;a href=&#34;https://envoyproxy.io&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;
 和 &lt;a href=&#34;https://skywalking.apache.org/&#34; title=&#34;Apache SkyWalking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache SkyWalking&lt;/a&gt;
 等开源项目构建，致力于打造云原生的网络基础设施。这里有这些开源项目的多位 Maintainer，如 &lt;a href=&#34;https://twitter.com/wusheng1108&#34; title=&#34;吴晟&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;吴晟&lt;/a&gt;
、&lt;a href=&#34;https://twitter.com/ZackButcher&#34; title=&#34;Zack Butcher&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zack Butcher&lt;/a&gt;
、&lt;a href=&#34;https://twitter.com/zlizan&#34; title=&#34;周礼赞&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;周礼赞&lt;/a&gt;
 等，我相信跟他们一起，可以帮助大家快速、有效的了解和应用 Service Mesh，跨向云原生。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;今年年初在筹备云原生社区的时候，我就确定了未来三年内的工作方向——云原生、开源和社区。在追求梦想的道路上充满荆棘，不仅需要勇气和毅力，还需要你们做我坚强的后盾，我一定披荆斩棘，一往无前。开源是世界的，要想让世界更理解我们，我们必须更加主动地融入这个世界。希望中国开源的明天会更好，希望 Service Mesh 技术在中国更好的落地，希望云原生能够普惠大众，希望大家都可以找到自己的使命。&lt;/p&gt;
&lt;p&gt;Tetrate 目前也在&lt;a href=&#34;https://jimmysong.io/job/tetrate&#34; title=&#34;招聘&#34;&gt;招聘&lt;/a&gt;
中，欢迎投递简历。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

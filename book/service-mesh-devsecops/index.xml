<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song&#39;s Cloud Native Blog – 利用服务网格为基于微服务的应用程序实施 DevSecOps</title>
    <link>https://jimmysong.io/book/service-mesh-devsecops/</link>
    <description>Recent content in 利用服务网格为基于微服务的应用程序实施 DevSecOps on Jimmy Song&#39;s Cloud Native Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 18 May 2022 00:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/service-mesh-devsecops/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>声明</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/preface/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/service-mesh-devsecops/preface/</guid>
      <description>
        
        
        &lt;p&gt;以下是关于本书的声明。&lt;/p&gt;
&lt;h2 id=&#34;许可&#34;&gt;许可&lt;/h2&gt;
&lt;p&gt;本出版物由 NIST 根据 2014 年《联邦信息安全现代化法案》（FISMA）（44 U.S.C. §3551 etseq）规定的法定职责编写，公共法律（P.L.）113-283。NIST 负责制定信息安全标准和准则，包括联邦信息系统的最低要求，但这些标准和准则在未经对国家安全系统行使策略权力的适当联邦官员明确批准的情况下，不得适用于这些系统。本准则与管理和预算办公室（OMB）A-130 号通知的要求一致。&lt;/p&gt;
&lt;p&gt;本出版物中的任何内容都不应被视为与商务部长根据法定授权对联邦机构的强制性和约束性标准和准则相抵触。这些准则也不应被解释为改变或取代商务部长、OMB 主任或任何其他联邦官员的现有权力。本出版物可由非政府组织在自愿的基础上使用，在美国不受版权限制。但是，请注明出处，NIST 将对此表示感谢。&lt;/p&gt;
&lt;p&gt;国家标准和技术研究所特别出版物 800-204C Natl.Inst.
Stand.Technol.Spec.800-204C, 45 pages (March 2022) CODEN: NSPUE2&lt;/p&gt;
&lt;p&gt;本出版物可从以下网站免费获取。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-204C&#34; title=&#34;https://doi.org/10.6028/NIST.SP.800-204C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.6028/NIST.SP.800-204C&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;关于计算机系统技术的报告&#34;&gt;关于计算机系统技术的报告&lt;/h2&gt;
&lt;p&gt;美国国家标准与技术研究所（NIST）的信息技术实验室（ITL）通过为国家的测量和标准基础设施提供技术领导来促进美国经济和公共福利。ITL 开发测试、测试方法、参考数据、概念实施证明和技术分析，以推动信息技术的发展和生产性使用。ITL 的职责包括为联邦信息系统中与国家安全无关的信息制定管理、行政、技术和物理标准和准则，以实现低成本的安全和隐私。&lt;/p&gt;
&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;
&lt;p&gt;云原生应用已经发展成为一个标准化的架构，由多个松散耦合的组件组成，这些组件被称为微服务（通常通常以容器实现），由提供应用服务的基础设施（如服务网格）支持。这两个组件通常都被托管在一个容器调度和资源管理平台上。在这个架构中，应用环境中涉及的整套源代码可以分为五种类型：1）应用代码（体现应用逻辑）；2）应用服务代码（用于会话建立、网络连接等服务）；3）基础设施即代码（用于配置计算、网络和存储资源）；4）策略即代码（用于定义运行时策略，如以声明性代码表达的零信任）；5）可观测性即代码（用于持续监测应用运行时状态）。由于安全、商业竞争力和松散耦合的应用组件的固有结构，这类应用需要一个不同的开发、部署和运行时范式。DevSecOps（分别由开发、安全和运维的首字母缩写组成）已经被发现是这些应用的促进范式，其基本要素包括持续集成、持续交付和持续部署（CI/CD）管道。这些管道是将开发者的源代码通过各个阶段的工作流程，如构建、测试、打包、部署和运维，由带有反馈机制的自动化工具支持。本文的目的是为云原生应用的 DevSecOps 原语的实施提供指导，其架构和代码类型如上所述。本文还讨论了这种方法对高安全保障和实现持续运维授权（C-ATO）的好处。&lt;/p&gt;
&lt;h2 id=&#34;鸣谢&#34;&gt;鸣谢&lt;/h2&gt;
&lt;p&gt;作者首先要感谢 NIST 的 David Ferraiolo，他发起了这项工作，为基于微服务的应用中服务网格的开发、部署和监控提供了有针对性的 DevSecOps 原语实施指导。衷心感谢美国空军 CSO Nicolas Chaillan 先生，感谢他详细而有见地的审查和反馈。还要感谢 Tetrate 公司的 Zack Butcher 为本文标题提供的建议。作者还对 NIST 的 Isabel Van
Wyk 的详细编辑审查表示感谢。&lt;/p&gt;
&lt;h2 id=&#34;专利披露通知&#34;&gt;专利披露通知&lt;/h2&gt;
&lt;p&gt;通知：信息技术实验室（ITL）已要求专利权持有人向 ITL 披露其使用可能需要遵守本出版物的指导或要求的专利权。然而，专利持有人没有义务回应 ITL 的专利要求，ITL 也没有进行专利搜索，以确定哪些专利可能适用于本出版物。&lt;/p&gt;
&lt;p&gt;截至本出版物发布之日，以及在呼吁确定可能需要使用其来遵守本出版物的指导或要求的专利权利要求之后，ITL 没有发现任何此类专利权利要求。&lt;/p&gt;
&lt;p&gt;ITL 没有作出或暗示在使用本出版物时不需要许可证以避免专利侵权。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>执行摘要</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/executive-summary/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/service-mesh-devsecops/executive-summary/</guid>
      <description>
        
        
        &lt;p&gt;云原生应用已经发展成为一个标准化的架构，由以下部分组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个松散耦合的组件被称为微服务（通常或典型地以容器形式实现）。&lt;/li&gt;
&lt;li&gt;一个应用服务基础设施，为用户、服务和设备提供安全通信、认证和授权等服务（例如，服务网格）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于安全、商业竞争力和其固有的结构（松散耦合的应用组件），这类应用需要一个不同的应用、部署和运行时监控范式 —— 统称为软件生命周期范式。DevSecOps（分别由开发、安全和运维的首字母缩写组成）是这些应用的开发、部署和运维的促进范式之一，其基本要素包括持续集成、持续交付和持续部署（CI/CD）管道。&lt;/p&gt;
&lt;p&gt;CI/CD 管道是将开发人员的源代码通过各个阶段的工作流程，如构建、功能测试、安全扫描漏洞、打包和部署，由带有反馈机制的自动化工具支持。在本文中，应用环境中涉及的整个源代码集被分为五种代码类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用代码，它体现了执行一个或多个业务功能的应用逻辑。&lt;/li&gt;
&lt;li&gt;应用服务代码，用于服务，如会话建立、网络连接等。&lt;/li&gt;
&lt;li&gt;基础设施即代码，它是以声明性代码的形式存在的计算、网络和存储资源。&lt;/li&gt;
&lt;li&gt;策略即代码，这是运行时策略（例如，零信任），以声明性代码的形式表达。&lt;/li&gt;
&lt;li&gt;可观测性即代码，用于持续监测应用程序的健康状况，其中监测功能被表述为声明性代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，可以为所有五个代码类型创建单独的 CI/CD 管道。还描述了这些代码类型中的每一种所执行的功能，以强调它们在整个应用程序的执行中所发挥的作用。&lt;/p&gt;
&lt;p&gt;虽然云原生应用有一个共同的架构堆栈，但堆栈组件运行的平台可能有所不同。该平台是物理（裸机）或虚拟化（如 Kubernetes）上的一个抽象层。为了在本文中明确提及该平台或应用环境，它被称为 &lt;strong&gt;DevSecOps 原语参考平台&lt;/strong&gt;，或简称为 &lt;strong&gt;参考平台&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文件的目的是为参考平台的 DevSecOps 原语的实施提供指导。本文还介绍了这种实施对高安全保障的好处，以及在管道内使用风险管理工具和仪表盘指标提供持续授权操作（C-ATO）的工件。&lt;/p&gt;
&lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;../intro&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;下一章&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;


      </description>
    </item>
    
    <item>
      <title>第一章：简介</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/intro/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/service-mesh-devsecops/intro/</guid>
      <description>
        
        
        &lt;p&gt;云原生应用由多个松散耦合的组件（称为微服务，通常以容器形式实现）组成，在需要零信任概念的无边界网络环境中运行（企业内部或云），并由来自不同地点的用户访问（例如，校园、家庭办公室等）。云原生应用不只是指在云中运行的应用。它们还指具有设计和运行时架构的一类应用，如微服务，以及用于提供所有应用服务（包括安全）的专用基础设施。将 &lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207.pdf&#34; title=&#34;零信任原则&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任原则&lt;/a&gt;
 纳入这类应用提供了一些技术，其中对所有受保护资源的访问是通过基于身份的保护和基于网络的保护（如微分）来强制执行的。&lt;/p&gt;
&lt;p&gt;由于业务原因，云原生应用程序需要敏捷和安全的更新和部署技术，以及应对网络安全事件的必要弹性。因此，它们需要一种与传统的单层或多层应用不同的应用开发、部署和运行时监控范式（统称为软件生命周期范式）。DevSecOps（开发、安全和运维）是这类应用的促进范式，因为它通过（a）持续集成、持续交付 / 持续部署（CI/CD）管道（在第 3 节中解释）等基本要素促进了敏捷和安全的开发、交付、部署和运维；（b）整个生命周期的安全测试；以及（c）运行时的持续监控，所有这些都由自动化工具支持。事实上，满足上述目标的范式最初被赋予了 DevOps 这个术语，以表明它试图消除开发和运维之间的隔阂，并促进（或推动）加强合作。后来，DevSecOps 这个词是由社区的一部分人创造的，以强调安全团队在整个过程中的作用。因此，DevSecOps 这个术语表示一种文化和一套带有自动化工具的实践，以推动负责交付软件的关键利益相关者（包括开发、运维和安全组织）之间加强协作、信任、分担责任、透明度、自主性、敏捷性和自动化。DevSecOps 拥有必要的基本要素和其他构建模块，以满足云原生应用的设计目标。&lt;/p&gt;
&lt;p&gt;应该注意的是，整个社区对 DevSecOps 一词并无共识。如前所述，该术语主要是为了强调一个事实，即必须在软件开发生命周期的所有阶段（即构建、测试、打包、部署和运行）对安全进行测试和整合。社区中的一部分人继续使用 DevOps 这个术语，理由是没有必要定义一个新的术语，因为安全必须是任何软件生命周期过程的一个组成部分。&lt;/p&gt;
&lt;h2 id=&#34;本章大纲&#34;&gt;本章大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/intro/scope/&#34;&gt;1.1 范围&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/intro/related-devsecops-initiatives/&#34;&gt;1.2 相关的 DevSecOps 倡议&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/intro/target-audience/&#34;&gt;1.3 目标受众&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/intro/relationship-to-other-nist-guidance-documents/&#34;&gt;1.4 与其他 NIST 指导文件的关系&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/intro/organization-of-this-document/&#34;&gt;1.5 本文件的组织&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;scope&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;开始阅读&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;


      </description>
    </item>
    
    <item>
      <title>第二章：实施 DevSecOps 原语的参考平台</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/reference-platform/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/service-mesh-devsecops/reference-platform/</guid>
      <description>
        
        
        &lt;p&gt;如第 1.1 节所述，参考平台是一个容器编排和管理平台。在现代应用环境中，平台是物理（裸机）或虚拟化（如虚拟机、容器）基础设施上的一个抽象层。在实施 DevSecOps 原语之前，平台只是包含了应用代码，其中包含了应用逻辑和服务网状代码，而服务网状代码又提供应用服务。本节将考虑以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个容器编排和资源管理平台，容纳了应用程序代码和大部分的服务网格代码&lt;/li&gt;
&lt;li&gt;服务网格的软件架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本章大纲&#34;&gt;本章大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/reference-platform/container-orchestration-and-resource-management-platform/&#34;&gt;2.1 容器编排和资源管理平台&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/reference-platform/service-mesh-software-architecture/&#34;&gt;2.2 服务网格架构&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;container-orchestration-and-resource-management-platform&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;开始阅读&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;


      </description>
    </item>
    
    <item>
      <title>第三章：DevSecOps 组织准备、关键基本要素和实施</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/devsecops/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/service-mesh-devsecops/devsecops/</guid>
      <description>
        
        
        &lt;p&gt;DevSecOps 在早期就将安全纳入了软件工程流程。它将安全流程和工具集成到 DevOps 的所有开发工作流程（或后面解释的管道）中，并使之自动化，从而实现无缝和连续。换句话说，它可以被看作是三个过程的组合。&lt;a href=&#34;https://medium.com/faun/devsecops-baking-security-into-development-process-9579418ad9a7&#34; title=&#34;开发 &amp;#43; 安全 &amp;#43; 运维&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开发 + 安全 + 运维&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;本节讨论了 DevSecOps 的以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组织对 DevSecOps 的准备情况&lt;/li&gt;
&lt;li&gt;开发安全运维平台&lt;/li&gt;
&lt;li&gt;开发安全运维的基本构件或关键原语&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本章大纲&#34;&gt;本章大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/organizational-preparedness-for-devsecops/&#34;&gt;3.1 组织对 DevSecOps 的准备情况&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/devsecops-platform/&#34;&gt;3.2 DevSecOps 平台&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/devsecops/key-primitives-and-implementation-tasks/&#34;&gt;3.3 DevSecOps 关键原语和实施任务&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;organizational-preparedness-for-devsecops&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;开始阅读&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;


      </description>
    </item>
    
    <item>
      <title>第四章：为参考平台实施 DevSecOps 原语</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/implement/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/service-mesh-devsecops/implement/</guid>
      <description>
        
        
        &lt;p&gt;各种 CI/CD 管道都涉及到参考平台（即基于微服务的应用，有提供基础设施服务的服务网格）。虽然参考应用是基于微服务的应用，但 DevSecOps 的原语可以应用于单体应用以及既在企业内部又基于云的应用（如混合云、单一公有云和多云）。&lt;/p&gt;
&lt;p&gt;在第 2.1 节中，我们提到了我们参考应用环境中的五种代码类型。我们还提到，也可以为这五种代码类型中的每一种创建单独的 CI/CD 管道。这五种代码类型在参考平台组件中的位置将被讨论，然后是描述相关 CI/CD 管道的单独章节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参考平台中的代码类型和相关的 CI/CD 管道（4.1 节）&lt;/li&gt;
&lt;li&gt;应用程序代码和应用服务代码的 CI/CD 管道（4.2 节）&lt;/li&gt;
&lt;li&gt;基础设施即代码（IaC）的 CI/CD 管道（4.3 节）&lt;/li&gt;
&lt;li&gt;策略即代码的 CI/CD 管道（4.4 节）&lt;/li&gt;
&lt;li&gt;可观测性即代码的 CI/CD 管道（4.5 节）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所有 CI/CD 管道的实施问题，无论代码类型如何，都将在以下章节中讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保 CI/CD 管道的安全（4.6 节）&lt;/li&gt;
&lt;li&gt;CI/CD 管道中的工作流模型（4.7 节）&lt;/li&gt;
&lt;li&gt;CI/CD 管道中的安全测试（4.8 节）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节还将考虑 DevSecOps 的整体优势，并在第 4.9 节和第 4.10 节分别介绍参考平台的具体优势和利用 DevSecOps 进行持续授权操作（C-ATO）的能力。&lt;/p&gt;
&lt;h2 id=&#34;本章大纲&#34;&gt;本章大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/description-of-code-types-and-reference-platform-components/&#34;&gt;4.1 代码类型和参考平台组件的描述&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/ci-cd-pipeline-for-application-code-and-application-services-code/&#34;&gt;4.2 应用程序代码和应用服务代码的 CI/CD 管道&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/ci-cd-pipeline-for-infrastructure-as-code/&#34;&gt;4.3 基础设施即代码的 CI/CD 管道&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/ci-cd-pipeline-for-policy-as-code/&#34;&gt;4.4 策略即代码的 CI/CD 管道&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/ci-cd-pipeline-for-observability-as-code/&#34;&gt;4.5 可观测性即代码的 CI/CD 管道&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/securing-the-ci-cd-pipeline/&#34;&gt;4.6 确保 CI/CD 管道的安全&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/workflow-models-in-ci-cd-pipelines/&#34;&gt;4.7 CI/CD 管道中的工作流模型&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/security-testing-common-requirement-for-ci-cd-pipelines-for-all-code-types/&#34;&gt;4.8 安全测试——所有代码类型的 CI/CD 管道的共同要求&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/benefits-of-devsecops-primitives-to-application-security-in-the-service-mesh/&#34;&gt;4.9 DevSecOps 原语对服务网格中应用安全的好处&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/service-mesh-devsecops/implement/leveraging-devsecops-for-continuous-authorization-to-operate-c-ato/&#34;&gt;4.10 利用 DevSecOps 进行持续授权操作（C-ATO）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;description-of-code-types-and-reference-platform-components&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;开始阅读&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;


      </description>
    </item>
    
    <item>
      <title>第五章：摘要和结论</title>
      <link>https://jimmysong.io/book/service-mesh-devsecops/summary-and-conclusion/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/service-mesh-devsecops/summary-and-conclusion/</guid>
      <description>
        
        
        &lt;p&gt;本文为托管云原生应用的参考平台实施 DevSecOps 原语提供全面指导。它包括对参考平台的概述，并描述了基本的 DevSecOps 原语（即 CI/CD 管道）、其构建模块、管道的设计和执行，以及自动化在 CI/CD 管道中有效执行工作流程的作用。&lt;/p&gt;
&lt;p&gt;参考平台的架构除了应用代码和提供应用服务的代码外还包括用于基础设施、运行时策略和持续监测应用健康状况的功能元素，可以通过具有独立 CI/CD 管道类型的声明性代码来部署。还介绍了这些代码的运行时行为、实现高安全性的好处，以及使用风险管理工具和仪表盘指标的管道内的工件来提供持续授权操作（C-ATO）。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

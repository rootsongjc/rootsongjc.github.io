
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 知识库和 FAQ</title>
    <link>https://jimmysong.io/book/tsb/knowledge-base/</link>
    <description>Recent content in 知识库和 FAQ on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    <lastBuildDate>Wed, 09 Aug 2023 12:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/tsb/knowledge-base/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>服务网格与 GitOps</title>
      <link>https://jimmysong.io/book/tsb/knowledge-base/gitops/</link>
      <pubDate>Wed, 09 Aug 2023 12:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/tsb/knowledge-base/gitops/</guid>
      <description>
        
        
        &lt;p&gt;GitOps 是一种实践，它使用 Git 存储库作为应用程序/系统状态的真实来源。对状态的更改通过拉取请求（PR）和批准工作流程执行，并将由持续交付（CD）流程自动应用于系统。以下图像对此进行了说明。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-overview_hucbc18b7de92c0cc7a20a676c9a7dbba4_75065_3000x992_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-overview.png&#34; data-img=&#34;/book/tsb/knowledge-base/gitops/gitops-overview.png&#34; data-width=&#34;3000&#34; data-height=&#34;992&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;GitOps 有三个核心实践：&lt;/p&gt;
&lt;h3 id=&#34;基础设施即代码&#34;&gt;基础设施即代码&lt;/h3&gt;
&lt;p&gt;这描述了将所有基础设施和应用程序配置存储为 Git 中的代码的实践。&lt;/p&gt;
&lt;h3 id=&#34;使用拉取请求进行更改&#34;&gt;使用拉取请求进行更改&lt;/h3&gt;
&lt;p&gt;更改是在分支上提出的，然后创建 PR 将更改合并到主分支中。使用 PR 允许运维工程师与开发团队、安全团队和其他利益相关者进行协作进行对等审查。&lt;/p&gt;
&lt;h3 id=&#34;ci持续集成和-cd持续部署自动化&#34;&gt;CI（持续集成）和 CD（持续部署）自动化&lt;/h3&gt;
&lt;p&gt;在理想情况下，不会对 GitOps 管理的环境进行手动更改。相反，CI 和 CD 充当一种协调循环。每次进行更改时，自动化工具会将环境的状态与 Git 存储库中定义的真实来源进行比较。&lt;/p&gt;
&lt;h2 id=&#34;gitops-好处&#34;&gt;GitOps 好处&lt;/h2&gt;
&lt;p&gt;通过使用 GitOps 实践，你可以获得以下几个好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;带有历史记录的版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于每个更改都存储在 Git 中，因此很容易发现进行了哪些更改。在大多数情况下，更改可以追溯到特定的事件或更改请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;所有权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于更改可以在 Git 历史记录中查找，因此可以找出谁拥有相关文件（在本例中主要是清单/YAML 文件）。这也意味着可以推断出生成内容的所有者，并在运维过程中使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不变性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;任何构建或部署都是可重复的和不可变的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确定性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使容器/集群存在手动更改，负责应用配置的运维者也在观察并将根据存储在 Git 中的信息进行修复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    请记住，要生成机密后，重新启动 &lt;code&gt;tsb-operator-control-plane&lt;/code&gt; Pod，并一旦生成后，重新启动控制平面 Pod。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;构建ci与部署cd的分离&#34;&gt;构建（CI）与部署（CD）的分离&lt;/h3&gt;
&lt;p&gt;虽然你可以为应用程序代码和配置使用单一流水线，但出于以下原因，你可能希望将它们分开：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;责任分离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用程序的 &lt;strong&gt;开发人员&lt;/strong&gt; 提交代码并创建发布，这可以在 CI 中完成。应用程序的 &lt;strong&gt;运维人员&lt;/strong&gt; 将构件部署到集群中，这可以在 CD 中完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多次部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用 CD 将单一应用程序代码部署到多个环境中，无需一次又一次地进行 CI。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重复部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重新创建部署不应该需要新的构建。可以在 CD 中管理构件，而无需一次又一次地进行 CI。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-ci-cd_hu76ab0a021e21d01e8c6318e12633f401_133581_3000x1220_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-ci-cd.png&#34; data-img=&#34;/book/tsb/knowledge-base/gitops/gitops-ci-cd.png&#34; data-width=&#34;3000&#34; data-height=&#34;1220&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;可以通过使用协调循环将 CI 与 CD 连接起来，该协调循环将检查新的构件版本并创建 PR 到应用程序配置存储库以更新应用程序镜像标签。&lt;/p&gt;
&lt;h2 id=&#34;推送与拉取&#34;&gt;推送与拉取&lt;/h2&gt;
&lt;p&gt;GitOps 有两种方法：&lt;strong&gt;推送&lt;/strong&gt; 和 &lt;strong&gt;拉取&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;推送&lt;/strong&gt; 方法中，一旦在 Git 存储库上提交了更改或成功执行了 CI 流水线，外部系统（通常是 CD 流水线）将触发部署构件到集群。在这种方法中，流水线系统需要访问集群的相关权限。&lt;/p&gt;
&lt;p&gt;推送解决方案的示例包括：&lt;a href=&#34;https://github.com/features/actions&#34; title=&#34;Github Actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Actions&lt;/a&gt;、&lt;a href=&#34;https://azure.microsoft.com/en-us/services/devops/pipelines/&#34; title=&#34;Azure Pipelines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure Pipelines&lt;/a&gt;、&lt;a href=&#34;https://docs.gitlab.com/ee/ci/&#34; title=&#34;GitlabCI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitlabCI&lt;/a&gt; 和 &lt;a href=&#34;https://circleci.com/&#34; title=&#34;CircleCI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CircleCI&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-push_hu76ab0a021e21d01e8c6318e12633f401_134445_3000x1220_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-push.png&#34; data-img=&#34;/book/tsb/knowledge-base/gitops/gitops-push.png&#34; data-width=&#34;3000&#34; data-height=&#34;1220&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;在 &lt;strong&gt;拉取&lt;/strong&gt; 方法中，目标集群内部的代理定期扫描相关的 Git 存储库。如果检测到更改，将从集群内部更新集群状态。如下图所示，CD 组件移至集群旁边。&lt;/p&gt;
&lt;p&gt;拉取解决方案的示例包括：&lt;a href=&#34;https://circleci.com/&#34; title=&#34;Argo CD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo CD&lt;/a&gt; 和 &lt;a href=&#34;https://fluxcd.io/&#34; title=&#34;Flux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flux&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-pull_hu4789a49a2258624d8b2226e3c4f89bab_140179_3000x1208_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-pull.png&#34; data-img=&#34;/book/tsb/knowledge-base/gitops/gitops-pull.png&#34; data-width=&#34;3000&#34; data-height=&#34;1208&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;这两种方法都有各自的优点和缺点。如果你有兴趣进一步阅读，请查看以下文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thenewstack.io/push-vs-pull-in-gitops-is-there-really-a-difference/&#34; title=&#34;GitOps 中的推送与拉取：真的有区别吗？&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitOps 中的推送与拉取：真的有区别吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://faun.pub/gitops-comparison-pull-and-push-88fcbaadfe45&#34; title=&#34;GitOps —— 比较拉取和推送&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitOps —— 比较拉取和推送&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不会有一种单一的解决方案适用于所有可能的用例，因为每种情况都有很大的变化。因此，始终根据每种方法的利弊权衡你的团队或组织的需求，有助于你决定使用哪种方法（甚至同时使用两种方法）。&lt;/p&gt;
&lt;h2 id=&#34;集群部署流水线&#34;&gt;集群部署流水线&lt;/h2&gt;
&lt;p&gt;在使用 GitOps 流水线规划如何提供集群时，你还需要考虑以下几个因素：&lt;/p&gt;
&lt;p&gt;这包括创建集群、在集群中安装常见的基础设施组件：日志记录、监控、秘密、证书、访问控制、服务网格组件（如 Tetrate Service Bridge，TSB）等。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-cluster-pipeline_huf28070d782f63311791e7959e3edec50_163784_3000x1130_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-cluster-pipeline.png&#34; data-img=&#34;/book/tsb/knowledge-base/gitops/gitops-cluster-pipeline.png&#34; data-width=&#34;3000&#34; data-height=&#34;1130&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;gitops-的挑战&#34;&gt;GitOps 的挑战&lt;/h2&gt;
&lt;p&gt;像任何技术一样，成功采用的关键在于管理期望并充分了解技术的优势和劣势。了解它们是准确确定哪种解决方案适合你的文化、环境和/或流程的重要因素，如果适用的话。&lt;/p&gt;
&lt;p&gt;以下是采用 GitOps 面临的一些挑战：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitOps 无法处理自动缩放和动态资源。&lt;/strong&gt; 由于 GitOps 期望状态存储在 Git 中，因此动态方面，如自动缩放，可能会在尝试同步状态时引发问题。工具如 ArgoCD 具有&lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/&#34; title=&#34;自定义差异&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义差异&lt;/a&gt;来处理此类问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitOps 不解决在不同环境之间推广版本的问题。&lt;/strong&gt; 每个环境的配置可能存储在不同的 Git 分支中。通常使用模板化解决方案，例如 &lt;a href=&#34;https://helm.sh/&#34; title=&#34;Helm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm&lt;/a&gt; 和 &lt;a href=&#34;https://kustomize.io/&#34; title=&#34;Kustomize&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kustomize&lt;/a&gt;，以提供一个可以在每个环境上进行定制的基本模板。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽管所有信息都在 Git 中，但审计仍然具有问题。&lt;/strong&gt; 尽管 Git 具有更改历史记录，但要回答某些问题而不使用附加工具来分析多个 Git 存储库中的数据很困难。例如，环境 X 的部署中有多少成功，需要回滚多少？环境 X 中存在多少功能，但尚未在环境 Y 中存在？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大规模部署，具有大量集群和服务，将面临挑战。&lt;/strong&gt; 影响大量资源的操作，例如在所有部署上添加新的全公司标签，可能会有问题，因为你可能要处理多个服务，其配置存储在多个不同的 Git 存储库中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺乏标准实践。&lt;/strong&gt; 一个很好的例子是仍然没有关于如何管理配置的单一接受的实践，例如秘密。如果秘密存储在 Git 中，它们需要加密，因此在部署期间需要有自己的工作流程来处理它们。如果它们不存储在 Git 中，那么你将无法在 Git 中存储集群的状态。实际上，组织往往使用外部秘密管理工具，如 Vault。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺乏可见性和运行时验证。&lt;/strong&gt; Git 在运行时不提供关于发生了什么的可见性。例如，如果单个更新导致其他依赖服务出现问题，那么很难找出问题。&lt;/p&gt;
&lt;h2 id=&#34;gitops-用于服务网格&#34;&gt;GitOps 用于服务网格&lt;/h2&gt;
&lt;p&gt;服务网格通过独立的网络层或“网格”来控制服务之间的通信，从而将运维与开发分开，解决了应用程序的网络、安全和可观测性问题。该网格由充当代理的连接边车形成，这些边车控制参与网格的服务之间的通信。服务网格提供了在不更改应用程序本身的情况下控制和保护应用程序网络的功能。&lt;/p&gt;
&lt;p&gt;服务网格引入了控制平面组件以管理代理并将运行时配置分发给代理。你需要在 GitOps 流水线中部署和管理网格控制平面的生命周期。这可以添加到你已经用于提供集群的现有流水线中，或者可以使用不同的流水线。&lt;/p&gt;
&lt;p&gt;由于服务网格运行在应用程序之外，因此除了应用程序部署配置之外，你还需要在 GitOps 流水线中添加另一种配置。对于 &lt;a href=&#34;https://istio.io/&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;，这将是 Istio 资源，例如 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/gateway/&#34; title=&#34;&amp;lt;code&amp;gt;Gateway&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Gateway&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/virtual-service/&#34; title=&#34;&amp;lt;code&amp;gt;VirtualService&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;VirtualService&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/destination-rule/&#34; title=&#34;&amp;lt;code&amp;gt;DestinationRule&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;DestinationRule&lt;/code&gt;&lt;/a&gt; 等。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-service-mesh_hua2db270b7a7f9ba231b87f3ba166a07a_180704_3000x1370_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-service-mesh.png&#34; data-img=&#34;/book/tsb/knowledge-base/gitops/gitops-service-mesh.png&#34; data-width=&#34;3000&#34; data-height=&#34;1370&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;h2 id=&#34;tsb-的-gitops&#34;&gt;TSB 的 GitOps&lt;/h2&gt;
&lt;p&gt;TSB 在多集群控制平面之上添加了一个管理平面（MP），并提供了一种统一的方式来连接和保护整个网格管理的环境中的服务。在将 TSB 纳入你的 GitOps 流水线时，你需要注意几个因素。&lt;/p&gt;
&lt;h3 id=&#34;tsb-api-结构&#34;&gt;TSB API 结构&lt;/h3&gt;
&lt;p&gt;TSB 有两个 API：安装和配置。安装 API 通常用于配置管理平面和控制平面集群。安装 API 是 Kubernetes YAML 文件，可以添加到集群配置流水线中。&lt;/p&gt;
&lt;p&gt;要使用 TSB 配置来配置应用程序网格行为，你可以以两种方式进行：&lt;/p&gt;
&lt;h4 id=&#34;基于-tsb&#34;&gt;基于 TSB&lt;/h4&gt;
&lt;p&gt;你需要使用 TSB API 或使用 TSB CLI (&lt;code&gt;tctl&lt;/code&gt;) 来应用 TSB 配置。TSB 配置必须应用于 TSB 管理平面，而不是直接应用于集群。管理平面将根据指定的 &lt;code&gt;namespaceSelector&lt;/code&gt; 将配置分发到 Kubernetes 集群。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-tsb_huf49d3d02647e0272d9f5a2c007b03eea_241433_3000x1382_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/tsb/knowledge-base/gitops/gitops-tsb.png&#34; data-img=&#34;/book/tsb/knowledge-base/gitops/gitops-tsb.png&#34; data-width=&#34;3000&#34; data-height=&#34;1382&#34; alt=&#34;image&#34; data-caption=&#34;&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
&lt;/figure&gt;
&lt;p&gt;由于 TSB 需要将应用程序网络配置应用于 TSB 管理平面，因此你需要将 &lt;code&gt;tctl&lt;/code&gt; 添加到你的 CD 流水线中。&lt;/p&gt;
&lt;h4 id=&#34;基于-kubernetes&#34;&gt;基于 Kubernetes&lt;/h4&gt;
&lt;p&gt;这需要应用程序集群启用 &lt;a href=&#34;../../operations/features/configure-gitops&#34; title=&#34;GitOps 功能&#34;&gt;GitOps 功能&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一旦完成，你可以将 TSB Kubernetes YAML 文件添加到每个集群的配置流水线中。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;a href=&#34;../../howto/gitops&#34; title=&#34;GitOps howtos&#34;&gt;GitOps howtos&lt;/a&gt; 中详细了解如何操作。&lt;/p&gt;
&lt;h3 id=&#34;回滚选项&#34;&gt;回滚选项&lt;/h3&gt;
&lt;p&gt;不同的系统和应用程序根据其依赖关系采用不同的回滚方法。&lt;/p&gt;
&lt;p&gt;对于 TSB 和所有接入的集群，配置的来源存储在 TSB 内部。
由于 TSB 配置格式在一定程度上与所使用的 TSB 版本相关联，因此确保已部署的 TSB 版本、TSB 中的配置以及存储在 Git 中的配置保持同步非常重要，特别是在尝试执行回滚时。&lt;/p&gt;
&lt;p&gt;你需要根据回滚情况的具体情况进行调查，这超出了本文档的范围，因为它们在不同环境中有很大的变化。示例可能包括在与 Git 配置更改一起回滚应用程序或一组应用程序的 TSB 配置，与特定控制平面版本相关的回滚或回滚 TSB 管理平面等。&lt;/p&gt;
&lt;h3 id=&#34;灾难恢复设置&#34;&gt;灾难恢复设置&lt;/h3&gt;
&lt;p&gt;企业可以设置镜像环境用于灾难恢复（DR），包括 TSB DR。Kubernetes 清单和 TSB 配置与主要集群同步应用于 DR 集群。&lt;/p&gt;
&lt;p&gt;另一种情况是使用单个 TSB 管理主要和 DR 用户集群。在这种情况下，可以创建并应用与主要集群相同的配置的重复集，除了资源名称、集群和命名空间名称不同。&lt;/p&gt;
&lt;h2 id=&#34;踏上-gitops-之路&#34;&gt;踏上 GitOps 之路&lt;/h2&gt;
&lt;p&gt;对于踏上 GitOps 之路的组织，可以开始评估现有解决方案，并根据组织目标验证每个解决方案，同时牢记当前 GitOps 解决方案的局限性和挑战。&lt;/p&gt;
&lt;p&gt;模板化将在抽象和扩展用于大型集群和服务的 GitOps 中发挥重要作用。你需要进行实验，并查看哪种方法对你的组织最合适。&lt;/p&gt;
&lt;p&gt;与任何要引入到组织中的变化一样，从一个单一应用程序团队开始，建立成功案例，激励其他人开始采用 GitOps。GitOps 的采用需要相关利益相关者的支持。他们需要看到 GitOps 将帮助他们解决问题，使他们的工作更轻松和有效。&lt;/p&gt;
&lt;p&gt;GitOps 是一种相对较新的实践，仍在不断发展。随着这项技术的发展，开源社区和供应商将努力解决一些限制。如果你对进一步探讨这个主题感兴趣，可以查看 CNCF 的 GitOps Working Group。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>TSB 常见问题解答</title>
      <link>https://jimmysong.io/book/tsb/knowledge-base/faq/</link>
      <pubDate>Wed, 09 Aug 2023 12:00:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/tsb/knowledge-base/faq/</guid>
      <description>
        
        
        &lt;h2 id=&#34;如何确定-envoy-是否正常&#34;&gt;如何确定 Envoy 是否正常？&lt;/h2&gt;
&lt;p&gt;确定 Envoy 是否正常的最佳方法是检查其健康和就绪端点（&lt;code&gt;healthz&lt;/code&gt;）。要检查已加入的集群中应用程序的 Envoy 的 &lt;code&gt;healthz&lt;/code&gt; 端点，你需要直接连接到应用程序的旁路 Envoy 边车。&lt;/p&gt;
&lt;p&gt;假设你在集群的 &lt;code&gt;bookinfo&lt;/code&gt; 命名空间中有一个名为 &lt;code&gt;details-v1-57f8794694-hc7gd&lt;/code&gt; 的 Pod，该 Pod 托管你的应用程序。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;kubectl port-forward&lt;/code&gt; 建立本地机器到 Envoy 边车上的端口 &lt;code&gt;15021&lt;/code&gt; 的端口转发：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl port-forward -n bookinfo details-v1-57f8794694-hc7gd 15021:15021
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦上述命令成功执行，你现在应该能够将你喜爱的工具指向 URL &lt;code&gt;http://localhost:15021/healthz/ready&lt;/code&gt; 并直接访问 Envoy 的 &lt;code&gt;healthz&lt;/code&gt; 端点。请避免使用浏览器进行此操作，因为如果正确配置并运行，则 Envoy 代理将返回一个带有空主体的 &lt;code&gt;200 OK&lt;/code&gt; 响应。&lt;/p&gt;
&lt;p&gt;例如，你可以使用 &lt;code&gt;curl&lt;/code&gt; 以详细模式执行如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v http://localhost:15021/healthz/ready
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这应该会产生类似以下的输出。如果响应状态为 &lt;code&gt;200 OK&lt;/code&gt;，则 Envoy 正常工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v http://localhost:15021/healthz/ready
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*   Trying 127.0.0.1:15021...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* TCP_NODELAY &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Connected to localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;127.0.0.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; port &lt;span class=&#34;m&#34;&gt;15021&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; GET /healthz/ready HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Host: localhost:15021
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; User-Agent: curl/7.68.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Accept: */*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Mark bundle as not supporting multiuse
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; date: Fri, &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 13:32:05 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; content-length: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Connection &lt;span class=&#34;c1&#34;&gt;#0 to host localhost left intact&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tctl-连接到集群失败&#34;&gt;&lt;code&gt;tctl&lt;/code&gt; 连接到集群失败&lt;/h2&gt;
&lt;p&gt;请检查你的 &lt;code&gt;tctl&lt;/code&gt; 配置文件中是否包含与集群相关的正确组织和租户信息。&lt;/p&gt;
&lt;p&gt;首先，通过执行以下命令获取当前活动配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tctl config profiles list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你应该会看到类似以下的输出。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  CURRENT  NAME     CLUSTER  ACCOUNT
           default  default  admin-user
  *        gke-tsb  gke-tsb  gke-user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;带有星号（&lt;code&gt;*&lt;/code&gt;）的条目是当前活动配置文件。要配置当前配置文件 &lt;code&gt;gke-tsb&lt;/code&gt;，使 &lt;code&gt;gke-user&lt;/code&gt; 使用组织名称 &lt;code&gt;organization-name&lt;/code&gt; 和租户名称 &lt;code&gt;tenant-name&lt;/code&gt; 连接到集群，请执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tctl config users &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;gke-user&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --org &amp;lt;organization-name&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --tenant &amp;lt;tenant-name&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --username &amp;lt;username&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --password &amp;lt;password&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;组织名称和租户名称可以通过 Web 用户界面获取。&lt;/p&gt;
&lt;p&gt;此后，当你执行 &lt;code&gt;tctl&lt;/code&gt; 命令时，将会针对指定的组织和租户运行。对于需要身份验证的每个 &lt;code&gt;tctl&lt;/code&gt; 子命令，也可以通过显式指定 &lt;code&gt;--org&lt;/code&gt; 和 &lt;code&gt;--tenant&lt;/code&gt; 参数来完成相同的操作。&lt;/p&gt;
&lt;h2 id=&#34;是否可以在多个集群之间共享单个-tsb-实例&#34;&gt;是否可以在多个集群之间共享单个 TSB 实例？&lt;/h2&gt;
&lt;p&gt;是的。单个 TSB &lt;a href=&#34;../../concepts/glossary/&#34; title=&#34;管理平面&#34;&gt;管理平面&lt;/a&gt; 能够管理大量集群。你需要将要关联到同一管理平面的每个集群都加入。此外，请参阅文档 &lt;a href=&#34;../../setup/resource_planning&#34; title=&#34;TSB 资源消耗和容量规划&#34;&gt;TSB 资源消耗和容量规划&lt;/a&gt; 以获取有关随着参与集群数量增加可能需要的资源量的详细信息。&lt;/p&gt;
&lt;p&gt;如果需要为每个集群配置不同的权限或团队，请使用 &lt;a href=&#34;../../concepts/glossary/&#34; title=&#34;工作区&#34;&gt;工作区&lt;/a&gt; 和 &lt;a href=&#34;../../concepts/glossary/&#34; title=&#34;组&#34;&gt;组&lt;/a&gt; 进行逻辑分区。&lt;/p&gt;
&lt;p&gt;请查看我们的安装指南，了解如何将集群加入 &lt;a href=&#34;../../setup/self-managed/onboarding-clusters&#34; title=&#34;TSB&#34;&gt;TSB&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用自定义证书时出现-openssl_verify-失败-错误&#34;&gt;使用自定义证书时出现 &amp;ldquo;OPENSSL_VERIFY 失败&amp;rdquo; 错误。&lt;/h2&gt;
&lt;p&gt;当你使用&lt;a href=&#34;../../operations/vault/istiod-ca&#34; title=&#34;中间 CA&#34;&gt;中间 CA&lt;/a&gt;或自己的证书时，客户端 Envoy 可能会出现 &amp;ldquo;OPENSSL_VERIFY 失败&amp;rdquo; 错误。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;OPENSSL_VERIFY 失败&amp;rdquo; 错误可能由多种原因引起。你应该采取的一般方法是获取证书并验证其内容。请注意，诊断证书本身不在本文档的范围之内，你将不得不自行准备进行此操作。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istioctl&lt;/code&gt; 提供了用于比较工作负载之间的 CA 包的内置命令：&lt;code&gt;istioctl proxy-config rootca-compare pod/&amp;lt;pod-1&amp;gt;.&amp;lt;namespace-1&amp;gt; pod/&amp;lt;pod-2&amp;gt;.&amp;lt;namespace-2&amp;gt;&lt;/code&gt;。该命令自动化了下面的手动过程，并应该是在诊断 OPENSSL_VERIFY 错误时的首选选择。&lt;/p&gt;
&lt;h3 id=&#34;手动检查证书&#34;&gt;手动检查证书&lt;/h3&gt;
&lt;p&gt;要获取目标 Envoy 实例正在使用的证书，可以使用以下示例中的 &lt;code&gt;istioctl&lt;/code&gt;。将 &lt;code&gt;&amp;lt;server-pod-ID&amp;gt;&lt;/code&gt; 替换为你正在调试的 Envoy 实例的适当值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl proxy-config secret &amp;lt;server-pod-ID&amp;gt; -ojson &amp;gt; server-tls.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件 &lt;code&gt;server-tls.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将包含 Istio 互联网 TLS 证书，我们可以从中提取单独的证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat server-tls.json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  jq -r &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;.dynamicActiveSecrets&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.secret.tlsCertificate.certificateChain.inlineBytes&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  base64 --decode &amp;gt; server.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在以下示例中，我们将分离出服务器证书和其余链以进行演示，并使用 &lt;code&gt;openssl verify&lt;/code&gt; 来检查证书。将以下 bash 脚本复制到名为 &lt;code&gt;check-chain.sh&lt;/code&gt; 的文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 用户提供的文件名。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;usercert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 临时文件和清理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;tmpfirst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;mktemp&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;tmpchain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;mktemp&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; cleanup_tmpfiles &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpfirst&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpfirst&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpchain&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpchain&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; cleanup_tmpfiles EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;trap - EXIT; cleanup_tmpfiles; exit -1&amp;#39;&lt;/span&gt; INT PIPE TERM
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;outfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpfirst&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r line
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; *-&lt;span class=&#34;s2&#34;&gt;&amp;#34;BEGIN CERTIFICATE&amp;#34;&lt;/span&gt;-* &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$count&lt;/span&gt; + 1&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;nv&#34;&gt;outfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpchain&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$outfile&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$usercert&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl verify -CAfile &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpchain&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tmpfirst&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后针对你在上一步中获得的文件运行它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash check-chain.sh server.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果在执行上述脚本时验证失败，则证书未正确链接。例如，CA 证书主体可能与工作负载证书的发行者不匹配。&lt;/p&gt;
&lt;h2 id=&#34;istio-cni-如何与像-cilium-或-calico-这样的-kubernetes-cni-协同工作它会替代它们吗&#34;&gt;Istio CNI 如何与像 Cilium 或 Calico 这样的 Kubernetes CNI 协同工作？它会替代它们吗？&lt;/h2&gt;
&lt;p&gt;Istio 的 CNI 不会替代 Cilium 或 Calico 等 CNI 插件，但 Istio 的 CNI 会作为这些插件的附加组件与任何其他 Kubernetes CNI 协同工作（在 CNI 规范的术语中称为 &amp;ldquo;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/master/SPEC#section-2-execution-protocol&#34; title=&#34;链接插件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;链接插件&lt;/a&gt;&amp;quot;）。&lt;/p&gt;
&lt;p&gt;你的主要 CNI 插件将运行并构建你的 Pod 的 Kubernetes 网络，然后 Istio 的 CNI 将运行并重写网络规则以通过 Envoy 捕获流量。Istio 的 CNI 执行与 &lt;code&gt;istio-init&lt;/code&gt; 容器完全相同的代码来重写这些网络规则（请查看 &lt;a href=&#34;https://istio.io/latest/blog/2019/data-plane-setup/#traffic-flow-from-application-container-to-sidecar-proxy&#34; title=&#34;Istio 网站上的此博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 网站上的此博客&lt;/a&gt; 以深入了解流量拦截的工作原理）。&lt;/p&gt;
&lt;p&gt;来自 &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/cni/&#34; title=&#34;官方网站&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方网站&lt;/a&gt; 的解释描述得很好：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况下，Istio 在部署到网格中的 Pod 中注入一个名为 &lt;code&gt;istio-init&lt;/code&gt; 的初始化容器。&lt;code&gt;istio-init&lt;/code&gt; 容器设置了将流量重定向到/从 Istio sidecar 代理的 Pod 网络流量。这需要部署到网格中的用户或服务帐户具有足够的 Kubernetes RBAC 权限以部署具有 &lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt; 能力的 &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container&#34; title=&#34;容器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器&lt;/a&gt;。要求 Istio 用户具备提升的 Kubernetes RBAC 权限对某些组织的安全合规性来说是有问题的。Istio CNI 插件是 &lt;code&gt;istio-init&lt;/code&gt; 容器的替代品，执行相同的网络功能，但无需 Istio 用户启用提升的 Kubernetes RBAC 权限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;如何在-tsb-中启用-istio-cni&#34;&gt;如何在 TSB 中启用 Istio CNI？&lt;/h2&gt;
&lt;p&gt;请查看我们的 &lt;a href=&#34;../../operations/features/istio_cni#enable-istio-cni-in-control-plane&#34; title=&#34;Istio CNI 管理指南&#34;&gt;Istio CNI 管理指南&lt;/a&gt;，了解如何在 TSB 中配置 Istio CNI。&lt;/p&gt;
&lt;h2 id=&#34;如果更改我的-cni-插件我需要在-tsb-或-istio-中进行哪些操作&#34;&gt;如果更改我的 CNI 插件，我需要在 TSB 或 Istio 中进行哪些操作？&lt;/h2&gt;
&lt;p&gt;不需要进行任何操作：Istio 的 CNI 插件会自行配置以在主要插件之后运行。更改你的 CNI 提供程序并重新构建集群会确保 Istio 的 CNI 仍然在主要插件之后运行。&lt;/p&gt;
&lt;h2 id=&#34;配置-aws-内部-elb&#34;&gt;配置 AWS 内部 ELB&lt;/h2&gt;
&lt;p&gt;在某些情况下，你可能希望部署在 EKS 集群中的服务所产生的 AWS 负载均衡器是内部的，而不是暴露给互联网。TSB 运算符 API 为你提供了在每个特定组件的 Kubernetes 服务中设置注释的途径，以便你可以添加 &lt;code&gt;service.beta.kubernetes.io/aws-load-balancer-scheme&lt;/code&gt; 或 &lt;code&gt;service.beta.kubernetes.io/aws-load-balancer-internal&lt;/code&gt; 注释。&lt;/p&gt;
&lt;p&gt;例如，以下代码片段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;frontEnvoy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubeSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service.beta.kubernetes.io/aws-load-balancer-scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;internal&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将配置前端 Envoy（TSB API 和 UI 的主要入口点）的 Kubernetes 服务为内部负载均衡器。类似地，你可以为集群中部署的网关执行相同操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install.tetrate.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IngressGateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bookinfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubeSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service.beta.kubernetes.io/aws-load-balancer-scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;internal    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>

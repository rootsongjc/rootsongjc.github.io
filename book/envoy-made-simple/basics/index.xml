
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Envoy 基础</title>
    <link>https://jimmysong.io/book/envoy-made-simple/basics/</link>
    <description>Recent content in Envoy 基础 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Tue, 06 Aug 2024 14:20:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/envoy-made-simple/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>网络协议概述</title>
      <link>https://jimmysong.io/book/envoy-made-simple/basics/network-protocols/</link>
      <pubDate>Tue, 06 Aug 2024 12:20:00 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/envoy-made-simple/basics/network-protocols/</guid>
      <description>
        
        
        &lt;p&gt;我们将探讨什么是网络协议，为什么使用代理，以及代理如何区分和处理不同的网络协议。我们还将详细介绍 Envoy 支持的各种网络协议，包括 TCP、UDP、HTTP、HTTPS、HTTP/2、HTTP/3、TLS、WebSocket、Proxy Protocol、gRPC 和 QUIC。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/basics/network-protocols/f1.svg&#34; data-img=&#34;/book/envoy-made-simple/basics/network-protocols/f1.svg&#34; alt=&#34;image&#34; data-caption=&#34;网络协议概述&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;网络协议概述&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;什么是网络协议&#34;&gt;什么是网络协议？&lt;/h2&gt;
&lt;p&gt;网络协议是通信双方在网络中进行数据交换所遵循的一组规则和约定。它定义了如何在网络上传输数据、如何建立和管理连接、如何处理错误等。常见的网络协议包括 HTTP、HTTPS、TCP/IP、UDP 等。&lt;/p&gt;
&lt;p&gt;网络协议分为不同的层次，如应用层、传输层、网络层和数据链路层，每一层都有其特定的协议和功能。例如，HTTP 是应用层协议，用于浏览器与 Web 服务器之间的数据传输；TCP 是传输层协议，提供可靠的数据传输服务。&lt;/p&gt;
&lt;h2 id=&#34;envoy-支持的网络协议概述&#34;&gt;Envoy 支持的网络协议概述&lt;/h2&gt;
&lt;p&gt;下表是 Envoy 代理支持的网络协议。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;协议&lt;/th&gt;
          &lt;th&gt;一句话描述&lt;/th&gt;
          &lt;th&gt;诞生背景&lt;/th&gt;
          &lt;th&gt;使用场景&lt;/th&gt;
          &lt;th&gt;性能&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;TCP&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提供可靠、有序、错误检查的双向通信协议&lt;/td&gt;
          &lt;td&gt;1974 年，作为互联网核心协议的一部分&lt;/td&gt;
          &lt;td&gt;文件传输、电子邮件、Web 浏览等&lt;/td&gt;
          &lt;td&gt;可靠，但传输速度较慢，开销较大&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;UDP&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提供快速、简单、不可靠的通信协议&lt;/td&gt;
          &lt;td&gt;1980 年，为了减少开销和提高速度&lt;/td&gt;
          &lt;td&gt;视频流、在线游戏、实时通信&lt;/td&gt;
          &lt;td&gt;快速，低延迟，但不保证数据完整性&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;超文本传输协议，用于传输网页数据&lt;/td&gt;
          &lt;td&gt;1990 年，作为万维网的一部分&lt;/td&gt;
          &lt;td&gt;Web 浏览、API 调用&lt;/td&gt;
          &lt;td&gt;无状态，性能较低&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;TLS&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;传输层安全协议，提供加密通信&lt;/td&gt;
          &lt;td&gt;1999 年，取代 SSL 提供更高安全性&lt;/td&gt;
          &lt;td&gt;安全 Web 浏览、电子邮件、VPN 等&lt;/td&gt;
          &lt;td&gt;高安全性，但增加了加密开销和延迟&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Proxy Protocol&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;在代理服务器和后端服务器之间传递客户端连接信息&lt;/td&gt;
          &lt;td&gt;2010 年，由 HAProxy 开发，旨在解决在复杂网络架构中获取客户端真实 IP 地址的问题&lt;/td&gt;
          &lt;td&gt;负载均衡、反向代理&lt;/td&gt;
          &lt;td&gt;提供连接信息的透明度，但增加了一些开销&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提供持久的双向通信通道，用于实时应用&lt;/td&gt;
          &lt;td&gt;2011 年，为了弥补 HTTP 的实时通信不足&lt;/td&gt;
          &lt;td&gt;实时聊天、在线游戏、实时数据流&lt;/td&gt;
          &lt;td&gt;实时、低延迟，适合高频数据交换&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;QUIC&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;基于 UDP 的传输协议，提供低延迟和高吞吐量&lt;/td&gt;
          &lt;td&gt;2013 年，由 Google 开发，为 HTTP/3 铺路&lt;/td&gt;
          &lt;td&gt;高性能 Web 浏览、实时应用&lt;/td&gt;
          &lt;td&gt;非常高效，低延迟，通过 UDP 传输&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;增强版 HTTP，支持多路复用和头部压缩&lt;/td&gt;
          &lt;td&gt;2015 年，为了提高 Web 性能&lt;/td&gt;
          &lt;td&gt;高性能 Web 浏览、实时应用&lt;/td&gt;
          &lt;td&gt;高效，多路复用，较低的延迟&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;gRPC&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;基于 HTTP/2 的高性能 RPC 框架&lt;/td&gt;
          &lt;td&gt;2015 年，由 Google 开发&lt;/td&gt;
          &lt;td&gt;微服务通信、高性能 API&lt;/td&gt;
          &lt;td&gt;高效，多路复用，支持多种语言&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;HTTP/3&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;基于 QUIC 协议的 HTTP，进一步减少延迟&lt;/td&gt;
          &lt;td&gt;2018 年，为了进一步提升 Web 性能&lt;/td&gt;
          &lt;td&gt;高性能 Web 浏览、实时应用&lt;/td&gt;
          &lt;td&gt;非常高效，低延迟，通过 UDP 传输&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下图展示了 Envoy 支持的网络协议之间的关系。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/basics/network-protocols/1daa0151d3e5d6d8e2585c6241c0b8f1.svg&#34; data-img=&#34;/book/envoy-made-simple/basics/network-protocols/1daa0151d3e5d6d8e2585c6241c0b8f1.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 支持的网络协议之间的关系&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 支持的网络协议之间的关系&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面是对这些协议的简要介绍。&lt;/p&gt;
&lt;h3 id=&#34;tcp&#34;&gt;TCP&lt;/h3&gt;
&lt;p&gt;TCP（Transmission Control Protocol）是传输层协议，提供可靠的数据传输服务。TCP 通过建立连接、数据传输、确认和重传机制，确保数据包按顺序到达目标。Envoy 支持 TCP 协议，用于可靠的流量代理和转发。&lt;/p&gt;
&lt;h3 id=&#34;udp&#34;&gt;UDP&lt;/h3&gt;
&lt;p&gt;UDP（User Datagram Protocol）是传输层协议，不提供可靠性保证。UDP 用于需要快速传输和低延迟的应用，如视频流、实时通信等。Envoy 支持 UDP 协议，可以代理和转发不需要可靠传输的流量。&lt;/p&gt;
&lt;h3 id=&#34;http&#34;&gt;HTTP&lt;/h3&gt;
&lt;p&gt;HTTP（HyperText Transfer Protocol）是用于在 Web 浏览器和服务器之间传输超文本数据的协议。它是无状态的、基于请求 - 响应模型的协议。HTTP/1.1 是目前最广泛使用的版本，但 HTTP/2 和 HTTP/3 提供了更高效的传输机制。&lt;/p&gt;
&lt;h3 id=&#34;https&#34;&gt;HTTPS&lt;/h3&gt;
&lt;p&gt;HTTPS（HyperText Transfer Protocol Secure）是在 HTTP 基础上通过 TLS（传输层安全）协议进行加密传输的安全版本。HTTPS 确保数据在传输过程中被加密，保护数据的机密性和完整性。Envoy 支持配置 TLS 来实现 HTTPS 通信。&lt;/p&gt;
&lt;h3 id=&#34;http2和http3&#34;&gt;HTTP/2和HTTP/3&lt;/h3&gt;
&lt;p&gt;HTTP/2是HTTP协议的改进版本，支持多路复用、头部压缩和服务端推送等特性，提高了传输效率。HTTP/3是基于QUIC协议的最新版本，进一步优化了传输性能。HTTP/3通过UDP实现低延迟和高吞吐量的传输服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP 与 HTTP/2&lt;/strong&gt;：HTTP/2 在 HTTP/1.1 的基础上引入了多路复用和头部压缩，提高了性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP/2与HTTP/3&lt;/strong&gt;：HTTP/3 基于 QUIC 协议，通过 UDP 传输数据，进一步减少了延迟和连接建立时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tls&#34;&gt;TLS&lt;/h3&gt;
&lt;p&gt;TLS（Transport Layer Security）是用于在两个通信应用程序之间提供保密性和数据完整性的协议。TLS 在传输层加密数据，防止窃听和篡改。Envoy 支持配置 TLS 来保护通信数据的安全。&lt;/p&gt;
&lt;h3 id=&#34;websocket&#34;&gt;WebSocket&lt;/h3&gt;
&lt;p&gt;WebSocket 是一种全双工通信协议，允许客户端和服务器之间建立持久连接。它适用于需要频繁数据交换的应用，如实时聊天和在线游戏。Envoy 支持 WebSocket 协议，可以代理和转发 WebSocket 通信。&lt;/p&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    全双工 vs 半双工
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    &lt;p&gt;全双工（Full Duplex）通信模式允许数据在两个设备之间同时双向传输，无需等待对方完成传输。与此不同，半双工（Half Duplex）模式只允许单向传输，任意时刻只能有一个方向的数据流动。尽管现代应用中半双工协议使用较少，但它们在传统设备如无线电通信中仍然重要。&lt;/p&gt;
&lt;p&gt;类似 WebSocket 的全双工协议包括 HTTP/2 和 HTTP/3，支持双向通信并利用 QUIC 的低延迟特性。QUIC 和 SCTP 通过 UDP 和多流机制提高网络效率。XMPP 和 MQTT 适用于即时消息和物联网，AMQP 用于企业级消息传递，而 WebRTC 则支持浏览器中的实时音视频通信。这些协议在各种场景下实现了双向、实时的数据传输。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;WebSocket 在初始握手时使用 HTTP 协议，然后通过升级握手（Upgrade header）将连接切换到 WebSocket 协议，从而在同一连接上支持双向通信。WebSocket 在建立连接后，能够实现低延迟的双向数据传输。&lt;/p&gt;
&lt;h3 id=&#34;proxy-protocol&#34;&gt;Proxy Protocol&lt;/h3&gt;
&lt;p&gt;Proxy Protocol 是一种用于在负载均衡器和后端服务器之间传递客户端连接信息的协议。它允许后端服务器获取客户端的源 IP 地址和端口信息，Envoy 支持 Proxy Protocol，增强了连接信息的透明度。&lt;/p&gt;
&lt;h3 id=&#34;grpc&#34;&gt;gRPC&lt;/h3&gt;
&lt;p&gt;gRPC 是一种基于 HTTP/2 的高性能远程过程调用（RPC）框架，支持多种编程语言。gRPC 使用协议缓冲（Protocol Buffers）作为接口描述语言，具有高效、灵活和跨语言的特点。Envoy 支持 gRPC，可以代理和负载均衡 gRPC 服务。&lt;/p&gt;
&lt;h3 id=&#34;quic&#34;&gt;QUIC&lt;/h3&gt;
&lt;p&gt;QUIC（Quick UDP Internet Connections）是 Google 开发的一种基于 UDP 的传输协议，旨在提高互联网的性能。QUIC 集成了 TLS 加密，提供低延迟和高吞吐量的传输服务。HTTP/3 基于 QUIC 协议，Envoy 支持 QUIC 协议，提升网络传输性能。&lt;/p&gt;
&lt;h2 id=&#34;为什么要使用代理&#34;&gt;为什么要使用代理？&lt;/h2&gt;
&lt;p&gt;代理（Proxy）是位于客户端和服务器之间的中间设备或软件，代理客户端的请求和服务器的响应。使用代理有多个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：代理可以过滤和检查进出网络的数据，保护内部网络免受攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：通过缓存常用数据，减少服务器负载，加快响应速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：将客户端请求分散到多台服务器上，避免单点故障，提高系统可用性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明性&lt;/strong&gt;：隐藏内部网络结构，防止外部用户直接访问内部资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问控制&lt;/strong&gt;：控制用户对特定资源的访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代理如何区分网络协议&#34;&gt;代理如何区分网络协议？&lt;/h2&gt;
&lt;p&gt;代理通过检查和解析&lt;strong&gt;数据包的头部信息&lt;/strong&gt;来区分不同的网络协议。每种协议都有其特定的头部格式和标识符，代理可以根据这些信息判断数据包使用的协议，并进行相应的处理。例如，HTTP 协议的数据包头部包含请求方法、URL 和 HTTP 版本等信息，而 HTTPS 则是通过 TLS 加密的 HTTP。&lt;/p&gt;
&lt;p&gt;Envoy 作为一个高性能代理，支持多种网络协议，并能够智能地解析和处理不同协议的数据包。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hpbn.co&#34; title=&#34;High Performance Browser Networking - hpbn.co&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;High Performance Browser Networking - hpbn.co&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>Envoy 简介</title>
      <link>https://jimmysong.io/book/envoy-made-simple/basics/introduction/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/envoy-made-simple/basics/introduction/</guid>
      <description>
        
        
        &lt;h2 id=&#34;什么是-envoy&#34;&gt;什么是 Envoy？&lt;/h2&gt;
&lt;p&gt;Envoy 是一个高性能的开源云原生代理，最初由 Lyft 开发，并于 2016 年开源。它被广泛应用于微服务架构和服务网格中，作为一个高效的网络代理，提供了丰富的流量管理、负载均衡、监控、路由和安全控制功能。&lt;/p&gt;
&lt;h2 id=&#34;核心功能和特点&#34;&gt;核心功能和特点&lt;/h2&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/basics/introduction/f1.svg&#34; data-img=&#34;/book/envoy-made-simple/basics/introduction/f1.svg&#34; alt=&#34;image&#34; data-caption=&#34;核心功能和特点&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;核心功能和特点&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高性能&lt;/strong&gt;：Envoy 设计用于处理大规模的网络流量，具有高吞吐量和低延迟的特点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态配置&lt;/strong&gt;：支持热重载配置，允许在不重启的情况下更新配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt;：提供细粒度的流量控制，包括路由、重试、故障注入等功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：支持多种负载均衡策略，如轮询、随机、基于权重等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可观测性&lt;/strong&gt;：内置丰富的监控和日志功能，支持分布式追踪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全&lt;/strong&gt;：支持 TLS 和 mTLS，加密传输数据，确保通信安全。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：支持 Lua 脚本和 WebAssembly（Wasm）扩展，可以根据需要定制功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;p&gt;Envoy 广泛应用于以下场景：&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/basics/introduction/f2.svg&#34; data-img=&#34;/book/envoy-made-simple/basics/introduction/f2.svg&#34; alt=&#34;image&#34; data-caption=&#34;应用场景&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;应用场景&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务网格&lt;/strong&gt;：作为服务网格中的数据平面（如 &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;），Envoy 能够处理微服务之间的所有流量，提供负载均衡、流量控制和可观测性功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 网关&lt;/strong&gt;：Envoy 可以作为 API 网关（如 &lt;a href=&#34;https://gateway.envoyproxy.io&#34; title=&#34;Envoy Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt;），处理外部流量进入内部服务，提供安全、路由和速率限制功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边缘代理&lt;/strong&gt;：在边缘网络中，Envoy 可以作为边缘代理，处理来自外部的流量，并将其路由到内部服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反向代理&lt;/strong&gt;：Envoy 可作为高性能的反向代理，处理 HTTPS/TLS 卸载、负载均衡、请求路由等任务，同时提供丰富的可观测性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;诞生背景&#34;&gt;诞生背景&lt;/h2&gt;
&lt;p&gt;Envoy 最初由 Lyft 开发，用于解决其内部微服务架构中存在的各种流量管理和可观测性问题。由于其高性能和丰富的功能，Envoy 很快被广泛应用于其他公司和项目，成为服务网格和云原生应用中的重要组件。2017 年，Envoy 项目加入 CNCF（云原生计算基金会），进一步推动了其在开源社区中的发展和普及。&lt;/p&gt;
&lt;p&gt;欲了解更多信息，请参见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/&#34; title=&#34;Envoy 官方文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 官方文档&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Envoy 的核心功能和特点</title>
      <link>https://jimmysong.io/book/envoy-made-simple/basics/core-features/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/envoy-made-simple/basics/core-features/</guid>
      <description>
        
        
        &lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/basics/core-features/f1.svg&#34; data-img=&#34;/book/envoy-made-simple/basics/core-features/f1.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 的核心功能&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 的核心功能&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;高性能&#34;&gt;高性能&lt;/h2&gt;
&lt;p&gt;Envoy 设计用于处理大规模的网络流量，具有高吞吐量和低延迟的特点。它采用异步 I/O 处理模型，可以高效地处理并发连接，确保在高负载下仍能保持稳定的性能。&lt;/p&gt;
&lt;h2 id=&#34;动态配置&#34;&gt;动态配置&lt;/h2&gt;
&lt;p&gt;Envoy 支持动态配置，允许在不重启的情况下更新配置文件。这使得运维人员可以实时调整系统设置，响应变化的网络条件和业务需求。&lt;/p&gt;
&lt;h2 id=&#34;流量管理&#34;&gt;流量管理&lt;/h2&gt;
&lt;p&gt;Envoy 提供细粒度的流量管理功能，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路由&lt;/strong&gt;：根据请求的属性（如路径、头部信息等）将流量路由到不同的服务或集群。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重试&lt;/strong&gt;：在请求失败时自动重试，以提高请求的成功率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障注入&lt;/strong&gt;：模拟服务故障，测试系统的健壮性和容错能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速率限制&lt;/strong&gt;：限制特定时间内的请求数量，防止滥用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;熔断&lt;/strong&gt;：监控和管理失败的请求数量，当失败率达到阈值时自动熔断，防止系统过载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：将流量分配到多个后端服务，支持多种负载均衡策略，如轮询、随机、基于权重等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量镜像&lt;/strong&gt;：复制实时流量到其他服务进行测试或监控，而不影响生产流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障恢复&lt;/strong&gt;：在后端服务不可用时自动切换到备用服务或返回备用响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;负载均衡&#34;&gt;负载均衡&lt;/h2&gt;
&lt;p&gt;Envoy 支持多种负载均衡策略，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;轮询（Round Robin）&lt;/strong&gt;：将请求依次分配给后端服务，实现均匀分配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机（Random）&lt;/strong&gt;：随机选择一个后端服务来处理请求，分散负载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于权重（Weighted）&lt;/strong&gt;：根据后端服务的权重分配请求，权重高的服务将收到更多请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最少请求数（Least Request）&lt;/strong&gt;：将请求分配给当前处理请求数最少的后端服务，减轻负载高的服务压力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环形哈希（Ring Hash）&lt;/strong&gt;：使用一致性哈希算法将请求分配给后端服务，确保请求的一致性和均衡性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小连接数（Least Connections）&lt;/strong&gt;：将请求分配给当前活跃连接数最少的后端服务，适用于长连接场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自适应请求（Maglev）&lt;/strong&gt;：采用 Maglev 哈希算法实现负载均衡，提供更好的分布一致性和抗故障性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机加权最少请求数（Weighted Least Request）&lt;/strong&gt;：结合权重和最少请求数策略，根据权重分配请求，并优先选择处理请求数较少的服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;可观测性&#34;&gt;可观测性&lt;/h2&gt;
&lt;p&gt;Envoy 内置丰富的监控和日志功能，支持分布式追踪，帮助运维人员了解系统的运行状态。核心功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;监控（Metrics）&lt;/strong&gt;：提供详细的性能指标，如请求数、响应时间、错误率等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志（Logging）&lt;/strong&gt;：记录详细的请求和响应日志，便于问题排查和性能分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;追踪（Tracing）&lt;/strong&gt;：支持分布式追踪，帮助定位跨服务的性能瓶颈和错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安全&#34;&gt;安全&lt;/h2&gt;
&lt;p&gt;Envoy 提供多种安全功能，确保数据传输的安全性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TLS 加密&lt;/strong&gt;：支持传输层安全（TLS），加密数据传输，防止数据被窃听和篡改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mTLS 认证&lt;/strong&gt;：支持双向 TLS 认证（mTLS），确保通信双方的身份验证，提高安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问控制&lt;/strong&gt;：可以配置细粒度的访问控制策略，限制不合法的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;认证和授权&lt;/strong&gt;：支持 JWT（JSON Web Token）和 RBAC 等认证或授权方式，确保请求合法性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部认证&lt;/strong&gt;：支持通过外部认证服务器进行认证，灵活集成各种认证机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;扩展性&#34;&gt;扩展性&lt;/h2&gt;
&lt;p&gt;Envoy 具有高度的扩展性，支持多种扩展方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lua 脚本&lt;/strong&gt;：可以通过 Lua 脚本自定义请求处理逻辑，满足特定的业务需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebAssembly（Wasm）&lt;/strong&gt;：支持 Wasm 扩展，可以在 Envoy 中运行自定义的 Wasm 模块，进一步增强其功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格&#34;&gt;服务网格&lt;/h2&gt;
&lt;p&gt;在 Istio 服务网格中，Envoy 作为边车代理（Sidecar Proxy）部署在每个服务实例旁边，负责处理进出该实例的所有网络流量。它提供了以下关键功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt;：Envoy 可以基于丰富的规则对流量进行路由和控制，支持蓝绿部署、金丝雀发布和流量镜像等场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：Envoy 提供多种负载均衡策略，确保流量均匀分布在服务实例之间，提高系统的可靠性和性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：Envoy 支持 mTLS（双向 TLS）认证，确保微服务间通信的加密和身份验证。此外，它还提供细粒度的访问控制和速率限制功能，防止滥用和攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可观测性&lt;/strong&gt;：Envoy 内置丰富的监控和日志功能，支持分布式追踪，帮助运维人员了解服务间的通信情况和性能瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障恢复&lt;/strong&gt;：Envoy 支持自动重试、断路器和故障注入等机制，增强系统的稳定性和容错能力。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

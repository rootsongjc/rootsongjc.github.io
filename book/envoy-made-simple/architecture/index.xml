
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Envoy 架构</title>
    <link>https://jimmysong.io/book/envoy-made-simple/architecture/</link>
    <description>Recent content in Envoy 架构 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Wed, 07 Aug 2024 00:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/envoy-made-simple/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>Envoy 架构简介</title>
      <link>https://jimmysong.io/book/envoy-made-simple/architecture/overview/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/envoy-made-simple/architecture/overview/</guid>
      <description>
        
        
        &lt;p&gt;本节将介绍 Envoy 架构机器核心组件。&lt;/p&gt;
&lt;h2 id=&#34;部署架构&#34;&gt;部署架构&lt;/h2&gt;
&lt;p&gt;下图展示的是 Envoy 的典型部署架构，Envoy 代理在客户端和上游服务之间充当中间层，提供高效的流量管理、安全控制和监控功能，确保系统的稳定性和性能。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/architecture/overview/1ba41acaa0a308fac4eda8efc2bf89be.svg&#34; data-img=&#34;/book/envoy-made-simple/architecture/overview/1ba41acaa0a308fac4eda8efc2bf89be.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 的部署架构&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 的部署架构&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;简要说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端发送请求&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;客户端（例如浏览器、移动应用或其他服务）发起一个请求，发送到 Envoy 代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Envoy 代理接收请求&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Envoy 代理接收来自客户端的请求，并准备根据配置进行处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求路由&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Envoy 根据预定义的路由规则决定将请求转发到哪个上游集群（服务 1、服务 2 或服务 3）。&lt;/li&gt;
&lt;li&gt;路由决策可以基于请求路径、头部信息等属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求转发到上游集群&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;根据路由决策，Envoy 将请求转发到相应的上游集群中的服务实例（例如，服务 1、服务 2 或服务 3）。&lt;/li&gt;
&lt;li&gt;Envoy 负责负载均衡，将请求均匀地分发到集群中的各个服务实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健康检查和服务发现&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Envoy 定期对上游服务实例进行健康检查，确保请求只发往健康的服务实例。&lt;/li&gt;
&lt;li&gt;通过服务发现机制，Envoy 动态获取上游集群中的服务实例信息，保持最新的服务状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控和数据收集&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Envoy 收集并发送指标、日志和追踪数据到监控系统，用于监控和分析服务的性能和健康状态。&lt;/li&gt;
&lt;li&gt;这些数据帮助运维人员了解系统运行情况，并快速响应和解决问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;认证和授权&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Envoy 集成外部认证授权系统，对请求进行身份验证和访问控制。&lt;/li&gt;
&lt;li&gt;认证授权系统可以是 OAuth、JWT 或其他安全机制，确保请求的合法性和安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态配置管理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;管理平面负责动态配置和管理 Envoy 代理。&lt;/li&gt;
&lt;li&gt;管理平面将配置变更推送到 Envoy 代理，以适应业务需求的变化，确保系统的高可用性和灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/architecture/overview/f1.svg&#34; data-img=&#34;/book/envoy-made-simple/architecture/overview/f1.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 代理请求处理&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 代理请求处理&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;核心组件&#34;&gt;核心组件&lt;/h2&gt;
&lt;p&gt;Envoy 的架构由多个核心组件组成，每个组件都有特定的职责，以确保代理的高效运行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Listener（监听器）&lt;/strong&gt;：监听来自客户端的网络请求，支持多种协议（如 TCP、HTTP）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filter Chains（过滤器链）&lt;/strong&gt;：包含一系列过滤器，用于处理和转换请求和响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cluster（集群）&lt;/strong&gt;：定义后端服务的集合，提供负载均衡和健康检查功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Endpoint（端点）&lt;/strong&gt;：具体的服务实例，作为集群中的成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/architecture/overview/f2.svg&#34; data-img=&#34;/book/envoy-made-simple/architecture/overview/f2.svg&#34; alt=&#34;image&#34; data-caption=&#34;揭开 Envoy 的核心组件&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;揭开 Envoy 的核心组件&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下图展示了 Envoy 核心组件之间的关系。&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/architecture/overview/9e0db315729bb771cd94e23148e77240.svg&#34; data-img=&#34;/book/envoy-made-simple/architecture/overview/9e0db315729bb771cd94e23148e77240.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 的核心组件&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 的核心组件&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;下面是对 Envoy 核心组件详细介绍。&lt;/p&gt;
&lt;h2 id=&#34;listener监听器&#34;&gt;Listener（监听器）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监听器是 Envoy 的入口点，负责监听来自客户端的网络请求。&lt;/li&gt;
&lt;li&gt;支持&lt;a href=&#34;../&#34; title=&#34;多种协议&#34;&gt;多种协议&lt;/a&gt;，能够处理各种类型的网络流量。&lt;/li&gt;
&lt;li&gt;监听器配置了网络地址（IP 地址和端口），用于接收来自客户端的连接请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络监听&lt;/strong&gt;：通过配置的网络地址和端口，接收并解析客户端请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议识别&lt;/strong&gt;：识别请求所使用的协议，并将请求分发到相应的过滤器链进行处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初步处理&lt;/strong&gt;：可以在监听器级别进行一些基本的流量管理和控制，如速率限制和连接管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;filter-chains过滤器链&#34;&gt;Filter Chains（过滤器链）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过滤器链包含一系列按顺序排列的过滤器，用于处理和转换请求和响应。&lt;/li&gt;
&lt;li&gt;每个过滤器在请求和响应的生命周期中都扮演着特定的角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求处理&lt;/strong&gt;：从监听器接收到请求后，过滤器链中的每个过滤器依次对请求进行处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应处理&lt;/strong&gt;：上游服务返回响应后，过滤器链中的每个过滤器依次对响应进行处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;各种过滤器类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP 过滤器&lt;/strong&gt;：用于处理 HTTP 请求和响应，如认证、路由、重试等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络过滤器&lt;/strong&gt;：处理低级别的网络层数据，如 IP 数据包或 TCP 数据流。这些过滤器通常用于执行安全检查、连接管理、协议解析等任务，如 TCP 代理、防火墙功能和数据加密。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP 过滤器&lt;/strong&gt;：用于处理 TCP 连接和数据包，如负载均衡、健康检查等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义过滤器&lt;/strong&gt;：用户可以编写自定义过滤器来实现特定的处理逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-tip-container&#34;&gt;
  
  &lt;div class=&#34;alert-tip-title px-2 py-2&#34;&gt;
    Envoy 中支持的过滤器概述
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-tip px-2&#34;&gt;
    &lt;p&gt;Envoy 代理支持多种类型的过滤器，每种过滤器在网络流量的处理过程中扮演不同的角色。以下列出的 Envoy 支持的各个过滤器。欲了解详情，请见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/filter/filter&#34; title=&#34;Envoy 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 文档&lt;/a&gt;。&lt;/p&gt;
&lt;details class=&#34;spoiler&#34; id=&#34;spoiler-0&#34;&gt;
  &lt;summary&gt;点击查看&lt;/summary&gt;
  &lt;p&gt;&lt;h3 id=&#34;监听器过滤器-listener-filters&#34;&gt;监听器过滤器 (Listener Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP Inspector Filter&lt;/strong&gt;：检测和解析 HTTP 流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Rate Limit Filter&lt;/strong&gt;：在本地对流量进行速率限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Original Dst Filter&lt;/strong&gt;：使用原始目标地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Original Src Filter&lt;/strong&gt;：使用原始源地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proxy Protocol Filter&lt;/strong&gt;：支持 Proxy Protocol，用于传递客户端连接信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS Inspector Filter&lt;/strong&gt;：检测和解析 TLS 流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络过滤器-network-filters&#34;&gt;网络过滤器 (Network Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Client TLS authentication&lt;/strong&gt;：进行客户端 TLS 认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connection limit&lt;/strong&gt;：限制连接数量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Direct response&lt;/strong&gt;：直接响应请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dubbo Proxy&lt;/strong&gt;：支持 Dubbo 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dubbo Proxy Route Configuration&lt;/strong&gt;：配置 Dubbo 路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Echo&lt;/strong&gt;：用于测试，回显请求内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network External Authorization&lt;/strong&gt;：进行外部授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Proxy&lt;/strong&gt;：通用代理过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Proxy Route Configuration&lt;/strong&gt;：配置通用代理路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Golang network filter&lt;/strong&gt;：基于 Golang 的网络过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP connection manager&lt;/strong&gt;：管理 HTTP 连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kafka Broker&lt;/strong&gt;：支持 Kafka 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kafka Mesh&lt;/strong&gt;：支持 Kafka Mesh。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local rate limit&lt;/strong&gt;：在本地对流量进行速率限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mongo proxy&lt;/strong&gt;：支持 MongoDB 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MySQL proxy&lt;/strong&gt;：支持 MySQL 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postgres proxy&lt;/strong&gt;：支持 Postgres 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rate limit&lt;/strong&gt;：进行速率限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RBAC&lt;/strong&gt;：基于角色的访问控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redis Proxy&lt;/strong&gt;：支持 Redis 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RocketMQ Proxy&lt;/strong&gt;：支持 RocketMQ 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rocketmq Proxy Route Configuration&lt;/strong&gt;：配置 RocketMQ 路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set-Filter-State Filter&lt;/strong&gt;：设置过滤器状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sip Proxy&lt;/strong&gt;：支持 SIP 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sip Proxy Route Configuration&lt;/strong&gt;：配置 SIP 路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SNI Cluster Filter&lt;/strong&gt;：基于 SNI 进行集群选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SNI dynamic forward proxy&lt;/strong&gt;：支持 SNI 动态正向代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP Proxy&lt;/strong&gt;：TCP 代理过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Thrift Proxy&lt;/strong&gt;：支持 Thrift 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Thrift Proxy Route Configuration&lt;/strong&gt;：配置 Thrift 路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wasm&lt;/strong&gt;：WebAssembly 过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ZooKeeper proxy&lt;/strong&gt;：支持 ZooKeeper 协议的代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp-监听器过滤器-udp-listener-filters&#34;&gt;UDP 监听器过滤器 (UDP Listener Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DNS Filter&lt;/strong&gt;：支持 DNS 协议的代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP proxy route configuration&lt;/strong&gt;：配置 UDP 路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP proxy&lt;/strong&gt;：UDP 代理过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp-会话过滤器-udp-session-filters&#34;&gt;UDP 会话过滤器 (UDP Session Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Filter state dynamic forward proxy&lt;/strong&gt;：动态正向代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP HTTP Capsule filter&lt;/strong&gt;：支持 UDP HTTP 胶囊协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-过滤器-http-filters&#34;&gt;HTTP 过滤器 (HTTP Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adaptive Concurrency&lt;/strong&gt;：自适应并发控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Admission Control&lt;/strong&gt;：入场控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternate Protocols Cache&lt;/strong&gt;：替代协议缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt;：集成 AWS Lambda。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AwsRequestSigning&lt;/strong&gt;：AWS 请求签名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bandwidth limit&lt;/strong&gt;：带宽限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Basic Auth&lt;/strong&gt;：基本认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Buffer&lt;/strong&gt;：请求缓冲。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP Cache Filter&lt;/strong&gt;：HTTP 缓存过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP CDN-Loop Filter&lt;/strong&gt;：CDN 循环检测过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checksum HTTP filter&lt;/strong&gt;：校验和过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composite&lt;/strong&gt;：组合过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compressor&lt;/strong&gt;：压缩过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connect RPC to gRPC&lt;/strong&gt;：将 RPC 连接桥接到 gRPC。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cors&lt;/strong&gt;：跨域资源共享过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Credential Injector&lt;/strong&gt;：凭据注入过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSRF&lt;/strong&gt;：防跨站请求伪造过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom Response Filter&lt;/strong&gt;：自定义响应过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decompressor&lt;/strong&gt;：解压缩过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic forward proxy&lt;/strong&gt;：动态正向代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamo&lt;/strong&gt;：集成 AWS DynamoDB。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External Authorization&lt;/strong&gt;：外部授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External Processing Filter&lt;/strong&gt;：外部处理过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fault Injection&lt;/strong&gt;：故障注入过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FileSystemBufferFilterConfig&lt;/strong&gt;：文件系统缓冲配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCP authentication&lt;/strong&gt;：谷歌云认证过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Geoip&lt;/strong&gt;：地理位置过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Golang HTTP filter&lt;/strong&gt;：基于 Golang 的 HTTP 过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC Field Extraction&lt;/strong&gt;：gRPC 字段提取。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC HTTP/1.1 Bridge&lt;/strong&gt;：gRPC 到 HTTP/1.1 桥接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC HTTP/1.1 Reverse Bridge&lt;/strong&gt;：HTTP/1.1 到 gRPC 反向桥接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC-JSON transcoder&lt;/strong&gt;：gRPC 到 JSON 转码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC statistics&lt;/strong&gt;：gRPC 统计信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC Web&lt;/strong&gt;：gRPC Web 支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gzip&lt;/strong&gt;：Gzip 压缩过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Header mutation filter configuration&lt;/strong&gt;：头部变更过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Header-To-Metadata Filter&lt;/strong&gt;：头部信息转元数据过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Health check&lt;/strong&gt;：健康检查过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP tagging&lt;/strong&gt;：IP 标记过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Json-To-Metadata Filter&lt;/strong&gt;：JSON 转元数据过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JWT Authentication&lt;/strong&gt;：JWT 认证过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kill Request&lt;/strong&gt;：请求终止过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language&lt;/strong&gt;：语言过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Rate limit&lt;/strong&gt;：本地速率限制过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lua&lt;/strong&gt;：Lua 脚本过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OAuth&lt;/strong&gt;：OAuth 认证过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;On Demand Discovery&lt;/strong&gt;：按需发现过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Original Src Filter&lt;/strong&gt;：使用原始源地址过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rate Limit Quota&lt;/strong&gt;：速率限制配额过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rate limit&lt;/strong&gt;：速率限制过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RBAC&lt;/strong&gt;：基于角色的访问控制过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Router&lt;/strong&gt;：路由过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set-Filter-State Filter&lt;/strong&gt;：设置过滤器状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set-Metadata Filter&lt;/strong&gt;：设置元数据过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Squash&lt;/strong&gt;：调试会话压缩过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stateful session filter&lt;/strong&gt;：有状态会话过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signed HTTP Exchange Filter&lt;/strong&gt;：签名 HTTP 交换过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tap&lt;/strong&gt;：流量捕获过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Thrift-To-Metadata Filter&lt;/strong&gt;：Thrift 到元数据过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UpstreamCodec&lt;/strong&gt;：上游编解码过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wasm&lt;/strong&gt;：WebAssembly 过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dubbo-过滤器-dubbo-filters&#34;&gt;Dubbo 过滤器 (Dubbo Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Router&lt;/strong&gt;：Dubbo 路由过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thrift-过滤器-thrift-filters&#34;&gt;Thrift 过滤器 (Thrift Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Router&lt;/strong&gt;：Thrift 路由过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Header-To-Metadata Filter&lt;/strong&gt;：头部信息转元数据过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Payload-To-Metadata Filter&lt;/strong&gt;：负载转元数据过滤器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rate limit&lt;/strong&gt;：速率限制过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用过滤器-generic-filters&#34;&gt;通用过滤器 (Generic Filters)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Generic Proxy Route Action Configuration&lt;/strong&gt;：通用代理路由动作配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dubbo codec configuration for Generic Proxy&lt;/strong&gt;：通用代理的 Dubbo 编解码配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP1 codec configuration for Generic Proxy&lt;/strong&gt;：通用代理的 HTTP1 编解码配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kafka codec configuration for Generic Proxy&lt;/strong&gt;：通用代理的 Kafka 编解码配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Proxy Route Matcher Configuration&lt;/strong&gt;：通用代理路由匹配器配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Router for generic proxy&lt;/strong&gt;：通用代理的路由过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些过滤器涵盖了 Envoy 中各个层次和不同协议的处理需求，提供了灵活而强大的功能，帮助用户实现多种流量管理和处理场景。&lt;/p&gt;&lt;/p&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;cluster集群&#34;&gt;Cluster（集群）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群表示一组上游服务实例的集合，负责将请求负载均衡地分配给这些实例。&lt;/li&gt;
&lt;li&gt;提供服务发现和健康检查功能，确保请求被分发到可用的服务实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：根据配置的负载均衡策略（如轮询、随机、基于权重等），将请求分发到集群中的服务实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务发现&lt;/strong&gt;：动态发现和更新集群中的服务实例信息，保持最新的服务状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健康检查&lt;/strong&gt;：定期对集群中的服务实例进行健康检查，确保请求只发往健康的实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集群类型&lt;/strong&gt;：支持多种集群类型，如静态集群、DNS 集群和动态集群（如通过 xDS 协议发现的集群）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;endpoint端点&#34;&gt;Endpoint（端点）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;职责&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端点是集群中的具体服务实例，负责实际处理来自客户端的请求。&lt;/li&gt;
&lt;li&gt;每个端点通常对应一个运行中的服务实例或容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求处理&lt;/strong&gt;：接收来自集群负载均衡的请求并进行处理，返回相应的结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健康检查&lt;/strong&gt;：端点定期接受健康检查，以报告其健康状态，确保只接收健康请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态变化&lt;/strong&gt;：随着服务实例的增加或减少，端点列表会动态更新，以反映集群的当前状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
                           
    <item>
      <title>数据流和请求处理</title>
      <link>https://jimmysong.io/book/envoy-made-simple/architecture/data-flow-request-processing/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/envoy-made-simple/architecture/data-flow-request-processing/</guid>
      <description>
        
        
        &lt;p&gt;在本节中，我们将详细介绍 Envoy 中数据流和请求处理的完整流程。理解这一流程有助于更好地配置和优化 Envoy 代理的性能和功能。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/architecture/data-flow-request-processing/f1.svg&#34; data-img=&#34;/book/envoy-made-simple/architecture/data-flow-request-processing/f1.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 请求处理顺序&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 请求处理顺序&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;请求处理流程&#34;&gt;请求处理流程&lt;/h2&gt;
&lt;p&gt;下图展示了 Envoy 中处理 HTTP/TLS 请求的数据流：&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/book/envoy-made-simple/architecture/data-flow-request-processing/b5acfd4838189d187b58b6122062818b.svg&#34; data-img=&#34;/book/envoy-made-simple/architecture/data-flow-request-processing/b5acfd4838189d187b58b6122062818b.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 中处理 HTTP/TLS 请求的数据流&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 中处理 HTTP/TLS 请求的数据流&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Envoy 的数据流程和请求处理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;接收请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listener 接收来自客户端的 TCP 连接或 UDP 数据包。&lt;/li&gt;
&lt;li&gt;执行 Listener 过滤器链，进行初步处理（如 SNI 提取）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过滤和转换&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择合适的网络过滤器链。&lt;/li&gt;
&lt;li&gt;传输套接字（如 TLS）进行解密。&lt;/li&gt;
&lt;li&gt;HTTP 连接管理器处理 HTTP 连接和请求。&lt;/li&gt;
&lt;li&gt;执行 HTTP 过滤器链，进行验证、路由、负载均衡等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;转发请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择上游集群和具体的端点。&lt;/li&gt;
&lt;li&gt;将处理后的请求分发到选定的上游服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理响应&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收来自上游服务的响应。&lt;/li&gt;
&lt;li&gt;HTTP 过滤器再次处理响应。&lt;/li&gt;
&lt;li&gt;进行 HTTP/2 编码（如果适用）。&lt;/li&gt;
&lt;li&gt;传输套接字进行加密（如果使用 TLS）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回响应&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将最终处理后的响应返回给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志和统计&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录访问日志。&lt;/li&gt;
&lt;li&gt;更新相关统计数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;欲了解详细流程，请查看 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/life_of_a_request&#34; title=&#34;Life of a Request&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Life of a Request&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>配置管理</title>
      <link>https://jimmysong.io/book/envoy-made-simple/architecture/configuration/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/envoy-made-simple/architecture/configuration/</guid>
      <description>
        
        
        &lt;p&gt;Envoy 作为一个现代的反向代理和负载均衡器，提供了高度灵活的配置管理机制。这些配置管理功能允许用户根据需要轻松地进行服务发现、动态更新以及复杂的流量管理。Envoy 支持两种主要的配置方法：静态配置和动态配置。&lt;/p&gt;
&lt;h2 id=&#34;静态配置&#34;&gt;静态配置&lt;/h2&gt;
&lt;p&gt;静态配置是在 Envoy 启动时通过配置文件进行加载的。这种方式适用于那些不需要频繁更新的设置，如监听器、集群定义、路由规则等。静态配置的主要优点是简单和稳定，不依赖于外部服务，因此启动过程较快，适合于环境相对固定不变的场景。&lt;/p&gt;
&lt;p&gt;静态配置示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service_a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STRICT_DNS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ROUND_ROBIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service_a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个配置定义了一个监听器和一个服务集群，监听器在端口 10000 上监听所有接口，集群 &lt;code&gt;service_a&lt;/code&gt; 使用 DNS 解析和轮询负载均衡。&lt;/p&gt;
&lt;h2 id=&#34;动态配置&#34;&gt;动态配置&lt;/h2&gt;
&lt;p&gt;Envoy 支持动态配置，无需重启进程即可更新设置。配置可以通过文件从磁盘或网络动态加载，采用所谓的&lt;strong&gt;发现服务 API&lt;/strong&gt;（统称为 &lt;strong&gt;xDS&lt;/strong&gt;）。通过 xDS，Envoy 从实现这些 API 的外部 gRPC/REST 服务（称为 &lt;strong&gt;控制平面&lt;/strong&gt;）获取配置。如果使用本地文件，则无需控制平面。&lt;/p&gt;
&lt;p&gt;下表概述了 Envoy 提供的各种发现服务：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;发现服务名称&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;监听器发现服务（LDS）&lt;/td&gt;
          &lt;td&gt;动态发现监听器及其过滤器栈，引用 HTTP 过滤器和 RDS。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;扩展配置发现服务（ECDS）&lt;/td&gt;
          &lt;td&gt;独立于监听器动态获取扩展配置，如 HTTP 过滤器配置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;路由发现服务（RDS）&lt;/td&gt;
          &lt;td&gt;动态发现整个 HTTP 路由配置，结合 EDS 和 CDS 实现复杂路由结构。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;虚拟主机发现服务（VHDS）&lt;/td&gt;
          &lt;td&gt;针对大量虚拟主机的单独动态请求功能。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;宽泛路由发现服务（SRDS）&lt;/td&gt;
          &lt;td&gt;将大型路由表分解成多个部分的功能。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;集群发现服务（CDS）&lt;/td&gt;
          &lt;td&gt;动态发现上游集群并优雅处理集群的添加、更新或删除。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;端点发现服务（EDS）&lt;/td&gt;
          &lt;td&gt;发现上游集群的成员。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;秘密发现服务（SDS）&lt;/td&gt;
          &lt;td&gt;发现用于监听器的秘密（如证书和密钥），配置证书验证逻辑。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;运行时发现服务（RTDS）&lt;/td&gt;
          &lt;td&gt;动态地发现运行时层。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;聚合发现服务（ADS）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表中的发现服务是独立的，有不同的 gRPC/REST 服务名称。使用聚合发现服务（ADS），我们可以使用一个单一的 gRPC 服务，在一个 gRPC 流中支持所有的资源类型（监听器、路由、集群&amp;hellip;）。ADS 还能确保不同资源的更新顺序正确。请注意，ADS 只支持 gRPC。如果没有 ADS，我们就需要协调其他 gRPC 流来实现正确的更新顺序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;增量  xDS（Delta xDS）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每次我们发送资源更新时，我们必须包括所有的资源。例如，每次 RDS 更新必须包含每条路由。如果我们不包括一个路由，Envoy 会认为该路由已被删除。这样做更新会导致很高的带宽和计算成本，特别是当有大量的资源在网络上被发送时。Envoy 支持 xDS 的 delta 变体，这是一个 gRPC 接口，我们可以只包括我们想添加 / 删除 / 更新的资源，以改善这种情况。&lt;/p&gt;
&lt;p&gt;动态配置示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;dynamic_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个配置启用了 LDS 和 CDS 的动态发现，使用 ADS（聚合发现服务）作为单一的配置点来管理所有的 xDS 配置更新。&lt;/p&gt;
&lt;h3 id=&#34;来自文件系统的动态配置&#34;&gt;来自文件系统的动态配置&lt;/h3&gt;
&lt;p&gt;Envoy 可通过文件系统直接读取动态配置。在配置中指定 &lt;code&gt;node&lt;/code&gt; 信息和 &lt;code&gt;dynamic_resources&lt;/code&gt;，如下示例所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;some-id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dynamic_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/envoy/lds.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/envoy/cds.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此配置允许 Envoy 在不重启的情况下，从指定文件路径动态加载监听器和集群配置。&lt;/p&gt;
&lt;h3 id=&#34;来自控制平面的动态配置&#34;&gt;来自控制平面的动态配置&lt;/h3&gt;
&lt;p&gt;控制平面提供了一个更复杂的动态配置方法。我们需要创建并实现 xDS 服务接口的控制平面。配置示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;dynamic_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STATIC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xds_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9090&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此配置通过 gRPC 将控制平面与 Envoy 实例连接，实现集中式动态配置管理。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

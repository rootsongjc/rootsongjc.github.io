<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - 云原生|开源|社区 – 图书</title>
    <link>https://jimmysong.io/book/</link>
    <description>Recent content in 图书 on Jimmy Song - 云原生|开源|社区</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright &amp;copy; 2017-2021 Jimmy Song 保留所有权利</copyright>
    <lastBuildDate>Sun, 06 Feb 2022 10:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>OpenTelemetry 可观测性的未来</title>
      <link>https://jimmysong.io/book/opentelemetry-obervability/</link>
      <pubDate>Sun, 06 Feb 2022 10:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/opentelemetry-obervability/</guid>
      <description>
        
        
        &lt;p&gt;本报告译自 O&#39;Reilly 出品的 &lt;a href=&#34;https://www.oreilly.com/library/view/the-future-of/9781098118433/&#34;&gt;The Future of Observablity with OpeTelemetry&lt;/a&gt;，作者 Ted Young，译者 &lt;a href=&#34;https://jimmysong.io&#34;&gt;Jimmy Song&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenTelemetry 如何满足库作者、应用程序拥有者、运维和响应者的需求&lt;/li&gt;
&lt;li&gt;应用程序的不同角色如何围绕 OpenTelemetry 来协同和独立工作&lt;/li&gt;
&lt;li&gt;关于在组织中采用和管理 OpenTelemetry 的实用建议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何阅读本书&#34;&gt;如何阅读本书&lt;/h2&gt;
&lt;p&gt;您可以使用以下方式阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/opentelemetry-obervability&#34;&gt;在线阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/opentelemetry-obervability/&#34;&gt;下载 PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;Ted Young 是 OpenTelemetry 项目的联合创始人之一。在过去的二十年里，他设计并建立了各种大规模的分布式系统，包括可视化 FX 管道和容器调度系统。他目前在 Lightstep 公司担任开发者教育总监，住在俄勒冈州波特兰的一个小农场里。&lt;/p&gt;
&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;您可以使用&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34;&gt;署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0)&lt;/a&gt;  协议共享。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes 加固指南</title>
      <link>https://jimmysong.io/book/kubernetes-hardening-guidance/</link>
      <pubDate>Sun, 08 Aug 2021 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-hardening-guidance/</guid>
      <description>
        
        
        &lt;p&gt;近日美国国家安全局（NSA）和网络安全与基础设施安全署（CISA）发布了一份网络安全技术报告 &lt;em&gt;Kubernetes Hardening Guidance&lt;/em&gt;（&lt;a href=&#34;https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF&#34;&gt;查看英文原版 PDF&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;Jimmy 翻译的《Kubernetes 加固指南》（或译作《Kubernetes 强化指南》）中文版，&lt;a href=&#34;https://jimmysong.io/kubernetes-hardening-guidance&#34;&gt;点击在线阅读&lt;/a&gt;，如您发现错误，欢迎在 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-hardening-guidance&#34;&gt;GitHub&lt;/a&gt; 上提交勘误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-hardening-guidance/cover.jpg&#34; alt=&#34;《Kubernetes 加固指南》或（《Kubernetes 强化指南》中文版封面&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes Handbook</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/</link>
      <pubDate>Fri, 09 Apr 2021 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/</guid>
      <description>
        
        
        &lt;h3 id=&#34;kubernetes-handbookkubernetes中文指南云原生应用架构实践手册&#34;&gt;Kubernetes Handbook——Kubernetes中文指南/云原生应用架构实践手册&lt;/h3&gt;
&lt;p&gt;本书起始于2017年3月，记录了本人从零开始学习和使用Kubernetes的心路历程，着重于经验分享和总结，同时也会有相关的概念解析，希望能够帮助大家少踩坑，少走弯路，还会指引大家关注Kubernetes生态周边，如微服务构建、DevOps、大数据应用、服务网格（Service Mesh）、云原生等领域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;kubernetes-handbook.jpg&#34; alt=&#34;Kubernetes Handbook 封面 作者 Jimmy Song&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;开始之前&#34;&gt;开始之前&lt;/h3&gt;
&lt;p&gt;在阅读本书之前希望您掌握以下知识和准备以下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 操作系统原理&lt;/li&gt;
&lt;li&gt;Linux 常用命令&lt;/li&gt;
&lt;li&gt;Docker 容器原理及基本操作&lt;/li&gt;
&lt;li&gt;一台可以上网的电脑，Mac/Windows/Linux 皆可&lt;/li&gt;
&lt;li&gt;安装 Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;本书主题&#34;&gt;本书主题&lt;/h3&gt;
&lt;p&gt;本书的主题不局限于Kubernetes，还包括以下几大主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云原生开源组件&lt;/li&gt;
&lt;li&gt;云原生应用与微服务架构&lt;/li&gt;
&lt;li&gt;基于Kubernetes的Service Mesh架构&lt;/li&gt;
&lt;li&gt;Kubernetes与微服务结合实践&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;起初写作本书时，安装的所有组件、所用示例和操作等皆基于 &lt;strong&gt;Kubernetes 1.6+&lt;/strong&gt; 版本，同时我们也将密切关注Kubernetes的版本更新，随着它的版本更新升级，本书中的Kubernetes版本和示例也将随之更新。&lt;/p&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;
&lt;p&gt;您可以通过以下方式使用本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook&#34;&gt;GitBook 在线浏览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/releases&#34;&gt;下载本书的发行版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;按照&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/blob/master/CODE_OF_CONDUCT.md&#34;&gt;说明&lt;/a&gt;自行编译成离线版本&lt;/li&gt;
&lt;li&gt;Fork 一份添加你自己的笔记自行维护，有余力者可以一起参与进来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：本书中的 Service Mesh 相关内容已不再维护，请转至 &lt;a href=&#34;https://www.servicemesher.com/istio-handbook&#34;&gt;istio-handbook&lt;/a&gt; 浏览。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;
&lt;p&gt;如果您想要学习Kubernetes和云原生应用架构但是又不想自己从头开始搭建和配置一个集群，那么可以直接使用&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt;项目直接在本地部署一个3节点的分布式集群及其他如Heapster、EFK、Istio等可选组件，或者使用更加轻量级的&lt;a href=&#34;https://github.com/rootsongjc/cloud-native-sandbox&#34;&gt;cloud-native-sandbox&lt;/a&gt;在个人电脑上使用Docker运行单节点的Kubernetes、Istio等组件。&lt;/p&gt;
&lt;h2 id=&#34;贡献与致谢&#34;&gt;贡献与致谢&lt;/h2&gt;
&lt;p&gt;感谢大家对本书做出的贡献！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/graphs/contributors&#34;&gt;查看贡献者列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/blob/master/CONTRIBUTING.md&#34;&gt;查看如何贡献&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/blob/master/CODE_OF_CONDUCT.md&#34;&gt;查看文档的组织结构与使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Quarkus 实战</title>
      <link>https://jimmysong.io/book/quarkus-cookbook/</link>
      <pubDate>Wed, 31 Mar 2021 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/quarkus-cookbook/</guid>
      <description>
        
        
        &lt;p&gt;2021 年 3 月，《Quarkus 实战——专为 Kubernetes 而优化的 Java 解决方案》，已经由机械工业出版社出版上市，可点击查看详情&lt;a href=&#34;https://item.jd.com/10028088987963.html&#34;&gt;购买&lt;/a&gt;，下面是本书封面及封底。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;quarkus-cookbook.jpg&#34; alt=&#34;Quarkus cookbook 实战&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;译者序&#34;&gt;译者序&lt;/h2&gt;
&lt;p&gt;Quarkus 是一款有别于传统 Java 架构的新技术框架，它是建立在我们熟知的技术栈上，使用了诸多成熟的技术，如 JPA，JAX-RS、Eclipse Vert.x、Eclipse MicroProfile 和 CDI 等，并将之和 Kubernetes 紧密融合在一起。用户可以借助 Kubernetes 的高效的调度运维能力，最大限度地节约资源。&lt;/p&gt;
&lt;p&gt;云原生的星星之火，自社区 Kubernetes 爆红之后，变成燎原之势。云原生相关的技术如雨后春笋般涌出。刘岩，宋净超和我都是云原生社区的成员，也钟爱布道各种相关技术，是这一领域的狂热爱好者。我们共同的爱好之一，就是时刻关注有好的国外技术或者成熟技术的优秀书籍发布。&lt;/p&gt;
&lt;p&gt;在这一过程中，我们机缘巧合地发现了这本书，恰好这本书在国内还没有进行翻译，满怀热情的我们就此踏上了研究 Quarkus 之旅。&lt;/p&gt;
&lt;p&gt;这本采用十分简单的抛出问题，提出解决方案，和引发讨论的方式，将 Quarkus 的技术点描绘的细致透彻。通过本书，用户可以自学相关内容，借助 Quarkus，提高 Java 相关研发的工作效率，让你在快节奏的微服务构建和基于云的应用程序开发领域立于不败之地。&lt;/p&gt;
&lt;p&gt;在整个翻译过程中，我们得到华章出版社和李忠明编辑的全力帮助，在此表示衷心感谢。&lt;/p&gt;
&lt;p&gt;最后，感谢大家有缘阅读到此书，希望我们三人的绵薄之力可以帮助到崇尚云原生技术的你，在 Quarkus 的技术道路上，能够享受到和我们一样的欣喜。&lt;/p&gt;
&lt;p&gt;译者：张晓宇、刘岩、宋净超&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;quarkus.jpg&#34; alt=&#34;Quarkus&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>云原生模式</title>
      <link>https://jimmysong.io/book/cloud-native-patterns/</link>
      <pubDate>Sun, 09 Aug 2020 08:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cloud-native-patterns/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://jimmysong.io/images/books/cloud-native-patterns-jimmysong.jpg&#34; alt=&#34;云原生模式，张若飞，宋净超译，电子工业出版社出版&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们在讨论云原生时究竟在讨论什么？这些年来我一直在思索这个问题，大家的观点可能不尽相同。三年前从我翻译了第一本云原生领域书籍开始，陆续参与翻译和创作了一系列云原生作品，同时通过对云原生领域的开源项目、社区、基金会、应用云化过程的参与和观察，我得出了下面的结论：云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。云原生是云计算适应社会分工的必然结果，将系统资源、底层基础设施和应用编排交由云平台管理，让开发者专注于业务逻辑，这不正是云计算长久以来孜孜以求的吗？云原生应用追求的是快速构建高容错性、弹性的分布式应用，追求的极致的研发效率和友好的上线与运维体验，随云云原生的理念应运而生，它们天生适合部署在云上，可以最大限度利用云计算带来的红利。&lt;/p&gt;
&lt;p&gt;在此之前我曾翻译过几本云原生主题的图书，其中&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34;&gt;《Cloud Native Go》&lt;/a&gt;的作者 Kevin Hoffman，&lt;a href=&#34;https://jimmysong.io/book/cloud-native-java/&#34;&gt;《云原生 Java》&lt;/a&gt;的作者 Josh Long，他们都是来自 Pivotal 或曾在 Pivotal 工作多年，当看到此书时，我惊奇的发现，作者 Cornelia Davis 同样来自这家公司，Pivotal 真可谓是云原生的黄埔军校，此书的内容跟以往的云原生书籍有所不同，对于模式的梳理标新立异，因此我立马联系了电子工业出版社的张春雨编辑，经他了解到张若飞正在翻译此书，此前我已与他合作翻译了《云原生 Java》，本书算是我跟他的第二次合作，他翻译图书时的精准和高效着实让我佩服，我们各自翻译了本书一半的内容。
人人都在讨论云原生，但是究竟如何实现却莫衷一是。本书列举了构建云原生应用的 12 种模式，主要关注的是云原生应用的数据、服务与交互，即应用层面的设计模式，这些模式穿插于本书的第二部分各个章节中，基本覆盖了云原生应用的各个方面，并将理论结合实践，带领读者使用 Java 来实现一个云原生应用。&lt;/p&gt;
&lt;p&gt;同时还要感谢&lt;a href=&#34;https://cloudnative.to&#34;&gt;云原生社区&lt;/a&gt;的成员及志愿者们，对于云原生在中国的发展做出的贡献，你们的鼓励和支持是在云原生领域不断努力和探索的动力。本书在翻译过程中难免有一些纰漏，还望读者指正。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Serverless Handbook</title>
      <link>https://jimmysong.io/book/serverless-handbook/</link>
      <pubDate>Mon, 21 Oct 2019 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/serverless-handbook/</guid>
      <description>
        
        
        &lt;h3 id=&#34;serverless-handbook无服务架构实践手册&#34;&gt;Serverless Handbook——无服务架构实践手册&lt;/h3&gt;
&lt;p&gt;Serverless（无服务器架构）是指服务端逻辑由开发者实现，应用运行在无状态的计算容器中，由事件触发，完全被第三方管理，其业务层面的状态则存储在数据库或其他介质中。&lt;/p&gt;
&lt;p&gt;Serverless 是云原生技术发展的高级阶段，可以使开发者更聚焦在业务逻辑，而减少对基础架构的关注。&lt;/p&gt;
&lt;h3 id=&#34;关于本书&#34;&gt;关于本书&lt;/h3&gt;
&lt;p&gt;本书是本人学习和实践 Serverless 过程中所整理的资料，目前主要关注的 Serverless 开源项目是 &lt;a href=&#34;https://github.com/knative&#34;&gt;Knative&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;
&lt;p&gt;您可以通过以下方式使用本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/serverless-handbook&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/serverless-handbook&#34;&gt;GitBook 在线浏览&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>云原生基础架构</title>
      <link>https://jimmysong.io/book/cloud-native-infrastructure/</link>
      <pubDate>Mon, 21 Oct 2019 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cloud-native-infrastructure/</guid>
      <description>
        
        
        &lt;p&gt;本书为 &lt;em&gt;Cloud Native Infrastructure&lt;/em&gt; 中文版，作者 &lt;em&gt;Justin Garrison&lt;/em&gt; 和 &lt;em&gt;Kris Nova&lt;/em&gt; ，英文版发行于 2017 年 11 月，已可以在网上免费获得，本书是关于创建和管理基础架构，以适用于云原生应用全生命周期管理的模式和实践。&lt;/p&gt;
&lt;p&gt;阅读完这本书后，您将会有如下收获：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解为什么说云原生基础架构是高效运行云原生应用所必须的&lt;/li&gt;
&lt;li&gt;根据准则来决定您的业务何时以及是否应该采用云原生&lt;/li&gt;
&lt;li&gt;了解部署和管理基础架构和应用程序的模式&lt;/li&gt;
&lt;li&gt;设计测试以证明您的基础架构可以按预期工作，即使在各种边缘情况下也是如此&lt;/li&gt;
&lt;li&gt;了解如何以策略即代码的方式保护基础架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;
&lt;p&gt;您可以通过以下方式使用本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/cloud-native-infra&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/cloud-native-infra/&#34;&gt;在线阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/cloud-native-infrastructure/9781491984291/&#34;&gt;英文原版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;license&#34;&gt;License&lt;/h3&gt;
&lt;p&gt;本书英文版版权属于 O’Reilly，中文版版权归属于机械工业出版，基于&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34;&gt;署名-非商业性使用-相同方式共享 4.0（CC BY-NC-SA 4.0）&lt;/a&gt;分享，本书为本人自行翻译，目的在于学习和巩固云原生知识，如有需要请&lt;a href=&#34;https://item.jd.com/12432007.html&#34;&gt;购买纸质书&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Google 工程实践</title>
      <link>https://jimmysong.io/book/google-engineering-practices/</link>
      <pubDate>Mon, 30 Sep 2019 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/google-engineering-practices/</guid>
      <description>
        
        
        &lt;p&gt;Google 有许多通用工程实践，几乎涵盖所有语言和项目。此文档为长期积累的最佳实践，是集体经验的结晶。我们尽可能地将其公之于众，您的组织和开源项目也会从中受益。&lt;/p&gt;
&lt;p&gt;当前包含以下文档：&lt;/p&gt;
&lt;p&gt;Google 代码审查指南，实则两套指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/eng-practices/docs/review/reviewer&#34;&gt;代码审查者指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/eng-practices/docs/review/developer&#34;&gt;代码开发者指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;译者序&#34;&gt;译者序&lt;/h3&gt;
&lt;p&gt;此仓库翻译自 &lt;a href=&#34;https://github.com/google/eng-practices&#34;&gt;google/eng-practices&lt;/a&gt;，目前为止的主要内容为 Google 总结的如何进行 &lt;strong&gt;Code Review（代码审查）&lt;/strong&gt; 指南，根据原 Github 仓库的标题判断以后会追加更多 Google 工程实践的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本文档的 &lt;a href=&#34;https://github.com/rootsongjc/eng-practices&#34;&gt;Github 地址&lt;/a&gt;，点击页面底部的 &lt;code&gt;Edit this page&lt;/code&gt; 链接可以编辑页面。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eng-practices/eng-practices&#34;&gt;其他语言的版本&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;感谢 &lt;a href=&#34;https://github.com/life1347&#34;&gt;Ta-Ching Chen&lt;/a&gt; 的审阅。&lt;/li&gt;
&lt;li&gt;译者：&lt;a href=&#34;https://jimmysong.io/&#34;&gt;Jimmy Song&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本网站使用 &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 构建。&lt;/li&gt;
&lt;li&gt;本网站使用 &lt;a href=&#34;https://github.com/alex-shpak/hugo-book&#34;&gt;hugo-book&lt;/a&gt; 主题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;license&#34;&gt;License&lt;/h3&gt;
&lt;p&gt;本项目中的文档适用于 &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;CC-By 3.0&lt;/a&gt; 许可证，该许可证鼓励您共享这些文档。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>未来架构</title>
      <link>https://jimmysong.io/book/future-architecture/</link>
      <pubDate>Mon, 01 Apr 2019 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/future-architecture/</guid>
      <description>
        
        
        &lt;p&gt;这本书的第一作者是张亮，现就职于京东金融，为了丰富全书的内容，张亮要求了圈内的好友吴晟、敖小剑和我，共同创作了这本宏大命题的《未来架构》，下面引述的他介绍的成书原由。&lt;/p&gt;
&lt;h3 id=&#34;成书缘由&#34;&gt;成书缘由&lt;/h3&gt;
&lt;p&gt;身处互联网行业的我们一向处在变革的最前端，受到世界浪潮的洗礼，不停歇地追赶着这一波又一波的技术潮流，才不会落在时代脚步之后。特别是近几年来，互联网架构不断演化，经历了从集中式架构到分布式架构，再到云原生架构的过程。云原生因能解决传统应用升级缓慢、架构臃肿、不能快速迭代等问题而逐渐成为这个时代舞台的主角。&lt;/p&gt;
&lt;p&gt;身处在这个变化浪潮中，我看着它改变着互联网架构的航行方向，并给越来越多的公司和个人带来新的思想和发展，也用我这些年走过的路、积累的经验、沉淀的眼界去学习它、读懂它，并让它融入我的知识体系网，来更新大脑里那张探索不断、充满指南针意义的架构地图。&lt;/p&gt;
&lt;p&gt;2017、2018年，我与这些变化同进同退，让Elastic-Job、&lt;a href=&#34;https://github.com/sharding-sphere&#34;&gt;Sharding-Sphere&lt;/a&gt;成为业界里大家认可的项目、让所负责的开源项目开始走向国际化、也认识了更多的良师益友……这种种的经历和发展，触动我开始将所闻、所见、所知、所感的珠玑落到了笔尖，串联成了这本书：《未来架构——从服务化到云原生》。&lt;/p&gt;
&lt;p&gt;这本书里有你想认识的分布式、服务化、服务网格、容器、编排治理、云原生、云数据库……&lt;/p&gt;
&lt;p&gt;这本书里既有我多年深思熟虑的见解和沉淀良久的经验，也有我弃笔又拾笔的挣扎，因为我需要让书的内容对读者负责……&lt;/p&gt;
&lt;p&gt;这本书里更有这些资深大咖的精彩章节叙述：Apache孵化器项目SkyWalking创始人&amp;amp;APM专家吴晟、CNCF Ambassador&amp;amp;云原生布道师&amp;amp;云原生社区创始人&lt;a href=&#34;https://jimmysong.io/&#34;&gt;宋净超&lt;/a&gt;、Service Mesh布道师&lt;a href=&#34;https://skyao.io/&#34;&gt;敖小剑&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第1章 云原生&lt;/li&gt;
&lt;li&gt;第2章 远程通信&lt;/li&gt;
&lt;li&gt;第3章 配置&lt;/li&gt;
&lt;li&gt;第4章 服务治理&lt;/li&gt;
&lt;li&gt;第5章 观察分布式服务&lt;/li&gt;
&lt;li&gt;第6章 侵入式服务治理方案&lt;/li&gt;
&lt;li&gt;第7章 云原生生态的基石Kubernetes&lt;/li&gt;
&lt;li&gt;第8章 跨语言服务治理方案Service Mesh&lt;/li&gt;
&lt;li&gt;第9章 云原生数据架构&lt;/li&gt;
&lt;li&gt;第10章 分布式数据库中间件生态圈ShardingSphere&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;寄托期翼&#34;&gt;寄托期翼&lt;/h3&gt;
&lt;p&gt;书的封页是张亮老师选择的老特拉福德球场前矗立的曼联Holy Trinity雕像作为背景图。&lt;/p&gt;
&lt;p&gt;1958年2月6日，曼联队在南斯拉夫参加欧冠杯获得半决赛权后，回程途中遭遇慕尼黑空难，曼联战队瞬间消失在夜空。为了曼联的复兴，幸存下来的曼联队的主帅马特·巴斯比强忍悲痛，用血泪和汗水重建曼联。1968年5月29日，在慕尼黑空难整整10年后，巴斯比带领他的新战队终于捧起了欧洲冠军杯，告慰了那些故去的亡魂！这座Holy Trinity雕像变成了永恒的纪念！&lt;/p&gt;
&lt;p&gt;信仰、永不言弃、坚持不懈、创造奇迹、浴火重生…，是我从这座雕塑中感受到的力量。每个人的一生一定都会经历高峰和低谷，见过山川和沙漠，也希望这本书不仅仅能为大家带来互联网架构的干货知识，也能寄托我对大家的祝福：希望在这十万长征路上正在不懈拼搏的你，能够拥有自己的信仰和希望，即使要途径无数沙漠和海洋，也能在经历千帆后柳暗花明！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Cloud Native Java</title>
      <link>https://jimmysong.io/book/cloud-native-java/</link>
      <pubDate>Sun, 01 Jul 2018 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cloud-native-java/</guid>
      <description>
        
        
        &lt;p&gt;这是我翻译的第三本Cloud Native技术书，前两本分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34;&gt;Cloud Native Go中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/book/cloud-native-python/&#34;&gt;Cloud Native Python中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/images/books/jimmy-song-with-josh-long.jpg&#34; alt=&#34;Jimmy Song with Josh Long&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;照片拍摄于 2018 年 11 月 3 日，北京&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;本书介绍&#34;&gt;本书介绍&lt;/h2&gt;
&lt;p&gt;传统企业与如亚马逊、Netflix和Etsy这类企业之间的区别是什么？这些公司有完善云原生开发方法，这些方法使得他们能够保持优势并领先于竞争对手。本实践指南向Java/JVM开发人员展示如何使用Spring Boot、Spring Cloud和Cloud Foundry更快更好得构建软件。&lt;/p&gt;
&lt;p&gt;很多组织都已踏足云计算、测试驱动开发、微服务与持续集成和交付领域。本书作者Josh Long和Kenny Bastani将带您深入研究这些工具和方法，并帮助您将传统应用程序转变为真正的云原生应用程序。&lt;/p&gt;
&lt;p&gt;本书中包含以下四大部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基础知识&lt;/strong&gt;：了解云原生思维背后的动机；配置和测试Spring Boot应用程序；将您的传统应用程序迁移至云端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微服务&lt;/strong&gt;：使用Spring构建HTTP和RESTful服务；在分布式系统中路由请求；建立更接近数据的边缘服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据整合&lt;/strong&gt;：使用Spring Data管理数据，并将分布式服务与Spring支持的事件驱动的，以消息传递为中心的架构集成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生产&lt;/strong&gt;：让您的系统可观测；使用服务代理来连接有状态的服务；了解持续交付背后的重要思想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您正在构建云原生应用程序，这本书将是使用Java生态系统的基本指南。本书中包含了所有内容——构建弹性服务、管理数据流（通过REST和异步事件）、测试、部署和可观察性的关键任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——Daniel Bryant&lt;/strong&gt;，SpectoLabs的软件开发者和CTO&lt;/p&gt;
&lt;p&gt;我预测无论是刚开始云原生之旅还是已经接近云原生的目标，所有参与其中的人都将从这本云原生Java的洞察和经验中受益。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——Dava Syer博士&lt;/strong&gt;，Spring框架的贡献者，Spring Boot和Spring Cloud的贡献者和联合创始人&lt;/p&gt;
&lt;h2 id=&#34;作者信息&#34;&gt;作者信息&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Josh Long&lt;/strong&gt;是一名Spring布道师，同时也是InfoQ.com的Java queue编辑，以及包括Spring Recipes第二版（Apress出版社出版）在内的多本书籍的主要作者。Josh在许多国际行业会议上发表过演讲，包括TheServiceSide Java Symposium、SpringOne、OSCON、JavaZone、Devoxx、Java2Days等。当他没在编写SpringSource的代码的时候，不是泡在Java用户组就是在咖啡店里喝咖啡。Josh喜欢能够推动技术发展的解决方案。他的兴趣包括可扩展性、BPM、网格计算、移动计算和所谓的“智能”系统等。您可以在&lt;a href=&#34;http://blog.springsource.org/&#34;&gt;http://blog.springsource.org&lt;/a&gt;或&lt;a href=&#34;http://joshlong.com/&#34;&gt;http://joshlong.com&lt;/a&gt;上浏览他的博客。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kenny Bastani&lt;/strong&gt;是Pivotal的Spring布道师。作为一名开源贡献者和博客作者，Kenny关注图数据库、微服务等，并喜欢吸引一群充满热情的软件开发人员。Kenny还是OSCON、SpringOne Platform和GOTO等行业会议的常客。他维护了一个关于软件架构的&lt;a href=&#34;http://kennybastani.com/&#34;&gt;个人博客&lt;/a&gt;，并提供用于构建事件驱动的微服务和无服务器架构的教程和开源参考示例。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;序言（James Watters） xvii&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序言（Rod Johnson） xix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言 xxi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第Ⅰ部分　基础知识&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1 章　云原生应用程序 3&lt;/li&gt;
&lt;li&gt;第2 章　训练营：Spring Boot 和Cloud Foundry 21&lt;/li&gt;
&lt;li&gt;第3 章　符合十二要素程序风格的配置 67&lt;/li&gt;
&lt;li&gt;第４章　测试 85&lt;/li&gt;
&lt;li&gt;第5 章　迁移遗留的应用程序 115&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第Ⅱ部分　Web 服务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第6 章　REST API 137&lt;/li&gt;
&lt;li&gt;第7 章　路由 179&lt;/li&gt;
&lt;li&gt;第8 章　边缘服务 197&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第Ⅲ部分　数据整合&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第9 章　数据管理 251&lt;/li&gt;
&lt;li&gt;第10 章　消息系统 303&lt;/li&gt;
&lt;li&gt;第11 章　批处理和任务 325&lt;/li&gt;
&lt;li&gt;第12 章　数据集成 363&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第IV 部分　生产&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第13 章　可观测的系统 411&lt;/li&gt;
&lt;li&gt;第14 章　服务代理 469&lt;/li&gt;
&lt;li&gt;第15 章　持续交付 497&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第V 部分 附录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;附录A 在Java EE 中使用Spring Boot 527&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Cloud Native Python</title>
      <link>https://jimmysong.io/book/cloud-native-python/</link>
      <pubDate>Sun, 01 Jul 2018 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cloud-native-python/</guid>
      <description>
        
        
        &lt;p&gt;继 &lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34;&gt;Cloud Native Go&lt;/a&gt; 之后又一本关于 Cloud Native 的力作已经登上了我的写作日程，这次是基于 Python 构建微服务和云原生 Web 应用程序，书名叫作 Cloud Native Python。&lt;/p&gt;
&lt;p&gt;这本书跟 Cloud Native Go 的内容由很大部分的重合，目录结构也基本一致，所用的技术栈也很类似，不过内容更详实，图片和步骤介绍更多一些，跟我看的另一本由印度人写的 &lt;a href=&#34;https://jimmysong.io/posts/book-kubernetes-management-design-patterns/&#34;&gt;Kubernetes Management Design Patterns: With Docker, CoreOS Linux, and Other Platforms&lt;/a&gt; 的风格很像。&lt;/p&gt;
&lt;h2 id=&#34;cloud-native-python-介绍&#34;&gt;Cloud Native Python 介绍&lt;/h2&gt;
&lt;p&gt;随着当今商业的迅速发展，企业为了支撑自身的迅速扩张，仅仅通过自有的基础设施是远远不够的。因此，他们一直在追求利用云的弹性来构建支持高度可扩展应用程序的平台。&lt;/p&gt;
&lt;p&gt;这本书能够帮助您一站式的了解使用Python构建云原生应用架构的所有信息。本书中我们首先向您介绍云原生应用架构和他们能够帮助您解决哪些问题。然后您将了解到如何使用REST API和Python构建微服务，通过事件驱动的方式构建Web层。接下来，您将了解到如何与数据服务进行交互，并使用React构建Web视图，之后我们将详细介绍应用程序的安全性和性能。然后，您还将了解到如何Docker容器化您的服务。最后，您将学习如何在AWS和Azure平台上部署您的应用程序。在您部署了应用程序后，我们将围绕关于应用程序故障排查的一系列概念和技术来结束这本书。&lt;/p&gt;
&lt;h2 id=&#34;本书中涵盖哪些内容&#34;&gt;本书中涵盖哪些内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第1章 介绍云原生应用架构和微服务，讨论云原生架构的基本概念和构建应用程序开发环境。&lt;/li&gt;
&lt;li&gt;第2章 使用Python构建微服务，构建自己的微服务知识体系并根据您的用例进行扩展。&lt;/li&gt;
&lt;li&gt;第3章 使用Python构建Web应用程序，构建一个初始的Web应用程序并与微服务集成。&lt;/li&gt;
&lt;li&gt;第4章 与数据服务交互，教您如何将应用程序迁移到不同的数据库服务。&lt;/li&gt;
&lt;li&gt;第5章 使用React构建Web视图。&lt;/li&gt;
&lt;li&gt;第6章 使用Flux创建可扩展UI，帮助您理解如何使用Flux创建可扩展的应用程序。&lt;/li&gt;
&lt;li&gt;第7章 事件溯源和CQRS，讨论如何以事件形式存储合约（transaction）。&lt;/li&gt;
&lt;li&gt;第8章 保护Web应用程序，让您的应用程序免于受到外部威胁。&lt;/li&gt;
&lt;li&gt;第9章 持续交付，应用程序频繁发布的相关知识。&lt;/li&gt;
&lt;li&gt;第10章 Docker容器化您的服务，讨论容器服务和在Docker中运行应用程序。&lt;/li&gt;
&lt;li&gt;第11章 将应用程序部署到AWS平台上，教您如何在AWS上构建基础设施并建立应用程序的生产环境。&lt;/li&gt;
&lt;li&gt;第12章 将应用程序部署到Azure平台上，讨论如何在Azure上构建基础设施并建立应用程序的生产环境。&lt;/li&gt;
&lt;li&gt;第13章 监控云应用，了解不同的基础设施和应用的监控工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用本书您需要哪些工具和环境&#34;&gt;使用本书您需要哪些工具和环境&lt;/h2&gt;
&lt;p&gt;您需要在系统上安装Python。一个文本编辑器，最好是Vim、Sublime或者Notepad++。在有一个章节中您需要下载POSTMAN，这是一个功能强大的API测试套件，可以作为作为Chrome扩展插件来安装。您可以从&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&#34;&gt;这里下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除此之外，如果您还有如下网站的账号那就更好了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Amazon Web Services&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标读者&#34;&gt;目标读者&lt;/h2&gt;
&lt;p&gt;本书适用于具有Python基础知识、熟悉命令行和基于HTTP的应用程序基本原理的开发人员。对于那些想要了解如何构建、测试和扩展Python开发的应用程序的人员来说本书是个理想选择。不需要有使用Python构建微服务的经验。&lt;/p&gt;
&lt;h2 id=&#34;更多资料&#34;&gt;更多资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关于 Cloud Native Go 的更多信息请参阅：&lt;a href=&#34;https://jimmysong.io/book/cloud-native-go/&#34;&gt;Cloud Native Go - 基于Go和React的Web云服务构建指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;关于云原生（Cloud Native）的更多资料请参考我翻译的这本 Pivotal 的小册子&lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures&#34;&gt;迁移到云原生应用架构-中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;关于 Cloud Native 生态请参考我整理的 &lt;a href=&#34;https://jimmysong.io/awesome-cloud-native&#34;&gt;awesome-cloud-native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docker Handbook</title>
      <link>https://jimmysong.io/book/docker-handbook/</link>
      <pubDate>Tue, 10 Oct 2017 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/docker-handbook/</guid>
      <description>
        
        
        &lt;h3 id=&#34;docker-handbook&#34;&gt;Docker Handbook&lt;/h3&gt;
&lt;p&gt;此书是 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/&#34;&gt;Kubernetes Handbook&lt;/a&gt; 的前传，本书中主要介绍 Docker 1.13 新特性和帮助大家了解 Docker 集群的管理和使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/docker-handbook&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/docker-handbook&#34;&gt;在线访问地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器是微服务的最佳载体，Kubernetes 是微服务的最佳运行平台，&lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; 是 Kubernetes 上最佳的 service mesh。&lt;/p&gt;
&lt;p&gt;2017年4月 Docker 项目改名为 moby，10月的 DockerCon 在哥本哈根 Docker 公司宣布拥抱 Kubernetes，对于容器编排领域 Kubernetes 已经成为事实上的王者。&lt;/p&gt;
&lt;h3 id=&#34;关于&#34;&gt;关于&lt;/h3&gt;
&lt;p&gt;本书中引用了一些公开的分享与链接并加以整理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本书作于2017年初，现已停止更新。&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Hugo Handbook</title>
      <link>https://jimmysong.io/book/hugo-handbook/</link>
      <pubDate>Tue, 10 Oct 2017 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/hugo-handbook/</guid>
      <description>
        
        
        &lt;h3 id=&#34;静态网站构建手册使用hugo构建个人博客&#34;&gt;静态网站构建手册——使用Hugo构建个人博客&lt;/h3&gt;
&lt;p&gt;本手册将指导你如何使用&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;构建静态网站用于个人博客或者项目展示。&lt;/p&gt;
&lt;p&gt;手把手教你如何从0开始构建一个静态网站，这不需要有太多的编程和开发经验和时间投入，也基本不需要多少成本（除了个性化域名），使用GitHub和Hugo模板即可快速构建和上线一个网站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/hugo-handbook&#34;&gt;在线浏览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/hugo-handbook&#34;&gt;Github地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;目标读者&#34;&gt;目标读者&lt;/h3&gt;
&lt;p&gt;本文档适用于以下用户：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对网站构建不太了解，没有web开发经验的用户&lt;/li&gt;
&lt;li&gt;希望快速构建一个网站，个性化需求不多，不想花费太多精力打理，更新不多的用户&lt;/li&gt;
&lt;li&gt;希望学习网站构建、网站模板、web开发的用户&lt;/li&gt;
&lt;li&gt;对Go语言感兴趣，希望从事开源项目的用户👏&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;贡献者&#34;&gt;贡献者&lt;/h3&gt;
&lt;p&gt;感谢此书的&lt;a href=&#34;https://github.com/rootsongjc/hugo-handbook/graphs/contributors&#34;&gt;贡献者&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Cloud Native Go</title>
      <link>https://jimmysong.io/book/cloud-native-go/</link>
      <pubDate>Tue, 01 Aug 2017 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cloud-native-go/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;本书作者：Kevin Hoffman &amp;amp; Dan Nemeth&lt;/li&gt;
&lt;li&gt;译者：宋净超、吴迎松、徐蓓、马超译&lt;/li&gt;
&lt;li&gt;出版社：电子工业出版社&lt;/li&gt;
&lt;li&gt;全名：Cloud Native Go - 基于Go和React的web云原生应用构建指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书已由电子工业出版社出版，可以&lt;a href=&#34;https://item.m.jd.com/product/12123347.html&#34;&gt;在京东上购买&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jimmysong.io/images/books/jimmy-song-with-kevein-hoffman.jpg&#34; alt=&#34;Jimmy Song with Kevin Hoffman&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;照片拍摄于 2017 年 9 月 12 日，北京&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Cloud Native Go向开发人员展示如何构建大规模云应用程序，在满足当今客户的强大需求的同时还可以动态扩展来处理几乎任何规模的数据量、流量或用户。&lt;/p&gt;
&lt;p&gt;Kevin Hoffman和Dan Nemeth详细描述了现代云原生应用程序，阐明了与快速、可靠的云原生开发相关的因素、规则和习惯。他们还介绍了Go这种“简单优雅”的高性能语言，它特别适合于云开发。&lt;/p&gt;
&lt;p&gt;在本书中你将使用Go语言创建微服务，使用ReactJS和Flux添加前端Web组件，并掌握基于Go的高级云原生技术。Hoffman和Nemeth展示了如何使用Wercker、Docker和Dockerhub等工具构建持续交付管道; 自动推送应用程序到平台上; 并系统地监控生产中的应用程序性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习“云之道”：为什么开发好的云软件基本上是关于心态和规则&lt;/li&gt;
&lt;li&gt;了解为什么使用Go语言是云本地微服务开发的理想选择&lt;/li&gt;
&lt;li&gt;规划支持持续交付和部署的云应用程序&lt;/li&gt;
&lt;li&gt;设计服务生态系统，然后以test-first的方式构建它们&lt;/li&gt;
&lt;li&gt;将正在进行的工作推送到云&lt;/li&gt;
&lt;li&gt;使用事件源和CQRS模式来响应大规模和高吞吐量&lt;/li&gt;
&lt;li&gt;安全的基于云的Web应用程序：做与不做的选择&lt;/li&gt;
&lt;li&gt;使用第三方消息传递供应商创建响应式云应用程序&lt;/li&gt;
&lt;li&gt;使用React和Flux构建大规模，云友好的GUI&lt;/li&gt;
&lt;li&gt;监控云中的动态扩展，故障转移和容错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;章节简介如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cloud-native-go-abstract.png&#34; alt=&#34;Cloud Native Go各章节简介&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kevin Hoffman&lt;/strong&gt;通过现代化和以多种不同语言构建云原生服务的方式帮助企业将其应用程序引入云端。他10岁时开始编程，在重新组装的CommodoreVIC-20上自习BASIC。从那时起，他已经沉迷于构建软件，并花了很多时间学习语言、框架和模式。他已经构建了从遥控摄影无人机、仿生性安全系统、超低延迟金融应用程序到移动应用程序等一系列软件。他在构建需要与Pivotal Cloud Foundry配合使用的自定义组件时爱上了Go语言。&lt;/p&gt;
&lt;p&gt;Kevin 是流行的幻想书系列（&lt;a href=&#34;http://amzn.to/2fc8iES&#34;&gt;The Sigilord Chronicles&lt;/a&gt; ）的作者，他热切地期待着最终能够将自己对构建软件的热爱与对构建幻想世界的热爱结合起来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan Nemeth&lt;/strong&gt;目前在Pivotal担任咨询解决方案架构师，负责支持Pivotal Cloud Foundry。他从Commodore 64开始就一直在开发软件，从1995年起开始专业编码，使用ANSIC编写了用于本地ISP的CGI脚本。从那时起，他职业生涯的大部分时间里是作为独立顾问为从金融到制药行业提供解决方案，并使用当时流行的各种语言和框架。Dan最近接受了Go作为自己的归宿，并热情地将它用于所有的项目。&lt;/p&gt;
&lt;p&gt;如果你发现Dan没在电脑前，他很可能就是在靠近安纳波利斯的水域玩帆船或飞钓。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第1章 云之道&lt;/li&gt;
&lt;li&gt;第2章  开始&lt;/li&gt;
&lt;li&gt;第3章  Go入门&lt;/li&gt;
&lt;li&gt;第4章  持续交付&lt;/li&gt;
&lt;li&gt;第5章  在Go中构建微服务&lt;/li&gt;
&lt;li&gt;第6章  运用后端服务&lt;/li&gt;
&lt;li&gt;第7章  构建数据服务&lt;/li&gt;
&lt;li&gt;第8章  事件溯源和CQRS&lt;/li&gt;
&lt;li&gt;第9章  使用Go构建web应用程序&lt;/li&gt;
&lt;li&gt;第10章  云安全&lt;/li&gt;
&lt;li&gt;第11章  使用WebSockets&lt;/li&gt;
&lt;li&gt;第12章  使用React构建Web视图&lt;/li&gt;
&lt;li&gt;第13章  使用Flux构建可扩展的UI&lt;/li&gt;
&lt;li&gt;第14章  创建完整应用World of FluxCraft&lt;/li&gt;
&lt;li&gt;第15章  结论&lt;/li&gt;
&lt;li&gt;附录A  云应用的故障排查&lt;/li&gt;
&lt;li&gt;索引&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>迁移到云原生应用架构</title>
      <link>https://jimmysong.io/book/migrating-to-cloud-native-application-architectures/</link>
      <pubDate>Tue, 11 Jul 2017 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/migrating-to-cloud-native-application-architectures/</guid>
      <description>
        
        
        &lt;p&gt;本书是 &lt;a href=&#34;https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures&#34;&gt;Migrating to Cloud Native Application Architectures&lt;/a&gt; 的中文版，本书英文版发布于 2015 年 2 月，中文版由 &lt;a href=&#34;https://jimmysong.io/&#34;&gt;Jimmy Song&lt;/a&gt; 翻译，发布于 2017 年 7 月。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/migrating-to-cloud-native-application-architectures&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures&#34;&gt;Gitbook 阅读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;译者序&#34;&gt;译者序&lt;/h3&gt;
&lt;p&gt;云时代的云原生应用大势已来，将传统的单体架构应用迁移到云原生架构，你准备好了吗？&lt;/p&gt;
&lt;p&gt;俗话说“意识决定行动”，在迁移到云原生应用之前，我们大家需要先对 Cloud Native（云原生）的概念、组织形式并对实现它的技术有一个大概的了解，这样才能指导我们的云原生架构实践。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pivotal.io/&#34;&gt;Pivotal&lt;/a&gt; 是云原生应用的提出者，并推出了 &lt;a href=&#34;https://pivotal.io/platform&#34;&gt;Pivotal Cloud Foundry&lt;/a&gt; 云原生应用平台和 &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; 开源 Java 开发框架，成为云原生应用架构中先驱者和探路者。&lt;/p&gt;
&lt;p&gt;原书作于2015年，其中的示例主要针对 Java 应用，实际上也适用于任何应用类型，云原生应用架构适用于异构语言的程序开发，不仅仅是针对 Java 语言的程序开发。截止到本人翻译本书时，云原生应用生态系统已经初具规模，&lt;a href=&#34;https://cncf.io/&#34;&gt;CNCF&lt;/a&gt; 成员不断发展壮大，基于 Cloud Native 的创业公司不断涌现，&lt;a href=&#34;https://kubernetes.io/&#34;&gt;kubernetes&lt;/a&gt; 引领容器编排潮流，和 Service Mesh 技术（如 &lt;a href=&#34;https://linkerd.io/&#34;&gt;Linkerd&lt;/a&gt; 和 &lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt;） 的出现，Go 语言的兴起（参考另一本书 &lt;a href=&#34;https://jimmysong.io/book/cloud-native-go&#34;&gt;Cloud Native Go&lt;/a&gt;）等为我们将应用迁移到云原生架构的提供了更多的方案选择。&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;当前很多企业正在采用云原生应用架构，这可以帮助其IT转型，成为市场竞争中真正敏捷的力量。 O&#39;Reilly 的报告中定义了云原生应用架构的特性，如微服务和十二因素应用程序。&lt;/p&gt;
&lt;p&gt;本书中作者Matt Stine还探究了将传统的单体应用和面向服务架构（SOA）应用迁移到云原生架构所需的文化、组织和技术变革。本书中还有一个迁移手册，其中包含将单体应用程序分解为微服务，实施容错模式和执行云原生服务的自动测试的方法。&lt;/p&gt;
&lt;p&gt;本书中讨论的应用架构包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;十二因素应用程序：云原生应用架构模式的集合&lt;/li&gt;
&lt;li&gt;微服务：独立部署的服务，每个服务只做一件事情&lt;/li&gt;
&lt;li&gt;自助服务的敏捷基础设施：快速，可重复和一致地提供应用环境和后台服务的平台&lt;/li&gt;
&lt;li&gt;基于API的协作：发布和版本化的API，允许在云原生应用架构中的服务之间进行交互&lt;/li&gt;
&lt;li&gt;抗压性：根据压力变强的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于作者&#34;&gt;关于作者&lt;/h3&gt;
&lt;p&gt;Matt Stine，Pivotal的技术产品经理，拥有15年企业IT和众多业务领域的经验。Matt 强调精益/敏捷方法、DevOps、架构模式和编程范例，他正在探究使用技术组合帮助企业IT部门能够像初创公司一样工作。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Istio Handbook</title>
      <link>https://jimmysong.io/book/istio-handbook/</link>
      <pubDate>Sat, 04 Mar 2017 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/istio-handbook/</guid>
      <description>
        
        
        &lt;h3 id=&#34;istio-handbookistio-服务网格进阶实战&#34;&gt;Istio Handbook——Istio 服务网格进阶实战&lt;/h3&gt;
&lt;p&gt;Istio Service Mesh Advanced Practical - Master the Services in Post Kubernetes Era&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/zh&#34;&gt;Istio&lt;/a&gt; 是由 Google、IBM、Lyft 等共同开源的 Service Mesh（服务网格）框架，于2017年初开始进入大众视野，作为云原生时代下承 Kubernetes、上接 Serverless 架构的重要基础设施层，地位至关重要。&lt;a href=&#34;https://www.servicemesher.com/&#34;&gt;ServiceMesher 社区&lt;/a&gt;作为中国最早的一批在研究和推广 Service Mesh 技术的开源社区决定整合社区资源，合作撰写一本开源电子书作为服务网格智库。&lt;/p&gt;
&lt;p&gt;您可以通过以下地址阅读或参与本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/servicemesher/istio-handbook&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.servicemesher.com/istio-handbook&#34;&gt;Gitbook 在线浏览&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于本书&#34;&gt;关于本书&lt;/h3&gt;
&lt;p&gt;本书起源于 &lt;a href=&#34;https://github.com/rootsongjc/istio-handbook&#34;&gt;rootsongjc/istio-handbook&lt;/a&gt; 及 ServiceMesher 社区创作的 &lt;a href=&#34;https://github.com/servicemesher/istio-knowledge-map&#34;&gt;Istio 知识图谱&lt;/a&gt;，集结社区力量合作创作而成。&lt;/p&gt;
&lt;p&gt;本书基于 Istio 1.0+ 版本编写，包含但不限于 &lt;a href=&#34;https://github.com/servicemesher/istio-knowledge-map&#34;&gt;Istio 知识图谱&lt;/a&gt;中的主题。&lt;/p&gt;
&lt;h3 id=&#34;版权&#34;&gt;版权&lt;/h3&gt;
&lt;p&gt;本书发行版权归属于电子工业出版社博文视点，未经授权请勿私自印刷发行。&lt;/p&gt;
&lt;h3 id=&#34;参与本书&#34;&gt;参与本书&lt;/h3&gt;
&lt;p&gt;请参阅&lt;a href=&#34;https://github.com/servicemesher/istio-handbook/blob/master/CODE_OF_CONDUCT.md&#34;&gt;本书写作规范&lt;/a&gt;，加入 ServiceMesher 后进入 Slack channel 讨论。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

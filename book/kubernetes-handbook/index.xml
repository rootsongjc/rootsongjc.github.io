<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song&#39;s Cloud Native Blog – Kubernetes 基础教程</title>
    <link>https://jimmysong.io/book/kubernetes-handbook/</link>
    <description>Recent content in Kubernetes 基础教程 on Jimmy Song&#39;s Cloud Native Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 21 May 2022 00:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/kubernetes-handbook/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes 架构</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/architecture/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/architecture/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 最初源于谷歌内部的 Borg，提供了面向应用的容器集群部署和管理系统。Kubernetes 的目标旨在消除编排物理 / 虚拟计算，网络和存储基础设施的负担，并使应用程序运营商和开发人员完全将重点放在以容器为中心的原语上进行自助运营。Kubernetes 也提供稳定、兼容的基础（平台），用于构建定制化的 workflows 和更高级的自动化任务。&lt;/p&gt;
&lt;p&gt;Kubernetes 具备完善的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、内建负载均衡器、故障发现和自我修复能力、服务滚动升级和在线扩容、可扩展的资源自动调度机制、多粒度的资源配额管理能力。Kubernetes 还提供完善的管理工具，涵盖开发、部署测试、运维监控等各个环节。&lt;/p&gt;
&lt;h2 id=&#34;borg-简介&#34;&gt;Borg 简介&lt;/h2&gt;
&lt;p&gt;Borg 是谷歌内部的大规模集群管理系统，负责对谷歌内部很多核心服务的调度和管理。Borg 的目的是让用户能够不必操心资源管理的问题，让他们专注于自己的核心业务，并且做到跨多个数据中心的资源利用率最大化。&lt;/p&gt;
&lt;p&gt;Borg 主要由 BorgMaster、Borglet、borgcfg 和 Scheduler 组成，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/borg.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/borg.png&#34; data-width=&#34;572&#34; data-height=&#34;549&#34; alt=&#34;image&#34; data-caption=&#34;Borg 架构&#34;&gt;
    
  
  &lt;figcaption&gt;Borg 架构&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BorgMaster 是整个集群的大脑，负责维护整个集群的状态，并将数据持久化到 Paxos 存储中；&lt;/li&gt;
&lt;li&gt;Scheduer 负责任务的调度，根据应用的特点将其调度到具体的机器上去；&lt;/li&gt;
&lt;li&gt;Borglet 负责真正运行任务（在容器中）；&lt;/li&gt;
&lt;li&gt;borgcfg 是 Borg 的命令行工具，用于跟 Borg 系统交互，一般通过一个配置文件来提交任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-架构&#34;&gt;Kubernetes 架构&lt;/h2&gt;
&lt;p&gt;Kubernetes 借鉴了 Borg 的设计理念，比如 Pod、Service、Label 和单 Pod 单 IP 等。Kubernetes 的整体架构跟 Borg 非常像，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/architecture.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/architecture.png&#34; data-width=&#34;2409&#34; data-height=&#34;1984&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 架构&#34;&gt;
    
  
  &lt;figcaption&gt;Kubernetes 架构&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes 主要由以下几个核心组件组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etcd 保存了整个集群的状态；&lt;/li&gt;
&lt;li&gt;apiserver 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制；&lt;/li&gt;
&lt;li&gt;controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；&lt;/li&gt;
&lt;li&gt;scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上；&lt;/li&gt;
&lt;li&gt;kubelet 负责维护容器的生命周期，同时也负责 Volume（CSI）和网络（CNI）的管理；&lt;/li&gt;
&lt;li&gt;Container runtime 负责镜像管理以及 Pod 和容器的真正运行（CRI）；&lt;/li&gt;
&lt;li&gt;kube-proxy 负责为 Service 提供 cluster 内部的服务发现和负载均衡；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了核心组件，还有一些推荐的插件，其中有的已经成为 CNCF 中的托管项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CoreDNS 负责为整个集群提供 DNS 服务&lt;/li&gt;
&lt;li&gt;Ingress Controller 为服务提供外网入口&lt;/li&gt;
&lt;li&gt;Prometheus 提供资源监控&lt;/li&gt;
&lt;li&gt;Dashboard 提供 GUI&lt;/li&gt;
&lt;li&gt;Federation 提供跨可用区的集群&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-架构示意图&#34;&gt;Kubernetes 架构示意图&lt;/h2&gt;
&lt;h3 id=&#34;整体架构&#34;&gt;整体架构&lt;/h3&gt;
&lt;p&gt;下图清晰表明了 Kubernetes 的架构设计以及组件之间的通信协议。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-high-level-component-archtecture.jpg&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-high-level-component-archtecture.jpg&#34; data-width=&#34;1858&#34; data-height=&#34;1126&#34; alt=&#34;image&#34; data-caption=&#34;Kuberentes 架构（图片来自于网络）&#34;&gt;
    
  
  &lt;figcaption&gt;Kuberentes 架构（图片来自于网络）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下面是更抽象的一个视图：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-whole-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-whole-arch.png&#34; data-width=&#34;1600&#34; data-height=&#34;1067&#34; alt=&#34;image&#34; data-caption=&#34;kubernetes 整体架构示意图&#34;&gt;
    
  
  &lt;figcaption&gt;kubernetes 整体架构示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;master-架构&#34;&gt;Master 架构&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-master-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-master-arch.png&#34; data-width=&#34;1600&#34; data-height=&#34;1067&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes master 架构示意图&#34;&gt;
    
  
  &lt;figcaption&gt;Kubernetes master 架构示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;node-架构&#34;&gt;Node 架构&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-node-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-node-arch.png&#34; data-width=&#34;1600&#34; data-height=&#34;1067&#34; alt=&#34;image&#34; data-caption=&#34;kubernetes node 架构示意图&#34;&gt;
    
  
  &lt;figcaption&gt;kubernetes node 架构示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;分层架构&#34;&gt;分层架构&lt;/h3&gt;
&lt;p&gt;Kubernetes 设计理念和功能其实就是一个类似 Linux 的分层架构，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
  
    
    &lt;img src=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/kubernetes-layers-arch.png&#34; data-img=&#34;/book/kubernetes-handbook/architecture/kubernetes-layers-arch.png&#34; data-width=&#34;1898&#34; data-height=&#34;1008&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes 分层架构示意图&#34;&gt;
    
  
  &lt;figcaption&gt;Kubernetes 分层架构示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心层：Kubernetes 最核心的功能，对外提供 API 构建高层的应用，对内提供插件式应用执行环境&lt;/li&gt;
&lt;li&gt;应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS 解析等）、Service Mesh（部分位于应用层）&lt;/li&gt;
&lt;li&gt;管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态 Provision 等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy 等）、Service Mesh（部分位于管理层）&lt;/li&gt;
&lt;li&gt;接口层：kubectl 命令行工具、客户端 SDK 以及集群联邦&lt;/li&gt;
&lt;li&gt;生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴
&lt;ul&gt;
&lt;li&gt;Kubernetes 外部：日志、监控、配置管理、CI/CD、Workflow、FaaS、OTS 应用、ChatOps、GitOps、SecOps 等&lt;/li&gt;
&lt;li&gt;Kubernetes 内部：CRI、CNI、CSI、镜像仓库、Cloud Provider、集群自身的配置和管理等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert&#34;&gt;

&lt;div class=&#34;alert-note-title py-1 px-2&#34;&gt;
  备注
&lt;/div&gt;

&lt;div class=&#34;alert-note py-1 px-2&#34;&gt;
  关于分层架构，可以关注下 &lt;a href=&#34;https://docs.google.com/document/d/1XkjVm4bOeiVkj-Xt1LgoGiqWsBfNozJ51dyI-ljzt1o&#34; title=&#34;Kubernetes architectual roadmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes architectual roadmap&lt;/a&gt;
 和 &lt;a href=&#34;https://docs.google.com/presentation/d/1GpELyzXOGEPY0Y1ft26yMNV19ROKt8eMN67vDSSHglk/edit&#34; title=&#34;幻灯片&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;幻灯片&lt;/a&gt;
。
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/perspective/&#34;&gt;Kubernetes 的设计理念&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/etcd/&#34;&gt;Etcd 解析&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/open-interfaces/&#34;&gt;开放接口&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/architecture/pod-state-and-lifecycle/&#34;&gt;Pod 状态与生命周期管理&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2898444&#34; title=&#34;Borg, Omega, and Kubernetes - Lessons learned from three container-management systems over a decade&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borg, Omega, and Kubernetes - Lessons learned from three container-management systems over a decade&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43438.pdf&#34; title=&#34;Paper - Large-scale cluster management at Google with Borg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paper - Large-scale cluster management at Google with Borg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thenewstack.io/kubernetes-an-overview&#34; title=&#34;KUBERNETES: AN OVERVIEW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KUBERNETES: AN OVERVIEW&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1XkjVm4bOeiVkj-Xt1LgoGiqWsBfNozJ51dyI-ljzt1o&#34; title=&#34;Kubernetes architectual roadmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes architectual roadmap&lt;/a&gt;
 和 &lt;a href=&#34;https://docs.google.com/presentation/d/1GpELyzXOGEPY0Y1ft26yMNV19ROKt8eMN67vDSSHglk/edit&#34; title=&#34;slide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slide&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Kubernetes 中的资源对象</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/objects/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/objects/</guid>
      <description>
        
        
        &lt;p&gt;以下列举的内容都是 Kubernetes 中的对象（Object），这些对象都可以在 YAML 文件中作为一种 API 类型来配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Namespace&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;Volume&lt;/li&gt;
&lt;li&gt;PersistentVolume&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Secret&lt;/li&gt;
&lt;li&gt;StatefulSet&lt;/li&gt;
&lt;li&gt;DaemonSet&lt;/li&gt;
&lt;li&gt;ServiceAccount&lt;/li&gt;
&lt;li&gt;ReplicationController&lt;/li&gt;
&lt;li&gt;ReplicaSet&lt;/li&gt;
&lt;li&gt;Job&lt;/li&gt;
&lt;li&gt;CronJob&lt;/li&gt;
&lt;li&gt;SecurityContext&lt;/li&gt;
&lt;li&gt;ResourceQuota&lt;/li&gt;
&lt;li&gt;LimitRange&lt;/li&gt;
&lt;li&gt;HorizontalPodAutoscaling&lt;/li&gt;
&lt;li&gt;Ingress&lt;/li&gt;
&lt;li&gt;ConfigMap&lt;/li&gt;
&lt;li&gt;Label&lt;/li&gt;
&lt;li&gt;CustomResourceDefinition&lt;/li&gt;
&lt;li&gt;Role&lt;/li&gt;
&lt;li&gt;ClusterRole&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我将它们简单的分类为以下几种资源对象：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类别&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;资源对象&lt;/td&gt;
&lt;td&gt;Pod、ReplicaSet、ReplicationController、Deployment、StatefulSet、DaemonSet、Job、CronJob、HorizontalPodAutoscaling、Node、Namespace、Service、Ingress、Label、CustomResourceDefinition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;存储对象&lt;/td&gt;
&lt;td&gt;Volume、PersistentVolume、Secret、ConfigMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;策略对象&lt;/td&gt;
&lt;td&gt;SecurityContext、ResourceQuota、LimitRange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;身份对象&lt;/td&gt;
&lt;td&gt;ServiceAccount、Role、ClusterRole&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;理解-kubernetes-中的对象&#34;&gt;理解 Kubernetes 中的对象&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 系统中，&lt;em&gt;Kubernetes 对象&lt;/em&gt; 是持久化的条目。Kubernetes 使用这些条目去表示整个集群的状态。特别地，它们描述了如下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么容器化应用在运行（以及在哪个 Node 上）&lt;/li&gt;
&lt;li&gt;可以被应用使用的资源&lt;/li&gt;
&lt;li&gt;关于应用如何表现的策略，比如重启策略、升级策略，以及容错策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 对象是“目标性记录” —— 一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。通过创建对象，可以有效地告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的，这就是 Kubernetes 集群的 &lt;strong&gt;期望状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;与 Kubernetes 对象工作 —— 是否创建、修改，或者删除 —— 需要使用 Kubernetes API。当使用 &lt;code&gt;kubectl&lt;/code&gt; 命令行接口时，比如，CLI 会使用必要的 Kubernetes API 调用，也可以在程序中直接使用 Kubernetes API。为了实现该目标，Kubernetes 当前提供了一个 &lt;code&gt;golang&lt;/code&gt; &lt;a href=&#34;https://github.com/kubernetes/client-go&#34; title=&#34;客户端库&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;客户端库&lt;/a&gt;
 ，其它语言库（例如&lt;a href=&#34;https://github.com/kubernetes-incubator/client-python&#34; title=&#34;Python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;
）也正在开发中。&lt;/p&gt;
&lt;h3 id=&#34;对象-spec-与状态&#34;&gt;对象 Spec 与状态&lt;/h3&gt;
&lt;p&gt;每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置：对象 &lt;em&gt;spec&lt;/em&gt; 和 对象 &lt;em&gt;status&lt;/em&gt;。&lt;em&gt;spec&lt;/em&gt; 必须提供，它描述了对象的 &lt;em&gt;期望状态&lt;/em&gt;—— 希望对象所具有的特征。&lt;em&gt;status&lt;/em&gt; 描述了对象的 &lt;em&gt;实际状态&lt;/em&gt;，它是由 Kubernetes 系统提供和更新。在任何时刻，Kubernetes 控制平面一直处于活跃状态，管理着对象的实际状态以与我们所期望的状态相匹配。&lt;/p&gt;
&lt;p&gt;例如，Kubernetes Deployment 对象能够表示运行在集群中的应用。当创建 Deployment 时，可能需要设置 Deployment 的 spec，以指定该应用需要有 3 个副本在运行。Kubernetes 系统读取 Deployment spec，启动我们所期望的该应用的 3 个实例 —— 更新状态以与 spec 相匹配。如果那些实例中有失败的（一种状态变更），Kubernetes 系统通过修正来响应 spec 和状态之间的不一致 —— 这种情况，启动一个新的实例来替换。&lt;/p&gt;
&lt;p&gt;关于对象 spec、status 和 metadata 更多信息，查看 &lt;a href=&#34;https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&#34; title=&#34;Kubernetes API Conventions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API Conventions&lt;/a&gt;
。&lt;/p&gt;
&lt;h3 id=&#34;描述-kubernetes-对象&#34;&gt;描述 Kubernetes 对象&lt;/h3&gt;
&lt;p&gt;当创建 Kubernetes 对象时，必须提供对象的 spec，用来描述该对象的期望状态，以及关于对象的一些基本信息（例如，名称）。当使用 Kubernetes API 创建对象时（或者直接创建，或者基于&lt;code&gt;kubectl&lt;/code&gt;），API 请求必须在请求体中包含 JSON 格式的信息。&lt;strong&gt;更常用的是，需要在 .yaml 文件中为 kubectl 提供这些信息&lt;/strong&gt;。 &lt;code&gt;kubectl&lt;/code&gt; 在执行 API 请求时，将这些信息转换成 JSON 格式。&lt;/p&gt;
&lt;p&gt;这里有一个 &lt;code&gt;.yaml&lt;/code&gt; 示例文件，展示了 Kubernetes Deployment 的必需字段和对象 spec：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx-deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx:1.7.9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一种创建 Deployment 的方式，类似上面使用 &lt;code&gt;.yaml&lt;/code&gt; 文件，是使用 &lt;code&gt;kubectl&lt;/code&gt; 命令行接口（CLI）中的 &lt;code&gt;kubectl create&lt;/code&gt; 命令，传递 &lt;code&gt;.yaml&lt;/code&gt; 作为参数。下面是一个示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl create -f docs/user-guide/nginx-deployment.yaml --record
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出类似如下这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx-deployment&amp;#34;&lt;/span&gt; created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;必需字段&#34;&gt;必需字段&lt;/h3&gt;
&lt;p&gt;在想要创建的 Kubernetes 对象对应的 &lt;code&gt;.yaml&lt;/code&gt; 文件中，需要配置如下的字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt; - 创建该对象所使用的 Kubernetes API 的版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kind&lt;/code&gt; - 想要创建的对象的类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata&lt;/code&gt; - 帮助识别对象唯一性的数据，包括一个 &lt;code&gt;name&lt;/code&gt; 字符串、UID 和可选的 &lt;code&gt;namespace&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也需要提供对象的 &lt;code&gt;spec&lt;/code&gt; 字段。对象 &lt;code&gt;spec&lt;/code&gt; 的精确格式对每个 Kubernetes 对象来说是不同的，包含了特定于该对象的嵌套字段。&lt;a href=&#34;https://kubernetes.io/docs/api/&#34; title=&#34;Kubernetes API 参考&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API 参考&lt;/a&gt;
能够帮助我们找到任何我们想创建的对象的 spec 格式。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-overview/&#34;&gt;Pod 概览&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod/&#34;&gt;Pod 解析&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/init-containers/&#34;&gt;Init 容器&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pause-container/&#34;&gt;Pause 容器&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-security-policy/&#34;&gt;Pod 安全策略&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-lifecycle/&#34;&gt;Pod 的生命周期&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-hook/&#34;&gt;Pod Hook&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-preset/&#34;&gt;Pod Preset&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/objects/pod-disruption-budget/&#34;&gt;Pod 中断与 PDB（Pod 中断预算）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>集群资源管理</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cluster/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/cluster/</guid>
      <description>
        
        
        &lt;p&gt;为了管理异构和不同配置的主机，为了便于 Pod 的运维管理，Kubernetes 中提供了很多集群管理的配置和管理功能，通过 namespace 划分的空间，通过为 node 节点创建 label 和 taint 用于 pod 的调度等。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/node/&#34;&gt;Node&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/namespace/&#34;&gt;Namespace&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/label/&#34;&gt;Label&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/annotation/&#34;&gt;Annotation&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/taint-and-toleration/&#34;&gt;Taint 和 Toleration（污点和容忍）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/garbage-collection/&#34;&gt;垃圾收集&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/scheduling/&#34;&gt;资源调度&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cluster/qos/&#34;&gt;服务质量等级（QoS）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>控制器</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/controllers/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/controllers/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 中内建了很多 controller（控制器），这些相当于一个状态机，用来控制 Pod 的具体状态和行为。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/deployment/&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/statefulset/&#34;&gt;StatefulSet&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/daemonset/&#34;&gt;DaemonSet&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/replicaset/&#34;&gt;ReplicationController 和 ReplicaSet&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/job/&#34;&gt;Job&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/cronjob/&#34;&gt;CronJob&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/ingress-controller/&#34;&gt;Ingress 控制器&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/hpa/&#34;&gt;Horizontal Pod Autoscaling&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/controllers/admission-controller/&#34;&gt;准入控制器（Admission Controller）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>服务发现与路由</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/service-discovery/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/service-discovery/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 中为了实现服务实例间的负载均衡和不同服务间的服务发现，创造了 Serivce 对象，同时又为从集群外部访问集群创建了 Ingress 对象。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/service-discovery/service/&#34;&gt;Service&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/service-discovery/topology-aware-routing/&#34;&gt;拓扑感知路由&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/service-discovery/ingress/&#34;&gt;Ingress&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/service-discovery/gateway/&#34;&gt;Gateway API&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>身份与权限认证</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/auth/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/auth/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 中提供了良好的多租户认证管理机制，如 RBAC、ServiceAccount 还有各种策略等。&lt;/p&gt;
&lt;p&gt;另外还有一个 CNCF 孵化项目 &lt;a href=&#34;https://spiffe.io/&#34; title=&#34;SPIFFE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt;
 旨在为所有的分布式应用提供身份支持，目前已应用在了 Envoy、Istio 等应用中。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/serviceaccount/&#34;&gt;ServiceAccount&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/rbac/&#34;&gt;基于角色的访问控制（RBAC）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/network-policy/&#34;&gt;NetworkPolicy&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/spiffe/&#34;&gt;SPIFFE&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/spire/&#34;&gt;SPIRE&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/spire-k8s-workload-registar/&#34;&gt;SPIRE Kubernetes 工作负载注册器&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/auth/svid/&#34;&gt;SVID 身份颁发过程&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>网络</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/networking/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/networking/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 中的网络可以说对初次接触 Kubernetes 或者没有网络方面经验的人来说可能是其中最难的部分。Kubernetes 本身并不提供网络功能，只是把网络接口开放出来，通过插件的形式实现。&lt;/p&gt;
&lt;h2 id=&#34;网络要解决的问题&#34;&gt;网络要解决的问题&lt;/h2&gt;
&lt;p&gt;既然 Kubernetes 中将容器的联网通过插件的方式来实现，那么该如何解决容器的联网问题呢？&lt;/p&gt;
&lt;p&gt;如果您在本地单台机器上运行 docker 容器的话会注意到所有容器都会处在 &lt;code&gt;docker0&lt;/code&gt; 网桥自动分配的一个网络 IP 段内（172.17.0.1/16）。该值可以通过 docker 启动参数 &lt;code&gt;--bip&lt;/code&gt; 来设置。这样所有本地的所有的容器都拥有了一个 IP 地址，而且还是在一个网段内彼此就可以互相通信了。&lt;/p&gt;
&lt;p&gt;但是 Kubernetes 管理的是集群，Kubernetes 中的网络要解决的核心问题就是每台主机的 IP 地址网段划分，以及单个容器的 IP 地址分配。概括为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证每个 Pod 拥有一个集群内唯一的 IP 地址&lt;/li&gt;
&lt;li&gt;保证不同节点的 IP 地址划分不会重复&lt;/li&gt;
&lt;li&gt;保证跨节点的 Pod 可以互相通信&lt;/li&gt;
&lt;li&gt;保证不同节点的 Pod 可以与跨节点的主机互相通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决该问题，出现了一系列开源的 Kubernetes 中的网络插件与方案，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flannel&lt;/li&gt;
&lt;li&gt;calico&lt;/li&gt;
&lt;li&gt;contiv&lt;/li&gt;
&lt;li&gt;weave&lt;/li&gt;
&lt;li&gt;kube-router&lt;/li&gt;
&lt;li&gt;cilium&lt;/li&gt;
&lt;li&gt;canal&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章将以当前最常用的 flannel、calico 和 cilium 等插件为例解析。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/networking/flannel/&#34;&gt;扁平网络 Flannel&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/networking/calico/&#34;&gt;非 Overlay 扁平网络 Calico&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/networking/cilium/&#34;&gt;基于 eBPF 的网络 Cilium&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>存储</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/storage/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/storage/</guid>
      <description>
        
        
        &lt;p&gt;为了管理存储，Kubernetes 提供了以下资源对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Secret：用于管理敏感信息&lt;/li&gt;
&lt;li&gt;ConfigMap：存储配置&lt;/li&gt;
&lt;li&gt;Volume、PV、PVC、StorageClass 等：用来管理存储卷&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节将为你讲解 Kubernetes 中的存储对象。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/secret/&#34;&gt;Secret&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/configmap/&#34;&gt;ConfigMap&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/configmap-hot-update/&#34;&gt;ConfigMap 的热更新&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/volume/&#34;&gt;Volume&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/persistent-volume/&#34;&gt;持久化卷（Persistent Volume）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/storageclass/&#34;&gt;Storage Class&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/storage/local-persistent-storage/&#34;&gt;本地持久化存储&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>扩展集群</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/extend/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/extend/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 是一个高度开放可扩展的架构，可以通过自定义资源类型（CRD）来定义自己的类型，还可以自己来扩展 API 服务，用户的使用方式跟 Kubernetes 的原生对象无异。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/extend/custom-resource/&#34;&gt;使用自定义资源扩展 API&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/extend/crd/&#34;&gt;使用 CRD 扩展 Kubernetes API&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/extend/aggregated-api-server/&#34;&gt;Aggregated API Server&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/extend/apiservice/&#34;&gt;APIService&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/extend/service-catalog/&#34;&gt;服务目录（Service Catalog）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>多集群管理</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/multi-cluster/</guid>
      <description>
        
        
        &lt;p&gt;组织需要部署多个 Kubernetes 集群来为不同的业务提供隔离，增强可用性和可扩展性。&lt;/p&gt;
&lt;h2 id=&#34;什么是多集群&#34;&gt;什么是多集群？&lt;/h2&gt;
&lt;p&gt;多集群是一种在多个 Kubernetes 集群上或跨集群部署应用的策略，目的是提高可用性、隔离性和可扩展性。多集群对于确保遵守不同的和相互冲突的法规非常重要，因为单个集群可以进行调整，以遵守特定地域或认证的法规。软件交付的速度和安全性也可以提高，单个开发团队将应用程序部署到隔离的集群中，并有选择地暴露哪些服务可用于测试和发布。&lt;/p&gt;
&lt;h2 id=&#34;配置多集群访问&#34;&gt;配置多集群访问&lt;/h2&gt;
&lt;p&gt;你可以使用 &lt;code&gt;kubectl config&lt;/code&gt; 命令配置要访问的集群，详见&lt;a href=&#34;https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/&#34; title=&#34;配置对多集群的访问&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置对多集群的访问&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;集群联邦&#34;&gt;集群联邦&lt;/h2&gt;
&lt;p&gt;集群联邦（Federation）是指通过 Federation API 资源来统一管理多个集群的资源，如定义 Deployment 如何部署到不同集群上，及其所需的副本数等。这些集群可能位于不同的可用区、地区或者供应商。实施集群联邦一般是为了达到以下目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化管理多个集群的 Kubernetes 组件 (如 Deployment、Service 等）；&lt;/li&gt;
&lt;li&gt;在多个集群之间分散工作负载（Pod），以提升应用（服务）的可靠性；&lt;/li&gt;
&lt;li&gt;跨集群的资源编排，依据编排策略在多个集群进行应用（服务）部署；&lt;/li&gt;
&lt;li&gt;在不同集群中，能更快速更容易地迁移应用（服务）；&lt;/li&gt;
&lt;li&gt;跨集群的服务发现，服务可以提供给当地存取，以降低延迟；&lt;/li&gt;
&lt;li&gt;实践多云（Multi-cloud）或混合云（Hybird Cloud）的部署；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/multi-cluster-services-api/&#34;&gt;多集群服务 API（Multi-Cluster Services API）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/multi-cluster/federation/&#34;&gt;集群联邦（Cluster Federation）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-multicluster/README.md&#34; title=&#34;Multicluster Special Interest Group - github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multicluster Special Interest Group - github.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/&#34; title=&#34;配置对多集群的访问 - kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置对多集群的访问 - kubernetes.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>资源对象配置</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/config/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/config/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 中的各个资源对象的配置指南。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/config/liveness-readiness-probes/&#34;&gt;配置 Pod 的 liveness 和 readiness 探针&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/config/service-account/&#34;&gt;配置 Pod 的 Service Account&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/config/secret/&#34;&gt;Secret 配置&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/config/quota/&#34;&gt;管理 namespace 中的资源配额&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>命令使用</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/cli/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/cli/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 中的 kubectl 及其他管理命令使用。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cli/docker-cli-to-kubectl/&#34;&gt;Docker 用户过渡到 kubectl 命令行指南&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cli/using-kubectl/&#34;&gt;Kubectl 命令概览&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cli/kubectl-cheatsheet/&#34;&gt;Kubectl 命令技巧大全&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/cli/etcdctl/&#34;&gt;使用 etcdctl 访问 Kubernetes 数据&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>集群安全性管理</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/security/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/security/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 支持多租户，这就需要对集群的安全性进行管理。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/managing-tls-in-a-cluster/&#34;&gt;管理集群中的 TLS&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/kubelet-authentication-authorization/&#34;&gt;Kublet 的认证授权&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/tls-bootstrapping/&#34;&gt;TLS Bootstrap&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/ip-masq-agent/&#34;&gt;IP 伪装代理&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/kubectl-user-authentication-authorization/&#34;&gt;创建用户认证授权的 kubeconfig 文件&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/auth-with-kubeconfig-or-token/&#34;&gt;使用 kubeconfig 或 token 进行用户身份认证&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/authentication/&#34;&gt;Kubernetes 中的用户与身份认证授权&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/security/kubernetes-security-best-practice/&#34;&gt;Kubernetes 集群安全性配置最佳实践&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>访问 Kubernetes 集群</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/access/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/access/</guid>
      <description>
        
        
        &lt;p&gt;根据用户部署和暴露服务的方式不同，有很多种方式可以用来访问 Kubernetes 集群。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最简单也是最直接的方式是使用 &lt;code&gt;kubectl&lt;/code&gt; 命令。&lt;/li&gt;
&lt;li&gt;其次可以使用 &lt;code&gt;kubeconfig&lt;/code&gt; 文件来认证授权访问 API server。&lt;/li&gt;
&lt;li&gt;通过各种 proxy 经过端口转发访问 Kubernetes 集群中的服务&lt;/li&gt;
&lt;li&gt;使用 Ingress，在集群外访问 Kubernetes 集群内的 service&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/methods/&#34;&gt;访问集群&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/authenticate-across-clusters-kubeconfig/&#34;&gt;使用 kubeconfig 文件配置跨集群认证&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/connecting-to-applications-port-forward/&#34;&gt;通过端口转发访问集群中的应用程序&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/service-access-application-cluster/&#34;&gt;使用 service 访问群集中的应用程序&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/accessing-kubernetes-pods-from-outside-of-the-cluster/&#34;&gt;从外部访问 Kubernetes 中的 Pod&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/lens/&#34;&gt;Lens - Kubernetes IDE&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/access/kubernator-kubernetes-ui/&#34;&gt;Kubernator - 更底层的 Kubernetes UI&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>在 Kubernetes 中开发部署应用</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/devops/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/devops/</guid>
      <description>
        
        
        &lt;p&gt;理论上只要可以使用主机名做服务注册的应用都可以迁移到 Kubernetes 集群上。看到这里你可能不禁要问，为什么使用 IP 地址做服务注册发现的应用不适合迁移到 kubernetes 集群？因为这样的应用不适合自动故障恢复，因为目前 Kubernetes 中不支持固定 Pod 的 IP 地址，当 Pod 故障后自动转移到其他节点的时候该 Pod 的 IP 地址也随之变化。&lt;/p&gt;
&lt;p&gt;将传统应用迁移到 Kubernetes 中可能还有很长的路要走，但是直接开发云原生应用，Kubernetes 就是最佳运行时环境了。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/devops/deploy-applications-in-kubernetes/&#34;&gt;适用于 Kubernetes 的应用开发部署流程&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/devops/migrating-hadoop-yarn-to-kubernetes/&#34;&gt;迁移传统应用到 Kubernetes 步骤详解——以 Hadoop YARN 为例&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/devops/using-statefulset/&#34;&gt;使用 StatefulSet 部署有状态应用&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/devops/ci-cd/&#34;&gt;持续集成与交付（CI/CD）&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/devops/kustomize/&#34;&gt;使用 Kustomize 配置 Kubernetes 应用&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;



      </description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>https://jimmysong.io/book/kubernetes-handbook/develop/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/kubernetes-handbook/develop/</guid>
      <description>
        
        
        &lt;p&gt;讲解如何在原生 Kubernetes 的基础上做定制开发。&lt;/p&gt;
&lt;h2 id=&#34;本节大纲&#34;&gt;本节大纲&lt;/h2&gt;


  &lt;ul&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/sigs-and-working-group/&#34;&gt;SIG 和工作组&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/developing-environment/&#34;&gt;配置 Kubernetes 开发环境&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/testing/&#34;&gt;测试 Kubernetes&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/client-go-sample/&#34;&gt;client-go 示例&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/operator/&#34;&gt;Operator&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/operator-sdk/&#34;&gt;Operator SDK&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/kubebuilder/&#34;&gt;Kubebuilder&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/advance-developer/&#34;&gt;高级开发指南&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/contribute/&#34;&gt;参与 Kubernetes 社区贡献&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&#34;https://jimmysong.io/book/kubernetes-handbook/develop/minikube/&#34;&gt;Minikube&lt;/a&gt;&lt;/p&gt;
        
      &lt;/li&gt;
    
  &lt;/ul&gt;


&lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;sigs-and-working-group&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;阅读本章&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;


      </description>
    </item>
    
  </channel>
</rss>


<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Cilium Service Mesh</title>
    <link>https://jimmysong.io/book/cilium-handbook/servicemesh/</link>
    <description>Recent content in Cilium Service Mesh on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>51621818828612637</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Tue, 03 Sep 2024 12:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/cilium-handbook/servicemesh/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>Kubernetes Ingress 支持</title>
      <link>https://jimmysong.io/book/cilium-handbook/servicemesh/ingress/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cilium-handbook/servicemesh/ingress/</guid>
      <description>
        
        
        &lt;p&gt;Cilium 通过标准的 &lt;code&gt;Kubernetes Ingress&lt;/code&gt; 资源定义提供服务，使用时将 &lt;code&gt;ingressClassName&lt;/code&gt; 设置为 &lt;code&gt;cilium&lt;/code&gt;。这支持基于路径的路由和 TLS 终结。为了向后兼容，也支持 &lt;code&gt;kubernetes.io/ingress.class&lt;/code&gt; 注解，值为 &lt;code&gt;cilium&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：Ingress 控制器会创建一个类型为 LoadBalancer 的服务，所以你的环境需要支持此类服务。&lt;/p&gt;
&lt;p&gt;Cilium 允许你为 Ingress 资源指定负载均衡模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dedicated&lt;/code&gt;：Ingress 控制器将为每个 Ingress 创建一个专用的负载均衡器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared&lt;/code&gt;：Ingress 控制器将使用一个共享的负载均衡器服务于所有 Ingress 资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每种负载均衡模式都有其优缺点。共享模式通过在集群中所有 Ingress 资源间共享单一的 LoadBalancer 配置节省资源，而专用模式可以帮助避免资源之间的潜在冲突（例如路径前缀）。&lt;/p&gt;
&lt;h2 id=&#34;准备条件&#34;&gt;准备条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安装 Cilium 时需要启用 NodePort，通过设置 &lt;code&gt;nodePort.enabled=true&lt;/code&gt; 或启用 &lt;code&gt;kubeProxyReplacement=true&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Cilium 必须配置启用了 L7 代理，使用 &lt;code&gt;l7Proxy=true&lt;/code&gt;（默认启用）。&lt;/li&gt;
&lt;li&gt;默认情况下，Ingress 控制器创建的是 LoadBalancer 类型的服务，你的环境需要支持此功能。或者，从 Cilium 1.16 开始，你可以直接在主机网络上暴露 Cilium L7 代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ingress-路径类型和优先级&#34;&gt;Ingress 路径类型和优先级&lt;/h2&gt;
&lt;p&gt;Ingress 规范支持三种类型的路径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Exact（精确）&lt;/strong&gt;：完全匹配给定的路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prefix（前缀）&lt;/strong&gt;：匹配 URL 路径的前缀，最后一个路径段必须完整匹配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImplementationSpecific（实现特定）&lt;/strong&gt;：路径的解释取决于 IngressClass。在 Cilium 的案例中，我们定义实现特定为“Regex（正则表达式）”，因此 Cilium 会将任何给定路径视为正则表达式并相应地配置 Envoy。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持的-ingress-注解&#34;&gt;支持的 Ingress 注解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ingress.cilium.io/loadbalancer-mode&lt;/code&gt;：设置 Ingress 的负载均衡模式，可选 &lt;code&gt;dedicated&lt;/code&gt; 或 &lt;code&gt;shared&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ingress.cilium.io/service-type&lt;/code&gt;：指定专用 Ingress 的服务类型，可选 &lt;code&gt;LoadBalancer&lt;/code&gt; 或 &lt;code&gt;NodePort&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ingress.cilium.io/tls-passthrough&lt;/code&gt;：为此 Ingress 启用 TLS 透传模式，可选 &lt;code&gt;enabled&lt;/code&gt; 或 &lt;code&gt;disabled&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主机网络模式&#34;&gt;主机网络模式&lt;/h2&gt;
&lt;p&gt;从 Cilium 1.16+ 开始支持。主机网络模式允许你直接在主机网络上暴露 Cilium Ingress 控制器（Envoy 监听器）。这在没有 LoadBalancer 服务的开发环境或其他环境中非常有用。&lt;/p&gt;
&lt;p&gt;可以通过 Helm 启用主机网络模式，并通过注解为每个 &lt;code&gt;Ingress&lt;/code&gt; 资源指定主机网络端口。&lt;/p&gt;
&lt;p&gt;此外，云服务商特定的注解也受到支持，例如 &lt;code&gt;cloud.google.com&lt;/code&gt; 等。&lt;/p&gt;
&lt;h3 id=&#34;cilium-ingress-和-gateway-api-与其他-ingress-控制器的不同&#34;&gt;Cilium Ingress 和 Gateway API 与其他 Ingress 控制器的不同&lt;/h3&gt;
&lt;p&gt;Cilium 的 Ingress 和 Gateway API 与其他 Ingress 控制器最大的不同在于，它与 CNI 的结合更为紧密。对于 Cilium 来说，Ingress 和 Gateway API 是网络栈的一部分，因此与其他 Ingress 或 Gateway API 控制器（即使是在 Cilium 集群中运行的）的行为方式不同。&lt;/p&gt;
&lt;p&gt;其他 Ingress 或 Gateway API 控制器通常作为 Deployment 或 Daemonset 在集群中安装，并通过 Loadbalancer 服务或类似方式暴露。Cilium 的 Ingress 和 Gateway API 配置可以通过 Loadbalancer 或 NodePort 服务暴露，或者可选地在主机网络上暴露。在所有这些情况下，当流量到达服务端口时，eBPF 代码会拦截流量并透明地转发到 Envoy（使用 TPROXY 内核功能）。&lt;/p&gt;
&lt;p&gt;这影响了客户端 IP 可见性的工作方式，与其他 Ingress 控制器的支持不同。此外，Cilium 的网络策略引擎可以将 &lt;code&gt;CiliumNetworkPolicy&lt;/code&gt; 应用于绑定到 Ingress 的流量和来自 Ingress 的流量。&lt;/p&gt;
&lt;h2 id=&#34;cilium-的-ingress-配置和-ciliumnetworkpolicy&#34;&gt;Cilium 的 Ingress 配置和 &lt;code&gt;CiliumNetworkPolicy&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;通过 Cilium 绑定到后端服务的 Ingress 和 Gateway API 流量会通过每个节点的 Envoy 代理。这个节点 Envoy 代理有特殊的代码，使其能够与 eBPF 策略引擎交互，并对流量进行策略查找。这使 Envoy 成为网络策略的执行点，不仅适用于 Ingress（和 Gateway API）流量，还适用于通过 GAMMA 或 L7 流量管理的东西流量。&lt;/p&gt;
&lt;p&gt;对于 Ingress 配置，还有一个额外的步骤。到达 Envoy 的 Ingress 或 Gateway API 流量会在 Cilium 的策略引擎中被赋予特殊的&lt;code&gt;ingress&lt;/code&gt;身份。来自集群外部的流量通常被赋予 &lt;code&gt;world&lt;/code&gt; 身份（除非集群中有 IP CIDR 策略）。这意味着在 Cilium Ingress 中实际上有两个逻辑策略执行点——在流量到达 &lt;code&gt;ingress&lt;/code&gt; 身份之前和之后，即将离开每个节点的 Envoy 时。&lt;/p&gt;
&lt;h2 id=&#34;源-ip-可见性&#34;&gt;源 IP 可见性&lt;/h2&gt;
&lt;p&gt;默认情况下，Cilium 的 Ingress 配置（无论是 Ingress 还是 Gateway API）应该在大多数安装中正常工作。Cilium 的 Envoy 实例默认配置为将来自 HTTP 连接的可见源地址附加到 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 头部，使用通常的规则。默认情况下，Cilium 将信任跳数设置为&lt;code&gt;0&lt;/code&gt;，表示 Envoy 应该使用连接打开的地址，而不是 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 列表中的值。&lt;/p&gt;
&lt;h3 id=&#34;loadbalancer-或-nodeport-服务的-externaltrafficpolicy&#34;&gt;Loadbalancer 或 NodePort 服务的 &lt;code&gt;externalTrafficPolicy&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Cilium 的 Ingress 支持（无论是 Ingress 还是 Gateway API）经常使用 Loadbalancer 或 NodePort 服务来暴露 Envoy Daemonset。在这些情况下，服务对象中有一个与客户端 IP 可见性特别相关的字段——&lt;code&gt;externalTrafficPolicy&lt;/code&gt;字段。&lt;/p&gt;
&lt;p&gt;这有两个相关的设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Local&lt;/code&gt;：节点只会将流量路由到本地节点上运行的 Pod，并且不会隐藏源 IP。因此，在使用&lt;code&gt;kube-proxy&lt;/code&gt;的集群中，这是确保源 IP 可见性的唯一方式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cluster&lt;/code&gt;：节点将流量均匀地路由到集群中的所有端点。这意味着在许多情况下，使用&lt;code&gt;Cluster&lt;/code&gt;可能导致后端 pod 看不到源 IP。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tls-透传和源-ip-可见性&#34;&gt;TLS 透传和源 IP 可见性&lt;/h3&gt;
&lt;p&gt;Ingress 和 Gateway API 都支持 TLS 透传配置（通过 Ingress 的注解和 Gateway API 的 TLSRoute 资源）。这种配置允许多个 TLS 透传后端共享同一个负载均衡器上的 TLS 端口，Envoy 会检查 TLS 握手的服务器名称指示（SNI）字段，并使用该字段将 TLS 流转发到后端。&lt;/p&gt;
&lt;p&gt;然而，这对源 IP 可见性构成了问题，因为 Envoy 正在对 TLS 流进行 TCP 代理。当进行 TLS 透传时，后端将看到 Envoy 的 IP 地址作为转发 TLS 流的源地址。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Gateway API 支持</title>
      <link>https://jimmysong.io/book/cilium-handbook/servicemesh/gateway-api/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cilium-handbook/servicemesh/gateway-api/</guid>
      <description>
        
        
        &lt;p&gt;Cilium 支持 Gateway API v1.1.0，包括以下资源，并且通过了所有核心一致性测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/api-types/gatewayclass/&#34; title=&#34;GatewayClass&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GatewayClass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/api-types/gateway/&#34; title=&#34;Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/api-types/httproute/&#34; title=&#34;HTTPRoute&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTPRoute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/api-types/grpcroute/&#34; title=&#34;GRPCRoute&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GRPCRoute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.TLSRoute&#34; title=&#34;TLSRoute（实验性）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLSRoute（实验性）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/api-types/referencegrant/&#34; title=&#34;ReferenceGrant&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ReferenceGrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装前提条件&#34;&gt;安装前提条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 必须配置 NodePort 启用，使用 &lt;code&gt;nodePort.enabled=true&lt;/code&gt; 或启用 &lt;code&gt;kubeProxyReplacement=true&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Cilium 必须启用 L7 代理，使用 &lt;code&gt;l7Proxy=true&lt;/code&gt;（默认启用）。&lt;/li&gt;
&lt;li&gt;必须预先安装 Gateway API v1.1.0 的以下 CRDs。具体安装步骤请参考&lt;a href=&#34;https://gateway-api.sigs.k8s.io/guides/?h=crds#getting-started-with-gateway-api&#34; title=&#34;此文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此文档&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装步骤&#34;&gt;安装步骤&lt;/h2&gt;
&lt;p&gt;确保你安装了 Cilium CLI v0.15.0 或更高版本。使用 Cilium CLI 可以安装 Cilium，检查 Cilium 安装状态，并启用/禁用各种功能（如 clustermesh, Hubble）。&lt;/p&gt;
&lt;p&gt;使用 Helm 可以启用 Cilium Gateway API Controller，设置 &lt;code&gt;gatewayAPI.enabled&lt;/code&gt; 为 true。更新 Cilium 设置后，重新启动相关的部署和守护进程。&lt;/p&gt;
&lt;h2 id=&#34;主机网络模式&#34;&gt;主机网络模式&lt;/h2&gt;
&lt;p&gt;从 Cilium 1.16+ 开始支持。主机网络模式允许你直接在主机网络上暴露 Cilium Gateway API Gateway。这在无法使用 LoadBalancer 服务的开发环境或其他环境中特别有用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用 Cilium Gateway API 主机网络模式会自动禁用 LoadBalancer 类型服务模式。这两种模式是互斥的。&lt;/li&gt;
&lt;li&gt;可以通过 Helm 启用主机网络模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高级端口绑定&#34;&gt;高级端口绑定&lt;/h2&gt;
&lt;p&gt;默认情况下，Cilium L7 Envoy 进程没有任何 Linux 权限，因此不允许监听特权端口（低于或等于 1023 的端口）。如果你选择了这样的端口，确保配置了 Helm 值 &lt;code&gt;envoy.securityContext.capabilities.keepCapNetBindService=true&lt;/code&gt; 并添加 &lt;code&gt;NET_BIND_SERVICE&lt;/code&gt; 权限。&lt;/p&gt;
&lt;h2 id=&#34;示例和故障排除&#34;&gt;示例和故障排除&lt;/h2&gt;
&lt;p&gt;你可以参考以下示例来使用和利用 Cilium 的 Gateway API 功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/gateway-api/http/&#34; title=&#34;HTTP 示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/gateway-api/https/&#34; title=&#34;HTTPS 示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTPS 示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/gateway-api/splitting/&#34; title=&#34;流量分割示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流量分割示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/gateway-api/header/&#34; title=&#34;HTTP 头修改器示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 头修改器示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，如果你遇到任何问题，可以参考&lt;a href=&#34;https://docs.cilium.io/en/stable/operations/troubleshooting/#troubleshooting-servicemesh&#34; title=&#34;故障排除 Ingress &amp;amp;amp; Service Mesh 页面&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;故障排除 Ingress &amp;amp; Service Mesh 页面&lt;/a&gt;的通用和设置验证步骤。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>集成 Cilium 与 Istio</title>
      <link>https://jimmysong.io/book/cilium-handbook/servicemesh/istio/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cilium-handbook/servicemesh/istio/</guid>
      <description>
        
        
        &lt;p&gt;本文帮助你开始使用 Cilium 启用的 Kubernetes 集群来运行 Istio。本文档涵盖了 Cilium 与 Istio 集成的以下几个常见方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 配置&lt;/li&gt;
&lt;li&gt;Istio 配置&lt;/li&gt;
&lt;li&gt;演示应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cilium-配置&#34;&gt;Cilium 配置&lt;/h2&gt;
&lt;p&gt;Cilium 配置的主要目标是确保重定向到 Istio 的 &lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/architecture/&#34; title=&#34;Sidecar 代理（sidecar mode）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecar 代理（sidecar mode）&lt;/a&gt; 或 &lt;a href=&#34;https://istio.io/latest/docs/ops/ambient/architecture/&#34; title=&#34;节点代理（ambient mode）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;节点代理（ambient mode）&lt;/a&gt; 的流量不受干扰。当启用 Cilium 的 &lt;code&gt;kubeProxyReplacement&lt;/code&gt; 功能（参见 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/#kubeproxy-free&#34; title=&#34;无 kube-proxy 的 Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;无 kube-proxy 的 Kubernetes&lt;/a&gt; 文档）时，可能会发生干扰，该功能在 Pod 内启用基于套接字的负载均衡。&lt;/p&gt;
&lt;p&gt;为了确保 Cilium 不干扰 Istio，重要的是在 Cilium 的 ConfigMap 中将 &lt;code&gt;bpf-lb-sock-hostns-only&lt;/code&gt; 参数设置为 &lt;code&gt;true&lt;/code&gt;。可以通过使用 &lt;code&gt;--set socketLB.hostNamespaceOnly=true&lt;/code&gt; 的 Helm 值来实现。你可以用以下命令确认结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get configmaps -n kube-system cilium-config -oyaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep bpf-lb-sock-hostns
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bpf-lb-sock-hostns-only: &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Istio 使用 CNI 插件来实现 Sidecar 和 Ambient 模式的功能。为确保 Cilium 不干扰节点上的其他 CNI 插件，重要的是在 Cilium 的 ConfigMap 中设置 &lt;code&gt;cni-exclusive&lt;/code&gt; 参数为 &lt;code&gt;false&lt;/code&gt;。这可以通过使用 &lt;code&gt;--set cni.exclusive=false&lt;/code&gt; 的 Helm 值来实现。你可以用以下命令确认结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get configmaps -n kube-system cilium-config -oyaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep cni-exclusive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cni-exclusive: &lt;span class=&#34;s2&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;istio-配置&#34;&gt;Istio 配置&lt;/h2&gt;
&lt;p&gt;部署 Cilium 和 Istio 时，请注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以使用 Cilium 或 Istio 的 L7 HTTP 策略控制，但不建议同时使用 &lt;strong&gt;两者&lt;/strong&gt; 的 L7 HTTP 策略控制，以避免分裂脑问题。&lt;/p&gt;
&lt;p&gt;若要在 Istio（Sidecar 或 Ambient 模式）中使用 Cilium 的 L7 HTTP 策略控制（例如，&lt;a href=&#34;https://docs.cilium.io/en/stable/security/policy/language/#l7-policy&#34; title=&#34;第 7 层示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第 7 层示例&lt;/a&gt;），你必须：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sidecar 模式：通过在 Istio 的 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/peer_authentication/#PeerAuthentication&#34; title=&#34;PeerAuthentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PeerAuthentication&lt;/a&gt; 下配置 &lt;code&gt;mtls.mode=DISABLE&lt;/code&gt;，禁用 Cilium L7 策略管理的工作负载的 Istio mTLS。&lt;/li&gt;
&lt;li&gt;Ambient：通过从命名空间移除 &lt;code&gt;istio.io/dataplane-mode&lt;/code&gt; 标签，或为 Cilium L7 策略管理的 Pod 添加 &lt;code&gt;ambient.istio.io/redirection: disabled&lt;/code&gt; 注解，将工作负载从 Istio 环境中移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;否则，Istio 管理的工作负载之间的流量将由 Istio 使用 mTLS 加密，并且 Cilium 无法访问这些流量以执行 L7 策略。&lt;/p&gt;
&lt;p&gt;如果使用 Istio 的 L7 HTTP 策略控制，策略将在 Istio 中管理，不需要禁用工作负载之间的 mTLS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在 Ambient 模式下使用 Istio mTLS 与 Istio L7 HTTP 策略控制，Istio 管理的工作负载之间的流量将通过 &lt;a href=&#34;https://istio.io/latest/docs/ops/ambient/usage/traffic-redirection/&#34; title=&#34;端口 15008 加密并隧道传输进出 Pod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;端口 15008 加密并隧道传输进出 Pod&lt;/a&gt;。在这种情况下，Cilium 的 NetworkPolicy 仍将适用于进出 Istio 管理的 Pod 的加密隧道 L4 流量，但 Cilium 无法看到该隧道和加密的 L4 流量的实际来源和目的地，或任何 L7 信息。这意味着应使用 Istio 在 L4 或以上级别为 Istio 管理、mTLS 加固的工作负载之间的流量执行策略。流入 Istio 管理工作负载的非 Istio 管理工作负载的流量不会被隧道或加密处理。因此，这部分流量仍然完全受到 Cilium 强制实施的 Kubernetes 网络策略的约束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当在 Sidecar 模式下使用 Istio 与 &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection&#34; title=&#34;自动 Sidecar 注入&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动 Sidecar 注入&lt;/a&gt; 结合 Cilium 的 overlay 模式（VXLAN 或 GENEVE）时，&lt;code&gt;istiod&lt;/code&gt; Pod 必须运行在 &lt;code&gt;hostNetwork: true&lt;/code&gt; 下，以便 API 服务器能够访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;演示应用程序使用-cilium-与-istio-ambient-模式&#34;&gt;演示应用程序（使用 Cilium 与 Istio Ambient 模式）&lt;/h2&gt;
&lt;p&gt;下面的指南展示了在使用 Cilium L7 HTTP 策略控制而不是 Istio L7 HTTP 策略控制的情况下，Istio 的 Ambient &lt;code&gt;mTLS&lt;/code&gt; 模式与 Cilium 网络策略的交互，包括在 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/istio/#gsg-istio-cnp&#34; title=&#34;Istio 配置&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 配置&lt;/a&gt; 部分描述的注意事项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先决条件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Istio 已在本地 Kubernetes 集群上安装。&lt;/li&gt;
&lt;li&gt;Cilium 已安装，并配置了 &lt;code&gt;socketLB.hostNamespaceOnly&lt;/code&gt; 和 &lt;code&gt;cni.exclusive=false&lt;/code&gt; 的 Helm 值。&lt;/li&gt;
&lt;li&gt;Istio 的 &lt;code&gt;istioctl&lt;/code&gt; 已在本地主机上安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先，在三个不同的命名空间中部署一组 web 服务器和客户端应用程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns red
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace red istio.io/dataplane-mode&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ambient
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n red apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/httpbin.yaml&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n red apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/netshoot.yaml&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns blue
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace blue istio.io/dataplane-mode&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ambient
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/httpbin.yaml&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/netshoot.yaml&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns green
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n green apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/netshoot.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，Istio 以 &lt;code&gt;PERMISSIVE&lt;/code&gt; 模式工作，允许 Istio 管理和未管理的 Pod 之间相互发送和接收未加密的流量。你可以通过输入以下命令来测试前面示例中部署的客户端和服务器应用程序之间的连通性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n red deploy/netshoot -- curl http://httpbin.red/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n blue deploy/netshoot -- curl http://httpbin.red/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n green deploy/netshoot -- curl http://httpbin.red/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n red deploy/netshoot -- curl http://httpbin.blue/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n blue deploy/netshoot -- curl http://httpbin.blue/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n green deploy/netshoot -- curl http://httpbin.blue/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所有命令应成功完成：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: 200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以应用 Cilium 强制的 L4 NetworkPolicy 来限制命名空间之间的通信。下面的命令应用了一个 L4 网络策略，该策略限制了 &lt;code&gt;blue&lt;/code&gt; 命名空间中的通信，只允许来自 &lt;code&gt;blue&lt;/code&gt; 和 &lt;code&gt;red&lt;/code&gt; 命名空间的客户端。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/l4-policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新运行相同的连通性检查，以确认预期结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: 000
command terminated with exit code 28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后你可以决定增强相同的网络策略，以执行额外的基于 HTTP 的检查。以下命令应用了一个允许仅与 &lt;code&gt;/ip&lt;/code&gt; URL 路径通信的 Cilium L7 网络策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/l7-policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，由于 Cilium 代理（HTTP）干扰了 Istio 的基于 mTLS 的 HTTPS 连接，&lt;code&gt;blue&lt;/code&gt; 命名空间的所有通信都中断了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: 000
command terminated with exit code 28
client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: 000
command terminated with exit code 28
client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: 000
command terminated with exit code 28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了解决问题并允许 Cilium 管理 L7 策略，你必须通过配置新策略来禁用 Istio 的 mTLS 身份验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PeerAuthentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mtls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DISABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你必须将此策略应用于实施基于 HTTP 的网络策略的同一命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/authn.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新运行连通性检查，确认 &lt;code&gt;blue&lt;/code&gt; 命名空间的通信已恢复。你可以通过访问不同的 URL 路径来验证 Cilium 是否正在执行 L7 网络策略，例如 &lt;code&gt;/deny&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n red deploy/netshoot -- curl http://httpbin.blue/deny -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client &lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; to server &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;403&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;示例应用程序使用-cilium-的-istio-sidecar-模式&#34;&gt;示例应用程序（使用 Cilium 的 Istio Sidecar 模式）&lt;/h2&gt;
&lt;p&gt;以下指南展示了 Istio 的 Sidecar 模式下的 &lt;code&gt;mTLS&lt;/code&gt; 与 Cilium 网络策略的交互情况，以及使用 Cilium L7 HTTP 策略控制而非 Istio L7 HTTP 策略控制时的注意事项，具体描述在 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/istio/#gsg-istio-cnp&#34; title=&#34;Istio 配置&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 配置&lt;/a&gt; 部分关于禁用 &lt;code&gt;mTLS&lt;/code&gt; 的说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先决条件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Istio 已经在本地 Kubernetes 集群上安装。&lt;/li&gt;
&lt;li&gt;Cilium 已经使用 &lt;code&gt;socketLB.hostNamespaceOnly&lt;/code&gt; 和 &lt;code&gt;cni.exclusive=false&lt;/code&gt; 的 Helm 值安装。&lt;/li&gt;
&lt;li&gt;Istio 的 &lt;code&gt;istioctl&lt;/code&gt; 已经在本地主机上安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从部署一组 Web 服务器和客户端应用程序开始，跨三个不同的命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns red
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n red apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/httpbin.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; istioctl kube-inject -f -&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n red apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/netshoot.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; istioctl kube-inject -f -&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns blue
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/httpbin.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; istioctl kube-inject -f -&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/netshoot.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; istioctl kube-inject -f -&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns green
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n green apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/netshoot.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，Istio 以 &lt;code&gt;PERMISSIVE&lt;/code&gt; 模式工作，允许 Istio 管理的和没有 sidecar 的 Pod 之间互相发送和接收未加密的流量。你可以通过输入以下命令测试上述示例中部署的客户端和服务器应用程序之间的连通性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n red deploy/netshoot -- curl http://httpbin.red/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n blue deploy/netshoot -- curl http://httpbin.red/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n green deploy/netshoot -- curl http://httpbin.red/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n red deploy/netshoot -- curl http://httpbin.blue/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n blue deploy/netshoot -- curl http://httpbin.blue/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n green deploy/netshoot -- curl http://httpbin.blue/ip -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所有命令应成功完成：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: 200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以实施网络策略，以限制命名空间之间的通信。以下命令应用了一个由 Cilium 管理的 L4 网络策略，该策略限制 &lt;code&gt;blue&lt;/code&gt; 命名空间内的通信，仅允许来自 &lt;code&gt;blue&lt;/code&gt; 和 &lt;code&gt;red&lt;/code&gt; 命名空间的客户端。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/l4-policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新运行相同的连通性检查，以确认预期结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: 000
command terminated with exit code 28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，你可以决定增强相同的网络策略，以执行其他由 Cilium 管理的基于 HTTP 的检查。以下命令应用了 Cilium L7 网络策略，只允许与 &lt;code&gt;/ip&lt;/code&gt; URL 路径的通信：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/l7-policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，&lt;code&gt;blue&lt;/code&gt; 命名空间的所有通信都中断了，因为 Cilium 代理（HTTP）干扰了 Istio 的基于 mTLS 的 HTTPS 连接：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;client &amp;#39;red&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;blue&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;green&amp;#39; to server &amp;#39;red&amp;#39;: 200
client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: 503
client &amp;#39;blue&amp;#39; to server &amp;#39;blue&amp;#39;: 503
client &amp;#39;green&amp;#39; to server &amp;#39;blue&amp;#39;: 000
command terminated with exit code 28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为解决问题并允许 Cilium 管理 L7 策略，你必须通过配置新策略来禁用 Istio 的 mTLS 身份验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PeerAuthentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mtls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DISABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你必须将此策略应用到实施基于 HTTP 的网络策略的同一命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n blue apply -f https://raw.githubusercontent.com/cilium/cilium/1.16.1/examples/kubernetes-istio/authn.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新运行连通性检查，确认与 &lt;code&gt;blue&lt;/code&gt; 命名空间的通信已恢复。你可以验证 Cilium 正在执行 L7 网络策略，例如通过访问不同的 URL 路径 &lt;code&gt;/deny&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n red deploy/netshoot -- curl http://httpbin.blue/deny -s -o /dev/null -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;client &amp;#39;red&amp;#39; to server &amp;#39;blue&amp;#39;: %{http_code}\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;client &lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; to server &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;403&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cilium-和-istio-的-l7-流量管理功能可以同时使用吗&#34;&gt;Cilium 和 Istio 的 L7 流量管理功能可以同时使用吗？&lt;/h2&gt;
&lt;p&gt;不推荐同时使用 Istio 和 Cilium 的 L7 流量管理功能。因为同时使用这两个系统的 L7 流量管理功能可能会导致“脑裂”问题，即两个系统可能会对同一流量进行不同的处理，导致不一致的行为。&lt;/p&gt;
&lt;p&gt;具体来说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Istio 的 L7 流量管理&lt;/strong&gt;：Istio 提供了强大的 L7 流量管理功能，通过其 Sidecar 代理或 Ambient 模式对流量进行控制、路由和监控。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cilium 的 L7 流量管理&lt;/strong&gt;：Cilium 也提供了 L7 流量管理功能，主要通过 eBPF 实现，能够对网络层和应用层的流量进行深度包检测和策略控制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么不推荐同时使用&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你同时启用了 Istio 和 Cilium 的 L7 流量管理，可能会出现冲突。比如，Istio 的 mTLS 加密会使得 Cilium 无法解析和管理加密后的 L7 流量，这样会导致 Cilium 的 L7 策略无法生效。&lt;/li&gt;
&lt;li&gt;两者的策略可能会相互覆盖或冲突，导致不可预见的行为和网络问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;推荐的做法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择使用其中一个工具的 L7 流量管理功能，而让另一个工具在 L3/L4 层或其他方面提供支持。&lt;/li&gt;
&lt;li&gt;如果选择使用 Cilium 的 L7 流量管理功能，需要禁用 Istio 的 mTLS 或将相关工作负载从 Istio 的控制中移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，为避免复杂性和潜在的问题，通常建议在同一套系统中只使用一个工具的 L7 流量管理功能。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>双向认证（测试版）</title>
      <link>https://jimmysong.io/book/cilium-handbook/servicemesh/mutual-authentication/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cilium-handbook/servicemesh/mutual-authentication/</guid>
      <description>
        
        
        


&lt;div class=&#34;alert alert-warning-container&#34;&gt;
  
  &lt;div class=&#34;alert-warning-title px-2 py-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-warning px-2&#34;&gt;
    &lt;p&gt;这是一个测试功能。如果你在使用中遇到任何问题，请提供反馈并在 GitHub 上提交问题。&lt;/p&gt;
&lt;p&gt;该功能尚未完全完成，请查看的&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/mutual-authentication/mutual-authentication/#mutual-auth-roadmap&#34; title=&#34;详细路线图状态&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;详细路线图状态&lt;/a&gt;了解更多详情。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;双向认证和-mtls-背景&#34;&gt;双向认证和 mTLS 背景&lt;/h2&gt;
&lt;p&gt;双向传输层安全性（mTLS）是一种机制，它确保了网络上两个实体之间交换的数据的真实性、完整性和机密性。&lt;/p&gt;
&lt;p&gt;与传统的 TLS 不同，后者涉及单向认证过程，其中客户端验证服务器的身份，双向 TLS 通过要求客户端和服务器相互认证，增加了额外的安全层。&lt;/p&gt;
&lt;p&gt;双向 TLS 的目的是为服务到服务的通信提供认证、机密性和完整性。&lt;/p&gt;
&lt;h2 id=&#34;cilium-中的双向认证&#34;&gt;Cilium 中的双向认证&lt;/h2&gt;
&lt;p&gt;Cilium 的基于 mTLS 的双向认证支持，将双向认证握手带到常规连接的外部。&lt;/p&gt;
&lt;p&gt;为了满足服务到服务认证和加密的大多数常见要求，用户必须启用加密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cilium 的加密功能，&lt;a href=&#34;https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg&#34; title=&#34;WireGuard 透明加密&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WireGuard 透明加密&lt;/a&gt; 和 &lt;a href=&#34;https://docs.cilium.io/en/stable/security/network/encryption-ipsec/#encryption-ipsec&#34; title=&#34;IPsec 透明加密&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPsec 透明加密&lt;/a&gt;，可以启用以自动在 Pod 之间创建和维护加密连接。&lt;/p&gt;
&lt;p&gt;为了应对动态和异构环境中身份验证的挑战，双向认证需要一个安全的身份验证框架，用于分布式系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要了解更多关于 Cilium 服务网格的双向认证架构，请阅读&lt;a href=&#34;https://github.com/cilium/design-cfps/blob/main/cilium/CFP-22215-mutual-auth-for-service-mesh.md&#34; title=&#34;CFP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CFP&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;身份管理&#34;&gt;身份管理&lt;/h2&gt;
&lt;p&gt;在 Cilium 当前的双向认证支持中，通过使用 SPIFFE（Secure Production Identity Framework for Everyone）提供身份管理。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-的好处&#34;&gt;SPIFFE 的好处&lt;/h3&gt;
&lt;p&gt;以下是 &lt;a href=&#34;https://spiffe.io/&#34; title=&#34;SPIFFE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt; 提供的一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可信的身份发放：SPIFFE 提供了一个标准化的机制来发放和管理身份。它确保分布式系统中的每个服务都接收到唯一且可验证的身份，即使在服务可能频繁扩展或缩小的动态环境中。&lt;/li&gt;
&lt;li&gt;身份认证：SPIFFE 允许服务通过认证来证明它们的身份。它确保服务可以通过提供关于其身份的可验证证据（如数字签名或加密证明）来展示其真实性和完整性。&lt;/li&gt;
&lt;li&gt;动态和可扩展的环境：SPIFFE 应对动态环境中身份管理的挑战。它支持自动身份发放、轮换和撤销，这些在云原生架构中至关重要，因为服务可能会不断地部署、更新或退役。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cilium-和-spiffe&#34;&gt;Cilium 和 SPIFFE&lt;/h3&gt;
&lt;p&gt;SPIFFE 提供了一个 API 模型，允许工作负载从中央服务器请求身份。在我们的案例中，工作负载意味着与 Cilium 安全身份相同的东西 — 一组由标签集描述的 Pods。SPIFFE 身份是 URI 的一个子类，看起来像这样：&lt;code&gt;spiffe://trust.domain/path/with/encoded/info&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;SPIFFE 设置的两个主要部分是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个中央 SPIRE 服务器，形成信任域的根。&lt;/li&gt;
&lt;li&gt;每个节点的 SPIRE 代理，首先从 SPIRE 服务器获得自己的身份，然后验证其节点上运行的工作负载的身份请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个工作负载想要获得其身份时，通常在启动时，它会使用 SPIFFE 工作负载 API 连接到本地 SPIRE 代理，并向代理描述自己。&lt;/p&gt;
&lt;p&gt;SPIRE 代理然后检查工作负载是否真的是它所声称的那样，然后连接到 SPIRE 服务器并证明工作负载正在请求一个身份，并且该请求是有效的。&lt;/p&gt;
&lt;p&gt;SPIRE 代理会检查许多关于工作负载的事情，比如该 Pod 是否真的在它来自的节点上运行，标签是否匹配等。&lt;/p&gt;
&lt;p&gt;一旦 SPIRE 代理从 SPIRE 服务器请求了一个身份，它就会以 SVID (SPIFFE Verified Identity Document) 格式将其传回给工作负载。这份文档包括 X.509 版本的 TLS 密钥对。&lt;/p&gt;
&lt;p&gt;在 SPIRE 的通常流程中，工作负载会从 SPIRE 服务器请求其自身的信息。在 Cilium 对 SPIFFE 的支持中，Cilium 代理获得一个公共的 SPIFFE 身份，并且可以代表其他工作负载请求身份。&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Cilium 的 L7 感知流量管理</title>
      <link>https://jimmysong.io/book/cilium-handbook/servicemesh/l7-traffic-management/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/book/cilium-handbook/servicemesh/l7-traffic-management/</guid>
      <description>
        
        
        &lt;p&gt;Cilium 提供了通过 CRDs（如 &lt;code&gt;CiliumEnvoyConfig&lt;/code&gt; 和 &lt;code&gt;CiliumClusterwideEnvoyConfig&lt;/code&gt;）控制 L7 流量的方式。&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;必须配置 Cilium 以启用 NodePort，使用 &lt;code&gt;nodePort.enabled=true&lt;/code&gt; 或通过启用 kube-proxy 替换 &lt;code&gt;kubeProxyReplacement=true&lt;/code&gt;。有关更多信息，请参阅 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/#kubeproxy-free&#34; title=&#34;kube-proxy 替换&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kube-proxy 替换&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CiliumEnvoyConfig&lt;/code&gt; 资源只进行了最小验证，并且没有定义的冲突解决行为。这意味着如果你创建了多个修改 Envoy 配置相同部分的 CECs，结果可能是不可预测的。&lt;/li&gt;
&lt;li&gt;除了这种最小验证之外，&lt;code&gt;CiliumEnvoyConfig&lt;/code&gt; 对配置的正确性也几乎没有向用户反馈。因此，如果 CEC 导致了不希望的结果，故障排查将需要检查 Envoy 配置和日志，而不是能够查看有问题的 &lt;code&gt;CiliumEnvoyConfig&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CiliumEnvoyConfig&lt;/code&gt; 由 Cilium 的入口和网关 API 支持使用，以通过每个节点的 Envoy 代理指导流量。如果你创建了与自动生成的配置冲突或修改的 CECs，结果可能是不可预测的。在这些用例中使用 CECs 时要非常小心。通过确保 Cilium 生成的所有配置在语义上有效，管理上述风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;使用 helm 标志 &lt;code&gt;ingressController.enabled=true&lt;/code&gt; 可启用 Cilium 入口控制器。有关新安装，请参考&lt;a href=&#34;https://docs.cilium.io/en/stable/installation/k8s-install-helm/#k8s-install-helm&#34; title=&#34;使用 Helm 安装&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Helm 安装&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm upgrade cilium cilium/cilium --version 1.16.1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --namespace kube-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --reuse-values &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --set ingressController.enabled&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --set ingressController.loadbalancerMode&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;dedicated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n kube-system rollout restart deployment/cilium-operator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n kube-system rollout restart ds/cilium
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过设置 &lt;code&gt;--set ingressController.default=true&lt;/code&gt; 标志，Cilium 可以成为默认的入口控制器。这将即使没有设置 &lt;code&gt;ingressClass&lt;/code&gt; 也会创建入口条目。&lt;/p&gt;
&lt;p&gt;如果你只想使用 Envoy 流量管理功能而不支持入口，你应该只启用 &lt;code&gt;--enable-envoy-config&lt;/code&gt; 标志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm upgrade cilium cilium/cilium --version 1.16.1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --namespace kube-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --reuse-values &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --set envoyConfig.enabled&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n kube-system rollout restart deployment/cilium-operator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n kube-system rollout restart ds/cilium
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，代理负载均衡功能可以通过 &lt;code&gt;loadBalancer.l7.backend=envoy&lt;/code&gt; 标志进行配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm upgrade cilium cilium/cilium --version 1.16.1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --namespace kube-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --reuse-values &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --set loadBalancer.l7.backend&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n kube-system rollout restart deployment/cilium-operator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n kube-system rollout restart ds/cilium
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来你可以检查 Cilium 代理和 Operator 的状态：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cilium status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;确保你安装了 &lt;a href=&#34;https://github.com/cilium/cilium-cli/releases/tag/v0.15.0&#34; title=&#34;cilium-cli v0.15.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cilium-cli v0.15.0&lt;/a&gt; 或更高版本。其余的指令与较旧版本的 cilium-cli 不兼容。要确认你的系统中安装的 cilium-cli 版本，请运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cilium version --client
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关更多详细信息，请参阅 &lt;a href=&#34;https://docs.cilium.io/en/stable/operations/upgrade/#upgrade-cilium-cli-helm-mode&#34; title=&#34;Cilium CLI 升级说明&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium CLI 升级说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Hubble CLI 也用于后续步骤中观察流量。&lt;/p&gt;
&lt;h3 id=&#34;支持的-envoy-api-版本&#34;&gt;支持的 Envoy API 版本&lt;/h3&gt;
&lt;p&gt;目前只支持 Envoy API v3。&lt;/p&gt;
&lt;h3 id=&#34;支持的-envoy-扩展资源类型&#34;&gt;支持的 Envoy 扩展资源类型&lt;/h3&gt;
&lt;p&gt;Envoy 扩展是可能内置或不内置于 Envoy 构建中的资源类型。在 Envoy 文档中提到的标准类型，如 &lt;code&gt;type.googleapis.com/envoy.config.listener.v3.Listener&lt;/code&gt; 和 &lt;code&gt;type.googleapis.com/envoy.config.route.v3.RouteConfiguration&lt;/code&gt;，始终可用。&lt;/p&gt;
&lt;p&gt;Cilium 节点部署了一个 Envoy 镜像以支持 Cilium 的 HTTP 策略执行和可观测性。这个 Envoy 构建针对 Cilium Agent 的需求进行了优化，并没有包含 Envoy 代码库中许多可用的 Envoy 扩展。&lt;/p&gt;
&lt;p&gt;要查看哪些 Envoy 扩展可用，请查看 &lt;a href=&#34;https://github.com/cilium/proxy/blob/main/envoy_build_config/extensions_build_config.bzl&#34; title=&#34;Envoy 扩展配置文件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 扩展配置文件&lt;/a&gt;。只有没有用 &lt;code&gt;#&lt;/code&gt; 注释掉的扩展会内置到 Cilium Envoy 镜像中。我们将根据用户反馈发展内置扩展的列表。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;请参考以下示例了解如何使用和利用 Cilium 的入口功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/envoy-custom-listener/&#34; title=&#34;L7 路径转换&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;L7 路径转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/envoy-traffic-management/&#34; title=&#34;L7 负载平衡和 URL 重写&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;L7 负载平衡和 URL 重写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/envoy-circuit-breaker/&#34; title=&#34;L7 断路器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;L7 断路器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/envoy-load-balancing/&#34; title=&#34;Kubernetes 服务的代理负载平衡（测试版）&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 服务的代理负载平衡（测试版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/network/servicemesh/envoy-traffic-shifting/&#34; title=&#34;L7 流量转移&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;L7 流量转移&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

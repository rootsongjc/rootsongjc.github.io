<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – 网络安全</title>
    <link>https://jimmysong.io/book/cilium-handbook/security/</link>
    <description>Recent content in 网络安全 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 17 Jun 2022 12:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/cilium-handbook/security/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>介绍</title>
      <link>https://jimmysong.io/book/cilium-handbook/security/intro/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/security/intro/</guid>
      <description>
        
        
        &lt;p&gt;Cilium 在多个层面上提供安全性。可以单独使用或组合使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../identity/&#34; title=&#34;基于身份&#34;&gt;基于身份&lt;/a&gt;：端点之间的连接策略（三层），例如任何带有标签的端点 &lt;code&gt;role=frontend&lt;/code&gt; 都可以连接到任何带有标签的端点 &lt;code&gt;role=backend&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;限制传入和传出连接的可访问端口（四层），例如带标签的端点 &lt;code&gt;role=frontend&lt;/code&gt;只能在端口 443（https）上进行传出连接，端点&lt;code&gt;role=backend&lt;/code&gt; 只能接受端口 443（https）上的连接。&lt;/li&gt;
&lt;li&gt;应用程序协议级别的细粒度访问控制，以保护 HTTP 和远程过程调用（RPC）协议，例如带有标签的端点 &lt;code&gt;role=frontend&lt;/code&gt; 只能执行 REST API 调用 &lt;code&gt;GET /userdata/[0-9]+&lt;/code&gt;，所有其他与 &lt;code&gt;role=backend&lt;/code&gt; API 的交互都受到限制。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>基于身份</title>
      <link>https://jimmysong.io/book/cilium-handbook/security/identity/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/security/identity/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 等容器管理系统部署了一个网络模型，该模型为每个 pod（容器组）分配一个单独的 IP 地址。这确保了架构的简单性，避免了不必要的网络地址转换（NAT），并为每个单独的容器提供了全范围的端口号以供使用。这种模型的逻辑结果是，根据集群的大小和 pod 的总数，网络层必须管理大量的 IP 地址。&lt;/p&gt;
&lt;p&gt;在传统上，安全策略基于 IP 地址过滤器。下面是一个简单的例子。如果所有具有标签 &lt;code&gt;role=frontend&lt;/code&gt; 的 pod 应该被允许发起与所有具有标签 &lt;code&gt;role=backend&lt;/code&gt; 的 pod 的连接，那么每个运行至少一个具有标签 &lt;code&gt;role=backend&lt;/code&gt; 的 pod 的集群节点必须安装一个相应的过滤器，允许所有 &lt;code&gt;role=frontend&lt;/code&gt; pod 的所有 IP 地址发起与所有本地 &lt;code&gt;role=backend&lt;/code&gt; pod 的 IP 地址的连接。所有其他的连接请求都应该被拒绝。这可能看起来像这样。如果目标地址是 &lt;code&gt;10.1.1.2&lt;/code&gt;，那么只有当源地址是下列之一时才允许连接 &lt;code&gt;[10.1.2.2,10.1.2.3,20.4.9.1]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;每次启动或停止带有 &lt;code&gt;role=frontend&lt;/code&gt; 或 &lt;code&gt;role=backend&lt;/code&gt; 标签的新 pod 时，必须更新运行任何此类 pod 的每个集群节点的规则，从允许的 IP 地址列表中添加或删除相应的 IP 地址。在大型分布式应用中，这可能意味着每秒多次更新数以千计的集群节点，这取决于部署的 pod 的流失率。更糟糕的是，新的 &lt;code&gt;role=frontend&lt;/code&gt; pod 的启动必须推迟到所有运行 &lt;code&gt;role=backend&lt;/code&gt; pod 的服务器都被更新了新的安全规则之后，否则来自新 pod 的连接尝试可能会被错误地放弃。这使得它难以有效地扩展。&lt;/p&gt;
&lt;p&gt;为了避免这些可能限制扩展性和灵活性的复杂情况，Cilium 将安全与网络寻址分开。相反，安全是基于 pod 的身份，它是通过标签得出的。这个身份可以在 pod 之间共享。这意味着，当第一个 &lt;code&gt;role=frontend&lt;/code&gt; pod 启动时，Cilium 会给该 pod 分配一个身份，然后允许它与 &lt;code&gt;role=backend&lt;/code&gt; pod 的身份发起连接。随后启动额外的 &lt;code&gt;role=frontend&lt;/code&gt; pod 只需要通过键值存储来解决这个身份，不需要在任何承载 &lt;code&gt;role=backend&lt;/code&gt; pod 的集群节点上执行任何操作。一个新的 pod 的启动必须只延迟到 pod 的身份被解决，这比更新所有其他集群节点上的安全规则要简单得多。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cilium-handbook/security/identity/identity_hu652ccae9dccb37be024dd56cfdd7b4c3_84551_1346x632_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cilium-handbook/security/identity/identity.png&#34; data-img=&#34;/book/cilium-handbook/security/identity/identity.png&#34; data-width=&#34;1346&#34; data-height=&#34;632&#34; alt=&#34;image&#34; data-caption=&#34;基于身份的安全示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;基于身份的安全示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>策略执行</title>
      <link>https://jimmysong.io/book/cilium-handbook/security/policyenforcement/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/security/policyenforcement/</guid>
      <description>
        
        
        &lt;p&gt;所有安全策略的描述都是假设基于会话协议的有状态策略执行。这意味着策略的意图是描述允许的连接建立方向。如果策略允许&lt;code&gt;A =&amp;gt; B&lt;/code&gt;，那么从 B 到 A 的回复数据包也会被自动允许。但是，并不自动允许 B 向 A 发起连接。如果希望得到这种结果，那么必须明确允许这两个方向。&lt;/p&gt;
&lt;p&gt;安全策略可以在 ingress 或 egress 处执行。对于 ingress，这意味着每个集群节点验证所有进入的数据包，并确定数据包是否被允许传输到预定的终端。相应地，对于 egress，每个集群节点验证出站数据包，并确定是否允许将数据包传输到预定目的地。&lt;/p&gt;
&lt;p&gt;为了在多主机集群中执行基于身份的安全，发送端点的身份被嵌入到集群节点之间传输的每个网络数据包中。然后，接收集群节点可以提取该身份，并验证一个特定的身份是否被允许与任何本地端点进行通信。&lt;/p&gt;
&lt;h2 id=&#34;默认安全策略&#34;&gt;默认安全策略&lt;/h2&gt;
&lt;p&gt;如果没有加载任何策略，默认行为是允许所有通信，除非明确启用了策略执行。一旦加载了第一条策略规则，就会自动启用策略执行，然后任何通信必须是白名单，否则相关数据包将被丢弃。&lt;/p&gt;
&lt;p&gt;同样，如果一个端点不受制于四层策略，则允许与所有端口进行通信。将至少一个 四层策略与一个端点相关联，将阻止与端口的所有连接，除非明确允许。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>代理注入</title>
      <link>https://jimmysong.io/book/cilium-handbook/security/proxy/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/security/proxy/</guid>
      <description>
        
        
        &lt;p&gt;Cilium 能够透明地将四层代理注入任何网络连接中。这被用作执行更高级别网络策略的基础（请参阅&lt;a href=&#34;https://docs.cilium.io/en/stable/policy/language/#dns-based&#34; title=&#34;基于 DNS &#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 DNS &lt;/a&gt;和 &lt;a href=&#34;https://docs.cilium.io/en/stable/policy/language/#l7-policy&#34; title=&#34;七层示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;七层示例&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;可以注入以下代理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注入-envoy-代理&#34;&gt;注入 Envoy 代理&lt;/h2&gt;



&lt;div class=&#34;alert alert-note-container&#34;&gt;
  
  &lt;div class=&#34;alert-note-title px-2&#34;&gt;
    注意
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note px-2&#34;&gt;
    此功能目前正处于测试阶段。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;如果你有兴趣编写 Envoy 代理的 Go 扩展，请参考&lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/security/proxy/envoy/&#34; title=&#34;开发者指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开发者指南&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/book/cilium-handbook/security/proxy/proxylib_logical_flow_hu5e28db2a39e7f77eb690f4da66ad16d3_91918_1090x627_resize_q75_h2_lanczos_3.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/book/cilium-handbook/security/proxy/proxylib_logical_flow.png&#34; data-img=&#34;/book/cilium-handbook/security/proxy/proxylib_logical_flow.png&#34; data-width=&#34;1090&#34; data-height=&#34;627&#34; alt=&#34;image&#34; data-caption=&#34;Envoy 代理注入示意图&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy 代理注入示意图&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;如上所述，该框架允许开发人员编写少量 Go 代码（绿色框），专注于解析新的 API 协议，并且该 Go 代码能够充分利用 Cilium 功能，包括高性能重定向 Envoy、丰富的七层感知策略语言和访问日志记录，以及通过 kTLS 对加密流量的可视性（即将推出）。总而言之，作为开发者的你只需要关心解析协议的逻辑，Cilium + Envoy + eBPF 就完成了繁重的工作。&lt;/p&gt;
&lt;p&gt;本指南基于假设的 &lt;code&gt;r2d2&lt;/code&gt; 协议（参见 &lt;a href=&#34;https://github.com/cilium/cilium/blob/master/proxylib/r2d2/r2d2parser.go&#34; title=&#34;proxylib/r2d2/r2d2parser.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proxylib/r2d2/r2d2parser.go&lt;/a&gt;）的简单示例，该协议可用于很久以前在遥远的星系中与简单的协议机器人对话。但它也指向了 &lt;code&gt;cilium/proxylib&lt;/code&gt; 目录中已经存在的其他真实协议，例如 Memcached 和 Cassandra。&lt;/p&gt;
&lt;div class=&#34;cta-group&#34;&gt;
  
    &lt;a href=&#34;../../ebpf&#34;  class=&#34;btn btn-sm btn-primary&#34;&gt;下一章&lt;/a&gt;
  
  
&lt;/dv&gt;


      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Kubernetes 集成</title>
    <link>https://jimmysong.io/book/cilium-handbook/kubernetes/</link>
    <description>Recent content in Kubernetes 集成 on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 17 Jun 2022 12:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/book/cilium-handbook/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kubernetes 集成介绍</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/intro/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/intro/</guid>
      <description>
        
        
        &lt;h2 id=&#34;cilium-能为-kubernetes-集群提供什么&#34;&gt;Cilium 能为 Kubernetes 集群提供什么？&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 集群中运行 Cilium 时提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/glossary/#term-cni&#34; title=&#34;CNI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI&lt;/a&gt;
 插件支持，为 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/intro/#pod-connectivity&#34; title=&#34;pod 连接&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pod 连接&lt;/a&gt;
 提供 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/networking/#multi-host-networking&#34; title=&#34;联网&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联网&lt;/a&gt;
。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#networkpolicy&#34; title=&#34;NetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetworkPolicy&lt;/a&gt;
 资源的基于身份的实现，用于隔离三层和四层网络  &lt;a href=&#34;https://docs.cilium.io/en/stable/glossary/#term-pod&#34; title=&#34;pod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pod&lt;/a&gt;
 的连接。&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;CustomResourceDefinition&lt;/code&gt; 形式对 &lt;code&gt;NetworkPolicy&lt;/code&gt; 的扩展，扩展策略控制以添加：
&lt;ul&gt;
&lt;li&gt;针对以下应用协议的入口和出口执行七层策略：
&lt;ul&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;Kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对 CIDR 的出口支持以保护对外部服务的访问&lt;/li&gt;
&lt;li&gt;强制外部无头服务自动限制为服务配置的 Kubernetes 端点集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ClusterIP 实现为 pod 到 pod 的流量提供分布式负载平衡&lt;/li&gt;
&lt;li&gt;完全兼容现有的 kube-proxy 模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod-间连接&#34;&gt;Pod 间连接&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，容器部署在称为 pod 的单元中，其中包括一个或多个可通过单个 IP 地址访问的容器。使用 Cilium，每个 pod 从运行 pod 的 Linux 节点的节点前缀中获取一个 IP 地址。有关其他详细信息，请参阅 &lt;a href=&#34;../../networking/ipam/#address-management&#34; title=&#34;IP 地址管理（IPAM）&#34;&gt;IP 地址管理（IPAM）&lt;/a&gt;
。在没有任何网络安全策略的情况下，所有的 pod 都可以互相访问。&lt;/p&gt;
&lt;p&gt;Pod IP 地址通常位于 Kubernetes 集群本地。如果 pod 需要作为客户端访问集群外部的服务，则网络流量在离开节点时会自动伪装。&lt;/p&gt;
&lt;h2 id=&#34;服务负载均衡&#34;&gt;服务负载均衡&lt;/h2&gt;
&lt;p&gt;Kubernetes 开发了服务抽象，它为用户提供了将网络流量负载平衡到不同 pod 的能力。这种抽象允许 pod 通过单个 IP 地址（一个虚拟 IP 地址）与其他 pod 联系，而无需知道所有运行该特定服务的 pod。&lt;/p&gt;
&lt;p&gt;如果没有 Cilium，kube-proxy 会安装在每个节点上，监视 kube-master 上的端点和服务的添加和删除，这允许它在 iptables 上应用必要的强制策略执行。因此，从 pod 接收和发送到的流量被正确地路由到为该服务服务的节点和端口。有关更多信息，您可以查看服务的 Kubernetes 用户 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34; title=&#34;指南&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;指南&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;在实现 ClusterIP 时，Cilium 的行为与 kube-proxy 相同，它监视服务的添加或删除，但不是在 iptables 上执行，而是更新每个节点上的 eBPF 映射条目。有关更多信息，请参阅 &lt;a href=&#34;https://github.com/cilium/cilium/pull/109&#34; title=&#34;GItHub PR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GItHub PR&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;延伸阅读&#34;&gt;延伸阅读&lt;/h2&gt;
&lt;p&gt;Kubernetes 文档包含有关 &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/&#34; title=&#34;Kubernetes 网络模型&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 网络模型&lt;/a&gt;
和 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/&#34; title=&#34;Kubernetes 网络插件&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 网络插件&lt;/a&gt;
的更多背景信息。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>概念</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/concepts/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/concepts/</guid>
      <description>
        
        
        &lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;
&lt;p&gt;标准 Cilium Kubernetes 部署的配置包括几个 Kubernetes 资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DaemonSet &lt;/code&gt; 资源：描述部署到每个 Kubernetes 节点的 Cilium pod。这个 pod 运行 &lt;code&gt;cilium-agent&lt;/code&gt; 和相关的守护进程。这个 DaemonSet 的配置包括指示 Cilium docker 容器的确切版本（例如 v1.0.0）的镜像标签和传递给 &lt;code&gt;cilium-agent&lt;/code&gt; 的命令行选项。&lt;/li&gt;
&lt;li&gt;资源：描述传递给 &lt;code&gt;cilium-agent&lt;/code&gt; 的&lt;code&gt;ConfigMap&lt;/code&gt; 常用配置值，例如 kvstore 端点和凭据、启用/禁用调试模式等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServiceAccount&lt;/code&gt;、&lt;code&gt;ClusterRole&lt;/code&gt; 和 &lt;code&gt;ClusterRoleBindings 资源：当启用 Kubernetes RBAC 时，&lt;/code&gt;cilium-agent` 用于访问 Kubernetes API 服务器的身份和权限。&lt;/li&gt;
&lt;li&gt;资源：如果 &lt;code&gt;Secret&lt;/code&gt; 需要，描述用于访问 etcd kvstore 的凭据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;现有-pod-的联网&#34;&gt;现有 Pod 的联网&lt;/h2&gt;
&lt;p&gt;如果在部署 Cilium 之前 pod 已经在运行 &lt;a href=&#34;https://docs.cilium.io/en/stable/glossary/#term-daemonset&#34; title=&#34;DaemonSet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DaemonSet&lt;/a&gt;
，这些 pod 仍将根据 CNI 配置使用以前的网络插件连接。一个典型的例子是默认运行在 &lt;code&gt;kube-system&lt;/code&gt; 命名空间中的  &lt;code&gt;kube-dns&lt;/code&gt;  服务。&lt;/p&gt;
&lt;p&gt;改变这种现有 pod 的网络的一个简单方法是依靠 Kubernetes 在 Deployment 中的 pod 被删除时自动重新启动的事实，所以我们可以简单地删除原来的 &lt;code&gt;kube-dns&lt;/code&gt; pod，紧接着启动的替换 pod 将由 Cilium 管理网络。在生产部署中，这个步骤可以作为 &lt;code&gt;kube-dns&lt;/code&gt; pod 的滚动更新来执行，以避免 DNS 服务的停机。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl --namespace kube-system delete pods -l k8s-app&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kube-dns
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pod &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-dns-268032401-t57r2&amp;#34;&lt;/span&gt; deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行 &lt;code&gt;kubectl get pods&lt;/code&gt; 将显示 Kubernetes 启动了一组新的 &lt;code&gt;kube-dns&lt;/code&gt; pod，同时终止了旧的 pod：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl --namespace kube-system get pods
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                          READY     STATUS        RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cilium-5074s                  1/1       Running       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          58m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kube-addon-manager-minikube   1/1       Running       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          59m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kube-dns-268032401-j0vml      3/3       Running       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          9s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kube-dns-268032401-t57r2      3/3       Terminating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          57m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;默认允许本地主机的入口流量&#34;&gt;默认允许本地主机的入口流量&lt;/h2&gt;
&lt;p&gt;Kubernetes 具有&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&#34; title=&#34;通过存活探针和就绪探针&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;通过存活探针和就绪探针&lt;/a&gt;
向用户指示其应用程序当前运行状况的功能。为了让 &lt;code&gt;kubelet&lt;/code&gt; 对每个 pod 运行这些健康检查，默认情况下，Cilium 将始终允许从本地主机到每个 pod 的所有入口流量。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>要求</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/requirements/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/requirements/</guid>
      <description>
        
        
        &lt;h2 id=&#34;kubernetes-版本&#34;&gt;Kubernetes 版本&lt;/h2&gt;
&lt;p&gt;以下列出的所有 Kubernetes 版本都经过 e2e 测试，并保证与此 Cilium 版本兼容。此处未列出的旧 Kubernetes 版本不支持 Cilium。较新的 Kubernetes 版本未列出，这取决于新版本的的向后兼容性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.16&lt;/li&gt;
&lt;li&gt;1.17&lt;/li&gt;
&lt;li&gt;1.18&lt;/li&gt;
&lt;li&gt;1.19&lt;/li&gt;
&lt;li&gt;1.20&lt;/li&gt;
&lt;li&gt;1.21&lt;/li&gt;
&lt;li&gt;1.22&lt;/li&gt;
&lt;li&gt;1.23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统要求&#34;&gt;系统要求&lt;/h2&gt;
&lt;p&gt;Cilium 需要 Linux 内核 &lt;code&gt;&amp;gt;= 4.9&lt;/code&gt;。有关所有系统要求的完整详细信息，请参阅&lt;a href=&#34;https://docs.cilium.io/en/stable/operations/system_requirements/#admin-system-reqs&#34; title=&#34;系统要求&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;系统要求&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;在-kubernetes-中启用-cni&#34;&gt;在 Kubernetes 中启用 CNI&lt;/h2&gt;
&lt;p&gt;CNI（容器网络接口）是 Kubernetes 用来委托网络配置的插件层。必须在 Kubernetes 集群中启用 CNI 才能安装 Cilium。这是通过将 &lt;code&gt;--network-plugin=cni&lt;/code&gt; 参数在所有节点上传递给 kubelet 来完成的。有关更多信息，请参阅&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/&#34; title=&#34;Kubernetes CNI 网络插件文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes CNI 网络插件文档&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;启用自动节点-cidr-分配推荐&#34;&gt;启用自动节点 CIDR 分配（推荐）&lt;/h2&gt;
&lt;p&gt;Kubernetes 具有自动分配每个节点 IP CIDR 的能力。如果启用，Cilium 会自动使用此功能。这是在 Kubernetes 集群中处理 IP 分配的最简单方法。要启用此功能，只需在启动时添加以下标志 &lt;code&gt;kube-controller-manager&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--allocate-node-cidrs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此选项不是必需的，但强烈推荐。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>网络策略</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/policy/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/policy/</guid>
      <description>
        
        
        &lt;p&gt;如果你在 Kubernetes 上运行 Cilium，你可以从 Kubernetes 为你分发的策略中受益。在这种模式下，Kubernetes 负责在所有节点上分发策略，Cilium 会自动应用这些策略。三种格式可用于使用 Kubernetes 本地配置网络策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在撰写本文时，标准的 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#networkpolicy&#34; title=&#34;NetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetworkPolicy&lt;/a&gt;
 资源支持指定三层/四层入口策略，并带有标记为 beta 的有限出口支持。&lt;/li&gt;
&lt;li&gt;扩展的 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#ciliumnetworkpolicy&#34; title=&#34;CiliumNetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CiliumNetworkPolicy&lt;/a&gt;
 格式可用作 &lt;a href=&#34;https://docs.cilium.io/en/stable/glossary/#term-customresourcedefinition&#34; title=&#34;CustomResourceDefinition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CustomResourceDefinition&lt;/a&gt;
 支持入口和出口的三层到七层层策略规范。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CiliumClusterwideNetworkPolicy&lt;/code&gt; 格式，&lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#ciliumclusterwidenetworkpolicy&#34; title=&#34;它&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;它&lt;/a&gt;
是集群范围的&lt;a href=&#34;https://docs.cilium.io/en/stable/glossary/#term-customresourcedefinition&#34; title=&#34;CustomResourceDefinition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CustomResourceDefinition&lt;/a&gt;
，用于指定由 Cilium 强制执行的集群范围的策略。规范与 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#ciliumnetworkpolicy&#34; title=&#34;CiliumNetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CiliumNetworkPolicy&lt;/a&gt;
 相同，没有指定命名空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cilium 支持同时运行多个策略类型。但是，在同时使用多种策略类型时应谨慎，因为理解跨多种策略类型的完整允许流量集可能会令人困惑。如果不注意，这可能会导致意外的策略允许行为。&lt;/p&gt;
&lt;h2 id=&#34;网络策略&#34;&gt;网络策略&lt;/h2&gt;
&lt;p&gt;有关详细信息，请参阅官方 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/network-policies/&#34; title=&#34;NetworkPolicy 文档&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetworkPolicy 文档&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;Kubernetes 网络策略的已知缺失功能：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特征&lt;/th&gt;
&lt;th&gt;GItHub Issue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ipBlock&lt;/code&gt;使用 pod IP 设置&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/cilium/cilium/issues/9209&#34; title=&#34;GitHub Issue 9209&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Issue 9209&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SCTP&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/cilium/cilium/issues/5719&#34; title=&#34;GitHub Issue 5719&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Issue 5719&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;cilium-网络策略&#34;&gt;Cilium 网络策略&lt;/h2&gt;
&lt;p&gt;CiliumNetworkPolicy 与 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#networkpolicy&#34; title=&#34;标准 NetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;标准 NetworkPolicy&lt;/a&gt;
 非常相似。目的是提供 NetworkPolicy 尚不支持的功能。理想情况下，所有功能都将合并到标准资源格式中，并且不再需要此 CRD。&lt;/p&gt;
&lt;p&gt;Go 中资源的原始规范如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CiliumNetworkPolicy&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// +deepequal-gen=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;metav1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TypeMeta&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,inline&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// +deepequal-gen=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;metav1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ObjectMeta&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;metadata&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Spec is the desired Cilium specific rule specification.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;Spec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Rule&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;spec,omitempty&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Specs is a list of desired Cilium specific rule specification.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;Specs&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Rules&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;specs,omitempty&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Status is the status of the Cilium policy rule
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// +deepequal-gen=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// +kubebuilder:validation:Optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CiliumNetworkPolicyStatus&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;status&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;metadata&lt;/p&gt;
&lt;p&gt;描述策略。这包括：策略的名称，在命名空间中是唯一的注入策略的命名空间一组标签来识别 Kubernetes 中的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spec&lt;/p&gt;
&lt;p&gt;包含&lt;a href=&#34;https://docs.cilium.io/en/stable/policy/intro/#policy-rule&#34; title=&#34;规则基础的字段&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;规则基础的字段&lt;/a&gt;
。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specs&lt;/p&gt;
&lt;p&gt;包含&lt;a href=&#34;https://docs.cilium.io/en/stable/policy/intro/#policy-rule&#34; title=&#34;Rule Basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rule Basics&lt;/a&gt;
列表的字段。如果必须自动删除或添加多个规则，则此字段很有用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Status&lt;/p&gt;
&lt;p&gt;提供有关策略是否已成功应用的可视性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;
&lt;p&gt;有关示例策略的详细列表，请参阅 &lt;a href=&#34;https://docs.cilium.io/en/stable/policy/language/#policy-examples&#34; title=&#34;三层示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;三层示例&lt;/a&gt;
、&lt;a href=&#34;https://docs.cilium.io/en/stable/policy/language/#l4-policy&#34; title=&#34;四层示例&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;四层示例&lt;/a&gt;
和 &lt;a href=&#34;https://docs.cilium.io/en/stable/policy/language/#l7-policy&#34; title=&#34;七层&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;七层&lt;/a&gt;
 示例。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#ciliumclusterwidenetworkpolicy&#34; title=&#34;CiliumClusterwideNetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CiliumClusterwideNetworkPolicy&lt;/a&gt;
 类似于 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#ciliumnetworkpolicy&#34; title=&#34;CiliumNetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CiliumNetworkPolicy&lt;/a&gt;
，除了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#ciliumclusterwidenetworkpolicy&#34; title=&#34; CiliumClusterwideNetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; CiliumClusterwideNetworkPolicy&lt;/a&gt;
 定义的策略是非命名空间和集群范围的&lt;/li&gt;
&lt;li&gt;它允许使用&lt;a href=&#34;https://docs.cilium.io/en/stable/policy/intro/#nodeselector&#34; title=&#34;节点选择器&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;节点选择器&lt;/a&gt;
。在内部，该策略与 &lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/kubernetes/policy/#ciliumnetworkpolicy&#34; title=&#34;CiliumNetworkPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CiliumNetworkPolicy&lt;/a&gt;
 相同，因此该策略规范的效果也相同。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;go 中资源的原始规范如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CiliumClusterwideNetworkPolicy&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Spec is the desired Cilium specific rule specification.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;Spec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Specs is a list of desired Cilium specific rule specification.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;Specs&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Rules&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// Status is the status of the Cilium policy rule.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// The reason this field exists in this structure is due a bug in the k8s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// code-generator that doesn&amp;#39;t create a `UpdateStatus` method because the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// field does not exist in the structure.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// +kubebuilder:validation:Optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CiliumNetworkPolicyStatus&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>端点 CRD</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/ciliumendpoint/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/ciliumendpoint/</guid>
      <description>
        
        
        &lt;p&gt;在 Kubernetes 中管理 pod 时，Cilium 将创建一个 &lt;code&gt;CiliumEndpoint&lt;/code&gt; 的自定义资源定义（CRD）。每个由 Cilium 管理的 pod 都会创建一个 &lt;code&gt;CiliumEndpoint&lt;/code&gt;，名称相同且在同一命名空间。&lt;code&gt;CiliumEndpoint&lt;/code&gt; 对象包含的信息与 &lt;code&gt;cilium endpoint get&lt;/code&gt; 在&lt;code&gt;.status&lt;/code&gt; 字段下的 json 输出相同，但可以为集群中的所有 pod 获取。添加 &lt;code&gt;-o json&lt;/code&gt; 将导出每个端点的更多信息。这包括端点的标签、安全身份和对其有效的策略。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl get ciliumendpoints --all-namespaces
NAMESPACE     NAME                     AGE
default       app1-55d7944bdd-l7c8j    1h
default       app1-55d7944bdd-sn9xj    1h
default       app2                     1h
default       app3                     1h
kube-system   cilium-health-minikube   1h
kube-system   microscope               1h
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;alert&#34;&gt;

&lt;div class=&#34;alert-note-title py-1 px-2&#34;&gt;
  提示
&lt;/div&gt;

&lt;div class=&#34;alert-note py-1 px-2&#34;&gt;
  每个 &lt;code&gt;cilium-agent&lt;/code&gt; pod 都会创建一个 &lt;code&gt;CiliumEndpoint&lt;/code&gt; 来代表自己的 agent 间健康检查端点。这些不是 Kubernetes 中的 pod，而是在 &lt;code&gt;kube-system&lt;/code&gt; 命名空间中。它们被命名为 &lt;code&gt;cilium-health-&amp;lt;节点名&amp;gt;&lt;/code&gt;。
&lt;/div&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>端点切片 CRD</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/ciliumendpointslice/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/ciliumendpointslice/</guid>
      <description>
        
        
        &lt;p&gt;在 Kubernetes 中管理 pod 时，Cilium 将为 Cilium 管理的每个 pod 创建一个 &lt;a href=&#34;../ciliumendpoint&#34; title=&#34;&amp;lt;code&amp;gt;CiliumEndpoint&amp;lt;/code&amp;gt;&#34;&gt;&lt;code&gt;CiliumEndpoint&lt;/code&gt;&lt;/a&gt;
（CEP）的自定义资源定义（CRD）。如果启用了 &lt;code&gt;enable-cilium-endpoint-slice&lt;/code&gt;，那么 Cilium 还会创建一个 &lt;code&gt;CiliumEndpointSlice&lt;/code&gt; （CES）类型的 CRD，将一组具有相同&lt;a href=&#34;https://docs.cilium.io/en/stable/concepts/security/identity/#arch-id-security&#34; title=&#34;安全身份&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全身份&lt;/a&gt;
的 CEP 对象分组到一个 CES 对象中，并广播 CES 对象来向其他代理传递身份，而不是通过广播 CEP 来实现。在大多数情况下，这减少了控制平面上的负载，可以使用相同的主资源维持更大规模的集群。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get ciliumendpointslices --all-namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                  AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ces-548bnpgsf-56q9f   171m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ces-dy4d8x6j2-qgc2z   171m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ces-f6qfylrxh-84vxm   171m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ces-k29rv92f5-qb4sw   171m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ces-m9gs68csm-w2qg8   171m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Kubernetes 兼容性</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/compatibility/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/compatibility/</guid>
      <description>
        
        
        &lt;p&gt;Cilium 与多个 Kubernetes API 组兼容。有些是废弃的或测试版的，可能只在 Kubernetes 的特定版本中可用。&lt;/p&gt;
&lt;p&gt;所有列出的 Kubernetes 版本都经过 e2e 测试，保证与 Cilium 兼容。本表中未列出的旧版 Kubernetes 不支持 Cilium。较新的 Kubernetes 版本，虽然没有列出，但将取决于 Kubernetes 提供的后向兼容性。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Kubernetes 版本&lt;/th&gt;
&lt;th&gt;Kubernetes NetworkPolicy API&lt;/th&gt;
&lt;th&gt;CiliumNetworkPolicy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.16, 1.17, 1.18, 1.19, 1.20, 1.21, 1.22, 1.23&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#networkpolicy-v1-networking-k8s-io&#34; title=&#34;networking.k8s.io/v1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;networking.k8s.io/v1&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cilium.io/v2&lt;/code&gt; 有一个 CRD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Cilium 在 Kubernetes 中使用了一个网络策略的 CRD。这个 CRD 的模式验证可能会有变化，它可以验证 Cilium Clusterwide Network Policy（CCNP）或 Cilium Network Policy（CNP）的正确性。&lt;/p&gt;
&lt;p&gt;CRD 本身有一个注解，即 &lt;code&gt;io.cilium.k8s.crd.schema.version&lt;/code&gt;，有模式定义版本。默认情况下，Cilium 会自动更新 CRD 及其验证，使用较新的版本。&lt;/p&gt;
&lt;p&gt;下表列出了所有的 Cilium 版本和它们预期的 schema 验证版本。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cilium 版本&lt;/th&gt;
&lt;th&gt;CNP 和 CCNP Schema 版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.0-rc0&lt;/td&gt;
&lt;td&gt;1.22.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.0-rc1&lt;/td&gt;
&lt;td&gt;1.22.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.0-rc2&lt;/td&gt;
&lt;td&gt;1.22.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.0-rc3&lt;/td&gt;
&lt;td&gt;1.22.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.0&lt;/td&gt;
&lt;td&gt;1.22.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.1&lt;/td&gt;
&lt;td&gt;1.22.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.2&lt;/td&gt;
&lt;td&gt;1.22.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.3&lt;/td&gt;
&lt;td&gt;1.22.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.4&lt;/td&gt;
&lt;td&gt;1.22.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.5&lt;/td&gt;
&lt;td&gt;1.22.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.6&lt;/td&gt;
&lt;td&gt;1.22.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.7&lt;/td&gt;
&lt;td&gt;1.22.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.8&lt;/td&gt;
&lt;td&gt;1.22.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.9&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.10&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.11&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.12&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.13&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.14&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.15&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9.16&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.9&lt;/td&gt;
&lt;td&gt;1.22.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.0-rc0&lt;/td&gt;
&lt;td&gt;1.23.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.0-rc1&lt;/td&gt;
&lt;td&gt;1.23.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.0-rc2&lt;/td&gt;
&lt;td&gt;1.23.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.0&lt;/td&gt;
&lt;td&gt;1.23.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.1&lt;/td&gt;
&lt;td&gt;1.23.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.2&lt;/td&gt;
&lt;td&gt;1.23.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.3&lt;/td&gt;
&lt;td&gt;1.23.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.4&lt;/td&gt;
&lt;td&gt;1.23.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.5&lt;/td&gt;
&lt;td&gt;1.23.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.6&lt;/td&gt;
&lt;td&gt;1.23.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.7&lt;/td&gt;
&lt;td&gt;1.23.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.8&lt;/td&gt;
&lt;td&gt;1.23.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.9&lt;/td&gt;
&lt;td&gt;1.23.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.10&lt;/td&gt;
&lt;td&gt;1.23.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10.11&lt;/td&gt;
&lt;td&gt;1.23.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.10&lt;/td&gt;
&lt;td&gt;1.23.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.0-rc0&lt;/td&gt;
&lt;td&gt;1.24.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.0-rc1&lt;/td&gt;
&lt;td&gt;1.24.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.0-rc2&lt;/td&gt;
&lt;td&gt;1.24.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.0-rc3&lt;/td&gt;
&lt;td&gt;1.24.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.0&lt;/td&gt;
&lt;td&gt;1.24.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.1&lt;/td&gt;
&lt;td&gt;1.24.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.2&lt;/td&gt;
&lt;td&gt;1.24.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.3&lt;/td&gt;
&lt;td&gt;1.24.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.4&lt;/td&gt;
&lt;td&gt;1.24.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11.5&lt;/td&gt;
&lt;td&gt;1.24.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.11&lt;/td&gt;
&lt;td&gt;1.24.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;latest / master&lt;/td&gt;
&lt;td&gt;1.25.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>故障排除</title>
      <link>https://jimmysong.io/book/cilium-handbook/kubernetes/troubleshooting/</link>
      <pubDate>Fri, 17 Jun 2022 12:00:00 +0800</pubDate>
      
      <guid>https://jimmysong.io/book/cilium-handbook/kubernetes/troubleshooting/</guid>
      <description>
        
        
        &lt;h2 id=&#34;验证安装&#34;&gt;验证安装&lt;/h2&gt;
&lt;p&gt;检查 &lt;a href=&#34;https://docs.cilium.io/en/stable/glossary/#term-daemonset&#34; title=&#34;&amp;lt;code&amp;gt;DaemonSet&amp;lt;/code&amp;gt;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;DaemonSet&lt;/code&gt;&lt;/a&gt;
 的状态并验证所有需要的实例都处于 &lt;code&gt;ready&lt;/code&gt; 状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl --namespace kube-system get ds
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME      DESIRED   CURRENT   READY     NODE-SELECTOR   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cilium    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         &amp;lt;none&amp;gt;          3s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在此示例中，我们看到 1 个期望的状态，0 个 ready 状态。这表明有问题。下一步是通过在  &lt;code&gt;k8s-app=cilium&lt;/code&gt; 标签上匹配列出所有 cilium pod，并根据每个 pod 的重启次数对列表进行排序，以便轻松识别失败的 pod：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl --namespace kube-system get pods --selector k8s-app&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cilium &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --sort-by&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.status.containerStatuses[0].restartCount&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME           READY     STATUS             RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cilium-813gf   0/1       CrashLoopBackOff   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          44s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cilium-813gf&lt;/code&gt; pod 失败并且已经重新启动了 2 次。让我们打印该 pod 的日志文件来调查原因：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl --namespace kube-system logs cilium-813gf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO      _ _ _
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO  ___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_ _ _____
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  _&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;___&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO Cilium 0.8.90 f022e2f Thu, &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; 23:17:56 -0700 go version go1.7.5 linux/amd64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CRIT kernel version: NOT OK: minimal supported kernel version is &amp;gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 4.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在此示例中，失败的原因是在工作节点上运行的 Linux 内核不符合&lt;a href=&#34;https://docs.cilium.io/en/stable/operations/system_requirements/#admin-system-reqs&#34; title=&#34;系统要求&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;系统要求&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;如果根据这些简单的步骤无法发现问题的原因，请来我们的 &lt;a href=&#34;https://docs.cilium.io/en/stable/glossary/#term-slack-channel&#34; title=&#34;Slack channel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack channel&lt;/a&gt;
。&lt;/p&gt;
&lt;h2 id=&#34;集群外的-apiserver&#34;&gt;集群外的 APIserver&lt;/h2&gt;
&lt;p&gt;如果你出于某种原因在集群外部运行 Kubernetes Apiserver（例如将主节点保留在防火墙后面），请确保您也在主节点上运行 Cilium。否则，由 Apiserver 创建的 Kubernetes pod 代理将无法路由到 pod IP，并且你在尝试将流量代理到 pod 时可能会遇到错误。&lt;/p&gt;
&lt;p&gt;你可以将 Cilium 作为&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/static-pod/&#34; title=&#34;静态 pod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;静态 pod&lt;/a&gt;
 运行，或者为 Cilium DaemonSet 设置&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/&#34; title=&#34;容忍&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容忍&lt;/a&gt;
，以确保将 Cilium pod 安排在你的主节点上。执行此操作的确切方法取决于你的设置。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song â€“ Kubernetes Column</title>
    <link>https://jimmysong.io/en/categories/kubernetes/</link>
    <description>Recent content in Kubernetes Column on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://jimmysong.io/en/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>CNI Essentials: Powering Kubernetes&#39; Network</title>
      <link>https://jimmysong.io/en/blog/cni-deep-dive/</link>
      <pubDate>Sat, 18 May 2024 13:54:49 +0800</pubDate>
      
      <guid>https://jimmysong.io/en/blog/cni-deep-dive/</guid>
      <description>
        
        
        &lt;p&gt;Effective management of networking is crucial in containerized environments. The Container Network Interface (CNI) is a standard that defines how containers should be networked. This article delves into the fundamentals of CNI and explores its relationship with CRI.&lt;/p&gt;
&lt;h2 id=&#34;what-is-cni&#34;&gt;What is CNI?&lt;/h2&gt;
&lt;p&gt;The CNI (Container Network Interface) specification provides a common interface between container runtimes and network plugins, aiming to standardize container network configuration.&lt;/p&gt;
&lt;p&gt;The CNI specification comprises several core components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Network configuration format&lt;/strong&gt;: Defines how administrators define network configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request protocol&lt;/strong&gt;: Describes how container runtimes send network configuration or cleanup requests to network plugins.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin execution process&lt;/strong&gt;: Details how plugins execute network setup or cleanup based on the provided configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin delegation&lt;/strong&gt;: Allows plugins to delegate specific functionalities to other plugins.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result return&lt;/strong&gt;: Defines the data format for returning results to the runtime after plugin execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By defining these core components, the CNI specification ensures that different container runtimes and network plugins can interact in a consistent manner, enabling automation and standardization of network configuration.&lt;/p&gt;



&lt;div class=&#34;alert&#34;&gt;
  
  &lt;div class=&#34;alert-note-title py-1 px-2&#34;&gt;
    Key points of the CNI specification
  &lt;/div&gt;
  
  &lt;div class=&#34;alert-note py-1 px-2&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;CNI is a plugin-based containerized networking solution.&lt;/li&gt;
&lt;li&gt;CNI plugins are executable files.&lt;/li&gt;
&lt;li&gt;The responsibility of a single CNI plugin is singular.&lt;/li&gt;
&lt;li&gt;CNI plugins are invoked in a chained manner.&lt;/li&gt;
&lt;li&gt;The CNI specification defines a Linux network namespace for a container.&lt;/li&gt;
&lt;li&gt;Network definitions in CNI are stored in JSON format.&lt;/li&gt;
&lt;li&gt;Network definitions are transmitted to plugins via STDIN input streams, meaning network configuration files are not stored on the host, and other configuration parameters are passed to plugins via environment variables.&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CNI plugins receive network configuration parameters according to the operation type, perform network setup or cleanup tasks accordingly, and return the execution results. This process ensures dynamic configuration of container networks synchronized with container lifecycles.&lt;/p&gt;
&lt;p&gt;The following diagram illustrates the multitude of network plugins encompassed by CNI.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cni-deep-dive/cdc38d55a4fc4468ab20df85ab63c2c7.svg&#34; data-img=&#34;/en/blog/cni-deep-dive/cdc38d55a4fc4468ab20df85ab63c2c7.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;According to the &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#section-2-execution-protocol&#34; title=&#34;CNI specification&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI specification&lt;/a&gt;
, a CNI plugin is responsible for configuring a container&amp;rsquo;s network interface in some way. Plugins can be classified into two major categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Interface&amp;rdquo; plugins, responsible for creating network interfaces inside containers and ensuring their connectivity.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Chained&amp;rdquo; plugins, adjusting the configuration of already created interfaces (but may need to create more interfaces to accomplish this).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;relationship-between-cni-and-cri&#34;&gt;Relationship Between CNI and CRI&lt;/h2&gt;
&lt;p&gt;CNI and CRI (Container Runtime Interface) are two critical interfaces in Kubernetes, responsible for container network configuration and runtime management, respectively. In Kubernetes clusters, CRI invokes CNI plugins to configure or clean up container networks, ensuring tight coordination between the network configuration process and container creation and destruction processes.&lt;/p&gt;
&lt;p&gt;The following diagram intuitively illustrates how CNI collaborates with CRI:&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cni-deep-dive/9efc34ed8d34997a651adff337bb1630.svg&#34; data-img=&#34;/en/blog/cni-deep-dive/9efc34ed8d34997a651adff337bb1630.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kubelet to CRI&lt;/strong&gt;: The Kubelet instructs the CRI to create the containers for a scheduled pod.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI to Pod&lt;/strong&gt;: The container runtime starts the container within the pod.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod to CRI&lt;/strong&gt;: Once the container is running, it signals back to the container runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRI to Kubelet&lt;/strong&gt;: The container runtime notifies the Kubelet that the containers are ready.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet to CNI&lt;/strong&gt;: With the containers up, the Kubelet calls the CNI to set up the network for the pod.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI to Pod&lt;/strong&gt;: The CNI configures the network for the pod, attaching it to the necessary network interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod to CNI&lt;/strong&gt;: After the network is configured, the pod confirms network setup to the CNI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI to Kubelet&lt;/strong&gt;: The CNI informs the Kubelet that the pod&amp;rsquo;s network is ready.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubelet to Pod&lt;/strong&gt;: The pod is now fully operational, with both containers running and network configured.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following diagram shows the detailed steps involved in setting up networking for a pod in Kubernetes:&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cni-deep-dive/640af94970463b3c8707011903bfe19a.svg&#34; data-img=&#34;/en/blog/cni-deep-dive/640af94970463b3c8707011903bfe19a.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pod scheduling&lt;/strong&gt;: The Kubelet schedules a pod to run on a node.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request network setup&lt;/strong&gt;: The scheduled pod requests network setup from the Kubelet.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Invoke CNI&lt;/strong&gt;: The Kubelet invokes the CNI to handle the network setup for the pod.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create network namespace&lt;/strong&gt;: The CNI creates a network namespace for the pod, isolating its network environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allocate IP address&lt;/strong&gt;: The CNI, through its IP Address Management (IPAM) plugin, allocates an IP address for the pod.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setup network interfaces&lt;/strong&gt;: The CNI sets up the necessary network interfaces within the pod&amp;rsquo;s network namespace, attaching it to the network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network setup complete&lt;/strong&gt;: The pod notifies the Kubelet that its network setup is complete.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod running with network&lt;/strong&gt;: The pod is now running with its network configured and can communicate with other pods and services within the Kubernetes cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cni-workflow&#34;&gt;CNI Workflow&lt;/h2&gt;
&lt;p&gt;The Container Network Interface (CNI) specification defines how containers should configure networks, including five operations: &lt;code&gt;ADD&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GC&lt;/code&gt;, and &lt;code&gt;VERSION&lt;/code&gt;. Container runtimes execute these operations by calling various CNI plugins, enabling dynamic management and updates of container networks.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cni-deep-dive/7b22cf25a480085d500bf3031dbaf6ec.svg&#34; data-img=&#34;/en/blog/cni-deep-dive/7b22cf25a480085d500bf3031dbaf6ec.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;To elaborate on each step described in the sequence diagram, involving interactions between Kubelet, Pod, CNI plugins (both interface and chained), network setup, and IP address management (IPAM), let&amp;rsquo;s delve deeper into the process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Schedule Pod&lt;/strong&gt;: Kubelet schedules a Pod to run on a node. This step initiates the lifecycle of Pods within the Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request Network Setup&lt;/strong&gt;: The Pod requests Kubelet for network setup. This request triggers the process of configuring the network for the Pod, ensuring its ability to communicate within the Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call CNI Plugins&lt;/strong&gt;: Kubelet invokes configured Container Network Interface (CNI) plugins. CNI defines a standardized way for container management systems to set up network interfaces within Linux containers. Kubelet passes necessary information to CNI plugins to initiate network setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call Interface Plugin&lt;/strong&gt;: The CNI framework calls an interface CNI plugin responsible for setting up primary network interfaces for the Pod. This plugin may create a new network namespace, connect a pair of veth, or perform other actions to ensure the Pod has the required network interfaces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set Network Interfaces&lt;/strong&gt;: The interface CNI plugin configures network interfaces for the Pod. This setup includes assigning IP addresses, setting up routes, and ensuring interfaces are ready for communication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call Chained Plugin&lt;/strong&gt;: After setting up network interfaces, the interface CNI plugin or the CNI framework calls chained CNI plugins. These plugins perform additional network configuration tasks, such as setting up IP masquerading, configuring ingress/egress rules, or applying network policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allocate IP Address&lt;/strong&gt;: As part of the chained process, one of the chained CNI plugins may involve IP Address Management (IPAM). The IPAM plugin is responsible for assigning an IP address to the Pod, ensuring each Pod has a unique IP within the cluster or namespace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP Address Allocated&lt;/strong&gt;: The IPAM plugin allocates an IP address and returns the allocation information to the calling plugin. This information typically includes the IP address itself, subnet mask, and possible gateway.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apply Network Policies&lt;/strong&gt;: Chained CNI plugins apply any specified network policies to the Pod&amp;rsquo;s network interfaces. These policies may dictate allowed ingress and egress traffic, ensuring network security and isolation per cluster configuration requirements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chained Configuration Complete&lt;/strong&gt;: Once all chained plugins have completed their tasks, the overall network configuration for the Pod is considered complete. The CNI framework or the last plugin in the chain signals to Kubelet that network setup is complete.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network Setup Complete&lt;/strong&gt;: Kubelet receives confirmation of network setup completion from the Pod. At this point, the Pod has fully configured network interfaces with IP addresses, route rules, and applied network policies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod Running with Network&lt;/strong&gt;: The Pod is now running and has its network configured. It can communicate with other Pods within the Kubernetes cluster, access external resources per network policies, and perform its designated functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following are example sequence diagrams and detailed explanations for the &lt;code&gt;ADD&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; operations based on the &lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md#appendix-examples&#34; title=&#34;official CNI examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official CNI examples&lt;/a&gt;
. Through these operations, interactions between the container runtime and CNI plugins facilitate dynamic management and updates of container network configurations.&lt;/p&gt;
&lt;h3 id=&#34;add-operation-example&#34;&gt;ADD Operation Example&lt;/h3&gt;
&lt;p&gt;Below is the example sequence diagram and detailed explanation for the ADD operation:&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cni-deep-dive/4f28f5eda4192e0eb4cd9c65f2c6f61f.svg&#34; data-img=&#34;/en/blog/cni-deep-dive/4f28f5eda4192e0eb4cd9c65f2c6f61f.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Portmap Plugin&lt;/strong&gt;: The container runtime executes the ADD operation by calling the Portmap plugin to configure port mapping for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap Configuration Complete&lt;/strong&gt;: The Portmap plugin completes the port mapping configuration and returns the result to the container runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Tuning Plugin&lt;/strong&gt;: The container runtime invokes the Tuning plugin to execute the ADD operation and configure network tuning parameters for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning Configuration Complete&lt;/strong&gt;: The Tuning plugin finishes configuring network tuning parameters and returns the result to the container runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Bridge Plugin&lt;/strong&gt;: The container runtime calls the Bridge plugin to execute the ADD operation and configure network interfaces and IP addresses for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge Plugin Calls Host-local Plugin&lt;/strong&gt;: Before completing its own configuration, the Bridge plugin calls the Host-local plugin to execute the ADD operation and configure IP addresses for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM Configuration Complete&lt;/strong&gt;: The Host-local plugin, acting as the authority for IP Address Management (IPAM), completes IP address allocation and returns the result to the Bridge plugin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge Configuration Complete&lt;/strong&gt;: The Bridge plugin finishes configuring network interfaces and IP addresses and returns the result to the container runtime.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These operations ensure that the required network configuration is set up as expected when the container starts, including port mapping, network tuning, and IP address allocation.&lt;/p&gt;
&lt;h3 id=&#34;check-operation-example&#34;&gt;CHECK Operation Example&lt;/h3&gt;
&lt;p&gt;Below is the example sequence diagram and detailed explanation for the CHECK operation:&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cni-deep-dive/c20cc6391b4f6cf89ffac159410ca851.svg&#34; data-img=&#34;/en/blog/cni-deep-dive/c20cc6391b4f6cf89ffac159410ca851.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Bridge Plugin for Check&lt;/strong&gt;: The container runtime performs the CHECK operation by calling the Bridge plugin to inspect the container&amp;rsquo;s network configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge Plugin Calls Host-local Plugin for Check&lt;/strong&gt;: The Bridge plugin calls the Host-local plugin to inspect IP address allocation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Errors Detected&lt;/strong&gt;: The Host-local plugin detects no errors in IP address allocation and reports no errors to the Bridge plugin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Return with 0 Exit Code&lt;/strong&gt;: The Bridge plugin confirms no network configuration errors and returns with a 0 exit code to the container runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Tuning Plugin for Check&lt;/strong&gt;: The container runtime invokes the Tuning plugin to inspect network tuning parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operation Successful&lt;/strong&gt;: The Tuning plugin confirms no errors in network tuning parameters, indicating a successful operation to the container runtime.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These operations ensure that during container runtime, network configuration and tuning parameters are checked and verified as expected to ensure consistency and correctness in network configuration.&lt;/p&gt;
&lt;h3 id=&#34;delete-operation-example&#34;&gt;DELETE Operation Example&lt;/h3&gt;
&lt;p&gt;Below is the example sequence diagram and detailed explanation for the DELETE operation:&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cni-deep-dive/40d9a191cc29a56b101c764a520d521e.svg&#34; data-img=&#34;/en/blog/cni-deep-dive/40d9a191cc29a56b101c764a520d521e.svg&#34; alt=&#34;image&#34; data-caption=&#34;Mermaid Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Mermaid Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Portmap Plugin for Delete&lt;/strong&gt;: The container runtime initiates the DELETE operation by calling the Portmap plugin to remove port mapping configuration for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portmap Deletion Complete&lt;/strong&gt;: The Portmap plugin finishes deleting port mapping and reports completion to the container runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Tuning Plugin for Delete&lt;/strong&gt;: The container runtime calls the Tuning plugin to execute the DELETE operation and remove network tuning parameters for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuning Deletion Complete&lt;/strong&gt;: The Tuning plugin completes deletion of network tuning parameters and notifies the container runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime Calls Bridge Plugin for Delete&lt;/strong&gt;: The container runtime invokes the Bridge plugin to execute the DELETE operation and remove network interfaces and IP address configuration for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge Plugin Calls Host-local Plugin for Delete&lt;/strong&gt;: Before completing its own deletion, the Bridge plugin calls the Host-local plugin to execute the DELETE operation and remove IP address allocation for the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM Deletion Complete&lt;/strong&gt;: The Host-local plugin completes IP address deletion and informs the Bridge plugin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridge Deletion Complete&lt;/strong&gt;: The Bridge plugin finishes removing network interfaces and IP addresses and notifies the container runtime.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These operations ensure that when the container stops running, its required network configuration is properly cleaned up and removed to ensure effective release and management of network resources.&lt;/p&gt;
&lt;p&gt;Through the example sequence diagrams and detailed explanations for ADD, CHECK, and DELETE operations, it&amp;rsquo;s clear how interactions between the container runtime and CNI plugins facilitate dynamic management and updates of container network configurations.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Container Network Interface (CNI) specification standardizes container network configuration in Kubernetes clusters, allowing container runtimes to interface with various network plugins seamlessly. Understanding CNI&amp;rsquo;s core components and its collaboration with the Container Runtime Interface (CRI) is essential for effective network management in containerized environments.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containernetworking/cni/blob/main/SPEC.md&#34; title=&#34;CNI Spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI Spec&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This blog was initially published at &lt;a href=&#34;https://tetrate.io/blog/envoy-microservices-overview/&#34; title=&#34;tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tetrate.io&lt;/a&gt;
&lt;/em&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Why the Gateway API Is the Unified Future of Ingress for Kubernetes and Service Mesh</title>
      <link>https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/</link>
      <pubDate>Tue, 13 Dec 2022 11:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/</guid>
      <description>
        
        
        &lt;p&gt;In this blog, you will learn about the Kubernetes Ingress Gateway, the Gateway API, and the emerging Gateway API trend, which enables the convergence of Kubernetes and service mesh.&lt;/p&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ingress, the original gateway for Kubernetes, has a resource model that is too simple to fit into todayâ€™s programmable networks.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; title=&#34;Gateway API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API&lt;/a&gt;
, the latest addition to the Kubernetes portal gateway, separates concerns through role delineation and provides cross-namespace support to make it more adaptable to multi-cloud environments. Most API gateways already support it.&lt;/li&gt;
&lt;li&gt;The Gateway API provides a new reference model for the convergence of ingress gateways (north-south) and service mesh (east-west, cross-cluster routing), where there is a partial functional overlap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;history-of-the-kubernetes-ingress-gateway&#34;&gt;History of the Kubernetes ingress gateway&lt;/h2&gt;
&lt;p&gt;When Kubernetes was launched in June 2014, only NodePort and LoadBalancer-type Service objects were available to expose services within the cluster to the outside world. Later, &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34; title=&#34;Ingress &#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress &lt;/a&gt;
was introduced to offer more control over incoming traffic.. To preserve its portability and lightweight design, the Ingress API matured more slowly than other Kubernetes APIs; it was not upgraded to GA until Kubernetes 1.19.&lt;/p&gt;
&lt;p&gt;Ingressâ€™ primary objective is to expose HTTP applications using a straightforward declarative syntax. When creating an Ingress or setting a default &lt;em&gt;IngressClass&lt;/em&gt; in Kubernetes, you can deploy several Ingress Controllers and define the controller the gateway uses via &lt;em&gt;IngressClass&lt;/em&gt;. Kubernetes currently supports only AWS, GCE, and Nginx Ingress controllers by default; many &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&#34; title=&#34;third-party ingress controllers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;third-party ingress controllers&lt;/a&gt;
 are also supported.&lt;/p&gt;
&lt;p&gt;The following diagram illustrates the workflow of Kubernetes Ingress.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/ingress-flow.svg&#34; data-img=&#34;/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/ingress-flow.svg&#34; alt=&#34;image&#34; data-caption=&#34;Figure 1: Kubernetes ingress workflow&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Figure 1: Kubernetes ingress workflow&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;The detailed process is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes cluster administrators deploy an Ingress Controller in Kubernetes.&lt;/li&gt;
&lt;li&gt;The Ingress Controller continuously monitors changes to &lt;em&gt;IngressClass&lt;/em&gt; and Ingress objects in the Kubernetes API Server.&lt;/li&gt;
&lt;li&gt;Administrators apply &lt;em&gt;IngressClass&lt;/em&gt; and Ingress to deploy the gateway.&lt;/li&gt;
&lt;li&gt;Ingress Controller creates the corresponding ingress gateway and configures the routing rules according to the administratorâ€™s configuration.&lt;/li&gt;
&lt;li&gt;If in the cloud, the client accesses the load balancer for that ingress gateway.&lt;/li&gt;
&lt;li&gt;The gateway will route the traffic to the corresponding back-end service based on the host and path in the HTTP request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio supports both the Ingress and Gateway APIs. Below is an example configuration using the Istio Ingress Gateway, which will be created later using the Gateway API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IngressClass&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio.io/ingress-controller&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingressClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: You must specify the &lt;em&gt;IngressClass&lt;/em&gt; in the &lt;em&gt;ingressClassName&lt;/em&gt; field in the Ingress spec. Otherwise, the ingress gateway will not be created.&lt;/p&gt;
&lt;h2 id=&#34;limitations-of-kubernetes-ingress&#34;&gt;Limitations of Kubernetes Ingress&lt;/h2&gt;
&lt;p&gt;Although IngressClass decouples the ingress gateway from the back-end implementation, it still has significant limitations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingress is too simple for most real-world use and it only supports HTTP protocol routing.&lt;/li&gt;
&lt;li&gt;It only supports host and path matching, and there is no standard configuration for advanced routing features, which can only be achieved through annotation, such as URL redirection using Nginx Ingress Controller, which requires configuration of &lt;em&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/em&gt; annotation, which is no longer adaptable to the needs of a programmable proxy.&lt;/li&gt;
&lt;li&gt;The situation where services in different namespaces must be bound to the same gateway often arises in practical situations where the ingress gateway cannot be shared across multiple namespaces.&lt;/li&gt;
&lt;li&gt;No delineation of responsibilities for creating and managing ingress gateways, resulting in developers having to not only configure gateway routes but also create and manage gateways themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-gateway-api&#34;&gt;Kubernetes Gateway API&lt;/h2&gt;
&lt;p&gt;The Gateway API is a collection of API resources: &lt;em&gt;GatewayClass&lt;/em&gt;, &lt;em&gt;Gateway&lt;/em&gt;, &lt;em&gt;HTTPRoute&lt;/em&gt;, &lt;em&gt;TCPRoute&lt;/em&gt;, &lt;em&gt;ReferenceGrant&lt;/em&gt;, etc. The Gateway API exposes a more generic proxy API that can be used for more protocols than HTTP and models more infrastructure components, providing better deployment and management options for cluster operations.&lt;/p&gt;
&lt;p&gt;In addition, the Gateway API achieves configuration decoupling by separating resource objects that people can manage in different roles. The following diagram shows the roles and objects in the Gateway API.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/gateway-api-roles.svg&#34; data-img=&#34;/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/gateway-api-roles.svg&#34; alt=&#34;image&#34; data-caption=&#34;Figure: Roles and componentes in Kubernetes Gateway API&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Figure: Roles and componentes in Kubernetes Gateway API&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;The following is an example of using the Gateway API in Istio.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;All&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;httpbin.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to Ingress, Gateway uses &lt;em&gt;gatewayClassName&lt;/em&gt; to declare the controller it uses, which needs to be created by the platform administrator and allows client requests for the *&lt;em&gt;.example.com&lt;/em&gt; domain. Application developers can create routing rules in the namespace where their service resides, in this case, default, and bind to the Gateway via parentRefs, but only if the Gateway explicitly allows them to do so (via the rules set in the &lt;em&gt;allowRoutes&lt;/em&gt; field).&lt;/p&gt;
&lt;p&gt;When you apply the above configuration, Istio will automatically create a load-balancing gateway for you. The following diagram shows the workflow of the Gateway API.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/gateway-api-flow.svg&#34; data-img=&#34;/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/gateway-api-flow.svg&#34; alt=&#34;image&#34; data-caption=&#34;Figure 3: Gateway API workflow&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Figure 3: Gateway API workflow&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;The detailed process is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The infrastructure provider provides &lt;em&gt;GatewayClass&lt;/em&gt; and Gateway Controller.&lt;/li&gt;
&lt;li&gt;Platform operator deploy Gateway (multiple deployments possible, or using different &lt;em&gt;GatewayClasses&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Gateway Controller continuously monitors changes to the &lt;em&gt;GatewayClass&lt;/em&gt; and &lt;em&gt;Gateway&lt;/em&gt; objects in the Kubernetes API Server.&lt;/li&gt;
&lt;li&gt;Gateway controller will create the corresponding gateway based on cluster operations and maintenance configuration.&lt;/li&gt;
&lt;li&gt;Application developers apply &lt;em&gt;xRoutes&lt;/em&gt; and bind them to the service.&lt;/li&gt;
&lt;li&gt;If in the cloud, the client accesses the load balancer for that ingress gateway.&lt;/li&gt;
&lt;li&gt;The gateway will route to the corresponding back-end service based on the matching criteria in the traffic request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the above steps, we can see that the Gateway API has a clear division of roles compared to Ingress and that routing rules can be decoupled from the gateway configuration, significantly increasing management flexibility.&lt;/p&gt;
&lt;p&gt;The following diagram shows the route flow after it is accessed at the gateway and processed.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/traffic-flow.svg&#34; data-img=&#34;/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/traffic-flow.svg&#34; alt=&#34;image&#34; data-caption=&#34;Figure 4: Gateway API route flow&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Figure 4: Gateway API route flow&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;From this figure, we can see that the route is bound to the gateway. The route is generally deployed in the same namespace as its backend services. Suppose the route is in a different namespace, and you need to explicitly give the route cross-namespace reference rights in &lt;code&gt;ReferenceGrant&lt;/code&gt;, for example. In that case, the following HTTPRoute foo in the foo namespace can refer to the bar namespace bar service in the bar namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;forwardTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ReferenceGrant&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.gateway.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Currently, the Gateway API only supports HTTPRoute, and the TCPRoute, UDPRoute, TLSRoute and GRCPRoute are still in the experimental stage. The Gateway API is already supported by a large number of gateway and service mesh projects, and please &lt;a href=&#34;https://gateway-api.sigs.k8s.io/implementations/&#34; title=&#34;check the support status in the official Gateway documentation.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;check the support status in the official Gateway documentation.&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;ingress-gateway-and-service-mesh&#34;&gt;Ingress Gateway and Service Mesh&lt;/h2&gt;
&lt;p&gt;The service mesh focuses on east-west traffic, i.e., traffic within a Kubernetes cluster, but most service meshes, including Istio, also provide ingress gateway functionality. But, since Istioâ€™s ingress functionality and API are more advanced than we need for this example, weâ€™ll use &lt;a href=&#34;https://smi-spec.io/&#34; title=&#34;Service Mesh Interface (SMI)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh Interface (SMI)&lt;/a&gt;
 to illustrate the relationship between the ingress gateway and the service mesh.&lt;/p&gt;
&lt;p&gt;SMI is a CNCF incubation project, open-sourced in 2019, that defines a common standard for vendor-independent service mesh running in Kubernetes.&lt;/p&gt;
&lt;p&gt;The following diagram illustrates the overlap between the Gateway API and the SMI.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/gateway-smi-overlay.svg&#34; data-img=&#34;/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/gateway-smi-overlay.svg&#34; alt=&#34;image&#34; data-caption=&#34;Figure 5: Gateway API vs SMI&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Figure 5: Gateway API vs SMI&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;From the diagram, we can see a clear overlap between the Gateway API and SMI in the traffic specification section. These overlaps result in the same functionality that needs to be implemented repeatedly in both the Gateway API and the service mesh.&lt;/p&gt;
&lt;h2 id=&#34;traffic-management-in-the-istio-service-mesh&#34;&gt;Traffic Management in the Istio Service Mesh&lt;/h2&gt;
&lt;p&gt;Of course, not all service meshes are fully SMI-compliant. Istio, the most popular service mesh implementation, provides rich traffic management features but does not have a separate policy API for these features, instead coupling them in &lt;em&gt;VirtualService&lt;/em&gt; and &lt;em&gt;DestinationRule&lt;/em&gt;, as shown below.&lt;/p&gt;
&lt;h3 id=&#34;virtualservice&#34;&gt;VirtualService&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Routing: canary release, matching routes based on HTTP header, URI, etc.&lt;/li&gt;
&lt;li&gt;Error injection: HTTP error code injection, HTTP delay injection.&lt;/li&gt;
&lt;li&gt;Traffic splitting: percentage-based traffic splitting.&lt;/li&gt;
&lt;li&gt;Traffic mirroring: mirroring a certain percentage of traffic to other clusters.&lt;/li&gt;
&lt;li&gt;Timeout: set the timeout period, after which the request will fail.&lt;/li&gt;
&lt;li&gt;Retry: set the retry policy, such as trigger conditions, number of retries, interval time, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;destinationrule&#34;&gt;DestinationRule&lt;/h3&gt;
&lt;p&gt;Load balancing: setting up load balancing policies, such as simple load balancing, locality-aware load balancing, and area-weighted load balancing.
Circuit Breaking: Outlier detection and connection pool settings to remove anomalous nodes from the load balancing pool.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;VirtualService&lt;/em&gt; mainly handles routing-related functions, while &lt;em&gt;DestinationRule&lt;/em&gt; is responsible for adding and ejecting nodes from the cluster and load balancing.&lt;/p&gt;
&lt;p&gt;Gateway API Converging the Ingress Gateway from Kubernetes and Service Mesh&lt;/p&gt;
&lt;p&gt;As mentioned above, there is a partial functional intersection between the Gateway API and the service mesh. To reduce duplication of development and enable the modeling of common concerns between the Gateway API and the service mesh, the Gateway API Working Group has proposed the &lt;a href=&#34;https://gateway-api.sigs.k8s.io/contributing/gamma/&#34; title=&#34;Gateway API Mesh Management and Administration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API Mesh Management and Administration&lt;/a&gt;
 (GAMMA) initiative.&lt;/p&gt;
&lt;p&gt;Under this initiative, advanced traffic management features that vary in detail across gateway implementations, such as timeouts, retries, health checks, etc., will all be implemented by individual providers through &lt;a href=&#34;https://gateway-api.sigs.k8s.io/references/policy-attachment/&#34; title=&#34;policy attachment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;policy attachment&lt;/a&gt;
. You can specify the resource object to which the policy attachment is attached via the &lt;em&gt;targetRef&lt;/em&gt; field, as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.acme.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RetryPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;override&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRetries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRetries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the retry policy is attached to a resource named &lt;em&gt;foo&lt;/em&gt; and &lt;em&gt;HTTPRoute&lt;/em&gt;. Policy attachments are connected to different resource objects with varying priorities for effectiveness. For instance, GatewayClass is a cluster-level resource and will take precedence if the policy attachment is overlaid on it.&lt;/p&gt;
&lt;p&gt;You can assign override and default values to additional policies whose priority in the ingress and the different resources in the mesh hierarchy are shown in the figure below.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/policy-attachment-priority.svg&#34; data-img=&#34;/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/policy-attachment-priority.svg&#34; alt=&#34;image&#34; data-caption=&#34;Figure 6: Kubernetes Ingress and Mesh with Overrides and Default Priorities&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Figure 6: Kubernetes Ingress and Mesh with Overrides and Default Priorities&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Currently, the Gateway API is being explored to handle mesh traffic, and several &lt;a href=&#34;https://docs.google.com/document/d/1T_DtMQoq2tccLAtJTpo3c0ohjm25vRS35MsestSL9QU/edit#heading=h.6ks49gf06yii&#34; title=&#34;design options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;design options&lt;/a&gt;
 have been proposed.&lt;/p&gt;
&lt;h2 id=&#34;envoy-gateway&#34;&gt;Envoy Gateway&lt;/h2&gt;
&lt;p&gt;The first open-source version of Envoy Gateway, &lt;a href=&#34;https://blog.envoyproxy.io/introducing-envoy-gateway-ad385cc59532&#34; title=&#34;v0.2, was released&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v0.2, was released&lt;/a&gt;
 in October 2022. It was created based on the Envoy proxyâ€™s compliance with the Gateway API, of which &lt;a href=&#34;https://tetrate.io/&#34; title=&#34;Tetrate &#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate &lt;/a&gt;
is a core sponsor. Its expressive, scalable, role-oriented API design through ingress and L4/L7 traffic routing makes it the foundation for vendors to build value-added API gateway products.&lt;/p&gt;
&lt;p&gt;Long before Envoy Gateway was released, Envoy was massively adopted as one of the most popular cloud-native proxies, with several Gateway software builds based on Envoy, and the Istio service mesh used it as the default sidecar proxy and configured these distributed proxies via the xDS protocol. Envoy Gateway also uses xDS to configure the Envoy fleet. The following diagram illustrates the architecture of Envoy Gateway.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/envoy-gateway-arch.svg&#34; data-img=&#34;/en/blog/why-gateway-api-is-the-future-of-ingress-and-mesh/envoy-gateway-arch.svg&#34; alt=&#34;image&#34; data-caption=&#34;Figure: Envoy Gateway architecture&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Figure: Figure: Envoy Gateway architecture&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;The infrastructure provider will provide you with GatewayGlass. You can create an Envoy Gateway by creating a Gateway declaration. Your routing and policy attachments in the Gateway will be sent to the Envoy fleet via the xDS protocol.&lt;/p&gt;
&lt;p&gt;For further information about Envoy Gateway, please read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/hands-on-with-the-gateway-api-using-envoy-gateway-0-2/&#34; title=&#34;Hands on with the New Kubernetes Gateway API, Using Envoy Gateway 0.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hands on with the New Kubernetes Gateway API, Using Envoy Gateway 0.2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/gateway-to-the-future-the-new-gateway-api-and-envoy-gateway-0-2/&#34; title=&#34;Gateway to the Future: the New Kubernetes Gateway API and Envoy Gateway 0.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway to the Future: the New Kubernetes Gateway API and Envoy Gateway 0.2&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The Gateway API, as the next-generation Kubernetes Ingress API, provides a better degree of API specification for Kubernetes gateway providers as opposed to the Ingress API before, enriching the functionality of the ingress gateway while ensuring its portability and facilitating the management of gateways by different stakeholders through the separation of concerns. Finally, the GAMMA initiative is promoting the integration of the Ingress Gateway with the Gateway API for service mesh, and policy attachments may further extend the functionality of the Gateway API to east-west gateways.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This blog was originally published at &lt;a href=&#34;https://tetrate.io/blog/why-the-gateway-api-is-the-unified-future-of-ingress-for-kubernetes-and-service-mesh/&#34; title=&#34;tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tetrate.io&lt;/a&gt;
.&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

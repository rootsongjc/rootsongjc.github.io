<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - Cloud Native – sidecar</title>
    <link>https://jimmysong.io/en/tags/sidecar/</link>
    <description>Recent content in sidecar on Jimmy Song - Cloud Native</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017-2022 Jimmy Song All Right Reserved</copyright>
    <lastBuildDate>Sat, 07 May 2022 11:18:40 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/en/tags/sidecar/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Istio sidecar 中的流量类型及 iptables 规则详解</title>
      <link>https://jimmysong.io/en/blog/istio-sidecar-traffic-types/</link>
      <pubDate>Sat, 07 May 2022 11:18:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/en/blog/istio-sidecar-traffic-types/</guid>
      <description>
        
        
        &lt;p&gt;我在&lt;a href=&#34;https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/&#34; title=&#34;之前的一篇博客中&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;之前的一篇博客中&lt;/a&gt;
讲解过 Istio 中 sidecar 的注入、使用 iptables 进行透明流量拦截及流量路由的详细过程，并以 Bookinfo 示例中的 &lt;code&gt;productpage&lt;/code&gt; 服务访问 &lt;code&gt;reviews&lt;/code&gt; 服务，和 &lt;code&gt;reviews&lt;/code&gt; 服务访问 &lt;code&gt;ratings&lt;/code&gt; 服务为例绘制了透明流量劫持示意图。在那个示意图中仅展示了 &lt;code&gt;reviews&lt;/code&gt; pod 接收流量和对外访问的路由，实际上 sidecar 内的流量远不止于此。&lt;/p&gt;
&lt;p&gt;本文将向你展示 Istio sidecar 中的六种流量类型及其 iptables 规则，并以示意图的形式带你一览其全貌。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-中的-iptables-流量路由&#34;&gt;Sidecar 中的 iptables 流量路由&lt;/h2&gt;
&lt;p&gt;Sidecar 中的流量可以划分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程服务访问本地服务：Remote Pod -&amp;gt; Local Pod&lt;/li&gt;
&lt;li&gt;本地服务访问远程服务：Local Pod -&amp;gt; Remote Pod&lt;/li&gt;
&lt;li&gt;Prometheus 抓取本地服务的 metrics：Prometheus -&amp;gt; Local Pod&lt;/li&gt;
&lt;li&gt;本地 Pod 服务间的流量：Local Pod -&amp;gt; Local Pod&lt;/li&gt;
&lt;li&gt;Envoy 内部的进程间 TCP 流量&lt;/li&gt;
&lt;li&gt;Sidecar 到 Istiod 的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面将依次解释每个场景下 Sidecar 内的 iptables 路由规则。&lt;/p&gt;
&lt;h3 id=&#34;类型一remote-pod---local-pod&#34;&gt;类型一：Remote Pod -&amp;gt; Local Pod&lt;/h3&gt;
&lt;p&gt;以下是远程服务、应用或客户端访问数据平面本地 Pod IP 的 iptables 规则。&lt;/p&gt;
&lt;p&gt;Remote Pod -&amp;gt; &lt;code&gt;RREROUTING&lt;/code&gt; -&amp;gt; &lt;code&gt;ISTIO_INBOUND&lt;/code&gt; -&amp;gt; &lt;code&gt;ISTIO_IN_REDIRECT&lt;/code&gt; -&amp;gt; Envoy 15006（Inbound）-&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 1&lt;/strong&gt; -&amp;gt; &lt;code&gt;POSTROUTING&lt;/code&gt; -&amp;gt; Local Pod&lt;/p&gt;
&lt;p&gt;我们看到流量只经过一次 Envoy 15006 Inbound 端口。这种场景下的 iptables 规则的示意图如下。&lt;/p&gt;
&lt;p&gt;
  &lt;figure&gt;
  &lt;img src=&#34;remote-pod-local-pod.png&#34; alt=&#34;Remote Pod -&amp;amp;gt; Local Pod&#34;&gt;
  
  &lt;figcaption class=&#34;text-center&#34;&gt;Remote Pod -&amp;gt; Local Pod&lt;/figcaption&gt;
  
  &lt;/figure&gt;

&lt;/p&gt;
&lt;h3 id=&#34;类型二local-pod---remote-pod&#34;&gt;类型二：Local Pod -&amp;gt; Remote Pod&lt;/h3&gt;
&lt;p&gt;以下是本地 Pod IP 访问远程服务经过的 iptables 规则。&lt;/p&gt;
&lt;p&gt;Local Pod-&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 9&lt;/strong&gt; -&amp;gt; ISTIO_REDIRECT -&amp;gt; Envoy 15001（Outbound）-&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 4&lt;/strong&gt; -&amp;gt; &lt;code&gt;POSTROUTING&lt;/code&gt; -&amp;gt; Remote Pod&lt;/p&gt;
&lt;p&gt;我们看到流量只经过 Envoy 15001 Outbound 端口。这种场景下的 iptables 规则的示意图如下。&lt;/p&gt;
&lt;p&gt;
  &lt;figure&gt;
  &lt;img src=&#34;local-pod-remote-pod.png&#34; alt=&#34;Local Pod -&amp;amp;gt; Remote Pod&#34;&gt;
  
  &lt;figcaption class=&#34;text-center&#34;&gt;Local Pod -&amp;gt; Remote Pod&lt;/figcaption&gt;
  
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;以上两种场景中的流量都只经过一次 Envoy，因为该 Pod 中只有发出或接受请求一种场景发生。&lt;/p&gt;
&lt;h3 id=&#34;类型三prometheus---local-pod&#34;&gt;类型三：Prometheus -&amp;gt; Local Pod&lt;/h3&gt;
&lt;p&gt;Prometheus 抓取数据平面 metrics 的流量不会也无须经过 Envoy 代理。&lt;/p&gt;
&lt;p&gt;这些流量通过的 iptables 规则如下。&lt;/p&gt;
&lt;p&gt;Prometheus-&amp;gt; &lt;code&gt;RREROUTING&lt;/code&gt; -&amp;gt; &lt;code&gt;ISTIO_INBOUND&lt;/code&gt;（对目的地为 15002、15090 端口流量将转到 &lt;code&gt;INPUT&lt;/code&gt;）-&amp;gt; &lt;code&gt;INPUT&lt;/code&gt; -&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 3&lt;/strong&gt; -&amp;gt; &lt;code&gt;POSTROUTING&lt;/code&gt;  -&amp;gt; Local Pod&lt;/p&gt;
&lt;p&gt;这种场景下的 iptables 规则的示意图如下。&lt;/p&gt;
&lt;p&gt;
  &lt;figure&gt;
  &lt;img src=&#34;prometheus-local-pod.png&#34; alt=&#34;Prometheus -&amp;amp;gt; Local Pod&#34;&gt;
  
  &lt;figcaption class=&#34;text-center&#34;&gt;Prometheus -&amp;gt; Local Pod&lt;/figcaption&gt;
  
  &lt;/figure&gt;

&lt;/p&gt;
&lt;h3 id=&#34;类型四local-pod---local-pod&#34;&gt;类型四：Local Pod -&amp;gt; Local Pod&lt;/h3&gt;
&lt;p&gt;一个 Pod 可能同时存在两个或多个服务，如果 Local Pod 访问的服务也在该当前 Pod 上，流量会依次经过 Envoy 15001 和 Envoy 15006 端口最后到达本地 Pod 的服务端口上。&lt;/p&gt;
&lt;p&gt;这些流量通过的 iptables 规则如下。&lt;/p&gt;
&lt;p&gt;Local Pod-&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 9&lt;/strong&gt; -&amp;gt; &lt;code&gt;ISTIO_REDIRECT&lt;/code&gt; -&amp;gt; Envoy 15001（Outbound）-&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 2&lt;/strong&gt; -&amp;gt; &lt;code&gt;ISTIO_IN_REDIRECT&lt;/code&gt; -&amp;gt; Envoy 15006（Inbound）-&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 1&lt;/strong&gt; -&amp;gt; &lt;code&gt;POSTROUTING&lt;/code&gt; -&amp;gt; Local Pod&lt;/p&gt;
&lt;p&gt;这种场景下的 iptables 规则的示意图如下。&lt;/p&gt;
&lt;p&gt;
  &lt;figure&gt;
  &lt;img src=&#34;local-pod-local-pod.png&#34; alt=&#34;Local Pod -&amp;amp;gt; Local Pod&#34;&gt;
  
  &lt;figcaption class=&#34;text-center&#34;&gt;Local Pod -&amp;gt; Local Pod&lt;/figcaption&gt;
  
  &lt;/figure&gt;

&lt;/p&gt;
&lt;h3 id=&#34;类型五envoy-内部的进程间-tcp-流量&#34;&gt;类型五：Envoy 内部的进程间 TCP 流量&lt;/h3&gt;
&lt;p&gt;Envoy 内部进程的 UID 和 GID 为 1337，它们之间的流量将使用 lo 网卡，使用 localhost 域名来通信。&lt;/p&gt;
&lt;p&gt;这些流量通过的 iptables 规则如下。&lt;/p&gt;
&lt;p&gt;Envoy 进程（Localhost） -&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 8&lt;/strong&gt; -&amp;gt; &lt;code&gt;POSTROUTING&lt;/code&gt; -&amp;gt; Envoy 进程（Localhost）&lt;/p&gt;
&lt;p&gt;这种场景下的 iptables 规则的示意图如下。&lt;/p&gt;
&lt;p&gt;
  &lt;figure&gt;
  &lt;img src=&#34;envoy-internal-tcp-traffic.png&#34; alt=&#34;Envoy 内部的进程间 TCP 流量&#34;&gt;
  
  &lt;figcaption class=&#34;text-center&#34;&gt;Envoy 内部的进程间 TCP 流量&lt;/figcaption&gt;
  
  &lt;/figure&gt;

&lt;/p&gt;
&lt;h3 id=&#34;类型六sidecar-到-istiod-的流量&#34;&gt;类型六：Sidecar 到 Istiod 的流量&lt;/h3&gt;
&lt;p&gt;Sidecar 需要访问 Istiod 以同步配置，因此 Envoy 会有向 Istiod 发送流量。&lt;/p&gt;
&lt;p&gt;这些流量通过的 iptables 规则如下。&lt;/p&gt;
&lt;p&gt;Local Pod-&amp;gt; &lt;code&gt;OUTPUT&lt;/code&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;ISTIO_OUTPUT&lt;/code&gt; RULE 4&lt;/strong&gt; -&amp;gt; &lt;code&gt;POSTROUTING&lt;/code&gt;  -&amp;gt; Istiod&lt;/p&gt;
&lt;p&gt;这种场景下的 iptables 规则的示意图如下。&lt;/p&gt;
&lt;p&gt;
  &lt;figure&gt;
  &lt;img src=&#34;sidecar-istiod.png&#34; alt=&#34;Sidecar 到 Istiod 的流量&#34;&gt;
  
  &lt;figcaption class=&#34;text-center&#34;&gt;Sidecar 到 Istiod 的流量&lt;/figcaption&gt;
  
  &lt;/figure&gt;

&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio 注入在 Pod 内或虚拟机中安装的所有 sidecar 代理组成了服务网格的数据平面，也是 Istio 的主要工作负载所在地，通过 &lt;a href=&#34;https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/&#34; title=&#34;Istio 中的透明流量劫持&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 中的透明流量劫持&lt;/a&gt;
 及这篇博客，相信你一定对 sidecar 代理中的流量有了一个深刻的了解，但这还只是管中窥豹，略见一斑，在我的&lt;a href=&#34;https://jimmysong.io/blog/istio-components-and-ports/&#34; title=&#34;下一篇博客&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下一篇博客&lt;/a&gt;
中，我将带你了解 Envoy 中各个组件的端口及其功能，这样可以让我们对 Istio 中的流量有一个更全面的了解。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

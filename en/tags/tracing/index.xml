
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song â€“ Tracing</title>
    <link>https://jimmysong.io/en/tags/tracing/</link>
    <description>Recent content in Tracing on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>61582075856402432</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Thu, 26 Sep 2024 15:24:35 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/en/tags/tracing/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>How the Envoy Proxy Handles User Requests for Tracing</title>
      <link>https://jimmysong.io/en/blog/envoy-tracing/</link>
      <pubDate>Thu, 26 Sep 2024 15:24:35 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/en/blog/envoy-tracing/</guid>
      <description>
        
        
        &lt;p&gt;In a cloud-native environment, improving application observability to better understand user experience is crucial. However, relying solely on metrics and logs does not provide specific details for individual cases. This is where tracing technology becomes essential.&lt;/p&gt;
&lt;h2 id=&#34;basic-principles-of-tracing&#34;&gt;Basic Principles of Tracing&lt;/h2&gt;
&lt;p&gt;Tracing provides developers with a complete context of the user experience by attaching an associated ID to each user request. This associated ID acts like a thread that connects traces across multiple services, enabling comprehensive observability.&lt;/p&gt;
&lt;p&gt;The diagram below illustrates the flow of user requests processed by Envoy.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/3e14426a8706f1e658721863febb0d58.svg&#34; data-img=&#34;/en/blog/envoy-tracing/3e14426a8706f1e658721863febb0d58.svg&#34; alt=&#34;image&#34; data-caption=&#34;User Request and Envoy Proxy Processing Flow Diagram&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;User Request and Envoy Proxy Processing Flow Diagram&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Tracing&lt;/strong&gt; enables developers to have complete context of the user experience by appending an associated ID to each user request. This associated ID connects traces across multiple services.&lt;/p&gt;
&lt;p&gt;Although all requests pass through the Envoy proxy, it cannot independently provide complete tracing information. Envoy only sees the application as part of the network and lacks insights into internal processes. This limits Envoy&amp;rsquo;s ability to distinguish whether incoming and outgoing requests originate from the same user, thus it cannot automatically forward tracing context.&lt;/p&gt;
&lt;h2 id=&#34;request-context-in-the-service-mesh&#34;&gt;Request Context in the Service Mesh&lt;/h2&gt;
&lt;p&gt;Envoy can act as a Sidecar or Waypoint proxy in the Istio service mesh. The following diagram illustrates how Envoy handles request context within the service mesh.&lt;/p&gt;
&lt;h3 id=&#34;1-the-start-of-the-user-request&#34;&gt;1. The Start of the User Request&lt;/h3&gt;
&lt;p&gt;Tracing involves following the path across multiple services to understand the complete context of the user experience. Tracing begins with a user request assigned an associated ID.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/a7b787a1899db47cfb74a3f63fdd60cb.svg&#34; data-img=&#34;/en/blog/envoy-tracing/a7b787a1899db47cfb74a3f63fdd60cb.svg&#34; alt=&#34;image&#34; data-caption=&#34;Start of the User Request&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Start of the User Request&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;2-request-passing-through-envoy-proxy&#34;&gt;2. Request Passing Through Envoy Proxy&lt;/h3&gt;
&lt;p&gt;Envoy sits beside the application, and all incoming requests go through Envoy.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/294e6a2bd4ea694cb9e8039da41b388c.svg&#34; data-img=&#34;/en/blog/envoy-tracing/294e6a2bd4ea694cb9e8039da41b388c.svg&#34; alt=&#34;image&#34; data-caption=&#34;Request Passing Through Envoy Proxy&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Request Passing Through Envoy Proxy&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;3-envoy-adds-extra-headers&#34;&gt;3. Envoy Adds Extra Headers&lt;/h3&gt;
&lt;p&gt;Envoy can add extra headers to the request to gather information about what happens internally within the application.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/0626b8bc5b9a1f71f87a2ed3ac4a26fd.svg&#34; data-img=&#34;/en/blog/envoy-tracing/0626b8bc5b9a1f71f87a2ed3ac4a26fd.svg&#34; alt=&#34;image&#34; data-caption=&#34;Envoy Adds Extra Headers&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy Adds Extra Headers&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;4-application-processes-request-and-calls-backend-services&#34;&gt;4. Application Processes Request and Calls Backend Services&lt;/h3&gt;
&lt;p&gt;During request processing, the application may need to contact other systems, such as external authentication and authorization services.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/6d851064ab515a85731111767057ed1a.svg&#34; data-img=&#34;/en/blog/envoy-tracing/6d851064ab515a85731111767057ed1a.svg&#34; alt=&#34;image&#34; data-caption=&#34;Application Processes Request and Calls Backend Services&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Application Processes Request and Calls Backend Services&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;5-application-needs-to-copy-the-associated-id&#34;&gt;5. Application Needs to Copy the Associated ID&lt;/h3&gt;
&lt;p&gt;The application knows which outbound request corresponds to which inbound request (e.g., the request with Trace ID 1234). However, Envoy does not know this. Thus, the application must copy the associated ID and context from the inbound request to the outbound request.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/f665f07be64f3e3d5d547d0513a49947.svg&#34; data-img=&#34;/en/blog/envoy-tracing/f665f07be64f3e3d5d547d0513a49947.svg&#34; alt=&#34;image&#34; data-caption=&#34;Application Needs to Copy the Associated ID&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Application Needs to Copy the Associated ID&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;6-concurrent-handling-of-multiple-requests&#34;&gt;6. Concurrent Handling of Multiple Requests&lt;/h3&gt;
&lt;p&gt;In real scenarios, applications handle multiple user requests simultaneously, leading to concurrency. Since Envoy only sees network-level requests and responses, it cannot distinguish the causal relationships between these requests.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/8851146efa64bf28b23427eaa3c88753.svg&#34; data-img=&#34;/en/blog/envoy-tracing/8851146efa64bf28b23427eaa3c88753.svg&#34; alt=&#34;image&#34; data-caption=&#34;Concurrent Handling of Multiple Requests&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Concurrent Handling of Multiple Requests&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;7-limitations-of-envoy&#34;&gt;7. Limitations of Envoy&lt;/h3&gt;
&lt;p&gt;Since Envoy cannot see the internal processing logic of the application, it only observes a series of network requests and responses without knowing which outbound requests were triggered by which inbound requests.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/a3e1d4b42a3342b8089f30cfba68c457.svg&#34; data-img=&#34;/en/blog/envoy-tracing/a3e1d4b42a3342b8089f30cfba68c457.svg&#34; alt=&#34;image&#34; data-caption=&#34;Limitations of Envoy&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Limitations of Envoy&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;the-role-of-the-application&#34;&gt;The Role of the Application&lt;/h2&gt;
&lt;p&gt;Since Envoy cannot automatically forward tracing context, the application itself needs to be responsible for copying the headers from inbound requests to outbound requests to maintain the integrity of the tracing information.&lt;/p&gt;
&lt;h3 id=&#34;application-copies-headers&#34;&gt;Application Copies Headers&lt;/h3&gt;
&lt;p&gt;While processing inbound requests, the application needs to copy necessary headers (like associated ID and user identity) to any outbound requests.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/e5e99c435025f175807e7dd2912993fc.svg&#34; data-img=&#34;/en/blog/envoy-tracing/e5e99c435025f175807e7dd2912993fc.svg&#34; alt=&#34;image&#34; data-caption=&#34;Application Copies Headers&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Application Copies Headers&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h3 id=&#34;response-returns-to-user&#34;&gt;Response Returns to User&lt;/h3&gt;
&lt;p&gt;Once the application completes processing the user request, it returns the response to the user.&lt;/p&gt;

&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/envoy-tracing/d06d46d97409d875f695a10005550f6b.svg&#34; data-img=&#34;/en/blog/envoy-tracing/d06d46d97409d875f695a10005550f6b.svg&#34; alt=&#34;image&#34; data-caption=&#34;Response Returns to User&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Response Returns to User&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;solutions-and-recommendations&#34;&gt;Solutions and Recommendations&lt;/h2&gt;
&lt;p&gt;To ensure the integrity of tracing information, applications need to actively copy and transmit tracing-related headers. This can be achieved by integrating tools like &lt;a href=&#34;https://skywalking.apache.org/&#34; title=&#34;Apache SkyWalking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache SkyWalking&lt;/a&gt;, which not only supports distributed tracing but also includes performance monitoring and log analysis features. By utilizing SkyWalkingâ€™s libraries and agents, the process of copying headers and transmitting tracing information can be simplified.&lt;/p&gt;
&lt;p&gt;For details on using SkyWalking for distributed tracing in Istio, refer to &lt;a href=&#34;https://jimmysong.io/en/blog/distributed-tracing-with-skywalking-in-istio/&#34; title=&#34;this blog post&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importance of Tracing&lt;/strong&gt;: Tracing provides developers with complete context of user requests, aiding in better understanding and improving user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Role of Envoy&lt;/strong&gt;: Envoy serves as a proxy for network requests but cannot provide complete tracing information without assistance from the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Application Responsibility&lt;/strong&gt;: Applications must actively copy and transmit tracing-related headers to maintain context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Utilizing Tools&lt;/strong&gt;: Leveraging distributed tracing tools like Apache SkyWalking can enhance observability and streamline the header copying process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tetrate.io/blog/how-the-envoy-proxy-handles-a-user-request/&#34; title=&#34;How the Envoy proxy handles a user request - tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How the Envoy proxy handles a user request - tetrate.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/en/blog/distributed-tracing-with-skywalking-in-istio/&#34; title=&#34;How to Use SkyWalking for Distributed Tracing in Istio? - jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Use SkyWalking for Distributed Tracing in Istio? - jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

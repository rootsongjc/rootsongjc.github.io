
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song – Cloud Native</title>
    <link>https://jimmysong.io/en/tags/cloud-native/</link>
    <description>Recent content in Cloud Native on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    
      <follow_challenge>
        <feedId>61582075856402432</feedId>
        <userId>59800919738273792</userId>
      </follow_challenge>
    
    
    <lastBuildDate>Tue, 16 Apr 2024 12:54:49 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/en/tags/cloud-native/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>In-depth Analysis of CNCF&#39;s Cloud Native AI Whitepaper</title>
      <link>https://jimmysong.io/en/blog/cloud-native-ai-whitepaper/</link>
      <pubDate>Tue, 16 Apr 2024 12:54:49 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/en/blog/cloud-native-ai-whitepaper/</guid>
      <description>
        
        
        &lt;p&gt;In March 2024, during KubeCon EU, the Cloud Native Computing Foundation (CNCF) released its first detailed &lt;a href=&#34;https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/&#34; title=&#34;whitepaper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;whitepaper&lt;/a&gt; on Cloud Native Artificial Intelligence (CNAI). This report thoroughly explores the current state, challenges, and future directions of integrating Cloud Native technologies with artificial intelligence. This article delves into the core content of this whitepaper.&lt;/p&gt;
&lt;h2 id=&#34;what-is-cloud-native-ai&#34;&gt;What is Cloud Native AI?&lt;/h2&gt;
&lt;p&gt;Cloud Native AI refers to the approach of building and deploying artificial intelligence applications and workloads using Cloud Native technology principles. This includes leveraging microservices, containerization, declarative APIs, and continuous integration/continuous deployment (CI/CD) to enhance the scalability, reusability, and operability of AI applications.&lt;/p&gt;
&lt;p&gt;The diagram below illustrates the architecture of Cloud Native AI, redrawn based on the whitepaper.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/cloud-native-ai-whitepaper/cloud-native-ai.svg&#34; data-img=&#34;/en/blog/cloud-native-ai-whitepaper/cloud-native-ai.svg&#34; alt=&#34;image&#34; data-caption=&#34;Cloud Native AI Architecture&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cloud Native AI Architecture&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;h2 id=&#34;relationship-between-cloud-native-ai-and-cloud-native-technologies&#34;&gt;Relationship Between Cloud Native AI and Cloud Native Technologies&lt;/h2&gt;
&lt;p&gt;Cloud Native technologies provide a flexible, scalable platform that makes the development and operation of AI applications more efficient. Through containerization and microservices architecture, developers can iterate and deploy AI models rapidly while ensuring high availability and scalability of systems. Kubernetes and other Cloud Native tools provide essential support such as resource scheduling, automatic scaling, and service discovery.&lt;/p&gt;
&lt;p&gt;The whitepaper provides two examples illustrating the relationship between Cloud Native AI and Cloud Native technologies, namely running AI on Cloud Native infrastructure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huggingface.co/blog/hugging-face-endpoints-on-azure&#34; title=&#34;Hugging Face Collaborates with Microsoft to launch Hugging Face Model Catalog on Azure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugging Face Collaborates with Microsoft to launch Hugging Face Model Catalog on Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openai.com/research/scaling-kubernetes-to-7500-nodes&#34; title=&#34;OpenAI Scaling Kubernetes to 7,500 nodes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAI Scaling Kubernetes to 7,500 nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenges-of-cloud-native-ai&#34;&gt;Challenges of Cloud Native AI&lt;/h2&gt;
&lt;p&gt;Despite providing a solid foundation for AI applications, Cloud Native technologies still face challenges when integrating AI workloads with Cloud Native platforms. These challenges include the complexity of data preparation, resource requirements for model training, and maintaining the security and isolation of models in multi-tenant environments. Additionally, resource management and scheduling in Cloud Native environments are crucial, especially for large-scale AI applications, and further optimization is needed to support efficient model training and inference.&lt;/p&gt;
&lt;h2 id=&#34;development-path-of-cloud-native-ai&#34;&gt;Development Path of Cloud Native AI&lt;/h2&gt;
&lt;p&gt;The whitepaper proposes several development paths for Cloud Native AI, including improving resource scheduling algorithms to better support AI workloads, developing new service mesh technologies to enhance the performance and security of AI applications, and driving innovation and standardization of Cloud Native AI technology through open-source projects and community collaboration.&lt;/p&gt;
&lt;h2 id=&#34;cloud-native-ai-technology-landscape&#34;&gt;Cloud Native AI Technology Landscape&lt;/h2&gt;
&lt;p&gt;Cloud Native AI involves a variety of technologies, from containers and microservices to service meshes and serverless computing. Kubernetes is a key platform for deploying and managing AI applications, while service mesh technologies like Istio and Envoy provide powerful traffic management and security features. Additionally, monitoring tools like Prometheus and Grafana are essential for maintaining the performance and reliability of AI applications.&lt;/p&gt;
&lt;p&gt;Below is the Cloud Native AI landscape provided in the whitepaper.&lt;/p&gt;
&lt;h3 id=&#34;general-orchestration&#34;&gt;General Orchestration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Volcano&lt;/li&gt;
&lt;li&gt;Armada&lt;/li&gt;
&lt;li&gt;Kuberay&lt;/li&gt;
&lt;li&gt;Nvidia NeMo&lt;/li&gt;
&lt;li&gt;Yunikorn&lt;/li&gt;
&lt;li&gt;Kueue&lt;/li&gt;
&lt;li&gt;Flame&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;distributed-training&#34;&gt;Distributed Training&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kubeflow Training Operator&lt;/li&gt;
&lt;li&gt;Pytorch DDP&lt;/li&gt;
&lt;li&gt;TensorFlow Distributed&lt;/li&gt;
&lt;li&gt;Open MPI&lt;/li&gt;
&lt;li&gt;DeepSpeed&lt;/li&gt;
&lt;li&gt;Megatron&lt;/li&gt;
&lt;li&gt;Horovod&lt;/li&gt;
&lt;li&gt;Apla&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ml-serving&#34;&gt;ML Serving&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kserve&lt;/li&gt;
&lt;li&gt;Seldon&lt;/li&gt;
&lt;li&gt;VLLM&lt;/li&gt;
&lt;li&gt;TGT&lt;/li&gt;
&lt;li&gt;Skypilot&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cicd---delivery&#34;&gt;CI/CD - Delivery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kubeflow Pipelines&lt;/li&gt;
&lt;li&gt;Mlflow&lt;/li&gt;
&lt;li&gt;TFX&lt;/li&gt;
&lt;li&gt;BentoML&lt;/li&gt;
&lt;li&gt;MLRun&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-science&#34;&gt;Data Science&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Jupyter&lt;/li&gt;
&lt;li&gt;Kubeflow Notebooks&lt;/li&gt;
&lt;li&gt;PyTorch&lt;/li&gt;
&lt;li&gt;TensorFlow&lt;/li&gt;
&lt;li&gt;Apache Zeppelin&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;workload-observability&#34;&gt;Workload Observability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus&lt;/li&gt;
&lt;li&gt;Influxdb&lt;/li&gt;
&lt;li&gt;Grafana&lt;/li&gt;
&lt;li&gt;Weights and Biases (wandb)&lt;/li&gt;
&lt;li&gt;OpenTelemetry&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;automl&#34;&gt;AutoML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hyperopt&lt;/li&gt;
&lt;li&gt;Optuna&lt;/li&gt;
&lt;li&gt;Kubeflow Katib&lt;/li&gt;
&lt;li&gt;NNI&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;governance--policy&#34;&gt;Governance &amp;amp; Policy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kyverno&lt;/li&gt;
&lt;li&gt;Kyverno-JSON&lt;/li&gt;
&lt;li&gt;OPA/Gatekeeper&lt;/li&gt;
&lt;li&gt;StackRox Minder&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-architecture&#34;&gt;Data Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ClickHouse&lt;/li&gt;
&lt;li&gt;Apache Pinot&lt;/li&gt;
&lt;li&gt;Apache Druid&lt;/li&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;ScyllaDB&lt;/li&gt;
&lt;li&gt;Hadoop HDFS&lt;/li&gt;
&lt;li&gt;Apache HBase&lt;/li&gt;
&lt;li&gt;Presto&lt;/li&gt;
&lt;li&gt;Trino&lt;/li&gt;
&lt;li&gt;Apache Spark&lt;/li&gt;
&lt;li&gt;Apache Flink&lt;/li&gt;
&lt;li&gt;Kafka&lt;/li&gt;
&lt;li&gt;Pulsar&lt;/li&gt;
&lt;li&gt;Fluid&lt;/li&gt;
&lt;li&gt;Memcached&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Alluxio&lt;/li&gt;
&lt;li&gt;Apache Superset&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vector-databases&#34;&gt;Vector Databases&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Milvus&lt;/li&gt;
&lt;li&gt;Chroma&lt;/li&gt;
&lt;li&gt;Weaviate&lt;/li&gt;
&lt;li&gt;Quadrant&lt;/li&gt;
&lt;li&gt;Pinecone&lt;/li&gt;
&lt;li&gt;Extensions
&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Postgres SQL&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modelllm-observability&#34;&gt;Model/LLM Observability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Trulens&lt;/li&gt;
&lt;li&gt;Langfuse&lt;/li&gt;
&lt;li&gt;Deepchecks&lt;/li&gt;
&lt;li&gt;OpenLLMetry&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Finally, let me summarizes the following key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Role of the Open Source Community&lt;/strong&gt;: The whitepaper clearly points out the role of the open-source community in advancing Cloud Native AI, including accelerating innovation and reducing costs through open-source projects and extensive collaboration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importance of Cloud Native Technologies&lt;/strong&gt;: Cloud Native AI is built and deployed according to Cloud Native principles, highlighting the importance of repeatability and scalability. Cloud Native technologies provide an efficient development and runtime environment for AI applications, especially in terms of resource scheduling and service scalability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Challenges Exist&lt;/strong&gt;: Despite the many advantages brought by Cloud Native AI, there are still challenges in data preparation, model training resource requirements, and model security and isolation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Future Development Directions&lt;/strong&gt;: The whitepaper proposes development paths including optimizing resource scheduling algorithms to support AI workloads, developing new service mesh technologies to enhance performance and security, and leveraging open-source projects and community collaboration to further promote technological innovation and standardization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Technological Components&lt;/strong&gt;: Key technologies involved in Cloud Native AI include containers, microservices, service meshes, and serverless computing. Kubernetes plays a central role in deploying and managing AI applications, while service mesh technologies such as Istio and Envoy provide necessary traffic management and security.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details, please download the &lt;a href=&#34;https://www.cncf.io/reports/cloud-native-artificial-intelligence-whitepaper/&#34; title=&#34;Cloud Native AI Whitepaper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Native AI Whitepaper&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Service Mesh in 2021: The Ecosystem Is Emerging</title>
      <link>https://jimmysong.io/en/blog/service-mesh-in-2021/</link>
      <pubDate>Wed, 12 Jan 2022 16:43:27 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/en/blog/service-mesh-in-2021/</guid>
      <description>
        
        
        &lt;p&gt;As the service mesh architecture concept gains traction and the scenarios for its applications emerge, there is no shortage of discussions about it in the community. I have worked on service mesh with the community for 4 years now, and will summarize the development of service mesh in 2021 from this perspective. Since Istio is the most popular service mesh, this article will focus on the technical and ecological aspects of Istio.&lt;/p&gt;
&lt;h2 id=&#34;service-mesh-a-critical-tech-for-cloud-native-infrastructure&#34;&gt;Service mesh: a critical tech for Cloud Native Infrastructure&lt;/h2&gt;
&lt;p&gt;As one of the vital technologies &lt;a href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md&#34; title=&#34;defined by CNCF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;defined by CNCF&lt;/a&gt; for cloud native, Istio has been around for five years now. Their development has gone through the following periods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exploration phase: 2017-2018&lt;/li&gt;
&lt;li&gt;Early adopter phase: 2019-2020&lt;/li&gt;
&lt;li&gt;Large-scale landing and ecological development phase: 2021-present&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service mesh has crossed the “chasm”(refer &lt;a href=&#34;https://thinkinsights.net/strategy/crossing-the-chasm/&#34; title=&#34;Crossing the Chasm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crossing the Chasm&lt;/a&gt; theory) and is in between the “early majority” and “late majority” phases of adoption. Based on feedback from the audience of &lt;a href=&#34;https://github.com/tetratelabs/istio-weekly/&#34; title=&#34;Istio Weekly,&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Weekly,&lt;/a&gt; users are no longer blindly following new technologies for experimentation and are starting to consider whether they need them in their organization dialectically.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/en/blog/service-mesh-in-2021/008i3skNly1gysddnj9i2j30sg0fqaaz_hu10232820470949409616.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-in-2021/008i3skNly1gysddnj9i2j30sg0fqaaz.jpg&#34; data-img=&#34;/en/blog/service-mesh-in-2021/008i3skNly1gysddnj9i2j30sg0fqaaz.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;566&#34; alt=&#34;image&#34; data-caption=&#34;Cross the chasm&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cross the chasm&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;While new technologies and products continue to emerge, the service mesh, as part of the cloud native technology stack, has continued to solidify its position as the “cloud native network infrastructure” over the past year. The diagram below illustrates the cloud native technology stack model, where each layer has several representative technologies that define the standard. As new-age middleware, the service mesh mirrors other cloud native technologies, such as &lt;a href=&#34;https://dapr.io/&#34; title=&#34;Dapr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dapr&lt;/a&gt; (Distributed Application Runtime), which represents the capability model for cloud native middleware, &lt;a href=&#34;https://oam.dev/&#34; title=&#34;OAM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAM&lt;/a&gt;, which defines the cloud native application model, and the service mesh, which defines the L7 network model.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/en/blog/service-mesh-in-2021/008i3skNly1gysddogtenj30sg0qlwgs_hu9020974476947713945.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-in-2021/008i3skNly1gysddogtenj30sg0qlwgs.jpg&#34; data-img=&#34;/en/blog/service-mesh-in-2021/008i3skNly1gysddogtenj30sg0qlwgs.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;957&#34; alt=&#34;image&#34; data-caption=&#34;Cloud Native Stack&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cloud Native Stack&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;A layered view of the cloud native application platform technology stack&lt;/p&gt;
&lt;h2 id=&#34;optimizing-the-mesh-for-large-scale-production-applications-with-different-deployment-models&#34;&gt;Optimizing the mesh for large scale production applications with different deployment models&lt;/h2&gt;
&lt;p&gt;Over the past year, the community focused on the following areas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance optimization: performance issues of service mesh in large-scale application scenarios.&lt;/li&gt;
&lt;li&gt;Protocol and extensions: enabling service mesh to support arbitrary L7 network protocols.&lt;/li&gt;
&lt;li&gt;Deployment models: Proxyless vs. Node model vs. Sidecar model.&lt;/li&gt;
&lt;li&gt;eBPF: putting some of the service mesh’s capabilities to the kernel layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;performance-optimization&#34;&gt;Performance optimization&lt;/h3&gt;
&lt;p&gt;Istio was designed to serve service to service traffic by “proto-protocol forwarding”. The goal is making the service mesh as “transparent” as possible to applications. Thus using IPtables to hijack the traffic, according to the community-provided test results Istio 1.2 adds only 3 ms to the baseline latency for a mesh with 1000 RPS on 16 connections. However, because of issues inherent in the IPtables conntrack module, Istio’s performance issues begin to emerge as the mesh size increases. To optimize the performance of the Istio sidecar for resource usage and network latency, the community gave the following solutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sidecar configuration: By configuring service dependencies manually or by adding an Operator to the control plane, the number of service configurations sent to Sidecar can be reduced, thus reducing the resource footprint of the data plane; for more automatic and intelligent configuration of Sidecar, the open source projects &lt;a href=&#34;https://github.com/slime-io/slime&#34; title=&#34;Slime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slime&lt;/a&gt; and &lt;a href=&#34;https://github.com/aeraki-framework/aeraki&#34; title=&#34;Aeraki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aeraki&lt;/a&gt; both offer their innovative configuration loading solutions.&lt;/li&gt;
&lt;li&gt;The introduction of eBPF: eBPF can be a viable solution to optimize the performance of the service mesh. Some Cilium-based startups even radically propose to use eBPF to replace the Sidecar proxy completely. Still, the Envoy proxy/xDS protocol has become the proxy for the service mesh implementation and supports the Layer 7 protocol very well. We can use eBPF to improve network performance, but complex protocol negotiation, parsing, and user scaling remain challenging to implement on the user side.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;protocol-and-extensions&#34;&gt;Protocol and extensions&lt;/h3&gt;
&lt;p&gt;Extensibility of Istio has always been a significant problem, and there are two aspects to Istio’s extensibility.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protocol level: allowing Istio to support all L7 protocols&lt;/li&gt;
&lt;li&gt;Ecological: allowing Istio to run more extensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio uses Envoy as its data plane. Extending Istio is essentially an extension of Envoy’s functionality. Istio’s official solution is to use WebAssembly, and in Istio 1.12, the &lt;a href=&#34;https://www.tetrate.io/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Wasm plugin configuration API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasm plugin configuration API&lt;/a&gt; was introduced to extend the Istio ecosystem. Istio’s extension mechanism uses the &lt;a href=&#34;https://github.com/proxy-wasm/spec&#34; title=&#34;Proxy-Wasm Application Binary Interface (ABI)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proxy-Wasm Application Binary Interface (ABI)&lt;/a&gt; specification to provide a set of proxy-independent streaming APIs and utilities that can be implemented in any language with an appropriate SDK. Today, Proxy-Wasm’s SDKs are AssemblyScript (similar to TypeScript), C++, Rust, Zig, and Go (using the TinyGo WebAssembly System Interface).&lt;/p&gt;
&lt;p&gt;There are still relatively few WebAssembly extensions available, and many enterprises choose to customize their CRD and build a service mesh management plane based on Istio. In addition, making Istio support heterogeneous environments for all workloads, such as virtual machines and containers, is also in strong demand for end-users. It allows them to migrate applications from traditional loads to service mesh easily. Finally, there is the hybrid cloud traffic management with multiple clusters and mesh, which is a more advanced requirement.&lt;/p&gt;
&lt;h3 id=&#34;deployment-models&#34;&gt;Deployment models&lt;/h3&gt;
&lt;p&gt;When the service mesh concept first emerged, there was a debate between the Per-node and Sidecar models, represented by Linkerd and Istio. eBPF later proposed a kernel to sink the service mesh, which led to more service mesh deployment models, as shown in the figure below.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/en/blog/service-mesh-in-2021/008i3skNly1gysddpco2mj30qz0sgwhk_hu17001945077291041093.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-in-2021/008i3skNly1gysddpco2mj30qz0sgwhk.jpg&#34; data-img=&#34;/en/blog/service-mesh-in-2021/008i3skNly1gysddpco2mj30qz0sgwhk.jpg&#34; data-width=&#34;971&#34; data-height=&#34;1024&#34; alt=&#34;image&#34; data-caption=&#34;Service Mesh Deployment Models&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Service Mesh Deployment Models&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;These four deployment methods have their own advantages and disadvantages, the specific choice of which depends on the actual situation.&lt;/p&gt;
&lt;h3 id=&#34;development-of-the-istio-ecosystem-and-the-projects-that-support-istio&#34;&gt;Development of the Istio ecosystem and the projects that support Istio&lt;/h3&gt;
&lt;p&gt;2021 was also an exciting year for the Istio community, with a series of events and tutorials.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;February, the first Istio distribution, &lt;a href=&#34;https://istio.tetratelabs.io/&#34; title=&#34;Tetrate Istio Distro (TID)&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro (TID)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February, the first &lt;a href=&#34;https://events.istio.io/istiocon-2021/&#34; title=&#34;IstioCon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IstioCon&lt;/a&gt; was held online, with over 2,000 participants.&lt;/li&gt;
&lt;li&gt;March, the first free online &lt;a href=&#34;https://academy.tetrate.io/courses/istio-fundamentals&#34; title=&#34;Istio Fundamentals Course&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Fundamentals Course&lt;/a&gt; is released.&lt;/li&gt;
&lt;li&gt;May, the first &lt;a href=&#34;https://academy.tetrate.io/courses/certified-istio-administrator&#34; title=&#34;Certification Istio Administrator exam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Certification Istio Administrator exam&lt;/a&gt; be released.&lt;/li&gt;
&lt;li&gt;May, ServiceMeshCon Europe was held online.&lt;/li&gt;
&lt;li&gt;July, &lt;a href=&#34;https://istio.io/latest/zh/blog/2021/istiomeetups-china/&#34; title=&#34;Istio Meetup China&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Meetup China&lt;/a&gt; was held in Beijing with more than 100 attendees.&lt;/li&gt;
&lt;li&gt;October, ServiceMeshCon North America was held in Los Angeles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also numerous open source projects related to Istio Service Mesh, as shown in the table below.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Relationship with Istio&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Launch Date&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Dominant company&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Number of stars&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Cloud native high-performance edge/middle-service proxy&lt;/td&gt;
          &lt;td&gt;The default data plane&lt;/td&gt;
          &lt;td&gt;proxy&lt;/td&gt;
          &lt;td&gt;September 2016&lt;/td&gt;
          &lt;td&gt;Lyft&lt;/td&gt;
          &lt;td&gt;18700&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/istio/istio/&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Connection, secure, control, and observation services.&lt;/td&gt;
          &lt;td&gt;Control plane&lt;/td&gt;
          &lt;td&gt;service mesh&lt;/td&gt;
          &lt;td&gt;May 2017&lt;/td&gt;
          &lt;td&gt;Google&lt;/td&gt;
          &lt;td&gt;29100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/emissary-ingress/emissary&#34; title=&#34;Emissary Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Emissary Gateway&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Kubernetes native API gateway for microservices, built on Envoy&lt;/td&gt;
          &lt;td&gt;Connectable to Istio&lt;/td&gt;
          &lt;td&gt;gateway&lt;/td&gt;
          &lt;td&gt;February 2018&lt;/td&gt;
          &lt;td&gt;Ambassador&lt;/td&gt;
          &lt;td&gt;3600&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/apache/apisix&#34; title=&#34;APISIX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;APISIX&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Cloud native API gateways&lt;/td&gt;
          &lt;td&gt;It can run as a data plane for Istio or as a gateway on its own&lt;/td&gt;
          &lt;td&gt;gateway&lt;/td&gt;
          &lt;td&gt;June 2019&lt;/td&gt;
          &lt;td&gt;API7&lt;/td&gt;
          &lt;td&gt;8100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/mosn/mosn&#34; title=&#34;MOSN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MOSN&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Cloud native edge gateways &amp;amp; agents&lt;/td&gt;
          &lt;td&gt;Available as Istio data plane&lt;/td&gt;
          &lt;td&gt;proxy&lt;/td&gt;
          &lt;td&gt;December 2019&lt;/td&gt;
          &lt;td&gt;Ant&lt;/td&gt;
          &lt;td&gt;3500&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/slime-io/slime&#34; title=&#34;Slime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slime&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Intelligent service mesh manager based on Istio&lt;/td&gt;
          &lt;td&gt;Adding a management plane to Istio&lt;/td&gt;
          &lt;td&gt;extensions&lt;/td&gt;
          &lt;td&gt;January 2021&lt;/td&gt;
          &lt;td&gt;NetEase&lt;/td&gt;
          &lt;td&gt;236&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/tetratelabs/getmesh&#34; title=&#34;GetMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GetMesh&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Istio integration and command-line management tools&lt;/td&gt;
          &lt;td&gt;Utility for Istio multi-version management&lt;/td&gt;
          &lt;td&gt;tools&lt;/td&gt;
          &lt;td&gt;February 2021&lt;/td&gt;
          &lt;td&gt;Tetrate&lt;/td&gt;
          &lt;td&gt;95&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/aeraki-framework/aeraki&#34; title=&#34;Aeraki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aeraki&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Manage any of Istio’s seven layers of load&lt;/td&gt;
          &lt;td&gt;Extended multi-protocol support&lt;/td&gt;
          &lt;td&gt;extensions&lt;/td&gt;
          &lt;td&gt;March 2021&lt;/td&gt;
          &lt;td&gt;Tencent&lt;/td&gt;
          &lt;td&gt;330&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/mosn/layotto/&#34; title=&#34;Layotto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Layotto&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Cloud native application runtime&lt;/td&gt;
          &lt;td&gt;Using as a data plane for Istio&lt;/td&gt;
          &lt;td&gt;runtime&lt;/td&gt;
          &lt;td&gt;June 2021&lt;/td&gt;
          &lt;td&gt;Ant&lt;/td&gt;
          &lt;td&gt;393&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/hango-io/hango-gateway&#34; title=&#34;Hango Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hango Gateway&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;API gateways built on Envoy and Istio&lt;/td&gt;
          &lt;td&gt;Integrates with Istio&lt;/td&gt;
          &lt;td&gt;gateway&lt;/td&gt;
          &lt;td&gt;August 2021&lt;/td&gt;
          &lt;td&gt;NetEase&lt;/td&gt;
          &lt;td&gt;253&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: Data is as of January 6, 2022&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Looking back, we can see that, unlike previous years where users were experimenting, users in 2021 looked for more practical uses for service mesh before implementing them. Their position as the infrastructure of cloud native networks is further strengthened, and more importantly, the service mesh ecosystem is emerging. Looking ahead, in 2022, two technologies to watch are eBPF and WebAssembly(Wasm). We believe that more good examples of service mesh practices will emerge, taking the ecology and standardization a step further.&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>The Debate in the Community About Istio and Service Mesh</title>
      <link>https://jimmysong.io/en/blog/the-debate-in-the-community-about-istio-and-service-mesh/</link>
      <pubDate>Fri, 17 Dec 2021 16:43:27 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/en/blog/the-debate-in-the-community-about-istio-and-service-mesh/</guid>
      <description>
        
        
        &lt;p&gt;You can use Istio to do &lt;a href=&#34;https://www.tetrate.io/blog/multicluster-management-with-kubernetes-and-istio/&#34; title=&#34;multi-cluster management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;multi-cluster management&lt;/a&gt;, &lt;a href=&#34;https://www.tetrate.io/blog/istio-servicemesh-api-gateway/&#34; title=&#34;API Gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API Gateway&lt;/a&gt;, and manage applications on Kubernetes or &lt;a href=&#34;https://www.tetrate.io/blog/istio-18-a-virtual-machine-integration-odyssey/&#34; title=&#34;virtual machines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;virtual machines&lt;/a&gt;. In my &lt;a href=&#34;https://www.tetrate.io/blog/why-is-service-mesh-a-necessary-part-of-cloud-native/&#34; title=&#34;last blog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;last blog&lt;/a&gt;, I talked about how service mesh is an integral part of cloud native applications. However, building infrastructure can be a big deal. There is no shortage of debate in the community about the practicability of service mesh and Istio– here’s a list of common questions and concerns, and how to address them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is anyone using Istio in production?&lt;/li&gt;
&lt;li&gt;What is the impact on application performance due to the many resources consumed by injecting sidecar into the pod?&lt;/li&gt;
&lt;li&gt;Istio supports a limited number of protocols; is it scalable?&lt;/li&gt;
&lt;li&gt;Will Istio be manageable? – Or is it too complex, old services too costly to migrate, and the learning curve too steep?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will answer each of these questions below.&lt;/p&gt;
&lt;h3 id=&#34;istio-is-architecturally-stable-production-ready-and-ecologically-emerging&#34;&gt;Istio is architecturally stable, production-ready, and ecologically emerging&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tetrate.io/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;Istio 1.12&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.12&lt;/a&gt; was just released in November – and has evolved significantly since the explosion of service mesh in 2018 (the year Istio co-founders established Tetrate). Istio has a large community of providers and &lt;a href=&#34;https://istio.io/latest/about/case-studies/&#34; title=&#34;users&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;users&lt;/a&gt;. The Istio SIG of Cloud Native Community has held eight Istio Big Talk (Istio 大咖说), with Baidu, Tencent, NetEase, Xiaohongshu(小红书), and Xiaodian Technology(小电科技) sharing their Istio practices. According to &lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf&#34; title=&#34;CNCF Survey Report 2020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Survey Report 2020&lt;/a&gt;, about 50% of the companies surveyed are using a service mesh in production or planning to in the next year, and about half (47%) of organizations using a service mesh in production are using Istio.&lt;/p&gt;
&lt;p&gt;Many companies have developed extensions or plugins for Istio, such as Ant, NetEase, eBay, and Airbnb. Istio’s architecture has been stable since the 1.5 release, and the release cycle is fixed quarterly, with the current project’s main task being Day-2 Operations.&lt;/p&gt;
&lt;p&gt;The Istio community has also hosted various events, with the first IstioCon in March 2021, the Istio Meetup China in Beijing in July, and the Service Mesh Summit 2022 in Shanghai in January 2022.&lt;/p&gt;
&lt;p&gt;So we can say that the Istio architecture is stable and production-ready, and the ecosystem is budding.&lt;/p&gt;
&lt;h3 id=&#34;the-impact-of-service-mesh-on-application-performance&#34;&gt;The impact of service mesh on application performance&lt;/h3&gt;
&lt;p&gt;A service mesh uses iptables to do traffic hijacking by default to be transparent to applications. When the number of services is large, there are a lot of iptables rules that affect network performance. You can use techniques like &lt;a href=&#34;https://cloudnative.to/blog/how-ebpf-streamlines-the-service-mesh/&#34; title=&#34;eBPF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt; to provide application performance, but the method requires a high version of the operating system kernel, which few enterprises can achieve.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/en/blog/the-debate-in-the-community-about-istio-and-service-mesh/008i3skNly1gxgyfcfm5oj30sg0djmxt_hu13517020308666473535.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/en/blog/the-debate-in-the-community-about-istio-and-service-mesh/008i3skNly1gxgyfcfm5oj30sg0djmxt.jpg&#34; data-img=&#34;/en/blog/the-debate-in-the-community-about-istio-and-service-mesh/008i3skNly1gxgyfcfm5oj30sg0djmxt.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;487&#34; alt=&#34;image&#34; data-caption=&#34;Istio DNS&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Istio DNS&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;In the early days, Istio distributed the routing information of all services in the mesh to all proxy sidecars, which caused &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/sidecar/&#34; title=&#34;sidecar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sidecar&lt;/a&gt;s to take up a lot of resources. &lt;a href=&#34;https://github.com/aeraki-framework/aeraki&#34; title=&#34;Aeraki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aeraki&lt;/a&gt; and &lt;a href=&#34;https://github.com/slime-io/slime&#34; title=&#34;Slime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slime&lt;/a&gt; can achieve configuration lazy loading. We will introduce these two open-source projects in the Istio open-source ecosystem.&lt;/p&gt;
&lt;p&gt;Finally, there is a problem related to Sidecar proxy operation and maintenance: upgrading all Envoy proxies while ensuring constant traffic. A solution is using the &lt;a href=&#34;https://xie.infoq.cn/article/23ae6d3f0d0260b4797a708a0&#34; title=&#34;SidecarSet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SidecarSet&lt;/a&gt; resource in the open-source project &lt;a href=&#34;https://github.com/openkruise/kruise&#34; title=&#34;OpenKruise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenKruise&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The resource consumption and network latency associated with the introduction of Sidecar are also within reasonable limits, as you can see from the &lt;a href=&#34;https://istio.io/latest/blog/2019/performance-best-practices/&#34; title=&#34;service mesh benchmark performance tests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;service mesh benchmark performance tests&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;extending-the-istio-service-mesh&#34;&gt;Extending the Istio service mesh&lt;/h3&gt;
&lt;p&gt;The next question is about extending the Istio service mesh. The current solution given by the Istio community is to use &lt;a href=&#34;https://www.tetrate.io/blog/istio-wasm-extensions-and-ecosystem/&#34; title=&#34;WebAssembly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly&lt;/a&gt;, an extension that is still relatively little used in production by now and has performance concerns. Most of the answers I’ve observed are CRDs that build a service mesh management plane based on Istio.&lt;/p&gt;
&lt;p&gt;Also, making Istio support heterogeneous environments for all workloads, such as virtual machines and containers, is in strong demand for end-users. It allows them to migrate applications from traditional loads to cloud native easily. Finally, hybrid cloud traffic management for multiple clusters and meshes is a more advanced requirement.&lt;/p&gt;
&lt;h3 id=&#34;steep-learning-curve&#34;&gt;Steep learning curve&lt;/h3&gt;
&lt;p&gt;Many people complain that Istio has too little learning material. Istio has been open source for four years, and there are a lot of learning resources now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34; title=&#34;Istio Documentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://events.istio.io/istiocon-2021/&#34; title=&#34;IstioCon 2021&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IstioCon 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tetratelabs/istio-weekly&#34; title=&#34;Istio Big Talk/Istio Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Big Talk/Istio Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://academy.tetrate.io/courses/istio-fundamentals&#34; title=&#34;Istio Fundamentals Course&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Fundamentals Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://academy.tetrate.io/courses/certified-istio-administrator&#34; title=&#34;Certified Istio Administrator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Certified Istio Administrator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, Istio is complex, but it’s been getting more and more manageable with every release. In my next blog, I will introduce you to two open source projects that extend Istio and give you some insight into what’s going on in the Istio community.&lt;/p&gt;

      </description>
    </item>
                           
    <item>
      <title>Service Mesh - An Integral Part of Cloud-Native Applications</title>
      <link>https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/</link>
      <pubDate>Sun, 12 Dec 2021 16:43:27 +0800</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/</guid>
      <description>
        
        
        &lt;p&gt;If you don’t know what Istio is, you can read my previous articles below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tetrate.io/blog/what-is-istio-and-why-does-kubernetes-need-it/&#34; title=&#34;What Is Istio and Why Does Kubernetes Need it?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What Is Istio and Why Does Kubernetes Need it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tetrate.io/blog/why-do-you-need-istio-when-you-already-have-kubernetes/&#34; title=&#34;Why do you need Istio when you already have Kubernetes?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why do you need Istio when you already have Kubernetes?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article will explore the relationship between service mesh and cloud native.&lt;/p&gt;
&lt;h3 id=&#34;service-mesh--the-product-of-the-container-orchestration-war&#34;&gt;Service mesh – the product of the container orchestration war&lt;/h3&gt;
&lt;p&gt;If you’ve been following the cloud-native space since its early days, you’ll remember the container orchestration wars of 2015 to 2017. Kubernetes won the container wars in 2017, the idea of microservices had taken hold, and the trend toward containerization was unstoppable. Kubernetes architecture matured and slowly became boring, and service mesh technologies, represented by Linkerd and Istio, entered the CNCF-defined cloud-native critical technologies on the horizon.&lt;/p&gt;
&lt;p&gt;Kubernetes was designed with the concept of cloud-native in mind. A critical idea in cloud-native is the architectural design of microservices. When a single application is split into microservices, how can microservices be managed to ensure the SLA of the service as the number of services increases? The service mesh was born to solve this problem at the architectural level, free programmers’ creativity, and avoid tedious service discovery, monitoring, distributed tracing, and other matters.&lt;/p&gt;
&lt;p&gt;The service mesh takes the standard functionality of microservices down to the infrastructure layer, allowing developers to focus more on business logic and thus speed up service delivery, which is consistent with the whole idea of cloud-native. You no longer need to integrate bulky SDKs in your application, develop and maintain SDKs for different languages, and just use the service mesh for Day 2 operations after the application is deployed.&lt;/p&gt;
&lt;p&gt;The service mesh is regarded as the next generation of microservices. In the diagram, we can see that many of the concerns of microservices overlap with the functionality of Kubernetes. Kubernetes focuses on the application lifecycle, managing resources and deployments with little control over services. The service mesh fills this gap. The service mesh can connect, control, observe and protect microservices.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-vs-xds-vs-istio&#34;&gt;&lt;strong&gt;Kubernetes vs. xDS vs. Istio&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This diagram shows the layered architecture of Kubernetes and Istio.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxss9mamj30n90d73zs_hu2870319495385500292.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxss9mamj30n90d73zs.jpg&#34; data-img=&#34;/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxss9mamj30n90d73zs.jpg&#34; data-width=&#34;837&#34; data-height=&#34;475&#34; alt=&#34;image&#34; data-caption=&#34;Kubernetes vs xDS vs Istio&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Kubernetes vs xDS vs Istio&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;The diagram indicates that the kube-proxy settings are global and cannot be controlled at a granular level for each service. All Kubernetes can do is topology-aware routing, routing traffic closer to the Pod, and setting network policies in and out of the Pod.&lt;/p&gt;
&lt;p&gt;In contrast, the service mesh takes traffic control out of the service layer in Kubernetes through sidecar proxies, injects proxies into each Pod, and manipulates these distributed proxies through a control plane. It allows for more excellent resiliency.&lt;/p&gt;
&lt;p&gt;Kube-proxy implements traffic load balancing between multiple pod instances of a Kubernetes service. But how do you finely control the traffic between these services — such as dividing the traffic by percentage to different application versions (which are all part of the same service, but on other deployments), or doing canary releases and blue-green releases?&lt;/p&gt;
&lt;p&gt;The Kubernetes community gives a way to do canary releases using Deployment, assigning different pods to deployed services by modifying the pod’s label.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxsswmoij30sg0kl76r_hu2938588134839409657.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxsswmoij30sg0kl76r.jpg&#34; data-img=&#34;/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxsswmoij30sg0kl76r.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;741&#34; alt=&#34;image&#34; data-caption=&#34;Envoy Architecture&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;Envoy Architecture&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Currently, the most popular open-source implementation of service mesh in the world is Istio. From the &lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf&#34; title=&#34;CNCF Survey Report 2020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Survey Report 2020&lt;/a&gt;, we know that Istio is the most used service mesh in production today. Many companies have built their service mesh based on Istio, such as Ant, Airbnb, eBay, NetEase, Tencent, etc.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          
          &lt;picture&gt;
           &lt;source srcset=&#34;https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxstgg4qj30sg0gg0ts_hu8272012232240684255.webp&#34; type=&#34;image/webp&#34;&gt;
           &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxstgg4qj30sg0gg0ts.jpg&#34; data-img=&#34;/en/blog/service-mesh-an-integral-part-of-cloud-native-apps/008i3skNly1gxgxstgg4qj30sg0gg0ts.jpg&#34; data-width=&#34;1024&#34; data-height=&#34;592&#34; alt=&#34;image&#34; data-caption=&#34;CNCF Survey Report 2020&#34;&gt;
          &lt;/picture&gt;
        
      
    
  
  
  &lt;figcaption&gt;CNCF Survey Report 2020&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;Figure from &lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf&#34; title=&#34;CNCF Survey Report 2020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Survey Report 2020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Istio is developed based on Envoy, which has been used by default as its distributed proxy since the first day it was open-sourced. Envoy pioneered the creation of the xDS protocol for distributed gateway configuration, greatly simplifying the configuration of large-scale distributed networks. Ant Group open source MOSN also supported xDS In 2019. Envoy was also one of the first projects to graduate from CNCF, tested by large-scale production applications.&lt;/p&gt;
&lt;h3 id=&#34;service-mesh--the-cloud-native-networking-infrastructure&#34;&gt;Service mesh – the cloud-native networking infrastructure&lt;/h3&gt;
&lt;p&gt;With the above comparison between Kubernetes and service mesh in mind, we can see the place of service mesh in the cloud-native application architecture. That is, building a cloud-native network infrastructure specifically provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traffic management: controlling the flow of traffic and API calls between services, making calls more reliable, and enhancing network robustness in different environments.&lt;/li&gt;
&lt;li&gt;Observability: understanding the dependencies between services and the nature and flow of traffic between them provides the ability to identify problems quickly.&lt;/li&gt;
&lt;li&gt;Policy enforcement: controlling access policies between services by configuring the mesh rather than by changing the code.&lt;/li&gt;
&lt;li&gt;Service Identification and Security: providing service identifiability and security protection in the mesh.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

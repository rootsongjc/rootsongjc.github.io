
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song â€“ Cilium</title>
    <link>https://jimmysong.io/en/tags/cilium/</link>
    <description>Recent content in Cilium on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>Jimmy Song</managingEditor>
    <webMaster>Jimmy Song</webMaster>
    <lastBuildDate>Wed, 11 Sep 2024 00:00:00 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/en/tags/cilium/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
                                                         
    
                                                   
                           
    <item>
      <title>In-Depth Analysis of Four Service Mesh Data Plane Deployment Models and Selection Recommendations</title>
      <link>https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <author>Jimmy Song</author>
      <guid>https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/</guid>
      <description>
        
        
        &lt;p&gt;This article will introduce you to the four plane deployment modes of the Istio service mesh, analyzing their strengths and weaknesses to offer suggestions based on their performance, reliability, and security.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-service-mesh&#34;&gt;What is a Service Mesh?&lt;/h2&gt;
&lt;p&gt;A service mesh is an infrastructure layer that typically employs application proxies to facilitate various functionalities. Taking Istio as an example, it enables users to programmatically manage traffic aware of applications, ensure robust observability, and maintain solid security within the network. Istio ensures resilience in cloud-native and distributed systems, enabling modern enterprises to maintain their workloads across various platforms while ensuring connectivity and protection. Its capabilities include zero-trust security, policy management, access control for security and governance, as well as canary deployments, A/B testing, load balancing, and fault recovery for network functions. It also provides observability across all network traffic. Istio is unrestricted by any single cluster, network, or runtime and can incorporate services running on Kubernetes or virtual machines within a single mesh, whether across multi-cloud, hybrid, or on-premises environments. Its design is scalable and supported by an extensive ecosystem.&lt;/p&gt;
&lt;p&gt;The architecture of a service mesh is divided into the control plane and the data plane. In the case of Istio, &lt;code&gt;istiod&lt;/code&gt; acts as the control plane, while the data plane offers two deployment modes: sidecar or ambient.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/service-mesh.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/service-mesh.svg&#34; alt=&#34;image&#34; data-caption=&#34;Architecture of the Istio Service Mesh (Source: &amp;lt;a href=&amp;#34;https://istio.io/latest/about/service-mesh/&amp;#34; title=&amp;#34;istio.io&amp;#34; target=&amp;#34;_blank&amp;#34; rel=&amp;#34;noopener&amp;#34;&amp;gt;istio.io&amp;lt;/a&amp;gt;)&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Architecture of the Istio Service Mesh (Source: &lt;a href=&#34;https://istio.io/latest/about/service-mesh/&#34; title=&#34;istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio.io&lt;/a&gt;)&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;In fact, there are more than these two modes for deploying the service mesh data plane. Including Istio&amp;rsquo;s &lt;a href=&#34;https://istio.io/latest/blog/2021/proxyless-grpc/&#34; title=&#34;proxyless gRPC service mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proxyless gRPC service mesh&lt;/a&gt; and the &lt;a href=&#34;https://cilium.io/use-cases/service-mesh/&#34; title=&#34;Cilium service mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium service mesh&lt;/a&gt;, there are a total of four deployment modes.&lt;/p&gt;
&lt;h2 id=&#34;data-plane-deployment-modes&#34;&gt;Data Plane Deployment Modes&lt;/h2&gt;
&lt;p&gt;These four deployment modes are differentiated based on how proxies are associated with service instances.&lt;/p&gt;
&lt;p&gt;The following diagram illustrates potential locations for proxies in different deployment modes of the service mesh data plane.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/overview.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/overview.svg&#34; alt=&#34;image&#34; data-caption=&#34;Potential Locations of Proxies in the Data Plane&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Potential Locations of Proxies in the Data Plane&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;The data plane can be located in various parts of an application, differentiated based on how proxies/data planes are deployed within the service mesh. These modes are named based on their typical use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidecar Mode:&lt;/strong&gt; Runs both L4 and L7 proxies in each service instance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient Mode:&lt;/strong&gt; Shares an L4 proxy at the host level, with each service account or namespace using a dedicated L7 proxy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium Mesh Mode:&lt;/strong&gt; Shares both L4 and L7 proxies at the host level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC Mode:&lt;/strong&gt; No proxies; L4 and L7 functions are integrated parts of the application, such as with gRPC, Java Spring, or other RPC frameworks. This mode, though lacking traditional proxies, still implements all functionalities of a service mesh and existed even before the emergence of service meshes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table compares the service mesh data plane deployment modes across several dimensions.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Data Plane Mode&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Platform Security&lt;/strong&gt; - Threat assessment, risk&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cost&lt;/strong&gt; - Infrastructure/resource costs&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Manageability&lt;/strong&gt; - Upgrades, vulnerabilities&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Performance&lt;/strong&gt; - Latency&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sidecar Mode -&lt;/strong&gt; L4 and L7 Proxy per Service Instance&lt;/td&gt;
&lt;td&gt;High security, each service instance has an independent proxy, reducing attack surfaces. Risk management depends on control plane configuration.&lt;/td&gt;
&lt;td&gt;High resource consumption, each instance requires an independent proxy, increasing infrastructure costs.&lt;/td&gt;
&lt;td&gt;Centralized management and configuration needed, upgrades are relatively complex but can be simplified via the control plane.&lt;/td&gt;
&lt;td&gt;May increase latency, as requests need to be forwarded through the proxy.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ambient Mode -&lt;/strong&gt; Node-shared L4 proxy, service account-shared L7 proxy&lt;/td&gt;
&lt;td&gt;Lower security, multiple services share a proxy, increasing attack surfaces.&lt;/td&gt;
&lt;td&gt;Lower costs, multiple services share the same proxy.&lt;/td&gt;
&lt;td&gt;Relatively simple management, but shared proxies may be vulnerable.&lt;/td&gt;
&lt;td&gt;Better performance, lower latency, as requests do not need to be forwarded multiple times.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cilium Mesh Mode -&lt;/strong&gt; Shared L4 and L7 proxies&lt;/td&gt;
&lt;td&gt;Medium security, supports fine-grained access control.&lt;/td&gt;
&lt;td&gt;Moderate costs, shared resources reduce infrastructure overhead.&lt;/td&gt;
&lt;td&gt;Management is more complex, requiring handling of multiple services&amp;rsquo; configurations.&lt;/td&gt;
&lt;td&gt;Good performance, relatively low latency, suitable for high-concurrency scenarios.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;gRPC Mode -&lt;/strong&gt; L4 and L7 proxies integrated into the application&lt;/td&gt;
&lt;td&gt;Medium security, the code being part of the application itself means compromises could be more severe.&lt;/td&gt;
&lt;td&gt;Overall lower costs, as the proxy is implemented within the same process as the application.&lt;/td&gt;
&lt;td&gt;Complex management, regular updates, and maintenance of the application-layer proxy needed.&lt;/td&gt;
&lt;td&gt;Excellent performance, low latency, suitable for real-time applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption class=&#34;text-center&#34;&gt;
    
    Comparison of Four Service Mesh Deployment Modes
    
&lt;/figcaption&gt;

&lt;p&gt;You can see a more visual comparison of these four modes in terms of cost and security from the diagram below:&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/istio-data-plane-deployment-modes.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/istio-data-plane-deployment-modes.svg&#34; alt=&#34;image&#34; data-caption=&#34;Comparison of Service Mesh Deployment Modes&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Comparison of Service Mesh Deployment Modes&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;From the figure, it can be seen that the Sidecar mode has the highest security but also the highest cost, while the Ambient and Cilium modes offer moderate cost and security. The gRPC mode has the lowest cost but also moderate security.&lt;/p&gt;
&lt;p&gt;The following diagram illustrates potential locations for proxies in different deployment modes of the service mesh data plane.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/overview.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/overview.svg&#34; alt=&#34;image&#34; data-caption=&#34;Potential Locations of Proxies in the Data Plane&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Potential Locations of Proxies in the Data Plane&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidecar Mode&lt;/strong&gt;: The proxy is in the same Pod as the application container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient Mode&lt;/strong&gt;: The L4 proxy is on the same node as the application container, while the L7 proxy may not be on the same node.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium Mode&lt;/strong&gt;: The L4 and L7 proxies are combined and located on the same node as the application container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC Mode&lt;/strong&gt;: The gRPC framework is integrated into the application and deployed within the same container.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sidecar-mode-l4-and-l7-proxy-per-service-instance&#34;&gt;Sidecar Mode: L4 and L7 Proxy per Service Instance&lt;/h2&gt;
&lt;p&gt;The diagram below shows the communication paths in sidecar mode where Application 1 accesses Application 2 on the same node and Application 3 across nodes.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/sidecar-mode.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/sidecar-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;Sidecar Mode: L4 and L7 Proxy per Service Instance&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Sidecar Mode: L4 and L7 Proxy per Service Instance&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;This is the most common deployment mode for service meshes and was the initial mode supported by &lt;a href=&#34;https://istio.io&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;. Each service instance is accompanied by a proxy (such as &lt;a href=&#34;https://envoyproxy.io&#34; title=&#34;Envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;), which handles all inbound and outbound network communications, including L4 and L7 layers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advantages:&lt;/strong&gt; High security, as each service instance is isolated, reducing potential attack surfaces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt; High resource consumption, as each service instance requires a separate proxy, increasing infrastructure costs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maturity&lt;/strong&gt;: The maturity of the Istio Sidecar mode has reached the production level. They have undergone extensive testing and are ready for use in actual environments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ambient-mode-node-shared-l4-proxy-service-account-shared-l7-proxy&#34;&gt;Ambient Mode: Node-shared L4 Proxy, Service Account-shared L7 Proxy&lt;/h2&gt;
&lt;p&gt;The diagram below illustrates the communication paths in ambient mode where Application 1 accesses Application 2 on the same node and Application 3 across nodes.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/ambient-mode.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/ambient-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;Ambient Mode: Node-shared L4 Proxy, Service Account-shared L7 Proxy&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Ambient Mode: Node-shared L4 Proxy, Service Account-shared L7 Proxy&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;In this mode, a shared L4 proxy on each node serves all service instances on the same physical host, while each service account has a dedicated L7 proxy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advantages:&lt;/strong&gt; Lower costs, as the proxy is shared among multiple services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt; Lower security, as a compromised proxy might affect all services that depend on it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maturity&lt;/strong&gt;: The Istio ambient mode is currently in the beta stage, there are no large-scale production-level best practices yet, and it does not support multi-clusters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cilium-mesh-mode-shared-l4-and-l7-proxies&#34;&gt;Cilium Mesh Mode: Shared L4 and L7 Proxies&lt;/h2&gt;
&lt;p&gt;The diagram below displays the communication paths in Cilium mesh mode where Application 1 accesses Application 2 on the same node and Application 3 across nodes.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/cilium-mesh-mode.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/cilium-mesh-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;Cilium Mesh Mode: Shared L4 and L7 Proxies&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;Cilium Mesh Mode: Shared L4 and L7 Proxies&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;This mode is a middle ground between fully independent and fully shared setups, with each node having a shared L7 proxy. However, L4 functions like traffic routing can be managed without a proxy through kernel programs (e.g., eBPF programs) or a mesh proxy. An example of this data plane mode is the Cilium service mesh, which deploys Envoy proxies as L7 proxies according to its &lt;code&gt;CiliumEnvoyConfig&lt;/code&gt; specification. Using a CNI plugin like Cilium can achieve secure isolation between services while reducing resource usage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advantages:&lt;/strong&gt; Good balance between cost and performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt; Management is more complex, as it requires maintaining network policies for multiple services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maturity&lt;/strong&gt;: Cilium mesh manages L4 traffic directly through eBPF and configures the Envoy proxy on each node to control L7 traffic via CRDs (such as &lt;code&gt;CiliumEnvoyConfig&lt;/code&gt; and &lt;code&gt;CiliumClusterwideEnvoyConfig&lt;/code&gt;). The &lt;a href=&#34;https://github.com/cilium/proxy&#34; title=&#34;proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proxy&lt;/a&gt; is customized with minimal Envoy extensions and Cilium policy enforcement filters. As a result, this Cilium mesh may not support all the features of the Envoy proxy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;grpc-mode-l4-and-l7-part-of-the-application-mode&#34;&gt;gRPC Mode: L4 and L7 Part of the Application Mode&lt;/h2&gt;
&lt;p&gt;In the gRPC mode, no external proxies are deployed; proxy functions are directly integrated into the application using the RPC framework, hence significantly intruding into the application. The service mesh control plane uses a set of discovery APIs collectively known as xDS API to dynamically configure the application. The application&amp;rsquo;s gRPC client libraries provide extensive support for the xDS API. With this capability, the service mesh control plane can program the L4 and L7 proxy functions into this library within the service container.&lt;/p&gt;
&lt;p&gt;The diagram below illustrates how, in Istio&amp;rsquo;s gRPC mode, the control plane communicates with the application.&lt;/p&gt;
&lt;figure class=&#34;mx-auto text-center&#34;&gt;
  
  
  
    
      
        
          &lt;img src=&#34;https://jimmysong.io/en/blog/service-mesh-data-plane-deployment-modes/grpc-mode.svg&#34; data-img=&#34;/en/blog/service-mesh-data-plane-deployment-modes/grpc-mode.svg&#34; alt=&#34;image&#34; data-caption=&#34;gRPC Mode: L4 and L7 Proxies Integrated into the Application&#34;&gt;
        
      
    
  
  
  &lt;figcaption&gt;gRPC Mode: L4 and L7 Proxies Integrated into the Application&lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;p&gt;In this architecture, when a gRPC service communicates with the control plane, it does not require a traditional Sidecar proxy but instead utilizes a specific agent for initialization and communication with the control plane. This design reduces resource consumption and deployment complexity while still enabling service discovery, traffic management, etc. For example, in Kubernetes deployments, Pods only need to add specific annotations, and minimal code modifications are required on the client and server side to enable basic functionalities such as service discovery, partial DestinationRule and VirtualService functionalities, and limited Istio loadBalancer support. Although there are some limitations, it offers significant advantages in performance and resource usage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advantages:&lt;/strong&gt; Extremely high performance and security, as the proxy is tightly integrated with the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt; Higher costs due to the complex network processing functionalities that need to be implemented within the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maturity&lt;/strong&gt;: The gRPC mode of Istio is still in the experimental stage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;which-mode-should-i-use&#34;&gt;Which mode should I use?&lt;/h2&gt;
&lt;p&gt;As previously introduced, several factors influence the choice of a service mesh data plane deployment mode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maturity&lt;/li&gt;
&lt;li&gt;Enterprise security needs&lt;/li&gt;
&lt;li&gt;Resource constraints&lt;/li&gt;
&lt;li&gt;Performance requirements&lt;/li&gt;
&lt;li&gt;Network overhead&lt;/li&gt;
&lt;li&gt;Tolerance for management complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;maturity&#34;&gt;Maturity&lt;/h3&gt;
&lt;p&gt;When considering the deployment modes of the service mesh data plane, maturity is a key factor. The maturity level of each mode affects its reliability and support in production environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidecar Mode&lt;/strong&gt;: This is the most mature service mesh deployment mode, widely adopted in production environments and well-supported.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient Mode&lt;/strong&gt;: While this mode offers some cost and performance advantages, it is still in the early stages and may lack mature best practices and broad ecosystem support.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium Mesh Mode&lt;/strong&gt;: As a relatively new option, it offers unique technological advantages, especially in scenarios using eBPF. However, its maturity and widespread adoption may not be as extensive as the Sidecar mode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC Mode&lt;/strong&gt;: Despite excellent performance, the complexity and intrusiveness of this mode mean it may require more custom development and is still in the experimental stage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-requirements&#34;&gt;Security Requirements&lt;/h3&gt;
&lt;p&gt;If your business has high security requirements, such as in the financial or healthcare sectors, then the &lt;strong&gt;Sidecar Mode&lt;/strong&gt; might be the best choice. This mode provides the strongest security by ensuring each service instance has its own independent proxy, thus maximizing service isolation. However, if your applications do not handle sensitive data, or if security is not a primary concern, the &lt;strong&gt;Ambient Mode&lt;/strong&gt; or &lt;strong&gt;Cilium Mesh Mode&lt;/strong&gt; may be more economical options, offering lower proxy management overhead.&lt;/p&gt;
&lt;h3 id=&#34;resource-constraints&#34;&gt;Resource Constraints&lt;/h3&gt;
&lt;p&gt;In resource-constrained environments, deploying a separate proxy for each service instance may not be practical. In such cases, consider the &lt;strong&gt;gRPC Mode&lt;/strong&gt; or &lt;strong&gt;Ambient Mode&lt;/strong&gt;. &lt;strong&gt;gRPC Mode&lt;/strong&gt; is particularly suitable for organizations that already use gRPC extensively and are willing to handle complex networking functions internally within the application. The &lt;strong&gt;Ambient Mode&lt;/strong&gt;, on the other hand, uses a shared proxy to reduce resource consumption.&lt;/p&gt;
&lt;h3 id=&#34;performance-requirements&#34;&gt;Performance Requirements&lt;/h3&gt;
&lt;p&gt;For applications requiring high performance and low latency, the &lt;strong&gt;gRPC Mode&lt;/strong&gt; provides optimal performance because it eliminates the additional network hops introduced by traditional proxies. Simultaneously, the &lt;strong&gt;Cilium Mesh Mode&lt;/strong&gt; offers excellent performance by handling some network functions in the kernel, making it suitable for high-concurrency scenarios. However, it is important to note that the gRPC Mode is still experimental and may not support all features of Istio; consider your service mesh functionality needs accordingly.&lt;/p&gt;
&lt;p&gt;Indeed, network overhead and cost are significant considerations when choosing a service mesh data plane mode, especially in deployments across multiple availability zones or regions.&lt;/p&gt;
&lt;h3 id=&#34;management-complexity&#34;&gt;Management Complexity&lt;/h3&gt;
&lt;p&gt;Management complexity is also a significant consideration when choosing a service mesh data plane mode. &lt;strong&gt;Sidecar Mode&lt;/strong&gt; and &lt;strong&gt;gRPC Mode&lt;/strong&gt; may require more complex configurations and maintenance, while the &lt;strong&gt;Ambient Mode&lt;/strong&gt; and &lt;strong&gt;Cilium Mesh Mode&lt;/strong&gt; might offer a more streamlined management experience in some deployment environments.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Choosing the right service mesh data plane deployment mode depends on specific factors including maturity, security, resource constraints, performance, and management complexity. Here&amp;rsquo;s a quick guide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidecar Mode&lt;/strong&gt;: Best for high security needs, offering the most isolation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC Mode&lt;/strong&gt; or &lt;strong&gt;Cilium Mesh Mode&lt;/strong&gt;: Suitable for environments with limited resources and high-performance demands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ambient Mode&lt;/strong&gt;: Good for cost-effectiveness and lower isolation needs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium Mesh Mode&lt;/strong&gt;: Ideal for modern infrastructures utilizing eBPF technology.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best choice will align with your application requirements, security policies, and technical familiarity. Itâ€™s essential to understand each mode&amp;rsquo;s strengths and limitations to make an informed decision that balances benefits, risks, and costs.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This blog was initially published at &lt;a href=&#34;https://tetrate.io/blog/ambient-vs-sidecar/&#34; title=&#34;tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tetrate.io&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
